[
    {
        "title": "String Compression",
        "question_content": "Given an array of characters chars, compress it using the following algorithm:\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\n\n\tIf the group's length is 1, append the character to s.\n\tOtherwise, append the character followed by the group's length.\n\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\nAfter you are done modifying the input array, return the new length of the array.\nYou must write an algorithm that uses only constant extra space.\n&nbsp;\nExample 1:\n\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n\nExample 2:\n\nInput: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\n\nExample 3:\n\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n&nbsp;\nConstraints:\n\n\t1 <= chars.length <= 2000\n\tchars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.",
        "solutions": [
            {
                "id": 92559,
                "title": "simple-easy-to-understand-java-solution",
                "content": "```\\npublic int compress(char[] chars) {\\n        int indexAns = 0, index = 0;\\n        while(index < chars.length){\\n            char currentChar = chars[index];\\n            int count = 0;\\n            while(index < chars.length && chars[index] == currentChar){\\n                index++;\\n                count++;\\n            }\\n            chars[indexAns++] = currentChar;\\n            if(count != 1)\\n                for(char c : Integer.toString(count).toCharArray()) \\n                    chars[indexAns++] = c;\\n        }\\n        return indexAns;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int compress(char[] chars) {\\n        int indexAns = 0, index = 0;\\n        while(index < chars.length){\\n            char currentChar = chars[index];\\n            int count = 0;\\n            while(index < chars.length && chars[index] == currentChar){\\n                index++;\\n                count++;\\n            }\\n            chars[indexAns++] = currentChar;\\n            if(count != 1)\\n                for(char c : Integer.toString(count).toCharArray()) \\n                    chars[indexAns++] = c;\\n        }\\n        return indexAns;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 282239,
                "title": "python-two-pointers-solution-easy-to-understand-o-1-space",
                "content": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        walker, runner = 0, 0\\n        while runner < len(chars):\\n\\t\\t\\n            chars[walker] = chars[runner]\\n            count = 1\\n\\t\\t\\t\\n            while runner + 1 < len(chars) and chars[runner] == chars[runner+1]:\\n                runner += 1\\n                count += 1\\n\\t\\t\\t\\n            if count > 1:\\n                for c in str(count):\\n                    chars[walker+1] = c\\n                    walker += 1\\n            \\n\\t\\t\\trunner += 1\\n            walker += 1\\n        \\n        return walker\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        walker, runner = 0, 0\\n        while runner < len(chars):\\n\\t\\t\\n            chars[walker] = chars[runner]\\n            count = 1\\n\\t\\t\\t\\n            while runner + 1 < len(chars) and chars[runner] == chars[runner+1]:\\n                runner += 1\\n                count += 1\\n\\t\\t\\t\\n            if count > 1:\\n                for c in str(count):\\n                    chars[walker+1] = c\\n                    walker += 1\\n            \\n\\t\\t\\trunner += 1\\n            walker += 1\\n        \\n        return walker\\n```",
                "codeTag": "Java"
            },
            {
                "id": 175087,
                "title": "java-python",
                "content": "**Java**\\nFor a character `ch` in chars, we count its frequency `freq`. \\nIf freq = 1, we append `ch` only.\\nOr else, we append `ch` then `freq` (when freq >= 10, freq should cost `String.valueOf(freq).length()` indexes, e.g. \\'a12\\' should be [a, 1, 2]).\\n```\\n    public int compress(char[] chars) {\\n        \\n        if (chars == null || chars.length == 0)\\n            return 0;\\n        \\n        int index = 0, n = chars.length, i = 0;\\n        while (i < n) {\\n            char ch = chars[i];\\n            int j = i;\\n            while (j < n && chars[i] == chars[j]) { // chars[i..j - 1] are ch.\\n                j++;\\n            }\\n            int freq = j - i; // The frequency of ch.\\n            chars[index++] = ch;\\n            if (freq == 1) {\\n                \\n            }                \\n            else if (freq < 10) {\\n                chars[index++] = (char)(freq + \\'0\\');\\n            }\\n            else {\\n                String strFreq = String.valueOf(freq); \\n                for (char chFreq : strFreq.toCharArray())\\n                    chars[index++] = chFreq;\\n            }\\n            i = j;\\n        }\\n        \\n        return index;\\n    }\\n```\\n\\n**Python**\\nWhile iterating through chars, we count the frequency of characters.\\nWhen current character is the same as the previous one (`prev_ch`), we increate `cnt`.\\nOtherwise, we \"append\" `cnt` (of `prev_ch`) by `_append_cnt` method, and then \"append\" `ch`, and then reset `cnt` to 1, `prev_ch` to `ch`.\\n\\nHere we have to override `chars` rather than \"append\". So `self.chars_i` indicates which index in `chars` to override next.\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        self.chars_i = cnt = 1\\n        prev_ch = chars[0]\\n        for i in range(1, len(chars)):\\n            if prev_ch == chars[i]:\\n                cnt += 1\\n            else:\\n                self._append_cnt(cnt, chars)\\n                chars[self.chars_i] = chars[i]\\n                self.chars_i += 1\\n                cnt = 1\\n                prev_ch = chars[i]\\n        \\n        self._append_cnt(cnt, chars)\\n        return self.chars_i\\n              \\n    def _append_cnt(self, cnt, chars):\\n        if cnt > 1:\\n            if cnt < 10:\\n                chars[self.chars_i] = str(cnt)\\n                self.chars_i += 1\\n            else:\\n                for x in list(str(cnt)):\\n                    chars[self.chars_i] = str(x)\\n                    self.chars_i += 1\\n        return self.chars_i\\n```",
                "solutionTags": [],
                "code": "```\\n    public int compress(char[] chars) {\\n        \\n        if (chars == null || chars.length == 0)\\n            return 0;\\n        \\n        int index = 0, n = chars.length, i = 0;\\n        while (i < n) {\\n            char ch = chars[i];\\n            int j = i;\\n            while (j < n && chars[i] == chars[j]) { // chars[i..j - 1] are ch.\\n                j++;\\n            }\\n            int freq = j - i; // The frequency of ch.\\n            chars[index++] = ch;\\n            if (freq == 1) {\\n                \\n            }                \\n            else if (freq < 10) {\\n                chars[index++] = (char)(freq + \\'0\\');\\n            }\\n            else {\\n                String strFreq = String.valueOf(freq); \\n                for (char chFreq : strFreq.toCharArray())\\n                    chars[index++] = chFreq;\\n            }\\n            i = j;\\n        }\\n        \\n        return index;\\n    }\\n```\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        self.chars_i = cnt = 1\\n        prev_ch = chars[0]\\n        for i in range(1, len(chars)):\\n            if prev_ch == chars[i]:\\n                cnt += 1\\n            else:\\n                self._append_cnt(cnt, chars)\\n                chars[self.chars_i] = chars[i]\\n                self.chars_i += 1\\n                cnt = 1\\n                prev_ch = chars[i]\\n        \\n        self._append_cnt(cnt, chars)\\n        return self.chars_i\\n              \\n    def _append_cnt(self, cnt, chars):\\n        if cnt > 1:\\n            if cnt < 10:\\n                chars[self.chars_i] = str(cnt)\\n                self.chars_i += 1\\n            else:\\n                for x in list(str(cnt)):\\n                    chars[self.chars_i] = str(x)\\n                    self.chars_i += 1\\n        return self.chars_i\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866955,
                "title": "python-with-comments-explained",
                "content": "https://github.com/paulonteri/data-structures-and-algorithms\\n```\\nclass Solution(object):\\n\\n    def compress(self, chars):\\n\\n        length = len(chars)\\n\\n        # make it a bit faster\\n        if length < 2:\\n            return length\\n\\n        # the start position of the contiguous group of characters we are currently reading.\\n        anchor = 0\\n\\n        # position to Write Next\\n        # we start with 0 then increase it whenever we write to the array\\n        write = 0\\n\\n        # we go through each caharcter till we fiand a pos where the next is not equal to it\\n        # then we check if it has appeared more than once using the anchor and r(read) pointers\\n        # 1. iterate till we find a diffrent char\\n        # 2. record the no. of times the current char was repeated\\n        for pos, char in enumerate(chars):\\n\\n            # check if we have reached the end or a different char\\n            # check if we are end or the next char != the current\\n            if (pos + 1) == length or char != chars[pos+1]:\\n                chars[write] = char\\n                write += 1\\n\\n                # check if char has been repeated\\n                # have been duplicated if the read pointer is ahead of the anchor pointer\\n                if pos > anchor:\\n                    # check no. of times char has been repeated\\n                    repeated_times = pos - anchor + 1\\n\\n                    # write the number\\n                    for num in str(repeated_times):\\n                        chars[write] = num\\n                        write += 1\\n\\n                # move the anchor to the next char in the iteration\\n                anchor = pos + 1\\n\\n        return write\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n\\n    def compress(self, chars):\\n\\n        length = len(chars)\\n\\n        # make it a bit faster\\n        if length < 2:\\n            return length\\n\\n        # the start position of the contiguous group of characters we are currently reading.\\n        anchor = 0\\n\\n        # position to Write Next\\n        # we start with 0 then increase it whenever we write to the array\\n        write = 0\\n\\n        # we go through each caharcter till we fiand a pos where the next is not equal to it\\n        # then we check if it has appeared more than once using the anchor and r(read) pointers\\n        # 1. iterate till we find a diffrent char\\n        # 2. record the no. of times the current char was repeated\\n        for pos, char in enumerate(chars):\\n\\n            # check if we have reached the end or a different char\\n            # check if we are end or the next char != the current\\n            if (pos + 1) == length or char != chars[pos+1]:\\n                chars[write] = char\\n                write += 1\\n\\n                # check if char has been repeated\\n                # have been duplicated if the read pointer is ahead of the anchor pointer\\n                if pos > anchor:\\n                    # check no. of times char has been repeated\\n                    repeated_times = pos - anchor + 1\\n\\n                    # write the number\\n                    for num in str(repeated_times):\\n                        chars[write] = num\\n                        write += 1\\n\\n                # move the anchor to the next char in the iteration\\n                anchor = pos + 1\\n\\n        return write\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 222499,
                "title": "simple-c-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint compress(vector<char>& chars) {\\n\\t\\t\\tif(chars.size() < 2)\\n\\t\\t\\t\\treturn chars.size();\\n\\n\\t\\t\\tint  i = 0;\\n\\t\\t\\tint  j = 0;\\n\\n\\t\\t\\twhile(i < chars.size()) {\\n\\t\\t\\t\\tchars[j] = chars[i];\\n\\t\\t\\t\\tint cnt = 0;\\n\\t\\t\\t\\twhile(i < chars.size() && chars[i] == chars[j]) {\\n\\t\\t\\t\\t\\tcnt++;\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif(cnt == 1) {\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tstring str = to_string(cnt);\\n\\t\\t\\t\\t\\tfor(auto ch: str)\\n\\t\\t\\t\\t\\t\\tchars[++j] = ch;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn j;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint compress(vector<char>& chars) {\\n\\t\\t\\tif(chars.size() < 2)\\n\\t\\t\\t\\treturn chars.size();\\n\\n\\t\\t\\tint  i = 0;\\n\\t\\t\\tint  j = 0;\\n\\n\\t\\t\\twhile(i < chars.size()) {\\n\\t\\t\\t\\tchars[j] = chars[i];\\n\\t\\t\\t\\tint cnt = 0;\\n\\t\\t\\t\\twhile(i < chars.size() && chars[i] == chars[j]) {\\n\\t\\t\\t\\t\\tcnt++;\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 323715,
                "title": "c-concise-two-pointer-solution",
                "content": "- We write to the element at `i` and read from the element at `j`.\\n\\n```\\nint compress(vector<char>& chars) {\\n\\tint i = 0;\\n\\tfor(int j = 1, count = 1; j <= chars.size(); j++, count++) {\\n\\t\\tif(j == chars.size() || chars[j] != chars[j - 1]) {\\n\\t\\t\\tchars[i++] = chars[j - 1];  \\n\\t\\t\\tif(count >= 2) \\n\\t\\t\\t\\tfor(char digit : to_string(count)) \\n\\t\\t\\t\\t\\tchars[i++] = digit;\\n\\t\\t\\tcount = 0;\\n\\t\\t}\\n\\t}\\n\\treturn i;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nint compress(vector<char>& chars) {\\n\\tint i = 0;\\n\\tfor(int j = 1, count = 1; j <= chars.size(); j++, count++) {\\n\\t\\tif(j == chars.size() || chars[j] != chars[j - 1]) {\\n\\t\\t\\tchars[i++] = chars[j - 1];  \\n\\t\\t\\tif(count >= 2) \\n\\t\\t\\t\\tfor(char digit : to_string(count)) \\n\\t\\t\\t\\t\\tchars[i++] = digit;\\n\\t\\t\\tcount = 0;\\n\\t\\t}\\n\\t}\\n\\treturn i;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3245836,
                "title": "java-easy-string-two-pointers-with-explanation",
                "content": "**The Basic Intuition is to compress the string by counting occurences of duplicate characters in it and if the occurences of the character are greater than 1 then it can be compressed and that character with the occurences will added to the char array and if there is 1 occurence we will only add the character as it cannot be compressed.**\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i=0;\\n        int n=chars.length;\\n        int j=0;\\n        if(n==1)\\n            return 1;\\n        while(i<n){\\n            int count=1;\\n            char charac=chars[i];\\n            while(i+1<n && chars[i]==chars[i+1]){\\n                count++;\\n                i++;\\n            }\\n            if(count==1){\\n                chars[j++]=charac;\\n            }\\n            else{\\n                if(count>1){\\n                    chars[j++]=charac;\\n                    String counterstring=count+\"\";\\n                    for(int r=0;r<counterstring.length();r++){\\n                        chars[j++]=counterstring.charAt(r);\\n                    }\\n                }\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/1271c6fe-345b-4f3d-959e-d13e791111d7_1677726484.8832572.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i=0;\\n        int n=chars.length;\\n        int j=0;\\n        if(n==1)\\n            return 1;\\n        while(i<n){\\n            int count=1;\\n            char charac=chars[i];\\n            while(i+1<n && chars[i]==chars[i+1]){\\n                count++;\\n                i++;\\n            }\\n            if(count==1){\\n                chars[j++]=charac;\\n            }\\n            else{\\n                if(count>1){\\n                    chars[j++]=charac;\\n                    String counterstring=count+\"\";\\n                    for(int r=0;r<counterstring.length();r++){\\n                        chars[j++]=counterstring.charAt(r);\\n                    }\\n                }\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245804,
                "title": "clean-codes-full-explanation-two-pointers-c-java-python3",
                "content": "# Intuition :\\n- Given an array of characters, compress it in-place. The length after compression must always be smaller than or equal to the original array. Every element of the array should be a character (not int) of length 1.\\n- Example:\\n```\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput:\\nReturn 6, and the first 6 characters of the input array should be: \\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\nExplanation:\\n\"aa\" is replaced by \"a2\". \"bb\" is replaced by \"b2\". \"ccc\" is \\nreplaced by \"c3\".\\n```\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Detail Explanation to Approach :\\n- Here we are using two pointers, one for iterating through the original character array and one for keeping track of the current position in the compressed array. The two pointer variables used are `i` and `ans`.\\n- Now also use a variable to keep track of the count of consecutive characters.\\n- First set the current letter to the first character in the array and initializes the count to 0. \\n- Then iterate through the array until you find a different character or reach the end of the array. \\n- For each iteration, increment the count and the index i.\\n```\\n// iterate through input array using i pointer\\n    for (int i = 0; i < chars.length;) {\\n      final char letter = chars[i]; // current character being compressed\\n      int count = 0; // count of consecutive occurrences of letter\\n\\n      // count consecutive occurrences of letter in input array\\n      while (i < chars.length && chars[i] == letter) {\\n        ++count;\\n        ++i;\\n      }\\n\\n\\n``` \\n- When you find a different character or reach the end of the array, write the current letter to the compressed array and, if the count is greater than 1, write the count as a string to the compressed array. \\n- Then reset the count to 0 and set the current letter to the new letter.\\n```\\n// write letter to compressed array\\n      chars[ans++] = letter;\\n\\n      // if count is greater than 1, write count as string to compressed array\\n      if (count > 1) {\\n        // convert count to string and iterate over each character in string\\n        for (final char c : String.valueOf(count).toCharArray()) {\\n          chars[ans++] = c;\\n        }\\n      }\\n```\\n- Finally, return the length of the compressed array, which is equal to the position of the last character in the compressed array plus one.\\n```\\nreturn ans;//return length of compressed array\\n\\n```\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity :\\n- Time complexity : O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A\\n```\\n*Let\\'s Code it Up .\\nThere may be minor syntax difference in C++ and Python*\\n\\n# Codes [C++ |Java |Python3] : With Comments\\n```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int ans = 0;\\n\\n        // iterate through input vector using i pointer\\n        for (int i = 0; i < chars.size();) {\\n            const char letter = chars[i]; // current character being compressed\\n            int count = 0; // count of consecutive occurrences of letter\\n\\n            // count consecutive occurrences of letter in input vector\\n            while (i < chars.size() && chars[i] == letter) {\\n                ++count;\\n                ++i;\\n            }\\n\\n            // write letter to compressed vector\\n            chars[ans++] = letter;\\n\\n            // if count is greater than 1, write count as string to compressed vector\\n            if (count > 1) {\\n                // convert count to string and iterate over each character in string\\n                for (const char c : to_string(count)) {\\n                    chars[ans++] = c;\\n                }\\n            }\\n        }\\n\\n        // return length of compressed vector\\n        return ans;\\n    }\\n};\\n\\n```\\n```Java []\\nclass Solution {\\n  public int compress(char[] chars) {\\n    int ans = 0; // keep track of current position in compressed array\\n\\n    // iterate through input array using i pointer\\n    for (int i = 0; i < chars.length;) {\\n      final char letter = chars[i]; // current character being compressed\\n      int count = 0; // count of consecutive occurrences of letter\\n\\n      // count consecutive occurrences of letter in input array\\n      while (i < chars.length && chars[i] == letter) {\\n        ++count;\\n        ++i;\\n      }\\n\\n      // write letter to compressed array\\n      chars[ans++] = letter;\\n\\n      // if count is greater than 1, write count as string to compressed array\\n      if (count > 1) {\\n        // convert count to string and iterate over each character in string\\n        for (final char c : String.valueOf(count).toCharArray()) {\\n          chars[ans++] = c;\\n        }\\n      }\\n    }\\n\\n    // return length of compressed array\\n    return ans;\\n  }\\n}\\n\\n```\\n```Python3 []\\nclass Solution:\\n  def compress(self, chars: List[str]) -> int:\\n    ans = 0\\n    i = 0\\n\\n    while i < len(chars):\\n      letter = chars[i]\\n      count = 0\\n      while i < len(chars) and chars[i] == letter:\\n        count += 1\\n        i += 1\\n      chars[ans] = letter\\n      ans += 1\\n      if count > 1:\\n        for c in str(count):\\n          chars[ans] = c\\n          ans += 1\\n\\n    return ans\\n```\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n![ezgif-3-22a360561c.gif](https://assets.leetcode.com/users/images/505e7a3b-d0fd-419c-b925-f3351ffd0c1b_1677725940.6887608.gif)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput:\\nReturn 6, and the first 6 characters of the input array should be: \\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\nExplanation:\\n\"aa\" is replaced by \"a2\". \"bb\" is replaced by \"b2\". \"ccc\" is \\nreplaced by \"c3\".\\n```\n```\\n// iterate through input array using i pointer\\n    for (int i = 0; i < chars.length;) {\\n      final char letter = chars[i]; // current character being compressed\\n      int count = 0; // count of consecutive occurrences of letter\\n\\n      // count consecutive occurrences of letter in input array\\n      while (i < chars.length && chars[i] == letter) {\\n        ++count;\\n        ++i;\\n      }\\n\\n\\n```\n```\\n// write letter to compressed array\\n      chars[ans++] = letter;\\n\\n      // if count is greater than 1, write count as string to compressed array\\n      if (count > 1) {\\n        // convert count to string and iterate over each character in string\\n        for (final char c : String.valueOf(count).toCharArray()) {\\n          chars[ans++] = c;\\n        }\\n      }\\n```\n```\\nreturn ans;//return length of compressed array\\n\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int ans = 0;\\n\\n        // iterate through input vector using i pointer\\n        for (int i = 0; i < chars.size();) {\\n            const char letter = chars[i]; // current character being compressed\\n            int count = 0; // count of consecutive occurrences of letter\\n\\n            // count consecutive occurrences of letter in input vector\\n            while (i < chars.size() && chars[i] == letter) {\\n                ++count;\\n                ++i;\\n            }\\n\\n            // write letter to compressed vector\\n            chars[ans++] = letter;\\n\\n            // if count is greater than 1, write count as string to compressed vector\\n            if (count > 1) {\\n                // convert count to string and iterate over each character in string\\n                for (const char c : to_string(count)) {\\n                    chars[ans++] = c;\\n                }\\n            }\\n        }\\n\\n        // return length of compressed vector\\n        return ans;\\n    }\\n};\\n\\n```\n```Java []\\nclass Solution {\\n  public int compress(char[] chars) {\\n    int ans = 0; // keep track of current position in compressed array\\n\\n    // iterate through input array using i pointer\\n    for (int i = 0; i < chars.length;) {\\n      final char letter = chars[i]; // current character being compressed\\n      int count = 0; // count of consecutive occurrences of letter\\n\\n      // count consecutive occurrences of letter in input array\\n      while (i < chars.length && chars[i] == letter) {\\n        ++count;\\n        ++i;\\n      }\\n\\n      // write letter to compressed array\\n      chars[ans++] = letter;\\n\\n      // if count is greater than 1, write count as string to compressed array\\n      if (count > 1) {\\n        // convert count to string and iterate over each character in string\\n        for (final char c : String.valueOf(count).toCharArray()) {\\n          chars[ans++] = c;\\n        }\\n      }\\n    }\\n\\n    // return length of compressed array\\n    return ans;\\n  }\\n}\\n\\n```\n```Python3 []\\nclass Solution:\\n  def compress(self, chars: List[str]) -> int:\\n    ans = 0\\n    i = 0\\n\\n    while i < len(chars):\\n      letter = chars[i]\\n      count = 0\\n      while i < len(chars) and chars[i] == letter:\\n        count += 1\\n        i += 1\\n      chars[ans] = letter\\n      ans += 1\\n      if count > 1:\\n        for c in str(count):\\n          chars[ans] = c\\n          ans += 1\\n\\n    return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 92568,
                "title": "python-two-pointers-o-n-time-o-1-space",
                "content": "1. Group the array into repeated chunks, keeping track of the character and the count. This forms the encoded contents.\\n2. Update the original array with the encodede contents. We maintain a `left` pointer to know which position to update the original array with the encoded contents and increment it according to the length of the encoded contents.\\n\\nThe encoded contents will definitely be shorter than the original contents, so we can overwrite the original without worries.\\n\\n**\\uD83D\\uDCAF Check out https://www.techinterviewhandbook.org for more tips and tricks by me to ace your technical interview \\uD83D\\uDCAF**\\n\\n```\\nclass Solution(object):\\n    def compress(self, chars):\\n        left = i = 0\\n        while i < len(chars):\\n            char, length = chars[i], 1\\n            while (i + 1) < len(chars) and char == chars[i + 1]:\\n                length, i = length + 1, i + 1\\n            chars[left] = char\\n            if length > 1:\\n                len_str = str(length)\\n                chars[left + 1:left + 1 + len(len_str)] = len_str\\n                left += len(len_str)\\n            left, i = left + 1, i + 1\\n        return left\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        left = i = 0\\n        while i < len(chars):\\n            char, length = chars[i], 1\\n            while (i + 1) < len(chars) and char == chars[i + 1]:\\n                length, i = length + 1, i + 1\\n            chars[left] = char\\n            if length > 1:\\n                len_str = str(length)\\n                chars[left + 1:left + 1 + len(len_str)] = len_str\\n                left += len(len_str)\\n            left, i = left + 1, i + 1\\n        return left\\n```",
                "codeTag": "Java"
            },
            {
                "id": 122241,
                "title": "python-solution-with-detailed-explanation",
                "content": "**String Compression**\\n\\nhttps://leetcode.com/problems/string-compression/description/\\n\\n**Algorithm**\\n* Maintain a rptr and wptr to write in-place.\\n* Use 2 while loops - outer loop rptr < len(chars) and inner loops counts the streak of common characters.\\n* Always write the character, but only write the frequency when it is more than 1. Note that when f = 12, we need to write two characters: \"1\" and \"2\".\\n```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        rptr, wptr = 0, 0\\n        while rptr < len(chars):\\n            ch, f = chars[rptr], 0\\n            while rptr < len(chars) and chars[rptr] == ch:\\n                rptr, f = rptr+1, f+1\\n            chars[wptr], wptr = ch, wptr + 1\\n            if f > 1:\\n                for c in str(f):\\n                    chars[wptr], wptr = c, wptr + 1\\n        return wptr\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        rptr, wptr = 0, 0\\n        while rptr < len(chars):\\n            ch, f = chars[rptr], 0\\n            while rptr < len(chars) and chars[rptr] == ch:\\n                rptr, f = rptr+1, f+1\\n            chars[wptr], wptr = ch, wptr + 1\\n            if f > 1:\\n                for c in str(f):\\n                    chars[wptr], wptr = c, wptr + 1\\n        return wptr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245547,
                "title": "c-best-solution-beats-100-with-complete-explanation",
                "content": "# Intuition\\nThe problem is asking us to compress an input array of characters by replacing runs of consecutive repeating characters with the character followed by its count. For example, the input array [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] should be compressed to [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. The compressed array should be stored in the same input array and we need to return the new length of the array after compression.\\n\\nTo solve the problem, we need to keep track of the current character and its count as we iterate through the input array. When we encounter a different character, we append the current character and its count to the result array and reset the count to 1. To handle the case where the count is 10 or longer, we need to convert the count to a string and append each digit to the result array separately. Finally, we copy the characters from the result array back to the input array and return the new length of the array. The solution should use only constant extra space.\\n\\n# Approach\\nTo solve this problem, we can use a two-pointer approach to iterate through the input array of characters. We\\'ll keep track of the current character and its count as we iterate through the array. When we encounter a different character, we\\'ll append the current character and its count (if count > 1) to the result string s, and reset the count to 1. At the end of the loop, we\\'ll append the last character and its count to s. Finally, we\\'ll copy the characters from s back to the input array chars.\\n\\nTo handle the case where the count is 10 or longer, we can convert the count to a string and append each digit to s separately. We\\'ll also need to check if the string s is longer than the input array chars and return the length of chars in this case.\\n\\nHere are the steps:\\n\\n1. Initialize two pointers i and j to the first element of the array.\\n2. Initialize a count variable to 1 and a result string s to empty.\\n3. Iterate through the array from i = 0 to i < chars.size().\\n4. If chars[i] is equal to chars[j], increment the count variable.\\n5. If chars[i] is not equal to chars[j], append chars[j] and its count to s (if count > 1), and reset the count to 1. Set j to i.\\n6. After the loop, append chars[j] and its count to s (if count > 1).\\n7. If the length of s is longer than chars, copy the characters from s to chars.\\n8. Return the length of chars.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this approach is O(n), where n is the length of the input array chars, since we iterate through the array only once.\\n\\n- Space complexity:\\n The space complexity is O(1), since we use only constant extra space.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.empty()) return 0;\\n        char curr = chars[0];\\n        int count = 1;\\n        string s;\\n        for (int i = 1; i <= chars.size(); i++) {\\n            if (i < chars.size() && chars[i] == curr) {\\n                count++;\\n            } else {\\n                s.push_back(curr);\\n                if (count > 1) {\\n                    string str = to_string(count);\\n                    for (char c : str) {\\n                        s.push_back(c);\\n                    }\\n                }\\n                curr = i < chars.size() ? chars[i] : 0;\\n                count = 1;\\n            }\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            chars[i] = s[i];\\n        }\\n        return s.size();\\n    }\\n};\\n//\\uD83D\\uDC47please upvote the solution if you liked my approach",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.empty()) return 0;\\n        char curr = chars[0];\\n        int count = 1;\\n        string s;\\n        for (int i = 1; i <= chars.size(); i++) {\\n            if (i < chars.size() && chars[i] == curr) {\\n                count++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 486470,
                "title": "python-3-98-100-this-task-sucks",
                "content": "Me :  Why not just store \\'12\\' instead of \\'1\\',\\'2\\' in the list, dude?\\nAuthor: More loops more fun.\\n\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        count = 1\\n        for i in range(len(chars)-1,-1,-1):\\n            if i and chars[i]==chars[i-1]:\\n                count += 1\\n                chars.pop(i)\\n            else:\\n                if count>1:\\n                    for item in str(count)[::-1]:\\n                        chars.insert(i+1, item)\\n                    count = 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        count = 1\\n        for i in range(len(chars)-1,-1,-1):\\n            if i and chars[i]==chars[i-1]:\\n                count += 1\\n                chars.pop(i)\\n            else:\\n                if count>1:\\n                    for item in str(count)[::-1]:\\n                        chars.insert(i+1, item)\\n                    count = 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245569,
                "title": "look-at-once-solutions-in-java-python-and-c-with-video-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires us to compress the input character array in place using a given algorithm. We need to count the consecutive groups of identical characters and replace them with a character followed by its count. For example, `aaa` should become `a3`. If a group has only one character, we do not add any count. If a group has a count greater than or equal to 10, we split it into multiple characters. We can use two pointers to keep track of the characters to be replaced and their counts.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can use two pointers `i` and `j` to traverse the input array. We initialize both pointers\\nto 0. We iterate over the input array using `j` pointer until `j` reaches the end of the array.\\nWe keep track of the count of consecutive identical characters using a variable `count`.\\nWhen `chars[j]` is not equal to `chars[j-1]`, we add `chars[i]` to the compressed array.\\nIf `count` is greater than 1, we convert it to a string and add it to the compressed array. We\\nthen move the `i` pointer to the next position and reset the `count` to 1. We continue this\\nprocess until we reach the end of the input array. Finally, we return the length of thecompressed array.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$, where n is the length of the input array. We traverse the array only once.\\n\\n- Space complexity: $$O(1)$$, since we are performing the compression in place and using a constant amount of extra space.\\n\\n\\n\\n# Video reference\\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6W1MDK7nPZs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\\n\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n\\n\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n\\n# Code\\n```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int count = 1;\\n            while (i + 1 < n && chars[i] == chars[i + 1]) {\\n                i++;\\n                count++;\\n            }\\n            chars[j] = chars[i];\\n            j++;\\n            if (count > 1) {\\n                String countStr = String.valueOf(count);\\n                for (int k = 0; k < countStr.length(); k++) {\\n                    chars[j] = countStr.charAt(k);\\n                    j++;\\n                }\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n}\\n\\n```\\n``` Python []\\nclass Solution(object):\\n    def compress(self, chars):\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        write_idx = 0\\n        curr_idx = 0\\n        while curr_idx < n:\\n            curr_char = chars[curr_idx]\\n            cnt = 0\\n            while curr_idx < n and chars[curr_idx] == curr_char:\\n                curr_idx += 1\\n                cnt += 1\\n            chars[write_idx] = curr_char\\n            write_idx += 1\\n            if cnt > 1:\\n                cnt_str = str(cnt)\\n                for i in range(len(cnt_str)):\\n                    chars[write_idx] = cnt_str[i]\\n                    write_idx += 1\\n        \\n        return write_idx\\n\\n\\n```\\n``` C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if (n == 1) return 1;\\n        \\n        int write_idx = 0, curr_idx = 0;\\n        while (curr_idx < n) {\\n            char curr_char = chars[curr_idx];\\n            int cnt = 0;\\n            while (curr_idx < n && chars[curr_idx] == curr_char) {\\n                curr_idx++;\\n                cnt++;\\n            }\\n            chars[write_idx++] = curr_char;\\n            if (cnt > 1) {\\n                string cnt_str = to_string(cnt);\\n                for (int i = 0; i < cnt_str.size(); i++) {\\n                    chars[write_idx++] = cnt_str[i];\\n                }\\n            }\\n        }\\n        return write_idx;\\n    }\\n};\\n\\n```\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int count = 1;\\n            while (i + 1 < n && chars[i] == chars[i + 1]) {\\n                i++;\\n                count++;\\n            }\\n            chars[j] = chars[i];\\n            j++;\\n            if (count > 1) {\\n                String countStr = String.valueOf(count);\\n                for (int k = 0; k < countStr.length(); k++) {\\n                    chars[j] = countStr.charAt(k);\\n                    j++;\\n                }\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n}\\n\\n```\n``` Python []\\nclass Solution(object):\\n    def compress(self, chars):\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        write_idx = 0\\n        curr_idx = 0\\n        while curr_idx < n:\\n            curr_char = chars[curr_idx]\\n            cnt = 0\\n            while curr_idx < n and chars[curr_idx] == curr_char:\\n                curr_idx += 1\\n                cnt += 1\\n            chars[write_idx] = curr_char\\n            write_idx += 1\\n            if cnt > 1:\\n                cnt_str = str(cnt)\\n                for i in range(len(cnt_str)):\\n                    chars[write_idx] = cnt_str[i]\\n                    write_idx += 1\\n        \\n        return write_idx\\n\\n\\n```\n``` C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if (n == 1) return 1;\\n        \\n        int write_idx = 0, curr_idx = 0;\\n        while (curr_idx < n) {\\n            char curr_char = chars[curr_idx];\\n            int cnt = 0;\\n            while (curr_idx < n && chars[curr_idx] == curr_char) {\\n                curr_idx++;\\n                cnt++;\\n            }\\n            chars[write_idx++] = curr_char;\\n            if (cnt > 1) {\\n                string cnt_str = to_string(cnt);\\n                for (int i = 0; i < cnt_str.size(); i++) {\\n                    chars[write_idx++] = cnt_str[i];\\n                }\\n            }\\n        }\\n        return write_idx;\\n    }\\n};\\n\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246103,
                "title": "very-easy-100-easiest-logic-ever-fully-explained-step-by-step-c-javascript-java",
                "content": "\\n# Approach\\nThis solution uses two pointers **i** and **j** to iterate through the input array. The variable count keeps track of the number of consecutive characters that are equal to the current character curr. When a new character is encountered, the current character and its count (if greater than 1) are written to the output array using the **chars** array and the **i** pointer.\\n\\nFinally, the function returns **i**, which represents the length of the compressed array.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity is O(n), where n is the length of the input array.\\n\\nThis is because the solution uses two pointers **i** and **j** to iterate through the input array. The outer while loop executes n times, where n is the length of the input array. The inner while loop executes a maximum of n times in total across all iterations of the outer while loop.\\n\\nTherefore, the total number of operations performed by the solution is **O(n + n) = O(2n)**, which is equivalent to **O(n)** in asymptotic notation.\\n\\n- Space complexity:\\nO(1)\\n\\n# Code \\n```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let i = 0;\\n    let j = 0;\\n    while (j < chars.length) {\\n        let count = 0;\\n        let curr = chars[j];\\n        while (j < chars.length && chars[j] === curr) {\\n            j++;\\n            count++;\\n        }\\n        chars[i++] = curr;\\n        if (count > 1) {\\n            for (let digit of count.toString()) {\\n                chars[i++] = digit;\\n            }\\n        }\\n    }\\n    return i;\\n};\\n```\\n# Code \\n```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function (chars) {\\n  let index = 0;\\n  let i = 0;\\n  while (i < chars.length) {\\n    let j = i;\\n    while (j < chars.length && chars[j] === chars[i]) {\\n      j++;\\n    }\\n    chars[index++] = chars[i];\\n    if (j - i > 1) {\\n      let count = j - i;\\n      for (let digit of count.toString()) {\\n        chars[index++] = digit;\\n      }\\n    }\\n    i = j;\\n  }\\n  return index;\\n};\\n```\\n\\nI am working hard for you guys...\\nPlease upvote if you found any help with this code...",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let i = 0;\\n    let j = 0;\\n    while (j < chars.length) {\\n        let count = 0;\\n        let curr = chars[j];\\n        while (j < chars.length && chars[j] === curr) {\\n            j++;\\n            count++;\\n        }\\n        chars[i++] = curr;\\n        if (count > 1) {\\n            for (let digit of count.toString()) {\\n                chars[i++] = digit;\\n            }\\n        }\\n    }\\n    return i;\\n};\\n```\n```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function (chars) {\\n  let index = 0;\\n  let i = 0;\\n  while (i < chars.length) {\\n    let j = i;\\n    while (j < chars.length && chars[j] === chars[i]) {\\n      j++;\\n    }\\n    chars[index++] = chars[i];\\n    if (j - i > 1) {\\n      let count = j - i;\\n      for (let digit of count.toString()) {\\n        chars[index++] = digit;\\n      }\\n    }\\n    i = j;\\n  }\\n  return index;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3245868,
                "title": "simple-diagram-explanation",
                "content": "# Idea\\n---\\n- Here are some things we want to ask ourselves:\\n    - What to do when a character group is of length 1?\\n    - What to do when a character ground is length > 1?\\n    - How do I solve this in-place (for constant space complexity)?\\n\\n---\\n- The reason the question is called **string compression** could be understood if we see resulting `chars` array size will always be **less than or equal to** than the original size. \\n- Consider the two operations: if character group is of length 1, then no change occurs; if character group is of length > 1, then we end up compressing the length (i.e. 10 characters only take up 3 spaces)\\n\\n- From what we understand so far, the question is not hard. We just need to look through the `chars` array and perform the two operations. \\n- But another constraint is that we must do this in-place. What does this entail for us?\\n- This means when we perform operation 2 (which compresses) we could end up with unused array space. This would be problematic since we want `char` array to be condensed. \\n----\\n- To tackle this issue, we will use a two pointers approach. \\n- While iterating through `chars` to perform the operations, keep track of the next index to write into so unused space is considered. \\n\\n\\n# Example \\n\\n- Consider the case `[\"a\",\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"b\",\"b\",\"b\",]`\\n\\n![1.jfif](https://assets.leetcode.com/users/images/3512ac12-ab23-4d75-9e43-08b1bd17215d_1677727634.0111797.jpeg)\\n\\n![2.jfif](https://assets.leetcode.com/users/images/73446561-c23e-4cb7-a199-932d7c77dfff_1677727660.4246962.jpeg)\\n\\n\\n\\n- Why do we need to write `start` character into the `next` index when they are already the same? This is because the `next` index may not always be aligned with the `star` character because of unused space. We will see this in a bit. \\n\\n![3.jfif](https://assets.leetcode.com/users/images/7ee5b4a6-b83c-4a1a-b5dd-3629ee24719e_1677727690.6837099.jpeg)\\n\\n\\n![4.jfif](https://assets.leetcode.com/users/images/1659cf91-3ebf-4d52-a284-6ca26840c420_1677727867.3408802.jpeg)\\n\\n![5.jfif](https://assets.leetcode.com/users/images/d2593e1b-c334-4b4a-be3a-f0d16c88328c_1677727736.288957.jpeg)\\n\\n![6.jfif](https://assets.leetcode.com/users/images/170b05ad-86ac-473b-aee0-ac19d193f6eb_1677727777.6704266.jpeg)\\n![7.jfif](https://assets.leetcode.com/users/images/d29ffffa-605c-4d68-bf32-15c51e2095de_1677727797.1046913.jpeg)\\n\\n\\n- Since we return `next` as the length, anything on or after `next` will not be considered as part of the solution. \\n\\n\\n##### If this helped, please leave an upvote! Thanks!",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "# Idea\\n---\\n- Here are some things we want to ask ourselves:\\n    - What to do when a character group is of length 1?\\n    - What to do when a character ground is length > 1?\\n    - How do I solve this in-place (for constant space complexity)?\\n\\n---\\n- The reason the question is called **string compression** could be understood if we see resulting `chars` array size will always be **less than or equal to** than the original size. \\n- Consider the two operations: if character group is of length 1, then no change occurs; if character group is of length > 1, then we end up compressing the length (i.e. 10 characters only take up 3 spaces)\\n\\n- From what we understand so far, the question is not hard. We just need to look through the `chars` array and perform the two operations. \\n- But another constraint is that we must do this in-place. What does this entail for us?\\n- This means when we perform operation 2 (which compresses) we could end up with unused array space. This would be problematic since we want `char` array to be condensed. \\n----\\n- To tackle this issue, we will use a two pointers approach. \\n- While iterating through `chars` to perform the operations, keep track of the next index to write into so unused space is considered. \\n\\n\\n# Example \\n\\n- Consider the case `[\"a\",\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"b\",\"b\",\"b\",]`\\n\\n![1.jfif](https://assets.leetcode.com/users/images/3512ac12-ab23-4d75-9e43-08b1bd17215d_1677727634.0111797.jpeg)\\n\\n![2.jfif](https://assets.leetcode.com/users/images/73446561-c23e-4cb7-a199-932d7c77dfff_1677727660.4246962.jpeg)\\n\\n\\n\\n- Why do we need to write `start` character into the `next` index when they are already the same? This is because the `next` index may not always be aligned with the `star` character because of unused space. We will see this in a bit. \\n\\n![3.jfif](https://assets.leetcode.com/users/images/7ee5b4a6-b83c-4a1a-b5dd-3629ee24719e_1677727690.6837099.jpeg)\\n\\n\\n![4.jfif](https://assets.leetcode.com/users/images/1659cf91-3ebf-4d52-a284-6ca26840c420_1677727867.3408802.jpeg)\\n\\n![5.jfif](https://assets.leetcode.com/users/images/d2593e1b-c334-4b4a-be3a-f0d16c88328c_1677727736.288957.jpeg)\\n\\n![6.jfif](https://assets.leetcode.com/users/images/170b05ad-86ac-473b-aee0-ac19d193f6eb_1677727777.6704266.jpeg)\\n![7.jfif](https://assets.leetcode.com/users/images/d29ffffa-605c-4d68-bf32-15c51e2095de_1677727797.1046913.jpeg)\\n\\n\\n- Since we return `next` as the length, anything on or after `next` will not be considered as part of the solution. \\n\\n\\n##### If this helped, please leave an upvote! Thanks!",
                "codeTag": "Unknown"
            },
            {
                "id": 496025,
                "title": "javascript-straightforward-solution",
                "content": "```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n  if (!chars.length) return 0;\\n  let j = 0;\\n  let cur = chars[0];\\n  let counter = 0;\\n  for (let i = 0; i <= chars.length; i++) {\\n    if (chars[i] === cur) {\\n      counter++;\\n    } else {\\n      chars[j] = cur;\\n      if (counter > 1) {\\n        const s = counter.toString();\\n        for (let k = 0; k < s.length; k++) chars[++j] = s[k];\\n      }\\n      j++;\\n      cur = chars[i];\\n      counter = 1;\\n    }\\n  }\\n  return j;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n  if (!chars.length) return 0;\\n  let j = 0;\\n  let cur = chars[0];\\n  let counter = 0;\\n  for (let i = 0; i <= chars.length; i++) {\\n    if (chars[i] === cur) {\\n      counter++;\\n    } else {\\n      chars[j] = cur;\\n      if (counter > 1) {\\n        const s = counter.toString();\\n        for (let k = 0; k < s.length; k++) chars[++j] = s[k];\\n      }\\n      j++;\\n      cur = chars[i];\\n      counter = 1;\\n    }\\n  }\\n  return j;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 92530,
                "title": "java-o-n-two-pointers-and-a-counter",
                "content": "````\\npublic int compress(char[] chars) {        \\n        int start = 0;\\n        for(int end = 0, count = 0; end < chars.length; end++) {\\n            count++;\\n            if(end == chars.length-1 || chars[end] != chars[end + 1] ) {\\n                //We have found a difference or we are at the end of array\\n                chars[start] = chars[end]; // Update the character at start pointer\\n                start++;\\n                if(count != 1) {\\n                    // Copy over the character count to the array\\n                    char[] arr = String.valueOf(count).toCharArray();\\n                    for(int i=0;i<arr.length;i++, start++)\\n                        chars[start] = arr[i];\\n                }\\n                // Reset the counter\\n                count = 0;\\n            }\\n        }\\n        return start;\\n    }\\n````",
                "solutionTags": [],
                "code": "````\\npublic int compress(char[] chars) {        \\n        int start = 0;\\n        for(int end = 0, count = 0; end < chars.length; end++) {\\n            count++;\\n            if(end == chars.length-1 || chars[end] != chars[end + 1] ) {\\n                //We have found a difference or we are at the end of array\\n                chars[start] = chars[end]; // Update the character at start pointer\\n                start++;\\n                if(count != 1) {\\n                    // Copy over the character count to the array\\n                    char[] arr = String.valueOf(count).toCharArray();\\n                    for(int i=0;i<arr.length;i++, start++)\\n                        chars[start] = arr[i];\\n                }\\n                // Reset the counter\\n                count = 0;\\n            }\\n        }\\n        return start;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1261732,
                "title": "java-easy-solution-1ms-faster-than-94-submissions",
                "content": "The main idea of this code is to solve the problem in O(n) time complexity and O(1) space complexity. This is a simple problem, just follow my comments!\\n\\n```\\npublic int compress(char[] chars) {\\n        int index = 0, count = 0;\\n        // We traverse the entire array with this iteration.\\n        for (int i = 0; i < chars.length; i++) {\\n            count++; // We keep note of number of characters in sequence.\\n            /* When the next character is not as same as the previous one,\\n             * we modify the array from the beginning with the current character.\\n             * Note that the array will only become shorter as we keep updating the data.\\n             * So there is no need to create another array.\\n             */\\n            if (i+1 == chars.length || chars[i] != chars[i+1]) {\\n                chars[index++] = chars[i];\\n                // If there are multiple characters, we add the number to the array.\\n                if (count != 1) {\\n                    for (char c : Integer.toString(count).toCharArray()) {\\n                        chars[index++] = c;\\n                    }\\n                }\\n                // We initialize count to zero for the next character check.\\n                count = 0;\\n            }\\n        }\\n        return index;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int compress(char[] chars) {\\n        int index = 0, count = 0;\\n        // We traverse the entire array with this iteration.\\n        for (int i = 0; i < chars.length; i++) {\\n            count++; // We keep note of number of characters in sequence.\\n            /* When the next character is not as same as the previous one,\\n             * we modify the array from the beginning with the current character.\\n             * Note that the array will only become shorter as we keep updating the data.\\n             * So there is no need to create another array.\\n             */\\n            if (i+1 == chars.length || chars[i] != chars[i+1]) {\\n                chars[index++] = chars[i];\\n                // If there are multiple characters, we add the number to the array.\\n                if (count != 1) {\\n                    for (char c : Integer.toString(count).toCharArray()) {\\n                        chars[index++] = c;\\n                    }\\n                }\\n                // We initialize count to zero for the next character check.\\n                count = 0;\\n            }\\n        }\\n        return index;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1363096,
                "title": "string-compression-c-optimal-solution-easy-to-understand",
                "content": "**This Question\\'s Concept is Run Length Encoding.\\nRun Length Encoding is very simple form of data Compression.**\\nclass Solution {\\npublic:\\n\\n    int compress(vector<char>& chars) {\\n        \\n\\t\\tint count_=1;\\n        string ans;\\n\\t\\t\\n        for(int i=0;i<chars.size();i++)\\n        {\\n            while(i<chars.size()-1 && chars[i+1] == chars[i])\\n            {\\n                count_++;\\n                i++;\\n            }\\n            ans += chars[i];\\n            if(count_ == 1)\\n            {\\n                continue;\\n            }\\n            ans += to_string(count_);\\n            count_ = 1;\\n        }\\n        \\n         chars.clear();\\n        \\n         for(int i=0;i<ans.size();i++)\\n         {\\n              chars.push_back(ans[i]);\\n         } \\n     \\n        return chars.size();\\n    }\\n};\\n\\n\\n\\nif you like this solution. so please upvoted.\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int compress(vector<char>& chars) {\\n        \\n\\t\\tint count_=1;\\n        string ans;\\n\\t\\t\\n        for(int i=0;i<chars.size();i++)\\n        {\\n            while(i<chars.size()-1 && chars[i+1] == chars[i])\\n            {\\n                count_++;\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3246880,
                "title": "step-by-step-easy-explanation-hints-beats-98",
                "content": "**Leetcode will use the same chars[] array passed to the function to determine the output**\\n\\n# Intuition\\nUnderstanding the problem is hard. First think like this, you are given an array of chars.\\n**The array can contain LowerCase, UpperCase, Digits or Symbols**.\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nFirst focus on finding the length of the result array. The important cases that needs to be kept in mind are:\\n1. If the consecutive frequency of a **character** is $1$, then we only store that **character**. For, `chars[] = [\\'a\\']`, the compression will be: `chars[] = [\\'a\\']`. But for `chars[] = [\\'a\\', \\'a\\']` the answer will be `chars[] = [\\'a\\', \\'2\\']`.\\n2. If the consecutive frequency is more than one digit, then we must separately write them: `chars[] = [\\'a\\', \\'a\\', \\'a\\', \\'a\\', \\'a\\', \\'a\\', \\'a\\', \\'a\\', \\'a\\', \\'a\\']`, the answer will be: `chars[] = [\\'a\\', \\'1\\', \\'0\\']`. Do you understand why this happened? Because, **a** had consecutive frequency $10$. We split $10$ into two characters.\\n\\nI want you to only think about finding the length of the final array. \\nFrom above we can see that in point no $2$, the result array length is $3$.\\n**I want you to first determine how you can find that length!**\\n\\n# Hint:\\nKeep a variable name **prev** and **count**. count stores the consecutive frequency and prev stores the character that we are considering. Also, iterate the loop for the current characters and compare with prev.\\n- If `ch` is equal to `prev`, increment `count`.\\n- If `ch` is not equal to `prev`, we should process the `prev`. Then we should update `prev = ch`. We should check whether the `count` is $1$ or, otherwise we make a string then dump the data into the existing `chars[]` array.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(N)$$\\nThe loop is iterated only once. So, it\\'s none other than O(N).\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\nWe are not declaring any extra variable that depends on the input. So, space is O(1).\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        char prev = chars[0];\\n        int count = 0;\\n        int res = 0;\\n        int index = 0;\\n        for(char ch : chars){\\n            if(prev == ch){\\n                count++;\\n            }\\n            else{\\n                if(count == 1){\\n                    res++;\\n                    chars[index++] = prev;\\n                }\\n                else{\\n                    res++;\\n                    chars[index++] = prev;\\n                    String tmp = Integer.toString(count);\\n                    \\n                    res+=tmp.length();\\n                    for(char tc : tmp.toCharArray()){\\n                        chars[index++] = tc;\\n                    }\\n                }\\n                prev = ch;\\n                count = 1;\\n            }\\n        }\\n        if(count == 1){\\n            res++;\\n            chars[index++] = prev;\\n        }\\n        else{\\n            res++;\\n            chars[index++] = prev;\\n            String tmp = Integer.toString(count);\\n            \\n            res+=tmp.length();\\n            for(char tc : tmp.toCharArray()){\\n                chars[index++] = tc;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/3b64fef7-01c7-488a-8a7d-1c77f8e66789_1677746121.975142.png)\\n\\n![cc404213-285c-48ca-bce1-256072316360_1675559254.9353127.png](https://assets.leetcode.com/users/images/b547ba97-99de-4a30-a223-e5925c18570c_1677746752.6760187.png)\\n\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "``` java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        char prev = chars[0];\\n        int count = 0;\\n        int res = 0;\\n        int index = 0;\\n        for(char ch : chars){\\n            if(prev == ch){\\n                count++;\\n            }\\n            else{\\n                if(count == 1){\\n                    res++;\\n                    chars[index++] = prev;\\n                }\\n                else{\\n                    res++;\\n                    chars[index++] = prev;\\n                    String tmp = Integer.toString(count);\\n                    \\n                    res+=tmp.length();\\n                    for(char tc : tmp.toCharArray()){\\n                        chars[index++] = tc;\\n                    }\\n                }\\n                prev = ch;\\n                count = 1;\\n            }\\n        }\\n        if(count == 1){\\n            res++;\\n            chars[index++] = prev;\\n        }\\n        else{\\n            res++;\\n            chars[index++] = prev;\\n            String tmp = Integer.toString(count);\\n            \\n            res+=tmp.length();\\n            for(char tc : tmp.toCharArray()){\\n                chars[index++] = tc;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 121008,
                "title": "easy-java-solution",
                "content": "\\tpublic int compress(char[] chars) {\\n        int count = 1; \\n        int index = 0; \\n        for (int i = 0; i < chars.length; i++) {\\n            while (i < chars.length - 1 && chars[i] == chars[i + 1]) {\\n                count++; \\n                i++; \\n            }\\n            if (count == 1) {\\n                chars[index++] = chars[i]; \\n            } else {\\n                chars[index++] = chars[i]; \\n                String num = String.valueOf(count); \\n                for (int j = 0; j < num.length(); j++) {\\n                    chars[index++] = num.charAt(j); \\n                }\\n            }\\n            count = 1; \\n        }\\n        return index; \\n    }",
                "solutionTags": [],
                "code": "\\tpublic int compress(char[] chars) {\\n        int count = 1; \\n        int index = 0; \\n        for (int i = 0; i < chars.length; i++) {\\n            while (i < chars.length - 1 && chars[i] == chars[i + 1]) {\\n                count++; \\n                i++; \\n            }\\n            if (count == 1) {\\n                chars[index++] = chars[i]; \\n            } else {\\n                chars[index++] = chars[i]; \\n                String num = String.valueOf(count); \\n                for (int j = 0; j < num.length(); j++) {\\n                    chars[index++] = num.charAt(j); \\n                }\\n            }\\n            count = 1; \\n        }\\n        return index; \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 289704,
                "title": "python-solution",
                "content": "\\t\\'\\'\\'\\n\\tclass Solution:\\n\\t\\tdef compress(self, chars: List[str]) -> int:\\n\\t\\t\\tn = len(chars)\\n\\t\\t\\ti,count = 0, 1\\n\\t\\t\\tfor j in range(1,n+1):\\n\\t\\t\\t\\tif j<n and chars[j]==chars[j-1]:\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tchars[i] = chars[j-1]\\n\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\t\\t\\tif count>1:\\n\\t\\t\\t\\t\\t\\tfor k in str(count):\\n\\t\\t\\t\\t\\t\\t\\tchars[i] = k\\n\\t\\t\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\t\\t\\tcount = 1\\n\\t\\t\\tchars = chars[:i]\\n\\t\\t\\treturn i\\n\\t\\'\\'\\'\\n\\n\\n\\n    \\n        \\n",
                "solutionTags": [],
                "code": "\\t\\'\\'\\'\\n\\tclass Solution:\\n\\t\\tdef compress(self, chars: List[str]) -> int:\\n\\t\\t\\tn = len(chars)\\n\\t\\t\\ti,count = 0, 1\\n\\t\\t\\tfor j in range(1,n+1):\\n\\t\\t\\t\\tif j<n and chars[j]==chars[j-1]:\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tchars[i] = chars[j-1]\\n\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\t\\t\\tif count>1:\\n\\t\\t\\t\\t\\t\\tfor k in str(count):\\n\\t\\t\\t\\t\\t\\t\\tchars[i] = k\\n\\t\\t\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\t\\t\\tcount = 1\\n\\t\\t\\tchars = chars[:i]\\n\\t\\t\\treturn i\\n\\t\\'\\'\\'\\n\\n\\n\\n    \\n        \\n",
                "codeTag": "Java"
            },
            {
                "id": 3247030,
                "title": "easy-to-understand-c-solution-using-two-pointers-approach-o-n-o-1",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public int Compress(char[] chars)\\n    {\\n        var i = 0;\\n        var j = 0;\\n\\n        while (i < chars.Length)\\n        {\\n            var current = chars[i];\\n            var counter = 0;\\n\\n            while (i < chars.Length && chars[i] == current)\\n            {\\n                i++;\\n                counter++;\\n            }\\n\\n            chars[j++] = current;\\n\\n            if (counter > 1)\\n            {\\n                foreach (var counterChar in counter.ToString())\\n                {\\n                    chars[j++] = counterChar;\\n                }\\n            }\\n        }\\n\\n        return j;\\n    }\\n}\\n```\\n\\n![pleaseupvote.jpg](https://assets.leetcode.com/users/images/156817a0-6b8f-4cdc-8859-d20158e69ac4_1677749306.3650208.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int Compress(char[] chars)\\n    {\\n        var i = 0;\\n        var j = 0;\\n\\n        while (i < chars.Length)\\n        {\\n            var current = chars[i];\\n            var counter = 0;\\n\\n            while (i < chars.Length && chars[i] == current)\\n            {\\n                i++;\\n                counter++;\\n            }\\n\\n            chars[j++] = current;\\n\\n            if (counter > 1)\\n            {\\n                foreach (var counterChar in counter.ToString())\\n                {\\n                    chars[j++] = counterChar;\\n                }\\n            }\\n        }\\n\\n        return j;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245672,
                "title": "python-using-itertools-groupby",
                "content": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = []\\n        for key, group in groupby(chars):\\n            #print(k, list(g))\\n            count = len(list(group))\\n            s.append(key)\\n            if count > 1: s.extend(list(str(count)))\\n        chars[:] = s\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = []\\n        for key, group in groupby(chars):\\n            #print(k, list(g))\\n            count = len(list(group))\\n            s.append(key)\\n            if count > 1: s.extend(list(str(count)))\\n        chars[:] = s\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1025555,
                "title": "python3-simple-and-intuitive",
                "content": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        if not chars:\\n            return 0\\n        mychar = chars[0]\\n        count = 0\\n        length = len(chars)\\n        chars.append(\" \") # Append a space so last char group is not left out in loop\\n        for i in range(length+1): #+1 for extra space char we added\\n            char = chars.pop(0)\\n            if char == mychar: #if same character then just increase the count\\n                count += 1\\n            else:\\n                if count == 1: #if not same then append the char to chars\\n                    chars.append(mychar) #if count is 1 don\\'t append count\\n                elif count > 1:\\n                    chars.append(mychar)\\n                    chars += (list(str(count))) #if count > 1 append count as a string\\n                mychar = char #update mychar as the new different char in chars\\n                count = 1 #reset count to 1 as we have already read the new char\\n        return len(chars) #since all previous are popped, only the answer remains in chars now\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        if not chars:\\n            return 0\\n        mychar = chars[0]\\n        count = 0\\n        length = len(chars)\\n        chars.append(\" \") # Append a space so last char group is not left out in loop\\n        for i in range(length+1): #+1 for extra space char we added\\n            char = chars.pop(0)\\n            if char == mychar: #if same character then just increase the count\\n                count += 1\\n            else:\\n                if count == 1: #if not same then append the char to chars\\n                    chars.append(mychar) #if count is 1 don\\'t append count\\n                elif count > 1:\\n                    chars.append(mychar)\\n                    chars += (list(str(count))) #if count > 1 append count as a string\\n                mychar = char #update mychar as the new different char in chars\\n                count = 1 #reset count to 1 as we have already read the new char\\n        return len(chars) #since all previous are popped, only the answer remains in chars now\\n```",
                "codeTag": "Java"
            },
            {
                "id": 92553,
                "title": "python-5-liner-o-n-time-no-pointers",
                "content": "Here's a more functional approach to get the compressed string.\\n\\nTaking `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]` as input, this is what you get after each line:\\n\\n- `flips` - `[('a', 0), ('b', 2), ('c', 4), (None, 7)]`\\n- `chunks` - `[('a', 2), ('b', 2), ('c', 3)]`\\n- `compressed` - `['a', '2', 'b', '2', 'c', '3']`\\n\\nLastly, overwrite the original array with `compressed`.\\n\\n```\\nclass Solution(object):\\n    def compress(self, c):\\n        flips = [(c[0], 0)] + [(c[i], i) for i in range(1, len(c)) if c[i] != c[i - 1]] + [(None, len(c))]\\n        chunks = [(b[0], a[1] - b[1]) for (a, b) in zip(flips[1:], flips)]\\n        compressed = reduce(lambda a, b: (a + [b[0]] + (list(str(b[1])) if (b[1] > 1) else [])), chunks, [])\\n        c[:len(compressed)] = compressed\\n        return len(compressed)\\n```\\n\\n*- Yangshun*",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def compress(self, c):\\n        flips = [(c[0], 0)] + [(c[i], i) for i in range(1, len(c)) if c[i] != c[i - 1]] + [(None, len(c))]\\n        chunks = [(b[0], a[1] - b[1]) for (a, b) in zip(flips[1:], flips)]\\n        compressed = reduce(lambda a, b: (a + [b[0]] + (list(str(b[1])) if (b[1] > 1) else [])), chunks, [])\\n        c[:len(compressed)] = compressed\\n        return len(compressed)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 771447,
                "title": "c-brute-force-8-ms-solution-easy-to-understand",
                "content": "***Runtime: 8 ms, faster than 92.87% of C++ online submissions for String Compression.\\nMemory Usage: 9 MB, less than 80.00% of C++ online submissions for String Compression.***\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0;              // current index\\n        int index = 0;          // solution index \\n        while(i < chars.size()){\\n            char current = chars[i];\\n            int count = 1;\\n            while(++i < chars.size() && chars[i] == current){\\n                count++;\\n            }\\n            chars[index++] = current;\\n            if(count > 1){\\n                for(char& ch : to_string(count)){\\n                    chars[index++] = ch;\\n                }\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0;              // current index\\n        int index = 0;          // solution index \\n        while(i < chars.size()){\\n            char current = chars[i];\\n            int count = 1;\\n            while(++i < chars.size() && chars[i] == current){\\n                count++;\\n            }\\n            chars[index++] = current;\\n            if(count > 1){\\n                for(char& ch : to_string(count)){\\n                    chars[index++] = ch;\\n                }\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245751,
                "title": "efficiently-compressing-strings-solving-the-latest-leetcode-challenge-march-2-2023",
                "content": "![image.png](https://assets.leetcode.com/users/images/b4262977-65a9-4030-94a3-62df3b423cc2_1677723552.4927237.png)\\n\\n# Full explaination at : [Solution](https://yoichiisagi.hashnode.dev/efficiently-compressing-strings-solving-the-latest-leetcode-challenge-march-2-2023)\\n\\n![image.png](https://assets.leetcode.com/users/images/f8bf5623-ea9b-42e2-b0ee-7f5facdb273b_1677723565.9882138.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n   public int compress(char[] chars) {\\n    int i = 0;\\n    int j = 0;\\n    while (i < chars.length) {\\n        char c = chars[i];\\n        int count = 0;\\n        while (i < chars.length && chars[i] == c) {\\n            i++;\\n            count++;\\n        }\\n        chars[j++] = c;\\n        if (count > 1) {\\n            String countStr = String.valueOf(count);\\n            for (int k = 0; k < countStr.length(); k++) {\\n                chars[j++] = countStr.charAt(k);\\n            }\\n        }\\n    }\\n    return j;\\n}\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   public int compress(char[] chars) {\\n    int i = 0;\\n    int j = 0;\\n    while (i < chars.length) {\\n        char c = chars[i];\\n        int count = 0;\\n        while (i < chars.length && chars[i] == c) {\\n            i++;\\n            count++;\\n        }\\n        chars[j++] = c;\\n        if (count > 1) {\\n            String countStr = String.valueOf(count);\\n            for (int k = 0; k < countStr.length(); k++) {\\n                chars[j++] = countStr.charAt(k);\\n            }\\n        }\\n    }\\n    return j;\\n}\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 959870,
                "title": "c-o-1-space-easy-understandable-solution-in-one-pass",
                "content": "---------------------------------------------------**TC: O(N), SC: O(1)**-----------------------------------------------------------\\n```\\nint compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if(n <= 1)\\n            return n;\\n        int i = 0;\\n        for(int j=0;j<n;j++){\\n            int count = 1;\\n            while(j < n-1 && chars[j] == chars[j+1]){\\n                count++;\\n                j++;\\n            }\\n            chars[i++] = chars[j];  // FOR ADDING THE CHARACTER AT IT\\'S CORRECT POSITION\\n            // FOR ADDING THE COUNT OF EACH CHARACTER AT IT\\'S CORRECT POSITION\\n            if(count!=1){\\n                for(auto d: to_string(count))\\n                    chars[i++] = d;\\n            }\\n        }\\n        return i;\\n    }\\n```\\n**Don\\'t forget to upvote, If you understood it completely :)**\\n   **Your doubts are welcome. Thank You :)**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if(n <= 1)\\n            return n;\\n        int i = 0;\\n        for(int j=0;j<n;j++){\\n            int count = 1;\\n            while(j < n-1 && chars[j] == chars[j+1]){\\n                count++;\\n                j++;\\n            }\\n            chars[i++] = chars[j];  // FOR ADDING THE CHARACTER AT IT\\'S CORRECT POSITION\\n            // FOR ADDING THE COUNT OF EACH CHARACTER AT IT\\'S CORRECT POSITION\\n            if(count!=1){\\n                for(auto d: to_string(count))\\n                    chars[i++] = d;\\n            }\\n        }\\n        return i;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 309805,
                "title": "simple-javascript-solution-o-1-extra-space-64-ms-faster-than-88-80",
                "content": "```\\nvar compress = function(chars) {\\n    let n = chars.length;\\n    let count = 1;\\n    \\n    for (let i = n - 2; i >= 0; i--) {\\n        if (chars[i] == chars[i+1]) {\\n            count++;\\n        } else if (count > 1) {\\n            chars.splice(i+2, count-1, ...count.toString().split(\\'\\'));           \\n            count = 1;\\n        }\\n    }\\n    \\n    if (count > 1) {\\n        chars.splice(1, count-1, ...count.toString().split(\\'\\'));           \\n    }\\n    \\n    return chars.length;\\n};\\n```\\nRuntime: 64 ms, faster than 88.80% of JavaScript online submissions for String Compression.\\nMemory Usage: 36.9 MB, less than 91.26% of JavaScript online submissions for String Compression.\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar compress = function(chars) {\\n    let n = chars.length;\\n    let count = 1;\\n    \\n    for (let i = n - 2; i >= 0; i--) {\\n        if (chars[i] == chars[i+1]) {\\n            count++;\\n        } else if (count > 1) {\\n            chars.splice(i+2, count-1, ...count.toString().split(\\'\\'));           \\n            count = 1;\\n        }\\n    }\\n    \\n    if (count > 1) {\\n        chars.splice(1, count-1, ...count.toString().split(\\'\\'));           \\n    }\\n    \\n    return chars.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 192233,
                "title": "python-solution-with-2-pointers-beats-99-7",
                "content": "\\'\\'\\'\\nimport collections\\nclass Solution(object):\\n    \\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        read_index = 0\\n        write_index = 0\\n        l = len(chars)\\n        while(read_index < l):\\n            ch = chars[read_index] \\n            count = 0\\n            while(read_index < l and chars[read_index] == ch): #First check if read_index is in range to avoid index error\\n                read_index += 1                                #Short circuiting concept\\n                count += 1\\n            chars[write_index] = ch\\n            write_index += 1\\n            if count > 1: \\n                for c in str(count): #To write characters greater than 9\\n                    chars[write_index] = c\\n                    write_index += 1\\n        return write_index\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nimport collections\\nclass Solution(object):\\n    \\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        read_index = 0\\n        write_index = 0\\n        l = len(chars)\\n        while(read_index < l):\\n            ch = chars[read_index] \\n            count = 0\\n            while(read_index < l and chars[read_index] == ch): #First check if read_index is in range to avoid index error\\n                read_index += 1                                #Short circuiting concept\\n                count += 1\\n            chars[write_index] = ch\\n            write_index += 1\\n            if count > 1: \\n                for c in str(count): #To write characters greater than 9\\n                    chars[write_index] = c\\n                    write_index += 1\\n        return write_index\\n\\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 92549,
                "title": "java-solution-3-pointers",
                "content": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        int i = 0, j = 0, k = 0;\\n        while (i < n) {\\n            j = i;\\n            while (j < n && chars[i] == chars[j]) j++;\\n            chars[k++] = chars[i];\\n            if (j - i >= 2) {\\n                for (char c : String.valueOf(j - i).toCharArray()) {\\n                    chars[k++] = c;\\n                }\\n            }\\n            i = j;\\n        }\\n        return k;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        int i = 0, j = 0, k = 0;\\n        while (i < n) {\\n            j = i;\\n            while (j < n && chars[i] == chars[j]) j++;\\n            chars[k++] = chars[i];\\n            if (j - i >= 2) {\\n                for (char c : String.valueOf(j - i).toCharArray()) {\\n                    chars[k++] = c;\\n                }\\n            }\\n            i = j;\\n        }\\n        return k;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248001,
                "title": "simple-c-solution-of-the-problem-with-time-complexity-and-space-complexity-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem can be seen as counting frequency of characters coming one by one and return the index which is of the resultant vector.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe have a simple approach i.e we use a for loop starting from 0 and check the frequency of the character in the vector present at zero index in the inside while loop and then there\\'s a tricky or the part where we can do mistakes if the flag (eg=10) then we have to store it differently \"1\" and then at the next index \"0\".\\nIf the length of the vector chars is one then we can directly return 1 irrespective of anything which improves the runtime drastically.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n): where n is the size of the input vector chars. The for loop iterates over the entire vector once, and the time taken to execute each iteration of the loop is constant, except for the to_string() function call, which has a time complexity of O(log n). However, since the maximum value of flag is less than or equal to n, the total time complexity of the algorithm is O(n).\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n):where n is the size of the input vector chars. The algorithm uses a constant amount of extra space for the curr, flag, and flagstr variables, and the output vector chars is modified in place. However, in the worst case, if every character in the input vector needs to be replaced by a sequence of characters and numbers, the size of the output vector could be up to twice the size of the input vector. Therefore, the space complexity of the algorithm is O(n).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n     int l=chars.size();\\n     int strtind=0;\\n     int i=0;\\n     if(l==1)\\n     return 1;\\n     else {\\n     for(;i<l;)\\n     {\\n         char curr=chars[i];\\n         int flag=0;\\n         while(i<l && chars[i]==curr)\\n         {\\n             i++;\\n             flag++;\\n         }\\n         chars[strtind]=curr;\\n         strtind++;\\n         if(flag>1)\\n         {\\n             string flagstr=to_string(flag);\\n             for(char &c:flagstr)\\n             {\\n                 chars[strtind]=c;\\n                 strtind++;\\n             }\\n         }\\n     }\\n     }\\n     return strtind;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String",
                    "Brainteaser"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n     int l=chars.size();\\n     int strtind=0;\\n     int i=0;\\n     if(l==1)\\n     return 1;\\n     else {\\n     for(;i<l;)\\n     {\\n         char curr=chars[i];\\n         int flag=0;\\n         while(i<l && chars[i]==curr)\\n         {\\n             i++;\\n             flag++;\\n         }\\n         chars[strtind]=curr;\\n         strtind++;\\n         if(flag>1)\\n         {\\n             string flagstr=to_string(flag);\\n             for(char &c:flagstr)\\n             {\\n                 chars[strtind]=c;\\n                 strtind++;\\n             }\\n         }\\n     }\\n     }\\n     return strtind;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2704499,
                "title": "string-compression-simple-approach-in-java",
                "content": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int ans = 0, i = 0;\\n        while(i < chars.length){\\n            char curr = chars[i];\\n            int count= 0;\\n            while(i < chars.length && chars[i] == curr){\\n                i++;\\n                count++;\\n            }\\n            chars[ans++] = curr;\\n            if(count != 1){\\n                for(char c: Integer.toString(count).toCharArray()){\\n                    chars[ans++] = c;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int ans = 0, i = 0;\\n        while(i < chars.length){\\n            char curr = chars[i];\\n            int count= 0;\\n            while(i < chars.length && chars[i] == curr){\\n                i++;\\n                count++;\\n            }\\n            chars[ans++] = curr;\\n            if(count != 1){\\n                for(char c: Integer.toString(count).toCharArray()){\\n                    chars[ans++] = c;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 92563,
                "title": "c-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& a) {\\n        int i = 0, cnt = 0, t = 0;\\n        for (int j = 0; j < a.size(); ++j) if (j+1 == a.size() || a[j+1] != a[j]) {\\n            int m = t;\\n            a[t++] = a[j];\\n            if (j >= i + 1) {\\n                string s = to_string(j-i+1);\\n                for (char c:s) a[t++] = c;\\n            }\\n            i = j + 1;\\n            cnt += t-m;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& a) {\\n        int i = 0, cnt = 0, t = 0;\\n        for (int j = 0; j < a.size(); ++j) if (j+1 == a.size() || a[j+1] != a[j]) {\\n            int m = t;\\n            a[t++] = a[j];\\n            if (j >= i + 1) {\\n                string s = to_string(j-i+1);\\n                for (char c:s) a[t++] = c;\\n            }\\n            i = j + 1;\\n            cnt += t-m;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 92571,
                "title": "c-solution",
                "content": "Iterate over the array, count and use a current ptr to update the array in place.\\n\\n~~~\\n public int Compress(char[] chars) {\\n            int i = 0;\\n            int ptr = 0;\\n\\n            while (i < chars.Length)\\n            {\\n                int count = 1;\\n                char ch = chars[i];\\n                i++;\\n\\n                while (i < chars.Length && chars[i] == ch)\\n                {\\n                    count++;\\n                    i++;\\n                }\\n\\n                chars[ptr++] = ch;                \\n\\n                if (count > 1)\\n                {\\n                    foreach (var item in count.ToString().ToCharArray())\\n                    {\\n                        chars[ptr++] = item;                        \\n                    }\\n                }\\n            }\\n\\n            return ptr;\\n    }\\n~~~",
                "solutionTags": [],
                "code": "Iterate over the array, count and use a current ptr to update the array in place.\\n\\n~~~\\n public int Compress(char[] chars) {\\n            int i = 0;\\n            int ptr = 0;\\n\\n            while (i < chars.Length)\\n            {\\n                int count = 1;\\n                char ch = chars[i];\\n                i++;\\n\\n                while (i < chars.Length && chars[i] == ch)\\n                {\\n                    count++;\\n                    i++;\\n                }\\n\\n                chars[ptr++] = ch;                \\n\\n                if (count > 1)\\n                {\\n                    foreach (var item in count.ToString().ToCharArray())\\n                    {\\n                        chars[ptr++] = item;                        \\n                    }\\n                }\\n            }\\n\\n            return ptr;\\n    }\\n~~~",
                "codeTag": "Unknown"
            },
            {
                "id": 4005783,
                "title": "stringbuilder-getchars-fast-while",
                "content": "![image.png](https://assets.leetcode.com/users/images/f26f2dc9-8c68-4bb0-98bb-9ea395f3b576_1693923337.9768565.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public static int compress(char[] chars) {\\n        int start = 0;\\n        StringBuilder sb = new StringBuilder(\"\");\\n        while(start <= chars.length-1){\\n            sb.append(chars[start]);\\n            int count = 1;\\n            Character ch1 = chars[start];\\n            while(start < chars.length-1 && ch1.equals(chars[start+1])){\\n                start++;\\n                count++;\\n            }\\n            if(count > 1){\\n                sb.append(count);\\n            }\\n            start++;\\n        }\\n        sb.getChars(0,sb.length(),chars,0);\\n        return sb.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static int compress(char[] chars) {\\n        int start = 0;\\n        StringBuilder sb = new StringBuilder(\"\");\\n        while(start <= chars.length-1){\\n            sb.append(chars[start]);\\n            int count = 1;\\n            Character ch1 = chars[start];\\n            while(start < chars.length-1 && ch1.equals(chars[start+1])){\\n                start++;\\n                count++;\\n            }\\n            if(count > 1){\\n                sb.append(count);\\n            }\\n            start++;\\n        }\\n        sb.getChars(0,sb.length(),chars,0);\\n        return sb.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246322,
                "title": "javascript-very-easy-solution",
                "content": "# Steps of my solution \\nFirst I defined a variable ```count``` and I updated as it iterates through the array.\\n\\nThen when I encounters a new character, it writes the compressed representation of the previous character **if necessary** and resets the count to 1\\n\\nIf the count of consecutive occurrences is greater than 1, but less than 10, it writes the compressed representation of the previous character followed by the count as a string.\\n```\\nelse if (count < 10) { \\n    chars[iterate++] = chars[i]\\n    chars[iterate++] = count.toString()\\n    count = 1\\n}\\n```\\nIf the count is greater than or equal to 10, it converts the count to a string and writes the compressed representation of the previous character followed by each digit of the count as separate characters.\\n```\\nelse { \\n        const s = count.toString().split(\\'\\')\\n        chars[iterate++] = chars[i]\\n        for (let j = 0; j < s.length; j++) { \\n            chars[iterate++] = s[j]\\n        }\\n        count = 1\\n    }\\n```\\nFinally, the function returns the length of the compressed array. The original array is modified in place, with any unused elements at the end being truncated.\\n# This has been very difficult but I did it\\n![Premium Photo _ Asian businessman falling asleep at office desk with closed eyes on grey background overworked youn.jfif](https://assets.leetcode.com/users/images/9a44a3cf-ac09-4896-804e-65a4247d45f2_1677736470.3210342.jpeg)\\n\\n# Go and solve it, what are you waiting for !!!\\n# Have fun with my code (^_^)\\n```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nconst compress = chars => {\\n    let count = 1\\n    let iterate = 0\\n    for (let i = 0; i < chars.length; i++) { \\n        if (chars[i] === chars[i + 1]) { \\n            count++\\n        }\\n        else if (count === 1) { \\n            chars[iterate++] = chars[i]\\n        }\\n        else if (count < 10) { \\n            chars[iterate++] = chars[i]\\n            chars[iterate++] = count.toString()\\n            count = 1\\n        }\\n        else { \\n            const s = count.toString().split(\\'\\')\\n            chars[iterate++] = chars[i]\\n            for (let j = 0; j < s.length; j++) { \\n                chars[iterate++] = s[j]\\n            }\\n            count = 1\\n        }\\n    }\\n    return iterate \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```count```\n```\\nelse if (count < 10) { \\n    chars[iterate++] = chars[i]\\n    chars[iterate++] = count.toString()\\n    count = 1\\n}\\n```\n```\\nelse { \\n        const s = count.toString().split(\\'\\')\\n        chars[iterate++] = chars[i]\\n        for (let j = 0; j < s.length; j++) { \\n            chars[iterate++] = s[j]\\n        }\\n        count = 1\\n    }\\n```\n```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nconst compress = chars => {\\n    let count = 1\\n    let iterate = 0\\n    for (let i = 0; i < chars.length; i++) { \\n        if (chars[i] === chars[i + 1]) { \\n            count++\\n        }\\n        else if (count === 1) { \\n            chars[iterate++] = chars[i]\\n        }\\n        else if (count < 10) { \\n            chars[iterate++] = chars[i]\\n            chars[iterate++] = count.toString()\\n            count = 1\\n        }\\n        else { \\n            const s = count.toString().split(\\'\\')\\n            chars[iterate++] = chars[i]\\n            for (let j = 0; j < s.length; j++) { \\n                chars[iterate++] = s[j]\\n            }\\n            count = 1\\n        }\\n    }\\n    return iterate \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 353365,
                "title": "wtf-is-going-on-with-this-question",
                "content": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        count = 0\\n        string = \"\"\\n        for i in range(0,len(chars)):\\n            count+=1\\n            if i+1 >= len(chars) or chars[i] != chars[i+1]:\\n                string+=chars[i]\\n                string+=str(count)\\n                count = 0\\n        # print(string)\\n        chars = list(string)\\n        print(chars)\\n        return len(string)\\n\\t```\\n\\tGives expected output in stdout;\\n\\tthen doesn\\'t print the value in main method. WTF?",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        count = 0\\n        string = \"\"\\n        for i in range(0,len(chars)):\\n            count+=1\\n            if i+1 >= len(chars) or chars[i] != chars[i+1]:\\n                string+=chars[i]\\n                string+=str(count)\\n                count = 0\\n        # print(string)\\n        chars = list(string)\\n        print(chars)\\n        return len(string)\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 3772247,
                "title": "simple-solution",
                "content": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i=0;\\n        int n=chars.length;\\n        int j=0;\\n        if(n==1)\\n            return 1;\\n        while(i<n){\\n            int count=1;\\n            char charac=chars[i];\\n            while(i+1<n && chars[i]==chars[i+1]){\\n                count++;\\n                i++;\\n            }\\n            if(count==1){\\n                chars[j++]=charac;\\n            }\\n            else{\\n                if(count>1){\\n                    chars[j++]=charac;\\n                    String counterstring=count+\"\";\\n                    for(int r=0;r<counterstring.length();r++){\\n                        chars[j++]=counterstring.charAt(r);\\n                    }\\n                }\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n}\\n```\\n![1271c6fe-345b-4f3d-959e-d13e791111d7_1677726484.8832572.jpeg](https://assets.leetcode.com/users/images/87492d9e-d568-4607-9570-d359f871931f_1689490954.4312356.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i=0;\\n        int n=chars.length;\\n        int j=0;\\n        if(n==1)\\n            return 1;\\n        while(i<n){\\n            int count=1;\\n            char charac=chars[i];\\n            while(i+1<n && chars[i]==chars[i+1]){\\n                count++;\\n                i++;\\n            }\\n            if(count==1){\\n                chars[j++]=charac;\\n            }\\n            else{\\n                if(count>1){\\n                    chars[j++]=charac;\\n                    String counterstring=count+\"\";\\n                    for(int r=0;r<counterstring.length();r++){\\n                        chars[j++]=counterstring.charAt(r);\\n                    }\\n                }\\n            }\\n            i++;\\n        }\\n        return j;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606566,
                "title": "explained-simple-and-clear-python3-code",
                "content": "# Intuition\\nThe problem asks for compressing an array of characters using a specific algorithm. The goal is to modify the array in-place and return the new length of the compressed array. To achieve this, we need to iterate through the array and handle consecutive groups of repeating characters according to the given rules.\\n\\n\\n# Approach\\nThe provided solution uses a two-pointer approach to traverse the array. The i pointer keeps track of the current character being examined, while the count variable counts the consecutive occurrences of the character.\\n\\nThe algorithm starts by initializing i and count to 0. It then enters a while loop that continues until i reaches the second-to-last index of the array.\\n\\nInside the loop, the algorithm checks if the next character (chars[i+1]) is equal to the current character (chars[i]). If they are the same, it means we have a consecutive group of repeating characters. In this case, the algorithm removes the next character using chars.pop(i+1) and increments the count variable.\\n\\nIf the characters are not the same, the algorithm checks if the count variable is greater than 1. This indicates that we have a group of repeating characters to compress. In this case, the algorithm converts the count into a list of individual digits using [*str(count)]. It then iterates over this list, inserts each digit into the chars array, and increments i accordingly. This step ensures that groups with lengths of 10 or more are properly split into multiple characters.\\n\\nIf the count is not greater than 1, it means we have a single occurrence of a character, so the algorithm moves to the next character by incrementing i.\\n\\nAfter the while loop, the algorithm checks if there is a remaining group of repeating characters that have not been compressed. If count is greater than 1, the algorithm converts it into a list of digits and appends each digit to the chars array.\\n\\nFinally, the algorithm returns the length of the modified chars array.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(n), where n is the length of the input chars array. The algorithm iterates through the array once, performing constant-time operations at each step.\\n\\n\\n- Space complexity:\\nThe solution uses constant extra space, as it modifies the chars array in-place without using any additional data structures. Therefore, the space complexity is O(1).\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i=0\\n        count=1\\n        while i<len(chars)-1:\\n            if chars[i+1]==chars[i]:\\n                chars.pop(i+1)\\n                count+=1\\n            elif count>1:\\n                cc=[*str(count)]\\n                for j in range(len(cc)):\\n                    chars.insert(i+j+1,cc[j])\\n                count=1\\n                i+=len(cc)+1\\n            else:\\n                i+=1\\n        if count>1:\\n            chars+=[*str(count)]\\n        return len(chars)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i=0\\n        count=1\\n        while i<len(chars)-1:\\n            if chars[i+1]==chars[i]:\\n                chars.pop(i+1)\\n                count+=1\\n            elif count>1:\\n                cc=[*str(count)]\\n                for j in range(len(cc)):\\n                    chars.insert(i+j+1,cc[j])\\n                count=1\\n                i+=len(cc)+1\\n            else:\\n                i+=1\\n        if count>1:\\n            chars+=[*str(count)]\\n        return len(chars)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3594029,
                "title": "simple-java-solution-using-single-traversal-o-n-complexity",
                "content": "# Approach\\nJust traverse on the given chars array length .Use one while loop to calculate the number of time the particular character is repeating.\\n**Now after getting the count , We have 3 cases**\\n1. When count is ==1 means single character so just add them in chars array and increase the j pointer further (j++)\\n2. when the count value is <=9 means single digit value so we will add the character and then add the value of count like in case(1)\\n3. Now here the case is when the count is greater than single digit\\n Like in case 3 where B is 12 times so here we have convert it in the string and loop on it and add character by character like \"1\" \"2\" \\n\\nSo when our traversal end the value of the j variable is our answer as the final length of the new chars array with compressed string.\\n\\n# **This solution beats 98%**\\n\\n# Complexity\\n- Time complexity:\\n**O(n)** as there is only single traversal over the chars array is done \\n\\n- Space complexity:\\n**O(1)** or constant as no extra data structure is required\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n       \\n        int n=chars.length;\\n        int j=0,i=0;\\n       if(chars.length==1)return 1;\\n       // base case as if length is 1 than new length will be 1 only \\n       while(i<n){\\n           // traversing the character length array \\n           char charac = chars[i];\\n           int count=1;\\n           while(i+1<n&&chars[i]==chars[i+1]){\\n               // in this we are simply counting number of duplicates like \\n            //    how many time there is a character is repeated \\n               count++;\\n               i++;\\n           }\\n           // if character is present 1 time only than just add the character\\n           if(count<=1){\\n               chars[j++]=charac;\\n           }\\n           // as when count of character is more than 1 \\n           else{\\n           String ans =count+\"\";\\n           // creating string for updating when the count is greater than 9 like \\n           \\n           if(ans.length()==1){\\n                chars[j++]=charac;\\n                chars[j++]=ans.charAt(0);\\n           }\\n           // case 3 where b is 12 times repeated\\n           else{\\n               chars[j++]=charac;\\n               for(int p=0;p<ans.length();p++){\\n                   chars[j++]=ans.charAt(p);\\n               }\\n           }\\n           }\\n           i++;\\n       }\\n        // returning the new value of the new chars array length;\\n      return j;\\n    }\\n}\\n```\\n**If you feel it helpful please upvote it.\\nThank you!**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n       \\n        int n=chars.length;\\n        int j=0,i=0;\\n       if(chars.length==1)return 1;\\n       // base case as if length is 1 than new length will be 1 only \\n       while(i<n){\\n           // traversing the character length array \\n           char charac = chars[i];\\n           int count=1;\\n           while(i+1<n&&chars[i]==chars[i+1]){\\n               // in this we are simply counting number of duplicates like \\n            //    how many time there is a character is repeated \\n               count++;\\n               i++;\\n           }\\n           // if character is present 1 time only than just add the character\\n           if(count<=1){\\n               chars[j++]=charac;\\n           }\\n           // as when count of character is more than 1 \\n           else{\\n           String ans =count+\"\";\\n           // creating string for updating when the count is greater than 9 like \\n           \\n           if(ans.length()==1){\\n                chars[j++]=charac;\\n                chars[j++]=ans.charAt(0);\\n           }\\n           // case 3 where b is 12 times repeated\\n           else{\\n               chars[j++]=charac;\\n               for(int p=0;p<ans.length();p++){\\n                   chars[j++]=ans.charAt(p);\\n               }\\n           }\\n           }\\n           i++;\\n       }\\n        // returning the new value of the new chars array length;\\n      return j;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3255109,
                "title": "2444-count-subarrays-with-fixed-bounds-solution-c",
                "content": "# Intuition\\nWe can use a sliding window approach to find all subarrays with minimum value mink and maximum value maxK. We can keep track of the start index of the current subarray and update it whenever we encounter a value that is less than minK or greater than maxK.\\nWhen we find a subarray with both minK and maxK, we can count the number of subarrays that can be formed by taking the minimum index of minK and maxK as the starting point and the current index as the ending point.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n).\\n\\n- Space complexity:\\nO(1).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.empty()) return 0;\\n        char curr = chars[0];\\n        int count = 1;\\n        string s;\\n        for (int i = 1; i <= chars.size(); i++) {\\n            if (i < chars.size() && chars[i] == curr) {\\n                count++;\\n            } else {\\n                s.push_back(curr);\\n                if (count > 1) {\\n                    string str = to_string(count);\\n                    for (char c : str) {\\n                        s.push_back(c);\\n                    }\\n                }\\n                curr = i < chars.size() ? chars[i] : 0;\\n                count = 1;\\n            }\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            chars[i] = s[i];\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.empty()) return 0;\\n        char curr = chars[0];\\n        int count = 1;\\n        string s;\\n        for (int i = 1; i <= chars.size(); i++) {\\n            if (i < chars.size() && chars[i] == curr) {\\n                count++;\\n            } else {\\n                s.push_back(curr);\\n                if (count > 1) {\\n                    string str = to_string(count);\\n                    for (char c : str) {\\n                        s.push_back(c);\\n                    }\\n                }\\n                curr = i < chars.size() ? chars[i] : 0;\\n                count = 1;\\n            }\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            chars[i] = s[i];\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247956,
                "title": "99-faster-java-solution-easy",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int total_count = 0;\\n        char current_char = chars[0];\\n        int occurrence = 0;\\n        int index = 0;\\n        for(char ch : chars){ \\n            if(ch == current_char) occurrence++;\\n            else{\\n                if(occurrence > 1){\\n                    String str = Integer.toString(occurrence);\\n                    chars[index++] = current_char;\\n                    total_count++;\\n                    total_count += str.length();\\n                    for(char c : str.toCharArray()) chars[index++] = c;\\n                    \\n                }\\n                else{\\n                    total_count++;\\n                    chars[index++] = current_char;\\n                }\\n                current_char = ch;\\n                occurrence = 1;\\n            }\\n        }\\n        if(occurrence > 1){\\n            total_count++;\\n            chars[index++] = current_char;\\n            String str = Integer.toString(occurrence);\\n            total_count += str.length();\\n            for(char c : str.toCharArray()) chars[index++] = c;\\n        }\\n        else{\\n            total_count++;\\n            chars[index++] = current_char;\\n        }\\n        return total_count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int total_count = 0;\\n        char current_char = chars[0];\\n        int occurrence = 0;\\n        int index = 0;\\n        for(char ch : chars){ \\n            if(ch == current_char) occurrence++;\\n            else{\\n                if(occurrence > 1){\\n                    String str = Integer.toString(occurrence);\\n                    chars[index++] = current_char;\\n                    total_count++;\\n                    total_count += str.length();\\n                    for(char c : str.toCharArray()) chars[index++] = c;\\n                    \\n                }\\n                else{\\n                    total_count++;\\n                    chars[index++] = current_char;\\n                }\\n                current_char = ch;\\n                occurrence = 1;\\n            }\\n        }\\n        if(occurrence > 1){\\n            total_count++;\\n            chars[index++] = current_char;\\n            String str = Integer.toString(occurrence);\\n            total_count += str.length();\\n            for(char c : str.toCharArray()) chars[index++] = c;\\n        }\\n        else{\\n            total_count++;\\n            chars[index++] = current_char;\\n        }\\n        return total_count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983882,
                "title": "java-easy-solution-runtime-1ms-beats-99-12",
                "content": "\\nHope it helps.\\nDo Upvote if you like it :)\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int newindex=0; \\n        for(int i=0; i<chars.length; i++){\\n            Integer count=1; \\n            while( i<chars.length-1 && chars[i]==chars[i+1]){  //while same characters are found \\n                count++;\\n                i++;\\n            }\\n            chars[newindex] = chars[i];\\n            newindex++;\\n            if(count>1){\\n                for(char ch: Integer.toString(count).toCharArray()){ //for each character in character array, eg: for count=12 character array stores \"1\",\"2\" separately.\\n                    chars[newindex] = ch;\\n                    newindex++;\\n                }\\n\\n            }\\n        }\\n        return newindex;    \\n    }    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int newindex=0; \\n        for(int i=0; i<chars.length; i++){\\n            Integer count=1; \\n            while( i<chars.length-1 && chars[i]==chars[i+1]){  //while same characters are found \\n                count++;\\n                i++;\\n            }\\n            chars[newindex] = chars[i];\\n            newindex++;\\n            if(count>1){\\n                for(char ch: Integer.toString(count).toCharArray()){ //for each character in character array, eg: for count=12 character array stores \"1\",\"2\" separately.\\n                    chars[newindex] = ch;\\n                    newindex++;\\n                }\\n\\n            }\\n        }\\n        return newindex;    \\n    }    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2710765,
                "title": "easy-c-3ms-fast-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& ch) {\\n        int n = ch.size();\\n        int index = 0;\\n        int i = 0;\\n        while(i < n){\\n            int j = i;\\n            while(j < n && ch[i] == ch[j]){\\n                j++;\\n            }\\n            ch[index++] = ch[i];\\n            if(j - i > 1){\\n                string count = to_string(j-i);\\n                for(int c = 0; c < count.length();c++){\\n                    ch[index++] = count[c];\\n                }\\n            }\\n            i = j;\\n        }\\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& ch) {\\n        int n = ch.size();\\n        int index = 0;\\n        int i = 0;\\n        while(i < n){\\n            int j = i;\\n            while(j < n && ch[i] == ch[j]){\\n                j++;\\n            }\\n            ch[index++] = ch[i];\\n            if(j - i > 1){\\n                string count = to_string(j-i);\\n                for(int c = 0; c < count.length();c++){\\n                    ch[index++] = count[c];\\n                }\\n            }\\n            i = j;\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2614310,
                "title": "c-easy-in-place-o-n",
                "content": "```\\nint compress(vector<char>& chars) {\\n        string s;\\n        int c=1,i;\\n        for(i=1;i<chars.size();i++){\\n            if(chars[i]==chars[i-1])\\n                c++;\\n            else if(chars[i]!=chars[i-1] && c==1)\\n                s+=chars[i-1];\\n            else{\\n                s+=chars[i-1];\\n                s+=to_string(c);\\n                c=1;\\n            }\\n        }\\n        if(c==1)\\n            s+=chars[i-1];\\n        else{\\n            s+=chars[i-1]+to_string(c);\\n        }\\n        for(int i=0;i<s.length();i++){\\n            chars[i]=s[i];\\n        }\\n        vector<char>::iterator it;\\n        vector<char>::iterator ty;\\n        it=chars.begin()+s.length();\\n        ty=chars.begin()+chars.size();\\n        chars.erase(it,ty);\\n        return s.length();\\n    }\\n```\\t",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint compress(vector<char>& chars) {\\n        string s;\\n        int c=1,i;\\n        for(i=1;i<chars.size();i++){\\n            if(chars[i]==chars[i-1])\\n                c++;\\n            else if(chars[i]!=chars[i-1] && c==1)\\n                s+=chars[i-1];\\n            else{\\n                s+=chars[i-1];\\n                s+=to_string(c);\\n                c=1;\\n            }\\n        }\\n        if(c==1)\\n            s+=chars[i-1];\\n        else{\\n            s+=chars[i-1]+to_string(c);\\n        }\\n        for(int i=0;i<s.length();i++){\\n            chars[i]=s[i];\\n        }\\n        vector<char>::iterator it;\\n        vector<char>::iterator ty;\\n        it=chars.begin()+s.length();\\n        ty=chars.begin()+chars.size();\\n        chars.erase(it,ty);\\n        return s.length();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1508261,
                "title": "sliding-window-two-pointers-ac-c",
                "content": "*i started thinking with map because there is repeatation of characters but ended with sliding window*\\n\\n**Approach**\\n\\nfor this problem if you can see there is small small window like for the first tc\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nif i break it in chuncks with similar char\\n[\"a\",\"a\"],[\"b\",\"b\"],[\"c\",\"c\",\"c\"]\\na - 2 times\\nb - 2 times\\nc- 3 times \\n\\nsame for the last TC\\n[\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nbreak it in chuncks with similar char\\n[\"a\",\"a\",\"a\"],[\"b\",\"b\"],[\"a\",\"a\"]\\n\\n1) start two pointers and increase your second pointer and the count variable until found\\nthe different char\\n2) found the different char then update the first pointer and update the chars array too.\\n\\n*code is self explanatory*\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n=chars.size();\\n        int i=0,j=0;\\n        while(j<n){\\n            int c=0;\\n            char current_char=chars[j];\\n            while(j<n && chars[j]==current_char){\\n                c++;\\n                j++;\\n            }\\n            chars[i++]=current_char;\\n            if(c>1){\\n                string count=to_string(c);\\n                for(auto p:count){\\n                    chars[i++]=p;\\n                }\\n            }\\n           \\n        }\\n         return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n=chars.size();\\n        int i=0,j=0;\\n        while(j<n){\\n            int c=0;\\n            char current_char=chars[j];\\n            while(j<n && chars[j]==current_char){\\n                c++;\\n                j++;\\n            }\\n            chars[i++]=current_char;\\n            if(c>1){\\n                string count=to_string(c);\\n                for(auto p:count){\\n                    chars[i++]=p;\\n                }\\n            }\\n           \\n        }\\n         return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1091482,
                "title": "java-o-n-time-o-1-space-sliding-window-approach",
                "content": "\\tpublic static int compress(char[] chars) {\\n        if (chars.length == 1) return chars.length;\\n\\n        int i = 0;\\n        int l = 0;\\n        int r = 0;\\n\\n        while (r < chars.length) {\\n            int count = 0;\\n            char val = chars[l];\\n            while (r < chars.length && chars[r] == val) {\\n                count++;\\n                r++;\\n            }\\n\\n            chars[i] = val;\\n            i++;\\n\\n            if (count > 1) {\\n                for (char c : Integer.toString(count).toCharArray()) {\\n                    chars[i] = c;\\n                    i++;\\n                }\\n            }\\n\\n            l = r;\\n        }\\n\\n        return i;\\n    }",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "\\tpublic static int compress(char[] chars) {\\n        if (chars.length == 1) return chars.length;\\n\\n        int i = 0;\\n        int l = 0;\\n        int r = 0;\\n\\n        while (r < chars.length) {\\n            int count = 0;\\n            char val = chars[l];\\n            while (r < chars.length && chars[r] == val) {\\n                count++;\\n                r++;\\n            }\\n\\n            chars[i] = val;\\n            i++;\\n\\n            if (count > 1) {\\n                for (char c : Integer.toString(count).toCharArray()) {\\n                    chars[i] = c;\\n                    i++;\\n                }\\n            }\\n\\n            l = r;\\n        }\\n\\n        return i;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 512421,
                "title": "python-o-n-time-and-o-1-space-with-explanation",
                "content": "\\nALGORITHM:\\n1. Keep 2 pointers i and j. Pointers i iterates over the chars array. Pointers j \\n   keep track of the compressed array. \\n2. Keep incrementing i till similar characters are found. Then write the character\\n   and its count at j and j+1 locations. (If count > 9 then convert count to \\n   string and write the count character by character.)\\n3. Return the position of j as final length of result array. \\n\\nRUNTIME COMPLEXITY: O(N)\\nSPACE COMPLEXITY: O(1)\\n\\n```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        i, j = 0, 0\\n        while i < len(chars):\\n            x = chars[i]\\n            count = 0\\n            while i < len(chars) and chars[i] == x:\\n                i += 1\\n                count += 1\\n            \\n            chars[j] = x\\n            j += 1\\n            if count > 1:\\n                for c in str(count):\\n                    chars[j] = c\\n                    j += 1\\n        return j\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        i, j = 0, 0\\n        while i < len(chars):\\n            x = chars[i]\\n            count = 0\\n            while i < len(chars) and chars[i] == x:\\n                i += 1\\n                count += 1\\n            \\n            chars[j] = x\\n            j += 1\\n            if count > 1:\\n                for c in str(count):\\n                    chars[j] = c\\n                    j += 1\\n        return j\\n```",
                "codeTag": "Java"
            },
            {
                "id": 511814,
                "title": "runtime-4-ms-100-00-memory-usage-7-7-mb-100-00-in-c",
                "content": "int compress(char* chars, int charsSize){\\n    int pos=1, i, sum=1;\\n    for(i = 1; i<charsSize; i++)\\n    {\\n        if(chars[i]==chars[i-1])\\n            sum++;\\n        else if(sum != 1)\\n        {\\n            int len = 0, temp = sum;\\n            while(temp)\\n            {\\n                len++;\\n                temp/=10;\\n            }\\n            pos+=len;\\n            while(sum)\\n            {\\n                pos--;\\n                chars[pos] = (sum%10)+\\'0\\';\\n                sum/=10;\\n            }\\n            pos+=len;\\n            sum = 1;\\n        }\\n        if(sum==1)\\n            chars[pos++] = chars[i];\\n    }\\n    if(sum!=1)\\n    {\\n        int len = 0, temp = sum;\\n        while(temp)\\n        {\\n            len++;\\n            temp/=10;\\n        }\\n        pos+=len;\\n        while(sum)\\n        {\\n            pos--;\\n            chars[pos] = (sum%10)+\\'0\\';\\n            sum/=10;\\n        }\\n        pos+=len;\\n    }\\n    return pos;\\n}\\n",
                "solutionTags": [],
                "code": "int compress(char* chars, int charsSize){\\n    int pos=1, i, sum=1;\\n    for(i = 1; i<charsSize; i++)\\n    {\\n        if(chars[i]==chars[i-1])\\n            sum++;\\n        else if(sum != 1)\\n        {\\n            int len = 0, temp = sum;\\n            while(temp)\\n            {\\n                len++;\\n                temp/=10;\\n            }\\n            pos+=len;\\n            while(sum)\\n            {\\n                pos--;\\n                chars[pos] = (sum%10)+\\'0\\';\\n                sum/=10;\\n            }\\n            pos+=len;\\n            sum = 1;\\n        }\\n        if(sum==1)\\n            chars[pos++] = chars[i];\\n    }\\n    if(sum!=1)\\n    {\\n        int len = 0, temp = sum;\\n        while(temp)\\n        {\\n            len++;\\n            temp/=10;\\n        }\\n        pos+=len;\\n        while(sum)\\n        {\\n            pos--;\\n            chars[pos] = (sum%10)+\\'0\\';\\n            sum/=10;\\n        }\\n        pos+=len;\\n    }\\n    return pos;\\n}\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 181528,
                "title": "another-javascript-solution",
                "content": "```javascript\\nvar compress = function(chars) {\\n    let i = 0, j = 0;\\n    while (i < chars.length) {\\n        if (chars[j] === chars[i]) {\\n            j++;\\n        } else if (j > i + 1) {\\n            const nums = (j - i).toString().split(\\'\\');\\n            chars.splice(i + 1, j - i - 1, ...nums);\\n            j = i = i + 1 + nums.length;\\n        } else if (j = i + 1) {\\n            i = j;\\n            j++;\\n        }\\n    }\\n    return chars.length;\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\nvar compress = function(chars) {\\n    let i = 0, j = 0;\\n    while (i < chars.length) {\\n        if (chars[j] === chars[i]) {\\n            j++;\\n        } else if (j > i + 1) {\\n            const nums = (j - i).toString().split(\\'\\');\\n            chars.splice(i + 1, j - i - 1, ...nums);\\n            j = i = i + 1 + nums.length;\\n        } else if (j = i + 1) {\\n            i = j;\\n            j++;\\n        }\\n    }\\n    return chars.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957909,
                "title": "simple-fast-go-solution",
                "content": "# Approach\\nLet\\'s break down the approach to solving the problem:\\n\\n**Declaration of variables l and r:**\\n\\n**l** is an index that will be used to write compressed characters and their repetitions in the **resulting array**.\\n***r*** is an index that will be used to iterate through the original **chars array** and find sequences of identical characters.\\n\\n**Main loop:**\\n\\nThe outer loop continues as long as the index **r** is within the length of the **chars array**.\\nInside the outer loop, an index **j** is found, pointing to the first character different from the current character in the sequence.\\nThe sequence of characters from **r to j-1** constitutes a group of identical characters.\\n\\n**Writing compressed data:**\\n\\nThe character at position **r** is written to position **l** in the resulting chars array.\\nThe index **l** is incremented.\\n\\n**Writing the count of repetitions:**\\n\\nIf the length of the current sequence **j - r** is greater than 1, it indicates that there is more than one repetition of the character.\\nThe count of repetitions **j - r** is converted to a string using **strconv.Itoa**, and each digit is written as a separate character in the **resulting chars array**.\\n\\n**Updating index r:**\\n\\nIndex **r** is updated with the value of **j** to continue searching for the next group of identical characters.\\n\\n**Trimming the array:**\\n\\nUpon processing all groups of characters, the resulting chars array is trimmed to length l to remove unused elements.\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(const)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc compress(chars []byte) int {\\n\\tl, r := 0, 0 \\n\\n    for ;r<len(chars); {\\n        j := r + 1\\n        for ;j<len(chars) && chars[j] == chars[j-1]; j++ {} \\n\\n        chars[l] = chars[r]\\n        l++\\n        if j != r + 1 {\\n            for _, number := range(strconv.Itoa(j-r)) {\\n                chars[l] = byte(number)\\n                l++\\n            }\\n        }\\n        r = j\\n    }\\n\\n    chars = chars[:l]\\n    return len(chars)\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nfunc compress(chars []byte) int {\\n\\tl, r := 0, 0 \\n\\n    for ;r<len(chars); {\\n        j := r + 1\\n        for ;j<len(chars) && chars[j] == chars[j-1]; j++ {} \\n\\n        chars[l] = chars[r]\\n        l++\\n        if j != r + 1 {\\n            for _, number := range(strconv.Itoa(j-r)) {\\n                chars[l] = byte(number)\\n                l++\\n            }\\n        }\\n        r = j\\n    }\\n\\n    chars = chars[:l]\\n    return len(chars)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3878634,
                "title": "iterative-c-solution",
                "content": "\\n# Approach\\nInitialize variables: ansindex to keep track of the current index in the compressed vector, i to iterate through the original vector, and n to store the size of the original vector.\\n\\nUse a while loop to iterate through the original vector chars.\\n\\nFind the end of the repeating sequence: Start another loop (j) from i+1 until either the end of the vector or until the character at index j is different from the character at index i.\\n\\nStore the character at i in the compressed vector at index ansindex and increment ansindex.\\n\\nCalculate the count of the repeating characters: count is the difference between j and i, representing the number of times the character at index i is repeated in the original vector.\\n\\nIf count is greater than 1, it means there are consecutive repeated characters. In this case, convert count to a string representation (cnt) using to_string() and loop through each character in cnt.\\n\\nFor each character in cnt, store it in the compressed vector at index ansindex and increment ansindex.\\n\\nUpdate i to the value of j to move to the next character in the original vector.\\n\\nRepeat steps 3 to 8 until all characters in the original vector have been processed.\\n\\nReturn ansindex, which represents the size of the compressed vector.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int ansindex=0;\\n        int i =0;\\n        int n = chars.size();\\n        while(i<n)\\n        {\\n            int j= i+1;\\n            while(j<n && chars[i]==chars[j])\\n            {\\n                j++;\\n            }\\n            chars[ansindex++]=chars[i];\\n            int count = j-i;\\n                if(count>1)\\n                {\\n                    string cnt=to_string(count);\\n                    for(char ch : cnt)\\n                    {\\n                        chars[ansindex++]=ch;\\n                    }\\n                } \\n                i=j;\\n            \\n        }\\n        return ansindex;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int ansindex=0;\\n        int i =0;\\n        int n = chars.size();\\n        while(i<n)\\n        {\\n            int j= i+1;\\n            while(j<n && chars[i]==chars[j])\\n            {\\n                j++;\\n            }\\n            chars[ansindex++]=chars[i];\\n            int count = j-i;\\n                if(count>1)\\n                {\\n                    string cnt=to_string(count);\\n                    for(char ch : cnt)\\n                    {\\n                        chars[ansindex++]=ch;\\n                    }\\n                } \\n                i=j;\\n            \\n        }\\n        return ansindex;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3704102,
                "title": "easy-c-solution-o-1-space-complexity-o-n-time-complexity",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n=chars.size();\\n        int cnt=1;\\n        char temp=chars[0];\\n        int i=1,j=0;\\n        while(i<n){\\n            if(chars[i]==temp){\\n                cnt++;\\n            }\\n            else{\\n                chars[j++]=temp;\\n                if(cnt>1){\\n                    int start=j;\\n                    while(cnt){\\n                        chars[j++]=(cnt%10)+\\'0\\';\\n                        cnt/=10;\\n                    }\\n                    reverse(chars.begin()+start,chars.begin()+j);\\n                    cnt=1;\\n                }\\n                temp=chars[i];\\n            }\\n            i++;\\n        }\\n        chars[j++]=temp;\\n        if(cnt>1){\\n            int start=j;\\n            while(cnt){\\n                chars[j++]=(cnt%10)+\\'0\\';\\n                cnt/=10;\\n            }\\n            reverse(chars.begin()+start,chars.begin()+j);\\n            // cnt=1;\\n        }\\n        return j;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n=chars.size();\\n        int cnt=1;\\n        char temp=chars[0];\\n        int i=1,j=0;\\n        while(i<n){\\n            if(chars[i]==temp){\\n                cnt++;\\n            }\\n            else{\\n                chars[j++]=temp;\\n                if(cnt>1){\\n                    int start=j;\\n                    while(cnt){\\n                        chars[j++]=(cnt%10)+\\'0\\';\\n                        cnt/=10;\\n                    }\\n                    reverse(chars.begin()+start,chars.begin()+j);\\n                    cnt=1;\\n                }\\n                temp=chars[i];\\n            }\\n            i++;\\n        }\\n        chars[j++]=temp;\\n        if(cnt>1){\\n            int start=j;\\n            while(cnt){\\n                chars[j++]=(cnt%10)+\\'0\\';\\n                cnt/=10;\\n            }\\n            reverse(chars.begin()+start,chars.begin()+j);\\n            // cnt=1;\\n        }\\n        return j;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3365409,
                "title": "day-61-two-pointer-o-1-space-and-o-1-time-easiest-beginner-friendly-sol",
                "content": "**NOTE - PLEASE READ INTUITION AND APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Intuition of this Problem:\\nThe implementation uses two pointers, i and j, to traverse the character array. The variable i is used to iterate over the array, while j is used to keep track of the position to which the compressed character needs to be written. The variable prev is used to store the previous character encountered, and count is used to keep track of the number of consecutive occurrences of the current character.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach for this Problem:\\n1. Initialize variables i, j, prev, and count to 0 and char_count to 1.\\n2. If the length of the input character array is 0, return 0.\\n3. Iterate over the input character array using i, starting from the second character:\\n    - a. If the current character is equal to the previous character, increment count.\\n    - b. Otherwise:\\n        - i. If count is 1, write the previous character to the next position in the array.\\n        - ii. Otherwise, convert count to a string of digits and write the previous character, followed by the string, to the next position in the array. If the length of the string is 2 or more, increment j by the length of the string minus 1 to make space for the digits.\\n        - iii. Set prev to the current character and reset count to 1.\\n1. c. Increment i and j.\\nWrite the compressed character for the last group of consecutive characters to the array using the same logic as in step 3.\\nReturn j, which is the length of the compressed character array.\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code:\\n```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if (n == 0) \\n            return 0;\\n        \\n        int i = 0, j = 0, count = 1;\\n        char prevChar = chars[0];\\n        \\n        for (i = 1; i < n; i++) {\\n            if (chars[i] == prevChar) {\\n                count++;\\n            } else {\\n                chars[j++] = prevChar;\\n                if (count > 1) {\\n                    string countStr = to_string(count);\\n                    for (char ch : countStr) {\\n                        chars[j++] = ch;\\n                    }\\n                }\\n                prevChar = chars[i];\\n                count = 1;\\n            }\\n        }\\n        \\n        chars[j++] = prevChar;\\n        if (count > 1) {\\n            string countStr = to_string(count);\\n            for (char ch : countStr) {\\n                chars[j++] = ch;\\n            }\\n        }\\n        \\n        return j;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i = 0, j = 0, count = 1;\\n        char prev = chars[0];\\n        if (chars.length == 0) {\\n            return 0;\\n        }\\n        for (i = 1; i < chars.length; i++) {\\n            if (chars[i] == prev) {\\n                count++;\\n            } else {\\n                if (count == 1) {\\n                    chars[j++] = prev;\\n                } else {\\n                    String countStr = String.valueOf(count);\\n                    chars[j++] = prev;\\n                    for (int k = 0; k < countStr.length(); k++) {\\n                        chars[j++] = countStr.charAt(k);\\n                    }\\n                    if (countStr.length() >= 2) {\\n                        j -= (countStr.length() - 1);\\n                    }\\n                }\\n                prev = chars[i];\\n                count = 1;\\n            }\\n        }\\n        if (count == 1) {\\n            chars[j++] = prev;\\n        } else {\\n            String countStr = String.valueOf(count);\\n            chars[j++] = prev;\\n            for (int k = 0; k < countStr.length(); k++) {\\n                chars[j++] = countStr.charAt(k);\\n            }\\n            if (countStr.length() >= 2) {\\n                j -= (countStr.length() - 1);\\n            }\\n        }\\n        return j;\\n    }\\n}\\n\\n```\\n```Python []\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        i = 0\\n        j = 0\\n        \\n        while i < n:\\n            count = 1\\n            while i < n - 1 and chars[i] == chars[i+1]:\\n                count += 1\\n                i += 1\\n            \\n            chars[j] = chars[i]\\n            j += 1\\n            \\n            if count > 1:\\n                for c in str(count):\\n                    chars[j] = c\\n                    j += 1\\n            \\n            i += 1\\n        \\n        return j\\n\\n```\\n\\n# Time Complexity and Space Complexity:\\n- **Time complexity**: **O(n)**, where n is the length of the input character array. This is because we traverse the array only once, and the operations within the loop take constant time.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- **Space complexity**: **O(1)**, i.e. constant extra space. This is because we are modifying the input array in place, without using any additional data structures. The only extra space used is the variables i, j, prev, and count, which all take constant space.\\n    - Note that the conversion of the count of consecutive characters to a string may take up to O(log(count)) space, but this is still considered constant space as the maximum length of the string is bounded by a constant (i.e., 10). Therefore, the overall space complexity of the algorithm is O(1).\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Two Pointers",
                    "String"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if (n == 0) \\n            return 0;\\n        \\n        int i = 0, j = 0, count = 1;\\n        char prevChar = chars[0];\\n        \\n        for (i = 1; i < n; i++) {\\n            if (chars[i] == prevChar) {\\n                count++;\\n            } else {\\n                chars[j++] = prevChar;\\n                if (count > 1) {\\n                    string countStr = to_string(count);\\n                    for (char ch : countStr) {\\n                        chars[j++] = ch;\\n                    }\\n                }\\n                prevChar = chars[i];\\n                count = 1;\\n            }\\n        }\\n        \\n        chars[j++] = prevChar;\\n        if (count > 1) {\\n            string countStr = to_string(count);\\n            for (char ch : countStr) {\\n                chars[j++] = ch;\\n            }\\n        }\\n        \\n        return j;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i = 0, j = 0, count = 1;\\n        char prev = chars[0];\\n        if (chars.length == 0) {\\n            return 0;\\n        }\\n        for (i = 1; i < chars.length; i++) {\\n            if (chars[i] == prev) {\\n                count++;\\n            } else {\\n                if (count == 1) {\\n                    chars[j++] = prev;\\n                } else {\\n                    String countStr = String.valueOf(count);\\n                    chars[j++] = prev;\\n                    for (int k = 0; k < countStr.length(); k++) {\\n                        chars[j++] = countStr.charAt(k);\\n                    }\\n                    if (countStr.length() >= 2) {\\n                        j -= (countStr.length() - 1);\\n                    }\\n                }\\n                prev = chars[i];\\n                count = 1;\\n            }\\n        }\\n        if (count == 1) {\\n            chars[j++] = prev;\\n        } else {\\n            String countStr = String.valueOf(count);\\n            chars[j++] = prev;\\n            for (int k = 0; k < countStr.length(); k++) {\\n                chars[j++] = countStr.charAt(k);\\n            }\\n            if (countStr.length() >= 2) {\\n                j -= (countStr.length() - 1);\\n            }\\n        }\\n        return j;\\n    }\\n}\\n\\n```\n```Python []\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        i = 0\\n        j = 0\\n        \\n        while i < n:\\n            count = 1\\n            while i < n - 1 and chars[i] == chars[i+1]:\\n                count += 1\\n                i += 1\\n            \\n            chars[j] = chars[i]\\n            j += 1\\n            \\n            if count > 1:\\n                for c in str(count):\\n                    chars[j] = c\\n                    j += 1\\n            \\n            i += 1\\n        \\n        return j\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247044,
                "title": "easy-solution-detailed-explanation-o-n-cpp-string",
                "content": "Feel free to ask any doubt. you cana contact me on linkdin- https://linkedin.com/in/bhaskar-agrawal-a01069219. please upvote.\\n# INTUITION \\nWe are asked to compress the string by replacing multiple same characters followed by their frequency. if frequency/ count is 1, ignore that and if it is greater than 9, break them in sperate characters. See how to tackle this.\\n\\n# APPROACH\\n1. DECLARE some variables like **count** to keep tract of frequency of characters, **index** to store character and frequency in array.\\n2. run a loop till less than size, and set j as i+1.\\n3. in another loop, check if i and j index are same, if same increase j by 1 unless they are not equal. [**j - i will give the actual frequency of each character**]\\n4. store the character at index in chars and increase by 1.\\n5. check if count is greater than 1 or not. if not **set i = j**  so that we can start traversing from next different character.\\n6. if count is greater than 1, then convert the count into string.\\n7. using for range based loop, extract character by character from count string and insert it in chars array. like this \\n   string temp= to_string(count);\\n                for(char c: temp)\\n                    chars[index++]= c;\\n8. return index as it contains the  new length of chars.\\n\\n# EXAMPLE-\\nWe dont have to care about what character we are encountering.\\n[\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nin this we are having 2 a, 10 b, 3 c.\\ntry to solve yourself. if you face any problem, feel free to contact me.\\n# COMPLEXITY \\n**TIME** O(N)- LINEAR.\\n**SPACE** O(1)- CONSTANT\\n# CODE\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int size= chars.size();\\n        int i=0, j=0, count=0, index=0;\\n        while(i<size){\\n            j= i+1;\\n            while((j<size)&&(chars[i]==chars[j]))\\n                j=j+1;\\n            //storing character and setting up count\\n            chars[index++]= chars[i];\\n            count= j-i;\\n            if(count>1)\\n            {\\n                string temp= to_string(count);\\n                for(char c: temp)\\n                    chars[index++]= c;\\n            }\\n            i=j;\\n        }\\n        return index;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int size= chars.size();\\n        int i=0, j=0, count=0, index=0;\\n        while(i<size){\\n            j= i+1;\\n            while((j<size)&&(chars[i]==chars[j]))\\n                j=j+1;\\n            //storing character and setting up count\\n            chars[index++]= chars[i];\\n            count= j-i;\\n            if(count>1)\\n            {\\n                string temp= to_string(count);\\n                for(char c: temp)\\n                    chars[index++]= c;\\n            }\\n            i=j;\\n        }\\n        return index;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246964,
                "title": "easy-java-solution-beginner-friendly-comments-added",
                "content": "**If you really found my solution helpful please upvote it, as it motivates me to post such kind of codes and help the coding community, if you have some queries or some improvements please feel free to comment and share your views.**\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        if(chars.length == 1){\\n            return 1;\\n        }\\n        String res = \"\";\\n        //storing the first character\\n        char ch = chars[0];\\n        int currCount = 1;\\n        for(int i = 1 ; i < chars.length; i ++){\\n            //if the previous and new character is same then increase the count\\n            if(chars[i] == ch){\\n                currCount++;\\n            }\\n            //else append the total number and re-initialize the currCount and ch value\\n            else{\\n                res += ch;\\n                ch = chars[i];\\n                //check if the current count == 1 then no need to add currCount\\n                if(currCount == 1){\\n                    continue;\\n                }\\n                //append the currCount value to res and re-initailize the currCount Value\\n                res += currCount;\\n                currCount = 1;\\n            }\\n        }\\n        //appending the last character of the array\\n        res += ch;\\n        //check if the current count == 1 then no need to add currCount for the last character\\n        if(currCount > 1){\\n            res += currCount;\\n        }\\n        //changing the inplace value with res\\n        for(int i = 0 ; i < res.length(); i ++){\\n            chars[i] = res.charAt(i);\\n        }\\n        //returning res.length\\n        return res.length();\\n    }\\n}\\n```\\n![42b90dac-a6e9-4f9d-99f5-d07a676b1819_1676256247.436845.jpeg](https://assets.leetcode.com/users/images/85585860-a698-4fc5-9d67-a57b513dfd9f_1677747861.4592414.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        if(chars.length == 1){\\n            return 1;\\n        }\\n        String res = \"\";\\n        //storing the first character\\n        char ch = chars[0];\\n        int currCount = 1;\\n        for(int i = 1 ; i < chars.length; i ++){\\n            //if the previous and new character is same then increase the count\\n            if(chars[i] == ch){\\n                currCount++;\\n            }\\n            //else append the total number and re-initialize the currCount and ch value\\n            else{\\n                res += ch;\\n                ch = chars[i];\\n                //check if the current count == 1 then no need to add currCount\\n                if(currCount == 1){\\n                    continue;\\n                }\\n                //append the currCount value to res and re-initailize the currCount Value\\n                res += currCount;\\n                currCount = 1;\\n            }\\n        }\\n        //appending the last character of the array\\n        res += ch;\\n        //check if the current count == 1 then no need to add currCount for the last character\\n        if(currCount > 1){\\n            res += currCount;\\n        }\\n        //changing the inplace value with res\\n        for(int i = 0 ; i < res.length(); i ++){\\n            chars[i] = res.charAt(i);\\n        }\\n        //returning res.length\\n        return res.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246259,
                "title": "100-faster-c-code-constant-space-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe idea is to get the frequency of the consecutive characters and fitting that frequency in the vector after the character with that frequency.\\n\\n---\\n\\n> **It is to be observed that the size of the vector will not increase even after numbers are addded in place. Therefore there is no need to create another vector and then copying it back and can be done in constant space.**\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Initialise a frequency variable and set it as 1, minimum frequency of an occuring character\\n- And a position variable set at 0, the starting point\\n>**Now Traverse the Given vector from index 1 to size-1**\\n>>**If the ith char is same as the (i-1)th char, Increase the frequency**\\n**else**\\n>>>Set the (i-1)th char at the index pointed by ans \\nAnd then increase the ans variable by 1\\n**If frequency is 1,**\\n no need to modify the characters\\n**Else** \\nmodification is needed\\n>>>>Convert the frequency to String and store in num\\n    And then modify all the character int range (ans to [ans + size_of_num - 1])\\n`for(char c : num_String) chars[position++] = c;`\\n\\n>>>Set the Frequency variable back to 1;\\n\\n**Return the position variable**\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) \\n    {\\n        // Using space as the ending character \\n        // This is because chars[i] != \\' \\', as per the question\\n        // Helps to get the last charcter and its frequency, \\n        // Without check whether the last index has been reached or not\\n        chars.push_back(\\' \\');\\n        // Setting the initial frequency as 1\\n        // Every character in the vector will occur at least once\\n        // Using ans variable as the pointer\\n        int freq = 1, ans = 0;\\n        for(int i = 1; i < chars.size();i++)\\n        {\\n            // If the ith char is same as the (i-1)th char, \\n            // Increase the frequency\\n            if(chars[i] == chars[i-1]) \\n              freq++;\\n            else\\n            {\\n                // Set the (i-1)th char at the index pointed by ans variable\\n                // And then increase the ans variable by 1\\n                chars[ans++] = chars[i-1];\\n                // If frequency is 1, no need to modify the characters\\n                // Else modification is needed\\n                if(freq > 1)\\n                {\\n                    // Convert the frequency to String and store in num\\n                    // And then modify all the character int range (ans to [ans + size_of_num - 1])\\n                    string num = to_string(freq);\\n                    for(char c : num)\\n                    chars[ans++] = c;\\n                    // The ans variable now points to the first index that has not been modified\\n                    // Or the end point that has to be returned\\n                }\\n                freq = 1;\\n                // Setting the frequency back to 1, Atleast one occurance!\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) \\n    {\\n        // Using space as the ending character \\n        // This is because chars[i] != \\' \\', as per the question\\n        // Helps to get the last charcter and its frequency, \\n        // Without check whether the last index has been reached or not\\n        chars.push_back(\\' \\');\\n        // Setting the initial frequency as 1\\n        // Every character in the vector will occur at least once\\n        // Using ans variable as the pointer\\n        int freq = 1, ans = 0;\\n        for(int i = 1; i < chars.size();i++)\\n        {\\n            // If the ith char is same as the (i-1)th char, \\n            // Increase the frequency\\n            if(chars[i] == chars[i-1]) \\n              freq++;\\n            else\\n            {\\n                // Set the (i-1)th char at the index pointed by ans variable\\n                // And then increase the ans variable by 1\\n                chars[ans++] = chars[i-1];\\n                // If frequency is 1, no need to modify the characters\\n                // Else modification is needed\\n                if(freq > 1)\\n                {\\n                    // Convert the frequency to String and store in num\\n                    // And then modify all the character int range (ans to [ans + size_of_num - 1])\\n                    string num = to_string(freq);\\n                    for(char c : num)\\n                    chars[ans++] = c;\\n                    // The ans variable now points to the first index that has not been modified\\n                    // Or the end point that has to be returned\\n                }\\n                freq = 1;\\n                // Setting the frequency back to 1, Atleast one occurance!\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245695,
                "title": "c",
                "content": "```C []\\nint compress(char * const chars, const int charsLen){\\n\\tint newCharsLen = 0;\\n\\n\\tfor (int i = 0; i < charsLen; ){\\n\\t\\tconst char curChar = chars[i];\\n\\t\\ti += 1;\\n\\n\\t\\tint curCharCnt = 1;\\n\\t\\twhile (i < charsLen && curChar == chars[i]){\\n\\t\\t\\tcurCharCnt += 1;\\n\\t\\t\\ti += 1;\\n\\t\\t}\\n\\n\\t\\tchars[newCharsLen] = curChar;\\n\\t\\tnewCharsLen += 1;\\n\\n\\t\\tif (curCharCnt > 1){\\n\\t\\t\\tchar digits[10];\\n\\t\\t\\tint digitsLen = 0;\\n\\t\\t\\twhile (curCharCnt > 0){\\n\\t\\t\\t\\tdigits[digitsLen] = curCharCnt % 10 + \\'0\\';\\n\\t\\t\\t\\tdigitsLen += 1;\\n\\n\\t\\t\\t\\tcurCharCnt /= 10;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (int j = digitsLen - 1; j >= 0; j -= 1){\\n\\t\\t\\t\\tchars[newCharsLen] = digits[j];\\n\\t\\t\\t\\tnewCharsLen += 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn newCharsLen;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```C []\\nint compress(char * const chars, const int charsLen){\\n\\tint newCharsLen = 0;\\n\\n\\tfor (int i = 0; i < charsLen; ){\\n\\t\\tconst char curChar = chars[i];\\n\\t\\ti += 1;\\n\\n\\t\\tint curCharCnt = 1;\\n\\t\\twhile (i < charsLen && curChar == chars[i]){\\n\\t\\t\\tcurCharCnt += 1;\\n\\t\\t\\ti += 1;\\n\\t\\t}\\n\\n\\t\\tchars[newCharsLen] = curChar;\\n\\t\\tnewCharsLen += 1;\\n\\n\\t\\tif (curCharCnt > 1){\\n\\t\\t\\tchar digits[10];\\n\\t\\t\\tint digitsLen = 0;\\n\\t\\t\\twhile (curCharCnt > 0){\\n\\t\\t\\t\\tdigits[digitsLen] = curCharCnt % 10 + \\'0\\';\\n\\t\\t\\t\\tdigitsLen += 1;\\n\\n\\t\\t\\t\\tcurCharCnt /= 10;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (int j = digitsLen - 1; j >= 0; j -= 1){\\n\\t\\t\\t\\tchars[newCharsLen] = digits[j];\\n\\t\\t\\t\\tnewCharsLen += 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn newCharsLen;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3193842,
                "title": "easy-to-solution-in-python-beats-80-run-time",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        stack=[]\\n        lst=[]\\n        for i in chars:\\n            if stack and stack[-1]!=i:\\n                lst.append(stack[-1])\\n                if len(stack)!=1:\\n                    ln=str(len(stack))\\n                    for num in ln:\\n                        lst.append(num)\\n                stack=[]\\n                stack.append(i)\\n            else:\\n                stack.append(i)\\n        lst.append(stack[-1])\\n        if len(stack)!=1:\\n            ln=str(len(stack))\\n            for num in ln:\\n                lst.append(num)\\n        chars[:]=lst\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        stack=[]\\n        lst=[]\\n        for i in chars:\\n            if stack and stack[-1]!=i:\\n                lst.append(stack[-1])\\n                if len(stack)!=1:\\n                    ln=str(len(stack))\\n                    for num in ln:\\n                        lst.append(num)\\n                stack=[]\\n                stack.append(i)\\n            else:\\n                stack.append(i)\\n        lst.append(stack[-1])\\n        if len(stack)!=1:\\n            ln=str(len(stack))\\n            for num in ln:\\n                lst.append(num)\\n        chars[:]=lst\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2922492,
                "title": "simple-java-solution-runtime-1-ms-beats-99-38",
                "content": "Hope this helps.\\nDo Upvote if you like it !!\\n\\nThanks :)\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n       int count=1;\\n       int index=0;\\n       for(int i=0;i<chars.length;i++){\\n           count=1;\\n           while(i<chars.length-1 && chars[i]==chars[i+1] ){\\n               i++;\\n               count++;\\n           }\\n           chars[index]=chars[i];\\n           index++;\\n           if(count>1){\\n               for(char c:Integer.toString(count).toCharArray()){\\n                  chars[index]= c;\\n                  index++;\\n               }\\n           }\\n       }\\n       return(index);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n       int count=1;\\n       int index=0;\\n       for(int i=0;i<chars.length;i++){\\n           count=1;\\n           while(i<chars.length-1 && chars[i]==chars[i+1] ){\\n               i++;\\n               count++;\\n           }\\n           chars[index]=chars[i];\\n           index++;\\n           if(count>1){\\n               for(char c:Integer.toString(count).toCharArray()){\\n                  chars[index]= c;\\n                  index++;\\n               }\\n           }\\n       }\\n       return(index);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2858069,
                "title": "rust-constant-space-two-pointers-o-n",
                "content": "```\\nimpl Solution {\\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\\n        let mut p: usize = 0;\\n        let mut right: usize = 1;\\n        let mut counter: usize = 1;\\n        \\n        while right != chars.len() + 1 {\\n            if right == chars.len() || chars[right] != chars[right-1] {\\n                chars[p] = chars[right-1];\\n                \\n                if counter != 1 {\\n                    let num_str = counter.to_string();\\n                    for el in num_str.as_bytes().iter() {\\n                        p += 1;\\n                        chars[p] = *el as char;\\n                    }\\n                }\\n                p += 1;\\n                counter = 0;\\n            }\\n            right += 1;\\n            counter += 1;\\n        }\\n        \\n        return p as i32;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\\n        let mut p: usize = 0;\\n        let mut right: usize = 1;\\n        let mut counter: usize = 1;\\n        \\n        while right != chars.len() + 1 {\\n            if right == chars.len() || chars[right] != chars[right-1] {\\n                chars[p] = chars[right-1];\\n                \\n                if counter != 1 {\\n                    let num_str = counter.to_string();\\n                    for el in num_str.as_bytes().iter() {\\n                        p += 1;\\n                        chars[p] = *el as char;\\n                    }\\n                }\\n                p += 1;\\n                counter = 0;\\n            }\\n            right += 1;\\n            counter += 1;\\n        }\\n        \\n        return p as i32;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2408583,
                "title": "java-very-simple-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n      int ans = 0, i = 0;\\n      while(i < chars.length){\\n            char curr = chars[i];\\n            int count = 0;\\n            while(i < chars.length && chars[i] == curr){\\n                i++;\\n                count++;\\n            }\\n            chars[ans ++] = curr;\\n            if(count != 1)\\n                for(char c : Integer.toString(count).toCharArray()) \\n                    chars[ans ++] = c;\\n        }\\n        return ans;\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n      int ans = 0, i = 0;\\n      while(i < chars.length){\\n            char curr = chars[i];\\n            int count = 0;\\n            while(i < chars.length && chars[i] == curr){\\n                i++;\\n                count++;\\n            }\\n            chars[ans ++] = curr;\\n            if(count != 1)\\n                for(char c : Integer.toString(count).toCharArray()) \\n                    chars[ans ++] = c;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1818003,
                "title": "java-simulation-o-n-time-constant-space",
                "content": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i = 0;\\n        int j = 1;\\n        int freq = 1;\\n        char ch;\\n        String s;\\n        while(j <= chars.length){\\n            if(j != chars.length && chars[j] == chars[j-1] ){\\n                freq++;\\n            }\\n            else{\\n                chars[i++] = chars[j-1];\\n                if(freq > 1){\\n                    s = String.valueOf(freq);\\n                    for(int k = 0; k< s.length(); k++)\\n                        chars[i++] = s.charAt(k);\\n                }\\n                freq = 1;\\n            }\\n            j++;\\n        }\\n        return i;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i = 0;\\n        int j = 1;\\n        int freq = 1;\\n        char ch;\\n        String s;\\n        while(j <= chars.length){\\n            if(j != chars.length && chars[j] == chars[j-1] ){\\n                freq++;\\n            }\\n            else{\\n                chars[i++] = chars[j-1];\\n                if(freq > 1){\\n                    s = String.valueOf(freq);\\n                    for(int k = 0; k< s.length(); k++)\\n                        chars[i++] = s.charAt(k);\\n                }\\n                freq = 1;\\n            }\\n            j++;\\n        }\\n        return i;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1582574,
                "title": "simple-to-understand-using-basic-loops-with-comments",
                "content": "**Thumbs up if you find this helpful** \\uD83D\\uDC4D\\n\\n**Approach #1**\\n```\\npublic class Solution {\\n    public int Compress(char[] chars) {\\n        // Keeps track of the result index\\n        var resultIndex = 0;\\n\\n        // Go through items in the array\\n        var currentIndex = 0;\\n        while (currentIndex < chars.Length) {\\n            // Get the current character\\n            var currentLetter = chars[currentIndex];\\n            \\n            // Check to see how many consecutive characters exists\\n            var letterCount = 0;\\n            while (currentIndex < chars.Length && chars[currentIndex] == currentLetter) {\\n                ++currentIndex;\\n                ++letterCount;\\n            }\\n            // Save the current character at the result index\\n            chars[resultIndex++] = currentLetter;\\n            \\n            // Save the consecutive character count if there is more than one letter\\n            if (letterCount > 1) {\\n                foreach (var digit in letterCount.ToString()) {\\n                    chars[resultIndex++] = digit;\\n                }\\n            }\\n        }        \\n        return resultIndex;\\n    }\\n}\\n```\\n\\n**Approach #2**\\n```\\npublic class Solution {\\n    public int Compress(char[] chars) {\\n        // Keeps track of the result index\\n        var resultIndex = 0;\\n\\n        // Go through items in the array\\n        var currentIndex = 0;\\n        while (currentIndex < chars.Length) {\\n            // Get the current character\\n            var currentLetter = chars[currentIndex];\\n            \\n            // Check to see how many consecutive characters exists\\n            var letterCount = 0;\\n            while (currentIndex < chars.Length && chars[currentIndex] == currentLetter) {\\n                ++currentIndex;\\n                ++letterCount;\\n            }\\n            // Save the current character at the result index\\n            chars[resultIndex++] = currentLetter;\\n            \\n            // Save the consecutive character count if there is more than one letter\\n            if (letterCount > 1) {\\n                var totalDigits = (int)Math.Floor(Math.Log10(letterCount) + 1);\\n                resultIndex += totalDigits;\\n                var endIndex = (resultIndex) - 1;\\n                while (letterCount > 0) {\\n                    var digit = (char)((letterCount % 10) + \\'0\\');\\n                    chars[endIndex--] = digit;\\n                    letterCount /= 10;                  \\n                }\\n            }\\n        }        \\n        return resultIndex;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int Compress(char[] chars) {\\n        // Keeps track of the result index\\n        var resultIndex = 0;\\n\\n        // Go through items in the array\\n        var currentIndex = 0;\\n        while (currentIndex < chars.Length) {\\n            // Get the current character\\n            var currentLetter = chars[currentIndex];\\n            \\n            // Check to see how many consecutive characters exists\\n            var letterCount = 0;\\n            while (currentIndex < chars.Length && chars[currentIndex] == currentLetter) {\\n                ++currentIndex;\\n                ++letterCount;\\n            }\\n            // Save the current character at the result index\\n            chars[resultIndex++] = currentLetter;\\n            \\n            // Save the consecutive character count if there is more than one letter\\n            if (letterCount > 1) {\\n                foreach (var digit in letterCount.ToString()) {\\n                    chars[resultIndex++] = digit;\\n                }\\n            }\\n        }        \\n        return resultIndex;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int Compress(char[] chars) {\\n        // Keeps track of the result index\\n        var resultIndex = 0;\\n\\n        // Go through items in the array\\n        var currentIndex = 0;\\n        while (currentIndex < chars.Length) {\\n            // Get the current character\\n            var currentLetter = chars[currentIndex];\\n            \\n            // Check to see how many consecutive characters exists\\n            var letterCount = 0;\\n            while (currentIndex < chars.Length && chars[currentIndex] == currentLetter) {\\n                ++currentIndex;\\n                ++letterCount;\\n            }\\n            // Save the current character at the result index\\n            chars[resultIndex++] = currentLetter;\\n            \\n            // Save the consecutive character count if there is more than one letter\\n            if (letterCount > 1) {\\n                var totalDigits = (int)Math.Floor(Math.Log10(letterCount) + 1);\\n                resultIndex += totalDigits;\\n                var endIndex = (resultIndex) - 1;\\n                while (letterCount > 0) {\\n                    var digit = (char)((letterCount % 10) + \\'0\\');\\n                    chars[endIndex--] = digit;\\n                    letterCount /= 10;                  \\n                }\\n            }\\n        }        \\n        return resultIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 647520,
                "title": "javascript-solution",
                "content": "> Runtime: 72 ms, faster than 30.00% of JavaScript online submissions for String Compression.\\nMemory Usage: 38.4 MB, less than 100.00% of JavaScript online submissions for String Compression.\\n\\n```js\\nvar compress = function(chars) {\\n    let times = 1\\n    for(let i=1;i<=chars.length;i++) {\\n        if(chars[i-1]==chars[i]) {\\n            while(chars[i-1]==chars[i]) {\\n                chars.splice(i-1,1)\\n                times++\\n            }\\n            let str = String(times)\\n            String(times).split(\\'\\').reverse().forEach(e=>{\\n                chars.splice(i,0, e)\\n            })\\n            i++\\n            times=1\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```js\\nvar compress = function(chars) {\\n    let times = 1\\n    for(let i=1;i<=chars.length;i++) {\\n        if(chars[i-1]==chars[i]) {\\n            while(chars[i-1]==chars[i]) {\\n                chars.splice(i-1,1)\\n                times++\\n            }\\n            let str = String(times)\\n            String(times).split(\\'\\').reverse().forEach(e=>{\\n                chars.splice(i,0, e)\\n            })\\n            i++\\n            times=1\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 564190,
                "title": "python-clean-solution-using-groupby",
                "content": "```\\ndef compress(self, chars: List[str]) -> int:\\n        i = 0\\n        count = 0\\n        for k, g in groupby(chars):\\n            chars[i] = k\\n            i += 1\\n            len_g = len(list(g))\\n            if len_g > 1:\\n                for num in str(len_g):\\n                    chars[i] = num\\n                    i += 1\\n        return i\\n```",
                "solutionTags": [],
                "code": "```\\ndef compress(self, chars: List[str]) -> int:\\n        i = 0\\n        count = 0\\n        for k, g in groupby(chars):\\n            chars[i] = k\\n            i += 1\\n            len_g = len(list(g))\\n            if len_g > 1:\\n                for num in str(len_g):\\n                    chars[i] = num\\n                    i += 1\\n        return i\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3254165,
                "title": "c-3-approaches-o-nlogn-o-n-o-n-o-1-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nO(nlogn) + space (Due to Map) :\\nkeep map<index,{character,count}>\\ntraverse the map, the indexes are in sorted order so suppose a starts from 2 and d starts from 6th index so a would be considered first. \\nSo, traverse map and put the character and count of characters at place.\\n\\nO(n) + O(n) space:\\nwe had to keep map for ordering of characters in their order they appear in input, now we can use unordered_map (which use hashing) and keep an array to keep indexes in order. Now we will traverse in array and access character and their count in order.\\n\\nO(n) + O(1) space:\\nTwo Pointer \\nkeep index=0\\nEvaluate count of character and keep editing them behind\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n// O(nlogn) + space (Due to Map) :\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        map<int,pair<char,int>> mp;\\n        for(int i=0;i<chars.size();i++){\\n            int j=i+1;\\n            int count=1;\\n            while(j<chars.size() && chars[j]==chars[i]){\\n                count++;\\n                j++;\\n            }\\n            i=j-1;\\n            mp[i]={chars[i],count};\\n        }\\n        \\n        int index=0;\\n        for(auto i : mp){\\n            chars[index++]=i.second.first;\\n            if(i.second.second==1) continue;\\n            string value=to_string(i.second.second);\\n            for(int j=0;j<value.size();j++){\\n                chars[index++]=value[j];\\n            }            \\n        }\\n        return index; \\n    }\\n};\\n```\\n\\n```\\n//O(n) + O(n) space:\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        unordered_map<int,pair<char,int>> mp;\\n        vector<int> pos;\\n\\n        for(int i=0;i<chars.size();i++){\\n            pos.push_back(i);\\n            int j=i+1;\\n            int count=1;\\n            while(j<chars.size() && chars[j]==chars[i]){\\n                count++;\\n                j++;\\n            }\\n            mp[i]={chars[i],count};\\n            i=j-1;\\n        }\\n        \\n        int index=0;\\n        for(int i=0;i<pos.size();i++){\\n            chars[index++]=mp[pos[i]].first;\\n            if(mp[pos[i]].second==1) continue;\\n            string value=to_string(mp[pos[i]].second);\\n            for(int j=0;j<value.size();j++){\\n                chars[index++]=value[j];\\n            }  \\n        }\\n        return index; \\n    }\\n};\\n```\\n\\n```\\n//O(n) + O(1) space:\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i=0;\\n        int index=0;\\n        for(int i=0;i<chars.size();i++){\\n            int j=i+1;\\n            int count=1;\\n            while(j<chars.size() && chars[i]==chars[j]){\\n                j++;\\n                count++;\\n            }\\n\\n            chars[index++]=chars[i];\\n            if(count>1){\\n                string value=to_string(count);\\n                for(int k=0;k<value.size();k++){\\n                    chars[index++]=value[k];\\n                }\\n            }\\n            i=j-1;\\n        }\\n        return index;\\n    }    \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Ordered Map"
                ],
                "code": "```\\n// O(nlogn) + space (Due to Map) :\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        map<int,pair<char,int>> mp;\\n        for(int i=0;i<chars.size();i++){\\n            int j=i+1;\\n            int count=1;\\n            while(j<chars.size() && chars[j]==chars[i]){\\n                count++;\\n                j++;\\n            }\\n            i=j-1;\\n            mp[i]={chars[i],count};\\n        }\\n        \\n        int index=0;\\n        for(auto i : mp){\\n            chars[index++]=i.second.first;\\n            if(i.second.second==1) continue;\\n            string value=to_string(i.second.second);\\n            for(int j=0;j<value.size();j++){\\n                chars[index++]=value[j];\\n            }            \\n        }\\n        return index; \\n    }\\n};\\n```\n```\\n//O(n) + O(n) space:\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        unordered_map<int,pair<char,int>> mp;\\n        vector<int> pos;\\n\\n        for(int i=0;i<chars.size();i++){\\n            pos.push_back(i);\\n            int j=i+1;\\n            int count=1;\\n            while(j<chars.size() && chars[j]==chars[i]){\\n                count++;\\n                j++;\\n            }\\n            mp[i]={chars[i],count};\\n            i=j-1;\\n        }\\n        \\n        int index=0;\\n        for(int i=0;i<pos.size();i++){\\n            chars[index++]=mp[pos[i]].first;\\n            if(mp[pos[i]].second==1) continue;\\n            string value=to_string(mp[pos[i]].second);\\n            for(int j=0;j<value.size();j++){\\n                chars[index++]=value[j];\\n            }  \\n        }\\n        return index; \\n    }\\n};\\n```\n```\\n//O(n) + O(1) space:\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i=0;\\n        int index=0;\\n        for(int i=0;i<chars.size();i++){\\n            int j=i+1;\\n            int count=1;\\n            while(j<chars.size() && chars[i]==chars[j]){\\n                j++;\\n                count++;\\n            }\\n\\n            chars[index++]=chars[i];\\n            if(count>1){\\n                string value=to_string(count);\\n                for(int k=0;k<value.size();k++){\\n                    chars[index++]=value[k];\\n                }\\n            }\\n            i=j-1;\\n        }\\n        return index;\\n    }    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247086,
                "title": "easy-python-solution-using-2-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nLooking At this Problem i intailly thought of ***HashMap***.which Can be used to map keys with values and i can simply return But after reading the Entire Question I realised That We cannot use Extra Space.\\nSo Then i switched to traditional  ***Two pointer*** approach.\\n\\n---\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Intialising The Empty String `s` And Two pointers `point1` and `i` along with Count Variable Which i  named as (`point2`)\\n2. i made my first pointer to be at `0`and second pointer at `1` \\n3. Now i iterte through my list check if my two pointers are same or not if there are same then i will update my count `point2` and \\n4. if my both pointers are not same then i will first add the char into s after that i  update my `point1` to the second pointer `i` and repeat this process \\n5. The problem here arises when we cannot itearte the last index so i have written condition for that and appende directly into the string `s`\\n6. Now all added into the string i directly add all my `ss` values into the char array `chars `\\n7. I will return the len of the string `s`\\n---\\n# Complexity\\n- Time complexity: $$O(N)$$ Defeats ***95 percent*** In Time Complexity\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(N)$$ String Used \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n---\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        point1 = 0\\n        point2 = 1\\n        # chars = [\"a\",\"b\",\"b\"]\\n\\n        if len(chars)==1:\\n            return len(chars)\\n        for i in range(1,len(chars)):\\n\\n            # print(chars[i])\\n            if chars[point1] == chars[i]:\\n                # print(chars[i])\\n                # print(i,chars[i])\\n                point2 += 1\\n                # print(point2)\\n                if(i==len(chars)-1):\\n                    s+=chars[len(chars)-1]+str(point2)\\n                    \\n            elif chars[point1]!= chars[i]:\\n                if(point2!=1):\\n                    s += chars[point1] + str(point2)\\n                else:\\n                    s+=chars[point1]\\n                \\n                point1 = i\\n                point2 = 1\\n                \\n                if(i==len(chars)-1):\\n                    if(point2!=1):\\n                        s+=chars[len(chars)-1]+str(point2)\\n                    else:\\n                        s+=chars[len(chars)-1]\\n                        \\n                    \\n        for i in range(len(s)):\\n            chars[i]=s[i]\\n        return len(s)\\n        # print(s)\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        point1 = 0\\n        point2 = 1\\n        # chars = [\"a\",\"b\",\"b\"]\\n\\n        if len(chars)==1:\\n            return len(chars)\\n        for i in range(1,len(chars)):\\n\\n            # print(chars[i])\\n            if chars[point1] == chars[i]:\\n                # print(chars[i])\\n                # print(i,chars[i])\\n                point2 += 1\\n                # print(point2)\\n                if(i==len(chars)-1):\\n                    s+=chars[len(chars)-1]+str(point2)\\n                    \\n            elif chars[point1]!= chars[i]:\\n                if(point2!=1):\\n                    s += chars[point1] + str(point2)\\n                else:\\n                    s+=chars[point1]\\n                \\n                point1 = i\\n                point2 = 1\\n                \\n                if(i==len(chars)-1):\\n                    if(point2!=1):\\n                        s+=chars[len(chars)-1]+str(point2)\\n                    else:\\n                        s+=chars[len(chars)-1]\\n                        \\n                    \\n        for i in range(len(s)):\\n            chars[i]=s[i]\\n        return len(s)\\n        # print(s)\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246961,
                "title": "c-easy-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int gg(int i){\\n        int h=0;\\n        while(i){\\n            h++;\\n            i/=10;\\n        }\\n        return h;\\n    }\\n    int compress(vector<char>& c) {\\n        int ct=1;\\n        int ans=0;\\n        vector<char>l;\\n        for(int i=1;i<c.size();i++){\\n            if(c[i]==c[i-1])ct++;\\n            else {\\n                if(ct==1){\\n                 l.push_back(c[i-1]);\\n                ans++;\\n                }\\n                else {\\n                    l.push_back(c[i-1]);\\n                    string h=to_string(ct);\\n                    for(int f=0;f<h.size();f++)l.push_back(h[f]);\\n                    ans++;\\n                    ans+=gg(ct);\\n                }\\n                ct=1;\\n            }\\n        }\\n        ans++;\\n        l.push_back(c[c.size()-1]);\\n        if(ct>1){\\n            string h=to_string(ct);\\n                    for(int f=0;f<h.size();f++)l.push_back(h[f]);\\n        ans+=gg(ct);\\n\\n        }\\n        c=l;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int gg(int i){\\n        int h=0;\\n        while(i){\\n            h++;\\n            i/=10;\\n        }\\n        return h;\\n    }\\n    int compress(vector<char>& c) {\\n        int ct=1;\\n        int ans=0;\\n        vector<char>l;\\n        for(int i=1;i<c.size();i++){\\n            if(c[i]==c[i-1])ct++;\\n            else {\\n                if(ct==1){\\n                 l.push_back(c[i-1]);\\n                ans++;\\n                }\\n                else {\\n                    l.push_back(c[i-1]);\\n                    string h=to_string(ct);\\n                    for(int f=0;f<h.size();f++)l.push_back(h[f]);\\n                    ans++;\\n                    ans+=gg(ct);\\n                }\\n                ct=1;\\n            }\\n        }\\n        ans++;\\n        l.push_back(c[c.size()-1]);\\n        if(ct>1){\\n            string h=to_string(ct);\\n                    for(int f=0;f<h.size();f++)l.push_back(h[f]);\\n        ans+=gg(ct);\\n\\n        }\\n        c=l;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245677,
                "title": "easy-to-follow-python-two-pointer",
                "content": "# Intuition\\nNeed a pointer to fill the new value in the `chars` list. The placement of the character and it\\'s counts happens whenever a new character is observed. \\n\\n# Approach\\n- Start with `ptr=0` and note the char at 0-th index in `prev_char` and mark the `cnt=1` as you have already observed one character.\\n- Move forward and check if the current character is same as the `prev_char`.\\n    - if same: increment `cnt`\\n    - if different: save the `prev_char` at `ptr` and check the value of `cnt`. If `cnt==1`: nothing needs to be done. If it isn\\'t, then extract all the digits and put them in the `chars` array and keep incrementing the `ptr` as you go forward.\\n\\n# Complexity\\n- Time complexity: O(n)\\n    - Have to observe all the characters.\\n\\n- Space complexity: O(1)\\n\\n*Note*: Let me know if you have any question and I would be happy to answer it asap. thanks.\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        if len(chars)==1:\\n            return 1\\n        \\n        prev_char = chars[0]\\n        cnt = 1\\n        ptr = 0\\n        n = len(chars)\\n\\n        # This function fills in the chars array with prev_char\\n        # and digits of cnt if necessary.\\n        def modify():\\n            nonlocal prev_char, ptr, cnt\\n            chars[ptr] = prev_char\\n            ptr+=1\\n            if cnt>1:\\n                cnt = str(cnt)\\n                for j in range(len(cnt)):\\n                    chars[ptr]=cnt[j]\\n                    ptr+=1\\n            cnt = 1\\n            prev_char = curr_char\\n\\n        for i in range(1,n):\\n            curr_char = chars[i]\\n            if curr_char==prev_char:\\n                cnt+=1\\n            else:\\n                modify()\\n        \\n        modify()\\n        return ptr            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        if len(chars)==1:\\n            return 1\\n        \\n        prev_char = chars[0]\\n        cnt = 1\\n        ptr = 0\\n        n = len(chars)\\n\\n        # This function fills in the chars array with prev_char\\n        # and digits of cnt if necessary.\\n        def modify():\\n            nonlocal prev_char, ptr, cnt\\n            chars[ptr] = prev_char\\n            ptr+=1\\n            if cnt>1:\\n                cnt = str(cnt)\\n                for j in range(len(cnt)):\\n                    chars[ptr]=cnt[j]\\n                    ptr+=1\\n            cnt = 1\\n            prev_char = curr_char\\n\\n        for i in range(1,n):\\n            curr_char = chars[i]\\n            if curr_char==prev_char:\\n                cnt+=1\\n            else:\\n                modify()\\n        \\n        modify()\\n        return ptr            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2830228,
                "title": "constant-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:1\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        if(len(chars)==1):\\n            return 1\\n        ans=[]\\n        c=None\\n        ct=0\\n        i=0\\n        for a in chars:\\n            if(a!=c):\\n                if(ct>1):\\n                    x=str(ct)\\n                    for m in x:\\n                        chars[i]=m\\n                        i+=1\\n                chars[i]=a\\n                i+=1\\n                ct=1\\n                c=a\\n            else:\\n                ct+=1\\n        if(ct==1):\\n            return i\\n        x=str(ct)\\n        for m in x:\\n            chars[i]=m\\n            i+=1\\n        return i\\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        if(len(chars)==1):\\n            return 1\\n        ans=[]\\n        c=None\\n        ct=0\\n        i=0\\n        for a in chars:\\n            if(a!=c):\\n                if(ct>1):\\n                    x=str(ct)\\n                    for m in x:\\n                        chars[i]=m\\n                        i+=1\\n                chars[i]=a\\n                i+=1\\n                ct=1\\n                c=a\\n            else:\\n                ct+=1\\n        if(ct==1):\\n            return i\\n        x=str(ct)\\n        for m in x:\\n            chars[i]=m\\n            i+=1\\n        return i\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2744822,
                "title": "java-solution-using-stringbuilder-simple-approach",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        StringBuilder sb=new StringBuilder();\\n        int n=chars.length;\\n        sb.insert(0,chars[0]);\\n        int c=1;\\n        for(int i=1;i<n;i++)\\n        {\\n            \\n            char curr=chars[i];\\n            char prev=chars[i-1];\\n            if(curr==prev)\\n            {\\n                c++;\\n            }\\n            else\\n            {\\n                if(c>1)\\n                {\\n                    sb.append(c);\\n                    c=1;\\n                }\\n                sb.append(curr);\\n            }\\n\\n        }\\n        if(c>1)\\n        {\\n            sb.append(c);\\n        }\\n        n=sb.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            chars[i]=sb.charAt(i);\\n        }\\n        return sb.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        StringBuilder sb=new StringBuilder();\\n        int n=chars.length;\\n        sb.insert(0,chars[0]);\\n        int c=1;\\n        for(int i=1;i<n;i++)\\n        {\\n            \\n            char curr=chars[i];\\n            char prev=chars[i-1];\\n            if(curr==prev)\\n            {\\n                c++;\\n            }\\n            else\\n            {\\n                if(c>1)\\n                {\\n                    sb.append(c);\\n                    c=1;\\n                }\\n                sb.append(curr);\\n            }\\n\\n        }\\n        if(c>1)\\n        {\\n            sb.append(c);\\n        }\\n        n=sb.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            chars[i]=sb.charAt(i);\\n        }\\n        return sb.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2704661,
                "title": "c-two-pointer-faster-easy-to-understand",
                "content": "* ***Using Two Pointers***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& arr) {\\n        \\n        int n = arr.size();\\n        \\n        // we will insert the compressed character at j\\n        \\n        int j = 0;\\n        \\n        int i = 0;\\n        \\n        while(i < n)\\n        {\\n            // count the no. of consecutive characters\\n            \\n            int count = 1;\\n            \\n            while(i + 1 < n && arr[i] == arr[i + 1])\\n            {\\n                count++;\\n                \\n                i++;\\n            }\\n            \\n            // insert at j according to count\\n            \\n            if(count == 1)\\n            {\\n                arr[j++] = arr[i];\\n            }\\n            else\\n            {\\n                arr[j++] = arr[i];\\n                \\n                // split the count then insert at j\\n                \\n                string str = to_string(count);\\n                \\n                for(int k = 0; k < str.size(); k++)\\n                {\\n                    arr[j++] = str[k];\\n                }\\n            }\\n            \\n            i++;\\n        }\\n        \\n        return j;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& arr) {\\n        \\n        int n = arr.size();\\n        \\n        // we will insert the compressed character at j\\n        \\n        int j = 0;\\n        \\n        int i = 0;\\n        \\n        while(i < n)\\n        {\\n            // count the no. of consecutive characters\\n            \\n            int count = 1;\\n            \\n            while(i + 1 < n && arr[i] == arr[i + 1])\\n            {\\n                count++;\\n                \\n                i++;\\n            }\\n            \\n            // insert at j according to count\\n            \\n            if(count == 1)\\n            {\\n                arr[j++] = arr[i];\\n            }\\n            else\\n            {\\n                arr[j++] = arr[i];\\n                \\n                // split the count then insert at j\\n                \\n                string str = to_string(count);\\n                \\n                for(int k = 0; k < str.size(); k++)\\n                {\\n                    arr[j++] = str[k];\\n                }\\n            }\\n            \\n            i++;\\n        }\\n        \\n        return j;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2615386,
                "title": "easy-c-solution-using-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        string s=\"\";\\n        unordered_map<char,int>mp;\\n        \\n        for(int i =0;i<chars.size();i++){\\n            if(mp.find(chars[i])!=mp.end()) mp[chars[i]]++;\\n            else{\\n            for(auto it=mp.begin();it!=mp.end();it++){\\n                if(it->second==1){\\n                    s+=it->first;\\n                }\\n                else{\\n                    s+=it->first+to_string(it->second);\\n                }\\n                \\n            }\\n            mp.clear();\\n            mp[chars[i]]++;\\n            }   \\n        }\\n         for(auto it=mp.begin();it!=mp.end();it++){\\n                if(it->second==1){\\n                    s+=it->first;\\n                }\\n                else{\\n                    s+=it->first+to_string(it->second);\\n                }\\n                \\n            }\\n        chars.clear();\\n        for(int i=0;i<s.size();i++){\\n            chars.push_back(s[i]);\\n        }\\n        return chars.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        string s=\"\";\\n        unordered_map<char,int>mp;\\n        \\n        for(int i =0;i<chars.size();i++){\\n            if(mp.find(chars[i])!=mp.end()) mp[chars[i]]++;\\n            else{\\n            for(auto it=mp.begin();it!=mp.end();it++){\\n                if(it->second==1){\\n                    s+=it->first;\\n                }\\n                else{\\n                    s+=it->first+to_string(it->second);\\n                }\\n                \\n            }\\n            mp.clear();\\n            mp[chars[i]]++;\\n            }   \\n        }\\n         for(auto it=mp.begin();it!=mp.end();it++){\\n                if(it->second==1){\\n                    s+=it->first;\\n                }\\n                else{\\n                    s+=it->first+to_string(it->second);\\n                }\\n                \\n            }\\n        chars.clear();\\n        for(int i=0;i<s.size();i++){\\n            chars.push_back(s[i]);\\n        }\\n        return chars.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1877262,
                "title": "java-constant-extra-space-with-explanation",
                "content": "Solution 1 : Using Charecter Array\\n\\n     In this Approach we will iterate over charecter array and while iterating we will store compressed string in an charecter ArrayList \\n\\t and at the end we will copy those elements to our charecter array and return length of ArrayList.\\n\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        \\n        if(chars.length == 0 ) return 0;\\n        \\n        ArrayList<Character> ans = new ArrayList<Character>();\\n        \\n        int cnt = 1,j;\\n        \\n        for( j = 1;j<chars.length;j++){\\n        \\n            if(chars[j] == chars[j-1]){\\n                cnt++;\\n            }else{\\n                \\n                ans.add(chars[j-1]);\\n                \\n                if(cnt != 1){\\n                    String temp = Integer.toString(cnt);\\n                    \\n                    for(int k = 0;k<temp.length();k++){\\n                        ans.add(temp.charAt(k));\\n                    }\\n                    \\n                }\\n                \\n                cnt = 1;\\n            }\\n            \\n        }\\n        \\n         ans.add(chars[j-1]);\\n                \\n                if(cnt != 1){\\n                    String temp = Integer.toString(cnt);\\n                    \\n                    for(int k = 0;k<temp.length();k++){\\n                        ans.add(temp.charAt(k));\\n                    }\\n                    \\n                }\\n        for(int i = 0;i<ans.size();i++){\\n            chars[i] = ans.get(i);\\n        }\\n        \\n        return ans.size();\\n    }\\n}\\n```\\n\\nSolution 2 : Two Pointer (Constant Extra Space)\\n\\n     This method is little bit diffrent than previous one , In this method we are directly updating our character array with help of first pointer (i) and \\n\\t at last our we return i (which is index of last element + 1).\\n\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        \\n        int n = chars.length;\\n        \\n        if(n == 0 || n == 1) return chars.length;\\n        \\n        int i = 0;\\n       \\n        int cnt = 1;\\n        \\n        \\n        for(int j = 1;j <= n;j++){\\n            \\n            // whenever we find 2 adjecent elements same we will increament count \\n            \\n            if(j < n && chars[j] == chars[j-1]){\\n                cnt++;\\n            }else{\\n                \\n            // whenever we find 2 adjecent elements diffrentwe will update our first index (i) with that charecter and its count \\n                \\n                chars[i++] = chars[j-1];\\n                \\n                if(cnt > 1){\\n                String temp = Integer.toString(cnt);\\n                \\n                    for(int k = 0;k<temp.length();k++){\\n                        chars[i++] = temp.charAt(k);\\n                    }\\n                    \\n                }\\n                \\n                cnt = 1;\\n            }\\n            \\n        }\\n\\n        return i;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        \\n        if(chars.length == 0 ) return 0;\\n        \\n        ArrayList<Character> ans = new ArrayList<Character>();\\n        \\n        int cnt = 1,j;\\n        \\n        for( j = 1;j<chars.length;j++){\\n        \\n            if(chars[j] == chars[j-1]){\\n                cnt++;\\n            }else{\\n                \\n                ans.add(chars[j-1]);\\n                \\n                if(cnt != 1){\\n                    String temp = Integer.toString(cnt);\\n                    \\n                    for(int k = 0;k<temp.length();k++){\\n                        ans.add(temp.charAt(k));\\n                    }\\n                    \\n                }\\n                \\n                cnt = 1;\\n            }\\n            \\n        }\\n        \\n         ans.add(chars[j-1]);\\n                \\n                if(cnt != 1){\\n                    String temp = Integer.toString(cnt);\\n                    \\n                    for(int k = 0;k<temp.length();k++){\\n                        ans.add(temp.charAt(k));\\n                    }\\n                    \\n                }\\n        for(int i = 0;i<ans.size();i++){\\n            chars[i] = ans.get(i);\\n        }\\n        \\n        return ans.size();\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        \\n        int n = chars.length;\\n        \\n        if(n == 0 || n == 1) return chars.length;\\n        \\n        int i = 0;\\n       \\n        int cnt = 1;\\n        \\n        \\n        for(int j = 1;j <= n;j++){\\n            \\n            // whenever we find 2 adjecent elements same we will increament count \\n            \\n            if(j < n && chars[j] == chars[j-1]){\\n                cnt++;\\n            }else{\\n                \\n            // whenever we find 2 adjecent elements diffrentwe will update our first index (i) with that charecter and its count \\n                \\n                chars[i++] = chars[j-1];\\n                \\n                if(cnt > 1){\\n                String temp = Integer.toString(cnt);\\n                \\n                    for(int k = 0;k<temp.length();k++){\\n                        chars[i++] = temp.charAt(k);\\n                    }\\n                    \\n                }\\n                \\n                cnt = 1;\\n            }\\n            \\n        }\\n\\n        return i;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1041206,
                "title": "swift-clean-readable-code-with-comments",
                "content": "```\\nclass Solution {\\n    func compress(_ chars: inout [Character]) -> Int {\\n        var readPtr = 0, writePtr = 0\\n        var cCount = chars.count\\n        \\n        while readPtr < cCount {\\n            let currentChar = chars[readPtr]\\n            var chunkCount = 0\\n            \\n            // Move the read pointer to the element after the current chunk\\n            // while accumulating the current character\\'s count\\n            while readPtr < cCount && chars[readPtr] == currentChar {\\n                readPtr += 1\\n                chunkCount += 1\\n            }\\n            \\n            // Add the current character at the write pointer location\\n            // And move it one point to the right to insert the chunk count\\n            chars[writePtr] = currentChar\\n            writePtr += 1\\n            \\n            // We try to add chunk count after the character only if the count is \\n            // greater than 1\\n            if chunkCount > 1 {\\n                \\n                // For a count that has more than 1 digit in it for eg: 235\\n                // we convert it into string and get the individual digit characters\\n                for digit in String(chunkCount) {\\n                    chars[writePtr] = digit\\n                    writePtr += 1\\n                }\\n            }\\n        }\\n        \\n        return writePtr\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func compress(_ chars: inout [Character]) -> Int {\\n        var readPtr = 0, writePtr = 0\\n        var cCount = chars.count\\n        \\n        while readPtr < cCount {\\n            let currentChar = chars[readPtr]\\n            var chunkCount = 0\\n            \\n            // Move the read pointer to the element after the current chunk\\n            // while accumulating the current character\\'s count\\n            while readPtr < cCount && chars[readPtr] == currentChar {\\n                readPtr += 1\\n                chunkCount += 1\\n            }\\n            \\n            // Add the current character at the write pointer location\\n            // And move it one point to the right to insert the chunk count\\n            chars[writePtr] = currentChar\\n            writePtr += 1\\n            \\n            // We try to add chunk count after the character only if the count is \\n            // greater than 1\\n            if chunkCount > 1 {\\n                \\n                // For a count that has more than 1 digit in it for eg: 235\\n                // we convert it into string and get the individual digit characters\\n                for digit in String(chunkCount) {\\n                    chars[writePtr] = digit\\n                    writePtr += 1\\n                }\\n            }\\n        }\\n        \\n        return writePtr\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 796171,
                "title": "python-solution-with-explanation",
                "content": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        if not chars:\\n            return 0\\n        \\n        if len(chars) ==1:\\n            return 1\\n        \\n        i=0\\n        count =1\\n        while i < len(chars)-1:\\n            \\n            # Iterate through the string till you the chars matches.\\n            while i < len(chars)-1 and chars[i] == chars[i+1]:\\n                \\n                # Increment the count\\n                count= count+1\\n                \\n                # pop the element\\n                chars.pop(i+1)\\n                \\n            # When the count is greater than 1 insert the count into the i+1 position in the char \\n            # array with the count\\n            if count > 1:\\n                \\n#                 if the count is single digit \\n#                 if len(str(count)) <=1:\\n#                     chars.insert(i+1, str(count))\\n#                     i +=1\\n#                 else:\\n                    \\n                # This is when the count is more than 1 digit or you can generally check only this conditon\\n                # avoiding extra lines of code        \\n                for j in str(count):\\n                    chars.insert(i+1,j)\\n                    i+=1\\n                    \\n                # intialize the count to 1\\n                count = 1\\n                \\n            # increment the counter\\n            i += 1\\n        \\n        # return length of character\\n        return len(chars)\\n                \\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        if not chars:\\n            return 0\\n        \\n        if len(chars) ==1:\\n            return 1\\n        \\n        i=0\\n        count =1\\n        while i < len(chars)-1:\\n            \\n            # Iterate through the string till you the chars matches.\\n            while i < len(chars)-1 and chars[i] == chars[i+1]:\\n                \\n                # Increment the count\\n                count= count+1\\n                \\n                # pop the element\\n                chars.pop(i+1)\\n                \\n            # When the count is greater than 1 insert the count into the i+1 position in the char \\n            # array with the count\\n            if count > 1:\\n                \\n#                 if the count is single digit \\n#                 if len(str(count)) <=1:\\n#                     chars.insert(i+1, str(count))\\n#                     i +=1\\n#                 else:\\n                    \\n                # This is when the count is more than 1 digit or you can generally check only this conditon\\n                # avoiding extra lines of code        \\n                for j in str(count):\\n                    chars.insert(i+1,j)\\n                    i+=1\\n                    \\n                # intialize the count to 1\\n                count = 1\\n                \\n            # increment the counter\\n            i += 1\\n        \\n        # return length of character\\n        return len(chars)\\n                \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 415491,
                "title": "goland-two-pointers",
                "content": "```\\nfunc compress(chars []byte) int {\\n\\tslow := 0\\n\\tfor i := 0; i < len(chars); {\\n\\t\\tcnt := 1\\n\\t\\tfor i+1 < len(chars) && chars[i] == chars[i+1] {\\n\\t\\t\\tcnt++\\n\\t\\t\\ti++\\n\\t\\t}\\n\\n\\t\\tchars[slow] = chars[i]\\n\\t\\tslow++\\n\\t\\tif cnt > 1 {\\n\\t\\t\\tfor _, c := range strconv.Itoa(cnt) {\\n\\t\\t\\t\\tchars[slow] = byte(c)\\n\\t\\t\\t\\tslow++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ti++\\n\\t}\\n\\treturn slow\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc compress(chars []byte) int {\\n\\tslow := 0\\n\\tfor i := 0; i < len(chars); {\\n\\t\\tcnt := 1\\n\\t\\tfor i+1 < len(chars) && chars[i] == chars[i+1] {\\n\\t\\t\\tcnt++\\n\\t\\t\\ti++\\n\\t\\t}\\n\\n\\t\\tchars[slow] = chars[i]\\n\\t\\tslow++\\n\\t\\tif cnt > 1 {\\n\\t\\t\\tfor _, c := range strconv.Itoa(cnt) {\\n\\t\\t\\t\\tchars[slow] = byte(c)\\n\\t\\t\\t\\tslow++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ti++\\n\\t}\\n\\treturn slow\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 409939,
                "title": "go-golang-clean-solution",
                "content": ">Runtime: 8 ms, faster than 85.29% of Go online submissions for String Compression.\\nMemory Usage: 6.5 MB, less than 100.00% of Go online submissions for String Compression.\\n\\n```go\\nfunc compress(chars []byte) int {\\n    \\n    scan := 0\\n    write := 0\\n    l := len(chars)\\n    \\n    for scan < l {\\n        count := 0\\n        chars[write] = chars[scan]\\n        for scan < l && chars[write] == chars[scan] {\\n            count++\\n            scan++\\n        }\\n        if count > 1 {\\n            tmp := fmt.Sprintf(\"%d\", count)\\n            for _, c := range []byte(tmp) {\\n                write++\\n                chars[write] = c\\n            }\\n        }\\n        write++\\n    }\\n    return write    \\n}\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc compress(chars []byte) int {\\n    \\n    scan := 0\\n    write := 0\\n    l := len(chars)\\n    \\n    for scan < l {\\n        count := 0\\n        chars[write] = chars[scan]\\n        for scan < l && chars[write] == chars[scan] {\\n            count++\\n            scan++\\n        }\\n        if count > 1 {\\n            tmp := fmt.Sprintf(\"%d\", count)\\n            for _, c := range []byte(tmp) {\\n                write++\\n                chars[write] = c\\n            }\\n        }\\n        write++\\n    }\\n    return write    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 349109,
                "title": "python-3-solution-using-itertools",
                "content": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        import itertools\\n        arr=[]\\n        for key,grp in itertools.groupby(chars):\\n            arr.append(key)                   # append the letter \"a\",\"b\",...\\n            repeat=len(list(grp))             # number of repeats of that letter\\n            if repeat>1:                      # only extend if repeats>1\\n                arr.extend(list(str(repeat))) # extend a list of str. For example: list(str(12))=[\"1\",\"2\"]\\n        chars[:]=arr\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        import itertools\\n        arr=[]\\n        for key,grp in itertools.groupby(chars):\\n            arr.append(key)                   # append the letter \"a\",\"b\",...\\n            repeat=len(list(grp))             # number of repeats of that letter\\n            if repeat>1:                      # only extend if repeats>1\\n                arr.extend(list(str(repeat))) # extend a list of str. For example: list(str(12))=[\"1\",\"2\"]\\n        chars[:]=arr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 239765,
                "title": "misleading-seemingly-easy-question",
                "content": "This question seems to be _really_ easy at first. In fact there are two things which I didn\\'t even know all the while I was trying to come up with a solution:\\n1. If the count has more than one digit for a contiguous group, you don\\'t write it as `\"124\"`, but rather `\"1\", \"2\", \"4\"`. This constraint makes the question easy at the expense of making it tricky and downright nonsensical.\\n2. `[\"a\", \"b\", \"b\", \"c\"]` would become `ab2c` and not `a1b2c` . Again, same problem\\n\\nThese hidden \"alterations\" deviate from how a reader might naturally understand this problem. \\n\\nYet another problem is with the python solution of this problem, which makes it even harder to understand the written code.\\n\\nFor instance, \\n\\n```\\nfor read, c in enumerate(chars):\\n    if read + 1 == len(chars) or chars[read + 1] != c:\\n```\\n\\t\\t\\t\\ncould have been written as \\n\\n```\\nfor read in range(len(chars)):\\n    if( read == len(chars)-1 or chars[read] != chars[read+1])\\n```\\n\\nThis makes it more readable, and easy to understand. Doing LC shouldn\\'t be just about getting the judge to accept your solution. It should also be about writing code that is readable and maintainable !\\n\\nNo wonder this has a  like-dislike ratio <1 !",
                "solutionTags": [],
                "code": "```\\nfor read, c in enumerate(chars):\\n    if read + 1 == len(chars) or chars[read + 1] != c:\\n```\n```\\nfor read in range(len(chars)):\\n    if( read == len(chars)-1 or chars[read] != chars[read+1])\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3858758,
                "title": "two-pointer-approach-beats-96-submissions-in-time-complexity",
                "content": "# Intuition\\nThe two pointer approach is the most effective strategy that comes to mind.  \\n\\n# Approach\\nWe initiate both left and right pointer at the beginning. We iterate the right pointer from left either to end or till we have similar character as the left pointer is pointing.\\nOnce we get the count, remove all the characters from the next character of left pointer to the the right pointer and insert the count (splitting the digits if there are more than one digit).\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        l, r = 0, 0\\n        s = len(chars)\\n\\n        while l < s:\\n            n = 0\\n            r = l\\n            while r < s and chars[l] == chars[r]:\\n                if chars[l] == chars[r]:\\n                    n += 1\\n                r += 1\\n\\n            if n > 1:\\n                for k in range(l + 1, r):\\n                    chars.pop(l + 1)\\n                    s -= 1\\n                for k in range(len(str(n))):\\n                    l = l + 1\\n                    chars.insert(l, str(n)[k])\\n                    s += 1\\n\\n            l += 1\\n            r = l\\n\\n        return len(chars)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        l, r = 0, 0\\n        s = len(chars)\\n\\n        while l < s:\\n            n = 0\\n            r = l\\n            while r < s and chars[l] == chars[r]:\\n                if chars[l] == chars[r]:\\n                    n += 1\\n                r += 1\\n\\n            if n > 1:\\n                for k in range(l + 1, r):\\n                    chars.pop(l + 1)\\n                    s -= 1\\n                for k in range(len(str(n))):\\n                    l = l + 1\\n                    chars.insert(l, str(n)[k])\\n                    s += 1\\n\\n            l += 1\\n            r = l\\n\\n        return len(chars)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762207,
                "title": "best-c-solution-simple-two-pointer-approach-beats-90",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0, k = 0;\\n        while(i<chars.size()){\\n            int count = 1, j = i+1;\\n            while(j<chars.size() && chars[j] == chars[i] ){\\n                count++; j++;\\n            }\\n            chars[k++] = chars[i];\\n            if(count>1){\\n                string cnt = to_string(count);\\n                for(char ch : cnt)\\n                    chars[k++] = ch;\\n            }\\n            i = j; \\n        }\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0, k = 0;\\n        while(i<chars.size()){\\n            int count = 1, j = i+1;\\n            while(j<chars.size() && chars[j] == chars[i] ){\\n                count++; j++;\\n            }\\n            chars[k++] = chars[i];\\n            if(count>1){\\n                string cnt = to_string(count);\\n                for(char ch : cnt)\\n                    chars[k++] = ch;\\n            }\\n            i = j; \\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3757064,
                "title": "simple-solution-using-two-pointers-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i=0;\\n        for(int j=1,count=1;j<=chars.size();j++,count++){\\n            if(j==chars.size()||chars[j]!=chars[j-1]){\\n                chars[i++]=chars[j-1];\\n                if(count>=2){\\n                    for(char dig:to_string(count)){\\n                        chars[i++]=dig;\\n                    }\\n                }\\n            count=0;\\n            }\\n        }\\n        return i;\\n }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i=0;\\n        for(int j=1,count=1;j<=chars.size();j++,count++){\\n            if(j==chars.size()||chars[j]!=chars[j-1]){\\n                chars[i++]=chars[j-1];\\n                if(count>=2){\\n                    for(char dig:to_string(count)){\\n                        chars[i++]=dig;\\n                    }\\n                }\\n            count=0;\\n            }\\n        }\\n        return i;\\n }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3705549,
                "title": "string-compression-o-n-javascript-memory-95-45-meaningful-vars",
                "content": "```\\nvar compress = function(chars) {\\n    let currentElement = null;\\n    let prevElement = chars[0];\\n    let count = 1;\\n    let index = 1;\\n    for (; index < chars.length; index++) {\\n        const tempStore = chars[index];\\n        currentElement = chars[index];\\n        if (prevElement == currentElement) {\\n            chars[index] = undefined;\\n            count++;\\n        } else {\\n            if (count > 1) {\\n                chars[index - 1] = count;\\n            }\\n            count = 1;\\n        }\\n        prevElement = tempStore;\\n    }\\n    if (count > 1) {\\n        chars[index - 1] = count;\\n    }\\n    let output = 0;\\n    for (let index = 0; index < chars.length; index++) {\\n        if (chars[index] !== undefined) {\\n            if (typeof chars[index] === \\'number\\') {\\n                const char = chars[index].toString();\\n                if (char.length === 2) {\\n                    const [firstNum, secondaryNum] = char.split(\\'\\');\\n                    chars[index - 1] = firstNum.toString();\\n                    chars[index] = secondaryNum.toString();\\n                } else if (char.length === 3) {\\n                    const [firstNum, secondaryNum, thirdNum] = char.split(\\'\\');\\n                    chars[index - 1 - 1] = firstNum;\\n                    chars[index - 1] = secondaryNum;\\n                    chars[index] = thirdNum;\\n                } else if (char.length === 4) {\\n                    const [firstNum, secondaryNum, thirdNum, fourthNum] = char.split(\\'\\');\\n                    chars[index - 1 - 1 - 1] = firstNum;\\n                    chars[index - 1 - 1] = secondaryNum;\\n                    chars[index - 1] = thirdNum;\\n                    chars[index] = fourthNum;\\n                }\\n            } else {\\n                output++;\\n            }\\n        }\\n    }\\n    let emptyIndex = 0;\\n    let index11 = 0;\\n    for (; index11 < chars.length; index11++) {\\n        if (chars[index11] !== undefined) {\\n            chars[emptyIndex++] = chars[index11].toString();\\n        }\\n    }\\n    chars.splice(emptyIndex);\\n    return;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar compress = function(chars) {\\n    let currentElement = null;\\n    let prevElement = chars[0];\\n    let count = 1;\\n    let index = 1;\\n    for (; index < chars.length; index++) {\\n        const tempStore = chars[index];\\n        currentElement = chars[index];\\n        if (prevElement == currentElement) {\\n            chars[index] = undefined;\\n            count++;\\n        } else {\\n            if (count > 1) {\\n                chars[index - 1] = count;\\n            }\\n            count = 1;\\n        }\\n        prevElement = tempStore;\\n    }\\n    if (count > 1) {\\n        chars[index - 1] = count;\\n    }\\n    let output = 0;\\n    for (let index = 0; index < chars.length; index++) {\\n        if (chars[index] !== undefined) {\\n            if (typeof chars[index] === \\'number\\') {\\n                const char = chars[index].toString();\\n                if (char.length === 2) {\\n                    const [firstNum, secondaryNum] = char.split(\\'\\');\\n                    chars[index - 1] = firstNum.toString();\\n                    chars[index] = secondaryNum.toString();\\n                } else if (char.length === 3) {\\n                    const [firstNum, secondaryNum, thirdNum] = char.split(\\'\\');\\n                    chars[index - 1 - 1] = firstNum;\\n                    chars[index - 1] = secondaryNum;\\n                    chars[index] = thirdNum;\\n                } else if (char.length === 4) {\\n                    const [firstNum, secondaryNum, thirdNum, fourthNum] = char.split(\\'\\');\\n                    chars[index - 1 - 1 - 1] = firstNum;\\n                    chars[index - 1 - 1] = secondaryNum;\\n                    chars[index - 1] = thirdNum;\\n                    chars[index] = fourthNum;\\n                }\\n            } else {\\n                output++;\\n            }\\n        }\\n    }\\n    let emptyIndex = 0;\\n    let index11 = 0;\\n    for (; index11 < chars.length; index11++) {\\n        if (chars[index11] !== undefined) {\\n            chars[emptyIndex++] = chars[index11].toString();\\n        }\\n    }\\n    chars.splice(emptyIndex);\\n    return;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3653083,
                "title": "two-pointer-approach-tc-o-n-sc-o-1-faster-than-100-in-java-and-cpp-60-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the code is to compress the given array of characters by counting consecutive repeating characters. If the count of a character is greater than 1, append the character followed by the count to the resulting compressed array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**Two Pointer**\\nInitialize a counter cnt to 1 and a pointer j to 0.\\nIf the size of the input array chars is 1, return 1 (no compression needed for a single character).\\nIterate through the chars array starting from index 1.\\nFor each element, compare it with the previous element. If they are the same, increment the counter cnt.\\nIf the current element is different from the previous element or it\\'s the last element in the array, update the chars[j] with the previous character (since it\\'s the end of a group).\\nIf the count cnt is greater than 1, convert it to a string c using to_string(cnt).\\nIterate through each character in the string c and append them to the chars array starting from index j+1.\\nIncrement j by the number of characters appended in step 7.\\nRepeat steps 4-8 until all elements in the chars array are processed.\\nReturn the updated pointer j, which represents the new length of the compressed array.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the code is O(N), where N is the size of the input array chars. This is because we iterate through each element in the array once.\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1) because the code uses only a constant amount of extra space to store the counters and pointers.\\n\\n# Code\\n```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int cnt = 1;\\n        int j = 0;\\n        \\n        if (chars.length == 1)\\n            return 1;\\n        \\n        for (int i = 1; i <= chars.length; i++) {\\n            cnt = 1;\\n            while (i < chars.length && chars[i] == chars[i - 1]) {\\n                cnt++;\\n                i++;\\n            }\\n            chars[j++] = chars[i - 1];\\n            \\n            if (cnt > 1) {\\n                String c = String.valueOf(cnt);\\n                for (char ch : c.toCharArray()) {\\n                    chars[j++] = ch;\\n                }\\n            }\\n        }\\n        \\n        return j;\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n       int cnt=1;\\n       int j=0;\\n       if(chars.size()==1)\\n           return 1; \\n       for(int i=1; i<=chars.size(); i++){\\n           cnt=1;\\n           while(i<chars.size() and chars[i]==chars[i-1])\\n           {\\n               cnt++; i++;\\n           }\\n           chars[j++]= chars[i-1];\\n           if(cnt>1){\\n               string c = to_string(cnt);\\n               for(auto ch: c){\\n                   chars[j++]= (char)ch;\\n               }\\n           }\\n       }\\n       return j;\\n    }\\n};\\n```\\n```Python []\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        cnt = 1\\n        j = 0\\n        \\n        if len(chars) == 1:\\n            return 1\\n        \\n        for i in range(1, len(chars) + 1):\\n            if i < len(chars) and chars[i] == chars[i - 1]:\\n                cnt += 1\\n            else:\\n                chars[j] = chars[i - 1]\\n                j += 1\\n                \\n                if cnt > 1:\\n                    for digit in str(cnt):\\n                        chars[j] = digit\\n                        j += 1\\n                cnt = 1\\n        \\n        return j\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int cnt = 1;\\n        int j = 0;\\n        \\n        if (chars.length == 1)\\n            return 1;\\n        \\n        for (int i = 1; i <= chars.length; i++) {\\n            cnt = 1;\\n            while (i < chars.length && chars[i] == chars[i - 1]) {\\n                cnt++;\\n                i++;\\n            }\\n            chars[j++] = chars[i - 1];\\n            \\n            if (cnt > 1) {\\n                String c = String.valueOf(cnt);\\n                for (char ch : c.toCharArray()) {\\n                    chars[j++] = ch;\\n                }\\n            }\\n        }\\n        \\n        return j;\\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n       int cnt=1;\\n       int j=0;\\n       if(chars.size()==1)\\n           return 1; \\n       for(int i=1; i<=chars.size(); i++){\\n           cnt=1;\\n           while(i<chars.size() and chars[i]==chars[i-1])\\n           {\\n               cnt++; i++;\\n           }\\n           chars[j++]= chars[i-1];\\n           if(cnt>1){\\n               string c = to_string(cnt);\\n               for(auto ch: c){\\n                   chars[j++]= (char)ch;\\n               }\\n           }\\n       }\\n       return j;\\n    }\\n};\\n```\n```Python []\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        cnt = 1\\n        j = 0\\n        \\n        if len(chars) == 1:\\n            return 1\\n        \\n        for i in range(1, len(chars) + 1):\\n            if i < len(chars) and chars[i] == chars[i - 1]:\\n                cnt += 1\\n            else:\\n                chars[j] = chars[i - 1]\\n                j += 1\\n                \\n                if cnt > 1:\\n                    for digit in str(cnt):\\n                        chars[j] = digit\\n                        j += 1\\n                cnt = 1\\n        \\n        return j\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3617908,
                "title": "c-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n    int write = 0;\\n    int start = 0;\\n\\n    for (int end = 0; end < chars.size(); end++) \\n    {\\n        if (end + 1 == chars.size() || chars[end] != chars[end + 1])\\n         {\\n            chars[write++] = chars[start];\\n            if (end > start) \\n            {\\n                string count = to_string(end - start + 1);\\n                for (char c : count) chars[write++] = c;\\n            }\\n            start = end + 1;\\n        }\\n    }\\n    return write;\\n  }\\n};\\n\\nDo upvote if helpful..\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n    int write = 0;\\n    int start = 0;\\n\\n    for (int end = 0; end < chars.size(); end++) \\n    {\\n        if (end + 1 == chars.size() || chars[end] != chars[end + 1])\\n         {\\n            chars[write++] = chars[start];\\n            if (end > start) \\n            {\\n                string count = to_string(end - start + 1);\\n                for (char c : count) chars[write++] = c;\\n            }\\n            start = end + 1;\\n        }\\n    }\\n    return write;\\n  }\\n};\\n\\nDo upvote if helpful..\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3537736,
                "title": "updated-simple-java-code-string-compression",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->The problem requires compressing a given array of characters in-place. The compression should be done by replacing consecutive sequences of the same character with the character itself followed by the count of that sequence\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve the problem, we can use two pointers: \\'read\\' and \\'write\\'. The \\'read\\' pointer iterates over the input array, while the \\'write\\' pointer keeps track of the position where we should \\'write\\' the compressed characters.\\n\\nWe initialize the \\'write\\' pointer to 0 and initialize a variable count to 1 to keep track of the count of consecutive characters.\\n\\nFor each character in the array, we compare it with the next character. If they are the same, we increment the count variable. If they are different, we \\'write\\' the character at the \\'write\\' pointer position and move the \\'write\\' pointer forward. If the \\'count\\' is greater than 1, we convert the \\'count\\' to a string and \\'write\\' each digit of the count as a character at the \\'write\\' pointer position, updating the \\'write\\' pointer accordingly.\\n\\nFinally, we return the position of the write pointer as the length of the compressed array.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime complexity: O(n), where n is the length of the input array. We iterate over the array once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace complexity: O(1). The compression is done in-place, so no extra space is used apart from a few variables to keep track of positions and counts.\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int write = 0; \\n        int count = 1;\\n        \\n        for (int read = 1; read <= chars.length; read++) {\\n            if (read < chars.length && chars[read] == chars[read - 1]) {\\n                count++;\\n            } else {\\n                chars[write++] = chars[read - 1];\\n                \\n                if (count > 1) {\\n                 \\n                    char[] countChars = String.valueOf(count).toCharArray();\\n                    for (char c : countChars) {\\n                        chars[write++] = c;\\n                    }\\n                }\\n                \\n                count = 1; \\n            }\\n        }\\n        \\n        return write;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int write = 0; \\n        int count = 1;\\n        \\n        for (int read = 1; read <= chars.length; read++) {\\n            if (read < chars.length && chars[read] == chars[read - 1]) {\\n                count++;\\n            } else {\\n                chars[write++] = chars[read - 1];\\n                \\n                if (count > 1) {\\n                 \\n                    char[] countChars = String.valueOf(count).toCharArray();\\n                    for (char c : countChars) {\\n                        chars[write++] = c;\\n                    }\\n                }\\n                \\n                count = 1; \\n            }\\n        }\\n        \\n        return write;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3501959,
                "title": "python-easy-implementation-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n-> First, I thought of doing this problem using hashing, but later on I thought \"what if the list is not sorted ?\". So, I thought of doing it with two pointers.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n-> If I don\\'t append some char which is not a special char, I won\\'t get the count of last char. To get that count, I have appended my name (which ain\\'t special -_-).\\n-> Remaining code is pretty understandable.\\n-> Even if u didnt understood why i appended, just trying running the code with out appending and check the output. \\n\\n# Complexity\\n- Time complexity: 0(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        chars.append(\"pavan\")\\n        str_ = \"\"\\n        x = 0\\n        count = 1\\n        while x <len(chars)-1:\\n            if chars[x] == chars[x+1]:\\n                count +=1\\n            elif chars[x] != chars[x+1]:\\n                str_ += chars[x]\\n                if count == 1:\\n                    pass\\n                else:\\n                    str_ += str(count)\\n                    count = 1\\n\\n            x+=1\\n\\n        chars.clear()\\n        for x in str_:\\n            chars.append(x)\\n\\n        return len(chars)\\n        \\n            \\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        chars.append(\"pavan\")\\n        str_ = \"\"\\n        x = 0\\n        count = 1\\n        while x <len(chars)-1:\\n            if chars[x] == chars[x+1]:\\n                count +=1\\n            elif chars[x] != chars[x+1]:\\n                str_ += chars[x]\\n                if count == 1:\\n                    pass\\n                else:\\n                    str_ += str(count)\\n                    count = 1\\n\\n            x+=1\\n\\n        chars.clear()\\n        for x in str_:\\n            chars.append(x)\\n\\n        return len(chars)\\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3478466,
                "title": "python-simple-clean-solutions-using-2-pointer-groupby",
                "content": "# Code\\n### Two Pointer\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        walker, runner = 0, 0\\n        while runner < len(chars):\\n\\t\\t\\n            chars[walker] = chars[runner]\\n            count = 1\\n\\t\\t\\t\\n            while runner + 1 < len(chars) and chars[runner] == chars[runner+1]:\\n                runner += 1\\n                count += 1\\n\\t\\t\\t\\n            if count > 1:\\n                for c in str(count):\\n                    chars[walker+1] = c\\n                    walker += 1\\n            \\n            runner += 1\\n            walker += 1\\n        \\n        return walker\\n```\\n\\n### Using Groupby\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        g = groupby(chars)\\n        ans = \\'\\'\\n        for k, v in g:\\n            cnt = str(len(list(v)))\\n            ans += k + (cnt if cnt != \\'1\\' else \\'\\' )\\n            \\n        for i in range(len(ans)):\\n            chars[i] = ans[i]\\n        return len(ans)\\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        walker, runner = 0, 0\\n        while runner < len(chars):\\n\\t\\t\\n            chars[walker] = chars[runner]\\n            count = 1\\n\\t\\t\\t\\n            while runner + 1 < len(chars) and chars[runner] == chars[runner+1]:\\n                runner += 1\\n                count += 1\\n\\t\\t\\t\\n            if count > 1:\\n                for c in str(count):\\n                    chars[walker+1] = c\\n                    walker += 1\\n            \\n            runner += 1\\n            walker += 1\\n        \\n        return walker\\n```\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        g = groupby(chars)\\n        ans = \\'\\'\\n        for k, v in g:\\n            cnt = str(len(list(v)))\\n            ans += k + (cnt if cnt != \\'1\\' else \\'\\' )\\n            \\n        for i in range(len(ans)):\\n            chars[i] = ans[i]\\n        return len(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3274621,
                "title": "443-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Initialize a write index write_idx and a read index i to 0.\\n2. While i is less than the length of chars, do the following:\\n   1. Initialize a read index j to i + 1.\\n   2. While j is less than the length of chars and chars[j] is equal to chars[i], increment j.\\n   3. Write the character chars[i] to chars[write_idx], and increment write_idx.\\n    4. If j - i is greater than 1, convert the count j - i to a string, and write the string to chars[write_idx:write_idx+len(count_str)]. Increment write_idx by the length of the count string.\\n   5. Set i to j.\\n3. Delete all elements of chars with indices greater than or equal to write_idx.\\n4. Return the length of chars.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        # Initialize pointers and output index\\n        write_idx = 0\\n        i = 0\\n        \\n        # Iterate through the array\\n        while i < len(chars):\\n            # Update j to point to the end of the current group\\n            j = i + 1\\n            while j < len(chars) and chars[j] == chars[i]:\\n                j += 1\\n\\n            # Write the character and its count to the output array\\n            chars[write_idx] = chars[i]\\n            write_idx += 1\\n            if j - i > 1:\\n                count_str = str(j - i)\\n                chars[write_idx:write_idx+len(count_str)] = count_str\\n                write_idx += len(count_str)\\n\\n            # Update i to point to the start of the next group\\n            i = j\\n\\n        # Truncate the array to its final length\\n        del chars[write_idx:]\\n\\n        # Return the length of the output array\\n        return len(chars)\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        # Initialize pointers and output index\\n        write_idx = 0\\n        i = 0\\n        \\n        # Iterate through the array\\n        while i < len(chars):\\n            # Update j to point to the end of the current group\\n            j = i + 1\\n            while j < len(chars) and chars[j] == chars[i]:\\n                j += 1\\n\\n            # Write the character and its count to the output array\\n            chars[write_idx] = chars[i]\\n            write_idx += 1\\n            if j - i > 1:\\n                count_str = str(j - i)\\n                chars[write_idx:write_idx+len(count_str)] = count_str\\n                write_idx += len(count_str)\\n\\n            # Update i to point to the start of the next group\\n            i = j\\n\\n        # Truncate the array to its final length\\n        del chars[write_idx:]\\n\\n        # Return the length of the output array\\n        return len(chars)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249462,
                "title": "python-3-13-lines-iteration-with-pointer-t-m-96-97",
                "content": "```\\nclass Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        n, ptr, cnt = len(chars), 0, 1\\n\\n        for i in range(1,n+1):\\n\\n            if i < n and chars[i] == chars[i-1]: cnt += 1\\n\\n            else:\\n                chars[ptr] = chars[i-1]\\n                ptr+= 1\\n\\n                if cnt > 1:\\n                    s = str(cnt)\\n                    m = len(s)\\n                    chars[ptr : ptr + m] = s\\n                    ptr+= m\\n \\n                cnt = 1\\n\\n        return ptr\\n```\\n[https://leetcode.com/problems/string-compression/submissions/907982556/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1).",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        n, ptr, cnt = len(chars), 0, 1\\n\\n        for i in range(1,n+1):\\n\\n            if i < n and chars[i] == chars[i-1]: cnt += 1\\n\\n            else:\\n                chars[ptr] = chars[i-1]\\n                ptr+= 1\\n\\n                if cnt > 1:\\n                    s = str(cnt)\\n                    m = len(s)\\n                    chars[ptr : ptr + m] = s\\n                    ptr+= m\\n \\n                cnt = 1\\n\\n        return ptr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249377,
                "title": "java-2-pointers-simple-10-line-code-beats-98",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int compress(char[] chars) {\\n    int a = 0, b = 0, n = chars.length;\\n\\n    while (b < n) {\\n      var cnt = 1;\\n      for (; b+1 < n && chars[b+1] == chars[b]; b++, cnt++);\\n\\n      chars[a++] = chars[b++];\\n      if (cnt > 1)\\n        for (var c : Integer.toString(cnt).toCharArray())\\n          chars[a++] = c;\\n    }\\n    return a;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n  public int compress(char[] chars) {\\n    int a = 0, b = 0, n = chars.length;\\n\\n    while (b < n) {\\n      var cnt = 1;\\n      for (; b+1 < n && chars[b+1] == chars[b]; b++, cnt++);\\n\\n      chars[a++] = chars[b++];\\n      if (cnt > 1)\\n        for (var c : Integer.toString(cnt).toCharArray())\\n          chars[a++] = c;\\n    }\\n    return a;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248696,
                "title": "unprecedented-logic-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n=len(chars)\\n        left,right,k=0,0,0\\n        while left<n:\\n            left=right\\n            while right<n and chars[right]==chars[left]:\\n                right+=1\\n            chars[k]=chars[left]\\n            k+=1\\n            if (right-left)>1:\\n                for l in str(right-left):\\n                    chars[k]=l\\n                    k+=1\\n            left=right\\n        return k\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n=len(chars)\\n        left,right,k=0,0,0\\n        while left<n:\\n            left=right\\n            while right<n and chars[right]==chars[left]:\\n                right+=1\\n            chars[k]=chars[left]\\n            k+=1\\n            if (right-left)>1:\\n                for l in str(right-left):\\n                    chars[k]=l\\n                    k+=1\\n            left=right\\n        return k\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248148,
                "title": "python3-48-ms-faster-than-99-45-of-python3",
                "content": "![image](https://assets.leetcode.com/users/images/a9fb9147-c9dd-430c-89b0-46bb3c39d4ee_1677769704.057519.png)\\n```\\ndef compress(self, chars: List[str]) -> int:\\n        if not chars:\\n            return 0\\n        mychar = chars[0]\\n        count = 0\\n        length = len(chars)\\n        chars.append(\" \") \\n        for i in range(length+1): \\n            char = chars.pop(0)\\n            if char == mychar: \\n                count += 1\\n            else:\\n                if count == 1: \\n                    chars.append(mychar) \\n                elif count > 1:\\n                    chars.append(mychar)\\n                    chars += (list(str(count))) \\n                mychar = char \\n                count = 1 \\n        return len(chars)\\n```\\nThe given code performs a string compression operation on a list of characters in-place. Here\\'s a step-by-step explanation of the code:\\n\\n1. Define a function named \\'compress\\' that takes an input list of characters \\'chars\\' and returns an integer.\\n1. If the input list \\'chars\\' is empty, return 0.\\n1. Initialize a variable \\'mychar\\' with the first character in the input list \\'chars\\'.\\n1. Initialize a variable \\'count\\' to 0, which will keep track of the number of times \\'mychar\\' is repeated in the input list.\\n1. Compute the length of the input list \\'chars\\' and store it in the \\'length\\' variable.\\n1. Append a space character to the input list \\'chars\\' to ensure that the last character group is processed.\\n1. Iterate through each index \\'i\\' in the range 0 to \\'length\\':\\n\\ta. Remove the first character from the input list \\'chars\\' using the \\'pop(0)\\' method and store it in the \\'char\\' variable.\\n\\tb. If the \\'char\\' variable is equal to \\'mychar\\', increment the \\'count\\' variable by 1.\\n\\tc. If the \\'char\\' variable is different from \\'mychar\\', perform the following steps:\\n\\t1. If the \\'count\\' variable is equal to 1, append \\'mychar\\' to the input list \\'chars\\'.\\n\\t1. If the \\'count\\' variable is greater than 1, append \\'mychar\\' to the input list \\'chars\\' and append each digit of \\'count\\' to the input list \\'chars\\' as separate characters.\\n\\t1. Update \\'mychar\\' to the new character \\'char\\' and reset \\'count\\' to 1.\\n1. Return the length of the modified \\'chars\\' list.\\n\\nNote that the compression algorithm has a time complexity of O(n), where n is the size of the input list. In this implementation, the time complexity is proportional to the length of the input list, and the algorithm modifies the input list in-place without using any extra space.\\n \\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\ndef compress(self, chars: List[str]) -> int:\\n        if not chars:\\n            return 0\\n        mychar = chars[0]\\n        count = 0\\n        length = len(chars)\\n        chars.append(\" \") \\n        for i in range(length+1): \\n            char = chars.pop(0)\\n            if char == mychar: \\n                count += 1\\n            else:\\n                if count == 1: \\n                    chars.append(mychar) \\n                elif count > 1:\\n                    chars.append(mychar)\\n                    chars += (list(str(count))) \\n                mychar = char \\n                count = 1 \\n        return len(chars)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3248089,
                "title": "easy-java-solution-beats-99-runtime-1ms",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse StringBuilder to store the ans and use two pointer ( one for keeping the previous character and another to count). If the count is greater than 1 than append the count to the stringBuilder, else do not append it.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int p1 = 0;\\n        int p2 = 0;\\n        StringBuilder ans = new StringBuilder();\\n        while(p1 < chars.length && p2 < chars.length){\\n            int count = 0;\\n            while(p2 < chars.length && chars[p1] == chars[p2]){\\n                count++;\\n                p2++;\\n            }\\n            ans.append(chars[p1]);\\n            p1 = p2;\\n            if(count > 1){\\n                ans.append(count);\\n            }\\n        }\\n        // System.out.println(ans);\\n        for(int  i = 0 ; i < ans.length(); i++){\\n            chars[i] = ans.charAt(i);\\n        }\\n        return ans.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int p1 = 0;\\n        int p2 = 0;\\n        StringBuilder ans = new StringBuilder();\\n        while(p1 < chars.length && p2 < chars.length){\\n            int count = 0;\\n            while(p2 < chars.length && chars[p1] == chars[p2]){\\n                count++;\\n                p2++;\\n            }\\n            ans.append(chars[p1]);\\n            p1 = p2;\\n            if(count > 1){\\n                ans.append(count);\\n            }\\n        }\\n        // System.out.println(ans);\\n        for(int  i = 0 ; i < ans.length(); i++){\\n            chars[i] = ans.charAt(i);\\n        }\\n        return ans.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247535,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0, res = 0;\\n        while (i < chars.size()) {\\n            int groupLength = 1;\\n            while (i + groupLength < chars.size()\\n             && chars[i + groupLength] == chars[i]) {\\n                groupLength++;\\n            }\\n            chars[res++] = chars[i];\\n            if (groupLength > 1) {\\n                for (char c : to_string(groupLength)) {\\n                    chars[res++] = c;\\n                }\\n            }\\n            i += groupLength;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0, res = 0;\\n        while (i < chars.size()) {\\n            int groupLength = 1;\\n            while (i + groupLength < chars.size()\\n             && chars[i + groupLength] == chars[i]) {\\n                groupLength++;\\n            }\\n            chars[res++] = chars[i];\\n            if (groupLength > 1) {\\n                for (char c : to_string(groupLength)) {\\n                    chars[res++] = c;\\n                }\\n            }\\n            i += groupLength;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247020,
                "title": "two-pointers",
                "content": "# Intuition & Approach\\nhttps://youtu.be/aPyS_ahM_1o\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n\\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int cnt = 1;\\n            while (i < n - 1 && chars[i] == chars[i + 1]) {\\n                cnt++;\\n                i++;\\n            }\\n\\n            chars[j++] = chars[i++];\\n            if (cnt > 1) {\\n                string num = to_string(cnt);\\n\\n                for (char digit : num)\\n                    chars[j++] = digit;\\n            }\\n        }\\n\\n        return j;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n\\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int cnt = 1;\\n            while (i < n - 1 && chars[i] == chars[i + 1]) {\\n                cnt++;\\n                i++;\\n            }\\n\\n            chars[j++] = chars[i++];\\n            if (cnt > 1) {\\n                string num = to_string(cnt);\\n\\n                for (char digit : num)\\n                    chars[j++] = digit;\\n            }\\n        }\\n\\n        return j;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246225,
                "title": "rust-straightforward-0ms",
                "content": "# Intuition\\nThis can be done with two indices: one for scanning ahead past the duplicates and another for keeping the position of the next assignment.\\n\\n# Approach\\nAn index, `i`, is moved ahead past the end of duplicated characters. The difference between its prior position, `j`, and current position is used to calculate the number of repeated characters.\\n\\nThe current character is assigned to `chars` at the assignment index, `k`. Then the repetition count\\'s digit characters are assigned successively after it.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```rust\\nimpl Solution {\\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\\n        let n = chars.len();\\n\\n        let mut i = 0;\\n        let mut j = 0;\\n        let mut k = 0;\\n        \\n        while i < n {\\n            while i < n && chars[i] == chars[j] { i += 1; }\\n\\n            chars[k] = chars[i - 1];\\n            k += 1;\\n\\n            if i > j + 1 {\\n                for c in (i - j).to_string().chars() {\\n                    chars[k] = c;\\n                    k += 1;\\n                }\\n            }\\n            j = i;\\n        }\\n        k as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Two Pointers"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\\n        let n = chars.len();\\n\\n        let mut i = 0;\\n        let mut j = 0;\\n        let mut k = 0;\\n        \\n        while i < n {\\n            while i < n && chars[i] == chars[j] { i += 1; }\\n\\n            chars[k] = chars[i - 1];\\n            k += 1;\\n\\n            if i > j + 1 {\\n                for c in (i - j).to_string().chars() {\\n                    chars[k] = c;\\n                    k += 1;\\n                }\\n            }\\n            j = i;\\n        }\\n        k as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3246198,
                "title": "c-beats-100-runtime-0ms-85-space",
                "content": "# Complexity\\n- Time complexity: $O(n)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $O(1)$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char> &chars)\\n    {\\n        int n = chars.size();\\n        int j = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            int k = i;\\n            while (i + 1 < n and chars[i + 1] == chars[i])\\n                i++;\\n\\n            chars[j++] = chars[k];\\n            int l = i - k + 1;\\n            if (l != 1)\\n            {\\n                string num = to_string(l);\\n                for (auto n : num)\\n                    chars[j++] = n;\\n            }\\n        }\\n        return j;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char> &chars)\\n    {\\n        int n = chars.size();\\n        int j = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            int k = i;\\n            while (i + 1 < n and chars[i + 1] == chars[i])\\n                i++;\\n\\n            chars[j++] = chars[k];\\n            int l = i - k + 1;\\n            if (l != 1)\\n            {\\n                string num = to_string(l);\\n                for (auto n : num)\\n                    chars[j++] = n;\\n            }\\n        }\\n        return j;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246007,
                "title": "string-compression-c-0ms-and-beats-100",
                "content": "\\n\\n# Approach\\nIn this question we have to check consecutive repeating characters in chars vector. So the approach is very simple we store first char in the string and start a loop from i=1, store prev char and current char and check if they are equal then increment the count.\\n\\nIf the prev char and current char not matched then check if count is greater than 1 then add to our string and also store current char to string . \\n\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n      string s=\"\";\\n      s=s+chars[0];\\n      int cnt=1;\\n      for(int i=1;i<chars.size();i++){\\n          char curr=chars[i];\\n          char prev=chars[i-1];\\n          if(curr==prev){\\n              cnt++;\\n          }\\n          else {\\n              if(cnt>1){\\n                  s=s+to_string(cnt);\\n                  cnt=1;\\n              }\\n              s+=curr;\\n          }\\n      }\\n      if(cnt>1){\\n          s+=to_string(cnt);\\n      }\\n      chars.clear();\\n      for(int i=0;i<s.length();i++){\\n          chars.push_back(s[i]);\\n      }\\n      return chars.size();\\n    }\\n};\\n```\\nIf you like this solution. so please upvoted.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n      string s=\"\";\\n      s=s+chars[0];\\n      int cnt=1;\\n      for(int i=1;i<chars.size();i++){\\n          char curr=chars[i];\\n          char prev=chars[i-1];\\n          if(curr==prev){\\n              cnt++;\\n          }\\n          else {\\n              if(cnt>1){\\n                  s=s+to_string(cnt);\\n                  cnt=1;\\n              }\\n              s+=curr;\\n          }\\n      }\\n      if(cnt>1){\\n          s+=to_string(cnt);\\n      }\\n      chars.clear();\\n      for(int i=0;i<s.length();i++){\\n          chars.push_back(s[i]);\\n      }\\n      return chars.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245963,
                "title": "golang-two-pointers",
                "content": "# Code\\n```\\nfunc compress(chars []byte) int {\\n    var count, index int = 1, 0\\n    for i := 1; i <= len(chars); i++ {\\n        if i < len(chars) && chars[i] == chars[i - 1] {\\n            count++\\n        } else {\\n            chars[index] = chars[i - 1]\\n            index++\\n            if count > 1 {\\n                for _, ch := range strconv.Itoa(count) {\\n                    chars[index] = byte(ch)\\n                    index++\\n                }\\n            }\\n            count = 1\\n        }\\n    }\\n    return index\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nfunc compress(chars []byte) int {\\n    var count, index int = 1, 0\\n    for i := 1; i <= len(chars); i++ {\\n        if i < len(chars) && chars[i] == chars[i - 1] {\\n            count++\\n        } else {\\n            chars[index] = chars[i - 1]\\n            index++\\n            if count > 1 {\\n                for _, ch := range strconv.Itoa(count) {\\n                    chars[index] = byte(ch)\\n                    index++\\n                }\\n            }\\n            count = 1\\n        }\\n    }\\n    return index\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3245956,
                "title": "java-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        String s=\"\";\\n        int c=1;\\n        int i;\\n        for (i=0;i<chars.length-1;i++)\\n        {\\n            if(chars[i]==chars[i+1]){\\n                  c++;\\n            }else{\\n                if(c>1)s+=chars[i]+\"\"+c;\\n                else s+=chars[i];\\n                c=1;\\n            }\\n        }\\n        if(c>1)s+=chars[i]+\"\"+c;\\n        else s+=chars[i];\\n        int k=0;\\n        for(char c1:s.toCharArray())\\n        {\\n            chars[k++]=c1;\\n        }\\n\\n        return s.length();\\n       \\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        String s=\"\";\\n        int c=1;\\n        int i;\\n        for (i=0;i<chars.length-1;i++)\\n        {\\n            if(chars[i]==chars[i+1]){\\n                  c++;\\n            }else{\\n                if(c>1)s+=chars[i]+\"\"+c;\\n                else s+=chars[i];\\n                c=1;\\n            }\\n        }\\n        if(c>1)s+=chars[i]+\"\"+c;\\n        else s+=chars[i];\\n        int k=0;\\n        for(char c1:s.toCharArray())\\n        {\\n            chars[k++]=c1;\\n        }\\n\\n        return s.length();\\n       \\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245898,
                "title": "simple-solution-with-two-pointers-with-o-n-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->Solving the problem using Two pointers.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int length=0;\\n# using 2 pointers \\n# i is used to parse through chars array\\n# length variable is used to store the final result in chars array to reduce space complexity\\n        for(int i=0;i<chars.length;i++)\\n        {\\n            chars[length++]=chars[i];\\n            int count=1;\\n            while(i<chars.length-1 && chars[i]==chars[i+1])\\n            {\\n                i++;\\n                count++;\\n            }\\n            if(count>1)\\n            {\\n               #Adding the length to the chars array\\n               String s=String.valueOf(count);\\n               for(int k=0;k<s.length();k++)\\n               chars[length++]=s.charAt(k);\\n            }\\n\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int length=0;\\n# using 2 pointers \\n# i is used to parse through chars array\\n# length variable is used to store the final result in chars array to reduce space complexity\\n        for(int i=0;i<chars.length;i++)\\n        {\\n            chars[length++]=chars[i];\\n            int count=1;\\n            while(i<chars.length-1 && chars[i]==chars[i+1])\\n            {\\n                i++;\\n                count++;\\n            }\\n            if(count>1)\\n            {\\n               #Adding the length to the chars array\\n               String s=String.valueOf(count);\\n               for(int k=0;k<s.length();k++)\\n               chars[length++]=s.charAt(k);\\n            }\\n\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245760,
                "title": "single-traversal-c-solution-in-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst we need to focus on the conditions given that no extra space is allowed, So it is natural to assume that the count will be inserted in the input array. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe keep $$j$$ for the index we need to allocate the character and count. We keep $$prev$$ to increase the count and when the character changes we insert the character and count to $$jth$$ index.\\n# Complexity\\n- Time complexity: $$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if(chars.size()==1)\\n        return 1;\\n        int n=chars.size();\\n        int count=1;\\n        char prev=chars[0];\\n        int j=0;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(chars[i]==prev)\\n            {\\n                count++;\\n                continue;\\n            }\\n            else\\n            {\\n                if(count==1)\\n                {\\n                    chars[j++]=prev;\\n                    prev=chars[i];\\n                    continue;\\n                }\\n                chars[j]=prev;j++;\\n                string c=to_string(count);\\n                for(int k=0;k<c.length();k++,j++)\\n                {\\n                    chars[j]=c[k];\\n                }\\n                count=1;\\n                prev=chars[i];\\n            }\\n        }\\n        chars[j]=prev;j++;\\n        if(count>1)\\n        {\\n            string c=to_string(count);\\n            for(int k=0;k<c.length();k++,j++)\\n            {\\n                chars[j]=c[k];\\n            }\\n        }\\n        chars.erase(chars.begin()+j,chars.end());\\n        return chars.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String",
                    "Greedy",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if(chars.size()==1)\\n        return 1;\\n        int n=chars.size();\\n        int count=1;\\n        char prev=chars[0];\\n        int j=0;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(chars[i]==prev)\\n            {\\n                count++;\\n                continue;\\n            }\\n            else\\n            {\\n                if(count==1)\\n                {\\n                    chars[j++]=prev;\\n                    prev=chars[i];\\n                    continue;\\n                }\\n                chars[j]=prev;j++;\\n                string c=to_string(count);\\n                for(int k=0;k<c.length();k++,j++)\\n                {\\n                    chars[j]=c[k];\\n                }\\n                count=1;\\n                prev=chars[i];\\n            }\\n        }\\n        chars[j]=prev;j++;\\n        if(count>1)\\n        {\\n            string c=to_string(count);\\n            for(int k=0;k<c.length();k++,j++)\\n            {\\n                chars[j]=c[k];\\n            }\\n        }\\n        chars.erase(chars.begin()+j,chars.end());\\n        return chars.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3245526,
                "title": "daily-leetcoding-challenge-march-day-2",
                "content": "This problem is the Daily LeetCoding Challenge for March, Day 2.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-compression/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 0 approach in the official solution</summary>\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-compression/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 2570702,
                "title": "java-simple-approach",
                "content": "class Solution {\\n\\n    public int compress(char[] chars) {\\n        StringBuilder sb = new StringBuilder();\\n        char prev = chars[0];\\n        int len = 1;\\n        for(int i = 1; i<chars.length; i++){\\n            if(prev==chars[i]){\\n                len++;\\n            }else{\\n                sb.append(prev);\\n                if(len!=1){\\n                    sb.append(len);\\n                }\\n                len = 1;\\n            }\\n            prev = chars[i];\\n        }\\n        sb.append(prev);\\n        if(len!=1){\\n            sb.append(len);\\n        }\\n        String str = sb.toString();\\n        int idx = 0;\\n        while(idx<str.length()){\\n            chars[idx] = str.charAt(idx);\\n            idx++;\\n        }\\n        return str.length();\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n\\n    public int compress(char[] chars) {\\n        StringBuilder sb = new StringBuilder();\\n        char prev = chars[0];\\n        int len = 1;\\n        for(int i = 1; i<chars.length; i++){\\n            if(prev==chars[i]){\\n                len++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2484511,
                "title": "string-compress-runtime-99-ms",
                "content": "```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let index = 0;\\n    let len = chars.length;\\n    let i=0;\\n    while(i<len){\\n        let j = i + 1;\\n        while(j < len && chars[i] == chars[j]){\\n            j++;\\n        }\\n        chars[index++] = chars[i];\\n        let count = j-i;\\n        if(count > 1){\\n            let str = count+\"\";\\n            for(let k=0;k<str.length;k++){\\n                chars[index++] = str[k];\\n            }\\n        }\\n        i=j;\\n    }\\n    return index;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let index = 0;\\n    let len = chars.length;\\n    let i=0;\\n    while(i<len){\\n        let j = i + 1;\\n        while(j < len && chars[i] == chars[j]){\\n            j++;\\n        }\\n        chars[index++] = chars[i];\\n        let count = j-i;\\n        if(count > 1){\\n            let str = count+\"\";\\n            for(let k=0;k<str.length;k++){\\n                chars[index++] = str[k];\\n            }\\n        }\\n        i=j;\\n    }\\n    return index;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2154752,
                "title": "c-string-compression-o-n-loop-approach",
                "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n     \\n        int i = 0;\\n        int ansIndex = 0;\\n        \\n        while(i < chars.size()){\\n            \\n            int j = i+1;\\n            while(j < chars.size() && chars[i] == chars[j])    // moving j to different alpha\\n                j++;\\n            \\n            // saving character\\n            chars[ansIndex++] = chars[i];\\n            \\n            // saving count\\n            int count = j-i;\\n            if(count > 1){            // count greater than 1 will only be stored\\n                \\n                string cnt = to_string(count);\\n                for(char ch: cnt){\\n                    chars[ansIndex++] = ch;\\n                }\\n            }\\n            \\n            i = j;   // moving i to j which is on different char\\n        }\\n        \\n        return ansIndex;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n     \\n        int i = 0;\\n        int ansIndex = 0;\\n        \\n        while(i < chars.size()){\\n            \\n            int j = i+1;\\n            while(j < chars.size() && chars[i] == chars[j])    // moving j to different alpha\\n                j++;\\n            \\n            // saving character\\n            chars[ansIndex++] = chars[i];\\n            \\n            // saving count\\n            int count = j-i;\\n            if(count > 1){            // count greater than 1 will only be stored\\n                \\n                string cnt = to_string(count);\\n                for(char ch: cnt){\\n                    chars[ansIndex++] = ch;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2067901,
                "title": "simple-easy-to-understand-c-solution",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        string s;\\n        int count=1;\\n        \\n        if(chars.size()==1)return 1;\\n        for(int i=0;i<chars.size();i++){\\n            if(i+1<chars.size() and chars[i]==chars[i+1]){\\n                ++count;\\n            }\\n            else{\\n               \\n                if(count>1){\\n                s+=chars[i]+to_string(count);\\n                }\\n                if(count==1){\\n                    s+=chars[i];\\n                }\\n                count=1;\\n            }\\n        \\n        }\\n        chars.clear();\\n        for(auto i:s){chars.push_back(i);}\\n   return s.size();\\n    }\\n    \\n    \\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        string s;\\n        int count=1;\\n        \\n        if(chars.size()==1)return 1;\\n        for(int i=0;i<chars.size();i++){\\n            if(i+1<chars.size() and chars[i]==chars[i+1]){\\n                ++count;\\n            }\\n            else{\\n               \\n                if(count>1){\\n                s+=chars[i]+to_string(count);\\n                }\\n                if(count==1){\\n                    s+=chars[i];\\n                }\\n                count=1;\\n            }\\n        \\n        }\\n        chars.clear();\\n        for(auto i:s){chars.push_back(i);}\\n   return s.size();\\n    }\\n    \\n    \\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1656218,
                "title": "java-easy-solution-optimised-approach-o-1-sc",
                "content": "```\\nclass Solution \\n{\\n    public int compress(char[] chars) \\n    {\\n        int n = chars.length;\\n        int ans_ind = 0;\\n        int i = 0;\\n        while(i < n)\\n        {\\n            int j = i + 1;\\n            while(j < n && chars[i] == chars[j])\\n            {\\n                j++;\\n            }\\n            chars[ans_ind++] = chars[i];\\n            int cnt = j - i;\\n            if(cnt > 1)\\n            {\\n                String count = Integer.toString(cnt);\\n                for(char c : count.toCharArray())\\n                {\\n                    chars[ans_ind++] = c;\\n                }\\n            }\\n            i = j;\\n        }\\n        return ans_ind;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int compress(char[] chars) \\n    {\\n        int n = chars.length;\\n        int ans_ind = 0;\\n        int i = 0;\\n        while(i < n)\\n        {\\n            int j = i + 1;\\n            while(j < n && chars[i] == chars[j])\\n            {\\n                j++;\\n            }\\n            chars[ans_ind++] = chars[i];\\n            int cnt = j - i;\\n            if(cnt > 1)\\n            {\\n                String count = Integer.toString(cnt);\\n                for(char c : count.toCharArray())\\n                {\\n                    chars[ans_ind++] = c;\\n                }\\n            }\\n            i = j;\\n        }\\n        return ans_ind;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1462299,
                "title": "c-simple-solution-clocking-at-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int si = 0, i = 0;\\n        while(i < chars.size()) {\\n            int j = i;\\n            char ch = chars[i];\\n            ++i;\\n            while(i < chars.size() && chars[i] == ch) ++i;\\n            chars[si++] = ch;\\n            if(i - j != 1) {\\n                string diff = to_string(i - j);\\n                int k = 0;\\n                while(k < diff.size()) chars[si++] = diff[k++];\\n            }\\n        }\\n        \\n        return si;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int si = 0, i = 0;\\n        while(i < chars.size()) {\\n            int j = i;\\n            char ch = chars[i];\\n            ++i;\\n            while(i < chars.size() && chars[i] == ch) ++i;\\n            chars[si++] = ch;\\n            if(i - j != 1) {\\n                string diff = to_string(i - j);\\n                int k = 0;\\n                while(k < diff.size()) chars[si++] = diff[k++];\\n            }\\n        }\\n        \\n        return si;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1407275,
                "title": "bug-in-one-test-case",
                "content": "When I run the following test input:\\n```\\n[\"a\",\"a\",\"2\"]\\n```\\nthe expected answer is \\n```\\n[\"a\",\"2\",\"2\",\"\"]\\n```\\nMy own solution is accepted, but on this example it gives a different (correct, in my opinion) answer:\\n```\\n[\"a\",\"2\",\"2\"]\\n```",
                "solutionTags": [],
                "code": "```\\n[\"a\",\"a\",\"2\"]\\n```\n```\\n[\"a\",\"2\",\"2\",\"\"]\\n```\n```\\n[\"a\",\"2\",\"2\"]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1371890,
                "title": "python-3-in-place-operation",
                "content": "```\\ndef compress(self, chars: List[str]) -> int:\\n\\tl = len(chars)\\n\\tindex = 0\\n\\ti = 0\\n\\n\\twhile i<l:\\n\\t\\tc = chars[i]\\n\\t\\tcount = 0\\n\\t\\twhile i<l and chars[i]==c:\\n\\t\\t\\tcount+=1\\n\\t\\t\\ti+=1\\n\\t\\tchars[index] = c\\n\\t\\tindex+=1\\n\\t\\tif count>1:\\n\\t\\t\\tcount = str(count)\\n\\t\\t\\tfor c in count:\\n\\t\\t\\t\\tchars[index]=c\\n\\t\\t\\t\\tindex+=1\\n\\treturn index\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef compress(self, chars: List[str]) -> int:\\n\\tl = len(chars)\\n\\tindex = 0\\n\\ti = 0\\n\\n\\twhile i<l:\\n\\t\\tc = chars[i]\\n\\t\\tcount = 0\\n\\t\\twhile i<l and chars[i]==c:\\n\\t\\t\\tcount+=1\\n\\t\\t\\ti+=1\\n\\t\\tchars[index] = c\\n\\t\\tindex+=1\\n\\t\\tif count>1:\\n\\t\\t\\tcount = str(count)\\n\\t\\t\\tfor c in count:\\n\\t\\t\\t\\tchars[index]=c\\n\\t\\t\\t\\tindex+=1\\n\\treturn index\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1350029,
                "title": "java-100-no-extra-string-when-adding-number",
                "content": "Comments are in the code. \\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        // we only need to count the current char\\'s count and see what it is\\n        int result = 0;\\n        if (chars == null || chars.length == 0){\\n            return 0;\\n        }\\n        if (chars.length == 1){\\n            return 1;\\n        }\\n        // need to change the original array\\n        // [0,i) : what we are going to return \\n        // j: current, k - j = count of current char\\n        // k: fast pointer to find the next diff char\\n        int i = 0;\\n        int j = 0;\\n        int k = 0;\\n        while (j < chars.length){\\n            // find next char\\n            while (k < chars.length && chars[k] == chars[j]){\\n                k++;\\n            }\\n            int count = k - j;\\n            \\n            // udpate arr using i\\n            chars[i] = chars[j];\\n            int len = 0;\\n            if (count != 1){\\n                while (count != 0){\\n                    count /= 10;\\n                    len++;\\n                }\\n                count = k - j;\\n                i += len;\\n                while (count != 0){\\n                    chars[i--] = (char)(count % 10 + \\'0\\');\\n                    count /= 10;\\n                }\\n            }\\n            \\n            // update i,  k and j\\n            i += len + 1;\\n            j = k;\\n        }\\n        return i;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        // we only need to count the current char\\'s count and see what it is\\n        int result = 0;\\n        if (chars == null || chars.length == 0){\\n            return 0;\\n        }\\n        if (chars.length == 1){\\n            return 1;\\n        }\\n        // need to change the original array\\n        // [0,i) : what we are going to return \\n        // j: current, k - j = count of current char\\n        // k: fast pointer to find the next diff char\\n        int i = 0;\\n        int j = 0;\\n        int k = 0;\\n        while (j < chars.length){\\n            // find next char\\n            while (k < chars.length && chars[k] == chars[j]){\\n                k++;\\n            }\\n            int count = k - j;\\n            \\n            // udpate arr using i\\n            chars[i] = chars[j];\\n            int len = 0;\\n            if (count != 1){\\n                while (count != 0){\\n                    count /= 10;\\n                    len++;\\n                }\\n                count = k - j;\\n                i += len;\\n                while (count != 0){\\n                    chars[i--] = (char)(count % 10 + \\'0\\');\\n                    count /= 10;\\n                }\\n            }\\n            \\n            // update i,  k and j\\n            i += len + 1;\\n            j = k;\\n        }\\n        return i;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 792729,
                "title": "simple-c-solution",
                "content": "```\\nint compress(vector<char>& chars) {\\n        int i = 0, write = 0;\\n        while (i < chars.size()) {\\n            int j = i;\\n            while (j < chars.size() && chars[i] == chars[j]) {\\n                j++;\\n            }\\n            \\n            chars[write++] = chars[i];\\n            int freq = j - i;\\n            if (freq > 1) {\\n                string countStr = to_string(freq);\\n                for (char c : countStr) {\\n                    chars[write++] = c;\\n                }\\n            }\\n            i = j;\\n        }\\n        return write;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint compress(vector<char>& chars) {\\n        int i = 0, write = 0;\\n        while (i < chars.size()) {\\n            int j = i;\\n            while (j < chars.size() && chars[i] == chars[j]) {\\n                j++;\\n            }\\n            \\n            chars[write++] = chars[i];\\n            int freq = j - i;\\n            if (freq > 1) {\\n                string countStr = to_string(freq);\\n                for (char c : countStr) {\\n                    chars[write++] = c;\\n                }\\n            }\\n            i = j;\\n        }\\n        return write;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 510055,
                "title": "c-super-simple-c-solution-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n\\n    int compress(vector<char>& chars) {\\n        int idx = 1, k = 0;\\n        while(idx <= chars.size()) { //  goind one step extra is intentional here to cover the right edge case !\\n            int count = 1;\\n            while( idx < chars.size() && chars[idx] == chars[idx - 1] ) {\\n                count++;\\n                idx++;\\n            }\\n            chars[k++] = chars[idx-1];\\n            if(count > 1) {\\n                string num = to_string(count);\\n                for(auto ch : num) { chars[k++] = ch; }\\n            }\\n            ++idx;\\n        }\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int compress(vector<char>& chars) {\\n        int idx = 1, k = 0;\\n        while(idx <= chars.size()) { //  goind one step extra is intentional here to cover the right edge case !\\n            int count = 1;\\n            while( idx < chars.size() && chars[idx] == chars[idx - 1] ) {\\n                count++;\\n                idx++;\\n            }\\n            chars[k++] = chars[idx-1];\\n            if(count > 1) {\\n                string num = to_string(count);\\n                for(auto ch : num) { chars[k++] = ch; }\\n            }\\n            ++idx;\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 198502,
                "title": "short-o-n-python-solution",
                "content": "```\\nclass Solution:\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        i = j = 0\\n\\n        while j < len(chars):\\n            count, k = 1, j + 1\\n            while k < len(chars) and chars[j] == chars[k]:\\n                count, k = count + 1, k + 1\\n            chars[i] = chars[j]\\n            i += 1\\n            if count > 1:\\n                for c in str(count):\\n                    chars[i] = c\\n                    i += 1\\n            j = k\\n\\n        return i\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        i = j = 0\\n\\n        while j < len(chars):\\n            count, k = 1, j + 1\\n            while k < len(chars) and chars[j] == chars[k]:\\n                count, k = count + 1, k + 1\\n            chars[i] = chars[j]\\n            i += 1\\n            if count > 1:\\n                for c in str(count):\\n                    chars[i] = c\\n                    i += 1\\n            j = k\\n\\n        return i\\n```",
                "codeTag": "Java"
            },
            {
                "id": 92531,
                "title": "two-pointers-solution-c",
                "content": "keep two pointer, one to read `indexRead`, one to write `indexWrite`\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int indexWrite = 0;\\n        for(int indexRead = 0; indexRead < chars.size(); ++indexRead) {\\n            int count = 1;\\n            while(indexRead + 1 < chars.size() \\n                 && chars[indexRead] == chars[indexRead + 1]) {\\n                ++count;   \\n                ++indexRead;\\n            }\\n            chars[indexWrite] = chars[indexRead];\\n            ++indexWrite;\\n            if(count >= 2) {\\n                string tmpStr = std::to_string(count);\\n                for(char ch : tmpStr) {\\n                    chars[indexWrite] = ch;\\n                    ++indexWrite;\\n                }\\n            }\\n        }\\n        return indexWrite;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int indexWrite = 0;\\n        for(int indexRead = 0; indexRead < chars.size(); ++indexRead) {\\n            int count = 1;\\n            while(indexRead + 1 < chars.size() \\n                 && chars[indexRead] == chars[indexRead + 1]) {\\n                ++count;   \\n                ++indexRead;\\n            }\\n            chars[indexWrite] = chars[indexRead];\\n            ++indexWrite;\\n            if(count >= 2) {\\n                string tmpStr = std::to_string(count);\\n                for(char ch : tmpStr) {\\n                    chars[indexWrite] = ch;\\n                    ++indexWrite;\\n                }\\n            }\\n        }\\n        return indexWrite;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 92543,
                "title": "easy-and-natrual-in-python-code",
                "content": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        def cntCntgns(chars, c): #count contignous char in chars\\n            i = 0\\n            for char in chars:\\n                if char == c:\\n                    i += 1\\n                else:\\n                    return i\\n            else:\\n                return i                \\n         \\t\\n        i = 0\\n        while i < len(chars):\\n            c = chars[i]\\n            cntc = cntCntgns(chars[i:], c)\\n            if cntc != 1:\\n                chars[i + 1:i + cntc] = str(cntc) \\n                i += 2 \\n                continue\\n            else:\\n                i += 1\\n                continue\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def compress(self, chars):\\n        \"\"\"\\n        :type chars: List[str]\\n        :rtype: int\\n        \"\"\"\\n        def cntCntgns(chars, c): #count contignous char in chars\\n            i = 0\\n            for char in chars:\\n                if char == c:\\n                    i += 1\\n                else:\\n                    return i\\n            else:\\n                return i                \\n         \\t\\n        i = 0\\n        while i < len(chars):\\n            c = chars[i]\\n            cntc = cntCntgns(chars[i:], c)\\n            if cntc != 1:\\n                chars[i + 1:i + cntc] = str(cntc) \\n                i += 2 \\n                continue\\n            else:\\n                i += 1\\n                continue\\n```",
                "codeTag": "Java"
            },
            {
                "id": 92562,
                "title": "1-liner",
                "content": "Using a regular expression to replace repeats by numbers.\\n\\nRuby:\\n```\\ndef compress(chars)\\n  chars.replace(chars.join.gsub(/(?<=(.))\\\\1+/) { |s| 1 + s.size }.chars).size\\nend\\n```\\nPython version, not quite as nice/short:\\n\\n    def compress(self, chars):\\n        chars[:] = re.sub(r'(?<=(.))\\\\1+', lambda m: str(1 + len(m.group())), ''.join(chars))\\n        return len(chars)",
                "solutionTags": [],
                "code": "```\\ndef compress(chars)\\n  chars.replace(chars.join.gsub(/(?<=(.))\\\\1+/) { |s| 1 + s.size }.chars).size\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4062156,
                "title": "new-trick-beginner-friendly-solution-fully-explained-beats-100",
                "content": "# Intuition\\nThe problem at hand is to compress a list of characters in-place by replacing consecutive repeating characters with the character followed by the count of the character. The first intuition to solve this problem is to iterate over the characters and keep a count of consecutive repeating characters.\\n\\n# Approach\\n1. Initialize an empty string `ans` to store the compressed string.\\n2. If the size of `chars` is 1, return 1 because there\\'s only one character which doesn\\'t repeat.\\n3. Initialize a counter `cnt` to 1.\\n4. Append a dummy character \\'7\\' to `chars` to handle the last sequence of repeating characters.\\n5. Iterate over `chars` from the first character to the second last character (since we\\'ve added a dummy character at the end).\\n6. If the current character is equal to the next character, increment `cnt`.\\n7. If the current character is not equal to the next character, append the current character and its count (if greater than 1) to `ans`, and reset `cnt` to 1.\\n8. After the loop, clear `chars` and fill it with characters from `ans`.\\n\\n# Complexity\\n- Time complexity: The time complexity is $$O(n)$$ because you\\'re iterating over each character in `chars` once, where $$n$$ is the size of `chars`.\\n- Space complexity: The space complexity is $$O(n)$$ because you\\'re storing the compressed string in `ans`, which can be of size $$n$$ in the worst case when all characters are unique.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        string ans;\\n        if(chars.size()==1)\\n        return 1;\\n        int cnt=1;\\n        chars.push_back(\\'7\\');\\n        for(int i=0;i<chars.size()-1;i++)\\n        {\\n            if(chars[i]==chars[i+1])\\n            cnt++;\\n            else\\n            {\\n                if(cnt==1)\\n                ans+=chars[i];\\n                else\\n                ans+=chars[i]+to_string(cnt),cnt=1;\\n            }\\n        }\\n        chars.clear();\\n        for(auto it:ans)\\n        chars.push_back(it);\\n        return chars.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        string ans;\\n        if(chars.size()==1)\\n        return 1;\\n        int cnt=1;\\n        chars.push_back(\\'7\\');\\n        for(int i=0;i<chars.size()-1;i++)\\n        {\\n            if(chars[i]==chars[i+1])\\n            cnt++;\\n            else\\n            {\\n                if(cnt==1)\\n                ans+=chars[i];\\n                else\\n                ans+=chars[i]+to_string(cnt),cnt=1;\\n            }\\n        }\\n        chars.clear();\\n        for(auto it:ans)\\n        chars.push_back(it);\\n        return chars.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027478,
                "title": "string-compression-c-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int p=0,k=0;\\n        int n=chars.size();\\n        auto updateChars=[&](){\\n            if(p!=1){\\n                    int num_len=floor(log10(p))+1;\\n                    int pw=pow(10,num_len-1);\\n                    int temp=p;\\n                    while(num_len-->0){\\n                        int c=temp/pw;\\n                        chars[k++]=(c+\\'0\\');\\n                        temp-=c*pw;\\n                        pw/=10;\\n                    }\\n            }\\n        };\\n        for(int i=0;i<n;i++){\\n            if(i==0){\\n                p=1;\\n                k++;\\n            }else{\\n                if(chars[i]==chars[i-1]){\\n                    p++;\\n                }else{\\n                    updateChars();\\n                    chars[k++]=chars[i];\\n                    p=1;\\n                }\\n            }\\n        }\\n        updateChars();\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int p=0,k=0;\\n        int n=chars.size();\\n        auto updateChars=[&](){\\n            if(p!=1){\\n                    int num_len=floor(log10(p))+1;\\n                    int pw=pow(10,num_len-1);\\n                    int temp=p;\\n                    while(num_len-->0){\\n                        int c=temp/pw;\\n                        chars[k++]=(c+\\'0\\');\\n                        temp-=c*pw;\\n                        pw/=10;\\n                    }\\n            }\\n        };\\n        for(int i=0;i<n;i++){\\n            if(i==0){\\n                p=1;\\n                k++;\\n            }else{\\n                if(chars[i]==chars[i-1]){\\n                    p++;\\n                }else{\\n                    updateChars();\\n                    chars[k++]=chars[i];\\n                    p=1;\\n                }\\n            }\\n        }\\n        updateChars();\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4004688,
                "title": "beats-98-of-users-java-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        if(chars.length == 1) return 1;\\n        char[] array = new char[chars.length];\\n\\n        int length = chars.length;\\n        int index =0;\\n        char ch = chars[0];// to initialize the first character\\n        int count = 1;\\n        int change = 0;\\n\\n\\n        for(int i =1;i<length;i++){\\n            if(ch == chars[i] && i < length-1){// if same character adding count\\n                count++;\\n            }else if (count != 1 || i==length-1){ // not same with previous character \\n                if(ch == chars[i]) count++;\\n                if(ch != chars[i] && i==length-1 ){ // if array reaches last\\n                    array[index++] = chars[i-1];\\n                    if(count !=1){ \\n                        array[index++] = Character.forDigit(count,16);\\n                        change++;\\n                    }\\n                    array[index] = chars[i];\\n\\n                    change+=2;\\n                    continue;\\n                }\\n                array[index++] = chars[i-1];\\n                if(count>9){ \\n                   index = counts(index,count,array);\\n                   change += (Integer.toString(count).length()-1);\\n                }else{\\n                    array[index++] = Character.forDigit(count,16);\\n                }\\n                ch = chars[i];\\n                count = 1;\\n                change+=2;\\n            }else if(ch != chars[i]){  \\n                array[index++] = chars[i-1];\\n                ch =  chars[i];\\n                change+=1;\\n            }\\n            \\n        }\\n\\n        index =0;\\n        for(char c : array){//Adding to the existing array\\n            chars[index++] = c;\\n        }\\n        \\n\\n        return change;// the length of the array which is modified\\n\\n    }\\n\\n    // to adding the two digits number in array\\n    public int counts(int index,int count,char[] array){\\n        char[] num = Integer.toString(count).toCharArray();\\n        int digits = 0;\\n        for(char ch : num){\\n            array[index++] = ch;\\n            digits++;\\n        }\\n        return index;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        if(chars.length == 1) return 1;\\n        char[] array = new char[chars.length];\\n\\n        int length = chars.length;\\n        int index =0;\\n        char ch = chars[0];// to initialize the first character\\n        int count = 1;\\n        int change = 0;\\n\\n\\n        for(int i =1;i<length;i++){\\n            if(ch == chars[i] && i < length-1){// if same character adding count\\n                count++;\\n            }else if (count != 1 || i==length-1){ // not same with previous character \\n                if(ch == chars[i]) count++;\\n                if(ch != chars[i] && i==length-1 ){ // if array reaches last\\n                    array[index++] = chars[i-1];\\n                    if(count !=1){ \\n                        array[index++] = Character.forDigit(count,16);\\n                        change++;\\n                    }\\n                    array[index] = chars[i];\\n\\n                    change+=2;\\n                    continue;\\n                }\\n                array[index++] = chars[i-1];\\n                if(count>9){ \\n                   index = counts(index,count,array);\\n                   change += (Integer.toString(count).length()-1);\\n                }else{\\n                    array[index++] = Character.forDigit(count,16);\\n                }\\n                ch = chars[i];\\n                count = 1;\\n                change+=2;\\n            }else if(ch != chars[i]){  \\n                array[index++] = chars[i-1];\\n                ch =  chars[i];\\n                change+=1;\\n            }\\n            \\n        }\\n\\n        index =0;\\n        for(char c : array){//Adding to the existing array\\n            chars[index++] = c;\\n        }\\n        \\n\\n        return change;// the length of the array which is modified\\n\\n    }\\n\\n    // to adding the two digits number in array\\n    public int counts(int index,int count,char[] array){\\n        char[] num = Integer.toString(count).toCharArray();\\n        int digits = 0;\\n        for(char ch : num){\\n            array[index++] = ch;\\n            digits++;\\n        }\\n        return index;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3985854,
                "title": "java-easy-to-understand-98-faster",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        if(n==1){\\n            return n;\\n        }\\n        int count=1;\\n        int index=0;\\n        for(int i=1; i<=n; i++){\\n            count=1;\\n            while(i<n && chars[i]==chars[i-1]){\\n                count++;\\n                i++;\\n            }\\n            chars[index++]=chars[i-1];\\n            if(count!=1){\\n                String s = String.valueOf(count);\\n                for(char a:s.toCharArray()){\\n                    chars[index++]=a;\\n                }          \\n            }\\n        }\\n        return index;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        if(n==1){\\n            return n;\\n        }\\n        int count=1;\\n        int index=0;\\n        for(int i=1; i<=n; i++){\\n            count=1;\\n            while(i<n && chars[i]==chars[i-1]){\\n                count++;\\n                i++;\\n            }\\n            chars[index++]=chars[i-1];\\n            if(count!=1){\\n                String s = String.valueOf(count);\\n                for(char a:s.toCharArray()){\\n                    chars[index++]=a;\\n                }          \\n            }\\n        }\\n        return index;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3922346,
                "title": "c-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.size() < 2)\\n            return chars.size();\\n\\n        int i = 0; // used to overwrite the chars array\\n        int j = 0; // used to traverse the chars array \\n\\n        while (j < chars.size()) {\\n            chars[i] = chars[j];\\n            int count = 0;\\n            while (j < chars.size() && chars[j] == chars[i]) {\\n                count++;\\n                j++;\\n            }\\n\\n            if (count == 1) {\\n               i++; \\n            } else {\\n                string str = to_string(count);\\n                i++;\\n                for (char& digit : str) {\\n                    chars[i++] = digit;\\n                }\\n            }\\n        }\\n\\n        return i; // return the length of overwritten part of the array\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.size() < 2)\\n            return chars.size();\\n\\n        int i = 0; // used to overwrite the chars array\\n        int j = 0; // used to traverse the chars array \\n\\n        while (j < chars.size()) {\\n            chars[i] = chars[j];\\n            int count = 0;\\n            while (j < chars.size() && chars[j] == chars[i]) {\\n                count++;\\n                j++;\\n            }\\n\\n            if (count == 1) {\\n               i++; \\n            } else {\\n                string str = to_string(count);\\n                i++;\\n                for (char& digit : str) {\\n                    chars[i++] = digit;\\n                }\\n            }\\n        }\\n\\n        return i; // return the length of overwritten part of the array\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3862810,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0, ans = 0;\\n        while (i < chars.size()) {\\n            int cnt = 1;\\n            while (i + 1 < chars.size() and chars[i] == chars[i+1]) {\\n                cnt++;\\n                i++;\\n            }\\n            chars[ans++] = chars[i];\\n            if (cnt > 1) {\\n                string s = to_string(cnt);\\n                for (char c: s) {\\n                    chars[ans++] = c;\\n                }\\n            }\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0, ans = 0;\\n        while (i < chars.size()) {\\n            int cnt = 1;\\n            while (i + 1 < chars.size() and chars[i] == chars[i+1]) {\\n                cnt++;\\n                i++;\\n            }\\n            chars[ans++] = chars[i];\\n            if (cnt > 1) {\\n                string s = to_string(cnt);\\n                for (char c: s) {\\n                    chars[ans++] = c;\\n                }\\n            }\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3661513,
                "title": "easy-c-beginner-friendly-implementation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe just need to understand the requirements and the edge cases and code accordingly.... no extra concept is required other than proper implementation\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nmaking a string to use is totally your choice you can do it on the existing vector as well.\\ntraverse and count all the frequencies\\nand if the ```s[i]!=s[i+1]``` push the frequency in the solution vector\\n- remember to typecast \\n- also remember to store ```count>10``` in character format\\n- in the end store the last index according to the condition and copy the output solution vector in the initial vector.\\n# Complexity\\n- Time complexity:   $$O(N)$$\\n\\n\\n- Space complexity: $$O(N)+O(N)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n// BISMIL DA SANDES JO TRAIN LUCKNOW JAA RHI HAI USEY HAM KARORI ME LUTENGE\\n    int compress(vector<char>& chars) {\\n        string s= \"\";\\n        for(auto x:chars)\\n        {\\n            s+=x;\\n        }\\n      \\n        if(s.size()==1)\\n        {\\n            return 1;\\n        }\\n       \\n        int count=1, ans=0;;\\n        char ch;\\n        vector<char>a;\\n        int n=s.size();\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(s[i]!=s[i+1])\\n            { \\n               a.push_back(s[i]);\\n                 if(count>1)\\n               {\\n                   ans+=2;\\n                    string temp=to_string(count);\\n                  \\n                    for(int it=0;it<temp.size();it++)\\n                      a.push_back(temp[it]);\\n                }\\n               else\\n                ans+=1;\\n               count=1;\\n\\n                 \\n            }\\n            else\\n            { \\n                ch=s[i];\\n                count++;\\n\\n            }\\n\\n        }\\n        a.push_back(s[n-1]);\\n        if(s[n-1]==s[n-2])\\n        {\\n            \\n                string temp=to_string(count);\\n                    for(int it=0;it<temp.size();it++)\\n                      a.push_back(temp[it]);\\n          \\n        }\\n       \\n        chars=a;\\n        \\n        return a.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```s[i]!=s[i+1]```\n```count>10```\n```\\nclass Solution {\\npublic:\\n// BISMIL DA SANDES JO TRAIN LUCKNOW JAA RHI HAI USEY HAM KARORI ME LUTENGE\\n    int compress(vector<char>& chars) {\\n        string s= \"\";\\n        for(auto x:chars)\\n        {\\n            s+=x;\\n        }\\n      \\n        if(s.size()==1)\\n        {\\n            return 1;\\n        }\\n       \\n        int count=1, ans=0;;\\n        char ch;\\n        vector<char>a;\\n        int n=s.size();\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(s[i]!=s[i+1])\\n            { \\n               a.push_back(s[i]);\\n                 if(count>1)\\n               {\\n                   ans+=2;\\n                    string temp=to_string(count);\\n                  \\n                    for(int it=0;it<temp.size();it++)\\n                      a.push_back(temp[it]);\\n                }\\n               else\\n                ans+=1;\\n               count=1;\\n\\n                 \\n            }\\n            else\\n            { \\n                ch=s[i];\\n                count++;\\n\\n            }\\n\\n        }\\n        a.push_back(s[n-1]);\\n        if(s[n-1]==s[n-2])\\n        {\\n            \\n                string temp=to_string(count);\\n                    for(int it=0;it<temp.size();it++)\\n                      a.push_back(temp[it]);\\n          \\n        }\\n       \\n        chars=a;\\n        \\n        return a.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3645059,
                "title": "easy-to-understand-clear-code-c",
                "content": "\\n\\n# Approach\\n-  We can use a two-pointer approach to iterate through the input array of characters. We\\'ll keep track of the current character and its count as we iterate through the array. When we encounter a different character, we\\'ll append the current character and its count (if count > 1) to the result string s, and reset the count to 1. At the end of the loop, we\\'ll append the last character and its count to s. Finally, we\\'ll copy the characters from s back to the input array chars.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.empty()) return 0;\\n        char curr = chars[0];\\n        int count = 1;\\n        string s;\\n        for (int i = 1; i <= chars.size(); i++) {\\n            if (i < chars.size() && chars[i] == curr) {\\n                count++;\\n            } else {\\n                s.push_back(curr);\\n                if (count > 1) {\\n                    string str = to_string(count);\\n                    for (char c : str) {\\n                        s.push_back(c);\\n                    }\\n                }\\n                curr = i < chars.size() ? chars[i] : 0;\\n                count = 1;\\n            }\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            chars[i] = s[i];\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        if (chars.empty()) return 0;\\n        char curr = chars[0];\\n        int count = 1;\\n        string s;\\n        for (int i = 1; i <= chars.size(); i++) {\\n            if (i < chars.size() && chars[i] == curr) {\\n                count++;\\n            } else {\\n                s.push_back(curr);\\n                if (count > 1) {\\n                    string str = to_string(count);\\n                    for (char c : str) {\\n                        s.push_back(c);\\n                    }\\n                }\\n                curr = i < chars.size() ? chars[i] : 0;\\n                count = 1;\\n            }\\n        }\\n        for (int i = 0; i < s.size(); i++) {\\n            chars[i] = s[i];\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3551571,
                "title": "java-solution-easy-understanding-1-ms",
                "content": "\\nclass Solution {\\n    public int compress(char[] c) {\\n\\n        int l=c.length;\\n        if(l==1)\\n        return 1;\\n\\n        int k=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            int end=i+1;\\n            int n=1;\\n            c[k++]=c[i];\\n            while(end<l && c[end]==c[i])\\n            {\\n             n++;\\n                end++;\\n            }\\n            i=end-1;\\n            if(n>1)\\n            {\\n\\n            String s=n+\"\";\\n            for(char e:s.toCharArray())\\n            {\\n                c[k]=e;\\n                k++;\\n            }\\n            }\\n        }\\n        return k;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int compress(char[] c) {\\n\\n        int l=c.length;\\n        if(l==1)\\n        return 1;\\n\\n        int k=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            int end=i+1;\\n            int n=1;\\n            c[k++]=c[i];\\n            while(end<l && c[end]==c[i])\\n            {\\n             n++;\\n                end++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3529394,
                "title": "java-easy-100-o-n-solution",
                "content": "```java\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int j = 0, count = 1;\\n\\n        for(int i = 1; i < chars.length + 1; ++i) {\\n            if(i == chars.length || chars[i] != chars[i - 1]) {\\n                chars[j++] = chars[i - 1];\\n                \\n                if(count > 1) {\\n                    String s = count + \"\";\\n\\n                    for(int k = 0; k < s.length(); ++k)\\n                        chars[j++] = s.charAt(k);\\n                }\\n\\n                count = 1;\\n            } else {\\n                count++;\\n            }\\n        }\\n\\n        return j;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int j = 0, count = 1;\\n\\n        for(int i = 1; i < chars.length + 1; ++i) {\\n            if(i == chars.length || chars[i] != chars[i - 1]) {\\n                chars[j++] = chars[i - 1];\\n                \\n                if(count > 1) {\\n                    String s = count + \"\";\\n\\n                    for(int k = 0; k < s.length(); ++k)\\n                        chars[j++] = s.charAt(k);\\n                }\\n\\n                count = 1;\\n            } else {\\n                count++;\\n            }\\n        }\\n\\n        return j;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3360994,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0;\\n        int ansIndex = 0;\\n        int n = chars.size();\\n        while(i<n)\\n        {\\n            int j = i + 1;\\n            while(j<n && chars[i] == chars[j])\\n            {\\n                j++;\\n            }\\n            chars[ansIndex++] = chars[i];\\n            int count = j - i ;\\n            if(count > 1){\\n                string cht = to_string(count);\\n                for(char ch : cht)\\n                {\\n                    chars[ansIndex++] = ch;\\n                }\\n            }\\n            i = j ;\\n        }\\n        return ansIndex;\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        i = 0\\n        j = 0\\n        \\n        while i < n:\\n            count = 1\\n            while i < n - 1 and chars[i] == chars[i+1]:\\n                count += 1\\n                i += 1\\n            \\n            chars[j] = chars[i]\\n            j += 1\\n            \\n            if count > 1:\\n                for c in str(count):\\n                    chars[j] = c\\n                    j += 1\\n            \\n            i += 1\\n        \\n        return j\\n```\\n\\n```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        if (chars.length == 1) {\\n            return 1;\\n        }\\n        int count = 1;\\n        int indexOfCounting = -1;\\n        int newLength = 0;\\n        for (int i = 0; i < chars.length; i++) {\\n            if ((i + 1) < chars.length && chars[i] == chars[i + 1]) {\\n                if (indexOfCounting < 0) {\\n                    indexOfCounting = i;\\n                }\\n                count++;\\n            } else {\\n                chars[newLength++] = chars[i];\\n                if (count > 1) {\\n                    if (count > 9) {\\n                        boolean setNext = false;\\n                        if (count > 999) {\\n                            chars[newLength++] = Character.forDigit(\\n                                count / 1000,\\n                                10\\n                            );\\n                            count %= 1000;\\n                            setNext = true;\\n                        }\\n                        if (count > 99 || setNext) {\\n                            chars[newLength++] = Character.forDigit(\\n                                count / 100,\\n                                10\\n                            );\\n                            count %= 100;\\n                            setNext = true;\\n                        }\\n                        if (count > 9 || setNext) {\\n                            chars[newLength++] = Character.forDigit(\\n                                count / 10,\\n                                10\\n                            );\\n                            count %= 10;\\n                        }\\n                    }\\n                    chars[newLength++] = Character.forDigit(count, 10);\\n                }\\n                count = 1;\\n                indexOfCounting = -1;\\n            }\\n        }\\n        return newLength;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int i = 0;\\n        int ansIndex = 0;\\n        int n = chars.size();\\n        while(i<n)\\n        {\\n            int j = i + 1;\\n            while(j<n && chars[i] == chars[j])\\n            {\\n                j++;\\n            }\\n            chars[ansIndex++] = chars[i];\\n            int count = j - i ;\\n            if(count > 1){\\n                string cht = to_string(count);\\n                for(char ch : cht)\\n                {\\n                    chars[ansIndex++] = ch;\\n                }\\n            }\\n            i = j ;\\n        }\\n        return ansIndex;\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        i = 0\\n        j = 0\\n        \\n        while i < n:\\n            count = 1\\n            while i < n - 1 and chars[i] == chars[i+1]:\\n                count += 1\\n                i += 1\\n            \\n            chars[j] = chars[i]\\n            j += 1\\n            \\n            if count > 1:\\n                for c in str(count):\\n                    chars[j] = c\\n                    j += 1\\n            \\n            i += 1\\n        \\n        return j\\n```\n```Java []\\nclass Solution {\\n    public int compress(char[] chars) {\\n        if (chars.length == 1) {\\n            return 1;\\n        }\\n        int count = 1;\\n        int indexOfCounting = -1;\\n        int newLength = 0;\\n        for (int i = 0; i < chars.length; i++) {\\n            if ((i + 1) < chars.length && chars[i] == chars[i + 1]) {\\n                if (indexOfCounting < 0) {\\n                    indexOfCounting = i;\\n                }\\n                count++;\\n            } else {\\n                chars[newLength++] = chars[i];\\n                if (count > 1) {\\n                    if (count > 9) {\\n                        boolean setNext = false;\\n                        if (count > 999) {\\n                            chars[newLength++] = Character.forDigit(\\n                                count / 1000,\\n                                10\\n                            );\\n                            count %= 1000;\\n                            setNext = true;\\n                        }\\n                        if (count > 99 || setNext) {\\n                            chars[newLength++] = Character.forDigit(\\n                                count / 100,\\n                                10\\n                            );\\n                            count %= 100;\\n                            setNext = true;\\n                        }\\n                        if (count > 9 || setNext) {\\n                            chars[newLength++] = Character.forDigit(\\n                                count / 10,\\n                                10\\n                            );\\n                            count %= 10;\\n                        }\\n                    }\\n                    chars[newLength++] = Character.forDigit(count, 10);\\n                }\\n                count = 1;\\n                indexOfCounting = -1;\\n            }\\n        }\\n        return newLength;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254934,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n=chars.size();\\n        int i=0;\\n        int ansidx=0;\\n        while(i<n)\\n        {\\n            int j=i+1;\\n            while(j<n && chars[i]==chars[j])j++;\\n\\n            chars[ansidx++]=chars[i];\\n            int cnt=j-i;\\n            if(cnt>1)\\n            {\\n                string a=to_string(cnt);\\n                for(auto x:a)\\n                    chars[ansidx++]=x;\\n\\n            }\\n            i=j;\\n        }\\n        return ansidx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n=chars.size();\\n        int i=0;\\n        int ansidx=0;\\n        while(i<n)\\n        {\\n            int j=i+1;\\n            while(j<n && chars[i]==chars[j])j++;\\n\\n            chars[ansidx++]=chars[i];\\n            int cnt=j-i;\\n            if(cnt>1)\\n            {\\n                string a=to_string(cnt);\\n                for(auto x:a)\\n                    chars[ansidx++]=x;\\n\\n            }\\n            i=j;\\n        }\\n        return ansidx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3251603,
                "title": "100-beats-unique-and-fast",
                "content": "# Intuition\\n\\n\\n# Approach\\njust using only one for loop\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\no(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int count = 1;\\n        vector<char>ch;\\n        if(chars.size() == 1)\\n        {\\n            return 1;\\n        }\\n        ch.push_back(chars[0]);\\n        for(int i = 0;i<chars.size()-1;i++)\\n        {\\n            if(chars[i] == chars[i+1])\\n            {\\n                count++;\\n            }\\n            else\\n            {\\n                if(count>1)\\n                {\\n                    string s = to_string(count);\\n                    for(int i = 0 ;i<s.length();i++)\\n                    {\\n                        ch.push_back(s[i]);\\n                    } \\n                }\\n                count = 1;\\n                ch.push_back(chars[i+1]);\\n            }\\n        }\\n        if(count>1)\\n        {\\n           string s = to_string(count);\\n            for(int i = 0 ;i<s.length();i++)\\n            {\\n                ch.push_back(s[i]);\\n            }  \\n        }\\n        for(int i = 0 ;i<ch.size();i++)\\n        {\\n            chars[i] = ch[i];\\n        }\\n        return ch.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int count = 1;\\n        vector<char>ch;\\n        if(chars.size() == 1)\\n        {\\n            return 1;\\n        }\\n        ch.push_back(chars[0]);\\n        for(int i = 0;i<chars.size()-1;i++)\\n        {\\n            if(chars[i] == chars[i+1])\\n            {\\n                count++;\\n            }\\n            else\\n            {\\n                if(count>1)\\n                {\\n                    string s = to_string(count);\\n                    for(int i = 0 ;i<s.length();i++)\\n                    {\\n                        ch.push_back(s[i]);\\n                    } \\n                }\\n                count = 1;\\n                ch.push_back(chars[i+1]);\\n            }\\n        }\\n        if(count>1)\\n        {\\n           string s = to_string(count);\\n            for(int i = 0 ;i<s.length();i++)\\n            {\\n                ch.push_back(s[i]);\\n            }  \\n        }\\n        for(int i = 0 ;i<ch.size();i++)\\n        {\\n            chars[i] = ch[i];\\n        }\\n        return ch.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249108,
                "title": "easy-c-in-place-two-pointers",
                "content": "\\n# Approach\\nTwo Pointer with recursion\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void rec(vector<char>&chars, int &j, int count){\\n        if(count==0)return;\\n        rec(chars,j,count/10);\\n        chars[j++]=\\'0\\'+count%10;\\n    }\\n    int compress(vector<char>& chars) {\\n      int i=0,j=0,count=0,n=chars.size();\\n      while(i<n){\\n          chars[j++]=chars[i];\\n          count=1;\\n          while(i+1<n && chars[i]==chars[i+1]){\\n              i++;\\n              count++;\\n          }\\n          if(count>1){\\n              rec(chars,j,count);\\n          }\\n          i++;\\n      }\\n      return j;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void rec(vector<char>&chars, int &j, int count){\\n        if(count==0)return;\\n        rec(chars,j,count/10);\\n        chars[j++]=\\'0\\'+count%10;\\n    }\\n    int compress(vector<char>& chars) {\\n      int i=0,j=0,count=0,n=chars.size();\\n      while(i<n){\\n          chars[j++]=chars[i];\\n          count=1;\\n          while(i+1<n && chars[i]==chars[i+1]){\\n              i++;\\n              count++;\\n          }\\n          if(count>1){\\n              rec(chars,j,count);\\n          }\\n          i++;\\n      }\\n      return j;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249081,
                "title": "best-c-solution-in-linear-time-and-constant-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Increment i pointer and counter until we reach a different character than previous, keep j pointer to modify input vector.\\n- modify input vector with previous character.\\n- modify input vector with count of the previous character.\\n- convert count to string because in the case where count >= 10 we need to add \\'1\\' and \\'0\\' seperately in the answer.\\n- return j as it will be new length of chars.\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if(n == 1) return 1;\\n\\n        int i = 0, j = 0;\\n\\n        while(i < n){\\n            int count = 1;\\n            while(i < n-1 && chars[i] == chars[i+1]){\\n                count++;\\n                i++;\\n            } \\n            //add character to ans;\\n            chars[j++] = chars[i++];\\n            //add count to ans\\n            if(count > 1){\\n                //case for count > 10\\n                string charCount = to_string(count);\\n                for(auto c : charCount){\\n                    chars[j++] = c;\\n                }\\n            }\\n        }\\n        return j;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if(n == 1) return 1;\\n\\n        int i = 0, j = 0;\\n\\n        while(i < n){\\n            int count = 1;\\n            while(i < n-1 && chars[i] == chars[i+1]){\\n                count++;\\n                i++;\\n            } \\n            //add character to ans;\\n            chars[j++] = chars[i++];\\n            //add count to ans\\n            if(count > 1){\\n                //case for count > 10\\n                string charCount = to_string(count);\\n                for(auto c : charCount){\\n                    chars[j++] = c;\\n                }\\n            }\\n        }\\n        return j;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249004,
                "title": "dart-solution-easy-top-50",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int compress(List<String> chars) {\\n      var prev = chars[0];\\n      var counter = 1;\\n      var index = 1;\\n      while (index < chars.length) {\\n          var char = chars[index];\\n          if (char != prev) {\\n              if (counter > 1) {\\n                  chars.insertAll(index, counter.toString().split(\"\"));\\n                  index += counter.toString().length;\\n              }\\n              index++;\\n              prev = char;\\n              counter = 1;\\n          }\\n          else {\\n              counter += 1;\\n              chars.removeAt(index);\\n          }\\n      }\\n\\n      if (counter > 1) {\\n          chars.insertAll(index, counter.toString().split(\"\"));\\n      }\\n      return chars.length;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int compress(List<String> chars) {\\n      var prev = chars[0];\\n      var counter = 1;\\n      var index = 1;\\n      while (index < chars.length) {\\n          var char = chars[index];\\n          if (char != prev) {\\n              if (counter > 1) {\\n                  chars.insertAll(index, counter.toString().split(\"\"));\\n                  index += counter.toString().length;\\n              }\\n              index++;\\n              prev = char;\\n              counter = 1;\\n          }\\n          else {\\n              counter += 1;\\n              chars.removeAt(index);\\n          }\\n      }\\n\\n      if (counter > 1) {\\n          chars.insertAll(index, counter.toString().split(\"\"));\\n      }\\n      return chars.length;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248996,
                "title": "top-90-fast-easy-to-understand-simple-swift-solution",
                "content": "# Intuition\\ncalculate the count of the same characters and storing the character as well as its count.\\n\\n# Approach\\nstoring the char and the count of the character in a string after the first unmatched character is found. Then replacing the characters in the given character array.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func compress(_ chars: inout [Character]) -> Int {\\n        var currentChar = chars[0]\\n        var count = 0\\n        var compressedString = \"\"\\n        for char in chars {\\n            if char == currentChar {\\n                count += 1\\n            } else {\\n                compressedString.append(currentChar)\\n                if count > 1 {\\n                    compressedString.append(\"\\\\(count)\")\\n                }\\n                count = 1\\n                currentChar = char\\n            }\\n        }\\n        compressedString.append(currentChar)\\n        if count > 1 {\\n            compressedString.append(\"\\\\(count)\")\\n        }\\n        var index = 0\\n        for str in compressedString {\\n            chars[index] = str\\n            index += 1\\n        }\\n    return compressedString.count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func compress(_ chars: inout [Character]) -> Int {\\n        var currentChar = chars[0]\\n        var count = 0\\n        var compressedString = \"\"\\n        for char in chars {\\n            if char == currentChar {\\n                count += 1\\n            } else {\\n                compressedString.append(currentChar)\\n                if count > 1 {\\n                    compressedString.append(\"\\\\(count)\")\\n                }\\n                count = 1\\n                currentChar = char\\n            }\\n        }\\n        compressedString.append(currentChar)\\n        if count > 1 {\\n            compressedString.append(\"\\\\(count)\")\\n        }\\n        var index = 0\\n        for str in compressedString {\\n            chars[index] = str\\n            index += 1\\n        }\\n    return compressedString.count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248872,
                "title": "c-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& a) {\\n        //pahale yaha se lete hai lenght vector ka\\n        int length = a.size();\\n        //agar length 1 ho gya to ese hi return ho jayenge\\n        if(length == 1)\\n            return 1;\\n        //ab age\\n        //result me new vector ka length rhega\\n        int result = 0;\\n        int count = 1; \\n        //ham counting hamesa 1 se karenge\\n            for(int i=0;i<length-1;i++){\\n                //counting badhate jayenge jb tk vector ki value same ho rhi ho\\n                if(a[i] == a[i+1])\\n                    count++;\\n                else{\\n                    // nhi to use value ko nye trike se fedd me upde krenge\\n                    a[result++] = a[i];\\n                    //age counting ek bar hui ho to hm use vactorr me feed nhi krenge\\n                    if(count > 1){\\n                        // age conunting ek se badi ho to use string me convert krenge aur verctor me feed krenge\\n                        string str = to_string(count);\\n                        // age counting tens or hundred me ho to loop v chlega feed krene me\\n                        for(int j=0;j<str.length();j++)\\n                            a[result++] = str[j];     \\n                    }         \\n                    // feed complete hone ke bad hm count ko fir se 1 kr denge      \\n                    count = 1;\\n                }    \\n            }\\n            // ek bar fir vhi process krenge nhi to last vale element ki value nye vector me update nhi hogi\\n            a[result++] = a[length-1];\\n            if(count > 1){\\n                string str = to_string(count);\\n                for(int j=0;j<str.length();j++)\\n                    a[result++] = str[j];     \\n            }   \\n        // hr bar result ko update karne se hmare result me nye vector ka length aa jyaga to use hm return kr denge\\n            return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& a) {\\n        //pahale yaha se lete hai lenght vector ka\\n        int length = a.size();\\n        //agar length 1 ho gya to ese hi return ho jayenge\\n        if(length == 1)\\n            return 1;\\n        //ab age\\n        //result me new vector ka length rhega\\n        int result = 0;\\n        int count = 1; \\n        //ham counting hamesa 1 se karenge\\n            for(int i=0;i<length-1;i++){\\n                //counting badhate jayenge jb tk vector ki value same ho rhi ho\\n                if(a[i] == a[i+1])\\n                    count++;\\n                else{\\n                    // nhi to use value ko nye trike se fedd me upde krenge\\n                    a[result++] = a[i];\\n                    //age counting ek bar hui ho to hm use vactorr me feed nhi krenge\\n                    if(count > 1){\\n                        // age conunting ek se badi ho to use string me convert krenge aur verctor me feed krenge\\n                        string str = to_string(count);\\n                        // age counting tens or hundred me ho to loop v chlega feed krene me\\n                        for(int j=0;j<str.length();j++)\\n                            a[result++] = str[j];     \\n                    }         \\n                    // feed complete hone ke bad hm count ko fir se 1 kr denge      \\n                    count = 1;\\n                }    \\n            }\\n            // ek bar fir vhi process krenge nhi to last vale element ki value nye vector me update nhi hogi\\n            a[result++] = a[length-1];\\n            if(count > 1){\\n                string str = to_string(count);\\n                for(int j=0;j<str.length();j++)\\n                    a[result++] = str[j];     \\n            }   \\n        // hr bar result ko update karne se hmare result me nye vector ka length aa jyaga to use hm return kr denge\\n            return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248433,
                "title": "java-few-lines-beats-99-with-explanation",
                "content": "A simple two pointer approach where \\'Start\\' will hold the compressed element and \\'end\\' will give us after which point inequality is coming so that we can update the count in \\'count\\' variable till that point !\\n\\nNow since these three variables are doing their own jobs, we are meanwhile taking the \\'count\\' into an array so that if count exceeds 9 then we can add them separate into our chars array. i.e. \"12\" to be added as \"1\",\"2\".\\n\\n***Hope this simple solution is helpful to you ! Comment if there is any doubt..***\\n```\\nclass Solution {\\n    public int compress(char[] chars) {        \\n        int start = 0;\\n        for(int end = 0, count = 0; end < chars.length; end++) {\\n            count++;\\n            if(end == chars.length-1 || chars[end] != chars[end + 1] ) {\\n                //We have found a difference or we are at the end of array\\n                chars[start] = chars[end]; // Update the character at start pointer\\n                start++;\\n                if(count != 1) {\\n                    // Copy over the character count to the array\\n                    char[] arr = String.valueOf(count).toCharArray();\\n                    for(int i=0;i<arr.length;i++, start++)\\n                        chars[start] = arr[i];\\n                }\\n                // Reset the counter\\n                 count = 0;\\n            }\\n\\n           \\n        }\\n        return start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {        \\n        int start = 0;\\n        for(int end = 0, count = 0; end < chars.length; end++) {\\n            count++;\\n            if(end == chars.length-1 || chars[end] != chars[end + 1] ) {\\n                //We have found a difference or we are at the end of array\\n                chars[start] = chars[end]; // Update the character at start pointer\\n                start++;\\n                if(count != 1) {\\n                    // Copy over the character count to the array\\n                    char[] arr = String.valueOf(count).toCharArray();\\n                    for(int i=0;i<arr.length;i++, start++)\\n                        chars[start] = arr[i];\\n                }\\n                // Reset the counter\\n                 count = 0;\\n            }\\n\\n           \\n        }\\n        return start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248414,
                "title": "java-easy-to-understand-code",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n\\n- Space complexity:\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int ans=1,count=1,c=1;\\n        for(int i=1;i<chars.length;i++)\\n        if(chars[i]==chars[i-1]) count++;\\n        else{\\n            ans++;\\n            if(count!=1){\\n                String s=Integer.toString(count);\\n                for(int j=0;j<s.length();j++){\\n                    chars[c++]=s.charAt(j);\\n                    ans++;\\n                }\\n            }\\n            chars[c++]=chars[i];\\n            count=1;\\n        }\\n        if(count!=1){\\n            String s=Integer.toString(count);\\n            for(int j=0;j<s.length();j++){\\n                chars[c++]=s.charAt(j);\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int ans=1,count=1,c=1;\\n        for(int i=1;i<chars.length;i++)\\n        if(chars[i]==chars[i-1]) count++;\\n        else{\\n            ans++;\\n            if(count!=1){\\n                String s=Integer.toString(count);\\n                for(int j=0;j<s.length();j++){\\n                    chars[c++]=s.charAt(j);\\n                    ans++;\\n                }\\n            }\\n            chars[c++]=chars[i];\\n            count=1;\\n        }\\n        if(count!=1){\\n            String s=Integer.toString(count);\\n            for(int j=0;j<s.length();j++){\\n                chars[c++]=s.charAt(j);\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248317,
                "title": "beats-98-1ms-o-n-o-1-java-python3-c-c-detailed-explanation-two-pointers",
                "content": "# Intuition\\nThe intuition for solving this problem is to use two pointers, one to iterate through the original array and another to write the compressed characters into a new location in the array. For each consecutive group of repeated characters, we need to count the number of occurrences and write the compressed string into the new array.\\n\\n\\n# Approach\\nThe first step of the algorithm checks if the input array has only one character. If so, the output array is just that character and the method returns 1, the length of the compressed string.\\n\\nOtherwise, the algorithm enters a loop that iterates over the input array. Inside the loop, the algorithm counts the number of consecutive occurrences of the current character `chars[i]` by comparing it with the next character `chars[i+1]`. If they are the same, the count is incremented and `i` is advanced to the next character. This continues until `i` reaches the end of the array or `chars[i]` is different from `chars[i+1]`.\\n\\nOnce the count is known, the current character is written to the output array at position `j` and `j` is advanced. If the count is greater than 1, the algorithm converts the count to a string and writes each digit to the output array at positions `j` through `j+countStr.length()-1`. Finally, `j` is advanced by `countStr.length()`.\\n\\nThe loop continues until `i` reaches the end of the input array. At the end, the algorithm returns the length of the compressed string, which is equal to `j`.\\n\\n# Complexity\\n- Time complexity:  **O(n)**\\nThe time complexity of this algorithm is O(n), where n is the length of the input array `chars`. This is because the algorithm traverses each character of the array once.\\n\\n- Space complexity: **O(1)**\\nThe space complexity of the algorithm is O(1), since it modifies the input array in place and uses a constant amount of additional memory to store the pointers `i` and `j`, the count of consecutive characters, and the string representation of the count (which has length at most log10(n) digits). Therefore, the space used by the algorithm does not depend on the length of the input array.\\n\\n# Java\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        if (n == 1) {\\n            return 1;\\n        }\\n        \\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int count = 1;\\n            while (i < n - 1 && chars[i] == chars[i + 1]) {\\n                count++;\\n                i++;\\n            }\\n            \\n            chars[j++] = chars[i++];\\n            if (count > 1) {\\n                String countStr = String.valueOf(count);\\n                for (int k = 0; k < countStr.length(); k++) {\\n                    chars[j++] = countStr.charAt(k);\\n                }\\n            }\\n        }\\n        \\n        return j;\\n    }\\n}\\n```\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if (n == 1) {\\n            return 1;\\n        }\\n\\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int count = 1;\\n            while (i < n - 1 && chars[i] == chars[i + 1]) {\\n                count++;\\n                i++;\\n            }\\n\\n            chars[j++] = chars[i++];\\n            if (count > 1) {\\n                string countStr = to_string(count);\\n                for (int k = 0; k < countStr.length(); k++) {\\n                    chars[j++] = countStr[k];\\n                }\\n            }\\n        }\\n\\n        return j;\\n    }\\n};\\n\\n```\\n# Python3\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        i, j = 0, 0\\n        while i < n:\\n            count = 1\\n            while i < n - 1 and chars[i] == chars[i + 1]:\\n                count += 1\\n                i += 1\\n            \\n            chars[j] = chars[i]\\n            j += 1\\n            i += 1\\n            \\n            if count > 1:\\n                countStr = str(count)\\n                for k in range(len(countStr)):\\n                    chars[j] = countStr[k]\\n                    j += 1\\n        \\n        return j\\n\\n```\\n# C\\n```\\nint compress(char* chars, int length) {\\n    if (length == 1) {\\n        return 1;\\n    }\\n\\n    int i = 0, j = 0;\\n    while (i < length) {\\n        int count = 1;\\n        while (i < length - 1 && chars[i] == chars[i + 1]) {\\n            count++;\\n            i++;\\n        }\\n\\n        chars[j++] = chars[i++];\\n        if (count > 1) {\\n            char countStr[10];\\n            sprintf(countStr, \"%d\", count);\\n            for (int k = 0; k < strlen(countStr); k++) {\\n                chars[j++] = countStr[k];\\n            }\\n        }\\n    }\\n\\n    return j;\\n}\\n\\n```\\n---\\n\\n# Connect\\nLinkedIn : www.linkedin.com/in/akashjana\\n\\n---\\n#### Please consider upvoting if you find this helpful. Thank You :)",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int n = chars.length;\\n        if (n == 1) {\\n            return 1;\\n        }\\n        \\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int count = 1;\\n            while (i < n - 1 && chars[i] == chars[i + 1]) {\\n                count++;\\n                i++;\\n            }\\n            \\n            chars[j++] = chars[i++];\\n            if (count > 1) {\\n                String countStr = String.valueOf(count);\\n                for (int k = 0; k < countStr.length(); k++) {\\n                    chars[j++] = countStr.charAt(k);\\n                }\\n            }\\n        }\\n        \\n        return j;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        if (n == 1) {\\n            return 1;\\n        }\\n\\n        int i = 0, j = 0;\\n        while (i < n) {\\n            int count = 1;\\n            while (i < n - 1 && chars[i] == chars[i + 1]) {\\n                count++;\\n                i++;\\n            }\\n\\n            chars[j++] = chars[i++];\\n            if (count > 1) {\\n                string countStr = to_string(count);\\n                for (int k = 0; k < countStr.length(); k++) {\\n                    chars[j++] = countStr[k];\\n                }\\n            }\\n        }\\n\\n        return j;\\n    }\\n};\\n\\n```\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        n = len(chars)\\n        if n == 1:\\n            return 1\\n        \\n        i, j = 0, 0\\n        while i < n:\\n            count = 1\\n            while i < n - 1 and chars[i] == chars[i + 1]:\\n                count += 1\\n                i += 1\\n            \\n            chars[j] = chars[i]\\n            j += 1\\n            i += 1\\n            \\n            if count > 1:\\n                countStr = str(count)\\n                for k in range(len(countStr)):\\n                    chars[j] = countStr[k]\\n                    j += 1\\n        \\n        return j\\n\\n```\n```\\nint compress(char* chars, int length) {\\n    if (length == 1) {\\n        return 1;\\n    }\\n\\n    int i = 0, j = 0;\\n    while (i < length) {\\n        int count = 1;\\n        while (i < length - 1 && chars[i] == chars[i + 1]) {\\n            count++;\\n            i++;\\n        }\\n\\n        chars[j++] = chars[i++];\\n        if (count > 1) {\\n            char countStr[10];\\n            sprintf(countStr, \"%d\", count);\\n            for (int k = 0; k < strlen(countStr); k++) {\\n                chars[j++] = countStr[k];\\n            }\\n        }\\n    }\\n\\n    return j;\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3248270,
                "title": "easy-solution-in-java-o-n-space-comp-o-1",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$ \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$ \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i=0,k=0;\\n        while(i<chars.length){\\n            int j=i;\\n            while(j<chars.length && chars[i]==chars[j]){\\n                j++;\\n            }\\n            chars[k]=chars[i];\\n            k++;\\n            if((j-i)>1){\\n                String s = String.valueOf(j-i);\\n                for(int x=0;x<s.length();x++){\\n                    chars[k++]=s.charAt(x);\\n                }\\n            }\\n            i=j;\\n        }\\n        return k;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int compress(char[] chars) {\\n        int i=0,k=0;\\n        while(i<chars.length){\\n            int j=i;\\n            while(j<chars.length && chars[i]==chars[j]){\\n                j++;\\n            }\\n            chars[k]=chars[i];\\n            k++;\\n            if((j-i)>1){\\n                String s = String.valueOf(j-i);\\n                for(int x=0;x<s.length();x++){\\n                    chars[k++]=s.charAt(x);\\n                }\\n            }\\n            i=j;\\n        }\\n        return k;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247919,
                "title": "easy-understanding-simple-solution-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int count = 1;\\n        vector<char>answer;\\n        int n = chars.size();\\n        for(int i = 0; i < n; i++){\\n            if(i + 1 < n && chars[i] == chars[i + 1]){\\n                count++;\\n            }else{\\n                answer.push_back(chars[i]);\\n                string fre = to_string(count);\\n                if(fre != \"1\"){\\n                    for(int i = 0; i < fre.size(); i++){\\n                        answer.push_back(fre[i]);\\n                    }\\n                }\\n                count = 1;\\n            }\\n        }\\n        chars = answer;\\n        return answer.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int count = 1;\\n        vector<char>answer;\\n        int n = chars.size();\\n        for(int i = 0; i < n; i++){\\n            if(i + 1 < n && chars[i] == chars[i + 1]){\\n                count++;\\n            }else{\\n                answer.push_back(chars[i]);\\n                string fre = to_string(count);\\n                if(fre != \"1\"){\\n                    for(int i = 0; i < fre.size(); i++){\\n                        answer.push_back(fre[i]);\\n                    }\\n                }\\n                count = 1;\\n            }\\n        }\\n        chars = answer;\\n        return answer.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247754,
                "title": "c-solution-for-this-code-in-easy-mathod-try-it",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis program is look like frequency based question but their is a twist which make problem which is update a array one also.\\nso first is check the frequency of each element of an array and then i update it.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**I done this problen in six steps**\\n1. First you get a sorted array\\n2. So first you check frequency of element\\n3. Then you reset the element in array\\n4. And check how many time it repeted if it greater then 1 then update the no in array, otherwise no need to update nfrequency no in array\\n5. After every update you have to increse your variable\\n6. When every process done you return that variable\\n# Complexity\\n- Time complexity:\\n- The time complexity of this code is **O(n*log(n))**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- The space complexity of this code is **o(n)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& a) {\\n        //pahale yaha se lete hai lenght vector ka\\n        int length = a.size();\\n        //agar length 1 ho gya to ese hi return ho jayenge\\n        if(length == 1)\\n            return 1;\\n        //ab age\\n        //result me new vector ka length rhega\\n        int result = 0;\\n        int count = 1; \\n        //ham counting hamesa 1 se karenge\\n            for(int i=0;i<length-1;i++){\\n                //counting badhate jayenge jb tk vector ki value same ho rhi ho\\n                if(a[i] == a[i+1])\\n                    count++;\\n                else{\\n                    // nhi to use value ko nye trike se fedd me upde krenge\\n                    a[result++] = a[i];\\n                    //age counting ek bar hui ho to hm use vactorr me feed nhi krenge\\n                    if(count > 1){\\n                        // age conunting ek se badi ho to use string me convert krenge aur verctor me feed krenge\\n                        string str = to_string(count);\\n                        // age counting tens or hundred me ho to loop v chlega feed krene me\\n                        for(int j=0;j<str.length();j++)\\n                            a[result++] = str[j];     \\n                    }         \\n                    // feed complete hone ke bad hm count ko fir se 1 kr denge      \\n                    count = 1;\\n                }    \\n            }\\n            // ek bar fir vhi process krenge nhi to last vale element ki value nye vector me update nhi hogi\\n            a[result++] = a[length-1];\\n            if(count > 1){\\n                string str = to_string(count);\\n                for(int j=0;j<str.length();j++)\\n                    a[result++] = str[j];     \\n            }   \\n        // hr bar result ko update karne se hmare result me nye vector ka length aa jyaga to use hm return kr denge\\n            return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& a) {\\n        //pahale yaha se lete hai lenght vector ka\\n        int length = a.size();\\n        //agar length 1 ho gya to ese hi return ho jayenge\\n        if(length == 1)\\n            return 1;\\n        //ab age\\n        //result me new vector ka length rhega\\n        int result = 0;\\n        int count = 1; \\n        //ham counting hamesa 1 se karenge\\n            for(int i=0;i<length-1;i++){\\n                //counting badhate jayenge jb tk vector ki value same ho rhi ho\\n                if(a[i] == a[i+1])\\n                    count++;\\n                else{\\n                    // nhi to use value ko nye trike se fedd me upde krenge\\n                    a[result++] = a[i];\\n                    //age counting ek bar hui ho to hm use vactorr me feed nhi krenge\\n                    if(count > 1){\\n                        // age conunting ek se badi ho to use string me convert krenge aur verctor me feed krenge\\n                        string str = to_string(count);\\n                        // age counting tens or hundred me ho to loop v chlega feed krene me\\n                        for(int j=0;j<str.length();j++)\\n                            a[result++] = str[j];     \\n                    }         \\n                    // feed complete hone ke bad hm count ko fir se 1 kr denge      \\n                    count = 1;\\n                }    \\n            }\\n            // ek bar fir vhi process krenge nhi to last vale element ki value nye vector me update nhi hogi\\n            a[result++] = a[length-1];\\n            if(count > 1){\\n                string str = to_string(count);\\n                for(int j=0;j<str.length();j++)\\n                    a[result++] = str[j];     \\n            }   \\n        // hr bar result ko update karne se hmare result me nye vector ka length aa jyaga to use hm return kr denge\\n            return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247521,
                "title": "c-easy-solution-beats-92-solutions-for-beginners",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        vector<char> ans;\\n        int count = 1;\\n        for(int i=0; i<chars.size(); i++){\\n            ans.push_back(chars[i]);\\n            while(i<chars.size()-1 && chars[i]==chars[i+1]){\\n                count++;\\n                i++;\\n            }\\n            if(count>1 && count<10){\\n                ans.push_back(count+\\'0\\');\\n            }\\n            if(count>=10){\\n               int b = count;\\n               string temp = to_string(b); \\n               for(int i=0; i<temp.length(); i++){\\n                   ans.push_back(temp[i]);\\n               }\\n            }\\n            count = 1;\\n        }\\n        chars = ans;\\n        return chars.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        vector<char> ans;\\n        int count = 1;\\n        for(int i=0; i<chars.size(); i++){\\n            ans.push_back(chars[i]);\\n            while(i<chars.size()-1 && chars[i]==chars[i+1]){\\n                count++;\\n                i++;\\n            }\\n            if(count>1 && count<10){\\n                ans.push_back(count+\\'0\\');\\n            }\\n            if(count>=10){\\n               int b = count;\\n               string temp = to_string(b); \\n               for(int i=0; i<temp.length(); i++){\\n                   ans.push_back(temp[i]);\\n               }\\n            }\\n            count = 1;\\n        }\\n        chars = ans;\\n        return chars.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247446,
                "title": "linear-time-string-traversal-solution-90-fastest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- We first have to traverse through the given list of characters and store the character and its continuous occurence in a list \\'d\\'.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Then in the list \\'d\\' created, alter the chars array at any index only if the occurance is greater than 1. Count the number of alters we made and return the count.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        d=[]\\n        c=1\\n        for i in range(1,len(chars)):\\n            if chars[i]==chars[i-1]:\\n                c+=1\\n            else:\\n                d.append([chars[i-1],c])\\n                c=1\\n        d.append([chars[-1],c]) \\n        i=0\\n        for k,v in d:\\n            chars[i]=k\\n            i+=1\\n            if v>1:\\n                for item in str(v):\\n                    chars[i]=str(item)\\n                    i+=1\\n        return i\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        d=[]\\n        c=1\\n        for i in range(1,len(chars)):\\n            if chars[i]==chars[i-1]:\\n                c+=1\\n            else:\\n                d.append([chars[i-1],c])\\n                c=1\\n        d.append([chars[-1],c]) \\n        i=0\\n        for k,v in d:\\n            chars[i]=k\\n            i+=1\\n            if v>1:\\n                for item in str(v):\\n                    chars[i]=str(item)\\n                    i+=1\\n        return i\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247256,
                "title": "c",
                "content": "```\\n//Upvote if like\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        int idx = 0;\\n        for(int i = 0; i<n;i++){\\n            int cnt = 1;\\n            char c =chars[i];\\n            while(i+1<n&&chars[i]==chars[i+1]){\\n                c = chars[i]; cnt++; i++;\\n            }\\n            if(cnt==1){\\n                chars[idx++] = c;\\n            }\\n            else{\\n                if(cnt>1){\\n                    chars[idx++] = c;\\n                }\\n                string s = to_string(cnt);\\n                for(auto it : s){\\n                    chars[idx++] = it;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\n//Upvote if like\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int n = chars.size();\\n        int idx = 0;\\n        for(int i = 0; i<n;i++){\\n            int cnt = 1;\\n            char c =chars[i];\\n            while(i+1<n&&chars[i]==chars[i+1]){\\n                c = chars[i]; cnt++; i++;\\n            }\\n            if(cnt==1){\\n                chars[idx++] = c;\\n            }\\n            else{\\n                if(cnt>1){\\n                    chars[idx++] = c;\\n                }\\n                string s = to_string(cnt);\\n                for(auto it : s){\\n                    chars[idx++] = it;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1565151,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1730509,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1572739,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1818915,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1567495,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1573846,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1572507,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1566262,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1707044,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1819114,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1565151,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1730509,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1572739,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1818915,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1567495,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1573846,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1572507,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1566262,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1707044,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1819114,
                "content": [
                    {
                        "username": "lyzh",
                        "content": "These examples are bad!!"
                    },
                    {
                        "username": "johncbogil",
                        "content": "The description contradicts itself. \\n\\nIt first states:\\n`Begin with an empty string s` and `append the character to s.`\\n\\nThen it states:\\n`You must write an algorithm that uses only constant extra space.`\\n"
                    },
                    {
                        "username": "enkr1",
                        "content": "[@MohanadOO](/MohanadOO) same here ...\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@aritt](/aritt) You dont even really need an outside temp str anyhow, and just start immediately overwriting the input. It is guarantied that a pointer reading the input will advance at least as fast if not faster than the overwriting pointer "
                    },
                    {
                        "username": "aritt",
                        "content": "I don't think this is necessarily a contradiction, although I read it like that initially as well. The string s can be zeroed out every time you hit a new character - you don't ever need to store more than 5 characters in it (i.e., the current character and the number of times it has occurred, which is known to be < 2000). Once you've reached a new character, you modify the chars array in place with this information, and then you're free to re-use the string s - it never grows to be larger than 5 bytes. "
                    },
                    {
                        "username": "lostinth1cho",
                        "content": "[@MohanadOO](/MohanadOO) \\nYou should edit the vector<char> they give you and just return the size of the size of vector after you edit.\\nhope this helps :)"
                    },
                    {
                        "username": "MohanadOO",
                        "content": "Also in TypeScript default code the function return is `number` but the answer is suppose to be of type `string[]` \\uD83D\\uDE16\\n\\nI solved the question depending on this because I didn\\'t know what exactly they want me to return \\uD83E\\uDD72\\n"
                    },
                    {
                        "username": "Stocke777",
                        "content": "atleast  explain how and in what form am i supposed to give answer.\\nI am a beginner and couldnt figure out why it was giving a list in output when i was returning an integer"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "xeniawann",
                        "content": "You should still return an integer, but the input `chars` should also be modified in-place. \n\nI played with the test case a bit, and just returning an array of chars gives an error. The test case actually takes 2 things, the returned `length` and the original`chars`, and prints `chars[:length]` to show you the outputs."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "actually it question is like ,give answer of expected size and chars remain as it is same without erasing remaining element .either you are forming new vector or you are updating remaining element example: size of chars is 9 and expected (ans) size is 6 .so you are updating chars with size 6 this is wrong.  ans should be like first 6 element of chars is same as updating list as per condition given in question and remaining 3 elements remain same as input"
                    },
                    {
                        "username": "java_run",
                        "content": "Dont worry !\\nThey are expected us to return the length of the modified char array , so modify the char array and then return it\\'s length."
                    },
                    {
                        "username": "BenjaminRauch",
                        "content": "Well this is just stupid. Usually these problems at least have some concept of a practical application but this can never be uncompressed. As digits are part of the allowed input it becomes impossible to tell what the source was. `[\"1\", \"2\", \"2\"]` could arrive from the input `[\"1\", \"1\", \"2\"]` or `[\"1\", \"2\", \"2\"]`.\\n\\nExcept actually trying `[\"1\", \"1\", \"2\"]` yields `[\"1\",\"2\",\"2\",\"\"]` as a result."
                    },
                    {
                        "username": "rawwar",
                        "content": "[@stick109](/stick109)  UDP is also a compression algorithm.. IYKWIM"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Yep. Does \"a222c\" decompress to \"aa22c\" or two hundred and twenty two \"a\" followed by a \"c\"? Pretty bad compression algo... "
                    },
                    {
                        "username": "stick109",
                        "content": "Not every compression is lossless :)"
                    },
                    {
                        "username": "ddyachkova",
                        "content": "The in-place requirement makes it a medium to hard question."
                    },
                    {
                        "username": "asmithey",
                        "content": "I disagree. The in-place isn\\'t that difficult when chars.insert(index, val) can be used (with c++)."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "not so much difficult as just frustrating. "
                    },
                    {
                        "username": "woshiyuanlei",
                        "content": "![image](https://assets.leetcode.com/users/woshiyuanlei/image_1591009941.png)\\n"
                    },
                    {
                        "username": "avi190824",
                        "content": "int compress(vector<char>& chars) {\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       string s=\"\";\\n       \\n       int n=chars.size();\\n       for(int i=0;i<n;i++){\\n           char x=chars[i];\\n           s+=x;\\n          int count=1;\\n           while(i<n && x==chars[i+1]){\\n               count++;\\n               i++;\\n               if(i==n-1) break;\\n           }\\n           if(count>1){\\n               s+=to_string(count);\\n           }\\n       }\\n       chars.clear();\\n       for(int i=0;i<s.size();i++){\\n           chars.push_back(s[i]);\\n       }\\n       return chars.size();\\n       } \\nthis solution passes your testcase check with it"
                    },
                    {
                        "username": "gearora",
                        "content": "Its not a bad test case. The questions states to return the answer in the original array, so your output is length 3 and original was length 4, so the extra characters were replaced by \" \" to just contain the result. "
                    },
                    {
                        "username": "test_playground",
                        "content": "[@PAIN_an_c](/PAIN_an_c) It was just bad testcase. Now it has been fixed."
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "did you find why this happen"
                    },
                    {
                        "username": "edwardsun6666",
                        "content": "Not trying to offend the person who originally created this algo problem, but I found the part \\n\"Since the character \"a\" does not repeat, it is not compressed. \"bbbbbbbbbbbb\" is replaced by \"b12\".  \"12\" need to be two digit separately not one\" .  I found that part simply bizzar and stupid somehow,  why we cannot have \"12\" as one string and that shorten the entire input string length even more."
                    },
                    {
                        "username": "shfaizan",
                        "content": "thanks for explaining the first part edward it was very unclear in the question description."
                    },
                    {
                        "username": "denispasha95",
                        "content": "cuz we have to return the char array , and we cant insert 12 as a single char\\nBut yes the description of the task is not good enough"
                    },
                    {
                        "username": "namandt",
                        "content": "just to make the question absurd!"
                    },
                    {
                        "username": "rainhacker",
                        "content": "My code is failing this test. Why is the expected array length less than the input. It can't be reduced as this is done in place and modified array isn't returned.\\n\\nInput:\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\nOutput:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]\\n\\nExpected:\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "bro if you are returning actual size of chars which is more than expected size = 6, answer is return size = 6. i think you did as \" return chars.size(). you have to make one more integer which gives expected size. question is actually like this , give size where condition match and rest remain as it is same as we are not using extra space and dont erase remaining elements."
                    },
                    {
                        "username": "java_run",
                        "content": "iterate through the chars comparing them with stack\\'s peek char -> if we fail this cold , get that peek element and then stack\\'s size , and now use stack.clear() to avoid this.\\nHope this helps ,\\nRegards "
                    },
                    {
                        "username": "Rachit_Mittal",
                        "content": "You can use the Resize function of the vector to reduce the size of array. One thing you\\'ll notice that expected length would always be smaller than input hence you just need to trim it,\\n"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Probably should be marked easy. Reading the instructions carefully and paying attention to them is a key skill."
                    },
                    {
                        "username": "cjmugs1",
                        "content": "The chad programmor proves again that the practice question was just too easy for him"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "yep ...implementation ain\\'t that tough "
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Is there Anyone who have passed this test case:-\\n\\nInput\\nchars =\\n[\"1\",\"1\",\"2\"]\\n\\nOutput\\n[\"1\",\"2\",\"2\"]\\nExpected\\n[\"1\",\"2\",\"2\",\"\"]"
                    },
                    {
                        "username": "ketansarna",
                        "content": "This is definitely a bug , my solution passed all test cases and then I tried this in custom test cases and it failed , well that means they removed this test case but the bug is still there"
                    },
                    {
                        "username": "harsh1226",
                        "content": "empty char should not be there ... may be this is a bug ...\nTheir editorial solution is not giving that extra char .."
                    },
                    {
                        "username": "madpoly",
                        "content": "what is the empty char? Is this a bug?"
                    }
                ]
            },
            {
                "id": 1819504,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1818946,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1818926,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1875752,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1819332,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1572438,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1820232,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1819446,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1819048,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1569366,
                "content": [
                    {
                        "username": "zwang198",
                        "content": "The morning is destroyed by this bad problem description."
                    },
                    {
                        "username": "XOFJO",
                        "content": "poorly explained"
                    },
                    {
                        "username": "Squidster777",
                        "content": "Anybody know why it\\'s showing chars differently in output than it is in print?\\n\\nI print out chars to STDOUT and it\\'s the correct answer, but I return the length of chars and the output is wrong\\n\\n \\n```\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        left = 0\\n        while left < len(chars):\\n            c = chars[left]\\n            right = left\\n            while right < len(chars) and chars[right] == c:\\n                right += 1\\n            diff = right - left\\n            if diff > 0:\\n                chars = chars[:left + 1] + str(diff).split() + chars[right:]\\n                left += len([d for d in str(diff)]) + 1\\n            else:\\n                chars = chars[:left + 1] + chars[right:]\\n                left += 1\\n        print(chars)\\n        return len(chars)\\n```\\n\\n\\nInput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\n\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n\\nStdout\\n`[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\n\\n\\nI don\\'t know why it\\'s only single quotes or why there\\'s spacing between each element."
                    },
                    {
                        "username": "Arjuna99",
                        "content": "Guys the author does not want us to store the result in chars input variable itself. He does not want us to return a different variable. \\nExample: If the input chars is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\"]. The result is a2b2c5. Result length = 5. The result has to be stored in the first 5 characters within the chars input variable and return only those 5 characters in chars like chars[:5].\\n\\nOne way is that if your final answer is in variable final_string. You can run a for loop to insert all the characters in chars variable and return chars variable upto that length.\\n\\nfor i in range(len(final_string)):\\n    chars[i] = list(final_string)[i]\\nreturn len(chars[:len(final_string)])\\n\\nThis solves the problem.\\n"
                    },
                    {
                        "username": "DragonGhost",
                        "content": "[@nichonifroa](/nichonifroa) In Python I return len(result) (my stdout [\"a\", \"2\", \"b\", \"2\", \"c\", \"3\"]). But It don\\'t enough. I also added to code:\\nfor i in range(len(result)):\\n            chars[i] = result[i]\\n\\nI don\\'t know why this work, but it\\'s solve this problem."
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "i found what's wrong with it after 1 hours lost for no reason:\nlet's say this is the given array:\n--> [a, a, b, b, c, c, c]\ncompressing it into a string would make it like this:\n--> \"a2b2c3\"\n...you would think that you should modify the given array into this:\n--> [a, 2, b, 2, c, 3]\nbut no, apparently you should merge the \"string.toCharArray\" with the given array \"chars\" which would give you this:\n--> [a, 2, b, 2, c, 3, c]\nand if you would complain, the problem creator would probably tell you that he gave you a hint between the lines in the first example when he said:\n\"and the first 6 characters of the input array should be\"...\n...but you still would win the argument because that's not the problem creator's main fail:\nthe main fail is he didn't tell you that you should return the length of the \"string.toCharArray\" not the length of the modified given array \"chars\" !\n...in other words:\nyou should return this array:\n--> [a, 2, b, 2, c, 3, c]\nbut return the length of this array:\n--> [a, 2, b, 2, c, 3] (which has the same length as the string)\n...frustrating !"
                    },
                    {
                        "username": "Tunisian_Sufet",
                        "content": "same here"
                    },
                    {
                        "username": "nichonifroa",
                        "content": "Same here (for the same example, too). When I `print(chars)`, I have the expected result. But the output the code receives is wrong.\nHas anyone managed to solve this?"
                    },
                    {
                        "username": "kokolen77",
                        "content": "try to change string in chars, not assing array to chars\\n\\ntry to run chars[0] = \"1\", output should be noraml"
                    },
                    {
                        "username": "miyenChen",
                        "content": "I have the same situation."
                    },
                    {
                        "username": "jolswlf",
                        "content": "something very similar is happening to me"
                    },
                    {
                        "username": "AlcalinoGitHub",
                        "content": "can somebody explain what the heck am I supposed to return"
                    },
                    {
                        "username": "Housni01",
                        "content": "I am confused as well, this is very stupid problem description"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "bro u need return compressed length of string in in format but before that u should change chars arrays indexes with string characters so that compiler will anlayse your char array up to that length which you privided. for example  if chars = {\\'a\\',\\'a\\',\\'b\\',\\'c\\',\\'c\\', \\'c\\'}  then compressed from string will be  \"a2bc3\"  now you have to change indexes of chars upto string length with string chars so new chars array = {\\'a\\',\\'2\\',\\'b\\',\\'c\\', \\'3\\',c} in that we changed chars array character with string array and string length is 5 so we return 5 then compiler will check up to 5 length of chars array. 6th index of chars remain as it is because our compressed string is only 5 in length. hope this helps.\\n"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "like to dislike ratio for this question makes sense"
                    },
                    {
                        "username": "jiani3",
                        "content": "I am trying to use counter from collections library but it seems does not work. Can anyone explain to me why this code can\\'t be run?\\n\\n"
                    },
                    {
                        "username": "hboGYT",
                        "content": "I don\\'t understand. What does \"extra space\" mean in this context? Is it the same as auxiliary space?"
                    },
                    {
                        "username": "me190003061",
                        "content": "CW: Code ahead for discussion of possible bug.\\n\\n<a href=\"https://ibb.co/jgjJSCH\"><img src=\"https://i.ibb.co/4P01HbJ/Capture.png\" alt=\"Capture\" border=\"0\"></a>\\n\\nHi, I am getting some unexpected results with my code. I have debugged using print statements, and it seems like the judge is somehow ignoring one of the characters for one of my testcases. Please let me know if you have any inputs about the same.\\n\\nI have attached the troublesome testcase at the top.\\n\\n ```int compress(vector<char>& chars) {\\n        int finalSize = chars.size();\\n        int i = 1;\\n        while(i < chars.size()){\\n            //cout<<\"i \"<<i<<\" size \"<<chars.size()<<endl;\\n            int rep = 0;\\n            while(i<chars.size() && (chars[i] == chars[i-1])){\\n                chars.erase(chars.begin()+i); \\n                rep++;\\n            }\\n            if(rep){\\n                string str = to_string(rep+1);\\n                for(char x: str){\\n                    chars.insert(chars.begin()+i++, x);\\n                }\\n                finalSize -= (rep-1);\\n            } \\n            i++;\\n        }\\n        for(char x : chars) cout<<x<<\" \";\\n        cout<<endl;\\n        return finalSize;\\n    }```\\n"
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "The input `chars` should not include digits, or some escape logic should be used to avoid ambiguity of the result value.\neg. The input can be [\"a\", \"2\"] when output is [\"a\", \"2\"]."
                    },
                    {
                        "username": "cindy0092",
                        "content": "Hi all,\\nI was in the middle of my coding and found out that the compiler output does not return the actual value is supposed to be. See the image below. (ignore my algorithm part...it is not a solution LOL)\\nI talked to the customer service team, but they were not able to help out. Wonder if anyone can explain what happen.\\n![image](https://assets.leetcode.com/users/cindy0092/image_1544152433.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "this is happening because expected chars is wrong in your code as they are also seeing input chars and length of expected chars"
                    }
                ]
            },
            {
                "id": 1948629,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 1573310,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 2045895,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 2033105,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 2011356,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 1975853,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 1946484,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 1820280,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 1819735,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 1819385,
                "content": [
                    {
                        "username": "palaciosj",
                        "content": "This is the first time that this happened to me; i\\'m literally copy and pasting the code on vscode and getting a different answer between vscode  (the correct one) and leetcode. Basically leetcode is telling me that where i append the numbers into the list, i append characters, ex:\\n\\nWith chars as [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nLeetcode said that my output is [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nBut vscode said that my ouput is [\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\'], the expected one in leetcode.\\n\\nThere is some reason that i don\\'t know for this to happened?\\n"
                    },
                    {
                        "username": "psionl0",
                        "content": "Leetcode passes an array of characters instead of a string. Assuming that the array is actually a string can lead to problems. In my case, I was getting segmentation faults because I was trying to terminate the \"string\" with an ASCII NULL;"
                    },
                    {
                        "username": "palaciosj",
                        "content": "[@KrzysztofRozbicki](/KrzysztofRozbicki) Yeah i got that! I\\'m always working on the same list, that\\'s why i\\'m confused"
                    },
                    {
                        "username": "KrzysztofRozbicki",
                        "content": "the trick part is that you don`t want to return a new value , you have to change your argument = (chars)  in order to get a leetcode to accept your solution. Why? i have no idea."
                    },
                    {
                        "username": "chantech",
                        "content": "In testcase we are inputting in string format but the question requires us to input in character format.So its failing for testcases.In local we are being able to get the output count.\\nPlease change the testcase so that it takes character input.\\n"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "Bro whoever set this problem needed to be beaten in public "
                    },
                    {
                        "username": "user8793dW",
                        "content": "The platform outputs the result of my function as an empty array [ ]. Though it\\'s not empty before return."
                    },
                    {
                        "username": "Transgression",
                        "content": "For clarification, you need change the chars array, then return the length of the \"new\" char[]. The testcase will then look at the first x elements of the chars array, where x denotes the return value."
                    },
                    {
                        "username": "bleomartinez",
                        "content": "such a dumb question"
                    },
                    {
                        "username": "acevedo0803",
                        "content": "This code works in VS code but not here, it can return the expected length and the correct sequence. \\nCan someone tell me what I should return?\\nI am returning the compressed chars array length.\\n\\nInput\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\n`class Solution:\\n    def compress(self, chars: list[str]) -> int:\\n\\n        result = []\\n        counts = 1\\n\\n        for i in range(len(chars) - 1):\\n            if chars[i] == chars[i+1]:\\n                counts += 1\\n            else:\\n                if counts == 1:\\n                    result.append(chars[i])\\n                else:\\n                    result.append(chars[i])\\n                    result.extend(list(str(counts)))\\n                    counts = 1\\n\\n        if counts == 1:\\n            result.append(chars[-1])\\n        else:\\n            result.append(chars[-1])\\n            result.extend(list(str(counts)))\\n\\n        chars = result\\n\\n        return len(chars)`"
                    },
                    {
                        "username": "space_invader",
                        "content": "You can use a stack for grouping the same characters."
                    },
                    {
                        "username": "jolswlf",
                        "content": "I think that would break the constant extra space rule "
                    },
                    {
                        "username": "bhaskar123u",
                        "content": "chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nchars after compression = [\"a\",\"b\",\"1\",\"2\",\"c\",\"3\",\"d\",\"2\",\"e\",\"f\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\",\"e\",\"f\"];\\n\\nwe should return = 10"
                    },
                    {
                        "username": "solairerove",
                        "content": "thanks for problem. i like it. this is only problem i solved myself so far.\\n"
                    }
                ]
            },
            {
                "id": 1819009,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 1732636,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 1660015,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 1572352,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 1571706,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 2076007,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 2072374,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 2071475,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 2070996,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 2067630,
                "content": [
                    {
                        "username": "sasukesharma",
                        "content": "ohhh.. thought i lost this section, but here u r 🙄"
                    },
                    {
                        "username": "divyam_04",
                        "content": "guys can anyone justify me why this code is showing me runtime error for 2 specific input ie [\"a\",\"a\"] and [\"a\",\"a\",\"b\",\"b\"]. All other inputs are working but these 2 are not able to get processed.\\n\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        int cnt=1;\\n        string s=\"\";\\n        if(chars.size()==1){\\n            return 1;\\n        }\\n       \\n        else\\n        {\\n            for (int i=0;i<chars.size();++i)\\n            {\\n                if(chars[i]==chars[i+1])\\n                {\\n                    cnt++;\\n                }\\n                else \\n                {\\n                    if(cnt>1)\\n                    {\\n                        s.push_back(chars[i]);\\n                        s.append(to_string(cnt));\\n                        cnt=1;\\n                    }\\n                    else\\n                    {\\n                        s.push_back(chars[i]);\\n                        cnt=1;\\n                    }\\n                }\\n            }\\n        }\\n        //chars.erase(chars.begin(),chars.end());\\n        int i=0;\\n        while(s[i]!=\\'\\\\0\\'){\\n           // chars.push_back(s[i]);\\n            chars[i]=s[i];\\n            ++i;\\n        }\\n        int a=s.size();\\n        //cout<<chars.size()<<\".\"<<s.size();\\n        return a;\\n    }\\n};"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "line 2 chars[i+1] will exceed size of chars length at index i= char.size()-1;"
                    },
                    {
                        "username": "cerealkiller5005",
                        "content": "Sorry if this is a noob question, but wouldn\\'t converting a number to a string violate the constant extra space requirement?\\n\\nI.e., for JS, count.toString() could be \\'1\\', or it could be \\'10\\' , which take up more space than \\'1\\'?"
                    },
                    {
                        "username": "CodingGeek123",
                        "content": "When I run the below mentioned test case with the help of custom test case box, I get the correct answer:\\nTest Case 63: [\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]\\nMy answer before submission: [\"a\",\"b\",\"c\",\"6\"] (Figure attached for reference)\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911742.png)\\n\\nCan anyone kindly tell me what\\'s going wrong here?\\n\\n\\nMy answer upon submission is wrong as shown in the attached screenshot.\\n![image](https://assets.leetcode.com/users/codinggeek123/image_1545911679.png)\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "can you give your code"
                    },
                    {
                        "username": "Misaka_Merengues",
                        "content": "I use python3 to solve the problem. The description says that the return type is int. When I run my code with test input [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"],  it says the expected answer is [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. That's not an integer.\\nIf I changed my code to return List[str], it says TypeError!\\nWho can tell me what's wrong?"
                    },
                    {
                        "username": "the-iter8",
                        "content": "[@rekudaasnin](/rekudaasnin) I think the question is totally absurd. We actually have to return a number x, that will tell us that the right answer, is the top \"x\" digits in the original array that was thrown in input. We basically need to manipulate the original array as well. So the compiler will check, the input array."
                    },
                    {
                        "username": "cswartzell",
                        "content": "[@rekudaasnin](/rekudaasnin) The problem states \"After you are done modifying the input array, return the new length of the array.\". There is a difference between \"expected answer\" and \"returned data\". The driver code is expecting the len of the modified section of the input. You are to modify it in place. This ASSUMES the string is passed by reference (and I think this is true in most languages, but I\\'m mot positive this is always true). You then overwrite the compressed version directly into the input. The driver code then takes the returned int, the number of chars in our compressed section, and chops the original string to derive the answer. You do not provide the chopped string, that is done elsewhere. \\n\\nIts somewhat confusing, but entirely reasonable for a question. "
                    },
                    {
                        "username": "rekudaasnin",
                        "content": "This comment is 6 years old, have you found what the problem was?"
                    },
                    {
                        "username": "skp10092001",
                        "content": "All test case passed in one pass without any help. "
                    },
                    {
                        "username": "emmettramm",
                        "content": "Helped me to think about having one pointer (or counter) to keep track of where I needed to place (write) the next char whether that char was the label char (a, b, c...) or the number of chars seen. That pointer can then be used as the number of chars needed and you can just resize the vector to that pointer. Also need a pointer to keep track of what you are looking at in the overall list and a pointer to keep track of the current char being matched."
                    },
                    {
                        "username": "AdrianTheHactus",
                        "content": "Does anyone know why I send my return body as `return len(result)` but case 1 is failing with this error?\\n\\n\\n**Input**\\nchars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\n\\n**Stdout**\\nresult: [\\'a\\', 2, \\'b\\', 2, \\'c\\', 3]\\n\\n**Output**\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\n\\n**Expected**\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "s3stan",
                        "content": "[@Adrian Darian](/AdrianTheHactus)\\n`You must write an algorithm that uses only constant extra space.`\\nThat\\'s the whole point. The problem must be solved without using additional memory.\\nAnd return the result: `return chars.length;`"
                    },
                    {
                        "username": "dianenguyentype",
                        "content": "I was failing the test cases so I printed the `chars` array before returning. I can see it has been modified to the expected output `[ \\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\' ]` and the length is therefore 6. But somehow despite returning length in the output I see `[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`. not sure where this is coming from?? what is the output showing us? isn\\'t it supposed to be the current value of `chars`?"
                    },
                    {
                        "username": "biaoge",
                        "content": "Not sure why this more dislikes than likes problem is selected as Leet Code 75"
                    }
                ]
            },
            {
                "id": 2067101,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2060549,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2058741,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2058730,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2053035,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2052668,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2052457,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2052099,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2052095,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2050770,
                "content": [
                    {
                        "username": "bkmksync",
                        "content": "\\'Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\'\\nwhat does this mean?"
                    },
                    {
                        "username": "s3stan",
                        "content": "This means that for an array where the character \\'f\\' appears 13 times,\\nit will be replaced by two separate characters \\'1\\' and \\'3\\'\\n\\n`chars = [\"o\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"d \", \"d\", \"d\", \"d\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"o\", \"a\", \"a\",]`\\n\\n`output = \\'o\\', \\'a\\', \\'2\\', \\'b\\', \\'3\\', \\'c\\', \\'4\\', \\'d\\', \\'5\\', \\'f\\'. \\'1\\', \\'3\\', \\'o\\', \\'a\\', \\'2\\'`"
                    },
                    {
                        "username": "user7768oZ",
                        "content": "Would be nice to have a specification of the symbol as well, what kind of encoding etc."
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "I am pretty sure my code should work and the test fails!!!\\n/**\\n * @param {character[]} chars\\n * @return {number}\\n */\\nvar compress = function(chars) {\\n    let hashMap = new Map();\\n    for (let i = 0; i < chars.length; i++) {\\n        let current = chars[i];\\n        if (hashMap.get(current) === undefined) {\\n            hashMap.set(current, 1);\\n        } else {\\n            hashMap.set(current, hashMap.get(current) + 1);\\n        }\\n    }\\n    let result = 0;\\n    for (let [key, value] of hashMap) {\\n        if (value === 1) result += 1;\\n        else result += 1 + String(value).length;\\n    };\\n    return result;\\n};"
                    },
                    {
                        "username": "CodeMaster1101",
                        "content": "Why is the return type not a number when it clearly asks for a number!!!!"
                    },
                    {
                        "username": "angeltrev",
                        "content": "Not sure if this is correct, but from other solutions it seems that the return output is to print those first n elements of the array, so some solutions I saw just change the array with the corresponding results, but did not actually modify the array such as they remove permutations if necessary, for example in the test case:\\n\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\\n\\nYou could have your array like this `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\",\"c\"]` and would be correct only if you return the correct size which is `6`\\n\\nI think this wasn\\u2019t clear but I was wasting a lot of time trying to remove those duplicates. Just commenting this if anyone else found this confusing "
                    },
                    {
                        "username": "donghwipark",
                        "content": "I am not cleared about return type. I am returing length but output and expected looks like array. Any comment?\nOutput\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\nExpected\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "TheAntiFlash",
                        "content": "this is not possible in kotlin because parameters are immutable. "
                    },
                    {
                        "username": "jaximus808",
                        "content": "Okay clowns, you are returning the size of the new input array and modifying the input array. There are a bunch of real world programs like this. The problem is checking the input array after the function is run. "
                    },
                    {
                        "username": "ludgrob1",
                        "content": "This is a terrible problem. Why are we returning what should be \"B\", \"12\" or  \"B12\" as \"B\", \"1\", \"2\"? "
                    },
                    {
                        "username": "jaximus808",
                        "content": "This problem isn\\'t that weird guys "
                    }
                ]
            },
            {
                "id": 2047227,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2045982,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2044702,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2033744,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2028794,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2023190,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2018435,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2017207,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2004417,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2004272,
                "content": [
                    {
                        "username": "sahya",
                        "content": "why does my output show this?\\n[\"a\",\"a\",\"b\",\"b\"] where another online compiler gives correct output.\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@tridibghosh_11](/tridibghosh_11)  u r making a new string try to add and make the changes in the char[] itself"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nclass Solution {\\n    public int compress(char[] chars) {\\n\\n        if(chars.length==1)\\n        {\\n            return 1;\\n        }\\n        String s=\"\";\\n        Arrays.sort(chars);\\n        char a=chars[0];\\n        int count=1,i=1;\\n        for( i=1;i<chars.length;i++)\\n        {\\n            if(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\n            \\n        }\\n        s=s+Character.toString(chars[i-1]);\\n        s=s+Integer.toString(count);\\n        return s.length();\\n    }\\n}"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "[@sahya](/sahya) send me the full code"
                    },
                    {
                        "username": "sahya",
                        "content": "[@tridibghosh_11](/tridibghosh_11) \\nif(chars[i]==a)\\n            {\\n                count++;\\n            }\\n            else\\n            {  \\n                String k=Character.toString(chars[i-1]);\\n                s=s+k;\\n                if(count==1)\\n                {\\n                    String b=Integer.toString(count);\\n                    s=s+b;\\n                }\\n                count=1;\\n                a=chars[i];\\n            }\\nthis part of code is inside a for loop"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "Send the code"
                    },
                    {
                        "username": "raghavjuneja",
                        "content": "i made the string but how i can get that string to that vector.it is too confusing"
                    },
                    {
                        "username": "tridibghosh_11",
                        "content": "\\nnot working on leetcode\\npackage Dsa;\\n\\nimport java.util.Arrays;\\n\\npublic class StringComprehension {\\n    public static void main(String[] args) {\\n        char[] s={\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'};\\n        System.out.println(newStr(s));\\n\\n    }\\n    static char[] newStr(char[] chars){\\n        String newStr=\"\";\\n//        StringBuilder chars=new StringBuilder();\\n//        for (int i = 0; i < chars.length; i++) {\\n//            chars.append(chars[i]);\\n//        }\\n        for (int i = 0; i < chars.length; i++) {\\n            Integer count=1;\\n            while (i<chars.length-1 && chars[i]==chars[i+1] ){\\n                count++;\\n                i++;\\n            }\\n            newStr+=chars[i];\\n            if(count>1){\\n                newStr+=count.toString();\\n            }\\n        }\\n//        Arrays.fill(chars,\\'\\\\0\\');\\n        chars=new char[newStr.length()];\\n//        char[] ch=new char[newStr.length()];\\n        for (int i = 0; i < chars.length; i++) {\\n            chars[i]=newStr.charAt(i);\\n        }\\n        return chars;\\n    }\\n}\\n"
                    },
                    {
                        "username": "Gaurav_kumar4460",
                        "content": "First I thought , given is string of strings.\\nThen i realised , it is given that is  array of characters.\\nFirst push the character encountered, then \\nIt is simple to insert the number by converting it to string then pushing the whole new string to chars.\\n\\n"
                    },
                    {
                        "username": "furquan95",
                        "content": " `var compress = function(chars) {\\n    let s = \\'\\';\\n    let n = chars[0];\\n    let counter = 1;\\n    for(let i=1;i<chars.length;i++){\\n        if(chars[i] === n){\\n            counter++;\\n        }else{\\n            s+= chars[i-1]\\n            if(counter > 1){\\n                s+= counter;\\n            }\\n            counter = 1;\\n            n = chars[i];\\n        }\\n    }\\n    s+= chars[chars.length - 1]\\n    if(counter > 1){\\n        s += counter;\\n    }\\n    chars = s.split(\\'\\')\\n    return chars.length\\n};`\\n\\ni don\\'t get it, what am i doing wrong here, someone please help"
                    },
                    {
                        "username": "TatianaTt",
                        "content": "what\\'s wrong with my solution?    \\n\\ndef compress(self, chars):\\n        p1 = 0\\n        p2 = 1 \\n        count = 1\\n        if len(chars) < 1:\\n            return p1+1\\n\\n        while p2 < len(chars):\\n            if chars[p1] ==chars[p2]:\\n                count +=1\\n                if count >=10:\\n                    p1 +=1\\n                p2 +=1\\n            else:\\n                p1 +=1\\n                p2 +=1\\n        \\n        return p1 +2"
                    },
                    {
                        "username": "misha1350",
                        "content": "Here are some more examples that can help you create a proper solution with all edge-cases accounted:\n`[\"a\",\"b\",\"c\"]`\n`[\"a\",\"b\",\"c\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"g\",\"a\",\"b\",\"c\"]`\nThink about how you would implement them, especially the second one."
                    },
                    {
                        "username": "mayank_82",
                        "content": "can be solved by the approach used in  group  making while solving problem \\nproblem no - 696  Count Binary Substrings"
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "chars=[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nuniq=\\'\\'\\nres=[]\\nfor i in chars:\\n    if i not in uniq:\\n        uniq+=i\\n        if chars.count(i)>1:\\n            res.append(i)\\n            res.append(str(chars.count(i)))\\n        else:\\n            res.append(i)\\nout=[i for i in (\"\".join(res))]\\nreturn (out)\\n any one please clear me why iam getting this output [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] in this compiler , but iam getting correct output [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] in my VS code"
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Read the Problem don\\'t use extra space"
                    },
                    {
                        "username": "mwgolden",
                        "content": "This was frustrating at first, because I figured, why modify the character array in place when we can just return the length of the string? Well, the length returned is used to check the subarray with the modified array elements."
                    },
                    {
                        "username": "hemanthmale03",
                        "content": "so we have to modify the chars array and also returned the length of  a new array "
                    }
                ]
            },
            {
                "id": 2004173,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 2003300,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1997546,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1996195,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1988752,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1987391,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1985460,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1985368,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1972445,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1968513,
                "content": [
                    {
                        "username": "omard1aa",
                        "content": "what should I do to change chars values?\\nthey never change, please help I\\'m stuck for more than two days"
                    },
                    {
                        "username": "JesseHerring",
                        "content": "\"Append the characters to an empty string s\"\\n\"You must use constant extra space\"\\n\\nnot sure what universe the author of this problem lives in but in reality, there is no collection structure to represent a string that uses O(1) space. \\n\\nquality control issue. do better pls :("
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "What output is it expecting , so unclear .."
                    },
                    {
                        "username": "alb02",
                        "content": "Can anyone tell me why my codes not working? Other than it maybe not being the best implementation, i dont get why its not passing test cases:\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        char_count_library = {}\\n        output =[]\\n        for c in chars:\\n            if c not in char_count_library:\\n                char_count_library[c] = 1\\n            else:\\n                char_count_library[c] += 1\\n        \\n        list_chars = list(char_count_library.keys())\\n        list_counts = list(char_count_library.values())\\n        t_list = list(zip(list_chars,list_counts))\\n\\n        for tup in t_list:\\n            output.append(tup[0])\\n            output.append(str(tup[1]))\\n        return len(output)\\n        "
                    },
                    {
                        "username": "Frustatedleet",
                        "content": "Modify the original array instead of taking extra list and append to it.."
                    },
                    {
                        "username": "LuluCodes89",
                        "content": "I\\'m printing out chars at the end of my code. It\\'s value is valid but on the output section it says that I never modified it. Is anyone else having this issue?"
                    },
                    {
                        "username": "weraponpat",
                        "content": "this should be easy level tbh"
                    },
                    {
                        "username": "ibucool4",
                        "content": " `var compress = function(chars) {\\n  var compressed = \\'\\'; \\nvar count = 1;\\n\\nfor (var i = 0; i < chars.length; i++) { \\n    if (chars[i] == chars[i+1]) {\\n        count++;\\n    } else if (chars[i] !== chars[i+1]) {\\n        compressed += chars[i];\\n        if (count > 1) {\\n            compressed += count;\\n        }\\n        count = 1;\\n    }\\n}\\n\\nreturn compressed.split(\\'\\');\\n}; `\\nRuns as expected in VScode, outputs empty array [] in leetcode\\nI don\\'t know what else to try "
                    },
                    {
                        "username": "Vedant-001",
                        "content": "Is there no O(n) solution for this problem?"
                    },
                    {
                        "username": "kakadoodles",
                        "content": "hey guys, can someone explain what will be the output?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "The output must be chars.size(), but not only any integer number.\\nFor example, if your answer (size of the string) is 10, you return chars.size() -> it\\'s accepted, but if you return 10, it\\'s a wrong answer"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "the test sample is bad, especially for those beginner. \\nI found out that u can change the vector ```chars``` any how u want, and all u need to do is return the chars.size() (not any integer)."
                    }
                ]
            },
            {
                "id": 1957355,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1956178,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1956141,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1952169,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1938908,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1935512,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1935277,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1934683,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1934245,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1932359,
                "content": [
                    {
                        "username": "dibya_exe",
                        "content": "okay so can someone xplain me why ?\\nchars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\\nOutput\\n[\"a\",\"5\",\"b\",\"2\"]\\nExpected\\n[\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"]\\n"
                    },
                    {
                        "username": "knwnw",
                        "content": "It is stated in the description that one should count the consecutive repeating characters."
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my output is a list that isnt my output"
                    },
                    {
                        "username": "JJTalla",
                        "content": "why does it keep saying my list index is out of range when its not, but it also prints the correct output at the same time"
                    },
                    {
                        "username": "tolem",
                        "content": "The description should state in lucid terms, that it expects not to return a new list but modify the existing chars."
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "Like really, what am I supposed to return? An integer or an array?\\nThe code documentation and the question says return a number, but the test case wants an array?"
                    },
                    {
                        "username": "smit_05",
                        "content": "Can someone explain me this question, because if I return a count of what the length of the compressed chars would be for example char = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"], expected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] but my output goes like [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]. Like what should I be returning to the function then??"
                    },
                    {
                        "username": "lanceXD",
                        "content": "well, I know what it asked. u have to set \"a2b2c3\" back to chars like example 1, it will check chars"
                    },
                    {
                        "username": "abdallah-nasir",
                        "content": "why my solution is not accepted despite the output is same as expected \\n `\\n\\n    class Solution:\\n\\n        def compress(self, chars: list[str]):\\n\\n            word = \"\"\\n\\n            for i in chars:\\n\\n                char_count = chars.count(i)\\n\\n                if i not in word:\\n\\n                    if char_count == 1:\\n\\n                        word += f\"{i} \"\\n\\n                    else:\\n\\n                        if char_count >= 10:\\n\\n                             ones = char_count % 10\\n\\n                             tens =  (char_count % 100) // 10\\n\\n                             word += f\"{i} {tens} {ones} \"\\n                        else:\\n\\n                            word += f\"{i} {char_count} \"\\n        \\n            result = list(word.split())\\n            return len(result)\\n`"
                    },
                    {
                        "username": "asli_iut",
                        "content": "   let result = \\'\\';\\n   let counter = 0;\\n   for(let i = 0; i < chars.length; i++) {\\n     counter++;\\n     if(chars[i] !== chars[i + 1]) {\\n       if(counter > 1) {\\n          result = result + chars[i] + counter.toString();\\n          console.log([...result]);\\n       } else {\\n          result = result + chars[i];\\n       }\\n      counter = 0;\\n     }\\n   }\\n   return [...result];\\ncan anyone explain me why this is wrong? because in the console it is giving exactly the same output;"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The logic for this code is correct, however for some reason Python makes a mistake when the count of a number of a character is a multiple of 11. For example, if the count is 33, the count that is appended is 32. When the count is 11, the count that is appended is 12. Why does Python do this? It\\'s extra weird because when I try printing number through indexing, it outputs the number as the correct value, when actually the number in the list is incorrect.\\n\\n\\n ```class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        i = 1\\n        while i < len(chars):\\n            if chars[i] != chars[i-1]:\\n                i += 1\\n            else:\\n                s = [chars[i-1], i]\\n                count = 1\\n                while i < len(chars) and chars[i] == s[0]:\\n                    count += 1\\n                    i += 1\\n                count = str(count)\\n                if len(count) == 1:\\n                    chars[i-1] = count\\n                else:\\n                    chars[i-1] = count[0]\\n                    for k in range(1, len(count)):\\n                        chars.insert((i-1)+k, count[k])\\n                for j in range(int(count)-2):\\n                    chars.pop(s[1])\\n                    i -= 1\\n        print(chars)\\n        return len(chars)```"
                    }
                ]
            },
            {
                "id": 1929456,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1926275,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1922820,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1922801,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1921533,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1921271,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1918779,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1918376,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1917168,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1907165,
                "content": [
                    {
                        "username": "callmecodeslayer",
                        "content": "Why so many  dislikes guys?\\nI made it in first go."
                    },
                    {
                        "username": "neil_r_john",
                        "content": "class Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        \\n        dist = set(chars)\\n        length = len(dist)\\n        temp = chars[0]\\n        count = 0\\n        i = 1\\n        n = len(chars)\\n        while i < n:\\n            if chars[i] == temp:\\n                count += 1\\n            else:\\n                if count > 1:\\n                    length += 1\\n                else:\\n                    count = 1\\n                    temp = chars[i]\\n        return length\\n\\nq.] Why won\\'t this work? To summarise the approach I used the set function to find the number of distinct elements and stored this in a length counter variable. Then used a for loop to go through and in case the number is > 1 I will have to increase length variable by 1. Now that I think of it, I will have to correlate double digit numbers to length 2 and triple to 3 and so on, which I have not included in the code. So this is wrong but why it doesn\\'t execute and shows Time Limit Exceeded? "
                    },
                    {
                        "username": "sk4142",
                        "content": "Example 3 complicates this problem way too much. Why make the compression \"ab12\" when \"a1b2\" makes more sense?"
                    },
                    {
                        "username": "sk4142",
                        "content": "Was looking for a problem similar to CTCI\\'s Problem 1.6 (p. 91 of 6ed), which is a great problem, but this one is just awful in its description and its examples. "
                    },
                    {
                        "username": "theprathamsharma1",
                        "content": "The assignment to chars list is working when in a for loop but the assignment outside throws \\'IndexError: list assignment index out of range\\'.\\n- Even in the first test case, accessing chars[1] outside a for loop throws the above error\\n- Coding language used - python\\n- Is this a leetcode compiler issue?"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "Find the error with me. I stuck at this case [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"] while it pass the testcases in the first \n"
                    },
                    {
                        "username": "mennaabdelrahman6",
                        "content": "I am using 2 pointers\n        while e < len(chars):\n            while e < len(chars) and chars[s] == chars[e]:\n                e += 1 \n                count += 1 \n            if count > 1: \n                chars[s+1:e] = list(str(count))\n                count = 1\n             \n     \n"
                    },
                    {
                        "username": "b0rus",
                        "content": "what should I return to this task?"
                    },
                    {
                        "username": "user5591K",
                        "content": "Does converting amount of characters to string in order to put it into array digit by digit still counts as constant extra space? `count.toString().split(\\'\\')`"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "The short answer yes, because you'll be overwriting the address to address for that array when assigning it. And therefore, still fall into the bounds of constant space.\n\nThe long answer is ...\nGoogle Search: <language> String heap memory and garbage collection\nJava and JavaScript both store the string value within within a different part of the heap which has its own special garbage collector.\n\nIn my testing with Java, it was easier to get the regular garbage collector to invoke than it was for the string collector one.\n(Neither of these languages support direct access to the garbage collector but in java you're allowed to overwrite what happens when it is time to remove it from memory (like logging out a statement)\n\nOh, and the only company I know of that cares about heap usage is NASA. But they don't use languages that don't allow flexibility in how things are stored.\n\nFor NASA, the relevant code could look like\nReview Constraints\n- chars.length <= 2000\n\n```c++\nfor (int i = 1000; i > 0; i/=10) {\n    int c = count / i;\n    if (c != 0)\n        chars[modifyIndex] = c + 48\n    count %= i;\n```\n"
                    },
                    {
                        "username": "dfisheritp",
                        "content": "Not only are you're returning the value, but you are ALSO modifying the character array in place.\n\nIf you're programming in almost all the languages that have the immutable strings object type, we are given arrays.\n\nAnd you must reassign individual indexes, because of the way array addressing works within memory."
                    },
                    {
                        "username": "Fful",
                        "content": "Im mad..., seems right to me but test fail \\n```python\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n\\n        walker, runner = 0, 1 \\n        while runner < len(chars):\\n            amount = 1\\n            while chars[walker] == chars[runner]:\\n                runner+=1\\n                amount+=1\\n                if runner==len(chars): break\\n            if amount>1:\\n                chars = chars[:walker+1]+list(str(amount))+chars[runner:]   \\n            walker = runner\\n            runner+=1\\n        print(chars)\\n        return len(chars)\\n```\\nMy output does not match with ans\\nStdout:\\n `[\\'a\\', \\'2\\', \\'b\\', \\'2\\', \\'c\\', \\'3\\']`\\nOutput\\n`[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]`\\nExpected\\n`[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\\n"
                    }
                ]
            },
            {
                "id": 1900863,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1896576,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1893478,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1891931,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1886991,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1873670,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1843171,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1839738,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1839505,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1839500,
                "content": [
                    {
                        "username": "arc-arnob",
                        "content": "Whats wrong with this description, it says return the length of new array but test cases expect string array"
                    },
                    {
                        "username": "EachOneChew",
                        "content": "What the hell is this lmao"
                    },
                    {
                        "username": "geek_1010",
                        "content": "One thing I can suggest that to make the question understandable to everyone different examples will help basically when in the description it is not clearly explained.  \nLike for the following test case \n[\"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"a', \"a\"] \nthe answer will be [\"a\", \"2\", \"b\", \"3\", \"a\", \"2\"]\n\nI think that this kind of examples will help to understand better. Like even the 'a' character is visited before 'b' character group still it will be considered as new group of 'a' character. \n\nPlease help me if I missed this explanation. "
                    },
                    {
                        "username": "happygamer123",
                        "content": "Can someone please say why this is not working? It always throws a runtime error something about heap-buffer-overflow and I am not able to figure where I am going wrong! Please\\n\\nclass Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n\\n        int i = 0 ;\\n        int j = i ;\\n        int k = 0 ;\\n        int l ;\\n        while (i < chars.size() ) {\\n            l = 1 ;\\n            //int j = i ;\\n            cout << \"k before: \" << k << endl ;\\n\\n            while (chars[j] == chars[j + 1] && j + 1 < chars.size()) {\\n                l = l + 1 ;\\n                j = j + 1 ;\\n            }\\n            cout <<\"l \" <<  l << endl ;\\n            if (l == 1) {\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n\\n            }\\n            // else if (l > 1 && l < 10) {\\n            //     chars[k] = chars[i] ;\\n            //     k = k + 1 ;\\n            //     string t = to_string (l);\\n            //     chars[k] = t[0] ;\\n            //     k = k + 1 ;\\n                \\n            // }\\n            else {\\n                string t = to_string (l) ;\\n                int n = t.length() ;\\n                chars[k++] = chars[i] ;\\n                //k = k + 1 ;\\n                for (int i = 0 ; i < n ; i ++) {\\n                    chars[k] = t[i] ;\\n                    k = k + 1 ;\\n                }\\n            }\\n            cout << \"reached here! \" << endl ;\\n            i = j + 1 ;\\n            j = i ;\\n            cout << \"k after : \" << k << endl ;\\n\\n        }\\n        cout << \"did i reach here?\" << endl ;\\n\\n        return k ;\\n    }\\n};"
                    },
                    {
                        "username": "deva01",
                        "content": "Input\\nchars =\\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"b\",\"b\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]\\nhow is this possible , method is only supposed to return the length of the compressed string right ? So why is this the output when I clearly returned the correct int value."
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "problem explanation is not clear in problem wee have to traverse through array then we compress it form of String. if our chars is [\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\'] then string s is like \"a2b2c2\". then we have to again replace characters of array in chars array with the string array so new chars array will be [\\'a\\',\\'2\\',\\'b\\',\\'2\\',\\'c\\',\\'2\\']\\nand return s.length so test case only check chars array upto s.length."
                    },
                    {
                        "username": "PradneyaSP",
                        "content": "Can someone please tell me why my code isn't working...\n    public int compress(char[] chars) {\n        StringBuilder str = new StringBuilder(\"\");\n        int count = 0;\n        str.append(chars[0]);\n        char prev = chars[0];\n        for(final char curr:chars){\n            if(curr == prev){\n                count++;\n            }else{\n                if(count>1)\n                    str.append(count);\n                str.append(curr);\n                count=1;\n            }\n            prev = curr;\n        }\n\n        if(count>1)\n            str.append(count);\n\n        System.out.println(str.toString().toCharArray());\n        chars = str.toString().toCharArray();\n\n        return chars.length;\n    }"
                    },
                    {
                        "username": "pranavburhhade",
                        "content": "just small chage bro i changed only three lines only btw you return nice code here is updated code                                                 class Solution {\\n  public int compress(char[] chars) {\\nStringBuilder str = new StringBuilder(\"\");\\nint count = 0;\\nstr.append(chars[0]);\\nchar prev = chars[0];\\nfor(final char curr:chars){\\nif(curr == prev){\\ncount++;\\n}else{\\nif(count>1)\\nstr.append(count);\\nstr.append(curr);\\ncount=1;\\n}\\nprev = curr;\\n}\\n\\n    if(count>1)\\n        str.append(count);\\n\\n    // System.out.println(str.toString().toCharArray());\\n    // chars = str.toString().toCharArray();\\n\\n    for(int i = 0; i < str.length(); i++) {\\n      chars[i] = str.charAt(i);\\n    }\\n   // return chars.length;\\n   return str.length();\\n}\\n\\n}"
                    },
                    {
                        "username": "69bit",
                        "content": "I\\'m Still staring at those \"\" quote characters\\uD83D\\uDE36"
                    },
                    {
                        "username": "aayushi1607",
                        "content": "I did not got this example does anyone? \\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput\\n[\"a\",\"b\",\"1\",\"2\"]\\nExpected\\n[\"a\",\"b\",\"1\",\"2\"]"
                    },
                    {
                        "username": "jm5nc",
                        "content": "12 of b.\\nthe digits 1 and 2 are seperated"
                    },
                    {
                        "username": "jolswlf",
                        "content": "this testcase is possibly bugged"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Why would my output list be wrong if i unpacked a string which sdout here shows to hold the correct information?\\n\\nchars =\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nStdout\\na2b2c3\\nOutput\\n[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\"]\\nExpected\\n[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n"
                    },
                    {
                        "username": "nivedkrishna21",
                        "content": "[@jm5nc](/jm5nc) can you show the code I have same problem\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "i think you are making new array that why ,if it still not fixed can you provide your code here"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Fixed it.  Despite correct output, the code doesn\\u2019t pass when creating chars list new like this. Must be done in place. "
                    },
                    {
                        "username": "jm5nc",
                        "content": "finished code with following:\\n\\nprint(s)\\nchars = [*s]\\nreturn len(chars)"
                    }
                ]
            },
            {
                "id": 1824437,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1824173,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1820858,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1820285,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1819877,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1819816,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1819690,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1819663,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1819655,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1819650,
                "content": [
                    {
                        "username": "phil_the_duck",
                        "content": "Good day everyone, can someone please explain why my code does not run in leetcode, but runs great on my local IDE?\\nWhen I press run, I get an error \\n `java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7\\n\\tat __Serializer__.serialize(Unknown Source)\\n  at line 89, __Driver__.main`\\n\\n\\n\\nAt the same time, same code runs with no exceptions in my IDE (P.S. Yes I am well aware this is not the best code out there, however I see that it works on my local, and I want to see at least TLE when running it on Leetcode. The error I see is clearly some unexpected behavior.):\\n `        \\n\\n\\n    public int compress(char[] chars) {\\n        int compressedIndex = 1;\\n        int groupCount = 1;\\n\\n        char previousChar = chars[0];\\n        boolean groupWasFound = false;\\n\\n        int i = 1;\\n        while(i < chars.length) {\\n            char currentChar = chars[i];\\n            if(currentChar == previousChar) {\\n                groupWasFound = true;\\n                groupCount++;\\n            } else {\\n                if(groupWasFound) {\\n                    String groupCountString = String.valueOf(groupCount);\\n                    char[] digits = groupCountString.toCharArray();\\n                    for(int j = 0; j < digits.length; j++) {\\n                        chars[compressedIndex] = digits[j];\\n                        compressedIndex++;\\n                    }\\n\\n                    groupWasFound = false;\\n                    groupCount = 1;\\n                    compressedIndex += 1;\\n                } else {\\n                    compressedIndex ++;\\n                }\\n\\n\\n            }\\n            previousChar = currentChar;\\n            i++;\\n        }\\n        if(groupWasFound) {\\n            String groupCountString = String.valueOf(groupCount);\\n            char[] digits = groupCountString.toCharArray();\\n            for(int j = 0; j < digits.length; j++) {\\n                chars[compressedIndex] = digits[j];\\n                compressedIndex++;\\n            }\\n            compressedIndex += 2;\\n        }\\n\\n        return compressedIndex;\\n    }\\n`\\n\\nI ran it like this: \\n`\\n\\n        solver.compress(new char[] {\\'a\\'});\\n        solver.compress(new char[] {\\'a\\',\\'a\\',\\'b\\',\\'b\\',\\'c\\',\\'c\\',\\'c\\'});\\n        solver.compress(new char[] {\\'a\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\',\\'b\\'});\\n`\\n"
                    },
                    {
                        "username": "Darpan301",
                        "content": "Can anyone tell what should i change to get correct ans?\n\n`class Solution {\n    public int compress(char[] chars) {\n        \n        int i = 0;\n        int j = 0;\n        int fin = 0;\n        while(j<chars.length){\n            if(chars[i]==chars[j]){\n                j++;\n            }\n            if(chars[i]!=chars[j]){\n                chars[fin++] = chars[i];\n                chars[fin++]= (char)(j-i);\n                i=j;\n            }\n\n        }\n        return fin;\n    }\n}`"
                    },
                    {
                        "username": "user7117xu",
                        "content": "It is a terribly malformed question.\\nA much better way would be to put constraints in the time|space complexity, but not on how you implement it.\\nAnd it has some test cases that require behavior not described in the text."
                    },
                    {
                        "username": "space_invader",
                        "content": "You need to replace characters in `chars`.\\nPossible verification code does something like this:\\n\\n```\\nchars = [ \"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\" ]\\nexpected = [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\n\\nfor i, c in enumerate(expected):\\n    assert chars[i] == expected[i]\\n\\nreturn True\\n```"
                    },
                    {
                        "username": "jm5nc",
                        "content": "Please would someone explain why this fails the test cases? The output appears to match what they are asking for.\\n\\nfrom collections import OrderedDict\\n\\nclass Solution:\\n    def compress(self, chars: List[str]) -> int:\\n        s = \"\"\\n        od = OrderedDict()\\n        for i in range(len(chars)):\\n            od[chars[i]] = od.get(chars[i], 0) + 1\\n        for k, v in od.items():\\n            if v >= 10:\\n                for each in str(v):\\n                    s += k + each\\n            elif v == 1:\\n                s += k\\n            else:\\n                s += k + str(v)\\n        chars = [*s]\\n        # new = [*s] \\n        # chars = new + chars[len(new)-1:] \\n        print(s)\\n        print(chars)\\n        return len(chars)"
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This problem should be easy"
                    },
                    {
                        "username": "dixit70",
                        "content": "Good questions to brush the concept but description in not  too much clear."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n            }\\n        }\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n};"
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int compress(vector<char>& chars) {\\n        char pre = chars[0];\\n        int count = 1,s_index = 0;\\n        for(int i = 1;i<chars.size();i++){\\n            cout<<pre<<\" \"<<chars.size()<<endl;\\n            if(chars[i] == pre){\\n                count++;\\n            }else{\\n                if(count>1){\\n                    chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n                    string str  = to_string(count);\\n                    for(int j = 0;j<str.size();j++){\\n                        chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                    }\\n                }\\n                s_index = i;\\n                count = 1;\\n                pre = chars[i];\\n\\n            }\\n        }\\n\\n        if(count>1){\\n            chars.erase(chars.begin()+s_index,chars.begin()+s_index + count-1);\\n            string str  = to_string(count);\\n            for(int j = 0;j<str.size();j++){\\n                chars.insert(chars.begin()+s_index+1+j,str[j]);\\n                }\\n            }\\n            return chars.size();\\n    }\\n    \\n};\\n\\n@"
                    },
                    {
                        "username": "A-V-Jagannathan",
                        "content": "FFS all this for what? a basic queue question??"
                    }
                ]
            },
            {
                "id": 1819619,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819618,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819549,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819422,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819410,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819390,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819362,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819353,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819336,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819325,
                "content": [
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "addition of unsigned offset to 0x602000000150 overflowed to 0x60200000014f (stl_vector.h)\\ncan someone explain this error\\n"
                    },
                    {
                        "username": "sagar9950",
                        "content": "    public class Solution {\n        public int Compress(char[] chars) {\n        int n = chars.Length;\n        if (n == 1) return 1;\n        int left = 0;\n        int right = 0;\n        while (right < n - 1)\n        {\n            int last = 0;\n            while (chars[right] == chars[right + 1])\n            {\n                right++;\n                if (right >= n - 1) break;\n            }\n            last = right + 1;\n            if (right - left + 1 > 1)\n            {\n                var num = (right - left + 1).ToString();\n                for (int i = 0; i < num.Length; i++)\n                {\n                    ++left;\n                    chars[left] = num[i];\n                }\n            }\n            left = right + 1;\n\n            right++;\n            if (right >= n) break;\n        }\n\n        return --left;\n    }\n}\n\nWrong Answer\nRuntime: 194 ms\nCase 1\nCase 2\nCase 3\nInput\nchars =\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput\n[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nExpected\n[\"a\",\"b\",\"1\",\"2\"]\n\nWhat am I doing wrong?\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "[@sagar9950](/sagar9950) Then I don\\'t know. However many people are having issues with valid outputs being rejected by the tests, it might just be bugged. "
                    },
                    {
                        "username": "sagar9950",
                        "content": "[@jolswlf](/jolswlf) Not quite sure what you mean, Case 1 passes with the same code.\\nI also tried \\nchars = chars.Skip(0).Take(left + 1).ToArray();\\n to trim it. I still get the same error.\\n"
                    },
                    {
                        "username": "jolswlf",
                        "content": "You have to trim the excess characters, the problem doesn\\'t make this clear"
                    },
                    {
                        "username": "DKXVRT",
                        "content": "They removed the [\"1\",\"1\",\"2\"] testcase but it still fails with empty char in the custom testcases, a bug for sure"
                    },
                    {
                        "username": "UbeySaab",
                        "content": "hello I write my code on visual studio code and ran it and it gave me a valid result, but when I try it here the stdout is true but output isn\\'t, I\\'m a beginner and i didn\\'t understand the reason, can someone help me??thanks\\nI shared my solution below  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n ```javascript \\nvar compress = function(chars) {\\n    let s =\"\"\\n    let counter=0\\n    let result=\"\"\\n    \\n    if(chars.length==1)\\n    {\\n        return chars.length\\n\\n    }\\n    else{\\n        for ( let i =0;i< chars.length;i++)\\n        {\\n            if(counter==0)\\n            {\\n                s+=chars[i]\\n                counter++\\n            }\\n            else if(counter!=0)\\n               \\n            {\\n                if(chars[i]==s)\\n                {\\n                    counter++\\n                }\\n                else{\\n\\n\\n                    if(counter==1)\\n                        {\\n                            result+=s\\n                            \\n\\n                        }\\n                    else{\\n                        result+=s\\n                        result+=String(counter)\\n                    }\\n\\n                    s=\"\"\\n                    counter=0\\n                    i--\\n\\n                }\\n                 \\n              \\n            }\\n        }\\n\\n        if(counter==1)\\n        {\\n                    result+=s\\n\\n        }\\n        else{\\n             result+=s\\n             result+=String(counter)\\n        }\\n\\n\\n        result=result.split(\"\")\\n    }\\n    chars=result\\n    console.log(chars)\\n    return chars.length\\n\\n\\n\\n};\\n```\\n![image](https://github.com/ubeysaab/Issues/blob/main/Screenshot_20230302_031352.png?raw=true)"
                    },
                    {
                        "username": "shaan__0w0",
                        "content": "Why is there these \" \" in the array when the array is in char : )"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Because in nearly every language thats how one marks string literals.  "
                    },
                    {
                        "username": "jolswlf",
                        "content": "I\\'m using  `chars = chars.flat_map{ |s| s.length > 1 ? s.split(\\'\\') : s }`  to map strings longer than 1 into multiple strings. If I  `p chars` I get [\"a\", \"b\", \"1\", \"2\"] which matches the expected output. However the output box says my output is [\"a\",\"b\",\"12\",null]\\nWhat am I missing here? How does this make any sense?\\n "
                    },
                    {
                        "username": "DavidLindon",
                        "content": "What does it mean to use constant extra space? \\n\\n\"You must write an algorithm that uses only constant extra space.\""
                    },
                    {
                        "username": "jolswlf",
                        "content": "It means you can\\'t create an auxiliary array to insert the new values. You have to modify chars in place "
                    },
                    {
                        "username": "JohnKoepi",
                        "content": "the next problem must be to decompress it [2234] :D"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "It is not that hard. Iterate through collection and count. Build string in the meantime.\\nAdd count only when count > 1 \\n\\nIf you stuck you can check my solution:\\nhttps://leetcode.com/problems/string-compression/solutions/3247011/python-solution/"
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "Examples are bad. For example, `[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`, the result should be `[\"a\",\"b\",\"1\",\"2\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]`"
                    }
                ]
            },
            {
                "id": 1819203,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1819199,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1819136,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1819134,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1819117,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1818942,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1818921,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1818918,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1818898,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1809352,
                "content": [
                    {
                        "username": "PrashantUnity",
                        "content": "Hopping you all have read this line\\n```\\nAfter you are done modifying the input array, return the new length of the array.\\n```"
                    },
                    {
                        "username": "madpoly",
                        "content": "weird error: terminate called after throwing an instance of \\'std::length_error\\'\\n  what():  vector::_M_default_append \\nI am in the process of solving this function and even just returning -1 temporarily throws this error. Everything else is empty. Is this error occuring because I have not changed chars (input) yet? This is incredibly annoying..."
                    },
                    {
                        "username": "ravitejatasubilli",
                        "content": "\\n\"An array is a data structure/container/object that stores a fixed-size sequential collection of elements of the same type. The size/length of the array is determined at the time of creation\". Shouldn\\'t it be a linked list?"
                    },
                    {
                        "username": "monapriya",
                        "content": "No, it\\'s an array. And that\\'s why in the question it is given that after modifying the array only return the length up to which the answer is available. And then the rest array will be ignored. And so we are not changing the actual size of the array. Instead, we are just modifying it."
                    },
                    {
                        "username": "crazysamurai",
                        "content": "5k down votes! This oughta be good."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is an Approach:-\\n\\n1.Initialize an empty string to store the compressed result.\\n\\n2.Initialize a variable to keep track of the count of consecutive characters.\\n\\n3.Iterate through each character in the string.\\n\\n4.If the current character is the same as the previous character, increment the count of consecutive characters.\\n\\n5.If the current character is different than the previous character:\\nAppend the previous character to the compressed result.\\nIf the count of consecutive characters is greater than 1, append the count to the compressed result.\\nReset the count of consecutive characters to 1.\\n\\n6.After iterating through all characters in the string, append the final character and count to the compressed result, if applicable.\\n\\n7.Return the compressed result."
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Without Extraa Space feels extraa."
                    },
                    {
                        "username": "dumb_me",
                        "content": "\\nHint : \\n  2 - Pointer \\n maintain counter for similar chars.\\n try to move pointer i according to  char then its count\\n\\n```\\nSpoiler: \\n```\\n\\n\\nwithout using extra space\\n\\n```\\n while(j < chars.size()) {\\n            int cnt = 1;\\n            while(j < chars.size() - 1 && chars[j] == chars[j+1]) {\\n                j++;\\n                cnt++;\\n            }\\n            chars[i] = chars[j];\\n            cout << char(cnt) << endl;\\n            if(cnt > 1) {\\n                for(auto &ch : to_string(cnt)) chars[++i] = ch;\\n            }\\n            i++;\\n            j++;\\n        }\\n        return i;\\n\\n```"
                    },
                    {
                        "username": "purple_Lion",
                        "content": "bruh less goo"
                    },
                    {
                        "username": "WildPikachu",
                        "content": "Easy and unlikely question. Tested nothing :/"
                    },
                    {
                        "username": "avkr31",
                        "content": "Hi I am new to this problem could anyone please let me know why my solution is failing the test case, means alot and thanks in advance\\n\\nclass Solution {\\n public static int compress(char[] chars) {\\n        int cLen = chars.length;\\n       // StringBuilder sb = new StringBuilder();\\n        String sb = \"\";\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        while (i < chars.length && j < chars.length) {\\n                if (chars[i] == chars[j]) {\\n                    count++;\\n                } else {\\n                   // sb.append(chars[i]);\\n                    sb += chars[i];\\n                    if (count > 1) {\\n                      //  sb.append(count);\\n                        sb+=count+\"\";\\n                    }\\n\\n                    i = j;\\n                    System.out.println(chars[j]);\\n                    count =1;\\n                }\\n                j++;\\n            }\\n        if (count>1){\\n           // sb.append(chars[i]);\\n            // sb.append(count);\\n            sb += chars[i];\\n            sb+=count+\"\";\\n        }\\n        System.out.println(sb);\\n        // List<String> al = new ArrayList<>();\\n        // for( char x : sb.toCharArray()){\\n        //     al.add(x+\"\");\\n        // }\\n        // System.out.println(al);\\n        return sb.length();\\n    }\\n}"
                    }
                ]
            }
        ]
    }
]