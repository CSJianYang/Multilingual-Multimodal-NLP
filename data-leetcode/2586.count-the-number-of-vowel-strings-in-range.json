[
    {
        "title": "Count the Number of Vowel Strings in Range",
        "question_content": "You are given a 0-indexed array of string words and two integers left and right.\nA string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'.\nReturn the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\n&nbsp;\nExample 1:\n\nInput: words = [\"are\",\"amy\",\"u\"], left = 0, right = 2\nOutput: 2\nExplanation: \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2.\n\nExample 2:\n\nInput: words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4\nOutput: 3\nExplanation: \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3.\n\n&nbsp;\nConstraints:\n\n\t1 <= words.length <= 1000\n\t1 <= words[i].length <= 10\n\twords[i] consists of only lowercase English letters.\n\t0 <= left <= right < words.length",
        "solutions": [
            {
                "id": 3286486,
                "title": "simple-condition-very-simple-easy-to-understand-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int isVowel(char w){\\n        return (w == \\'a\\' || w == \\'e\\' || w == \\'i\\' || w == \\'o\\' || w == \\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; ++i) {\\n            if(isVowel(words[i][0]) && isVowel(words[i].back()) ) count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int isVowel(char w){\\n        return (w == \\'a\\' || w == \\'e\\' || w == \\'i\\' || w == \\'o\\' || w == \\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; ++i) {\\n            if(isVowel(words[i][0]) && isVowel(words[i].back()) ) count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286369,
                "title": "2586-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Define a function vowelStrings that takes a list of strings words and two integers left and right as input, and returns an integer.\\n2. Initialize a variable vowels to the string \\'aeiouAEIOU\\', which contains all the vowels.\\n3. Initialize a variable count to 0.\\n4. Loop through the indices from left to right inclusive:\\na. If the first character of the current word is a vowel and the last character of the current word is a vowel, increment count by 1.\\n5. Return count.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels = \\'aeiouAEIOU\\'\\n        count = 0\\n        for i in range(left, right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count += 1\\n        return count\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels = \\'aeiouAEIOU\\'\\n        count = 0\\n        for i in range(left, right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count += 1\\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286709,
                "title": "python-3-2-lines-sets-t-m-60-ms-14-mb",
                "content": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n\\n        vowels = set(\\'aeiou\\')\\n        \\n        return sum({w[0],w[-1]}.issubset(vowels) for w in words[left:right+1])\\n```\\n[https://leetcode.com/problems/count-the-number-of-vowel-strings-in-range/submissions/913606212/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1).\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n\\n        vowels = set(\\'aeiou\\')\\n        \\n        return sum({w[0],w[-1]}.issubset(vowels) for w in words[left:right+1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286298,
                "title": "short-clean-java",
                "content": "\\n```java []\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        String v = \"aeiou\";\\n        for(int i=left; i<=right; i++){\\n            if(v.contains(words[i].charAt(0)+\"\") && v.contains(words[i].charAt(words[i].length()-1)+\"\"))   count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        String v = \"aeiou\";\\n        for(int i=left; i<=right; i++){\\n            if(v.contains(words[i].charAt(0)+\"\") && v.contains(words[i].charAt(words[i].length()-1)+\"\"))   count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286245,
                "title": "simple-java-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$ where left <= n <= right\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int m=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            char c=words[i].charAt(0);\\n            char d=words[i].charAt(words[i].length()-1);\\n            if((c==\\'a\\'||c==\\'e\\'||c==\\'i\\'||c==\\'o\\'||c==\\'u\\') && (d==\\'a\\'||d==\\'e\\'||d==\\'i\\'||d==\\'o\\'||d==\\'u\\'))\\n            {\\n                m++;\\n            }\\n        }\\n        return m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int m=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            char c=words[i].charAt(0);\\n            char d=words[i].charAt(words[i].length()-1);\\n            if((c==\\'a\\'||c==\\'e\\'||c==\\'i\\'||c==\\'o\\'||c==\\'u\\') && (d==\\'a\\'||d==\\'e\\'||d==\\'i\\'||d==\\'o\\'||d==\\'u\\'))\\n            {\\n                m++;\\n            }\\n        }\\n        return m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359334,
                "title": "0ms-beats-100-easy-to-understand-o-n-java",
                "content": "# The Code Explains itself :\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left; i<=right; i++){\\n            if(check(words[i]))\\n                count++;\\n        }\\n        return count;\\n    }\\n    private boolean check(String word){\\n        char i = word.charAt(0);\\n        char j = word.charAt(word.length()-1);\\n        String str = \"aeiou\";\\n        if(str.indexOf(i) != -1 && str.indexOf(j) != -1 )\\n            return true;\\n        return false;\\n    }\\n}\\n```\\n**If still someone has doubts ,then Please let me know in Comments**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left; i<=right; i++){\\n            if(check(words[i]))\\n                count++;\\n        }\\n        return count;\\n    }\\n    private boolean check(String word){\\n        char i = word.charAt(0);\\n        char j = word.charAt(word.length()-1);\\n        String str = \"aeiou\";\\n        if(str.indexOf(i) != -1 && str.indexOf(j) != -1 )\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286530,
                "title": "image-explanation-simplest-solution",
                "content": "# Video Solution\\nhttps://youtu.be/khHg0Zlk7RQ\\n\\n# Approach & Intuition\\n![image.png](https://assets.leetcode.com/users/images/0011b36f-2bc3-494c-ba46-e4fa7dd4385b_1678594750.417796.png)\\n![image.png](https://assets.leetcode.com/users/images/70e2b385-10e2-4e1c-ba06-ff98b809228f_1678594759.02045.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    bool isVowel(string& s){\\n        int n = s.length();\\n        if( (s[0] == \\'a\\' || s[0] == \\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0] == \\'u\\') && (s[n-1] == \\'a\\' || s[n-1] == \\'e\\' || s[n-1]==\\'i\\' || s[n-1]==\\'o\\' || s[n-1] == \\'u\\')) return true;\\n        return false;\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        for(int i=left;i<=right;i++){\\n            if(isVowel(words[i]))\\n                ans++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool isVowel(string& s){\\n        int n = s.length();\\n        if( (s[0] == \\'a\\' || s[0] == \\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0] == \\'u\\') && (s[n-1] == \\'a\\' || s[n-1] == \\'e\\' || s[n-1]==\\'i\\' || s[n-1]==\\'o\\' || s[n-1] == \\'u\\')) return true;\\n        return false;\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        for(int i=left;i<=right;i++){\\n            if(isVowel(words[i]))\\n                ans++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329546,
                "title": "100-faster-java-short-code-very-easy-to-understand",
                "content": "**please UPVOTE it, if you like it**\\n![new 100 solution.PNG](https://assets.leetcode.com/users/images/ee160d69-afaf-4f9a-8b10-dae8b254a544_1679510625.7284386.png)\\n\\n# Complexity\\n- Time complexity:O(N)\\n\\n- Space complexity:O(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            if (checkingWord(words[i])) count++;\\n        }\\n        return count;\\n    }\\n\\n    public static boolean checkingWord(String s) {\\n        return checkVowel(s.charAt(0)) && checkVowel(s.charAt(s.length() - 1));\\n    }\\n\\n    public static boolean checkVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            if (checkingWord(words[i])) count++;\\n        }\\n        return count;\\n    }\\n\\n    public static boolean checkingWord(String s) {\\n        return checkVowel(s.charAt(0)) && checkVowel(s.charAt(s.length() - 1));\\n    }\\n\\n    public static boolean checkVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3291585,
                "title": "easy-3lines-solution-in-python-run-time-100-memory-100",
                "content": "![image.png](https://assets.leetcode.com/users/images/215674d7-4b03-44eb-b462-95e3c417aaa1_1678701516.5465589.png)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        \"\"\"\\n        :type words: List[str]\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        \"\"\"\\n        s=\"aeiou\"\\n        cnt=0\\n        for i in range(left,right+1):\\n            if words[i][0] in s and words[i][-1] in s:cnt+=1\\n        return cnt\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        \"\"\"\\n        :type words: List[str]\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        \"\"\"\\n        s=\"aeiou\"\\n        cnt=0\\n        for i in range(left,right+1):\\n            if words[i][0] in s and words[i][-1] in s:cnt+=1\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288913,
                "title": "javascript-code-for-beginner-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function(words, left, right) {\\n    const regex = /[aeiou]/;\\n    let count = 0;\\n    for (let i = left; i <= right; i++) {\\n        if (words[i][0].match(regex) && words[i].at(-1).match(regex)) {\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function(words, left, right) {\\n    const regex = /[aeiou]/;\\n    let count = 0;\\n    for (let i = left; i <= right; i++) {\\n        if (words[i][0].match(regex) && words[i].at(-1).match(regex)) {\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3287056,
                "title": "simple-c-solution",
                "content": "# Intuition\\nConstraints are low here so we can just traverse through the vector in the given range.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialise ans with 0.\\n2. Start loop at left till right and check if front and back of string are vowel letter or not.If they  are vowel then just increase count of ans by 1.\\n3.Return the ans.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(char s)\\n    {\\n        return (s==\\'a\\' || s==\\'e\\'|| s==\\'o\\'|| s==\\'i\\' || s==\\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            if(check(words[i].front()) && check(words[i].back())) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(char s)\\n    {\\n        return (s==\\'a\\' || s==\\'e\\'|| s==\\'o\\'|| s==\\'i\\' || s==\\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            if(check(words[i].front()) && check(words[i].back())) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286302,
                "title": "one-liner",
                "content": "**Python 3**\\n```python\\nclass Solution:\\n    def vowelStrings(self, ws: List[str], l: int, r: int) -> int:\\n        return sum({w[0], w[-1]} < {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'} for w in ws[l:r+1])      \\n```\\n\\n**C++**\\n```cpp\\nint vowelStrings(vector<string>& ws, int l, int r) { \\n    return count_if(begin(ws) + l, begin(ws) + r + 1, [](const auto &s){\\n        auto isVowel = [](char c) { \\n            return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n        };\\n        return isVowel(s[0]) && isVowel(s.back());\\n    });\\n}\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def vowelStrings(self, ws: List[str], l: int, r: int) -> int:\\n        return sum({w[0], w[-1]} < {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'} for w in ws[l:r+1])      \\n```\n```cpp\\nint vowelStrings(vector<string>& ws, int l, int r) { \\n    return count_if(begin(ws) + l, begin(ws) + r + 1, [](const auto &s){\\n        auto isVowel = [](char c) { \\n            return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n        };\\n        return isVowel(s[0]) && isVowel(s.back());\\n    });\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3293210,
                "title": "easy-java-solution-beginner-friendly-hashset",
                "content": "**If you really found my solution helpful please upvote it, as it motivates me to post such kind of codes and help the coding community, if you have some queries or some improvements please feel free to comment and share your views.**\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        HashSet<Character> set = new HashSet<Character>();\\n        set.add(\\'a\\');\\n        set.add(\\'e\\');\\n        set.add(\\'i\\');\\n        set.add(\\'o\\');\\n        set.add(\\'u\\');\\n        \\n        int count = 0;\\n        for(int i = left; i <= right; i ++){\\n            if(set.contains(words[i].charAt(0)) && set.contains(words[i].charAt(words[i].length()-1))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```\\n![42b90dac-a6e9-4f9d-99f5-d07a676b1819_1676256247.436845.jpeg](https://assets.leetcode.com/users/images/0863e5fe-d37d-4ccd-9483-a36e5ca83f44_1678731205.905739.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        HashSet<Character> set = new HashSet<Character>();\\n        set.add(\\'a\\');\\n        set.add(\\'e\\');\\n        set.add(\\'i\\');\\n        set.add(\\'o\\');\\n        set.add(\\'u\\');\\n        \\n        int count = 0;\\n        for(int i = left; i <= right; i ++){\\n            if(set.contains(words[i].charAt(0)) && set.contains(words[i].charAt(words[i].length()-1))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286589,
                "title": "fast-solution",
                "content": "# Code\\n``` C++ []\\nclass Solution {\\npublic:\\n    bool isvowel(char &ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch==\\'i\\' ||\\n               ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        \\n        for(int i=left; i<=right; i++){\\n            int n=words[i].length();\\n            \\n            if(isvowel(words[i][0]) && isvowel(words[i][n-1])) cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    bool isvowel(char &ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch==\\'i\\' ||\\n               ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        \\n        for(int i=left; i<=right; i++){\\n            int n=words[i].length();\\n            \\n            if(isvowel(words[i][0]) && isvowel(words[i][n-1])) cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286515,
                "title": "c-easy",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n\\n        int ans=0;\\n        string str=\"aeiou\";\\n        for(int i=left;i<=right;i++){\\n\\n                char f=words[i][0], s = words[i][words[i].length()-1];\\n                if( (str.find(f) != string::npos) && (str.find(s) != string::npos) )\\n                    ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n\\n        int ans=0;\\n        string str=\"aeiou\";\\n        for(int i=left;i<=right;i++){\\n\\n                char f=words[i][0], s = words[i][words[i].length()-1];\\n                if( (str.find(f) != string::npos) && (str.find(s) != string::npos) )\\n                    ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286382,
                "title": "c-beginner-friendly-straight-forward-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/d3d1d38f-0e4a-4ece-b523-f7047a76bd6f_1678593795.1635473.png)\\n\\n**T->O(r-l) && S->O(1)**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint vowelStrings(vector<string>& w, int l, int r) {\\n\\t\\t\\t\\tint ans = 0;\\n\\t\\t\\t\\tfor(int i = l; i <= r ; i++){\\n\\t\\t\\t\\t\\tif((w[i].front() ==\\'a\\' || w[i].front() == \\'e\\' || w[i].front() == \\'i\\' || w[i].front() == \\'o\\' || w[i].front() == \\'u\\') && (w[i].back() == \\'a\\' || w[i].back() == \\'e\\' || w[i].back() == \\'i\\' || w[i].back() == \\'o\\' || w[i].back() == \\'u\\') ) ans++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ans;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint vowelStrings(vector<string>& w, int l, int r) {\\n\\t\\t\\t\\tint ans = 0;\\n\\t\\t\\t\\tfor(int i = l; i <= r ; i++){\\n\\t\\t\\t\\t\\tif((w[i].front() ==\\'a\\' || w[i].front() == \\'e\\' || w[i].front() == \\'i\\' || w[i].front() == \\'o\\' || w[i].front() == \\'u\\') && (w[i].back() == \\'a\\' || w[i].back() == \\'e\\' || w[i].back() == \\'i\\' || w[i].back() == \\'o\\' || w[i].back() == \\'u\\') ) ans++;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3286349,
                "title": "simple-python-solution",
                "content": "# Complexity\\nTime `O(r - l + 1)`\\nSpace `O(1)`\\n\\n# Code\\n```\\nclass Solution(object):\\n    def vowelStrings(self, words, l, r):\\n        res = 0\\n        for i in range(l, r + 1):\\n            if words[i][-1] in \\'aeiuo\\' and words[i][0] in \\'aeiou\\': \\n                res += 1\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def vowelStrings(self, words, l, r):\\n        res = 0\\n        for i in range(l, r + 1):\\n            if words[i][-1] in \\'aeiuo\\' and words[i][0] in \\'aeiou\\': \\n                res += 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286325,
                "title": "c-simple-string-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    /* app 1: \\n    algo ::\\n    \\n    for each word in string array starting from left to right.\\n    check if it starts and ends with vowel or not.\\n    and maintain a count.\\n    return the count.\\n        \\n    */\\n    \\n    //fun to check vowels\\n    bool isvowel(char &ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch==\\'i\\' ||\\n               ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        \\n        for(int i=left; i<=right; i++){\\n            //cur word\\n            string w = words[i];\\n            int n=w.size();\\n            \\n            //if cur word st. and ends with vowel\\n            if(isvowel(w[0]) && isvowel(w[n-1])) cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    /* app 1: \\n    algo ::\\n    \\n    for each word in string array starting from left to right.\\n    check if it starts and ends with vowel or not.\\n    and maintain a count.\\n    return the count.\\n        \\n    */\\n    \\n    //fun to check vowels\\n    bool isvowel(char &ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch==\\'i\\' ||\\n               ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        \\n        for(int i=left; i<=right; i++){\\n            //cur word\\n            string w = words[i];\\n            int n=w.size();\\n            \\n            //if cur word st. and ends with vowel\\n            if(isvowel(w[0]) && isvowel(w[n-1])) cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3802900,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            char c=words[i].charAt(0);\\n            char d=words[i].charAt(words[i].length()-1);\\n            if((c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\' )&& (d==\\'a\\' || d==\\'e\\' || d==\\'i\\' || d==\\'o\\' || d==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            char c=words[i].charAt(0);\\n            char d=words[i].charAt(words[i].length()-1);\\n            if((c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\' )&& (d==\\'a\\' || d==\\'e\\' || d==\\'i\\' || d==\\'o\\' || d==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3527189,
                "title": "c-very-simple",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int x = 0;\\n        for(int i = left ; i<= right; i++){\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&((words[i][words[i].length()-1]==\\'a\\'||words[i][words[i].length()-1]==\\'e\\'||words[i][words[i].length()-1]==\\'i\\'||words[i][words[i].length()-1]==\\'o\\'||words[i][words[i].length()-1]==\\'u\\'))){\\n                x++;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int x = 0;\\n        for(int i = left ; i<= right; i++){\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&((words[i][words[i].length()-1]==\\'a\\'||words[i][words[i].length()-1]==\\'e\\'||words[i][words[i].length()-1]==\\'i\\'||words[i][words[i].length()-1]==\\'o\\'||words[i][words[i].length()-1]==\\'u\\'))){\\n                x++;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3298793,
                "title": "python-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        output= 0 \\n        vowel = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}\\n        for i in range(left,right+1):\\n            if words[i][0] in vowel and words[i][-1] in vowel:\\n                output +=1\\n        return output\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        output= 0 \\n        vowel = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}\\n        for i in range(left,right+1):\\n            if words[i][0] in vowel and words[i][-1] in vowel:\\n                output +=1\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286609,
                "title": "fastest-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            String s = words[i];\\n            int n = s.length()-1;\\n            if((s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\') && (s.charAt(n)==\\'a\\'||s.charAt(n)==\\'e\\'||s.charAt(n)==\\'i\\'||s.charAt(n)==\\'o\\'||s.charAt(n)==\\'u\\'))\\n                count++;\\n                \\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            String s = words[i];\\n            int n = s.length()-1;\\n            if((s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\') && (s.charAt(n)==\\'a\\'||s.charAt(n)==\\'e\\'||s.charAt(n)==\\'i\\'||s.charAt(n)==\\'o\\'||s.charAt(n)==\\'u\\'))\\n                count++;\\n                \\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286329,
                "title": "java-simple-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  private boolean isVowel(char c) {\\n    return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n  }\\n  \\n  public int vowelStrings(String[] words, int left, int right) {\\n    var cnt = 0;\\n    \\n    for (var i = left; i <= right; i++)\\n      if (isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length() - 1)))\\n        cnt++;\\n    \\n    return cnt;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  private boolean isVowel(char c) {\\n    return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n  }\\n  \\n  public int vowelStrings(String[] words, int left, int right) {\\n    var cnt = 0;\\n    \\n    for (var i = left; i <= right; i++)\\n      if (isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length() - 1)))\\n        cnt++;\\n    \\n    return cnt;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286262,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        HashSet<Character> hs=new HashSet<>();\\n        hs.add(\\'a\\');\\n        hs.add(\\'e\\');\\n        hs.add(\\'i\\');\\n        hs.add(\\'o\\');\\n        hs.add(\\'u\\');\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            char ch1=s.charAt(0);\\n            char ch2=s.charAt(s.length()-1);\\n            if(hs.contains(ch1) && hs.contains(ch2))\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        HashSet<Character> hs=new HashSet<>();\\n        hs.add(\\'a\\');\\n        hs.add(\\'e\\');\\n        hs.add(\\'i\\');\\n        hs.add(\\'o\\');\\n        hs.add(\\'u\\');\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            char ch1=s.charAt(0);\\n            char ch2=s.charAt(s.length()-1);\\n            if(hs.contains(ch1) && hs.contains(ch2))\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034913,
                "title": "count-the-number-of-vowel-strings-in-range-o-n-javascript-memory-59-03-meaningful-vars",
                "content": "```\\nconst vowels = { a: true, e: true, i: true, o: true, u: true };\\n\\nvar vowelStrings = function (words, left, right) {\\n    let count = 0\\n    for (let index = left; index <= right; index++) {\\n        if (vowels[words[index][0]] && vowels[words[index][words[index].length - 1]]) {\\n            count++\\n        } else {\\n            if (!index) {\\n                words[index] = 0;\\n            } else {\\n                words[index] = words[index - 1];\\n            }\\n        }\\n    }\\n    return count;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst vowels = { a: true, e: true, i: true, o: true, u: true };\\n\\nvar vowelStrings = function (words, left, right) {\\n    let count = 0\\n    for (let index = left; index <= right; index++) {\\n        if (vowels[words[index][0]] && vowels[words[index][words[index].length - 1]]) {\\n            count++\\n        } else {\\n            if (!index) {\\n                words[index] = 0;\\n            } else {\\n                words[index] = words[index - 1];\\n            }\\n        }\\n    }\\n    return count;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3954610,
                "title": "easy-c-solution-problem-solve-for-beginner-s",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for(int it=left;it<=right;it++){   //words[it][0] means int the string of words,first word and first letter of word.\\n            if(words[it][0]==\\'a\\'|| words[it][0]==\\'e\\'||words[it][0]==\\'i\\'||words[it][0]==\\'o\\'||words[it][0]==\\'u\\')\\n            {\\n                if(words[it][words[it].size()-1]==\\'a\\'|| words[it][words[it].size()-1]==\\'e\\'||words[it][words[it].size()-1]==\\'i\\'||words[it][words[it].size()-1]==\\'o\\'||words[it][words[it].size()-1]==\\'u\\')\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for(int it=left;it<=right;it++){   //words[it][0] means int the string of words,first word and first letter of word.\\n            if(words[it][0]==\\'a\\'|| words[it][0]==\\'e\\'||words[it][0]==\\'i\\'||words[it][0]==\\'o\\'||words[it][0]==\\'u\\')\\n            {\\n                if(words[it][words[it].size()-1]==\\'a\\'|| words[it][words[it].size()-1]==\\'e\\'||words[it][words[it].size()-1]==\\'i\\'||words[it][words[it].size()-1]==\\'o\\'||words[it][words[it].size()-1]==\\'u\\')\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3745302,
                "title": "0ms-runtime-easy-optimised-solution-in-java-c-python",
                "content": "# Code\\n```Java []\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        while(left<=right)\\n        {\\n            if(vowel(words[left].charAt(0))&&vowel(words[left].charAt(words[left].length()-1)))\\n            count++;\\n            left++;\\n        }\\n        return count;\\n    }\\n    boolean vowel(char ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        return true;\\n        else return false;\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for (int i=left;i<=right;i++)\\n        {\\n            if (isVowel(words[i].at(0)) && isVowel(words[i].at(words[i].size()-1)))\\n            count++;\\n        }\\n        return count;\\n    }\\n    bool isVowel(char s)\\n    {\\n        return (s==\\'a\\'||s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\');\\n    }\\n};\\n```\\n```Python []\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        def isVowel(c):\\n            return c in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n        count=0\\n        for i in range(left,right+1):\\n            if isVowel(words[i][0]) and isVowel(words[i][-1]):\\n                count+=1\\n        return count\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Array",
                    "String"
                ],
                "code": "```Java []\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        while(left<=right)\\n        {\\n            if(vowel(words[left].charAt(0))&&vowel(words[left].charAt(words[left].length()-1)))\\n            count++;\\n            left++;\\n        }\\n        return count;\\n    }\\n    boolean vowel(char ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        return true;\\n        else return false;\\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for (int i=left;i<=right;i++)\\n        {\\n            if (isVowel(words[i].at(0)) && isVowel(words[i].at(words[i].size()-1)))\\n            count++;\\n        }\\n        return count;\\n    }\\n    bool isVowel(char s)\\n    {\\n        return (s==\\'a\\'||s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\');\\n    }\\n};\\n```\n```Python []\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        def isVowel(c):\\n            return c in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n        count=0\\n        for i in range(left,right+1):\\n            if isVowel(words[i][0]) and isVowel(words[i][-1]):\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3537246,
                "title": "simple-java-solution-for-beginners-ternary-operator-1ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++) {\\n            count +=  isVowel(words[i].charAt(0)) &&  isVowel(words[i].charAt(words[i].length() - 1)) ? 1 : 0;\\n        }\\n        return count;\\n    }\\n\\n    boolean isVowel(char ch) {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++) {\\n            count +=  isVowel(words[i].charAt(0)) &&  isVowel(words[i].charAt(words[i].length() - 1)) ? 1 : 0;\\n        }\\n        return count;\\n    }\\n\\n    boolean isVowel(char ch) {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3304233,
                "title": "easy-java-soln-o-n",
                "content": "# Intuition\\nAccessing strings from the words array one by one and checking whether they are vowel string or not. If Yes then increament the count variable by 1 else remains the count variable as it is.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n\\n        int count = 0;\\n\\n        for (int i = left; i <= right ; i++) {\\n\\n            String s = words[i];\\n\\n            if (Vowel (s.charAt(0)) && Vowel (s.charAt(s.length()-1))) {\\n\\n                count += 1;\\n            }\\n        }\\n\\n        return count;\\n        \\n    }\\n\\n    public boolean Vowel (char ch) {\\n\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') {\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n\\n        int count = 0;\\n\\n        for (int i = left; i <= right ; i++) {\\n\\n            String s = words[i];\\n\\n            if (Vowel (s.charAt(0)) && Vowel (s.charAt(s.length()-1))) {\\n\\n                count += 1;\\n            }\\n        }\\n\\n        return count;\\n        \\n    }\\n\\n    public boolean Vowel (char ch) {\\n\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') {\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3304232,
                "title": "fastest-solution-100",
                "content": "# Intuition\\n<!-- Traverse the array check whether a word start with a vowel or not and end with a vowel or not. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- O(n) -->\\n\\n- Space complexity:\\n<!-- O(1) -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left;i <= right;i++)\\n        {\\n            String s = words[i];\\n            int a = s.length() - 1;\\n            if((s.charAt(0) == \\'a\\' || s.charAt(0) == \\'e\\' || s.charAt(0) == \\'i\\' || s.charAt(0) == \\'o\\' || s.charAt(0) == \\'u\\') && (s.charAt(a) == \\'a\\' || s.charAt(a) == \\'e\\' || s.charAt(a) == \\'i\\' || s.charAt(a) == \\'o\\' || s.charAt(a) == \\'u\\'))\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left;i <= right;i++)\\n        {\\n            String s = words[i];\\n            int a = s.length() - 1;\\n            if((s.charAt(0) == \\'a\\' || s.charAt(0) == \\'e\\' || s.charAt(0) == \\'i\\' || s.charAt(0) == \\'o\\' || s.charAt(0) == \\'u\\') && (s.charAt(a) == \\'a\\' || s.charAt(a) == \\'e\\' || s.charAt(a) == \\'i\\' || s.charAt(a) == \\'o\\' || s.charAt(a) == \\'u\\'))\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3294448,
                "title": "python3-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels=\\'aeiouAEIOU\\'\\n        count=0\\n        for i in range(left,right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count+=1\\n\\n        return count        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels=\\'aeiouAEIOU\\'\\n        count=0\\n        for i in range(left,right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count+=1\\n\\n        return count        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3292698,
                "title": "8-line-easy-understand-c-code",
                "content": "```\\nint vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        unordered_set<char> s = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(int i = left; i<= right; i++){\\n            ans += (s.count(words[i][0]) && s.count(words[i][words[i].length()-1]));\\n        }\\n        return ans;\\n    }\\n\\t```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nint vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        unordered_set<char> s = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(int i = left; i<= right; i++){\\n            ans += (s.count(words[i][0]) && s.count(words[i][words[i].length()-1]));\\n        }\\n        return ans;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 3289031,
                "title": "java-easy-100-faster-must-checkout-once",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++){\\n            String temp = words[i];\\n            int e = temp.length()-1;\\n            if((temp.charAt(0) == \\'a\\' ||temp.charAt(0) == \\'e\\' ||temp.charAt(0) == \\'i\\' ||temp.charAt(0) == \\'o\\' ||temp.charAt(0) == \\'u\\') &&(temp.charAt(e) == \\'a\\' ||temp.charAt(e) == \\'e\\' ||temp.charAt(e) == \\'i\\' ||temp.charAt(e) == \\'o\\' ||temp.charAt(e) == \\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++){\\n            String temp = words[i];\\n            int e = temp.length()-1;\\n            if((temp.charAt(0) == \\'a\\' ||temp.charAt(0) == \\'e\\' ||temp.charAt(0) == \\'i\\' ||temp.charAt(0) == \\'o\\' ||temp.charAt(0) == \\'u\\') &&(temp.charAt(e) == \\'a\\' ||temp.charAt(e) == \\'e\\' ||temp.charAt(e) == \\'i\\' ||temp.charAt(e) == \\'o\\' ||temp.charAt(e) == \\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288315,
                "title": "c-easy-and-readable-solution-faster-than-100-less-than-100",
                "content": "![image.png](https://assets.leetcode.com/users/images/321ae49d-0eeb-40dd-abd8-ac0cdf48505e_1678625332.75124.png)\\n\\n**Don\\'t hesitate to suggest or ask bellow about something that you don\\'t understand**\\n\\n```\\npublic class Solution {\\n    public int VowelStrings(string[] words, int left, int right) {\\n        int counter = 0;\\n        string vowels = \"aeiou\";\\n        for (int i = left; i <= right; i++)\\n        {\\n            int length = words[i].Length - 1;\\n            if (vowels.Contains(words[i][0]) && vowels.Contains(words[i][length]))\\n                counter++;\\n        }\\n        return counter;\\n    }\\n}\\n```\\n\\nIf you like it don\\'t forget to **upvote!**",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int VowelStrings(string[] words, int left, int right) {\\n        int counter = 0;\\n        string vowels = \"aeiou\";\\n        for (int i = left; i <= right; i++)\\n        {\\n            int length = words[i].Length - 1;\\n            if (vowels.Contains(words[i][0]) && vowels.Contains(words[i][length]))\\n                counter++;\\n        }\\n        return counter;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3287525,
                "title": "javascript-js",
                "content": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function (words, left, right) {\\n  let result = 0;\\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\\n\\n  for (let i = left; i <= right; i++) {\\n    if (\\n      vowels.includes(words[i][0]) &&\\n      vowels.includes(words[i][words[i].length - 1])\\n    ) {\\n      result++;\\n    }\\n  }\\n\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function (words, left, right) {\\n  let result = 0;\\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\\n\\n  for (let i = left; i <= right; i++) {\\n    if (\\n      vowels.includes(words[i][0]) &&\\n      vowels.includes(words[i][words[i].length - 1])\\n    ) {\\n      result++;\\n    }\\n  }\\n\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3286365,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(const char&ch){\\n        return (ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;++i){\\n            if(isValid(words[i].front()) && isValid(words[i].back())){\\n                ++ans;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(const char&ch){\\n        return (ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;++i){\\n            if(isValid(words[i].front()) && isValid(words[i].back())){\\n                ++ans;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028071,
                "title": "2586-count-the-number-of-vowel-strings-in-range-using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            String a = words[i];\\n\\n            if (a.charAt(0) == \\'a\\' || a.charAt(0) == \\'e\\' || a.charAt(0) == \\'i\\' || a.charAt(0) == \\'o\\' || a.charAt(0) == \\'u\\') {\\n                if (a.charAt(a.length() - 1) == \\'a\\' || a.charAt(a.length() - 1) == \\'e\\' || a.charAt(a.length() - 1) == \\'i\\' || a.charAt(a.length() - 1) == \\'o\\' || a.charAt(a.length() - 1) == \\'u\\') {\\n                    count++;\\n                }\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            String a = words[i];\\n\\n            if (a.charAt(0) == \\'a\\' || a.charAt(0) == \\'e\\' || a.charAt(0) == \\'i\\' || a.charAt(0) == \\'o\\' || a.charAt(0) == \\'u\\') {\\n                if (a.charAt(a.length() - 1) == \\'a\\' || a.charAt(a.length() - 1) == \\'e\\' || a.charAt(a.length() - 1) == \\'i\\' || a.charAt(a.length() - 1) == \\'o\\' || a.charAt(a.length() - 1) == \\'u\\') {\\n                    count++;\\n                }\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959952,
                "title": "easy-solution-js-understanding-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function(words, left, right) {\\n  let vowelCount = 0\\n  let arr = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n  for (let i = left; i <= right; i++) {\\n    if (arr.includes(words[i].charAt(0)) && arr.includes(words[i].charAt(words[i].length-1))) {\\n      vowelCount+=1\\n    }\\n  }\\n  return vowelCount\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function(words, left, right) {\\n  let vowelCount = 0\\n  let arr = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n  for (let i = left; i <= right; i++) {\\n    if (arr.includes(words[i].charAt(0)) && arr.includes(words[i].charAt(words[i].length-1))) {\\n      vowelCount+=1\\n    }\\n  }\\n  return vowelCount\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3959138,
                "title": "javascript-with-reduce-and-slice-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function (words, left, right) {\\n  const vowel = \"aeiou\"\\n  return words.reduce((acc, item, index, array) => {\\n    if (\\n      index >= left &&\\n      index <= right &&\\n      vowel.includes(item.slice(0, 1)) &&\\n      vowel.includes(item.slice(item.length - 1, item.length))\\n    ) {\\n      acc += 1\\n    }\\n    return acc\\n  }, 0)\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function (words, left, right) {\\n  const vowel = \"aeiou\"\\n  return words.reduce((acc, item, index, array) => {\\n    if (\\n      index >= left &&\\n      index <= right &&\\n      vowel.includes(item.slice(0, 1)) &&\\n      vowel.includes(item.slice(item.length - 1, item.length))\\n    ) {\\n      acc += 1\\n    }\\n    return acc\\n  }, 0)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3819776,
                "title": "simple-recursive-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N) for the auxilliary stack-space if you want to consider it..\\nelse its O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nbool isVowel(char ch)\\n{\\n    if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n    {\\n        return true;\\n    }\\n    return false;\\n}\\nint f(int idx,vector<string>&words,int end)\\n{\\n    if(idx==end)\\n    {\\n        return isVowel(words[idx][0]) && isVowel(words[idx][words[idx].length()-1]);\\n    }\\n\\n    if(isVowel(words[idx][0]) && isVowel(words[idx][words[idx].length()-1]))\\n    {\\n        return 1+f(idx+1,words,end);\\n    }\\n    return 0+f(idx+1,words,end);\\n}\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        return f(left,words,right);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nbool isVowel(char ch)\\n{\\n    if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n    {\\n        return true;\\n    }\\n    return false;\\n}\\nint f(int idx,vector<string>&words,int end)\\n{\\n    if(idx==end)\\n    {\\n        return isVowel(words[idx][0]) && isVowel(words[idx][words[idx].length()-1]);\\n    }\\n\\n    if(isVowel(words[idx][0]) && isVowel(words[idx][words[idx].length()-1]))\\n    {\\n        return 1+f(idx+1,words,end);\\n    }\\n    return 0+f(idx+1,words,end);\\n}\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        return f(left,words,right);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3745292,
                "title": "easy-and-simple-approach-in-java-c-and-python-0-ms-runtime-in-java",
                "content": "```Java []\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        while(left<=right)\\n        {\\n            if(vowel(words[left].charAt(0))&&vowel(words[left].charAt(words[left].length()-1)))\\n            count++;\\n            left++;\\n        }\\n        return count;\\n    }\\n    boolean vowel(char ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        return true;\\n        else return false;\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for (int i=left;i<=right;i++)\\n        {\\n            if (isVowel(words[i].at(0)) && isVowel(words[i].at(words[i].size()-1)))\\n            count++;\\n        }\\n        return count;\\n    }\\n    bool isVowel(char s)\\n    {\\n        return (s==\\'a\\'||s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\');\\n    }\\n};\\n```\\n```Python []\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        def isVowel(c):\\n            return c in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n        count=0\\n        for i in range(left,right+1):\\n            if isVowel(words[i][0]) and isVowel(words[i][-1]):\\n                count+=1\\n        return count\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```Java []\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        while(left<=right)\\n        {\\n            if(vowel(words[left].charAt(0))&&vowel(words[left].charAt(words[left].length()-1)))\\n            count++;\\n            left++;\\n        }\\n        return count;\\n    }\\n    boolean vowel(char ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        return true;\\n        else return false;\\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for (int i=left;i<=right;i++)\\n        {\\n            if (isVowel(words[i].at(0)) && isVowel(words[i].at(words[i].size()-1)))\\n            count++;\\n        }\\n        return count;\\n    }\\n    bool isVowel(char s)\\n    {\\n        return (s==\\'a\\'||s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\');\\n    }\\n};\\n```\n```Python []\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        def isVowel(c):\\n            return c in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n        count=0\\n        for i in range(left,right+1):\\n            if isVowel(words[i][0]) and isVowel(words[i][-1]):\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595895,
                "title": "beginner-s-approach",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        // String vowel=\"aeiouAEIOU\";\\n        String vowel=\"aeiou\";\\n\\n        int count=0;\\n\\n        for(int i=left;i<=right;i++){\\n            if(vowel.contains(String.valueOf(words[i].charAt(0))) && vowel.contains(String.valueOf(words[i].charAt(words[i].length()-1)))) count++;\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        // String vowel=\"aeiouAEIOU\";\\n        String vowel=\"aeiou\";\\n\\n        int count=0;\\n\\n        for(int i=left;i<=right;i++){\\n            if(vowel.contains(String.valueOf(words[i].charAt(0))) && vowel.contains(String.valueOf(words[i].charAt(words[i].length()-1)))) count++;\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3566620,
                "title": "count-the-number-of-vowel-strings-in-range-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int i, vowel_count=0;\\n        for(i=left ; i<=right ; i++)\\n        {\\n            if((words[i][0]==\\'a\\' || words[i][0]==\\'e\\' ||words[i][0]==\\'i\\' ||words[i][0]==\\'o\\' ||words[i][0]==\\'u\\') && (words[i][words[i].length()-1]==\\'a\\' || words[i][words[i].length()-1]==\\'e\\' ||words[i][words[i].length()-1]==\\'i\\' ||words[i][words[i].length()-1]==\\'o\\' ||words[i][words[i].length()-1]==\\'u\\'))\\n            {\\n                vowel_count++;\\n            }\\n        }\\n        return vowel_count;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/1754f8a7-9e1f-4637-b386-02379ee617b4_1685161188.895786.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int i, vowel_count=0;\\n        for(i=left ; i<=right ; i++)\\n        {\\n            if((words[i][0]==\\'a\\' || words[i][0]==\\'e\\' ||words[i][0]==\\'i\\' ||words[i][0]==\\'o\\' ||words[i][0]==\\'u\\') && (words[i][words[i].length()-1]==\\'a\\' || words[i][words[i].length()-1]==\\'e\\' ||words[i][words[i].length()-1]==\\'i\\' ||words[i][words[i].length()-1]==\\'o\\' ||words[i][words[i].length()-1]==\\'u\\'))\\n            {\\n                vowel_count++;\\n            }\\n        }\\n        return vowel_count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3537242,
                "title": "simple-java-solution-for-beginners-1ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++) {\\n            if(isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length() - 1))) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    boolean isVowel(char ch) {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++) {\\n            if(isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length() - 1))) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    boolean isVowel(char ch) {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490504,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVovel(char ch){\\n        return (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int sol = 0;\\n        for(int i = left; i <= right; i++){\\n            if(isVovel(words[i][0])&&isVovel(words[i][words[i].size()-1]))sol++;\\n        }\\n        return sol;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVovel(char ch){\\n        return (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\');\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int sol = 0;\\n        for(int i = left; i <= right; i++){\\n            if(isVovel(words[i][0])&&isVovel(words[i][words[i].size()-1]))sol++;\\n        }\\n        return sol;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3451363,
                "title": "c-python-easy-o-n-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        unordered_set<int> st {\\'a\\', \\'e\\',\\'i\\', \\'o\\', \\'u\\'};\\n        int count = 0;\\n        for(int i = left; i <= right; i++) {\\n            if(st.find(words[i][0]) != st.end() && st.find(words[i][words[i].size()-1]) != st.end()) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```\\n\\n# Python / Python3\\n```\\nclass Solution:\\n    def vowelStrings(self, word: List[str], left: int, right: int) -> int:\\n        count = 0\\n        st = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'}\\n        for i in range(left, right+1):\\n            if(word[i][0] in st and word[i][len(word[i]) - 1] in st):\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        unordered_set<int> st {\\'a\\', \\'e\\',\\'i\\', \\'o\\', \\'u\\'};\\n        int count = 0;\\n        for(int i = left; i <= right; i++) {\\n            if(st.find(words[i][0]) != st.end() && st.find(words[i][words[i].size()-1]) != st.end()) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def vowelStrings(self, word: List[str], left: int, right: int) -> int:\\n        count = 0\\n        st = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'}\\n        for i in range(left, right+1):\\n            if(word[i][0] in st and word[i][len(word[i]) - 1] in st):\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3418289,
                "title": "smartest-way-with-java-1ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isVovel(char a){\\n        return a == \\'a\\' || a == \\'e\\' || a == \\'i\\' || a == \\'o\\' || a == \\'u\\';\\n    }\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String vovels = \"aeiou\";\\n        int    count  = 0;\\n        for(int a = left; a <= right; a++){\\n            String word = words[a];\\n            char cap  = word.charAt(0);\\n            char last = word.charAt(word.length()-1);\\n            if(isVovel(cap) && isVovel(last)){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isVovel(char a){\\n        return a == \\'a\\' || a == \\'e\\' || a == \\'i\\' || a == \\'o\\' || a == \\'u\\';\\n    }\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String vovels = \"aeiou\";\\n        int    count  = 0;\\n        for(int a = left; a <= right; a++){\\n            String word = words[a];\\n            char cap  = word.charAt(0);\\n            char last = word.charAt(word.length()-1);\\n            if(isVovel(cap) && isVovel(last)){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362856,
                "title": "different-approach",
                "content": "# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(5)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        unordered_map<char, int> check={{\\'a\\', 1}, {\\'e\\', 1}, {\\'i\\', 1}, {\\'o\\', 1}, {\\'u\\', 1}};\\n        int cnt = 0;\\n        for(int i = left; i <= right; i++)\\n            if(check.count(words[i][0]) and check.count(words[i][words[i].length()-1]))\\n                cnt++;\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        unordered_map<char, int> check={{\\'a\\', 1}, {\\'e\\', 1}, {\\'i\\', 1}, {\\'o\\', 1}, {\\'u\\', 1}};\\n        int cnt = 0;\\n        for(int i = left; i <= right; i++)\\n            if(check.count(words[i][0]) and check.count(words[i][words[i].length()-1]))\\n                cnt++;\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3356363,
                "title": "easy-to-understand-python-solution-beats-90-of-other-solutions",
                "content": "Please Upvote if you like it.\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        a = [\"a\",\"e\",\"i\",\"o\",\"u\"]\\n        count = 0\\n        for i in range(left,right+1):\\n            temp= words[i]\\n            if temp[0] in a and temp[-1] in a:\\n                count += 1\\n        return count",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "Please Upvote if you like it.\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        a = [\"a\",\"e\",\"i\",\"o\",\"u\"]\\n        count = 0\\n        for i in range(left,right+1):\\n            temp= words[i]\\n            if temp[0] in a and temp[-1] in a:\\n                count += 1\\n        return count",
                "codeTag": "Java"
            },
            {
                "id": 3347821,
                "title": "faster-than-94-very-easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function(s, left, right) {\\n  let vowel = [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n  let count = 0 \\n  for(let i = left ; i <= right ;i++){\\n      if(vowel.includes(s[i][0]) && vowel.includes(s[i][s[i].length -1])){\\n          count +=1\\n      }\\n  }  \\n  return count \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function(s, left, right) {\\n  let vowel = [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n  let count = 0 \\n  for(let i = left ; i <= right ;i++){\\n      if(vowel.includes(s[i][0]) && vowel.includes(s[i][s[i].length -1])){\\n          count +=1\\n      }\\n  }  \\n  return count \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3335433,
                "title": "as-simple-as-it-is-60ms-readable-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        k = 0\\n        for i in range(left, right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                k += 1\\n        return k\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        k = 0\\n        for i in range(left, right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                k += 1\\n        return k\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3334243,
                "title": "simple-python-iterative-approach",
                "content": "# Intuition\\nThis a simple string problem. We can solve it simple iterative approach.\\n\\n# Approach\\nIterative approach.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ - Linear Time\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$ - Constant Time\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isVowel(self, char):\\n        return True if char in (\\'A\\', \\'E\\', \\'I\\', \\'O\\', \\'U\\', \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\') else False\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count = 0\\n        for i in range(left, right+1):\\n            wordLen = len(words[i])\\n            if self.isVowel(words[i][0]) and self.isVowel(words[i][-1]):\\n                count += 1 \\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isVowel(self, char):\\n        return True if char in (\\'A\\', \\'E\\', \\'I\\', \\'O\\', \\'U\\', \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\') else False\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count = 0\\n        for i in range(left, right+1):\\n            wordLen = len(words[i])\\n            if self.isVowel(words[i][0]) and self.isVowel(words[i][-1]):\\n                count += 1 \\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3327759,
                "title": "easy-java-solution-with-1ms-runtime-tc-o-n-beats-100",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) \\n    {\\n        int countOfVowelStrings = 0;\\n\\n        for(int idx=left; idx<=right; idx++)\\n        {\\n            countOfVowelStrings += \\n            isVowel(words[idx].charAt(0)) && \\n            isVowel(words[idx].charAt(words[idx].length()-1))\\n            ? 1 : 0;\\n        }\\n\\n        return countOfVowelStrings;\\n    }\\n    public boolean isVowel(char ch)\\n    {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) \\n    {\\n        int countOfVowelStrings = 0;\\n\\n        for(int idx=left; idx<=right; idx++)\\n        {\\n            countOfVowelStrings += \\n            isVowel(words[idx].charAt(0)) && \\n            isVowel(words[idx].charAt(words[idx].length()-1))\\n            ? 1 : 0;\\n        }\\n\\n        return countOfVowelStrings;\\n    }\\n    public boolean isVowel(char ch)\\n    {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3314712,
                "title": "simple-java-solution-beats-100-simple-looping",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left;i<right+1;i++){\\n            String query = words[i];\\n            if(isVowel(query.charAt(0)) && isVowel(query.charAt(query.length()-1))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n\\n    public boolean isVowel(char c){\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left;i<right+1;i++){\\n            String query = words[i];\\n            if(isVowel(query.charAt(0)) && isVowel(query.charAt(query.length()-1))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n\\n    public boolean isVowel(char c){\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3307876,
                "title": "beats-100-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int p=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            int k=words[i].charAt(0);\\n            int s=words[i].charAt(words[i].length()-1);\\n            if((k==\\'a\\'||k==\\'e\\'||k==\\'i\\'||k==\\'o\\'||k==\\'u\\') && (s==\\'a\\'||s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\'))\\n            p++;\\n        }\\n        return p;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int p=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            int k=words[i].charAt(0);\\n            int s=words[i].charAt(words[i].length()-1);\\n            if((k==\\'a\\'||k==\\'e\\'||k==\\'i\\'||k==\\'o\\'||k==\\'u\\') && (s==\\'a\\'||s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\'))\\n            p++;\\n        }\\n        return p;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306149,
                "title": "swift-easy-to-understand-and-simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    func vowelStrings(_ words: [String], _ left: Int, _ right: Int) -> Int {\\n        let vowels = \"aeiou\"\\n        var ans = 0\\n        \\n        for i in left...right{\\n            if vowels.contains(words[i].first!) && vowels.contains(words[i].last!){\\n                ans += 1\\n            }\\n        }\\n        \\n        return  ans\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func vowelStrings(_ words: [String], _ left: Int, _ right: Int) -> Int {\\n        let vowels = \"aeiou\"\\n        var ans = 0\\n        \\n        for i in left...right{\\n            if vowels.contains(words[i].first!) && vowels.contains(words[i].last!){\\n                ans += 1\\n            }\\n        }\\n        \\n        return  ans\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3303948,
                "title": "easy-solution",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\n\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans =0;\\n        for(int i = left ; i<=right; i++){\\n            string f = words[i];\\n            int si = words[i].size();\\n            if((f[0]==\\'a\\'||f[0]==\\'e\\'||f[0]==\\'i\\'||f[0]==\\'o\\'||f[0]==\\'u\\')&&(f[si-1]==\\'a\\' || f[si-1]==\\'e\\'|| f[si-1]==\\'i\\' || f[si-1]==\\'o\\' || f[si-1]==\\'u\\') ){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans =0;\\n        for(int i = left ; i<=right; i++){\\n            string f = words[i];\\n            int si = words[i].size();\\n            if((f[0]==\\'a\\'||f[0]==\\'e\\'||f[0]==\\'i\\'||f[0]==\\'o\\'||f[0]==\\'u\\')&&(f[si-1]==\\'a\\' || f[si-1]==\\'e\\'|| f[si-1]==\\'i\\' || f[si-1]==\\'o\\' || f[si-1]==\\'u\\') ){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3302626,
                "title": "java-easy-solution",
                "content": "\\uD83D\\uDD25\\uD83D\\uDD25Please Upvote\\u2B06\\uFE0F and give a \\u2B50 if you like the solution. \\uD83D\\uDD25\\uD83D\\uDD25\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        \\n        int ans = 0;\\n        for(int i = left;i<=right;i++){\\n            String str = words[i];\\n            char ch1 = str.charAt(0);\\n            char ch2 = str.charAt(str.length() - 1);\\n            if( (ch1 == \\'a\\' || ch1 == \\'e\\' || ch1 == \\'i\\' || ch1 == \\'o\\' || ch1 == \\'u\\') &&\\n            (ch2 == \\'a\\' || ch2 == \\'e\\' || ch2 == \\'i\\' || ch2 == \\'o\\' || ch2 == \\'u\\') ){\\n                ans++;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```\\n\\n\\uD83D\\uDD25\\uD83D\\uDD25Please Upvote\\u2B06\\uFE0F and give a \\u2B50 if you like the solution. \\uD83D\\uDD25\\uD83D\\uDD25",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        \\n        int ans = 0;\\n        for(int i = left;i<=right;i++){\\n            String str = words[i];\\n            char ch1 = str.charAt(0);\\n            char ch2 = str.charAt(str.length() - 1);\\n            if( (ch1 == \\'a\\' || ch1 == \\'e\\' || ch1 == \\'i\\' || ch1 == \\'o\\' || ch1 == \\'u\\') &&\\n            (ch2 == \\'a\\' || ch2 == \\'e\\' || ch2 == \\'i\\' || ch2 == \\'o\\' || ch2 == \\'u\\') ){\\n                ans++;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3300984,
                "title": "easiest-solution-beats-95-very-intuitive",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\niterate through left position to right position and check each string if it is vowerl string or not\\n# Complexity\\n- Time complexity:\\nworst case time complexity O(n)\\n\\n- Space complexity:\\n Constant O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt = 0;\\n        // char list[5] = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(int i=left;i<=right;i++){\\n            char s = words[i][0];\\n            char e = words[i][words[i].size()-1];\\n            if(cmp(s) && cmp(e)){\\n                cnt++;\\n            }\\n           \\n        }\\n        return cnt;\\n    }\\n\\n    bool cmp(char a){\\n         return a==\\'a\\'|| a==\\'e\\'||a==\\'i\\'||a==\\'o\\'||a==\\'u\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt = 0;\\n        // char list[5] = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(int i=left;i<=right;i++){\\n            char s = words[i][0];\\n            char e = words[i][words[i].size()-1];\\n            if(cmp(s) && cmp(e)){\\n                cnt++;\\n            }\\n           \\n        }\\n        return cnt;\\n    }\\n\\n    bool cmp(char a){\\n         return a==\\'a\\'|| a==\\'e\\'||a==\\'i\\'||a==\\'o\\'||a==\\'u\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3300750,
                "title": "a-joke",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right)   \\n    {\\n        int count = 0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            string word = words[i];\\n            if(fun(word[0]) == true and fun(word[word.length()-1]) == true)\\n            {\\n                count++;\\n            }\\n        }    \\n        return count;\\n    }\\n    bool fun(char ch)\\n    {\\n        if(ch == \\'a\\') return true;\\n        if(ch == \\'e\\') return true;\\n        if(ch == \\'i\\') return true;\\n        if(ch == \\'o\\') return true;\\n        if(ch == \\'u\\') return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right)   \\n    {\\n        int count = 0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            string word = words[i];\\n            if(fun(word[0]) == true and fun(word[word.length()-1]) == true)\\n            {\\n                count++;\\n            }\\n        }    \\n        return count;\\n    }\\n    bool fun(char ch)\\n    {\\n        if(ch == \\'a\\') return true;\\n        if(ch == \\'e\\') return true;\\n        if(ch == \\'i\\') return true;\\n        if(ch == \\'o\\') return true;\\n        if(ch == \\'u\\') return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3300259,
                "title": "one-linear-solution-slice-filter-set",
                "content": "# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nconst vowelCharactersSet = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']);\\nvar vowelStrings = function(words, left, right) {\\n    return words\\n        .slice(left, right + 1)\\n        .filter(word => vowelCharactersSet.has(word[0]) && vowelCharactersSet.has(word.at(-1)))\\n        .length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nconst vowelCharactersSet = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']);\\nvar vowelStrings = function(words, left, right) {\\n    return words\\n        .slice(left, right + 1)\\n        .filter(word => vowelCharactersSet.has(word[0]) && vowelCharactersSet.has(word.at(-1)))\\n        .length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3299740,
                "title": "easy-java-solution-using-if",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n       int ct = 0;\\n       for(int i = left ; i <= right ; i++)\\n       {\\n           String s = words[i];\\n           if((s.charAt(0) != \\'a\\' && s.charAt(0) != \\'e\\' && s.charAt(0) != \\'i\\' && s.charAt(0) != \\'o\\' && s.charAt(0) != \\'u\\') || (s.charAt(s.length() - 1) != \\'a\\' && s.charAt(s.length() - 1) != \\'e\\' && s.charAt(s.length() - 1) != \\'i\\' && s.charAt(s.length() - 1) != \\'o\\' && s.charAt(s.length() - 1) != \\'u\\'))\\n           {\\n               continue;\\n           } \\n           ct++; \\n       }\\n       return ct; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n       int ct = 0;\\n       for(int i = left ; i <= right ; i++)\\n       {\\n           String s = words[i];\\n           if((s.charAt(0) != \\'a\\' && s.charAt(0) != \\'e\\' && s.charAt(0) != \\'i\\' && s.charAt(0) != \\'o\\' && s.charAt(0) != \\'u\\') || (s.charAt(s.length() - 1) != \\'a\\' && s.charAt(s.length() - 1) != \\'e\\' && s.charAt(s.length() - 1) != \\'i\\' && s.charAt(s.length() - 1) != \\'o\\' && s.charAt(s.length() - 1) != \\'u\\'))\\n           {\\n               continue;\\n           } \\n           ct++; \\n       }\\n       return ct; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299724,
                "title": "easy-solution-using-for-loop-in-python",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        d=[\"a\",\"e\",\"i\",\"o\",\"u\"]\\n        c=0\\n        for i in range(left,right+1):\\n            if(words[i][0] in d and words[i][-1] in d):\\n                c=c+1\\n        return c\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        d=[\"a\",\"e\",\"i\",\"o\",\"u\"]\\n        c=0\\n        for i in range(left,right+1):\\n            if(words[i][0] in d and words[i][-1] in d):\\n                c=c+1\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299396,
                "title": "easy-solution-using-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        count = 0\\n        for i in range(left, right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                print(words[i],count)\\n                count += 1\\n\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        count = 0\\n        for i in range(left, right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                print(words[i],count)\\n                count += 1\\n\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299116,
                "title": "easy-java-solution-100-1ms-o-n",
                "content": "\\n\\n# Java Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int cnt =0;\\n        for(int i =left;i<=right;i++) {\\n            int n = words[i].length();\\n\\n            if( (words[i].charAt(0)==\\'a\\' ||\\n            words[i].charAt(0)==\\'e\\' ||\\n            words[i].charAt(0)==\\'i\\' ||\\n            words[i].charAt(0)==\\'o\\' ||\\n            words[i].charAt(0)==\\'u\\')  &&\\n           (words[i].charAt(n-1)==\\'a\\' ||\\n           words[i].charAt(n-1) ==\\'e\\' ||\\n           words[i].charAt(n-1)==\\'i\\' ||\\n           words[i].charAt(n-1) ==\\'o\\' ||\\n           words[i].charAt(n-1)==\\'u\\'\\n           )) {\\n               cnt++;\\n           }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int cnt =0;\\n        for(int i =left;i<=right;i++) {\\n            int n = words[i].length();\\n\\n            if( (words[i].charAt(0)==\\'a\\' ||\\n            words[i].charAt(0)==\\'e\\' ||\\n            words[i].charAt(0)==\\'i\\' ||\\n            words[i].charAt(0)==\\'o\\' ||\\n            words[i].charAt(0)==\\'u\\')  &&\\n           (words[i].charAt(n-1)==\\'a\\' ||\\n           words[i].charAt(n-1) ==\\'e\\' ||\\n           words[i].charAt(n-1)==\\'i\\' ||\\n           words[i].charAt(n-1) ==\\'o\\' ||\\n           words[i].charAt(n-1)==\\'u\\'\\n           )) {\\n               cnt++;\\n           }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3298545,
                "title": "count-the-number-of-vowel-strings-in-range-java-2ms-beats-57-60",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code counts the number of strings within the given range that are vowel strings. A vowel string is defined as a string where the first and last characters are vowels.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code uses a brute force approach to iterate over each string in the given range and checks if it\\'s a vowel string by checking the first and last characters of the string.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution is O(n * m), where n is the length of the given range and m is the maximum length of the string in the range. This is because the code iterates over each string in the range and then checks the first and last characters of each string.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the solution is O(1), because the code only uses a constant amount of extra space to store the count variable and the characters of each string while checking for vowels.\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left ; i <= right ; i++)\\n        {\\n            if(isVowelString(words[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    private boolean isVowelString(String word)\\n    {\\n        char first = word.charAt(0);\\n        char last  = word.charAt(word.length() - 1);\\n        return isVowel(first) && isVowel(last);\\n    }\\n\\n    private boolean isVowel(char c)\\n    {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left ; i <= right ; i++)\\n        {\\n            if(isVowelString(words[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    private boolean isVowelString(String word)\\n    {\\n        char first = word.charAt(0);\\n        char last  = word.charAt(word.length() - 1);\\n        return isVowel(first) && isVowel(last);\\n    }\\n\\n    private boolean isVowel(char c)\\n    {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3296390,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n\\t\\tfor(int i=left;i<=right;i++) {\\n\\t\\t\\tif(words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' ||words[i].charAt(0)==\\'i\\'||words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') {\\n\\t\\t\\t\\tif(words[i].charAt(words[i].length()-1)==\\'a\\' ||words[i].charAt(words[i].length()-1)==\\'e\\'||words[i].charAt(words[i].length()-1)==\\'i\\'||words[i].charAt(words[i].length()-1)==\\'o\\'||words[i].charAt(words[i].length()-1)==\\'u\\') {\\n\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n\\t\\tfor(int i=left;i<=right;i++) {\\n\\t\\t\\tif(words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' ||words[i].charAt(0)==\\'i\\'||words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') {\\n\\t\\t\\t\\tif(words[i].charAt(words[i].length()-1)==\\'a\\' ||words[i].charAt(words[i].length()-1)==\\'e\\'||words[i].charAt(words[i].length()-1)==\\'i\\'||words[i].charAt(words[i].length()-1)==\\'o\\'||words[i].charAt(words[i].length()-1)==\\'u\\') {\\n\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3296371,
                "title": "beats-100",
                "content": "# Code\\n```\\nclass Solution {\\n    public static boolean check(int i,int idx,String words[])\\n    {\\n        return words[idx].charAt(i)==\\'a\\' || words[idx].charAt(i)==\\'e\\' || words[idx].charAt(i)==\\'i\\' || words[idx].charAt(i)==\\'u\\' || words[idx].charAt(i)==\\'o\\';\\n    }\\n    public int vowelStrings(String[] words, int left, int right) \\n    {\\n        int ans=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            if(check(0,i,words) && check(words[i].length()-1,i,words))\\n            {\\n                ans+=1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static boolean check(int i,int idx,String words[])\\n    {\\n        return words[idx].charAt(i)==\\'a\\' || words[idx].charAt(i)==\\'e\\' || words[idx].charAt(i)==\\'i\\' || words[idx].charAt(i)==\\'u\\' || words[idx].charAt(i)==\\'o\\';\\n    }\\n    public int vowelStrings(String[] words, int left, int right) \\n    {\\n        int ans=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            if(check(0,i,words) && check(words[i].length()-1,i,words))\\n            {\\n                ans+=1;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3293048,
                "title": "python-and-swift-solved",
                "content": "# Code Python one-line version\\n![image.png](https://assets.leetcode.com/users/images/376cdccf-b82e-4a2e-972b-b165f909722e_1678727888.3362901.png)\\n\\n```\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        return len([1 for i in range(left, 1 + right) if words[i][0] in \\'aeiou\\' and words[i][-1] in \\'aeiou\\'])\\n\\n\\n```\\n# Code Python \\n![image.png](https://assets.leetcode.com/users/images/65cd1432-e813-48ce-b3d7-2326a5846d5c_1678727962.9368517.png)\\n\\n```\\nclass Solution:\\n    def vowelStrings(self, w: List[str], left: int, right: int) -> int:\\n        vowel = \\'aeiou\\'\\n        res = 0\\n        for i in range(left, 1 + right):\\n            if w[i][0] in vowel and w[i][-1] in vowel:\\n                res += 1\\n        return res\\n\\n\\n```\\n# Code Swift\\n![image.png](https://assets.leetcode.com/users/images/726dc6d9-597c-4d5d-a891-60d969326d0f_1678728028.997501.png)\\n\\n```\\nclass Solution {\\n    func vowelStrings(_ w: [String], _ left: Int, _ right: Int) -> Int {\\n        let vowel: Set<Character> = Set([\"a\", \"e\", \"i\", \"o\", \"u\"])\\n        var res = 0\\n        for i in left...right {\\n            if vowel.contains(w[i].first!) && vowel.contains(w[i].last!) {\\n                res += 1\\n            }\\n        }\\n        return res\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Swift",
                    "String"
                ],
                "code": "```\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        return len([1 for i in range(left, 1 + right) if words[i][0] in \\'aeiou\\' and words[i][-1] in \\'aeiou\\'])\\n\\n\\n```\n```\\nclass Solution:\\n    def vowelStrings(self, w: List[str], left: int, right: int) -> int:\\n        vowel = \\'aeiou\\'\\n        res = 0\\n        for i in range(left, 1 + right):\\n            if w[i][0] in vowel and w[i][-1] in vowel:\\n                res += 1\\n        return res\\n\\n\\n```\n```\\nclass Solution {\\n    func vowelStrings(_ w: [String], _ left: Int, _ right: Int) -> Int {\\n        let vowel: Set<Character> = Set([\"a\", \"e\", \"i\", \"o\", \"u\"])\\n        var res = 0\\n        for i in left...right {\\n            if vowel.contains(w[i].first!) && vowel.contains(w[i].last!) {\\n                res += 1\\n            }\\n        }\\n        return res\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3292878,
                "title": "python3-beats-100",
                "content": "![image.png](https://assets.leetcode.com/users/images/09cffe23-daab-4e6b-b91b-358cec4bd909_1678725841.6369755.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels=\"aeiou\"\\n        count=0\\n        for i in range(left,right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count+=1\\n        return count\\n```\\n# Please upvote if you find the solution helpful.",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        vowels=\"aeiou\"\\n        count=0\\n        for i in range(left,right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288581,
                "title": "python3-very-simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        ans=0\\n        vol=\"aeiou\"\\n\\n        for i in range(left,right+1):\\n            if words[i][0] in vol and words[i][-1] in vol:\\n                ans+=1\\n        return ans \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        ans=0\\n        vol=\"aeiou\"\\n\\n        for i in range(left,right+1):\\n            if words[i][0] in vol and words[i][-1] in vol:\\n                ans+=1\\n        return ans \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288232,
                "title": "easy-c-solution",
                "content": "# Intuition\\n\\n# Approach\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ \\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    bool checkVowel(char c){\\n        return (c ==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\');\\n    }\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        for(int i=left;i<=right;i++){\\n            string temp = words[i];\\n            if(checkVowel(temp.front()) && checkVowel(temp.back())) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    bool checkVowel(char c){\\n        return (c ==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\');\\n    }\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        for(int i=left;i<=right;i++){\\n            string temp = words[i];\\n            if(checkVowel(temp.front()) && checkVowel(temp.back())) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3287862,
                "title": "rust-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn vowel_strings(words: Vec<String>, left: i32, right: i32) -> i32 {\\n        words\\n            .iter()\\n            .skip(left as usize)\\n            .take((right - left + 1) as usize)\\n            .filter(|s| {\\n                s.starts_with([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']) && s.ends_with([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n            })\\n            .count() as _\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "String",
                    "Iterator"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn vowel_strings(words: Vec<String>, left: i32, right: i32) -> i32 {\\n        words\\n            .iter()\\n            .skip(left as usize)\\n            .take((right - left + 1) as usize)\\n            .filter(|s| {\\n                s.starts_with([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']) && s.ends_with([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n            })\\n            .count() as _\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3287746,
                "title": "scala-1-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nobject Solution {\\n    def vowelStrings(words: Array[String], left: Int, right: Int): Int = \\n        words.drop(left).take(right -left + 1).filter(n =>\"aeiou\".contains(n.head) & \"aeiou\".contains(n.last)).size\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def vowelStrings(words: Array[String], left: Int, right: Int): Int = \\n        words.drop(left).take(right -left + 1).filter(n =>\"aeiou\".contains(n.head) & \"aeiou\".contains(n.last)).size\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3286758,
                "title": "simple-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            char l=words[i].charAt(0);\\n            char r=words[i].charAt(words[i].length()-1);\\n            if((l==\\'a\\'||l==\\'e\\'||l==\\'i\\'||l==\\'o\\'||l==\\'u\\') && (r==\\'a\\'||r==\\'e\\'||r==\\'i\\'||r==\\'o\\'||r==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            char l=words[i].charAt(0);\\n            char r=words[i].charAt(words[i].length()-1);\\n            if((l==\\'a\\'||l==\\'e\\'||l==\\'i\\'||l==\\'o\\'||l==\\'u\\') && (r==\\'a\\'||r==\\'e\\'||r==\\'i\\'||r==\\'o\\'||r==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286602,
                "title": "c-easy-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    bool checkVowel(string s){\\n        string vowel = \"aeiou\";\\n        int n = s.length()-1;\\n        \\n        if(vowel.find(s[0])!=string::npos && vowel.find(s[n])!=string::npos){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int res = 0;\\n        for(int i=left; i<=right; i++){\\n            if(checkVowel(words[i])){\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool checkVowel(string s){\\n        string vowel = \"aeiou\";\\n        int n = s.length()-1;\\n        \\n        if(vowel.find(s[0])!=string::npos && vowel.find(s[n])!=string::npos){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int res = 0;\\n        for(int i=left; i<=right; i++){\\n            if(checkVowel(words[i])){\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286499,
                "title": "simple-python3-o-n-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        res = 0\\n        for i in range(left, right + 1):\\n            if words[i][0] in \\'aeiou\\' and words[i][-1] in \\'aeiou\\':\\n                res += 1\\n        return res\\n```\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        res = 0\\n        for i in range(left, right + 1):\\n            if words[i][0] in \\'aeiou\\' and words[i][-1] in \\'aeiou\\':\\n                res += 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286487,
                "title": "simple-c-soln",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            string word = words[i];\\n            if (isVowel(word[0]) && isVowel(word[word.size() - 1])) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    \\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            string word = words[i];\\n            if (isVowel(word[0]) && isVowel(word[word.size() - 1])) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    \\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286353,
                "title": "easy-to-understand-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isvo(char v){\\n        if(v==\\'a\\' || v==\\'e\\' || v==\\'i\\' || v==\\'o\\' || v==\\'u\\')return 1;\\n        return 0;\\n    }\\n    int vowelStrings(vector<string>& word, int left, int right) {\\n        \\n        int cnt=0;\\n        for(int i=left;i<=right;i++){\\n            if(isvo(word[i][0]) && isvo( word[i][word[i].length()-1] ))cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isvo(char v){\\n        if(v==\\'a\\' || v==\\'e\\' || v==\\'i\\' || v==\\'o\\' || v==\\'u\\')return 1;\\n        return 0;\\n    }\\n    int vowelStrings(vector<string>& word, int left, int right) {\\n        \\n        int cnt=0;\\n        for(int i=left;i<=right;i++){\\n            if(isvo(word[i][0]) && isvo( word[i][word[i].length()-1] ))cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286347,
                "title": "simple-brute-force",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char c){\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        for(int i = left; i <= right; ++i){\\n            if(isVowel(words[i][0]) && isVowel(words[i][words[i].size() - 1]))  ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char c){\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans = 0;\\n        for(int i = left; i <= right; ++i){\\n            if(isVowel(words[i][0]) && isVowel(words[i][words[i].size() - 1]))  ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286344,
                "title": "1ms-java-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++){\\n            if(isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length()-1))){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n    public boolean isVowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++){\\n            if(isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length()-1))){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n    public boolean isVowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286338,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool f(char c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        for(int i=left;i<=right;i++){\\n            string s=words[i];\\n            int n=s.size();\\n            if(f(s[0]) && f(s[n-1]))cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool f(char c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        for(int i=left;i<=right;i++){\\n            string s=words[i];\\n            int n=s.size();\\n            if(f(s[0]) && f(s[n-1]))cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286324,
                "title": "simple-java-solution-beats-100-no-set-less-than-100-space",
                "content": "Do `UPVOTE` \\u2B50\\uD83D\\uDC4D\\uD83C\\uDFFB\\n```\\nString vowel = \"aeiou\";\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;++i){\\n           if(func(words[i])) c++; \\n        }\\n        return c;\\n    }\\n    boolean func(String s){\\n      char f = s.charAt(0);\\n      char l = s.charAt(s.length() - 1);\\n      return ((vowel.indexOf(f) != -1) && (vowel.indexOf(l) != -1));\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nString vowel = \"aeiou\";\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;++i){\\n           if(func(words[i])) c++; \\n        }\\n        return c;\\n    }\\n    boolean func(String s){\\n      char f = s.charAt(0);\\n      char l = s.charAt(s.length() - 1);\\n      return ((vowel.indexOf(f) != -1) && (vowel.indexOf(l) != -1));\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3286276,
                "title": "easiest-solution-c-beginners-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            string s=words[i];\\n            int n=s.size();\\n            if((s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0]==\\'u\\') && (s[n-1]==\\'a\\' || s[n-1]==\\'e\\' || s[n-1]==\\'i\\' || s[n-1]==\\'o\\' || s[n-1]==\\'u\\'))\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            string s=words[i];\\n            int n=s.size();\\n            if((s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0]==\\'u\\') && (s[n-1]==\\'a\\' || s[n-1]==\\'e\\' || s[n-1]==\\'i\\' || s[n-1]==\\'o\\' || s[n-1]==\\'u\\'))\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3286265,
                "title": "c-simple-check-first-and-last-character",
                "content": "```\\nclass Solution {\\npublic:\\n    bool help(string s){\\n        if((s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0] == \\'u\\') && \\n           ((s[s.size()-1]==\\'a\\' || s[s.size()-1]==\\'e\\' || s[s.size()-1]==\\'i\\' || s[s.size()-1]==\\'o\\' || s[s.size()-1] == \\'u\\'))\\n          ){\\n            return true;\\n        }\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++){\\n            if(help(words[i])){\\n                ans+=1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool help(string s){\\n        if((s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0] == \\'u\\') && \\n           ((s[s.size()-1]==\\'a\\' || s[s.size()-1]==\\'e\\' || s[s.size()-1]==\\'i\\' || s[s.size()-1]==\\'o\\' || s[s.size()-1] == \\'u\\'))\\n          ){\\n            return true;\\n        }\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++){\\n            if(help(words[i])){\\n                ans+=1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097962,
                "title": "runtime-1ms-42-89mb-beats-100-in-runtime-and-87-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhile loop and switch case is faster hence using both to get best performance\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int result = 0;\\n        while (left<=right){\\n            if(isVowel(words[left].charAt(0)) && isVowel(words[left].charAt(words[left].length()-1))){\\n                result++;\\n            }\\n            left++;\\n        }\\n        return result;\\n    }\\n\\n    private boolean isVowel(char c){\\n        switch (c){\\n            case \\'a\\':\\n            case \\'e\\':\\n            case \\'i\\':\\n            case \\'o\\':\\n            case \\'u\\':\\n                return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int result = 0;\\n        while (left<=right){\\n            if(isVowel(words[left].charAt(0)) && isVowel(words[left].charAt(words[left].length()-1))){\\n                result++;\\n            }\\n            left++;\\n        }\\n        return result;\\n    }\\n\\n    private boolean isVowel(char c){\\n        switch (c){\\n            case \\'a\\':\\n            case \\'e\\':\\n            case \\'i\\':\\n            case \\'o\\':\\n            case \\'u\\':\\n                return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4095405,
                "title": "solution-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        HashSet<Character> h=new HashSet<>();\\n        h.add(\\'a\\');\\n        h.add(\\'e\\');\\n        h.add(\\'i\\');\\n        h.add(\\'o\\');\\n        h.add(\\'u\\');\\n        for(int i=left;i<=right;i++)\\n        {\\n            String s=words[i];\\n            if(h.contains(s.charAt(0)) && h.contains(s.charAt(s.length()-1)))\\n            {\\n                count++;\\n            }\\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        HashSet<Character> h=new HashSet<>();\\n        h.add(\\'a\\');\\n        h.add(\\'e\\');\\n        h.add(\\'i\\');\\n        h.add(\\'o\\');\\n        h.add(\\'u\\');\\n        for(int i=left;i<=right;i++)\\n        {\\n            String s=words[i];\\n            if(h.contains(s.charAt(0)) && h.contains(s.charAt(s.length()-1)))\\n            {\\n                count++;\\n            }\\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093701,
                "title": "most-most-simple-solution-in-c-faster-than-64",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n O(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int c=0;\\n        int l=left;\\n        int r=right;\\n        unordered_map<char,int>m;\\n        m[\\'a\\']=1;\\n        m[\\'e\\']=1;\\n        m[\\'i\\']=1;\\n        m[\\'o\\']=1;\\n        m[\\'u\\']=1;\\n        for(int i=l;i<=r;i++)\\n        {\\n            int n=words[i].size();\\n            if(m.find(words[i][0])!=m.end() && m.find(words[i][n-1])!=m.end())c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int c=0;\\n        int l=left;\\n        int r=right;\\n        unordered_map<char,int>m;\\n        m[\\'a\\']=1;\\n        m[\\'e\\']=1;\\n        m[\\'i\\']=1;\\n        m[\\'o\\']=1;\\n        m[\\'u\\']=1;\\n        for(int i=l;i<=r;i++)\\n        {\\n            int n=words[i].size();\\n            if(m.find(words[i][0])!=m.end() && m.find(words[i][n-1])!=m.end())c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087496,
                "title": "easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            if((words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' || words[i].charAt(0)==\\'i\\' || words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') && (words[i].charAt(words[i].length()-1)==\\'a\\' || words[i].charAt(\\n            words[i].length()-1)==\\'e\\' || words[i].charAt(words[i].length()-1)==\\'i\\' || words[i].charAt(words[i].length()-1)==\\'o\\' || words[i].charAt(words[i].length()-1)==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            if((words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' || words[i].charAt(0)==\\'i\\' || words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') && (words[i].charAt(words[i].length()-1)==\\'a\\' || words[i].charAt(\\n            words[i].length()-1)==\\'e\\' || words[i].charAt(words[i].length()-1)==\\'i\\' || words[i].charAt(words[i].length()-1)==\\'o\\' || words[i].charAt(words[i].length()-1)==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083926,
                "title": "java-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    static boolean isVowel(char s){\\n        if(s==\\'a\\' |s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            if(isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length()-1)) )count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    static boolean isVowel(char s){\\n        if(s==\\'a\\' |s==\\'e\\'||s==\\'i\\'||s==\\'o\\'||s==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            if(isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length()-1)) )count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4074290,
                "title": "mysolution",
                "content": "\\n# Solution using regular expression\\uD83D\\uDE07\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nconst vowelStrings = (words, left, right) => {\\n    let count = 0;\\n    \\n    for (let i = left; i <= right; i++) {\\n        let word = words[i];\\n\\n        if(/^[a|e|i|o|u]/g.test(word) && /[a|e|i|o|u]$/g.test(word)){\\n            ++count;\\n        }\\n        \\n    }\\n    return count;\\n};\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nconst vowelStrings = (words, left, right) => {\\n    let count = 0;\\n    \\n    for (let i = left; i <= right; i++) {\\n        let word = words[i];\\n\\n        if(/^[a|e|i|o|u]/g.test(word) && /[a|e|i|o|u]$/g.test(word)){\\n            ++count;\\n        }\\n        \\n    }\\n    return count;\\n};\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071740,
                "title": "beats-75-in-time-complexity-and-60-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func vowelStrings(_ words: [String], _ left: Int, _ right: Int) -> Int {\\n        let vowels : [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\\n        var count = 0\\n        for i in left...right {\\n            if vowels.contains(words[i].first!) && vowels.contains(words[i].last!){\\n                count += 1\\n            }\\n        }\\n    return count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func vowelStrings(_ words: [String], _ left: Int, _ right: Int) -> Int {\\n        let vowels : [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\\n        var count = 0\\n        for i in left...right {\\n            if vowels.contains(words[i].first!) && vowels.contains(words[i].last!){\\n                count += 1\\n            }\\n        }\\n    return count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069519,
                "title": "o-n-time-o-1-space",
                "content": "\\n# Code\\n```\\n# @param {String[]} words\\n# @param {Integer} left\\n# @param {Integer} right\\n# @return {Integer}\\ndef vowel_strings(words, left, right)\\n    # Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\\n\\n    vowel_checker = {}\\n    vowel_checker[\\'a\\'] = true\\n    vowel_checker[\\'e\\'] = true\\n    vowel_checker[\\'i\\'] = true \\n    vowel_checker[\\'o\\'] = true\\n    vowel_checker[\\'u\\'] = true\\n\\n    count = 0\\n    words[left..right].each do |word|\\n        if vowel_checker[word[0]] and vowel_checker[word[-1]]\\n            count = count + 1\\n        end\\n    end\\n\\n    count\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String[]} words\\n# @param {Integer} left\\n# @param {Integer} right\\n# @return {Integer}\\ndef vowel_strings(words, left, right)\\n    # Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\\n\\n    vowel_checker = {}\\n    vowel_checker[\\'a\\'] = true\\n    vowel_checker[\\'e\\'] = true\\n    vowel_checker[\\'i\\'] = true \\n    vowel_checker[\\'o\\'] = true\\n    vowel_checker[\\'u\\'] = true\\n\\n    count = 0\\n    words[left..right].each do |word|\\n        if vowel_checker[word[0]] and vowel_checker[word[-1]]\\n            count = count + 1\\n        end\\n    end\\n\\n    count\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4068142,
                "title": "solution-in-java",
                "content": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int ans =0;\\n        while(left<=right){\\n            if((words[left].charAt(0)==\\'a\\' ||words[left].charAt(0)==\\'e\\'|| words[left].charAt(0)==\\'i\\' || words[left].charAt(0)==\\'o\\' || words[left].charAt(0)==\\'u\\') && (words[left].charAt(words[left].length()-1)==\\'a\\' ||words[left].charAt(words[left].length()-1)==\\'e\\'|| words[left].charAt(words[left].length()-1)==\\'i\\' || words[left].charAt(words[left].length()-1)==\\'o\\' || words[left].charAt(words[left].length()-1)==\\'u\\') ){\\n                ans++;\\n            }\\n            left++;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int ans =0;\\n        while(left<=right){\\n            if((words[left].charAt(0)==\\'a\\' ||words[left].charAt(0)==\\'e\\'|| words[left].charAt(0)==\\'i\\' || words[left].charAt(0)==\\'o\\' || words[left].charAt(0)==\\'u\\') && (words[left].charAt(words[left].length()-1)==\\'a\\' ||words[left].charAt(words[left].length()-1)==\\'e\\'|| words[left].charAt(words[left].length()-1)==\\'i\\' || words[left].charAt(words[left].length()-1)==\\'o\\' || words[left].charAt(words[left].length()-1)==\\'u\\') ){\\n                ans++;\\n            }\\n            left++;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066024,
                "title": "python3-beats-95-runtime-88-memory-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count = 0\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        for w in words[left:right+1]:\\n            if w[0] in vowels and w[-1] in vowels:\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count = 0\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        for w in words[left:right+1]:\\n            if w[0] in vowels and w[-1] in vowels:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065572,
                "title": "beat-100-java-submission",
                "content": "# Intuition\\nTraverse all the values from the array from left value to right and check the first and last character of that particular string and increase the count if condition become true.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nTraverse all the values from the array from left value to right and check the first and last character of that particular string and increase the count if condition become true.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- 1ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:42.98\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int i=0,count=0;\\n        for(i=left;i<=right;i++)\\n      {\\n          if((words[i].charAt(0)==\\'a\\'||words[i].charAt(0)==\\'e\\'||words[i].charAt(0)==\\'i\\'||words[i].charAt(0)==\\'o\\'||words[i].charAt(0)==\\'u\\')&&(words[i].charAt(words[i].length()-1)==\\'a\\'||words[i].charAt(words[i].length()-1)==\\'e\\'||words[i].charAt(words[i].length()-1)==\\'i\\'||words[i].charAt(words[i].length()-1)==\\'o\\'||words[i].charAt(words[i].length()-1)==\\'u\\'))\\n          {\\n             count++;\\n          }\\n      }\\n      return count;    \\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int i=0,count=0;\\n        for(i=left;i<=right;i++)\\n      {\\n          if((words[i].charAt(0)==\\'a\\'||words[i].charAt(0)==\\'e\\'||words[i].charAt(0)==\\'i\\'||words[i].charAt(0)==\\'o\\'||words[i].charAt(0)==\\'u\\')&&(words[i].charAt(words[i].length()-1)==\\'a\\'||words[i].charAt(words[i].length()-1)==\\'e\\'||words[i].charAt(words[i].length()-1)==\\'i\\'||words[i].charAt(words[i].length()-1)==\\'o\\'||words[i].charAt(words[i].length()-1)==\\'u\\'))\\n          {\\n             count++;\\n          }\\n      }\\n      return count;    \\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064126,
                "title": "java-easy-to-understand-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left;i<=right;i++){\\n            String str = words[i] ;\\n          if(isVowel(str)){\\n              count++;\\n          }\\n        }\\n      return count;\\n}\\n    \\n\\n    public boolean isVowel(String str) {\\n        // Check if the first and last characters are vowels\\n        if ((str.charAt(0) == \\'a\\' || str.charAt(0) == \\'e\\' || str.charAt(0) == \\'o\\' || str.charAt(0) == \\'u\\' || str.charAt(0) == \\'i\\')\\n            && (str.charAt(str.length() - 1) == \\'a\\' || str.charAt(str.length() - 1) == \\'e\\'\\n                || str.charAt(str.length() - 1) == \\'o\\' || str.charAt(str.length() - 1) == \\'u\\'\\n                || str.charAt(str.length() - 1) == \\'i\\')) {\\n            return true;\\n        }\\n        return false;\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left;i<=right;i++){\\n            String str = words[i] ;\\n          if(isVowel(str)){\\n              count++;\\n          }\\n        }\\n      return count;\\n}\\n    \\n\\n    public boolean isVowel(String str) {\\n        // Check if the first and last characters are vowels\\n        if ((str.charAt(0) == \\'a\\' || str.charAt(0) == \\'e\\' || str.charAt(0) == \\'o\\' || str.charAt(0) == \\'u\\' || str.charAt(0) == \\'i\\')\\n            && (str.charAt(str.length() - 1) == \\'a\\' || str.charAt(str.length() - 1) == \\'e\\'\\n                || str.charAt(str.length() - 1) == \\'o\\' || str.charAt(str.length() - 1) == \\'u\\'\\n                || str.charAt(str.length() - 1) == \\'i\\')) {\\n            return true;\\n        }\\n        return false;\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055647,
                "title": "beats-100-very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left;i <= right; i++){\\n            char ch = words[i].charAt(0);\\n            char ch1 =  words[i].charAt(words[i].length()-1);\\n            if((ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') && (ch1 == \\'a\\' || ch1 == \\'e\\' || ch1 == \\'i\\' || ch1 == \\'o\\' || ch1 == \\'u\\'))\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i = left;i <= right; i++){\\n            char ch = words[i].charAt(0);\\n            char ch1 =  words[i].charAt(words[i].length()-1);\\n            if((ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') && (ch1 == \\'a\\' || ch1 == \\'e\\' || ch1 == \\'i\\' || ch1 == \\'o\\' || ch1 == \\'u\\'))\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4052053,
                "title": "beginners-friendly-solution-using-if-else-please-upvote-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n\\t\\tfor (int i = left; i <= right; i++) {\\n\\t\\t\\tString word = words[i];\\n\\t\\t\\tif((word.charAt(0) == \\'a\\' || word.charAt(0) == \\'e\\' || word.charAt(0) == \\'i\\' || word.charAt(0) == \\'o\\' || word.charAt(0) == \\'u\\') && (word.charAt(word.length()-1) == \\'a\\' || word.charAt(word.length()-1) == \\'e\\' || word.charAt(word.length()-1) == \\'i\\' || word.charAt(word.length()-1) == \\'o\\' || word.charAt(word.length()-1) == \\'u\\')) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n\\t\\tfor (int i = left; i <= right; i++) {\\n\\t\\t\\tString word = words[i];\\n\\t\\t\\tif((word.charAt(0) == \\'a\\' || word.charAt(0) == \\'e\\' || word.charAt(0) == \\'i\\' || word.charAt(0) == \\'o\\' || word.charAt(0) == \\'u\\') && (word.charAt(word.length()-1) == \\'a\\' || word.charAt(word.length()-1) == \\'e\\' || word.charAt(word.length()-1) == \\'i\\' || word.charAt(word.length()-1) == \\'o\\' || word.charAt(word.length()-1) == \\'u\\')) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4050633,
                "title": "easy-c-0ms-using-vector-and-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int x = 0;\\n        for(int i = left ; i<= right; i++){\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&((words[i][words[i].length()-1]==\\'a\\'||words[i][words[i].length()-1]==\\'e\\'||words[i][words[i].length()-1]==\\'i\\'||words[i][words[i].length()-1]==\\'o\\'||words[i][words[i].length()-1]==\\'u\\'))){\\n                x++;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int x = 0;\\n        for(int i = left ; i<= right; i++){\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&((words[i][words[i].length()-1]==\\'a\\'||words[i][words[i].length()-1]==\\'e\\'||words[i][words[i].length()-1]==\\'i\\'||words[i][words[i].length()-1]==\\'o\\'||words[i][words[i].length()-1]==\\'u\\'))){\\n                x++;\\n            }\\n        }\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046582,
                "title": "using-js-array-reduce-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function (words, left, right) {\\n\\n    let tempArr = words.slice(left, right + 1);\\n    const vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n    return tempArr.reduce((acc, cur) => {\\n        let startLetter = vowels.some(el => cur[0].includes(el));\\n        let endLetter = vowels.some(el => cur[cur.length - 1].includes(el));\\n        if (startLetter && endLetter) {\\n            return acc = acc + 1\\n        }\\n\\n        return acc\\n\\n    }, 0)\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\nvar vowelStrings = function (words, left, right) {\\n\\n    let tempArr = words.slice(left, right + 1);\\n    const vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n    return tempArr.reduce((acc, cur) => {\\n        let startLetter = vowels.some(el => cur[0].includes(el));\\n        let endLetter = vowels.some(el => cur[cur.length - 1].includes(el));\\n        if (startLetter && endLetter) {\\n            return acc = acc + 1\\n        }\\n\\n        return acc\\n\\n    }, 0)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041361,
                "title": "easiest-java-solution-with-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n  public int vowelStrings(String[] words, int left, int right) {\\n    int count = 0;\\n    for (int i = left; i <= right; i++) {\\n      if (\\n        words[i].charAt(0) == \\'a\\' ||\\n        words[i].charAt(0) == \\'e\\' ||\\n        words[i].charAt(0) == \\'o\\' ||\\n        words[i].charAt(0) == \\'i\\' ||\\n        words[i].charAt(0) == \\'u\\'\\n      ) {\\n        if (\\n          words[i].charAt(words[i].length() - 1) == \\'a\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'e\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'o\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'i\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'u\\'\\n        ) count++;\\n      }\\n    }\\n    return count;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n  public int vowelStrings(String[] words, int left, int right) {\\n    int count = 0;\\n    for (int i = left; i <= right; i++) {\\n      if (\\n        words[i].charAt(0) == \\'a\\' ||\\n        words[i].charAt(0) == \\'e\\' ||\\n        words[i].charAt(0) == \\'o\\' ||\\n        words[i].charAt(0) == \\'i\\' ||\\n        words[i].charAt(0) == \\'u\\'\\n      ) {\\n        if (\\n          words[i].charAt(words[i].length() - 1) == \\'a\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'e\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'o\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'i\\' ||\\n          words[i].charAt(words[i].length() - 1) == \\'u\\'\\n        ) count++;\\n      }\\n    }\\n    return count;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040327,
                "title": "vowel-strings",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            String s = words[i];\\n            char ch1 = s.charAt(0);\\n            char ch2 = s.charAt(s.length() - 1);\\n            if (isVowel(ch1) && isVowel(ch2)) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    public boolean isVowel(char ch) {\\n        ch = Character.toLowerCase(ch);\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for (int i = left; i <= right; i++) {\\n            String s = words[i];\\n            char ch1 = s.charAt(0);\\n            char ch2 = s.charAt(s.length() - 1);\\n            if (isVowel(ch1) && isVowel(ch2)) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    public boolean isVowel(char ch) {\\n        ch = Character.toLowerCase(ch);\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4037686,
                "title": "beat-99-in-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        c=0\\n        vow=\"aeiouAEIOU\"\\n        for i in range(left,right+1):\\n            if (words[i][0] in vow and words[i][-1] in vow):\\n                c+=1\\n        return c\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        c=0\\n        vow=\"aeiouAEIOU\"\\n        for i in range(left,right+1):\\n            if (words[i][0] in vow and words[i][-1] in vow):\\n                c+=1\\n        return c\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032686,
                "title": "very-basic-java-soln-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String v=\"aeiou\";\\n        int c=0;\\n        for(int k=left;k<=right;k++){\\n            String i=words[k];\\n            if(v.indexOf(i.charAt(0))>=0&&v.indexOf(i.charAt(i.length()-1))>=0)\\n                c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String v=\"aeiou\";\\n        int c=0;\\n        for(int k=left;k<=right;k++){\\n            String i=words[k];\\n            if(v.indexOf(i.charAt(0))>=0&&v.indexOf(i.charAt(i.length()-1))>=0)\\n                c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028059,
                "title": "count-the-number-of-vowels-in-a-string-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left;i<=right;i++){\\n            String a = words[i];\\n            int n = a.length();\\n            if (a.charAt(0) == \\'a\\' || a.charAt(0) == \\'e\\' || a.charAt(0) == \\'i\\' || a.charAt(0) == \\'o\\' || a.charAt(0) == \\'u\\'){\\n                if (a.charAt(n-1) == \\'a\\' || a.charAt(n-1) == \\'e\\' || a.charAt(n-1) == \\'i\\' || a.charAt(n-1) == \\'o\\' || a.charAt(n-1) == \\'u\\'){\\n                    count++;\\n                }\\n            }\\n\\n         \\n            \\n\\n\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left;i<=right;i++){\\n            String a = words[i];\\n            int n = a.length();\\n            if (a.charAt(0) == \\'a\\' || a.charAt(0) == \\'e\\' || a.charAt(0) == \\'i\\' || a.charAt(0) == \\'o\\' || a.charAt(0) == \\'u\\'){\\n                if (a.charAt(n-1) == \\'a\\' || a.charAt(n-1) == \\'e\\' || a.charAt(n-1) == \\'i\\' || a.charAt(n-1) == \\'o\\' || a.charAt(n-1) == \\'u\\'){\\n                    count++;\\n                }\\n            }\\n\\n         \\n            \\n\\n\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4024065,
                "title": "one-line-solution-using-list-comprehensions",
                "content": "# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        return sum([1 for i in range(left, right+1) if words[i][0] in \\'aeiou\\' and words[i][-1] in \\'aeiou\\'])\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        return sum([1 for i in range(left, right+1) if words[i][0] in \\'aeiou\\' and words[i][-1] in \\'aeiou\\'])\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4021558,
                "title": "elixir-rust-solutions",
                "content": "```\\ndefmodule Solution do\\n  @spec vowel_strings(words :: [String.t()], left :: integer, right :: integer) :: integer\\n  def vowel_strings(words, left, right) do\\n    words\\n    |> Enum.drop(left)\\n    |> Enum.take(right - left + 1)\\n    |> Enum.count(fn w ->\\n      Regex.match?(~r/^[aeiou](.*[aeiou])?$/, w)\\n    end)\\n  end\\nend\\n```\\n\\n```\\nfn is_vowel(u: u8) -> bool {\\n    match u {\\n        b\\'a\\' | b\\'e\\' | b\\'i\\' | b\\'o\\' | b\\'u\\' => true,\\n        _ => false,\\n    }\\n}\\n\\nimpl Solution {\\n    pub fn vowel_strings(words: Vec<String>, left: i32, right: i32) -> i32 {\\n        words[(left as usize)..=(right as usize)]\\n            .into_iter()\\n            .filter(|w| {\\n                let bs = w.as_bytes();\\n                is_vowel(bs[0]) && is_vowel(bs[bs.len() - 1])\\n            })\\n            .count() as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Elixir"
                ],
                "code": "```\\ndefmodule Solution do\\n  @spec vowel_strings(words :: [String.t()], left :: integer, right :: integer) :: integer\\n  def vowel_strings(words, left, right) do\\n    words\\n    |> Enum.drop(left)\\n    |> Enum.take(right - left + 1)\\n    |> Enum.count(fn w ->\\n      Regex.match?(~r/^[aeiou](.*[aeiou])?$/, w)\\n    end)\\n  end\\nend\\n```\n```\\nfn is_vowel(u: u8) -> bool {\\n    match u {\\n        b\\'a\\' | b\\'e\\' | b\\'i\\' | b\\'o\\' | b\\'u\\' => true,\\n        _ => false,\\n    }\\n}\\n\\nimpl Solution {\\n    pub fn vowel_strings(words: Vec<String>, left: i32, right: i32) -> i32 {\\n        words[(left as usize)..=(right as usize)]\\n            .into_iter()\\n            .filter(|w| {\\n                let bs = w.as_bytes();\\n                is_vowel(bs[0]) && is_vowel(bs[bs.len() - 1])\\n            })\\n            .count() as i32\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4019970,
                "title": "simple-java-solution-1ms-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(i>=left && i<=right){\\n                if((words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' || words[i].charAt(0)==\\'i\\' || words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') && (words[i].charAt(words[i].length()-1)==\\'a\\' || words[i].charAt(words[i].length()-1)==\\'e\\' || words[i].charAt(words[i].length()-1)==\\'i\\' || words[i].charAt(words[i].length()-1)==\\'o\\' || words[i].charAt(words[i].length()-1)==\\'u\\'))\\n                    c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(i>=left && i<=right){\\n                if((words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' || words[i].charAt(0)==\\'i\\' || words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') && (words[i].charAt(words[i].length()-1)==\\'a\\' || words[i].charAt(words[i].length()-1)==\\'e\\' || words[i].charAt(words[i].length()-1)==\\'i\\' || words[i].charAt(words[i].length()-1)==\\'o\\' || words[i].charAt(words[i].length()-1)==\\'u\\'))\\n                    c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019941,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            int n=s.length()-1;\\n            if(s.charAt(0)==\\'a\\' ||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\' ){\\n                if(s.charAt(n)==\\'a\\' ||s.charAt(n)==\\'e\\'||s.charAt(n)==\\'i\\'||s.charAt(n)==\\'o\\'||s.charAt(n)==\\'u\\'){\\n                c++;\\n            }\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            int n=s.length()-1;\\n            if(s.charAt(0)==\\'a\\' ||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\' ){\\n                if(s.charAt(n)==\\'a\\' ||s.charAt(n)==\\'e\\'||s.charAt(n)==\\'i\\'||s.charAt(n)==\\'o\\'||s.charAt(n)==\\'u\\'){\\n                c++;\\n            }\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017746,
                "title": "beats-100-1ms-runtime-java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public  int vowelStrings(String[] words, int left, int right) {\\n        int count= 0 ;\\n        for (int i = left; i <= right && i < words.length ; i++) {\\n           String str =  words[i];\\n            if (vowels(str.charAt(0)) != -1 && vowels(str.charAt(str.length() -1)) != -1) {\\n               count++ ;\\n            }\\n        }\\n      return count ;\\n    }\\n     static int vowels(char ch){\\n        return \"aeiou\".indexOf(ch) ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public  int vowelStrings(String[] words, int left, int right) {\\n        int count= 0 ;\\n        for (int i = left; i <= right && i < words.length ; i++) {\\n           String str =  words[i];\\n            if (vowels(str.charAt(0)) != -1 && vowels(str.charAt(str.length() -1)) != -1) {\\n               count++ ;\\n            }\\n        }\\n      return count ;\\n    }\\n     static int vowels(char ch){\\n        return \"aeiou\".indexOf(ch) ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012130,
                "title": "vowels-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n               char c1=words[i].charAt(0);\\n               char c2=words[i].charAt(words[i].length()-1);\\n            if((c1==\\'a\\' || c1==\\'e\\' || c1==\\'i\\' || c1==\\'o\\' || c1==\\'u\\') && (c2==\\'a\\' || c2==\\'e\\' || c2==\\'i\\' || c2==\\'o\\' || c2==\\'u\\'))          \\n                   {\\n                    count++;\\n                }\\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n               char c1=words[i].charAt(0);\\n               char c2=words[i].charAt(words[i].length()-1);\\n            if((c1==\\'a\\' || c1==\\'e\\' || c1==\\'i\\' || c1==\\'o\\' || c1==\\'u\\') && (c2==\\'a\\' || c2==\\'e\\' || c2==\\'i\\' || c2==\\'o\\' || c2==\\'u\\'))          \\n                   {\\n                    count++;\\n                }\\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011375,
                "title": "java-solution-100-faster-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String vowels = \"aeiou\";\\n\\n        int ans = 0;\\n\\n        for(int i = left; i <= right; i++) {\\n            String word = words[i];\\n\\n            if(vowels.indexOf(word.charAt(0)) != -1 && vowels.indexOf(word.charAt(word.length() - 1)) != -1)\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String vowels = \"aeiou\";\\n\\n        int ans = 0;\\n\\n        for(int i = left; i <= right; i++) {\\n            String word = words[i];\\n\\n            if(vowels.indexOf(word.charAt(0)) != -1 && vowels.indexOf(word.charAt(word.length() - 1)) != -1)\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009980,
                "title": "1ms-java-string",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n       for(int i=left;i<=right;i++)\\n       {\\n           String str=words[i];\\n           int length=str.length();\\n           String vowel=\"aeiou\";\\n           char first=str.charAt(0);\\n            char last=str.charAt(length-1);\\n           if(vowel.indexOf(first)!=-1&&vowel.indexOf(last)!=-1)\\n           {\\n               count++;\\n           }\\n       }\\n       return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n       for(int i=left;i<=right;i++)\\n       {\\n           String str=words[i];\\n           int length=str.length();\\n           String vowel=\"aeiou\";\\n           char first=str.charAt(0);\\n            char last=str.charAt(length-1);\\n           if(vowel.indexOf(first)!=-1&&vowel.indexOf(last)!=-1)\\n           {\\n               count++;\\n           }\\n       }\\n       return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006598,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        for(int i=left;i<=right;i++){\\n            int n=words[i].length()-1;\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&(words[i][n]==\\'a\\'||words[i][n]==\\'e\\'||words[i][n]==\\'i\\'||words[i][n]==\\'o\\'||words[i][n]==\\'u\\')) cnt++;\\n        }\\n\\n        return cnt++;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int cnt=0;\\n        for(int i=left;i<=right;i++){\\n            int n=words[i].length()-1;\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&(words[i][n]==\\'a\\'||words[i][n]==\\'e\\'||words[i][n]==\\'i\\'||words[i][n]==\\'o\\'||words[i][n]==\\'u\\')) cnt++;\\n        }\\n\\n        return cnt++;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001165,
                "title": "vowel-strings-beginner-friendly",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1) - constant space\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool checkVowel(char ch){\\n        if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch== \\'o\\' || ch==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n      int count = 0;\\n      for(int i=left;i<=right;i++){\\n          string str = words[i];\\n          if(checkVowel(str[0]) && checkVowel(str[str.size()-1])){\\n              count++;\\n          }\\n      }\\n     return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool checkVowel(char ch){\\n        if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch== \\'o\\' || ch==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n      int count = 0;\\n      for(int i=left;i<=right;i++){\\n          string str = words[i];\\n          if(checkVowel(str[0]) && checkVowel(str[str.size()-1])){\\n              count++;\\n          }\\n      }\\n     return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3996214,
                "title": "python-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count=0\\n        vowels=[\"A\",\"E\",\"I\",\"O\",\"U\",\"a\",\"e\",\"i\",\"o\",\"u\"]\\n\\n        for i in range(left,right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count+=1\\n        \\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count=0\\n        vowels=[\"A\",\"E\",\"I\",\"O\",\"U\",\"a\",\"e\",\"i\",\"o\",\"u\"]\\n\\n        for i in range(left,right+1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count+=1\\n        \\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987139,
                "title": "simple-solution-for-java",
                "content": "# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        String vowels = \"aeiou\";\\n        while (left <= right) {\\n            String word = words[left];\\n            char firstVowel = word.charAt(0);\\n            char lastVowel = word.charAt(word.length() - 1);\\n            if (vowels.indexOf(firstVowel) != -1 && vowels.indexOf(lastVowel) != -1) {\\n                count++;\\n            }\\n            left++;\\n        }\\n\\n        return count;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        String vowels = \"aeiou\";\\n        while (left <= right) {\\n            String word = words[left];\\n            char firstVowel = word.charAt(0);\\n            char lastVowel = word.charAt(word.length() - 1);\\n            if (vowels.indexOf(firstVowel) != -1 && vowels.indexOf(lastVowel) != -1) {\\n                count++;\\n            }\\n            left++;\\n        }\\n\\n        return count;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983550,
                "title": "effecient-solution-and-optimised-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    static boolean isvowel(char ch){\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int ans=0;\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n                if(isvowel(s.charAt(0))&&isvowel(s.charAt(s.length()-1))){\\n                    count++;\\n                }\\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    static boolean isvowel(char ch){\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int ans=0;\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n                if(isvowel(s.charAt(0))&&isvowel(s.charAt(s.length()-1))){\\n                    count++;\\n                }\\n            \\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979792,
                "title": "java-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left; i<=right; i++) {\\n            if(helper(words[i])) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public static boolean helper(String word) {\\n        int start = word.charAt(0);\\n        int end = word.charAt(word.length() - 1);\\n        if((start == \\'a\\'|| start == \\'e\\' || start == \\'i\\'|| start == \\'o\\'|| start == \\'u\\') && (end == \\'a\\'|| end == \\'e\\' || end == \\'i\\'|| end == \\'o\\'|| end == \\'u\\')) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left; i<=right; i++) {\\n            if(helper(words[i])) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public static boolean helper(String word) {\\n        int start = word.charAt(0);\\n        int end = word.charAt(word.length() - 1);\\n        if((start == \\'a\\'|| start == \\'e\\' || start == \\'i\\'|| start == \\'o\\'|| start == \\'u\\') && (end == \\'a\\'|| end == \\'e\\' || end == \\'i\\'|| end == \\'o\\'|| end == \\'u\\')) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978733,
                "title": "easy-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        st = \"aeiouAIEOU\"\\n        a =[]\\n        for i in range(left,right+1):\\n            if words[i][0] in st and words[i][-1] in st:\\n                a.append(i)\\n\\n        return len(a)  \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        st = \"aeiouAIEOU\"\\n        a =[]\\n        for i in range(left,right+1):\\n            if words[i][0] in st and words[i][-1] in st:\\n                a.append(i)\\n\\n        return len(a)  \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978719,
                "title": "java-solution-for-beginners-1ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left; i<=right; i++){\\n            if(\"aeiou\".indexOf(words[i].charAt(0)) != -1 && \"aeiou\".indexOf(words[i].charAt(words[i].length()-1)) != -1)\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        for(int i=left; i<=right; i++){\\n            if(\"aeiou\".indexOf(words[i].charAt(0)) != -1 && \"aeiou\".indexOf(words[i].charAt(words[i].length()-1)) != -1)\\n                count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976692,
                "title": "using-methods-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    boolean vowel(String s){\\n        if(s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\'){\\n            if(s.charAt(s.length()-1)==\\'a\\'||s.charAt(s.length()-1)==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\'){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left; i<=right; i++){\\n            if(vowel(words[i])){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    boolean vowel(String s){\\n        if(s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\'){\\n            if(s.charAt(s.length()-1)==\\'a\\'||s.charAt(s.length()-1)==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\'){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left; i<=right; i++){\\n            if(vowel(words[i])){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976519,
                "title": "vowels-string-easy-one-tc-o-n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    boolean vowel(String s){\\n        if(s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\'){\\n            if(s.charAt(s.length()-1)==\\'a\\'||s.charAt(s.length()-1)==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\'){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left; i<=right; i++){\\n            if(vowel(words[i])){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    boolean vowel(String s){\\n        if(s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\'){\\n            if(s.charAt(s.length()-1)==\\'a\\'||s.charAt(s.length()-1)==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\'){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left; i<=right; i++){\\n            if(vowel(words[i])){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3964363,
                "title": "dont-click",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String s = \"aeiou\";\\n        int count = 0;\\n        for(int i=left;i<=right;i++){\\n            if(s.contains(String.valueOf(words[i].charAt(0))) && s.contains(String.valueOf(words[i].charAt(words[i].length()-1)))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        String s = \"aeiou\";\\n        int count = 0;\\n        for(int i=left;i<=right;i++){\\n            if(s.contains(String.valueOf(words[i].charAt(0))) && s.contains(String.valueOf(words[i].charAt(words[i].length()-1)))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3963958,
                "title": "c-simple-solution-runtime-11-ms-beats-88-62-memory-31-7-mb-beats-30-69",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check_vowel(char ch){\\n        if(ch == \\'a\\' || ch == \\'e\\'|| ch == \\'i\\'|| ch == \\'o\\'|| ch == \\'u\\') return true;\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int res = 0;\\n        for(int i = left; i <= right; ++i){\\n            if(check_vowel(words[i][0]) && check_vowel(words[i][words[i].size()-1])) res++;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check_vowel(char ch){\\n        if(ch == \\'a\\' || ch == \\'e\\'|| ch == \\'i\\'|| ch == \\'o\\'|| ch == \\'u\\') return true;\\n        return false;\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int res = 0;\\n        for(int i = left; i <= right; ++i){\\n            if(check_vowel(words[i][0]) && check_vowel(words[i][words[i].size()-1])) res++;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3958577,
                "title": "c-easy-good-question",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&(words[i][words[i].size()-1]==\\'a\\'||words[i][words[i].size()-1]==\\'e\\'||words[i][words[i].size()-1]==\\'i\\'||words[i][words[i].size()-1]==\\'o\\'||words[i][words[i].size()-1]==\\'u\\'))\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            if((words[i][0]==\\'a\\'||words[i][0]==\\'e\\'||words[i][0]==\\'i\\'||words[i][0]==\\'o\\'||words[i][0]==\\'u\\')&&(words[i][words[i].size()-1]==\\'a\\'||words[i][words[i].size()-1]==\\'e\\'||words[i][words[i].size()-1]==\\'i\\'||words[i][words[i].size()-1]==\\'o\\'||words[i][words[i].size()-1]==\\'u\\'))\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957150,
                "title": "python-very-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        r=0\\n        l=[\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n        for i in range(left,right+1):\\n            if words[i][0] in l and words[i][-1] in l:\\n                r+=1\\n        return r\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        r=0\\n        l=[\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n        for i in range(left,right+1):\\n            if words[i][0] in l and words[i][-1] in l:\\n                r+=1\\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3955419,
                "title": "simple-python",
                "content": "# Intuition\\nSimple\\n\\n# Approach\\nNothing to explain\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        count=0\\n        vowel = \"aeiou\"\\n        for i in range(left, right+1):\\n            if words[i][0] in vowel and words[i][-1] in vowel:\\n                count+=1\\n        return count\\n\\n    \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def vowelStrings(self, words, left, right):\\n        count=0\\n        vowel = \"aeiou\"\\n        for i in range(left, right+1):\\n            if words[i][0] in vowel and words[i][-1] in vowel:\\n                count+=1\\n        return count\\n\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3947320,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            if((s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\') && (s.charAt(s.length()-1)==\\'a\\'|| s.charAt(s.length()-1) ==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\')){\\n                c++;\\n            }\\n        }\\n            return c;\\n    \\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            if((s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\') && (s.charAt(s.length()-1)==\\'a\\'|| s.charAt(s.length()-1) ==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\')){\\n                c++;\\n            }\\n        }\\n            return c;\\n    \\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946978,
                "title": "using-if-condition-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            if((s.charAt(0)==\\'a\\' || s.charAt(0)==\\'e\\'|| s.charAt(0)==\\'i\\'|| s.charAt(0)==\\'o\\'|| s.charAt(0)==\\'u\\')&& (s.charAt(s.length()-1)==\\'a\\'|| s.charAt(s.length()-1)==\\'e\\'|| s.charAt(s.length()-1)==\\'i\\'|| s.charAt(s.length()-1)==\\'o\\'|| s.charAt(s.length()-1)==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=words[i];\\n            if((s.charAt(0)==\\'a\\' || s.charAt(0)==\\'e\\'|| s.charAt(0)==\\'i\\'|| s.charAt(0)==\\'o\\'|| s.charAt(0)==\\'u\\')&& (s.charAt(s.length()-1)==\\'a\\'|| s.charAt(s.length()-1)==\\'e\\'|| s.charAt(s.length()-1)==\\'i\\'|| s.charAt(s.length()-1)==\\'o\\'|| s.charAt(s.length()-1)==\\'u\\')){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3944534,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) \\n    {\\n        // unordered_set<char> st;\\n        // st.insert(\\'a\\');\\n        // st.insert(\\'e\\');\\n        // st.insert(\\'i\\');\\n        // st.insert(\\'o\\');\\n        // st.insert(\\'u\\');\\n         unordered_set<char> st={\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        int count=0;\\n        for(int i=left; i<=right; i++)\\n        {\\n            int n=words[i].size()-1;\\n            if(st.count(words[i][0])!=0 && st.count(words[i][n]))\\n            {\\n                count++;\\n            }\\n\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) \\n    {\\n        // unordered_set<char> st;\\n        // st.insert(\\'a\\');\\n        // st.insert(\\'e\\');\\n        // st.insert(\\'i\\');\\n        // st.insert(\\'o\\');\\n        // st.insert(\\'u\\');\\n         unordered_set<char> st={\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        int count=0;\\n        for(int i=left; i<=right; i++)\\n        {\\n            int n=words[i].size()-1;\\n            if(st.count(words[i][0])!=0 && st.count(words[i][n]))\\n            {\\n                count++;\\n            }\\n\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3935841,
                "title": "best-optimised-solution-beats-90-of-the-users",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isvowel(char ch){\\n        return ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\';\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;i++){\\n            int n=words[i].length();\\n            if(isvowel(words[i][0]) && isvowel(words[i][n-1])){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isvowel(char ch){\\n        return ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\';\\n    }\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int c=0;\\n        for(int i=left;i<=right;i++){\\n            int n=words[i].length();\\n            if(isvowel(words[i][0]) && isvowel(words[i][n-1])){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3929488,
                "title": "javascript-single-line-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\n\\nvar vowelStrings = function(words, left, right) {\\n    return words.slice(left, right + 1)\\n        .filter(word => \"aeiou\".includes(word[0]) && \"aeiou\".includes(word[word.length - 1]))\\n        .length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {number} left\\n * @param {number} right\\n * @return {number}\\n */\\n\\nvar vowelStrings = function(words, left, right) {\\n    return words.slice(left, right + 1)\\n        .filter(word => \"aeiou\".includes(word[0]) && \"aeiou\".includes(word[word.length - 1]))\\n        .length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3919411,
                "title": "easy-to-understand-java-solution-uwu",
                "content": "\\n# Approach\\nIn simple langugae Ieas will say that the approach simply invovles traversing the string array from the given left to the right. We have a different boolean function isVowel() just to check if the starting and ending character of a particular string is a vowel. We traverse the array, and for each element in the array we use charAt() to traverse through one particular string and find if it is a vowel string.\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for (int i=left;i<=right;i++){\\n            if(isVowel(words[i].charAt(0))&&isVowel(words[i].charAt(words[i].length()-1)))\\n            count++;\\n        }\\n        return count;\\n    }\\n    public boolean isVowel(char ch){\\n        String str=\"aeiou\";\\n        return (str.indexOf(ch)!=-1)? true:false;\\n    }\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for (int i=left;i<=right;i++){\\n            if(isVowel(words[i].charAt(0))&&isVowel(words[i].charAt(words[i].length()-1)))\\n            count++;\\n        }\\n        return count;\\n    }\\n    public boolean isVowel(char ch){\\n        String str=\"aeiou\";\\n        return (str.indexOf(ch)!=-1)? true:false;\\n    }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3919032,
                "title": "easy-solution-using-java",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] w, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++){\\n            if(vowel(w[i].charAt(0),w[i].charAt(w[i].length() -1))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public boolean vowel(char c,char c1){\\n        if(c!=\\'a\\' && c!=\\'e\\' && c!=\\'i\\' && c!=\\'o\\' && c!=\\'u\\'){\\n            return false;\\n        }\\n        if(c1!=\\'a\\' && c1!=\\'e\\' && c1!=\\'i\\' && c1!=\\'o\\' && c1!=\\'u\\'){\\n            return false;\\n        }\\n        return true;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] w, int left, int right) {\\n        int count = 0;\\n        for(int i = left; i <= right; i++){\\n            if(vowel(w[i].charAt(0),w[i].charAt(w[i].length() -1))){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public boolean vowel(char c,char c1){\\n        if(c!=\\'a\\' && c!=\\'e\\' && c!=\\'i\\' && c!=\\'o\\' && c!=\\'u\\'){\\n            return false;\\n        }\\n        if(c1!=\\'a\\' && c1!=\\'e\\' && c1!=\\'i\\' && c1!=\\'o\\' && c1!=\\'u\\'){\\n            return false;\\n        }\\n        return true;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916925,
                "title": "100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI am just comparing the first and last char of each string.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse hashset to store ascii values of vowels.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int VowelStrings(string[] words, int left, int right) {\\n        HashSet<int> hashset = new HashSet<int>();\\n\\t\\thashset.Add((int)\\'a\\');hashset.Add((int)\\'e\\');hashset.Add((int)\\'i\\');hashset.Add((int)\\'o\\');hashset.Add((int)\\'u\\');\\n\\t    int count = 0;\\n\\t    for(int i = left; i <= right; i++)\\n\\t    {\\n\\t    \\tif(hashset.Contains((int)words[i][0]) && hashset.Contains((int)words[i][words[i].Length - 1]))\\n\\t    \\t\\tcount++;\\n\\t    }\\n\\t    return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int VowelStrings(string[] words, int left, int right) {\\n        HashSet<int> hashset = new HashSet<int>();\\n\\t\\thashset.Add((int)\\'a\\');hashset.Add((int)\\'e\\');hashset.Add((int)\\'i\\');hashset.Add((int)\\'o\\');hashset.Add((int)\\'u\\');\\n\\t    int count = 0;\\n\\t    for(int i = left; i <= right; i++)\\n\\t    {\\n\\t    \\tif(hashset.Contains((int)words[i][0]) && hashset.Contains((int)words[i][words[i].Length - 1]))\\n\\t    \\t\\tcount++;\\n\\t    }\\n\\t    return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916545,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Initialize a boolean array vowel of size 26, where each index corresponds to a letter in the English alphabet.\\n2. The indices of the vowels (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\') are set to true to indicate that they are vowels.\\n3. Initialize a count variable to keep track of the number of strings that start and end with a vowel.\\n4. Iterate through the given range [left, right] of the words array.\\nFor each word in the range, check if the first and last characters are vowels using the vowel array. If both the first and last characters are vowels, increment the count.\\n\\n# Complexity\\n- Time complexity:\\n- Initializing the vowel array takes constant time (O(1)) because it has a fixed size of 26.\\n\\n- Space complexity:\\n- The vowel boolean array has a fixed size of 26, so its space complexity is O(1).\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        boolean vowel[] = new boolean[26];\\n        vowel[\\'a\\' - \\'a\\'] = true;\\n        vowel[\\'e\\' - \\'a\\'] = true;\\n        vowel[\\'i\\' - \\'a\\'] = true;\\n        vowel[\\'o\\' - \\'a\\'] = true;\\n        vowel[\\'u\\' - \\'a\\'] = true;\\n        int count = 0;\\n\\n        for(int i=left; i<=right; i++){\\n            String s = words[i];\\n            char firstChar = s.charAt(0);\\n            char lastChar = s.charAt(s.length() - 1);\\n\\n            if(vowel[firstChar - \\'a\\'] && vowel[lastChar - \\'a\\']){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        boolean vowel[] = new boolean[26];\\n        vowel[\\'a\\' - \\'a\\'] = true;\\n        vowel[\\'e\\' - \\'a\\'] = true;\\n        vowel[\\'i\\' - \\'a\\'] = true;\\n        vowel[\\'o\\' - \\'a\\'] = true;\\n        vowel[\\'u\\' - \\'a\\'] = true;\\n        int count = 0;\\n\\n        for(int i=left; i<=right; i++){\\n            String s = words[i];\\n            char firstChar = s.charAt(0);\\n            char lastChar = s.charAt(s.length() - 1);\\n\\n            if(vowel[firstChar - \\'a\\'] && vowel[lastChar - \\'a\\']){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916390,
                "title": "easy-java-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ntraversing over the array element from left to right and checking if \\nfirst and last character is vowel or not and hence increment the count value if conditon hold ... .. .\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=\"\"+words[i];\\n            if(s.length()==1){\\n                if(s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\'){\\n                    count++;\\n                }\\n            }\\n            else  if((s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\')&&(s.charAt(s.length()-1)==\\'a\\'||s.charAt(s.length()-1)==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\')){\\n                \\n                     count++;\\n                 \\n             }\\n            }\\n\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count=0;\\n        for(int i=left;i<=right;i++){\\n            String s=\"\"+words[i];\\n            if(s.length()==1){\\n                if(s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\'){\\n                    count++;\\n                }\\n            }\\n            else  if((s.charAt(0)==\\'a\\'||s.charAt(0)==\\'e\\'||s.charAt(0)==\\'i\\'||s.charAt(0)==\\'o\\'||s.charAt(0)==\\'u\\')&&(s.charAt(s.length()-1)==\\'a\\'||s.charAt(s.length()-1)==\\'e\\'||s.charAt(s.length()-1)==\\'i\\'||s.charAt(s.length()-1)==\\'o\\'||s.charAt(s.length()-1)==\\'u\\')){\\n                \\n                     count++;\\n                 \\n             }\\n            }\\n\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3907757,
                "title": "the-native-solution-is-explained-in-detail-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code defines a Solution class with a method vowelStrings that takes a vector of strings words, and two integer parameters left and right. It aims to count the number of strings in the range [left, right] (inclusive) that start and end with a vowel.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1.The code initializes a counter to keep track of the number of strings that meet the criteria.\\n2.It iterates through the strings in the range [left, right].\\n3.For each string, it checks if both the first and last characters are vowels using the isVowel function.\\n4.If both conditions are met, it increments the counter.\\n5.Finally, the counter value is returned.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n1.The main loop iterates through the strings in the range [left, right], which has a size of right - left + 1.\\n2.For each string, the code checks the first and last characters using constant time operations.\\n3.The isVowel function also performs constant time comparisons.\\n4.Therefore, the overall time complexity of this code is O(n), where n is the number of strings in the given range [left, right].\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n1.The code uses a constant amount of extra space for integer and string variables, regardless of the size of the input.\\n2.The isVowel function uses a constant amount of space as well.\\n3.Thus, the space complexity of this code is O(1), indicating constant space usage.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        \\n        int counter = 0;\\n        for(int i = left; i <= right; ++i){\\n            string str = words[i];\\n           \\n            if(isVowel(str[0]) && isVowel(str[str.length() - 1])) ++counter;\\n        }\\n\\n        return counter;\\n    }\\n\\n    bool isVowel(char &l){\\n         if(l == \\'a\\' || l == \\'e\\' || l == \\'i\\' || l == \\'o\\' || l == \\'u\\') return true;\\n\\n         return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        \\n        int counter = 0;\\n        for(int i = left; i <= right; ++i){\\n            string str = words[i];\\n           \\n            if(isVowel(str[0]) && isVowel(str[str.length() - 1])) ++counter;\\n        }\\n\\n        return counter;\\n    }\\n\\n    bool isVowel(char &l){\\n         if(l == \\'a\\' || l == \\'e\\' || l == \\'i\\' || l == \\'o\\' || l == \\'u\\') return true;\\n\\n         return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905511,
                "title": "python-singe-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        return sum(1 for i in range(left, right+1) if words[i][0] in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'] and words[i][-1] in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        return sum(1 for i in range(left, right+1) if words[i][0] in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'] and words[i][-1] in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3895965,
                "title": "java-begineer-friendly-beats-100",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\n    public int vowelStrings(String[] words, int left, int right)\\n    {\\n        int count = 0;\\n        for (int i = left; i <= right; i++)\\n        {\\n            if(isVowel(words[i].charAt(0)) && (isVowel(words[i].charAt(words[i].length()-1)))) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public boolean isVowel(char c)\\n    {\\n        return (c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\');\\n    }\\n}\\n```\\n\\n# Code\\n```\\n// Another Approach\\nclass Solution\\n{\\n    public int vowelStrings(String[] words, int left, int right)\\n    {\\n        int count=0;\\n        for(int i=left; i<=right; i++)\\n        {\\n            if( (words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' || words[i].charAt(0)==\\'i\\' || words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') && (words[i].charAt(words[i].length()-1)==\\'a\\' || words[i].charAt(words[i].length()-1)==\\'e\\' || words[i].charAt(words[i].length()-1)==\\'i\\' || words[i].charAt(words[i].length()-1)==\\'o\\' || words[i].charAt(words[i].length()-1)==\\'u\\') )\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int vowelStrings(String[] words, int left, int right)\\n    {\\n        int count = 0;\\n        for (int i = left; i <= right; i++)\\n        {\\n            if(isVowel(words[i].charAt(0)) && (isVowel(words[i].charAt(words[i].length()-1)))) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public boolean isVowel(char c)\\n    {\\n        return (c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\');\\n    }\\n}\\n```\n```\\n// Another Approach\\nclass Solution\\n{\\n    public int vowelStrings(String[] words, int left, int right)\\n    {\\n        int count=0;\\n        for(int i=left; i<=right; i++)\\n        {\\n            if( (words[i].charAt(0)==\\'a\\' || words[i].charAt(0)==\\'e\\' || words[i].charAt(0)==\\'i\\' || words[i].charAt(0)==\\'o\\' || words[i].charAt(0)==\\'u\\') && (words[i].charAt(words[i].length()-1)==\\'a\\' || words[i].charAt(words[i].length()-1)==\\'e\\' || words[i].charAt(words[i].length()-1)==\\'i\\' || words[i].charAt(words[i].length()-1)==\\'o\\' || words[i].charAt(words[i].length()-1)==\\'u\\') )\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3890027,
                "title": "count-the-number-of-vowels",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        string=\"aeiou\"\\n        num=0\\n        for i in range(left,right+1):\\n            if words[i][0] in string and words[i][-1] in string:\\n                num+=1\\n        return num\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        string=\"aeiou\"\\n        num=0\\n        for i in range(left,right+1):\\n            if words[i][0] in string and words[i][-1] in string:\\n                num+=1\\n        return num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887335,
                "title": "1ms-solution-beginner-friendly-explained-java",
                "content": "# Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nTask can be broken down into easy steps :\\n1. Create a function which checks if a character is a vowel `isVowel()`\\n2. Create a function which checks if the first and last characters of a string are vowels (using function from step 1) `isVowelString()`\\n3. Iterate through the words from \\'left\\' to \\'right\\' inclusive\\n4. Count how many words are \\'vowel strings\\' (vowel strings satisfy the checks, implemented as functions in the previous steps)\\n5. Return our count\\n\\n\\n---\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        \\n        int count = 0;\\n        for(int i = left; i <= right; i++){\\n            \\n            if(isVowelString(words[i])){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    public boolean isVowelString(String s){\\n\\n        if(isVowel(s.charAt(0)) && isVowel(s.charAt(s.length() - 1))){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean isVowel(char c){\\n\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        \\n        int count = 0;\\n        for(int i = left; i <= right; i++){\\n            \\n            if(isVowelString(words[i])){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    public boolean isVowelString(String s){\\n\\n        if(isVowel(s.charAt(0)) && isVowel(s.charAt(s.length() - 1))){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean isVowel(char c){\\n\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887010,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        int x = 0;\\n        int y = 0;\\n        for(int i=left;i<=right;i++){\\n            x = words[i].charAt(0);\\n            y = words[i].charAt(words[i].length()-1);\\n    if((x==\\'a\\'||x==\\'e\\'||x==\\'i\\'||x==\\'o\\'||x==\\'u\\') && (y==\\'a\\'||y==\\'e\\'||y==\\'i\\'||y==\\'o\\'||y==\\'u\\')){\\n           count++;\\n          }   \\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n        int x = 0;\\n        int y = 0;\\n        for(int i=left;i<=right;i++){\\n            x = words[i].charAt(0);\\n            y = words[i].charAt(words[i].length()-1);\\n    if((x==\\'a\\'||x==\\'e\\'||x==\\'i\\'||x==\\'o\\'||x==\\'u\\') && (y==\\'a\\'||y==\\'e\\'||y==\\'i\\'||y==\\'o\\'||y==\\'u\\')){\\n           count++;\\n          }   \\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3883111,
                "title": "python-solution-speed-o-n-memory-o-1",
                "content": "# Intuition\\nWe can solve task by making cycle and taking first and last elements each word in arrays\\n\\n# Approach\\nUsing cycle with left and right range\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count, vowels = 0, \\'aeoiu\\'\\n        for i in range(left, right + 1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        count, vowels = 0, \\'aeoiu\\'\\n        for i in range(left, right + 1):\\n            if words[i][0] in vowels and words[i][-1] in vowels:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3876522,
                "title": "easy-solution-in-c-beats-80",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++){\\n            string s=words[i];\\n            if(s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0]==\\'u\\'){\\n                if(s[s.length()-1]==\\'a\\' || s[s.length()-1]==\\'e\\' || s[s.length()-1]==\\'i\\' || s[s.length()-1]==\\'o\\' || s[s.length()-1]==\\'u\\'){\\n                    ans++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowelStrings(vector<string>& words, int left, int right) {\\n        int ans=0;\\n        for(int i=left;i<=right;i++){\\n            string s=words[i];\\n            if(s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0]==\\'u\\'){\\n                if(s[s.length()-1]==\\'a\\' || s[s.length()-1]==\\'e\\' || s[s.length()-1]==\\'i\\' || s[s.length()-1]==\\'o\\' || s[s.length()-1]==\\'u\\'){\\n                    ans++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3876434,
                "title": "java-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) \\n    {\\n        // HashSet<Character> set=new HashSet<>();\\n        // set.add(\\'a\\');\\n        // set.add(\\'e\\');\\n        // set.add(\\'i\\');\\n        // set.add(\\'o\\');\\n        // set.add(\\'u\\');\\n        int count=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            String str=words[i];\\n           // return str.length();\\n            str=str.toLowerCase();\\n            for(int j=0;j<str.length();j++)\\n            {\\n                if((str.charAt(0)==\\'a\\'  || str.charAt(0)==\\'i\\'  || str.charAt(0)==\\'e\\'  || str.charAt(0)==\\'o\\'  || str.charAt(0)==\\'u\\')  && (str.charAt(str.length()-1)==\\'a\\'  || str.charAt(str.length()-1)==\\'i\\'  || str.charAt(str.length()-1)==\\'e\\'  || str.charAt(str.length()-1)==\\'o\\'  || str.charAt(str.length()-1)==\\'u\\'))\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) \\n    {\\n        // HashSet<Character> set=new HashSet<>();\\n        // set.add(\\'a\\');\\n        // set.add(\\'e\\');\\n        // set.add(\\'i\\');\\n        // set.add(\\'o\\');\\n        // set.add(\\'u\\');\\n        int count=0;\\n        for(int i=left;i<=right;i++)\\n        {\\n            String str=words[i];\\n           // return str.length();\\n            str=str.toLowerCase();\\n            for(int j=0;j<str.length();j++)\\n            {\\n                if((str.charAt(0)==\\'a\\'  || str.charAt(0)==\\'i\\'  || str.charAt(0)==\\'e\\'  || str.charAt(0)==\\'o\\'  || str.charAt(0)==\\'u\\')  && (str.charAt(str.length()-1)==\\'a\\'  || str.charAt(str.length()-1)==\\'i\\'  || str.charAt(str.length()-1)==\\'e\\'  || str.charAt(str.length()-1)==\\'o\\'  || str.charAt(str.length()-1)==\\'u\\'))\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3870419,
                "title": "java-fastest-solution",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n\\n        for(int i = left; i <= right; i++){\\n            char start = words[i].charAt(0);\\n            char end = words[i].charAt(words[i].length()-1);\\n\\n            if(\\n                (start == \\'a\\' || start == \\'e\\' || start == \\'i\\' || start == \\'o\\' || start == \\'u\\')\\n                &&\\n                (end == \\'a\\' || end == \\'e\\' || end == \\'i\\' || end == \\'o\\' || end == \\'u\\')\\n            ) count++;\\n\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int vowelStrings(String[] words, int left, int right) {\\n        int count = 0;\\n\\n        for(int i = left; i <= right; i++){\\n            char start = words[i].charAt(0);\\n            char end = words[i].charAt(words[i].length()-1);\\n\\n            if(\\n                (start == \\'a\\' || start == \\'e\\' || start == \\'i\\' || start == \\'o\\' || start == \\'u\\')\\n                &&\\n                (end == \\'a\\' || end == \\'e\\' || end == \\'i\\' || end == \\'o\\' || end == \\'u\\')\\n            ) count++;\\n\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3866035,
                "title": "python-99-faster",
                "content": "# Intuition\\nThe problem seems to require counting the number of words between two indices, left and right, that both start and end with a vowel.\\n\\n# Approach\\nThe approach taken by the provided code is straightforward:\\n\\nInitialize a counter to zero.\\nInitialize a list of vowels.\\nIterate over the list of words, but only between the indices left and right.\\nFor each word, check if the first and last characters are vowels.\\nIf both are vowels, increment the counter.\\nFinally, return the counter.\\n\\n# Complexity\\nTime complexity:\\nThe time complexity is O(n), where n is the number of words between indices left and right. This is because the code only iterates once over these words.\\n\\nSpace complexity:\\nThe space complexity is O(1), as the space used for the vowels list and the counter does not depend on the size of the input list of words.\\n\\n# Code\\n```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        counter = 0\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        \\n        for word in words[left:right + 1]:\\n            if word[0] in vowels and word[-1] in vowels:\\n                counter += 1\\n\\n        return counter\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\\n        counter = 0\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        \\n        for word in words[left:right + 1]:\\n            if word[0] in vowels and word[-1] in vowels:\\n                counter += 1\\n\\n        return counter\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 2019648,
                "content": [
                    {
                        "username": "Gaganpreet_09",
                        "content": "what is right and left here\\n"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        l = []\\n        l1 = [i for i in words if i == i[::-1]]\\n        for i in l1:\\n            return i\\n            break\\n        else:\\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one Line \\nreturn (int) Arrays.stream(words, left, right+1)\\n            .filter(w -> \"aeiou\".indexOf(w.charAt(0)) >= 0 && \"aeiou\".indexOf(w.charAt(w.length()-1)) >= 0)\\n            .count();"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "Simple code to find if the char is a vowel.\\n\\n`public boolean isVowel(char ch)`\\n`    {`\\n        `return ch == \\'a\\' ||`\\n             `ch == \\'e\\' || ch == \\'i\\' || `\\n             `ch == \\'o\\' || ch == \\'u\\';`\\n `   }`"
                    },
                    {
                        "username": "CharuSTC",
                        "content": "Input:\\n[\"vo\",\"j\",\"i\",\"s\",\"i\"]\\n0\\n3\\nOutput:\\n2\\nExpected:\\n1\\n\\nwhy isn\\'t the answer 2 ( 2 vowel string present in the array i.e. \"i\" & \"i\")?\\nCan anyone please explain me this.."
                    },
                    {
                        "username": "mohandivraniya",
                        "content": "You have to check the string within the inclusive range (left and right). So for this problem, the range values are left = 0 and right = 3. The last i in input is out of this range. So the expected output is 1."
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Avi_007](/Avi_007)  yes now understood. Thanks\\uD83D\\uDE0A"
                    },
                    {
                        "username": "Avi_007",
                        "content": "You Shold look for this constraint [@CharuSTC](/CharuSTC) \"Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\"\\n\\n "
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Kirill_JSDEV](/Kirill_JSDEV) Now I got it. Thankyou for resolving my doubt\\uD83D\\uDE0A\\uD83D\\uDE4F"
                    },
                    {
                        "username": "Kirill_JSDEV",
                        "content": "When you loop - you should loop not through the whole array, but only through the part between \"left\" and \"right\"  inclusive range"
                    }
                ]
            },
            {
                "id": 1845285,
                "content": [
                    {
                        "username": "Gaganpreet_09",
                        "content": "what is right and left here\\n"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        l = []\\n        l1 = [i for i in words if i == i[::-1]]\\n        for i in l1:\\n            return i\\n            break\\n        else:\\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one Line \\nreturn (int) Arrays.stream(words, left, right+1)\\n            .filter(w -> \"aeiou\".indexOf(w.charAt(0)) >= 0 && \"aeiou\".indexOf(w.charAt(w.length()-1)) >= 0)\\n            .count();"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "Simple code to find if the char is a vowel.\\n\\n`public boolean isVowel(char ch)`\\n`    {`\\n        `return ch == \\'a\\' ||`\\n             `ch == \\'e\\' || ch == \\'i\\' || `\\n             `ch == \\'o\\' || ch == \\'u\\';`\\n `   }`"
                    },
                    {
                        "username": "CharuSTC",
                        "content": "Input:\\n[\"vo\",\"j\",\"i\",\"s\",\"i\"]\\n0\\n3\\nOutput:\\n2\\nExpected:\\n1\\n\\nwhy isn\\'t the answer 2 ( 2 vowel string present in the array i.e. \"i\" & \"i\")?\\nCan anyone please explain me this.."
                    },
                    {
                        "username": "mohandivraniya",
                        "content": "You have to check the string within the inclusive range (left and right). So for this problem, the range values are left = 0 and right = 3. The last i in input is out of this range. So the expected output is 1."
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Avi_007](/Avi_007)  yes now understood. Thanks\\uD83D\\uDE0A"
                    },
                    {
                        "username": "Avi_007",
                        "content": "You Shold look for this constraint [@CharuSTC](/CharuSTC) \"Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\"\\n\\n "
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Kirill_JSDEV](/Kirill_JSDEV) Now I got it. Thankyou for resolving my doubt\\uD83D\\uDE0A\\uD83D\\uDE4F"
                    },
                    {
                        "username": "Kirill_JSDEV",
                        "content": "When you loop - you should loop not through the whole array, but only through the part between \"left\" and \"right\"  inclusive range"
                    }
                ]
            },
            {
                "id": 1844581,
                "content": [
                    {
                        "username": "Gaganpreet_09",
                        "content": "what is right and left here\\n"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        l = []\\n        l1 = [i for i in words if i == i[::-1]]\\n        for i in l1:\\n            return i\\n            break\\n        else:\\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one Line \\nreturn (int) Arrays.stream(words, left, right+1)\\n            .filter(w -> \"aeiou\".indexOf(w.charAt(0)) >= 0 && \"aeiou\".indexOf(w.charAt(w.length()-1)) >= 0)\\n            .count();"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "Simple code to find if the char is a vowel.\\n\\n`public boolean isVowel(char ch)`\\n`    {`\\n        `return ch == \\'a\\' ||`\\n             `ch == \\'e\\' || ch == \\'i\\' || `\\n             `ch == \\'o\\' || ch == \\'u\\';`\\n `   }`"
                    },
                    {
                        "username": "CharuSTC",
                        "content": "Input:\\n[\"vo\",\"j\",\"i\",\"s\",\"i\"]\\n0\\n3\\nOutput:\\n2\\nExpected:\\n1\\n\\nwhy isn\\'t the answer 2 ( 2 vowel string present in the array i.e. \"i\" & \"i\")?\\nCan anyone please explain me this.."
                    },
                    {
                        "username": "mohandivraniya",
                        "content": "You have to check the string within the inclusive range (left and right). So for this problem, the range values are left = 0 and right = 3. The last i in input is out of this range. So the expected output is 1."
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Avi_007](/Avi_007)  yes now understood. Thanks\\uD83D\\uDE0A"
                    },
                    {
                        "username": "Avi_007",
                        "content": "You Shold look for this constraint [@CharuSTC](/CharuSTC) \"Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\"\\n\\n "
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Kirill_JSDEV](/Kirill_JSDEV) Now I got it. Thankyou for resolving my doubt\\uD83D\\uDE0A\\uD83D\\uDE4F"
                    },
                    {
                        "username": "Kirill_JSDEV",
                        "content": "When you loop - you should loop not through the whole array, but only through the part between \"left\" and \"right\"  inclusive range"
                    }
                ]
            },
            {
                "id": 1840354,
                "content": [
                    {
                        "username": "Gaganpreet_09",
                        "content": "what is right and left here\\n"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        l = []\\n        l1 = [i for i in words if i == i[::-1]]\\n        for i in l1:\\n            return i\\n            break\\n        else:\\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one Line \\nreturn (int) Arrays.stream(words, left, right+1)\\n            .filter(w -> \"aeiou\".indexOf(w.charAt(0)) >= 0 && \"aeiou\".indexOf(w.charAt(w.length()-1)) >= 0)\\n            .count();"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "Simple code to find if the char is a vowel.\\n\\n`public boolean isVowel(char ch)`\\n`    {`\\n        `return ch == \\'a\\' ||`\\n             `ch == \\'e\\' || ch == \\'i\\' || `\\n             `ch == \\'o\\' || ch == \\'u\\';`\\n `   }`"
                    },
                    {
                        "username": "CharuSTC",
                        "content": "Input:\\n[\"vo\",\"j\",\"i\",\"s\",\"i\"]\\n0\\n3\\nOutput:\\n2\\nExpected:\\n1\\n\\nwhy isn\\'t the answer 2 ( 2 vowel string present in the array i.e. \"i\" & \"i\")?\\nCan anyone please explain me this.."
                    },
                    {
                        "username": "mohandivraniya",
                        "content": "You have to check the string within the inclusive range (left and right). So for this problem, the range values are left = 0 and right = 3. The last i in input is out of this range. So the expected output is 1."
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Avi_007](/Avi_007)  yes now understood. Thanks\\uD83D\\uDE0A"
                    },
                    {
                        "username": "Avi_007",
                        "content": "You Shold look for this constraint [@CharuSTC](/CharuSTC) \"Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\"\\n\\n "
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Kirill_JSDEV](/Kirill_JSDEV) Now I got it. Thankyou for resolving my doubt\\uD83D\\uDE0A\\uD83D\\uDE4F"
                    },
                    {
                        "username": "Kirill_JSDEV",
                        "content": "When you loop - you should loop not through the whole array, but only through the part between \"left\" and \"right\"  inclusive range"
                    }
                ]
            },
            {
                "id": 1830197,
                "content": [
                    {
                        "username": "Gaganpreet_09",
                        "content": "what is right and left here\\n"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "```class Solution:\\n    def firstPalindrome(self, words: List[str]) -> str:\\n        l = []\\n        l1 = [i for i in words if i == i[::-1]]\\n        for i in l1:\\n            return i\\n            break\\n        else:\\n            return \"\"```"
                    },
                    {
                        "username": "PrashDev001",
                        "content": "one Line \\nreturn (int) Arrays.stream(words, left, right+1)\\n            .filter(w -> \"aeiou\".indexOf(w.charAt(0)) >= 0 && \"aeiou\".indexOf(w.charAt(w.length()-1)) >= 0)\\n            .count();"
                    },
                    {
                        "username": "JavithSadhamHussain",
                        "content": "Simple code to find if the char is a vowel.\\n\\n`public boolean isVowel(char ch)`\\n`    {`\\n        `return ch == \\'a\\' ||`\\n             `ch == \\'e\\' || ch == \\'i\\' || `\\n             `ch == \\'o\\' || ch == \\'u\\';`\\n `   }`"
                    },
                    {
                        "username": "CharuSTC",
                        "content": "Input:\\n[\"vo\",\"j\",\"i\",\"s\",\"i\"]\\n0\\n3\\nOutput:\\n2\\nExpected:\\n1\\n\\nwhy isn\\'t the answer 2 ( 2 vowel string present in the array i.e. \"i\" & \"i\")?\\nCan anyone please explain me this.."
                    },
                    {
                        "username": "mohandivraniya",
                        "content": "You have to check the string within the inclusive range (left and right). So for this problem, the range values are left = 0 and right = 3. The last i in input is out of this range. So the expected output is 1."
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Avi_007](/Avi_007)  yes now understood. Thanks\\uD83D\\uDE0A"
                    },
                    {
                        "username": "Avi_007",
                        "content": "You Shold look for this constraint [@CharuSTC](/CharuSTC) \"Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\"\\n\\n "
                    },
                    {
                        "username": "CharuSTC",
                        "content": "[@Kirill_JSDEV](/Kirill_JSDEV) Now I got it. Thankyou for resolving my doubt\\uD83D\\uDE0A\\uD83D\\uDE4F"
                    },
                    {
                        "username": "Kirill_JSDEV",
                        "content": "When you loop - you should loop not through the whole array, but only through the part between \"left\" and \"right\"  inclusive range"
                    }
                ]
            }
        ]
    }
]