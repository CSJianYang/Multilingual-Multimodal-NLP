[
    {
        "title": "Employee Bonus",
        "question_content": "Table: Employee\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| empId       | int     |\n| name        | varchar |\n| supervisor  | int     |\n| salary      | int     |\n+-------------+---------+\nempId is the column with unique values for this table.\nEach row of this table indicates the name and the ID of an employee in addition to their salary and the id of their manager.\n\n&nbsp;\nTable: Bonus\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| empId       | int  |\n| bonus       | int  |\n+-------------+------+\nempId is the column of unique values for this table.\nempId is a foreign key (reference column) to empId from the Employee table.\nEach row of this table contains the id of an employee and their respective bonus.\n\n&nbsp;\nWrite a solution to report the name and bonus amount of each employee with a bonus less than 1000.\nReturn the result table in any order.\nThe&nbsp;result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nEmployee table:\n+-------+--------+------------+--------+\n| empId | name   | supervisor | salary |\n+-------+--------+------------+--------+\n| 3     | Brad   | null       | 4000   |\n| 1     | John   | 3          | 1000   |\n| 2     | Dan    | 3          | 2000   |\n| 4     | Thomas | 3          | 4000   |\n+-------+--------+------------+--------+\nBonus table:\n+-------+-------+\n| empId | bonus |\n+-------+-------+\n| 2     | 500   |\n| 4     | 2000  |\n+-------+-------+\nOutput: \n+------+-------+\n| name | bonus |\n+------+-------+\n| Brad | null  |\n| John | null  |\n| Dan  | 500   |\n+------+-------+",
        "solutions": [
            {
                "id": 3788149,
                "title": "left-join-solution",
                "content": "This one is very simple as you have to use `LEFT JOIN` You use Normally just the thing here is that you will have to aslo include the one whose value is null so use `IS NULL`  for bonus.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT Employee.name,Bonus.bonus FROM Employee \\nLEFT JOIN Bonus ON Employee.empID = Bonus.empID\\nWHERE bonus < 1000 OR Bonus IS NULL ;\\n```\\n![images.jpeg](https://assets.leetcode.com/users/images/539bc15d-1677-4947-b269-fe68849adc78_1689777081.6770382.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT Employee.name,Bonus.bonus FROM Employee \\nLEFT JOIN Bonus ON Employee.empID = Bonus.empID\\nWHERE bonus < 1000 OR Bonus IS NULL ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 425697,
                "title": "mysql-solution-left-join",
                "content": "\\n```\\nSELECT name, bonus\\nFROM Employee LEFT JOIN Bonus USING(empId)\\nWHERE COALESCE(bonus, 0) < 1000; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, bonus\\nFROM Employee LEFT JOIN Bonus USING(empId)\\nWHERE COALESCE(bonus, 0) < 1000; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3857359,
                "title": "100-easy-fast-clean-solution",
                "content": "IF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT E.name, B.bonus FROM Employee E LEFT OUTER JOIN Bonus B  ON \\n\\nE.empId = B.empId WHERE B.bonus < 1000 OR bonus IS NULL\\n```\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/519fe874-1df5-47bc-8dda-f280e10c8b5a_1691054420.0927076.jpeg)\\n",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT E.name, B.bonus FROM Employee E LEFT OUTER JOIN Bonus B  ON \\n\\nE.empId = B.empId WHERE B.bonus < 1000 OR bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 103016,
                "title": "accepted-solution",
                "content": "**SELECT** name, bonus\\n**FROM** Employee **LEFT** **JOIN** Bonus\\n**ON** Employee.empID=Bonus.empID\\n**WHERE** bonus<1000 **OR** bonus **IS** **NULL**",
                "solutionTags": [],
                "code": "**SELECT** name, bonus\\n**FROM** Employee **LEFT** **JOIN** Bonus\\n**ON** Employee.empID=Bonus.empID\\n**WHERE** bonus<1000 **OR** bonus **IS** **NULL**",
                "codeTag": "Unknown"
            },
            {
                "id": 773572,
                "title": "using-ifnull-instead-of-or-bonus-is-null",
                "content": "```\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE IFNULL(bonus, 0)<1000\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE IFNULL(bonus, 0)<1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3553746,
                "title": "beats-100-easy-approach-left-join-using-simple-explanation-isnull",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsing simple fucntions of sql i.e. joins and basic conditions or isnull to solve this quesion easily.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n###### **Approach 1**: Basic \\n\\n1. Using `LEFT JOIN` to join both the table on `empId` \\n```\\nSELECT e.name ,b.bonus from\\n        Employee e LEFT JOIN Bonus b \\n            USING(empId)\\n```\\n2. We have 2 Conditions i.e. if the `bonus <1000` or `bonus is null`. So we add these conditons. \\n```\\n        where \\n            bonus < 1000 or \\n            bonus is null ;\\n```\\n\\n###### **Approach 2**: ISNULL \\n\\n1. Same as above - Using `LEFT JOIN` to join both the table on `empId` \\n```\\nSELECT e.name ,b.bonus from\\n        Employee e LEFT JOIN Bonus b \\n            USING(empId)\\n```\\n2. Using `isnull()` as \\n    - if the `b.bonus` is not null then get the bonus value and check if `b.bonus < 1000`.\\n    - if the `b.bonus` is null then we make it 0 just to check then it is less than 1000 to get outcome.\\n```\\n    where \\n        ifnull(b.bonus, 0) <1000;\\n```\\n\\n\\n# Code\\n\\n###### **Approach 1**: Basic \\n\\n```SQL []\\nSELECT e.name ,b.bonus from\\n        Employee e LEFT JOIN Bonus b \\n            USING(empId)\\n        where \\n            bonus < 1000 or \\n            bonus is null ;\\n```\\n###### **Approach 2**: ISNULL \\n\\n```SQL []\\nSELECT e.name, b.bonus from\\n    Employee e left join bonus b \\n        USING(empId)\\n    where \\n        ifnull(b.bonus, 0) <1000;\\n```\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle",
                    "Database"
                ],
                "code": "```\\nSELECT e.name ,b.bonus from\\n        Employee e LEFT JOIN Bonus b \\n            USING(empId)\\n```\n```\\n        where \\n            bonus < 1000 or \\n            bonus is null ;\\n```\n```\\nSELECT e.name ,b.bonus from\\n        Employee e LEFT JOIN Bonus b \\n            USING(empId)\\n```\n```\\n    where \\n        ifnull(b.bonus, 0) <1000;\\n```\n```SQL []\\nSELECT e.name ,b.bonus from\\n        Employee e LEFT JOIN Bonus b \\n            USING(empId)\\n        where \\n            bonus < 1000 or \\n            bonus is null ;\\n```\n```SQL []\\nSELECT e.name, b.bonus from\\n    Employee e left join bonus b \\n        USING(empId)\\n    where \\n        ifnull(b.bonus, 0) <1000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3721781,
                "title": "mysql-simple-and-clean-beats-88",
                "content": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n# Intuition\\nThe problem asks us to write an SQL query to report the name and bonus amount of each employee with a bonus less than 1000. We can use a `NATURAL LEFT OUTER JOIN` clause to combine the `Employee` and `Bonus` tables, and a `WHERE` clause to filter the rows based on the bonus amount.\\n\\n# Approach\\n1. Use a `SELECT` statement to specify the columns we want to return: `name` and `bonus`.\\n2. Use a `FROM` clause with a `NATURAL LEFT OUTER JOIN` to combine the `Employee` and `Bonus` tables.\\n3. Use a `WHERE` clause with an `OR` condition to filter the rows where the bonus is less than 1000 or `NULL`.\\n4. The final query should look like this:\\n\\n```sql\\nSELECT name, bonus\\nFROM Employee NATURAL LEFT OUTER JOIN Bonus\\nWHERE bonus < 1000 OR bonus IS NULL;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n# Intuition\\nThe problem asks us to write an SQL query to report the name and bonus amount of each employee with a bonus less than 1000. We can use a `NATURAL LEFT OUTER JOIN` clause to combine the `Employee` and `Bonus` tables, and a `WHERE` clause to filter the rows based on the bonus amount.\\n\\n# Approach\\n1. Use a `SELECT` statement to specify the columns we want to return: `name` and `bonus`.\\n2. Use a `FROM` clause with a `NATURAL LEFT OUTER JOIN` to combine the `Employee` and `Bonus` tables.\\n3. Use a `WHERE` clause with an `OR` condition to filter the rows where the bonus is less than 1000 or `NULL`.\\n4. The final query should look like this:\\n\\n```sql\\nSELECT name, bonus\\nFROM Employee NATURAL LEFT OUTER JOIN Bonus\\nWHERE bonus < 1000 OR bonus IS NULL;",
                "codeTag": "Unknown"
            },
            {
                "id": 3705831,
                "title": "super-easy-solution",
                "content": "# Code\\n```\\nSELECT e.name   ,b.bonus\\nfrom Employee e left JOIN Bonus b on e.empId =b.empId \\nwhere bonus<1000 or bonus is null\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# Code\\n```\\nSELECT e.name   ,b.bonus\\nfrom Employee e left JOIN Bonus b on e.empId =b.empId \\nwhere bonus<1000 or bonus is null\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3815846,
                "title": "easy-myhsql-solution",
                "content": "\\n# Approach\\nWe use a LEFT JOIN to combine the \"Employee\" and \"Bonus\" tables based on the common column \"empId.\"\\nThe LEFT JOIN ensures that all records from the \"Employee\" table are included in the result, regardless of whether there is a matching record in the \"Bonus\" table or not.\\nThe ON clause specifies the condition for joining the tables based on the \"empId\" column.\\nThe WHERE clause further filters the result to include only those bonus amounts that are less than 1000 or are NULL (no bonus entry) for an employee.\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\nSELECT e.name, b.bonus\\nFROM Employee AS e\\nLEFT JOIN Bonus AS b ON b.empId = e.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT e.name, b.bonus\\nFROM Employee AS e\\nLEFT JOIN Bonus AS b ON b.empId = e.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3763702,
                "title": "solution-with-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee e \\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWhere b.bonus<1000\\nOR b.bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee e \\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWhere b.bonus<1000\\nOR b.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3584541,
                "title": "simple-execution-left-join-oracle-postgres",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis solution is as straightforward as possible. All we have to do is to execute LEFT JOIN. Why exactly LEFT? Just because it was said we should get null values either.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo do this problem successfully you can just divide this problem into subproblems.\\n\\n1. Firstly execute the following snippet - \\nYou will get the result of inner join that matches the records that belongs to each table accordingly. `(ON e.empId = b.empId)`\\n\\n```\\nSELECT e.name, b.bonus FROM \\nEmployee e INNER JOIN Bonus b\\nON e.empId = b.empId;\\n```\\n2. Secondly, just execute left join that will result in all records that belong to the first table and to the both tables as well. (You might consider this as an intersection of sets of records)\\n3. After this we should extract the essential data. Overall, we have to obtain null values or less than 1000. So just add `WHERE ...` keyword.\\n4. That\\'s all you have to do. Pretty simple, right?\\n\\n\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT e.name, b.bonus FROM \\nEmployee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS null;\\n\\n```\\n\\n\\nThank You for reading the solution. If you have any issues, please leave them in a comment section below.",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT e.name, b.bonus FROM \\nEmployee e INNER JOIN Bonus b\\nON e.empId = b.empId;\\n```\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT e.name, b.bonus FROM \\nEmployee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS null;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3482825,
                "title": "super-easy-left-join-approach-please-do-not-upvote-me-i-hate-upvoting",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT name, bonus\\nFROM Employee E\\nLEFT JOIN Bonus B\\nON E.empId = B.empId\\nWHERE bonus < 1000  OR bonus IS NULL\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT name, bonus\\nFROM Employee E\\nLEFT JOIN Bonus B\\nON E.empId = B.empId\\nWHERE bonus < 1000  OR bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3555257,
                "title": "sql-left-join-where-easy-solution",
                "content": "# Intuition\\nThe second table was simply joined to the first table and we used \"where\".\\n\\n![e2515d84-99cf-4499-80fb-fe458e1bbae2_1678932606.8004954.png](https://assets.leetcode.com/users/images/6b261ef7-69b2-411c-a35c-d51c9c3d549d_1684835616.5080044.png)\\n\\n\\n# Code\\n```\\nselect \\ne.name, b.bonus\\nfrom Employee e left join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nselect \\ne.name, b.bonus\\nfrom Employee e left join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3529222,
                "title": "mysql-solution-for-employee-bonus-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given query selects the names and bonuses of employees from the \"Employee\" table. It performs a left join with the \"Bonus\" table based on the empId column. It retrieves the records where the bonus is less than 1000 or null.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. It selects the name (name) and bonus (bonus) columns from the \"Employee\" table.\\n2. It performs a left join with the \"Bonus\" table using the empId column as the join condition.\\n3. The join retrieves matching records from the \"Bonus\" table for employees in the \"Employee\" table. If no matching record is found, the bonus value is null.\\n4. The query applies the filter condition bonus < 1000 or bonus is null to select records where the bonus is less than 1000 or null.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query depends on the size of the \"Employee\" and \"Bonus\" tables and the efficiency of indexing on the empId column. The left join operation involves scanning both tables and matching the empId values, which can have a time complexity of O(N * M), where N is the number of rows in the \"Employee\" table and M is the number of rows in the \"Bonus\" table. The filtering condition and any additional indexes can impact the performance, but the overall time complexity is typically linear or sublinear.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this query is determined by the memory required to process the join operation and store the result set. The space complexity is proportional to the size of the result set, which depends on the number of employees with a bonus less than 1000 or null. If the result set is large, it may require additional memory resources to store and return the data. However, if the result set is small compared to the total table size, the impact on space complexity is minimal.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect name, bonus from Employee as e left join  Bonus as b \\non e.empId = b.empId where bonus < 1000 or bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect name, bonus from Employee as e left join  Bonus as b \\non e.empId = b.empId where bonus < 1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3381959,
                "title": "left-join-mysql-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus from employee e left join  bonus b on e.empId=b.empId where b.bonus is null or b.bonus<1000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus from employee e left join  bonus b on e.empId=b.empId where b.bonus is null or b.bonus<1000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2366391,
                "title": "mysql",
                "content": "select name,bonus\\nfrom employee left join bonus\\non employee.empid = bonus.empid\\nwhere bonus < 1000 or bonus is null\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select name,bonus\\nfrom employee left join bonus\\non employee.empid = bonus.empid\\nwhere bonus < 1000 or bonus is null\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4058430,
                "title": "pandas-sql-easy-employee-bonus",
                "content": "[see the Successfully Submitted Details](https://leetcode.com/submissions/detail/1052339594/)\\n```python\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # 1) Initially, we merge using left outer join Employee and Bonus on \\'empId\\'\\n    merged_df = employee.merge(bonus, on=\\'empId\\', how=\\'left\\')\\n\\n    # 2) Then, we select rows where bonus is less than 1000 or is null\\n    filtered_df = merged_df[(merged_df[\\'bonus\\'] < 1000) | merged_df[\\'bonus\\'].isnull()]\\n\\n    # 3) Finally, we select only the \\'name\\' and \\'bonus\\' columns to return\\n    employee_bonus = filtered_df[[\\'name\\', \\'bonus\\']]\\n\\n    \\n    return employee_bonus\\n```\\n\\n**SQL**\\n[see the Successfully Submitted Details](https://leetcode.com/submissions/detail/1061653888/)\\n\\n```\\nSELECT name, bonus\\nFROM Employee _employee \\nLEFT OUTER JOIN Bonus _bonus ON _employee.empId = _bonus.empId\\nWHERE isnull(bonus) OR bonus < 1000\\n```\\n\\n```\\n-- Select the \"name\" and \"bonus\" columns from the \"Employee\" table and \"Bonus\" table, using aliases \"_employee\" and \"_bonus\" respectively\\nSELECT name, bonus\\n\\n-- Specify the source tables as \"Employee\" (aliased as \"_employee\") and \"Bonus\" (aliased as \"_bonus\") from which data will be retrieved\\nFROM Employee _employee \\nLEFT OUTER JOIN Bonus _bonus ON _employee.empId = _bonus.empId\\n\\n-- Apply a filter condition to the joined results:\\n-- We are selecting rows where the \"bonus\" value is either NULL (no bonus) or is less than 1000\\nWHERE isnull(bonus) OR bonus < 1000\\n```\\n\\n![image](https://assets.leetcode.com/users/images/288a524a-3aff-4fbf-af22-10d107eed4c3_1695222209.9620075.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```python\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # 1) Initially, we merge using left outer join Employee and Bonus on \\'empId\\'\\n    merged_df = employee.merge(bonus, on=\\'empId\\', how=\\'left\\')\\n\\n    # 2) Then, we select rows where bonus is less than 1000 or is null\\n    filtered_df = merged_df[(merged_df[\\'bonus\\'] < 1000) | merged_df[\\'bonus\\'].isnull()]\\n\\n    # 3) Finally, we select only the \\'name\\' and \\'bonus\\' columns to return\\n    employee_bonus = filtered_df[[\\'name\\', \\'bonus\\']]\\n\\n    \\n    return employee_bonus\\n```\n```\\nSELECT name, bonus\\nFROM Employee _employee \\nLEFT OUTER JOIN Bonus _bonus ON _employee.empId = _bonus.empId\\nWHERE isnull(bonus) OR bonus < 1000\\n```\n```\\n-- Select the \"name\" and \"bonus\" columns from the \"Employee\" table and \"Bonus\" table, using aliases \"_employee\" and \"_bonus\" respectively\\nSELECT name, bonus\\n\\n-- Specify the source tables as \"Employee\" (aliased as \"_employee\") and \"Bonus\" (aliased as \"_bonus\") from which data will be retrieved\\nFROM Employee _employee \\nLEFT OUTER JOIN Bonus _bonus ON _employee.empId = _bonus.empId\\n\\n-- Apply a filter condition to the joined results:\\n-- We are selecting rows where the \"bonus\" value is either NULL (no bonus) or is less than 1000\\nWHERE isnull(bonus) OR bonus < 1000\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3955665,
                "title": "most-easy-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT E.NAME,B.BONUS FROM EMPLOYEE E LEFT JOIN BONUS B ON E.EMPID=B.EMPID WHERE B.BONUS IS NULL OR B.BONUS<1000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT E.NAME,B.BONUS FROM EMPLOYEE E LEFT JOIN BONUS B ON E.EMPID=B.EMPID WHERE B.BONUS IS NULL OR B.BONUS<1000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3795844,
                "title": "i-used-left-join-and-i-get-beats-97-32-of-users-with-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nI used left join but this question can also solve from right join also . I tried both join but in the left join I get Beats 97.32% of users with MySQL\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\nselect e.name, b.bonus\\nfrom  employee e\\nleft Join Bonus b \\non e.empId = b.empId\\nwhere bonus is null or bonus <1000\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\nselect e.name, b.bonus\\nfrom  employee e\\nleft Join Bonus b \\non e.empId = b.empId\\nwhere bonus is null or bonus <1000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3775102,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name ,b.bonus from Employee e left join Bonus b on e.empid = b.empid where bonus < 1000 or bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name ,b.bonus from Employee e left join Bonus b on e.empid = b.empid where bonus < 1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3718171,
                "title": "my-solution",
                "content": "\\n# Code\\n```\\nselect name , bonus\\nfrom Employee e left join Bonus b \\non e.empId = b.empId \\nwhere bonus < 1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name , bonus\\nfrom Employee e left join Bonus b \\non e.empId = b.empId \\nwhere bonus < 1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3636135,
                "title": "simple-easy-approach-ii-left-join-sql",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect Employee.name , Bonus.bonus\\nfrom Employee left join Bonus\\non Employee.empId = Bonus.empId\\nwhere bonus is null || bonus<1000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Employee.name , Bonus.bonus\\nfrom Employee left join Bonus\\non Employee.empId = Bonus.empId\\nwhere bonus is null || bonus<1000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3582517,
                "title": "simple-sql-solution",
                "content": "\\n# Code\\n```\\n\\nSelect e.name, b.bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId = b.empId\\nwhere ifnull(b.bonus, 0) < 1000;\\n#where b.bonus < 1000 or b.bonus is null;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nSelect e.name, b.bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId = b.empId\\nwhere ifnull(b.bonus, 0) < 1000;\\n#where b.bonus < 1000 or b.bonus is null;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3579385,
                "title": "retrieving-names-and-bonuses-beats-96",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe problem asks us to retrieve the names and bonuses of employees from the \"Employee\" and \"Bonus\" tables. We need to include employees with bonuses less than 1000 or employees without a bonus. To do this, we will connect the two tables and apply the necessary filtering conditions.\\n# Approach\\nHere is a step-by-step explanation of your approach:\\n\\n1. We start by selecting the employee\\'s name and the bonus from the \"Employee\" and \"Bonus\" tables.\\n1. We use a left join to connect the two tables. This join ensures that all employees from the \"Employee\" table are included in the result, even if they don\\'t have a corresponding bonus in the \"Bonus\" table.\\n1. We then apply a filtering condition in the WHERE clause. This condition states that we want to include only bonuses less than 1000 or null bonuses. This filters out employees with bonuses greater than or equal to 1000.\\n1. Finally, we retrieve the names and bonuses that satisfy the filtering condition.\\n\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of your solution depends on the number of employees in the \"Employee\" table. We perform a left join and apply a filtering condition, both of which iterate through the employees\\' data. Therefore, the time complexity can be considered $$O(N)$$, where N is the number of employees.\\n\\n- Space complexity:\\nThe space complexity of your solution depends on the number of rows in the result set. Since we are selecting the names and bonuses of employees, the space required to store the result set will depend on the number of employees that satisfy the given conditions. Let\\'s assume this is M rows. Therefore, the space complexity can be considered $$O(M)$$.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from Employee e\\nleft join Bonus b using (empId)\\nwhere b.bonus<1000 or b.bonus is null\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/ddcd0164-5135-4f27-9c82-ca443bad3ef5_1685478614.0010624.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from Employee e\\nleft join Bonus b using (empId)\\nwhere b.bonus<1000 or b.bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3563726,
                "title": "left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus from employee e left join bonus b on e.empId=b.empId \\nwhere bonus<1000 or bonus is null\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus from employee e left join bonus b on e.empId=b.empId \\nwhere bonus<1000 or bonus is null\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3553636,
                "title": "simple-left-join-and-where-same-3-sql-variants-implementation",
                "content": "# Code\\n``` MS_SQL []\\n\\nSELECT    name, bonus\\nFROM      Employee e\\nLEFT JOIN Bonus b\\nON        e.empId = b.empId\\nWHERE     bonus IS NULL \\nOR        bonus < 1000\\n```\\n``` MySQL []\\n\\nSELECT    name, bonus\\nFROM      Employee e\\nLEFT JOIN Bonus b\\nON        e.empId = b.empId\\nWHERE     bonus IS NULL \\nOR        bonus < 1000\\n```\\n``` Oracle []\\n\\nSELECT    name, bonus\\nFROM      Employee e\\nLEFT JOIN Bonus b\\nON        e.empId = b.empId\\nWHERE     bonus IS NULL \\nOR        bonus < 1000\\n```\\n\\nEasy implementation. \\nYou just have to join the two tables. Since `no bonus` is **basically equal to bonus less than 1000**, we have to consider `all names with no entry in the bonus table`. Hence, the `LEFT JOIN`!\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "``` MS_SQL []\\n\\nSELECT    name, bonus\\nFROM      Employee e\\nLEFT JOIN Bonus b\\nON        e.empId = b.empId\\nWHERE     bonus IS NULL \\nOR        bonus < 1000\\n```\n``` MySQL []\\n\\nSELECT    name, bonus\\nFROM      Employee e\\nLEFT JOIN Bonus b\\nON        e.empId = b.empId\\nWHERE     bonus IS NULL \\nOR        bonus < 1000\\n```\n``` Oracle []\\n\\nSELECT    name, bonus\\nFROM      Employee e\\nLEFT JOIN Bonus b\\nON        e.empId = b.empId\\nWHERE     bonus IS NULL \\nOR        bonus < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3505498,
                "title": "easy-sql-query-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus from Employee as e left join Bonus as b on e.empId= b.empId where b.bonus<1000 or b.bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus from Employee as e left join Bonus as b on e.empId= b.empId where b.bonus<1000 or b.bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3427717,
                "title": "solution-with-left-join-sql-server",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\n\\nSELECT\\n    T1.name,\\n    T2.bonus\\nFROM\\n    Employee T1\\nLEFT JOIN   \\n    Bonus T2 ON T1.EmpID = T2.EmpID\\nWHERE\\n    Isnull(T2.bonus,0) < 1000\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\n\\nSELECT\\n    T1.name,\\n    T2.bonus\\nFROM\\n    Employee T1\\nLEFT JOIN   \\n    Bonus T2 ON T1.EmpID = T2.EmpID\\nWHERE\\n    Isnull(T2.bonus,0) < 1000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3372511,
                "title": "faster-than-97-of-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN (\\n    SELECT empId, SUM(bonus) as bonus \\n    FROM Bonus\\n    GROUP BY empId\\n) b ON e.empId = b.empId\\nWHERE b.bonus IS NULL OR b.bonus < 1000;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN (\\n    SELECT empId, SUM(bonus) as bonus \\n    FROM Bonus\\n    GROUP BY empId\\n) b ON e.empId = b.empId\\nWHERE b.bonus IS NULL OR b.bonus < 1000;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1924043,
                "title": "mysql-faster-than-77-80-elegant-solution",
                "content": "**O(n)**\\n\\n```\\nSELECT \\n    e.name, \\n    b.bonus \\nFROM \\n    Employee AS e \\nLEFT JOIN \\n    Bonus AS b \\nON \\n    e.empId = b.empId\\nWHERE\\n    b.bonus < 1000\\nOR \\n    b.bonus IS NULL;\\n```\\n\\n![image](https://assets.leetcode.com/users/images/5d47d3f0-1923-4cfb-a6c3-d86d78c29bd0_1649356560.7689407.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    e.name, \\n    b.bonus \\nFROM \\n    Employee AS e \\nLEFT JOIN \\n    Bonus AS b \\nON \\n    e.empId = b.empId\\nWHERE\\n    b.bonus < 1000\\nOR \\n    b.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1850833,
                "title": "why-doesn-t-the-condition-on-this-left-outer-join-work",
                "content": "I thought that my SQL code would work, but for some reason it\\'s not behaving as expected.\\n\\n```SQL\\n# Write your MySQL query statement below\\nSELECT Employee.name,\\n       Bonus.bonus\\nFROM Employee\\nLEFT OUTER JOIN Bonus ON (Employee.empId = Bonus.empId)\\nAND (IFNULL(Bonus.bonus, 0) < 1000);\\n```\\n\\nThis code returns a `Null` value for Thomas, but shouldn\\'t Thomas be filtered out since his bonus is 2,000? Why is it doing this, and do we have to use a `WHERE` clause?",
                "solutionTags": [],
                "code": "```SQL\\n# Write your MySQL query statement below\\nSELECT Employee.name,\\n       Bonus.bonus\\nFROM Employee\\nLEFT OUTER JOIN Bonus ON (Employee.empId = Bonus.empId)\\nAND (IFNULL(Bonus.bonus, 0) < 1000);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1848034,
                "title": "clean-and-simple-multiple-solutions-mysql-ms-sql-server-oracle",
                "content": "**Solution - MySQL, MS SQL Server, Oracle**:\\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL\\n```\\n\\n**COALESCE - MySQL, MS SQL Server, Oracle**:\\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE COALESCE(Bonus.bonus,0) < 1000\\n```\\n\\n**ISNULL - MS SQL Server**:\\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE ISNULL(Bonus.bonus,0) < 1000\\n```\\n\\n**IFNULL - MySQL**:\\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE IFNULL(Bonus.bonus,0) < 1000\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL\\n```\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE COALESCE(Bonus.bonus,0) < 1000\\n```\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE ISNULL(Bonus.bonus,0) < 1000\\n```\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE IFNULL(Bonus.bonus,0) < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 929891,
                "title": "simple-mysql-solution-using-left-join",
                "content": "SELECT name, bonus\\nFROM Employee\\nLEFT JOIN Bonus\\nUSING(empId)\\nWHERE bonus IS NULL OR bonus < 1000\\n\\n\\n~~~~\\nWe use a LEFT JOIN to keep all the records from Table Employee and use WHERE clause to find the cases without bonus or bonus < 1000. \\n\\n\\n\\n",
                "solutionTags": [],
                "code": "SELECT name, bonus\\nFROM Employee\\nLEFT JOIN Bonus\\nUSING(empId)\\nWHERE bonus IS NULL OR bonus < 1000\\n\\n\\n~~~~\\nWe use a LEFT JOIN to keep all the records from Table Employee and use WHERE clause to find the cases without bonus or bonus < 1000. \\n\\n\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4069034,
                "title": "pandas-oneliner-100-fastest",
                "content": "# Intuition\\nThis is an example of simplest left join. We filter rows with bonus less than 1000 OR with nulls (since no bonus is also less than 1000). \\n\\n# Approach\\nMerge(join) employee with bonus on \\'left\\', filter bonuses that are <1000 or are null. The simplest way is to do it using .query()\\nIt\\'s worth noticing, that comparison methods don\\'t take into consideration Null values, so we have to make two filters: `< 1000` or `.isna()`.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    return employee.merge(bonus, how = \"left\").query(\"(bonus < 1000) | bonus.isna()\")[[\"name\",\"bonus\"]]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    return employee.merge(bonus, how = \"left\").query(\"(bonus < 1000) | bonus.isna()\")[[\"name\",\"bonus\"]]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3948430,
                "title": "very-easy-solution-left-join",
                "content": "# Code\\n```\\nselect name ,bonus  \\nfrom Employee E\\nleft join Bonus B on (E.empId=B.empId)\\nwhere bonus<1000 or bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name ,bonus  \\nfrom Employee E\\nleft join Bonus B on (E.empId=B.empId)\\nwhere bonus<1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3821893,
                "title": "employee-bonus-mysql-solution-code",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect Employee.name, Bonus.bonus from Employee\\nleft join Bonus\\non Employee.empID = Bonus.empID\\nwhere Bonus < 1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Employee.name, Bonus.bonus from Employee\\nleft join Bonus\\non Employee.empID = Bonus.empID\\nwhere Bonus < 1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3675792,
                "title": "super-easy-left-join-or-condition",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, bonus from Employee left join Bonus on Employee.empId=Bonus.empId where Bonus.bonus<1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, bonus from Employee left join Bonus on Employee.empId=Bonus.empId where Bonus.bonus<1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3609160,
                "title": "easy-solution-using-ifnull-left-join-mysql-two-approaches",
                "content": "# Intuition\\nThe given MySQL query statement aims to retrieve the names and bonuses of employees from the \"Employee\" table, along with corresponding bonus information from the \"Bonus\" table. The query includes a left join to ensure that all employees are included in the result, regardless of whether they have a matching bonus record or not. It also applies a filter to select employees whose bonus is less than 1000 or employees who do not have a bonus record.\\n\\n# Approach 1 - Using IFNULL\\n\\n# Code\\n```\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE IFNULL(bonus, 0)<1000\\n```\\n# Code Explanation\\n1. The `SELECT` statement specifies the columns to be included in the result set: e.name for the employee name and b.bonus for the bonus amount.\\n2. The `FROM` clause indicates that data is being fetched from the \"Employee\" table with the alias e.\\n3. The `LEFT JOIN` keyword combines the \"Employee\" table with the \"Bonus\" table using the empId column as the join condition. This type of join ensures that all rows from the \"Employee\" table are included in the result set, regardless of whether there is a matching record in the \"Bonus\" table.\\n4. The `ON` clause specifies the condition for the join, which is the matching empId column between the two tables (e.empId=b.empId).\\n5. The `WHERE` clause filters the result set based on a condition. In this case, it checks if the bonus amount is less than 1000 using the `IFNULL` function. The `IFNULL` function replaces any null values with 0, allowing us to compare the bonus value against 1000.\\n6. The final result set will contain the employee names (e.name) and their corresponding bonuses (b.bonus) for those employees whose bonus is less than 1000 or employees who do not have a bonus record (b.bonus is null).\\n\\n# Second Approach without Using IFNULL\\n\\n# Code\\n```\\nselect E.name, B.bonus from Employee E left join \\nBonus B on E.empId = B.empId \\nwhere b.bonus < 1000 or b.bonus is null;\\n```\\n# Code Explanation\\n1. The query begins by selecting two columns: E.name to retrieve the employee names and B.bonus to fetch the bonus amounts. These columns will be included in the result set.\\n2. The FROM clause specifies the primary table as \"Employee\" with the alias E. This is the table from which the employee names will be retrieved.\\n3. The LEFT JOIN keyword is used to join the \"Employee\" table with the \"Bonus\" table. The ON clause specifies the condition for the join, which is the matching empId column in both tables.\\n4. The WHERE clause is used to filter the result set. It includes two conditions:\\n    - b.bonus < 1000: This condition selects employees whose bonus is less than 1000.\\n    - b.bonus IS NULL: This condition selects employees who do not have a corresponding bonus record, i.e., their bonus value is null.\\n1. These conditions combined ensure that employees with a bonus less than 1000 and those without a bonus are included in the final result.\\nThe result set will contain the employee names (E.name) and their corresponding bonuses (B.bonus) that meet the specified conditions.\\n\\n\\nPlease upvote if you find it helpful. Good luck!\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE IFNULL(bonus, 0)<1000\\n```\n```\\nselect E.name, B.bonus from Employee E left join \\nBonus B on E.empId = B.empId \\nwhere b.bonus < 1000 or b.bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3591215,
                "title": "very-easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- This is a very straight-forward query where we need to retrieve the name and bonus for every employee who received a bonus less than 1000. \\n- We must note that this **also includes employees who did not receive any bonus**, or in other words, bonus = 0.\\n- That is why we perform **LEFT JOIN with Employee table on left**(can also perform RIGHT JOIN but with Employee on right) so that we can include every employee who did or did not receieve the bonus.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. In the SELECT statement, we retrieve the name and bonus of employee from Employee and Bonus tables respectively. \\n2. Since these columns(attributes) are not common to both the tables, not writing the aliases will give **better runtime** in the solution.\\n3. In the FROM statement, we perform a **LEFT OUTER JOIN with Employee table on the left side so that we can include every employee who did or did not receieve the bonus**. \\n4. In the WHERE clause, we mention the condition **bonus<1000** for employees who received bonus but less than 1000 and the condition **bonus is NULL** for employees who did not receive the bonus at all.\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name, bonus\\nFROM Employee as E LEFT OUTER JOIN Bonus as B\\nON E.empID = B.empID\\nWHERE bonus < \\'1000\\' OR bonus is NULL;\\n```\\n# Note\\nPlease upvote if you find my solution helpful. If you have any doubts, suggestion or want to discuss any solution, comment it. If you wish to discuss other related topics, feel free to message me on LinkedIn, https://leetcode.com/prathams29/",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, bonus\\nFROM Employee as E LEFT OUTER JOIN Bonus as B\\nON E.empID = B.empID\\nWHERE bonus < \\'1000\\' OR bonus is NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3578176,
                "title": "same-query-for-all-db-left-join-with-null-and-1000-where-clause",
                "content": "```\\nselect name, bonus from \\nemployee e left join bonus b on e.empid=b.empid \\nwhere (bonus is null or bonus<1000);\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nselect name, bonus from \\nemployee e left join bonus b on e.empid=b.empid \\nwhere (bonus is null or bonus<1000);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3558582,
                "title": "left-join-with-or-operator-beginner-friendly",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\n\\n\\nSELECT name,bonus\\nFROM Employee LEFT JOIN Bonus ON Employee.empId = Bonus.empId \\nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\\n\\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\n\\n\\nSELECT name,bonus\\nFROM Employee LEFT JOIN Bonus ON Employee.empId = Bonus.empId \\nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3416396,
                "title": "ms-sql-with-left-join-and-subquery",
                "content": "# Intuition\\nleft join on id, bonus < 1000\\n\\n# Approach\\n\"null\" value not found on condition bonus < 1000,\\nthen I have exclude all values >=1000\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect name, bonus\\nfrom Employee e\\nleft join Bonus b on e.empid = b.empid\\nwhere e.empid not in (select empid from Bonus where bonus >= 1000)\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect name, bonus\\nfrom Employee e\\nleft join Bonus b on e.empid = b.empid\\nwhere e.empid not in (select empid from Bonus where bonus >= 1000)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3376287,
                "title": "mysql-solution-beats-75-85-sub-query",
                "content": "# Intuition\\nI have used `LEFT JOIN` to Join the tables`Employee` and `Bonus`\\nNow since there can be employees without bonus, I have filtered the records to have `NULL` values in the column `b.bonus`. \\n\\nThe Sub-Query further, filters the records on the condition `b.bonus < 1000` \\n\\n# Code\\n```\\nSELECT\\n    e.name, \\n    b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nUSING(empId)\\nWHERE b.bonus IS NULL \\nOR b.bonus IN(\\n    SELECT\\n        b.bonus\\n    FROM Employee e\\n    INNER JOIN Bonus b\\n    USING(empId)\\n    WHERE b.bonus < 1000\\n);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    e.name, \\n    b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nUSING(empId)\\nWHERE b.bonus IS NULL \\nOR b.bonus IN(\\n    SELECT\\n        b.bonus\\n    FROM Employee e\\n    INNER JOIN Bonus b\\n    USING(empId)\\n    WHERE b.bonus < 1000\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1902389,
                "title": "simple-sql-solution-using-left-join-and-coalesce-ifnull-and-is-null",
                "content": "```\\nselect name, bonus\\nfrom employee left join bonus on employee.empId = bonus.empId\\nwhere bonus < 1000 or bonus is null\\n\\nselect name, bonus\\nfrom employee left join bonus on employee.empId = bonus.empId\\nwhere IFNULL(bonus, 0) < 1000\\n\\nselect name, bonus\\nfrom employee left join bonus on employee.empId = bonus.empId\\nwhere COALESCE(bonus, 0) < 1000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name, bonus\\nfrom employee left join bonus on employee.empId = bonus.empId\\nwhere bonus < 1000 or bonus is null\\n\\nselect name, bonus\\nfrom employee left join bonus on employee.empId = bonus.empId\\nwhere IFNULL(bonus, 0) < 1000\\n\\nselect name, bonus\\nfrom employee left join bonus on employee.empId = bonus.empId\\nwhere COALESCE(bonus, 0) < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1840775,
                "title": "sql-server-solution-using-left-join",
                "content": "Here is my solution in SQL Server. Should work for MySql as well. I\\'m open to any feedbacks as well. \\n \\n```\\nSELECT A.name, bonus FROM dbo.Employee A\\nLEFT JOIN Bonus B\\nON A.empID = B.empId\\nWHERE bonus < 1000 OR bonus IS NULL\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT A.name, bonus FROM dbo.Employee A\\nLEFT JOIN Bonus B\\nON A.empID = B.empId\\nWHERE bonus < 1000 OR bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1823093,
                "title": "left-join",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nselect e.name as \"name\", b.bonus as \"bonus\"\\nfrom employee e\\nleft join bonus b\\non e.empid= b.empid\\nwhere b.bonus<1000 or b.bonus is null\\n\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect e.name as \"name\", b.bonus as \"bonus\"\\nfrom employee e\\nleft join bonus b\\non e.empid= b.empid\\nwhere b.bonus<1000 or b.bonus is null\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 983479,
                "title": "simple-mysql-solution-using-left-join-and-not-in",
                "content": "\\n``` \\nSELECT \\n    e.name,\\n    b.bonus \\n\\nFROM Employee e\\nLEFT JOIN Bonus b ON b.empId  = e.empId\\nWHERE (e.empId not in (SELECT b.empId from Bonus b)) OR (b.bonus < 1000)\\n\\n```",
                "solutionTags": [],
                "code": "``` \\nSELECT \\n    e.name,\\n    b.bonus \\n\\nFROM Employee e\\nLEFT JOIN Bonus b ON b.empId  = e.empId\\nWHERE (e.empId not in (SELECT b.empId from Bonus b)) OR (b.bonus < 1000)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 958778,
                "title": "use-nvl-oracle",
                "content": "```\\nSELECT e.name , b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId \\nWHERE NVL(b.bonus,0)<1000;",
                "solutionTags": [],
                "code": "```\\nSELECT e.name , b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId \\nWHERE NVL(b.bonus,0)<1000;",
                "codeTag": "Unknown"
            },
            {
                "id": 575497,
                "title": "mysql-solution-beats-over-99",
                "content": "```\\n# Write your MySQL query statement below\\nselect\\n    name\\n    ,bonus\\nfrom\\n    Employee as e\\nleft join\\n    Bonus as b\\non\\n    e.empId = b.empId\\nwhere\\n    ifnull(bonus, 0) < 1000\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    name\\n    ,bonus\\nfrom\\n    Employee as e\\nleft join\\n    Bonus as b\\non\\n    e.empId = b.empId\\nwhere\\n    ifnull(bonus, 0) < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 550299,
                "title": "my-solution",
                "content": "```\\nSELECT em.name,\\n       bo.bonus\\nFROM Employee as em\\nLEFT JOIN Bonus as bo\\nON em.empId = bo.empId\\nWHERE bo.bonus < 1000 OR \\n      bo.bonus IS NULL;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT em.name,\\n       bo.bonus\\nFROM Employee as em\\nLEFT JOIN Bonus as bo\\nON em.empId = bo.empId\\nWHERE bo.bonus < 1000 OR \\n      bo.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 536084,
                "title": "ms-sql-solution-easy-to-understand",
                "content": "```\\nselect e.name, b.bonus\\nfrom Employee e\\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000\\nor b.bonus IS NULL\\n```",
                "solutionTags": [],
                "code": "```\\nselect e.name, b.bonus\\nfrom Employee e\\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000\\nor b.bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 510392,
                "title": "simple-solution",
                "content": "```\\nselect e.name, bonus\\nfrom Employee e\\nleft join Bonus b on e.empId = b.empId\\nwhere IFNULL(bonus, 0) < 1000",
                "solutionTags": [],
                "code": "```\\nselect e.name, bonus\\nfrom Employee e\\nleft join Bonus b on e.empId = b.empId\\nwhere IFNULL(bonus, 0) < 1000",
                "codeTag": "Unknown"
            },
            {
                "id": 450619,
                "title": "ms-sql",
                "content": "```\\nselect e.name, b.bonus\\n\\nfrom \\n\\nEmployee e\\n\\nleft join \\n\\nBonus b\\n\\non e.empId = b.empId where b.bonus < 1000 or b.bonus is null;\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect e.name, b.bonus\\n\\nfrom \\n\\nEmployee e\\n\\nleft join \\n\\nBonus b\\n\\non e.empId = b.empId where b.bonus < 1000 or b.bonus is null;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 343550,
                "title": "2-solutions",
                "content": "Problem can be solved with a join or subquery (latter is more simplistic but has a larger runtime).\\n\\nJoin:\\n```\\nselect name, bonus\\nfrom Employee left join Bonus using(empId)\\nwhere bonus < 1000 or bonus is NULL;\\n```\\n\\nSubquery:\\n```\\nselect name, bonus\\nfrom Employee left join Bonus using(empId)\\nwhere empId not in (select empId from Bonus where bonus >= 1000);\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, bonus\\nfrom Employee left join Bonus using(empId)\\nwhere bonus < 1000 or bonus is NULL;\\n```\n```\\nselect name, bonus\\nfrom Employee left join Bonus using(empId)\\nwhere empId not in (select empId from Bonus where bonus >= 1000);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 103015,
                "title": "questions-about-ac-code-and-another-version",
                "content": "I'm obviously not good at SQL and I know the correct solution is \\n```\\nSELECT\\n    Employee.name, Bonus.bonus\\nFROM\\n    Employee\\n        LEFT JOIN\\n    Bonus ON Employee.empid = Bonus.empid\\nWHERE\\n    bonus < 1000 OR bonus IS NULL\\n```\\n\\nBut at first, I wrote \\n```\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee, Bonus\\nWHERE Employee.empId = Bonus.empId\\nAND bonus < 1000 OR bonus IS NULL\\n```\\nAnd it didn't return the null record. \\n\\nCan someone explain why? Thank you",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    Employee.name, Bonus.bonus\\nFROM\\n    Employee\\n        LEFT JOIN\\n    Bonus ON Employee.empid = Bonus.empid\\nWHERE\\n    bonus < 1000 OR bonus IS NULL\\n```\n```\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee, Bonus\\nWHERE Employee.empId = Bonus.empId\\nAND bonus < 1000 OR bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4107125,
                "title": "left-join",
                "content": "```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus \\nfrom Employee e left join Bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus \\nfrom Employee e left join Bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4105300,
                "title": "pandas-and-mysql",
                "content": "## MySQL\\n```sql []\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE IFNULL(Bonus.bonus, 0) < 1000;\\n```\\n\\n## Pandas\\n```py []\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    leftMerged = employee.merge(bonus, how=\\'left\\', on=\\'empId\\')\\n    filter = (leftMerged[\\'bonus\\'] < 1000) | (leftMerged[\\'bonus\\'].isna())\\n    return leftMerged[filter][[\\'name\\', \\'bonus\\']] \\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```sql []\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE IFNULL(Bonus.bonus, 0) < 1000;\\n```\n```py []\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    leftMerged = employee.merge(bonus, how=\\'left\\', on=\\'empId\\')\\n    filter = (leftMerged[\\'bonus\\'] < 1000) | (leftMerged[\\'bonus\\'].isna())\\n    return leftMerged[filter][[\\'name\\', \\'bonus\\']] \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4103032,
                "title": "simple-mysql-solution-using-left-join",
                "content": "# Code\\n```\\nSELECT e.name, b.bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId \\nWHERE b.bonus <1000 OR b.bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT e.name, b.bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId \\nWHERE b.bonus <1000 OR b.bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4102955,
                "title": "where-not-in-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE e.empId NOT IN (SELECT empId FROM Bonus WHERE bonus >= 1000)\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE e.empId NOT IN (SELECT empId FROM Bonus WHERE bonus >= 1000)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4102712,
                "title": "easy-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect E.name,b.bonus From Employee E Left Join Bonus B on E.empId = B.empId where b.bonus < 1000 or b.bonus Is Null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect E.name,b.bonus From Employee E Left Join Bonus B on E.empId = B.empId where b.bonus < 1000 or b.bonus Is Null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4101864,
                "title": "solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH CTE AS \\n(\\n    SELECT empID , bonus\\n    FROM Bonus\\n    WHERE bonus<1000\\n)\\nSELECT E.name, C.bonus\\nFROM Employee E LEFT JOIN CTE C ON E.empID=C.empID\\nWHERE E.empID NOT IN (SELECT empID \\n                       FROM Bonus\\n                       WHERE bonus>=1000 );\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH CTE AS \\n(\\n    SELECT empID , bonus\\n    FROM Bonus\\n    WHERE bonus<1000\\n)\\nSELECT E.name, C.bonus\\nFROM Employee E LEFT JOIN CTE C ON E.empID=C.empID\\nWHERE E.empID NOT IN (SELECT empID \\n                       FROM Bonus\\n                       WHERE bonus>=1000 );\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4101550,
                "title": "easy-ms-sql-server-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect e.name, b.bonus from employee e left join bonus b on e.empId=b.empID where b.bonus < 1000 or b.bonus is null\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect e.name, b.bonus from employee e left join bonus b on e.empId=b.empID where b.bonus < 1000 or b.bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097907,
                "title": "mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee e left outer join Bonus b on e.empId = b.empId\\nwhere isnull(bonus) or bonus < 1000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee e left outer join Bonus b on e.empId = b.empId\\nwhere isnull(bonus) or bonus < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097723,
                "title": "using-union-all",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect e.name as name,b.bonus as bonus\\nfrom Bonus b\\njoin Employee e\\non b.empId = e.empId\\nwhere b.bonus<1000\\nunion all\\nselect e.name as name ,  b.bonus as bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId = b.empId\\nwhere b.empid is null\\norder by  e.name ASC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect e.name as name,b.bonus as bonus\\nfrom Bonus b\\njoin Employee e\\non b.empId = e.empId\\nwhere b.bonus<1000\\nunion all\\nselect e.name as name ,  b.bonus as bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId = b.empId\\nwhere b.empid is null\\norder by  e.name ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096210,
                "title": "577-employee-bonus",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name, bonus\\nFROM (\\nSELECT e.name, b.bonus\\nFROM Employee AS e\\nLEFT JOIN Bonus AS b\\nON e.empId = b.empId ) AS alias\\nWHERE bonus < 1000 OR bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, bonus\\nFROM (\\nSELECT e.name, b.bonus\\nFROM Employee AS e\\nLEFT JOIN Bonus AS b\\nON e.empId = b.empId ) AS alias\\nWHERE bonus < 1000 OR bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096152,
                "title": "beats-94-84-simple-left-join",
                "content": "# Intuition\\nJoin information from two tables and filter on a column\\n\\n# Approach\\nLeft Join with simple where clause to filter the joined table\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT a.name, b.bonus\\nFROM Employee as a\\nLEFT JOIN Bonus as b\\nON a.empId=b.empId\\nWHERE bonus < 1000 or bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT a.name, b.bonus\\nFROM Employee as a\\nLEFT JOIN Bonus as b\\nON a.empId=b.empId\\nWHERE bonus < 1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095829,
                "title": "employee-bonus",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus FROM Employee e left join Bonus b on e.empId = b.empId where bonus<1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus FROM Employee e left join Bonus b on e.empId = b.empId where bonus<1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095467,
                "title": "my-solution-beat-98-87-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUSE LEFT JOIN TO get all Employees even those without bonus\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee as e\\nLEFT JOIN\\nBonus as b\\non e.empId=b.empId\\nwhere bonus < 1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee as e\\nLEFT JOIN\\nBonus as b\\non e.empId=b.empId\\nwhere bonus < 1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095326,
                "title": "100-easy-fast-clean-solution",
                "content": "\\n\\n# Code\\n```\\nselect name ,bonus from employee e left join bonus b on e.empid=b.empid where bonus <1000 or bonus is null\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect name ,bonus from employee e left join bonus b on e.empid=b.empid where bonus <1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094395,
                "title": "577-employee-bonus",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee AS e LEFT JOIN Bonus AS b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee AS e LEFT JOIN Bonus AS b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093412,
                "title": "mysql-simple-solution",
                "content": "\\n```\\n# Write your MySQL query statement below\\nSELECT a.name, b.bonus\\nFROM Employee a \\nLEFT JOIN Bonus b ON a.empId=b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT a.name, b.bonus\\nFROM Employee a \\nLEFT JOIN Bonus b ON a.empId=b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092450,
                "title": "direct-and-simple-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\nselect e.name ,b.bonus \\nfrom Employee  e\\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus  < 1000 or  bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\nselect e.name ,b.bonus \\nfrom Employee  e\\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus  < 1000 or  bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092269,
                "title": "employee-bonus-sql-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can solve this problem using Right Join. Since we have NULL values in Bonus, we will also include NULL condition in where clause\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can either use left join or right join \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n1974ms\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0.00 MB\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from\\nBonus b\\nright join Employee e on e.empID = b.empID\\nwhere bonus < 1000 or bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from\\nBonus b\\nright join Employee e on e.empID = b.empID\\nwhere bonus < 1000 or bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092210,
                "title": "focus-on-condition",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus\\nfrom employee e left join bonus b on e.empId=b.empId\\nwhere bonus <1000 or bonus is Null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus\\nfrom employee e left join bonus b on e.empId=b.empId\\nwhere bonus <1000 or bonus is Null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091667,
                "title": "sql-left-join",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT EM.name , B.bonus FROM Employee EM LEFT JOIN Bonus B ON \\nEM.empId = B.empId WHERE B.bonus < 1000 OR Bonus is NULL;\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT EM.name , B.bonus FROM Employee EM LEFT JOIN Bonus B ON \\nEM.empId = B.empId WHERE B.bonus < 1000 OR Bonus is NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090858,
                "title": "employee-bonus-solution",
                "content": "Solution\\n\\nEmployee Bonus\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 4090849,
                "title": "konka-vamsi",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT name , bonus\\nFROM Employee as E\\nLEFT JOIN Bonus as B\\nON E.empId =  B.empId\\nwhere bonus is null or bonus < 1000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT name , bonus\\nFROM Employee as E\\nLEFT JOIN Bonus as B\\nON E.empId =  B.empId\\nwhere bonus is null or bonus < 1000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090395,
                "title": "easyyy-peasyyy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name , bonus\\nfrom Employee as e\\nLEFT JOIN bonus as b\\nON e.empID = b.empID\\nwhere bonus<1000 OR bonus IS NULL;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name , bonus\\nfrom Employee as e\\nLEFT JOIN bonus as b\\nON e.empID = b.empID\\nwhere bonus<1000 OR bonus IS NULL;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090094,
                "title": "beats-98-74-of-users-with-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n    Employee.name,\\n    Bonus.bonus \\nFROM \\n    Employee Employee \\nLEFT JOIN \\n    Bonus Bonus \\nON \\n    Bonus.empId=Employee.empId \\nWHERE \\n    bonus<1000 \\nOR \\n    bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    Employee.name,\\n    Bonus.bonus \\nFROM \\n    Employee Employee \\nLEFT JOIN \\n    Bonus Bonus \\nON \\n    Bonus.empId=Employee.empId \\nWHERE \\n    bonus<1000 \\nOR \\n    bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089453,
                "title": "simple-mysql-query",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect name, bonus \\nfrom Employee\\nLeft join Bonus on Bonus.empId = Employee.empId\\nwhere Bonus is null or \\nBonus.bonus < 1000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, bonus \\nfrom Employee\\nLeft join Bonus on Bonus.empId = Employee.empId\\nwhere Bonus is null or \\nBonus.bonus < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086643,
                "title": "solution-for-this-in-oracle-this-will-also-work",
                "content": "# The reason for Left outer join is, Not everyone will receive bonus, but we need to include all whose bonus is less than 1000. In order to include bonus value null also in a single statement, here using nvl func\\n\\nselect A.name, B.bonus from employee a left outer join bonus B on\\nA.empID=B.empID where nvl(B.bonus,0)<1000;",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "# The reason for Left outer join is, Not everyone will receive bonus, but we need to include all whose bonus is less than 1000. In order to include bonus value null also in a single statement, here using nvl func\\n\\nselect A.name, B.bonus from employee a left outer join bonus B on\\nA.empID=B.empID where nvl(B.bonus,0)<1000;",
                "codeTag": "Unknown"
            },
            {
                "id": 4086566,
                "title": "easy-intuitive-clean-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Employee.name, Bonus.bonus from Employee\\nleft join Bonus on Employee.empId = Bonus.empId\\nwhere Bonus.bonus < 1000 or Bonus.bonus is NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Employee.name, Bonus.bonus from Employee\\nleft join Bonus on Employee.empId = Bonus.empId\\nwhere Bonus.bonus < 1000 or Bonus.bonus is NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086388,
                "title": "left-outer-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee\\nLEFT OUTER JOIN Bonus\\nOn Employee.empId = Bonus.empId\\nWHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee\\nLEFT OUTER JOIN Bonus\\nOn Employee.empId = Bonus.empId\\nWHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086350,
                "title": "t-sql-left-join-solution-beats-98",
                "content": "Somehow using `ISNULL` function on \\'bonus\\' column of table Bonus is faster then two conditions in the \\'WHERE\\' clause:\\n`b.bonus < 1000 OR b.bonus IS NULL`.\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE ISNULL(b.bonus, 0) < 1000;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE ISNULL(b.bonus, 0) < 1000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086038,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name , b.bonus from employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus<1000 or b.bonus is null\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name , b.bonus from employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus<1000 or b.bonus is null\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085247,
                "title": "simple-and-understandable-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSelect name,bonus\\nfrom Employee e\\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSelect name,bonus\\nfrom Employee e\\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085018,
                "title": "clear-explanation-simple-solution",
                "content": "# IDEA: COALESCE() \\n\\nWe use the built in coalesce() function, coalesce(column1, alternativeValue), results in either column1 value, or alternativeValue that we provide as an argument. \\nIn this exmample, we either take the actual bonus value, or the value 0 in case that there is no corresponding value for the employee in the bonus table. \\n\\n# Code explanation:\\nLeft join the two tables on the empId column. Since left join results in null values where there is no corresponding row in the second table, we get the table of 2 null and 2 bonus value rows. Then we use the where clause to filter out the values that are greater than 1000. we do this with the help of the coalesce function, which I explained above. \\n\\n# Code\\n```\\nselect \\nname,\\nbonus\\nfrom \\nEmployee\\nleft join \\nBonus \\non Employee.empId = Bonus.empId\\nwhere coalesce(bonus,0) < 1000\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\nname,\\nbonus\\nfrom \\nEmployee\\nleft join \\nBonus \\non Employee.empId = Bonus.empId\\nwhere coalesce(bonus,0) < 1000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084062,
                "title": "easy-oracle-fast-solution",
                "content": "\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect e.name, b.bonus\\nfrom employee e left outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect e.name, b.bonus\\nfrom employee e left outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083465,
                "title": "sreeja-s-approach-mysql-beats-88-75-and-100-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStep - 1 : As we need the output columns name and bonus and they are in different tables join them using left join on empId.\\nStep - 2 : Now you got a new table, perform the condition that he given that is bonus < 1000 or some employees dont have bonus we need to print that too so,for that bonus is null.\\nStep - 3 : Ok, the query is exactly to the problem just run and submit.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus \\nfrom Employee e left join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus \\nfrom Employee e left join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082250,
                "title": "simple-solution-with-left-join-and-having",
                "content": "# Approach\\nUsing HAVING block instead of WHERE\\n\\n# Code\\n```\\nSELECT e.name, SUM(b.bonus) as bonus\\nFROM Employee e LEFT JOIN Bonus b ON e.empId = b.empId\\nGROUP BY e.empId\\nHAVING bonus < 1000 OR bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT e.name, SUM(b.bonus) as bonus\\nFROM Employee e LEFT JOIN Bonus b ON e.empId = b.empId\\nGROUP BY e.empId\\nHAVING bonus < 1000 OR bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082145,
                "title": "simple-pandas-solution",
                "content": "Merge tables using outer join.\\n\\nFilter for employees with \\'bonus\\' NOT greater than or equal to 1000 OR \\'bonus\\' that is null\\n\\nGrab necessary columns \\'name\\' and \\'bonus\\'\\n\\n\\n\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(employee, bonus, how=\\'outer\\')\\n    return df[~(df[\\'bonus\\'] >= 1000) | df[\\'bonus\\'].isna()][[\\'name\\', \\'bonus\\']]\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.merge(employee, bonus, how=\\'outer\\')\\n    return df[~(df[\\'bonus\\'] >= 1000) | df[\\'bonus\\'].isna()][[\\'name\\', \\'bonus\\']]\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4081939,
                "title": "sql-simple-solution",
                "content": "# Code\\n```\\nSELECT \\n  e.name,\\n  b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE b.bonus IS NULL OR b.bonus < 1000\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT \\n  e.name,\\n  b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE b.bonus IS NULL OR b.bonus < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081749,
                "title": "easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus from employee e\\nleft join bonus b\\non e.empid=b.empid\\nwhere b.bonus<1000 or b.bonus is null\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus from employee e\\nleft join bonus b\\non e.empid=b.empid\\nwhere b.bonus<1000 or b.bonus is null\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080386,
                "title": "simple-solution-easy-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect e.name, b.bonus\\nfrom employee e , bonus b\\nwhere e.empid = b.empid(+) and( b.bonus is null or b.bonus <1000)\\n```",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect e.name, b.bonus\\nfrom employee e , bonus b\\nwhere e.empid = b.empid(+) and( b.bonus is null or b.bonus <1000)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079249,
                "title": "left-join",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect t1.name,t2.bonus\\nfrom Employee as t1\\nLeft Join Bonus as t2 on t1.empId=t2.empId\\nwhere  t2.bonus is null or t2.bonus<1000\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect t1.name,t2.bonus\\nfrom Employee as t1\\nLeft Join Bonus as t2 on t1.empId=t2.empId\\nwhere  t2.bonus is null or t2.bonus<1000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077730,
                "title": "fast-simple-query",
                "content": "# Code\\n```\\n/* SQL query  */\\nselect e.name, b.bonus from Employee e Left join Bonus b on e.empId=b.empId where bonus<1000 or bonus is null  ;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* SQL query  */\\nselect e.name, b.bonus from Employee e Left join Bonus b on e.empId=b.empId where bonus<1000 or bonus is null  ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077346,
                "title": "sql-join",
                "content": "# Intuition\\nif two tables are there directly go for join\\n# Approach\\ngiven below\\n# Complexity\\n- Time complexity:\\nmedium\\n- Space complexity:\\nmedium\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus \\nFROM Employee e \\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE b.bonus<1000 OR b.bonus IS null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus \\nFROM Employee e \\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE b.bonus<1000 OR b.bonus IS null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076846,
                "title": "beats-96-52",
                "content": "# Intuition\\nselecting left join : as we need all values from left table to be considered inorder to get names of employees .\\n\\nUsing (||)/or operator : because we have two condition to keep in mind \\n1. bonus less than 1000.\\n2. bonus null.\\n\\n# Approach\\nThe LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.\\n\\nSELECT column_name(s)\\nFROM table1\\nLEFT JOIN table2\\nON table1.column_name = table2.column_name;\\n\\n\\n# Complexity\\nRuntime :: 1643ms\\nBeats 96.52%of users with MySQL\\n\\nMemory :: 0.00MB\\nBeats 100.00%of users with MySQL\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name , b.bonus from Employee e left join Bonus b on e.empId = b.empId where b.bonus <1000 || isnull(b.bonus);\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name , b.bonus from Employee e left join Bonus b on e.empId = b.empId where b.bonus <1000 || isnull(b.bonus);\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076026,
                "title": "99-95-handle-null-values-like-a-pro",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst we need to join two tables, then filter the rusult on `bonus` column.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve this problem, I will use a SQL query that performs a `LEFT JOIN` between the `Employee` and `Bonus` tables. This will combine the rows from both tables based on the `empId` column. I will then use a `WHERE` clause to filter the results, selecting only the rows where the bonus is less than 1000 or NULL. I explicitly check whether the value of the bonus is `NULL`. This is necessary because `NULL` represents the absence of a value, and it cannot be directly compared using the less than operator. Therefore, we need to explicitly check for `NULL` using the `IS NULL` condition in the `WHERE` clause.\\nFinally, I will retrieve the `name` and `bonus` columns from the result set.\\n# Complexity\\n##### Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ time, where $$n$$ is the number of rows in the tables. The time complexity of the query is linear, as it depends on the number of rows in the tables being queried.\\n##### Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$, where $$n$$ is the number of rows in the tables. The space complexity is also linear, as it requires space to store the result set, which grows with the number of rows in the tables.\\n# Runtime & Memory\\n![Screenshot 2023-09-22 at 12.16.14.png](https://assets.leetcode.com/users/images/81f9e06b-f967-460f-855a-37d0b34c306e_1695376384.7033494.png)\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name AS name, b.bonus AS bonus\\nFROM Employee AS e\\n    LEFT JOIN Bonus AS b\\n    ON e.empId = b.empId\\nWHERE bonus < 1000 OR bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name AS name, b.bonus AS bonus\\nFROM Employee AS e\\n    LEFT JOIN Bonus AS b\\n    ON e.empId = b.empId\\nWHERE bonus < 1000 OR bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074886,
                "title": "left-join-y-isnull",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT name,bonus \\nFROM Employee as e\\nLEFT JOIN Bonus b\\nON  e.empId = b.empId\\nwhere bonus <1000 or bonus is null\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT name,bonus \\nFROM Employee as e\\nLEFT JOIN Bonus b\\nON  e.empId = b.empId\\nwhere bonus <1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074284,
                "title": "solution-using-pandas",
                "content": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n  df = employee.merge(right=bonus, on=\\'empId\\', how=\\'left\\')\\n  return df[(df[\\'bonus\\'] < 1000) | (df[\\'bonus\\'].isnull())][[\\'name\\', \\'bonus\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n  df = employee.merge(right=bonus, on=\\'empId\\', how=\\'left\\')\\n  return df[(df[\\'bonus\\'] < 1000) | (df[\\'bonus\\'].isnull())][[\\'name\\', \\'bonus\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4073708,
                "title": "i-n-real-life",
                "content": "\"I\\'ve created the same database and tables in my own SQL. I solved it by using a left join and the condition \\'bonus < 1000\\'. The whole point of using a left join is to not need to return null values again.\"\\n\\nselect e.name,b.bonus from Employee e left join Bonus b on e.empId=b.empId where b.bonus<1000 or b.bonus is null\\n\\n\\nReal Life,\\nSELECT e.name, \\n       b.bonus\\n  FROM Employee e\\n       LEFT JOIN Bonus b \\n       ON e.empId = b.empId\\n       AND b.bonus < 1000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\"I\\'ve created the same database and tables in my own SQL. I solved it by using a left join and the condition \\'bonus < 1000\\'. The whole point of using a left join is to not need to return null values again.\"\\n\\nselect e.name,b.bonus from Employee e left join Bonus b on e.empId=b.empId where b.bonus<1000 or b.bonus is null\\n\\n\\nReal Life,\\nSELECT e.name, \\n       b.bonus\\n  FROM Employee e\\n       LEFT JOIN Bonus b \\n       ON e.empId = b.empId\\n       AND b.bonus < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073328,
                "title": "very-easy-solution-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE bonus<1000 OR bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId=b.empId\\nWHERE bonus<1000 OR bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072939,
                "title": "beats-100-basic-so-simple",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect name, bonus from Employee left join Bonus \\n\\non Employee.empId = Bonus.empId\\n\\nwhere bonus<1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect name, bonus from Employee left join Bonus \\n\\non Employee.empId = Bonus.empId\\n\\nwhere bonus<1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072121,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT E.NAME name ,B.BONUS bonus\\nFROM EMPLOYEE E LEFT JOIN BONUS B\\nON E.EMPID=B.EMPID\\nWHERE BONUS<1000 OR BONUS IS NULL ;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT E.NAME name ,B.BONUS bonus\\nFROM EMPLOYEE E LEFT JOIN BONUS B\\nON E.EMPID=B.EMPID\\nWHERE BONUS<1000 OR BONUS IS NULL ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071953,
                "title": "pandas-easy-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df = pd.merge(employee, bonus, on=\\'empId\\', how=\\'outer\\')\\n    return df[(df[\\'bonus\\'] < 1000) | (df[\\'bonus\\'].isna())][[\\'name\\', \\'bonus\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df = pd.merge(employee, bonus, on=\\'empId\\', how=\\'outer\\')\\n    return df[(df[\\'bonus\\'] < 1000) | (df[\\'bonus\\'].isna())][[\\'name\\', \\'bonus\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4070804,
                "title": "pandas-simple-solution",
                "content": "# Intuition\\n1. Merge two data frames\\n2. Filter bonus <1000 or is N/A\\n3. Select columns\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    merge = pd.merge(employee, bonus, how=\\'left\\', on=\\'empId\\')\\n    return merge[(merge[\\'bonus\\'] < 1000) | (merge[\\'bonus\\'].isna())][[\\'name\\', \\'bonus\\']]    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    merge = pd.merge(employee, bonus, how=\\'left\\', on=\\'empId\\')\\n    return merge[(merge[\\'bonus\\'] < 1000) | (merge[\\'bonus\\'].isna())][[\\'name\\', \\'bonus\\']]    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4070196,
                "title": "achieving-100-leetcode-success-efficient-employee-bonus-calculation-in-mysql",
                "content": "# Efficient Employee Bonus Calculation in MySQL\\n\\n**Intuition**\\nWe aim to calculate employee bonuses efficiently by leveraging SQL\\'s JOIN operations.\\n\\n![Ekran g\\xF6r\\xFCnt\\xFCs\\xFC 2023-08-25 100510.png](https://assets.leetcode.com/users/images/aaf237a6-eba9-45f0-871b-98dc59a9bb14_1695245216.7134733.png)\\n\\n\\n**Approach**\\nIn this SQL query, we perform a LEFT JOIN between the \\'employee\\' and \\'bonus\\' tables using the \\'empId\\' column as the key. This combines the data from both tables, allowing us to identify employees and their corresponding bonuses.\\n\\nWe then apply a filter using the WHERE clause to select employees who meet specific bonus criteria:\\n- Employees with no bonuses (NULL bonus).\\n- Employees with bonuses less than 1000.\\n\\nThe final result includes the employee\\'s name and bonus, meeting the desired criteria efficiently.\\n\\n**Complexity**\\n- Time complexity: O(n), where \\'n\\' is the number of employees in the \\'employee\\' table.\\n- Space complexity: O(n), as we efficiently handle the merged data and the result set.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM employee AS e\\nLEFT JOIN bonus AS b ON e.empId = b.empId\\nWHERE b.bonus IS NULL OR b.bonus < 1000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM employee AS e\\nLEFT JOIN bonus AS b ON e.empId = b.empId\\nWHERE b.bonus IS NULL OR b.bonus < 1000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070191,
                "title": "achieving-100-leetcode-success-optimal-employee-bonus-calculation",
                "content": "# Intuition\\n\\nThis code snippet calculates employee bonuses by efficiently merging data from two DataFrames: \\'employee\\' and \\'bonus\\'. It then applies a filtering condition to select employees with bonuses less than 1000 or employees with no bonuses.\\n\\n![leet.PNG](https://assets.leetcode.com/users/images/13470fa5-658d-4b5b-b328-d25e37d59897_1695245325.6105218.png)\\n\\n# Approach\\nThe code utilizes the Pandas library to merge the \\'employee\\' and \\'bonus\\' DataFrames based on the \\'empId\\' column, using a left join. It then efficiently filters the merged DataFrame to include employees meeting specific bonus criteria and selects relevant columns.\\n\\n**Key Performance Note:** This approach is optimized for both memory and runtime efficiency, achieving exceptional performance on LeetCode. That beats 100%.\\n\\n\\n# Complexity\\n- Time complexity: O(n) where \\'n\\' is the number of rows in the \\'employee\\' DataFrame.\\n- Space complexity: O(n) for memory usage, as it efficiently handles the merged and resulting DataFrames.\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    merged_df = employee.merge(bonus, how=\\'left\\', left_on=\\'empId\\', right_on=\\'empId\\')\\n    result_df = merged_df.loc[(merged_df[\\'bonus\\'].isnull()) | (merged_df[\\'bonus\\'] < 1000)][[\\'name\\',\\'bonus\\']]\\n\\n    return result_df\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    merged_df = employee.merge(bonus, how=\\'left\\', left_on=\\'empId\\', right_on=\\'empId\\')\\n    result_df = merged_df.loc[(merged_df[\\'bonus\\'].isnull()) | (merged_df[\\'bonus\\'] < 1000)][[\\'name\\',\\'bonus\\']]\\n\\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4067715,
                "title": "beats-100-for-memory-and-time",
                "content": "# Intuition\\nThe fact that the two arrays share a common column, \\'empId\\' hints that this is one of those merge problems. The great thing about merge is that if you perform an \\'outer\\' merge you will get \\'Nan\\' results returned for those employee Id\\'s without a bonus. After merging you can then filter based on the two criteria: is it less than 1000 or is it null?\\n\\n# Approach\\n1) Start by performing the outer merge on employee. Effectively all this outer merge does is add a bonus column to the employee table with NaN entries for employeess without bonuses.\\n2) The final step is to take our newly merged array and filter it according to the two criteria. To filter for an or statement the synatax is g[(criteria 1) | (criteria 2)].\\n3) criteria 1 is easy we want the bonuses that are less than 1000 therefore we write g[\\'bonus\\'] < 1000. Criteria 2 is more subtle. The best function to call is the \\'.isnull()\\' function which checks to see if the bonus in question is Nan type. Therefore for criteria 2 we write g[\\'bonus\\'].isnull().\\n4) Finally, we only want the \\'name\\' and \\'bonus\\' columns so we select these trivially with the very useful command [[\\'name\\', \\'bonus\\']] at the end.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    g = employee.merge(bonus, how= \\'outer\\', on= \\'empId\\')\\n    return g[(g[\\'bonus\\'] < 1000) | (g[\\'bonus\\'].isnull())][[\\'name\\', \\'bonus\\']]\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    g = employee.merge(bonus, how= \\'outer\\', on= \\'empId\\')\\n    return g[(g[\\'bonus\\'] < 1000) | (g[\\'bonus\\'].isnull())][[\\'name\\', \\'bonus\\']]\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4067590,
                "title": "ms-sql-server",
                "content": "\\'\\'\\'\\n\\n\\nSELECT E1.name\\n\\t,B1.bonus\\nFROM Employee E1\\nLEFT JOIN Bonus B1 ON E1.empId = B1.empId\\nWHERE ISNULL(B1.bonus, 0) < 1000\\n\\n\\'\\'\\'\\nI am trying to solve all SQL questions ( MS SQL SERVER ) so that it can help me to improve my skills in SQL. My name is Rama Krishna Poluru, please connect with me on linked in if you like my approach or want to leave a feedback for me to improve with my solutions. I am looking for 2024 Data Engineer Analyst new grad roles in the USA. Please reach out to me if you feel to have a review of my profile.",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "\\'\\'\\'\\n\\n\\nSELECT E1.name\\n\\t,B1.bonus\\nFROM Employee E1\\nLEFT JOIN Bonus B1 ON E1.empId = B1.empId\\nWHERE ISNULL(B1.bonus, 0) < 1000\\n\\n\\'\\'\\'\\nI am trying to solve all SQL questions ( MS SQL SERVER ) so that it can help me to improve my skills in SQL. My name is Rama Krishna Poluru, please connect with me on linked in if you like my approach or want to leave a feedback for me to improve with my solutions. I am looking for 2024 Data Engineer Analyst new grad roles in the USA. Please reach out to me if you feel to have a review of my profile.",
                "codeTag": "Unknown"
            },
            {
                "id": 4067481,
                "title": "simple-oracle-solution-with-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect e.name, b.bonus\\nfrom Employee e left join Bonus b\\non e.empId = b.empId\\nwhere (b.bonus < 1000 or b.bonus  is null)\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect e.name, b.bonus\\nfrom Employee e left join Bonus b\\non e.empId = b.empId\\nwhere (b.bonus < 1000 or b.bonus  is null)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066956,
                "title": "easy-solution-just-simple-approach-using-left-join",
                "content": "select name , bonus from Employee left join bonus on employee.empId =bonus.empId \\nwhere bonus is null or bonus<1000;",
                "solutionTags": [],
                "code": "select name , bonus from Employee left join bonus on employee.empId =bonus.empId \\nwhere bonus is null or bonus<1000;",
                "codeTag": "Unknown"
            },
            {
                "id": 4066746,
                "title": "mysql-solution-beats-100-00-of-users-with-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000\\nOR b.bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000\\nOR b.bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066383,
                "title": "join-with-coalesce",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT\\n    e.name AS name,\\n    b.bonus AS bonus\\nFROM\\n    Employee e\\nLEFT OUTER JOIN\\n    Bonus b ON b.empId = e.empId\\nWHERE\\n    COALESCE(b.bonus, 0) < 1000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n    e.name AS name,\\n    b.bonus AS bonus\\nFROM\\n    Employee e\\nLEFT OUTER JOIN\\n    Bonus b ON b.empId = e.empId\\nWHERE\\n    COALESCE(b.bonus, 0) < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065908,
                "title": "employee-bonus-solution-in-sql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT E.NAME, B.BONUS\\nFROM EMPLOYEE E\\nLEFT JOIN BONUS B\\nON E.EMPID = B.EMPID\\nWHERE B.BONUS IS NULL OR B.BONUS<1000\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/e0ee9724-0bb1-4f05-91b0-b5e32cd0233a_1695150650.938282.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT E.NAME, B.BONUS\\nFROM EMPLOYEE E\\nLEFT JOIN BONUS B\\nON E.EMPID = B.EMPID\\nWHERE B.BONUS IS NULL OR B.BONUS<1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065593,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name,bonus from Employee E\\nleft join Bonus b on E.empId=b.empId\\nwhere b.bonus <1000 or b.bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name,bonus from Employee E\\nleft join Bonus b on E.empId=b.empId\\nwhere b.bonus <1000 or b.bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065316,
                "title": "pandas-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe only thing to remeber is to include the null bonus values as well as less than 1000.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    res = employee.merge(bonus, on=\\'empId\\', how=\\'left\\')\\n    return res[res.bonus.isnull() |(res.bonus < 1000)][[\\'name\\', \\'bonus\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    res = employee.merge(bonus, on=\\'empId\\', how=\\'left\\')\\n    return res[res.bonus.isnull() |(res.bonus < 1000)][[\\'name\\', \\'bonus\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4064193,
                "title": "pandas-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n  k=employee.merge(bonus,how=\\'left\\',left_on=\\'empId\\',right_on=\\'empId\\')\\n  k.fillna(10,inplace=True)\\n  k=k[k[\\'bonus\\']<1000][[\\'name\\',\\'bonus\\']]\\n  k[\\'bonus\\']=k[\\'bonus\\'].replace([10],None)\\n  return k\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n  k=employee.merge(bonus,how=\\'left\\',left_on=\\'empId\\',right_on=\\'empId\\')\\n  k.fillna(10,inplace=True)\\n  k=k[k[\\'bonus\\']<1000][[\\'name\\',\\'bonus\\']]\\n  k[\\'bonus\\']=k[\\'bonus\\'].replace([10],None)\\n  return k\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4063613,
                "title": "pandas-simple-solution-three-lines-of-code",
                "content": "# Intuition\\nDo right join to combine two tables on \"empId\" column and filter bonus by 1000. Using filling NaN and come back with NaN because we should returns names where bonus is NaN too.\\n\\n# Approach\\nJoin and filltering and relplacing NaNs\\n\\n# Complexity\\n- Time complexity:\\n729 ms\\n\\n- Space complexity:\\nO(n) + O(m + n) where n is a table employee size and m is a table bonus size\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4062180,
                "title": "straight-forward-solution",
                "content": "# Intuition\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e1.name, b1.bonus from Employee e1\\nleft join Bonus b1 on b1.empId = e1.empId\\nwhere b1.bonus < 1000 or b1.bonus is NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e1.name, b1.bonus from Employee e1\\nleft join Bonus b1 on b1.empId = e1.empId\\nwhere b1.bonus < 1000 or b1.bonus is NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061898,
                "title": "ez-solution",
                "content": "\\nSimple and straightforward solution. Not the most efficient but easy to understand. \\n\\n# Code\\n```\\nSELECT Employee.name, Bonus.bonus FROM Employee \\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId WHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Employee.name, Bonus.bonus FROM Employee \\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId WHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061593,
                "title": "easiest-solution-beats-94",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe reasoning behinf this solution is very simple. We first select the names and bonuses, making sure to select the names from the employees column to get all the names.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe use left join to make sure that we get all of the employee names since those who do not get a bonus should recieve a NULL value.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity for this problem is $$O(n)$$ because we filter out all of the values at the same time, causing the time to be linear.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity for this code is also $$O(n)$$ because we go through each value at the same time, at a linear rate based on the number N.\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee e LEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee e LEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061056,
                "title": "beats-100-00-of-users-with-mysql",
                "content": "# Code\\n```\\nselect  name,bonus from Employee e left join Bonus b on e.empId=b.empId\\nwhere bonus<1000 or Bonus is Null;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle",
                    "Database"
                ],
                "code": "```\\nselect  name,bonus from Employee e left join Bonus b on e.empId=b.empId\\nwhere bonus<1000 or Bonus is Null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061036,
                "title": "simple-left-join-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, bonus \\nfrom Employee as e\\nleft join Bonus as b\\non e.empID = b.empID\\nwhere bonus<1000 or bonus is NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, bonus \\nfrom Employee as e\\nleft join Bonus as b\\non e.empID = b.empID\\nwhere bonus<1000 or bonus is NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060905,
                "title": "easy-left-join-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT E.name, B.bonus\\nFROM Employee E\\nLEFT JOIN Bonus B ON E.empId = B.empId\\nWHERE B.bonus < 1000 OR B.bonus IS NULL;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT E.name, B.bonus\\nFROM Employee E\\nLEFT JOIN Bonus B ON E.empId = B.empId\\nWHERE B.bonus < 1000 OR B.bonus IS NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058398,
                "title": "basic-sql-joins-concept",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name, bonus FROM Employee AS e\\nLEFT JOIN Bonus AS b\\nON e.empId = b.empId\\nWHERE bonus<1000 OR bonus is NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, bonus FROM Employee AS e\\nLEFT JOIN Bonus AS b\\nON e.empId = b.empId\\nWHERE bonus<1000 OR bonus is NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056448,
                "title": "left-join-solution",
                "content": "# Code\\n```\\nselect E.name, B.bonus from Employee E left join Bonus B\\non B.empId = E.empId\\nwhere (B.bonus < 1000 or B.bonus is null)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect E.name, B.bonus from Employee E left join Bonus B\\non B.empId = E.empId\\nwhere (B.bonus < 1000 or B.bonus is null)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056441,
                "title": "using-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSelect Employee.name , Bonus.bonus\\nfrom Employee\\nLEFT join Bonus On Employee.empID=Bonus.empID\\nwhere bonus<1000 OR Bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect Employee.name , Bonus.bonus\\nfrom Employee\\nLEFT join Bonus On Employee.empID=Bonus.empID\\nwhere bonus<1000 OR Bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4054332,
                "title": "employee-bonus",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Use left join and then apply the filter of bonus -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from Employee e left join Bonus b on e.empId = b.empId where bonus < 1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from Employee e left join Bonus b on e.empId = b.empId where bonus < 1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053578,
                "title": "using-length",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT a.name, b.bonus\\nFROM employee as a\\nLEFT JOIN bonus AS b\\nON a.empid = b.empid\\nWHERE len(b.bonus)<4 or b.bonus is null\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT a.name, b.bonus\\nFROM employee as a\\nLEFT JOIN bonus AS b\\nON a.empid = b.empid\\nWHERE len(b.bonus)<4 or b.bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4052832,
                "title": "my-sql-easy-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from employee e left join bonus b on e.empid=b.empid where b.bonus<1000 or b.bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name, b.bonus from employee e left join bonus b on e.empid=b.empid where b.bonus<1000 or b.bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050864,
                "title": "easy-solution-using-left-join",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSelect e1.name, b2.bonus from Employee as e1 left join Bonus as b2\\non e1.empId = b2.empId where b2.bonus<1000 or b2.bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect e1.name, b2.bonus from Employee as e1 left join Bonus as b2\\non e1.empId = b2.empId where b2.bonus<1000 or b2.bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048740,
                "title": "employee-bonus",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect employee.name,bonus from employee left join bonus on employee.empid=bonus.empid where bonus <1000 or bonus is Null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect employee.name,bonus from employee left join bonus on employee.empid=bonus.empid where bonus <1000 or bonus is Null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047787,
                "title": "query-using-left-join-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId=b.empId\\nwhere b.bonus<1000 or bonus is NULL ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name,b.bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId=b.empId\\nwhere b.bonus<1000 or bonus is NULL ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047072,
                "title": "sql-left-join-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple left join use case, by using left join, you can keep all the rows record on the left table.\\nThen filter out the result in the where cause as required. \\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect \\n    e.name,\\n    b.bonus\\nfrom Employee e \\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 OR b.bonus is null \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect \\n    e.name,\\n    b.bonus\\nfrom Employee e \\nleft join Bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 OR b.bonus is null \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046722,
                "title": "get-employees-bonus-using-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nNeed all data from left table, nulls are on the right. Need all records where bonus is either less than 1000 or null.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsed Left Join as we need data from left table, null on the right side. Placed two conditions Where: \\n1. bonus is less than 1000 \\n2. bonus is null\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee e\\nLeft Join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee e\\nLeft Join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046167,
                "title": "left-join-with-or-operator-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT E.name ,B.bonus\\nFROM Employee E LEFT JOIN Bonus B ON \\nE.empId = B.empId \\nWHERE B.bonus < 1000 OR B.bonus IS NULL \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT E.name ,B.bonus\\nFROM Employee E LEFT JOIN Bonus B ON \\nE.empId = B.empId \\nWHERE B.bonus < 1000 OR B.bonus IS NULL \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044374,
                "title": "solution-using-left-join-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to use the Left join between the employee and bonus table and write down the condition mentioned in the question and we have to include the employees for which bonus is not given in Bonus table, so use IS NULL for Bonus.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect t1.name,t2.bonus\\nfrom Employee t1 left join Bonus t2 on t1.empId=t2.empId\\nwhere t2.bonus<1000 or t2.bonus IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect t1.name,t2.bonus\\nfrom Employee t1 left join Bonus t2 on t1.empId=t2.empId\\nwhere t2.bonus<1000 or t2.bonus IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042987,
                "title": "best-left-join-approach-easy-and-simple-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId = b.empId\\nwhere bonus is null or bonus < 1000\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, bonus\\nfrom Employee e\\nleft join Bonus b\\non e.empId = b.empId\\nwhere bonus is null or bonus < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042538,
                "title": "easy-simple-left-join-where-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nselect e.name, b.bonus from Employee e Left join Bonus b on(e.empId=b.empId)\\nwhere b.bonus<1000 or b.bonus is null;\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n\\nselect e.name, b.bonus from Employee e Left join Bonus b on(e.empId=b.empId)\\nwhere b.bonus<1000 or b.bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039285,
                "title": "check-mate",
                "content": "# Problem Statement\\n\\nGiven two tables, \"Employee\" and \"Bonus,\" where \"Employee\" contains information about employees including their names, supervisors, and salaries, and \"Bonus\" contains information about employee bonuses, write an SQL query to report the name and bonus amount of each employee with a bonus less than 1000.]\\n\\n![Funny Coding Image](https://assets-global.website-files.com/5f3c19f18169b62a0d0bf387/60d33be780ae86778720e367_Zoa5paPhsRtqzIki0flgfk3q7FGEh2VUa5DLxKQTC0KN4WIPvB_qPkMKAIWlsnXDU5ZVupBa4GuMskrt68jRC3aUuNECLsJFLxD_-FevEqq9yPvWpkX1wOJMSmg0J9QuMCdNgJ1L.png)\\n\\n## Intuition\\nThe problem can be solved by joining the \"Employee\" and \"Bonus\" tables based on the \"empId\" column and then filtering the results to include only employees with bonuses less than 1000. We also need to handle the case where an employee might not have a bonus entry.\\n\\n## Approach\\n1. Use a `LEFT JOIN` to join the \"Employee\" and \"Bonus\" tables based on the \"empId\" column. This ensures that all employees from the \"Employee\" table are included in the result, even if they don\\'t have a corresponding bonus entry.\\n\\n2. Use the `IFNULL` function to handle cases where an employee has no bonus. If an employee has no bonus entry, `IFNULL(b.bonus, NULL)` returns `null`.\\n\\n3. Apply a filter to select only those employees whose bonus is less than 1000 or who have no bonus (bonus less than 1000 or `null`).\\n\\n## Complexity\\n- Time complexity: O(N), where N is the number of rows in the \"Employee\" table.\\n- Space complexity: O(N) for the result set.\\n\\n# SQL Query\\n\\n```sql\\nSELECT e.name, IFNULL(b.bonus, NULL) AS bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE IFNULL(b.bonus, 0) < 1000;\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# Problem Statement\\n\\nGiven two tables, \"Employee\" and \"Bonus,\" where \"Employee\" contains information about employees including their names, supervisors, and salaries, and \"Bonus\" contains information about employee bonuses, write an SQL query to report the name and bonus amount of each employee with a bonus less than 1000.]\\n\\n![Funny Coding Image](https://assets-global.website-files.com/5f3c19f18169b62a0d0bf387/60d33be780ae86778720e367_Zoa5paPhsRtqzIki0flgfk3q7FGEh2VUa5DLxKQTC0KN4WIPvB_qPkMKAIWlsnXDU5ZVupBa4GuMskrt68jRC3aUuNECLsJFLxD_-FevEqq9yPvWpkX1wOJMSmg0J9QuMCdNgJ1L.png)\\n\\n## Intuition\\nThe problem can be solved by joining the \"Employee\" and \"Bonus\" tables based on the \"empId\" column and then filtering the results to include only employees with bonuses less than 1000. We also need to handle the case where an employee might not have a bonus entry.\\n\\n## Approach\\n1. Use a `LEFT JOIN` to join the \"Employee\" and \"Bonus\" tables based on the \"empId\" column. This ensures that all employees from the \"Employee\" table are included in the result, even if they don\\'t have a corresponding bonus entry.\\n\\n2. Use the `IFNULL` function to handle cases where an employee has no bonus. If an employee has no bonus entry, `IFNULL(b.bonus, NULL)` returns `null`.\\n\\n3. Apply a filter to select only those employees whose bonus is less than 1000 or who have no bonus (bonus less than 1000 or `null`).\\n\\n## Complexity\\n- Time complexity: O(N), where N is the number of rows in the \"Employee\" table.\\n- Space complexity: O(N) for the result set.\\n\\n# SQL Query\\n\\n```sql\\nSELECT e.name, IFNULL(b.bonus, NULL) AS bonus\\nFROM Employee e\\nLEFT JOIN Bonus b ON e.empId = b.empId\\nWHERE IFNULL(b.bonus, 0) < 1000;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4039237,
                "title": "sql-solution-beats-79-31",
                "content": "# Code\\n```\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE Bonus.bonus < 1000 OR Bonus.bonus  IS NULL;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT Employee.name, Bonus.bonus\\nFROM Employee\\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\\nWHERE Bonus.bonus < 1000 OR Bonus.bonus  IS NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037937,
                "title": "sql-server-best-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect e.name, b.bonus from Employee e\\nleft join Bonus b on e.empId=b.empId\\nwhere coalesce(b.bonus,0)<1000\\n\\n```\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect e.name, b.bonus from Employee e\\nleft join Bonus b on e.empId=b.empId\\nwhere coalesce(b.bonus,0)<1000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036627,
                "title": "left-join-solution",
                "content": "# Approach\\nWith Left Join, we can obtain matched and unmatched recrods from left table(Employee) and filtering employee with bonus less than 1000 OR no bonus will yeild the result.\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name, bonus FROM Employee e LEFT JOIN Bonus b on e.empId = b.empId WHERE bonus < 1000 OR bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, bonus FROM Employee e LEFT JOIN Bonus b on e.empId = b.empId WHERE bonus < 1000 OR bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036309,
                "title": "left-join-where",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name, bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE bonus < 1000 or bonus IS NULL\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE bonus < 1000 or bonus IS NULL\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036097,
                "title": "t-sql-statement",
                "content": "# Approach\\nBased on the problem description, the answer should base on Employee table.\\nBonus = null fit the rule in the test data, so we need to handle it in the where clause also.\\nDo left join on two tables, take Employee as left table since it is the main source for answer.\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus IS Null OR b.bonus < 1000\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT e.name, b.bonus\\nFROM Employee e\\nLEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus IS Null OR b.bonus < 1000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035185,
                "title": "simple-using-left-join-beats-98",
                "content": "\\n\\n# Code\\n```\\nselect e.name,b.bonus from Employee e left join Bonus b using(empID) where bonus<1000 or bonus is null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect e.name,b.bonus from Employee e left join Bonus b using(empID) where bonus<1000 or bonus is null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034873,
                "title": "employee-bonus",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee as e\\nLEFT JOIN Bonus as b\\nON e.empId = b.empId \\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT e.name, b.bonus\\nFROM Employee as e\\nLEFT JOIN Bonus as b\\nON e.empId = b.empId \\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034857,
                "title": "joins",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect name, bonus\\nfrom employee t1 left join bonus t2 on(t1.empid=t2.empid)\\nwhere bonus <1000 or bonus is null\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect name, bonus\\nfrom employee t1 left join bonus t2 on(t1.empid=t2.empid)\\nwhere bonus <1000 or bonus is null\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1565348,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1783863,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1568492,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 2028670,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1940999,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1934306,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1952947,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1883533,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1728480,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 2075736,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1565348,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1783863,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1568492,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 2028670,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1940999,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1934306,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1952947,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1883533,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 1728480,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 2075736,
                "content": [
                    {
                        "username": "JackHo327",
                        "content": "Maybe the content could be changed from \\n\\n\"Select all employee's name and bonus whose bonus is < 1000.\"\\n\\nto\\n\\n\"Select all employee's name and bonus whose bonus is < 1000. (People have no bonus records are also needed to be considered)\""
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yeah because null is not number so the content is considered to be wrong semantic.\\n# Write your MySQL query statement below\\n\\nselect e.name, b.bonus\\nfrom employee e left join bonus b on e.empId = b.empId\\nwhere b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "shanafi",
                        "content": "The wording of this problem is not correct."
                    },
                    {
                        "username": "SebastianW89",
                        "content": "Not every employee has a bonus\\nCause we need the employees with LESS than a certain amount of bonus, We neet to use LEFT JOIN, because we need NULL as a return\\n\\nNOTE:\\nYou can not use IFNULL() right in the select statement, because this gets running at last / after the WHERE. Therefore you need to put this in the WHERE clause. Below is a negative example of how  to not use it:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE b.bonus<1000\\n\\'\\'\\'\\n\\nWithout the Where you can run the IFNULL(col,0) in select. It will replace the NULL with a 0. But if you put in again the where with bonus<1000 it will filter out the NULL. \\n\\nSO best is to implement both of them:\\n\\n\\'\\'\\'\\nSELECT\\ne.name\\n,IFNULL(b.bonus,0) as bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000 \\n\\'\\'\\'\\nAs the expected answer is with null, the answer is wrong even it is logical right. \\n\\n\\nSolution is:\\n\\'\\'\\'\\nSELECT\\ne.name\\n,b.bonus\\n\\n\\nFROM employee e  LEFT JOIN bonus b\\n    ON b.empid=e.empid\\n\\nWHERE IFNULL(b.bonus,0) <1000\\n\\'\\'\\'\\n"
                    },
                    {
                        "username": "l33tcode123",
                        "content": "It is better to qualify the where as \"(t2.bonus<1000 or t2.bonus is null)\" ... strictly speaking a null value means that value is missing, not 0.  This is the kind of thing that sounds pedantic in IRL it can really burn you if you take the shortcut of \"nvl(val,0)\"."
                    },
                    {
                        "username": "bhati25",
                        "content": "I don\\'t know who frames questions for Leetcode but that person\\'s English is worse than mine."
                    },
                    {
                        "username": "snegi00001",
                        "content": "select e.name, b.bonus\\nfrom employee e  left  join bonus b on e.empid = b.empid\\nwhere b.bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Mehul1997",
                        "content": "Simple and Easy answer :\\n\\nselect employee.name, bonus.bonus from employee\\nleft join bonus on bonus.empID = employee.empID\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "NeerajPandit",
                        "content": "SELECT e.name as name, b.bonus as bonus\\nFROM Employee e LEFT JOIN Bonus b\\nON e.empId = b.empId\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT a.name, b.bonus \\nFROM Employee AS a\\nLEFT JOIN Bonus as b\\nON a.empId = b.empId\\nHAVING NOT b.bonus >= 1000 or b.bonus is NULL"
                    },
                    {
                        "username": "hsjoshi28",
                        "content": "Test Case failed for:\\nOutput\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |\\n\\nExpected\\n| name | bonus |\\n| ---- | ----- |\\n| Brad |       |\\n| John |       |\\n| Dan  | 500   |"
                    },
                    {
                        "username": "karthikpohane",
                        "content": "<h6>We can also use the \"COALESCE()\" function.  Like-\n\n\nSELECT Employee.name, COALESCE(Bonus.bonus, NULL) AS bonus\nFROM Employee\nLEFT JOIN Bonus ON Employee.empId = Bonus.empId\nWHERE COALESCE(Bonus.bonus, NULL) < 1000 OR Bonus.bonus IS NULL;\n\nBut , again its useless as it can be done simply by Using joins like \n\nselect Employee.name, Bonus.bonus from Bonus\nRIGHT JOIN Employee ON Bonus.empId = Employee.empId \nwhere Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n</h6>\n"
                    }
                ]
            },
            {
                "id": 2072985,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2064093,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2063254,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2058724,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2053876,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2051904,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2049059,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2046361,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2044968,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2044437,
                "content": [
                    {
                        "username": "himanshumittal1095",
                        "content": "select e.name, b.bonus\\nfrom employee e left join bonus b\\non e.empid=b.empid\\nwhere b.bonus is null or b.bonus < 1000;"
                    },
                    {
                        "username": "bateiko0713",
                        "content": "PANDAS :\\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\\n    \\n    df_merged = pd.merge(bonus, employee, on=\"empId\", how=\"right\").fillna(-1)\\n    df_merged = df_merged[df_merged[\"bonus\"] < 1000][[\"name\", \"bonus\"]]\\n    df_merged[\"bonus\"] = df_merged[\"bonus\"].replace([-1], None)\\n    \\n    return df_merged"
                    },
                    {
                        "username": "Hardik2003",
                        "content": "I was trying to do this question with the help of union. Here was the code.\\n\\nselect name, null as bonus\\nfrom Employee\\nwhere empId not in (select empId from Bonus)\\nUNION\\nselect E.name, bonus \\nfrom Employee as E, Bonus as B\\nwhere E.empId = B.empId and B.bonus < 1000\\n\\nThe question states that you can return the result table in any order, but it failed a test case. I manually checked the desired output vs my output. It checked OK.\\n\\nAny suggestions??\\n\\nP.S. Yes I know that my code is not efficient."
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\\n\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empid=b.empid\\nWHERE b.bonus < 1000 or b.bonus IS NULL\\nORDER BY b.bonus ASC;"
                    },
                    {
                        "username": "xl4708",
                        "content": "I don't know why my answer is incorrect. The only diff of my Output and Expected is the order.\n\n `SELECT a.name AS name, b.bonus AS bonus` \\n\n`FROM Employee a LEFT OUTER JOIN Bonus b` \\n\n`ON a.empId=b.empId` \\n\n`MINUS` \\n\n`SELECT a.name AS name, b.bonus AS bonus`\\n\n`FROM Employee a, Bonus b` \\n\n`WHERE b.bonus>=1000 AND a.empId=b.empId` \\n"
                    },
                    {
                        "username": "ramankaushish3",
                        "content": "left join is necessary to handle null values otherwise it won\\'t consider as less than 1000.\\nselect name,bonus from employee e left join bonus b on e.empid = b.empid where b.bonus is null or b.bonus<1000;"
                    },
                    {
                        "username": "sudhirmahadevpatil",
                        "content": "why using full join is showing error and using right/left join not?"
                    },
                    {
                        "username": "ECIG",
                        "content": "If you are using MySQL, full join is not supported. You can use a union to emulate the same behavior but less optimal solution clearly"
                    },
                    {
                        "username": "SabikaShahid",
                        "content": "Select  name, bonus from employee as e left join bonus as b \\non e.empId = b.empId\\nwhere bonus < 1000  or bonus is null"
                    },
                    {
                        "username": "sakthivignesh455",
                        "content": "select e.name, b.bonus\nfrom Employee as e\nleft join Bonus as b\non e.empId = b.empId\nwhere b.bonus < 1000 or b.bonus is null;\n\nthank me later"
                    },
                    {
                        "username": "judywang",
                        "content": "why not able to\\n select e.name,b.bonus\\nfrom Employee e, Bonus b\\nwhere e.empid = b.empid\\nand b.bonus <=1000 or b.bonus =null;"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "Because this statement is inner join. So, it would only return the rows that are common in both table. If you need to return extra rows from employee table (the employees with no bonus and no entry in bonus table) you have to use left join(cause employee table is on left in your query)"
                    }
                ]
            },
            {
                "id": 2043829,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2038946,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2037475,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2033453,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2032554,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2027960,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2023072,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2021763,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 2013614,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 1994094,
                "content": [
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name of employees and their bonuses\\n-- Using a left join to match employees with their bonuses\\n-- Including employees with bonuses less than 1000 or no bonuses (null)\\nSELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b ON e.empid = b.empid\\nWHERE b.bonus < 1000 OR b.bonus IS NULL;\\n"
                    },
                    {
                        "username": "jagdeepsingh6613",
                        "content": "select name,bonus from Employee\\nleft join bonus\\non employee.empid=bonus.empid\\nwhere bonus <1000 or bonus is null"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "less than 1000 or null its that simple leetcode provide good problem description"
                    },
                    {
                        "username": "haveagoodsummerwithoutme",
                        "content": "can someone explain why my query doesn\\'t get NULL? \\n\\nSELECT e.empid, b.bonus \\nFROM bonus b\\nLEFT JOIN employee e\\nON b.empid = e.empid \\nWHERE b.bonus < 1000 \\nOR b.bonus IS NULL \\n\\n"
                    },
                    {
                        "username": "synevir",
                        "content": "There is an error in SQL schema:\\nTable Employee has column `supervisor int`, \\nbut `insert into Employee (empId, name, supervisor, salary) values (\\'3\\', \\'Brad\\', \\'None\\', \\'4000\\');`\\nThe `supervisor int` can\\'t be string` \\'None\\'`."
                    },
                    {
                        "username": "gauravshukla1",
                        "content": "select e.name, b.bonus from employee as e left join bonus as b \\non b.empid = e.empid where b.bonus < 1000 or b.bonus is null"
                    },
                    {
                        "username": "jibeDoofus",
                        "content": "dont add solutions in discussion please REFRAIN\\n"
                    },
                    {
                        "username": "usama27muneer",
                        "content": "Select e.name, b.bonus\\nFrom Employee e\\nLeft Join bonus b\\nON e.empId = b.empId\\nWhere b.bonus < 1000 OR b.bonus IS NULL\\n\\nThe Simple Solution. But it took more than 02 hours for me to solve this easy exercise. If anyone reading this don\\'t be upset if you are taking help from Discussion as I\\'ve sold all the previous one using the discussion and understood these with the help of ChatGPT. But this one I solve my self and I\\'m happy.\\n"
                    },
                    {
                        "username": "floralovesql",
                        "content": "Can someone tell me what\\'s wrong with this one? thx\\n\\nselect name, bonus\\nfrom employee a, bonus b\\nwhere bonus < 1000 or bonus is null"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select E.name,B.bonus from Employee as E\\nleft join Bonus as B ON E.empId=B.empId\\nwhere bonus<1000 or bonus is null;"
                    },
                    {
                        "username": "qwertyluzzluli",
                        "content": "select e.name , b.bonus from employee as e left join bonus as b on e.empId = b.empId and (b.bonus < 1000 or b.bonus is null);\\n\\nwhy this is giving wrong answer"
                    },
                    {
                        "username": "dheeraj15cs20",
                        "content": "where condition is missing, it shoul be like -  select e.name,b.bonus from employee e left join bonus b on e.empId = b.empId where bonus < 1000 or bonus is null ;"
                    }
                ]
            },
            {
                "id": 1988579,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1981108,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1967315,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1965419,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1957862,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1953352,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1950492,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1926688,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1904103,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            },
            {
                "id": 1882687,
                "content": [
                    {
                        "username": "the_coder_8297",
                        "content": "How does alias works for table in sql? \\nWhat is the sequence of this code\\n\\n```\\nselect E.name, B.bonus\\n    from Employee E LEFT JOIN Bonus B\\n    on E.empId = B.empId\\n    where B.bonus < 1000 or B.bonus is null;\\n```"
                    },
                    {
                        "username": "raaj_nghani",
                        "content": "what is bonus rule for above problem"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "we need to find the bonus and name of all the employees whose bonus is less than 1000 which includes null values also but its not mentioned properly. Just join the tables and write the conditions ."
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "select  name, bonus from Employee left join Bonus on Employee.empId = Bonus.empId where bonus IS NULL OR bonus <1000"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "I am very much confused on when to use left join and when to use right join. can anyone help. i used right join on this question becuse i though im joing employee to banus and e have to get null or whatever values in the right of the table. can anyone help pls."
                    },
                    {
                        "username": "ishaanroxx",
                        "content": "It is pretty easy when you understand what they mean. Left join essentially returns all the records from the left table, and only returns the matched records from the right one. So you use it when you want to return all matching records from left table even if their values might be null on the right table. If you use right join or simply join, then it\\'ll return only those records which are not null in both tables. You can use all 3 to see the different outputs and understand better. "
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select e.name, b.bonus from Employee e left join Bonus b\\nON e.empId = b.empId\\nwhere bonus < 1000 OR bonus IS NULL"
                    },
                    {
                        "username": "AhmedMahmoud1",
                        "content": "out mind \\nselect name ,  bonus from Employee left join Bonus  on Employee.empId =Bonus.empId \\n where coalesce(Bonus.bonus,0) <1000"
                    },
                    {
                        "username": "dreamattracter",
                        "content": "I\\'m using MSSQL and I don\\'t know why the result table doesn\\'t have NULL value when I use Employee LEFT JOIN Bonus. Maybe the MSSQL version of this website is different from MSSQL of Microsoft."
                    },
                    {
                        "username": "amit_64",
                        "content": "How to optimize my query, so that it takes less runtime?\\n\\n\\nselect e.name, b.bonus\\nfrom employee e\\nleft join bonus b \\non e.empid = b.empid\\nwhere b.bonus < 1000 or b.empid is null;"
                    },
                    {
                        "username": "user7548pK",
                        "content": "SELECT e.name, b.bonus\\nFROM employee e\\nLEFT JOIN bonus b\\nON e.empId = b.empId\\nWHERE b.bonus <1000 OR b.bonus is null\\n\\nI think this looks easy to understand"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "SQL server\\nselect e.name, coalesce(b.bonus, null) as bonus\\nfrom Employee e full join Bonus b on e.empId = b.empId\\nwhere bonus < 1000 or bonus is null"
                    }
                ]
            }
        ]
    }
]