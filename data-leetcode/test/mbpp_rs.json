[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "/ Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "fn next_smallest_palindrome(num: isize) -> isize {\n    let smallest_palindrome = 0;\n    let i = 0;\n    while (i < num) {\n        if (num % i == 0) {\n            smallest_palindrome = num;\n            break;\n        }\n        i++;\n    }\n    return smallest_palindrome;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = next_smallest_palindrome;",
            "assert_eq!(candidate(99), 101);",
            "assert_eq!(candidate(1221), 1331);",
            "assert_eq!(candidate(120), 121);",
            "}"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "/ Write a function to find the kth element in the given vector using 1-based indexing.",
        "code": "fn kth_element(arr: Vec<isize>, k: isize) -> isize {\n    return arr[k - 1]\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = kth_element;",
            "assert_eq!(candidate(vec![12, 3, 5, 7, 19], 2), 3);",
            "assert_eq!(candidate(vec![17, 24, 8, 23], 3), 8);",
            "assert_eq!(candidate(vec![16, 21, 25, 36, 4], 4), 36);",
            "}"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "/ Write a function to convert a snake case string to camel case string.",
        "code": "fn snake_to_camel(word: String) -> String {\n  return word.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/[- ]+/g, '-');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = snake_to_camel;",
            "assert_eq!(candidate(String::from(\"python_program\")), String::from(\"PythonProgram\"));",
            "assert_eq!(candidate(String::from(\"python_language\")), String::from(\"PythonLanguage\"));",
            "assert_eq!(candidate(String::from(\"programming_language\")), String::from(\"ProgrammingLanguage\"));",
            "}"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "/ Write a function to find the Eulerian number a(n, m).",
        "code": "fn eulerian_num(n: isize, m: isize) -> isize {\n    let eulerian_num = 0;\n    for (let i = 0; i < n; i++) {\n        let j = i + 1;\n        while (j < m) {\n            let k = j + 1;\n            while (k < m) {\n                let l = k + 1;\n                if (l < m) {\n                    let m_ = l + 1;\n                    let n_ = m_ + 1;\n                    let p_ = n_ + 1;\n                    let q_ = p_ + 1;\n                    let r_ = q_ + 1;\n                    let s_ = r_ + 1;\n                    let t_ = s_ + 1;\n                    let u_ = t_ + 1;\n                    let v_ = u_ + 1;\n                    let w_ = v_ + 1;\n                    let x_ = w_ + 1;\n                    let y_ = x_ + 1;\n                    let z_ = y_ + 1;\n                    let a_ = z_ + 1;\n                    let b_ = a_ + 1;\n                    let c_ = b_ + 1;\n                    let d_ = c_ + 1;\n                    let e_ = d_ + 1;\n                    let f_ = e_ + 1;\n                    let g_ = f_ + 1;\n                    let h_ = g_ + 1;\n                    let i_ = h_ + 1;\n                    let j_ = i_ + 1;\n                    let k_ = j_ + 1;\n                    let l_ = k_ + 1;\n                    let m_ = l_ + 1;\n                    let n_ = m_ + 1;\n                    let p_ = n_ + 1;\n                    let q_ = p_ + 1;\n                    let r_ = q_ + 1;\n                    let s_ = r_ + 1;\n                    let t_ = s_ + 1;\n                    let u_ = t_ + 1;\n                    let v_ = u_ + 1;\n                    let w_ = v_ + 1;\n                    let x_ = w_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = eulerian_num;",
            "assert_eq!(candidate(3, 1), 4);",
            "assert_eq!(candidate(4, 1), 11);",
            "assert_eq!(candidate(5, 3), 26);",
            "}"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "/ Write a function to sort each subvector of strings in a given vector of vectors.",
        "code": "fn sort_sublists(input_list: Vec<Vec<String>>) -> Vec<Vec<String>> {\n  output_list: Vec<Vec<String>> = Vec<Vec<String>>()\n   .add(input_list.sublist(0, input_list.size()))\n   .add(input_list.sublist(input_list.size(), input_list.size()))\n   .add(input_list.sublist(0, input_list.size()))\n   .add(input_list.sublist(input_list.size(), input_list.size()));\n  return output_list;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sort_sublists;",
            "assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);",
            "assert_eq!(candidate(vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\"blue \"), String::from(\" black\")], vec![String::from(\" orange\"), String::from(\"brown\")]]), vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\" black\"), String::from(\"blue \")], vec![String::from(\" orange\"), String::from(\"brown\")]]);",
            "assert_eq!(candidate(vec![vec![String::from(\"zilver\"), String::from(\"gold\")], vec![String::from(\"magnesium\"), String::from(\"aluminium\")], vec![String::from(\"steel\"), String::from(\"bronze\")]]), vec![vec![String::from(\"gold\"), String::from(\"zilver\")], vec![String::from(\"aluminium\"), String::from(\"magnesium\")], vec![String::from(\"bronze\"), String::from(\"steel\")]]);",
            "}"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "/ Write a rsthon function to count true booleans in the given vector.",
        "code": "fn count(lst: Vec<bool>) -> isize {\n  return lst.map(v -> v? 1 : 0).reduce(0, isize);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count;",
            "assert_eq!(candidate(vec![true, false, true]), 2);",
            "assert_eq!(candidate(vec![false, false]), 0);",
            "assert_eq!(candidate(vec![true, true, true]), 3);",
            "}"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "/ Write a function to append the given vector to the given tuples.",
        "code": "fn add_lists(test_list: Vec<isize>, test_tup: (isize, isize)) -> (isize, isize, isize, isize, isize) {\n    return (test_list.append(test_tup), test_list.append(test_tup), test_list.append(test_tup), test_list.append(test_tup), test_list.append(test_tup));\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = add_lists;",
            "assert_eq!(candidate(vec![5, 6, 7], (9, 10)), (9, 10, 5, 6, 7));",
            "assert_eq!(candidate(vec![6, 7, 8], (10, 11)), (10, 11, 6, 7, 8));",
            "assert_eq!(candidate(vec![7, 8, 9], (11, 12)), (11, 12, 7, 8, 9));",
            "}"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "/ Write a function to merge three vectors into a single sorted vector.",
        "code": "fn merge_sorted_list(num1: Vec<isize>, num2: Vec<isize>, num3: Vec<isize>) -> Vec<isize> {\n  Vec<isize> res = Vec<isize>();\n  for (isize i = 0; i < num1.size(); i++) {\n    res.push_back(num1[i]);\n  }\n  for (isize i = 0; i < num2.size(); i++) {\n    res.push_back(num2[i]);\n  }\n  for (isize i = 0; i < num3.size(); i++) {\n    res.push_back(num3[i]);\n  }\n  return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = merge_sorted_list;",
            "assert_eq!(candidate(vec![25, 24, 15, 4, 5, 29, 110], vec![19, 20, 11, 56, 25, 233, 154], vec![24, 26, 54, 48]), vec![4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);",
            "assert_eq!(candidate(vec![1, 3, 5, 6, 8, 9], vec![2, 5, 7, 11], vec![1, 4, 7, 8, 12]), vec![1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);",
            "assert_eq!(candidate(vec![18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], vec![25, 35, 22, 85, 14, 65, 75, 25, 58], vec![12, 74, 9, 50, 61, 41]), vec![1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);",
            "}"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "/ Write a rsthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "fn odd_Equivalent(s: String, n: isize) -> isize {\n    var n_ = n;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = odd_Equivalent;",
            "assert_eq!(candidate(String::from(\"011001\"), 6), 3);",
            "assert_eq!(candidate(String::from(\"11011\"), 5), 4);",
            "assert_eq!(candidate(String::from(\"1010\"), 4), 2);",
            "}"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "/ Write a function to check if a string represents an integer or not.",
        "code": "fn check_integer(text: String) -> bool {\n  return text.match(/^\\d+$/)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_integer;",
            "assert_eq!(candidate(String::from(\"python\")), false);",
            "assert_eq!(candidate(String::from(\"1\")), true);",
            "assert_eq!(candidate(String::from(\"12345\")), true);",
            "}"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "/ Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "fn tuple_to_int(nums: (isize, isize, isize)) -> isize {\n    return isize * (nums[0] + 1) + nums[1] + 1;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = tuple_to_int;",
            "assert_eq!(candidate((1, 2, 3)), 123);",
            "assert_eq!(candidate((4, 5, 6)), 456);",
            "assert_eq!(candidate((5, 6, 7)), 567);",
            "}"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "/ Write a function to convert all possible convertible elements in a vector of vectors to floats.",
        "code": "fn list_to_float(test_list: Vec<(String, String)>) -> Vec<(f64, f64)> {\n    return test_list.map(lambda x: (x[0], x[1]))\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = list_to_float;",
            "assert_eq!(candidate(vec![(String::from(\"3\"), String::from(\"4\")), (String::from(\"1\"), String::from(\"26.45\")), (String::from(\"7.32\"), String::from(\"8\")), (String::from(\"4\"), String::from(\"8\"))]), vec![(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]);",
            "assert_eq!(candidate(vec![(String::from(\"4\"), String::from(\"4\")), (String::from(\"2\"), String::from(\"27\")), (String::from(\"4.12\"), String::from(\"9\")), (String::from(\"7\"), String::from(\"11\"))]), vec![(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]);",
            "assert_eq!(candidate(vec![(String::from(\"6\"), String::from(\"78\")), (String::from(\"5\"), String::from(\"26.45\")), (String::from(\"1.33\"), String::from(\"4\")), (String::from(\"82\"), String::from(\"13\"))]), vec![(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]);",
            "}"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "/ Write a function to convert a string to a vector of strings split on the space character.",
        "code": "fn string_to_list(string: String) -> Vec<String> {\n    return split(string,'');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = string_to_list;",
            "assert_eq!(candidate(String::from(\"python programming\")), vec![String::from(\"python\"), String::from(\"programming\")]);",
            "assert_eq!(candidate(String::from(\"lists tuples strings\")), vec![String::from(\"lists\"), String::from(\"tuples\"), String::from(\"strings\")]);",
            "assert_eq!(candidate(String::from(\"write a program\")), vec![String::from(\"write\"), String::from(\"a\"), String::from(\"program\")]);",
            "}"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "/ Write a rsthon function to find the element that appears only once in a sorted vector.",
        "code": "fn search(arr: Vec<isize>) -> isize {\n    if (arr.size() == 0) {\n        return 0;\n    }\n    let count = 0;\n    let max = arr.size() - 1;\n    let min = 0;\n    let i = 0;\n    while (i < max) {\n        if (arr[i] == arr[min]) {\n            count++;\n            min = i + 1;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = search;",
            "assert_eq!(candidate(vec![1, 1, 2, 2, 3]), 3);",
            "assert_eq!(candidate(vec![1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]), 8);",
            "assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4, 4]), 1);",
            "}"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "/ Write a rsthon function to remove first and last occurrence of a given character from the string.",
        "code": "fn remove_Occ(s: String, ch: String) -> String {\n    if (s.length() == 0) {\n        return s;\n    }\n    if (ch.length() == 0) {\n        return s;\n    }\n    if (s.length() == 1) {\n        return s.substr(0, 1);\n    }\n    if (s.length() == 2) {\n        return s.substr(0, 1) + s.substr(1);\n    }\n    if (s.length() == 3) {\n        return s.substr(0, 1) + s.substr(1) + s.substr(2);\n    }\n    if (s.length() == 4) {\n        return s.substr(0, 1) + s.substr(1) + s.substr(2) + s.substr(3);\n    }\n    if (s.length() == 5) {\n        return s.substr(0, 1) + s.substr(1) + s.substr(2) + s.substr(3) + s.substr(4);\n    }\n    if (s.length() == 6) {\n        return s.substr(0, 1) + s.substr(1) + s.substr(2) + s.substr(3) + s.substr(4) + s.substr(5);\n    }\n    if (s.length() == 7) {\n        return s.substr(0, 1) + s.substr(1) + s.substr(2) + s.substr(3) + s.substr(4) + s.substr(5) + s.substr(6);\n    }\n    if (s.length() == 8) {\n        return s.substr(0, 1) + s.substr(1) + s.substr(2) + s.substr(3) + s.substr(4) + s.substr(5) + s.substr(6) + s.substr\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_Occ;",
            "assert_eq!(candidate(String::from(\"hello\"), String::from(\"l\")), String::from(\"heo\"));",
            "assert_eq!(candidate(String::from(\"abcda\"), String::from(\"a\")), String::from(\"bcd\"));",
            "assert_eq!(candidate(String::from(\"PHP\"), String::from(\"P\")), String::from(\"H\"));",
            "}"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "/ Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.",
        "code": "fn max_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n    if (isize(0) == isize(0)) {\n        return isize(0);\n    }\n    if (isize(0) == isize(1)) {\n        return isize(1);\n    }\n    if (isize(1) == isize(0)) {\n        return isize(1);\n    }\n    if (isize(1) == isize(1)) {\n        return isize(1);\n    }\n    if (isize(2) == isize(0)) {\n        return isize(2);\n    }\n    if (isize(2) == isize(1)) {\n        return isize(2);\n    }\n    if (isize(2) == isize(2)) {\n        return isize(2);\n    }\n    if (isize(3) == isize(0)) {\n        return isize(3);\n    }\n    if (isize(3) == isize(1)) {\n        return isize(3);\n    }\n    if (isize(3) == isize(2)) {\n        return isize(3);\n    }\n    if (isize(4) == isize(0)) {\n        return isize(4);\n    }\n    if (isize(4) == isize(1)) {\n        return isize(4);\n    }\n    if (isize(4) == isize(2)) {\n        return isize(4);\n    }\n    if (isize(5) == isize(0)) {\n        return isize(5);\n    }\n    if (isize(5) == isize(1)) {\n        return isize(5);\n    }\n    if (isize(5) == isize(2)) {\n        return isize(5);\n    }\n    if (isize(6) == isize(0)) {\n        return isize(6);\n    }\n    if (is\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_product_tuple;",
            "assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 36);",
            "assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 200);",
            "assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 484);",
            "}"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "/ Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "fn amicable_numbers_sum(limit: isize) -> isize {\n  let sum = 0;\n  for (let i = 1; i <= limit; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = amicable_numbers_sum;",
            "assert_eq!(candidate(999), 504);",
            "assert_eq!(candidate(9999), 31626);",
            "assert_eq!(candidate(99), 0);",
            "}"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "/ Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "fn find_length(string: String) -> isize {\n    let max_length = 0;\n    let sub_string = string;\n    let i = 0;\n    while (i < sub_string.length) {\n        if (sub_string[i] == '0') {\n            max_length = Math.max(max_length, i);\n        }\n        i++;\n    }\n    return max_length;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_length;",
            "assert_eq!(candidate(String::from(\"11000010001\")), 6);",
            "assert_eq!(candidate(String::from(\"10111\")), 1);",
            "assert_eq!(candidate(String::from(\"11011101100101\")), 2);",
            "}"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "/ Write a rsthon function to find the sum of common divisors of two given numbers.",
        "code": "fn sum(a: isize, b: isize) -> isize {\n    let sum = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum;",
            "assert_eq!(candidate(10, 15), 6);",
            "assert_eq!(candidate(100, 150), 93);",
            "assert_eq!(candidate(4, 6), 3);",
            "}"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "/ Write a function to multiply two integers.",
        "code": "fn multiply_int(x: isize, y: isize) -> isize {\n  return x * y;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = multiply_int;",
            "assert_eq!(candidate(10, 20), 200);",
            "assert_eq!(candidate(5, 10), 50);",
            "assert_eq!(candidate(4, 8), 32);",
            "}"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "/ Write a function to find words that are longer than n characters from a given vector of words.",
        "code": "fn long_words(n: isize, str: String) -> Vec<String> {\n    var words = str.split(\" \");\n    var words_len = words.length;\n    var words_max = words_len - 1;\n    var words_min = words_len - words_max;\n    var words_min_len = words_min.length;\n    var words_max_len = words_max.length;\n    var words_min_len_len = words_min_len.length;\n    var words_max_len_len = words_max_len.length;\n    var words_min_len_len_len = words_min_len_len.length;\n    var words_max_len_len_len = words_max_len_len.length;\n    var words_min_len_len_len_len = words_min_len_len_len.length;\n    var words_max_len_len_len_len = words_max_len_len_len.length;\n    var words_min_len_len_len_len_len = words_min_len_len_len_len.length;\n    var words_max_len_len_len_len_len = words_max_len_len_len_len.length;\n    var words_min_len_len_len_len_len_len = words_min_len_len_len_len_len.length;\n    var words_max_len_len_len_len_len_len = words_max_len_len_len_len_len.length;\n    var words_min_len_len_len_len_len_len_len = words_min_len_len_len_len_len_len.length;\n    var words_max_len_len_len_len_len_len_len = words_max_len_len_len_len_len_len.length;\n    var words_min_len_len_len_len_len_len_len_len = words_min_len_len_len_len_len_len_len.length;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = long_words;",
            "assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);",
            "assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);",
            "assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);",
            "}"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "/ Write a function to calculate whether the matrix is a magic square.",
        "code": "fn magic_square_test(my_matrix: Vec<Vec<isize>>) -> bool {\n  return my_matrix.is_magic_square();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = magic_square_test;",
            "assert_eq!(candidate(vec![vec![7, 12, 1, 14], vec![2, 13, 8, 11], vec![16, 3, 10, 5], vec![9, 6, 15, 4]]), true);",
            "assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 8]]), true);",
            "assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 7]]), false);",
            "}"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "/ Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "fn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n  Vec<isize> sum_rows = Vec<isize>(0);\n  for (isize i = 0; i < M.size(); i++) {\n    sum_rows += M[i];\n  }\n  Vec<isize> sorted_rows = Vec<isize>(sum_rows);\n  return sorted_rows;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sort_matrix;",
            "assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);",
            "assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);",
            "assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);",
            "}"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "/ Write a function to find the item with maximum frequency in a given vector.",
        "code": "fn max_occurrences(nums: Vec<isize>) -> isize {\n  var max_occurrences = 0;\n  for (var i = 0; i < nums.size(); i++) {\n    if (nums[i] > max_occurrences) {\n      max_occurrences = nums[i];\n    }\n  }\n  return max_occurrences;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_occurrences;",
            "assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]), 2);",
            "assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]), 8);",
            "assert_eq!(candidate(vec![10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]), 20);",
            "}"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "/ Write a rsthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "fn reverse_vowels(str1: String) -> String {\n    var str2 = str1.split(\"\").reverse();\n    return str2.join(\"\");\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = reverse_vowels;",
            "assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));",
            "assert_eq!(candidate(String::from(\"USA\")), String::from(\"ASU\"));",
            "assert_eq!(candidate(String::from(\"ab\")), String::from(\"ab\"));",
            "}"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "/ Write a function to convert a vector to a string.",
        "code": "fn tup_string(tup1: Vec<String>) -> String {\n  return tup1.to_string();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = tup_string;",
            "assert_eq!(candidate(vec![String::from(\"e\"), String::from(\"x\"), String::from(\"e\"), String::from(\"r\"), String::from(\"c\"), String::from(\"i\"), String::from(\"s\"), String::from(\"e\"), String::from(\"s\")]), String::from(\"exercises\"));",
            "assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]), String::from(\"python\"));",
            "assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]), String::from(\"program\"));",
            "}"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "/ Write a function to calculate the sum of the negative numbers of a given vector of numbers.",
        "code": "fn sum_negativenum(nums: Vec<isize>) -> isize {\n    return sum(nums)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_negativenum;",
            "assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), -32);",
            "assert_eq!(candidate(vec![10, 15, -14, 13, -18, 12, -20]), -52);",
            "assert_eq!(candidate(vec![19, -65, 57, 39, 152, -639, 121, 44, 90, -190]), -894);",
            "}"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "/ Write a function to find the nth hexagonal number.",
        "code": "fn hexagonal_num(n: isize) -> isize {\n  if (n < 2) {\n    return 0;\n  }\n  return n - 1;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = hexagonal_num;",
            "assert_eq!(candidate(10), 190);",
            "assert_eq!(candidate(5), 45);",
            "assert_eq!(candidate(7), 91);",
            "}"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "/ Write a rsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "fn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n == 3) {\n        return false;\n    }\n    if (n == 4) {\n        return true;\n    }\n    if (n == 5) {\n        return false;\n    }\n    if (n == 6) {\n        return true;\n    }\n    if (n == 7) {\n        return false;\n    }\n    if (n == 8) {\n        return true;\n    }\n    if (n == 9) {\n        return false;\n    }\n    if (n == 10) {\n        return true;\n    }\n    if (n == 11) {\n        return false;\n    }\n    if (n == 12) {\n        return true;\n    }\n    if (n == 13) {\n        return false;\n    }\n    if (n == 14) {\n        return true;\n    }\n    if (n == 15) {\n        return false;\n    }\n    if (n == 16) {\n        return true;\n    }\n    if (n == 17) {\n        return false;\n    }\n    if (n == 18) {\n        return true;\n    }\n    if (n == 19) {\n        return false;\n    }\n    if (n == 20) {\n        return true;\n    }\n    if (n == 21) {\n        return false;\n    }\n    if (n == 22) {\n        return true;\n    }\n    if (n == 23) {\n        return false;\n    }\n    if (n == 24) {\n        return true;\n    }\n    if (n == 25) {\n        return false;\n    }\n    if (n == 26) {\n        return true;\n    }\n    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_Sum_Of_Powers_Of_Two;",
            "assert_eq!(candidate(10), true);",
            "assert_eq!(candidate(7), false);",
            "assert_eq!(candidate(14), true);",
            "}"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "/ Write a function to sort a vector of elements.",
        "code": "fn pancake_sort(nums: Vec<isize>) -> Vec<isize> {\n  nums.sort();\n  return nums;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = pancake_sort;",
            "assert_eq!(candidate(vec![15, 79, 25, 38, 69]), vec![15, 25, 38, 69, 79]);",
            "assert_eq!(candidate(vec![98, 12, 54, 36, 85]), vec![12, 36, 54, 85, 98]);",
            "assert_eq!(candidate(vec![41, 42, 32, 12, 23]), vec![12, 23, 32, 41, 42]);",
            "}"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "/ Write a function to count number items that are identical in the same position of three given vectors.",
        "code": "fn count_samepair(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> isize {\n    isize n = list1.size();\n    isize m = list2.size();\n    isize n2 = list3.size();\n    isize m2 = n2;\n    isize n3 = m2;\n    isize m3 = n3;\n    isize n4 = m3;\n    isize m4 = n4;\n    isize n5 = m4;\n    isize m5 = n5;\n    isize n6 = m5;\n    isize m6 = n6;\n    isize n7 = m6;\n    isize m7 = n7;\n    isize n8 = m7;\n    isize m8 = n8;\n    isize n9 = m8;\n    isize m9 = n9;\n    isize n10 = m9;\n    isize m10 = n10;\n    isize n11 = m10;\n    isize m11 = n11;\n    isize n12 = m11;\n    isize m12 = n12;\n    isize n13 = m12;\n    isize m13 = n13;\n    isize n14 = m13;\n    isize m14 = n14;\n    isize n15 = m14;\n    isize m15 = n15;\n    isize n16 = m15;\n    isize m16 = n16;\n    isize n17 = m16;\n    isize m17 = n17;\n    isize n18 = m17;\n    isize m18 = n18;\n    isize n19 = m18;\n    isize m19 = n19;\n    isize n20 = m19;\n    isize m20 = n20;\n    isize n21 = m20;\n    isize m21 = n21;\n    isize n22 = m21;\n    isize m22 = n22;\n    isize n23 = m22;\n    is\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_samepair;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9], vec![2, 1, 3, 1, 2, 6, 7, 9]), 3);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 4);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 2, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 5);",
            "}"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "/ Write a rsthon function to find the maximum difference between any two elements in a given vector.",
        "code": "fn max_Abs_Diff(arr: Vec<isize>) -> isize {\n    let max_diff = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let diff = abs(arr[i] - arr[i + 1]);\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n    return max_diff;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_Abs_Diff;",
            "assert_eq!(candidate(vec![2, 1, 5, 3]), 4);",
            "assert_eq!(candidate(vec![9, 3, 2, 5, 1]), 8);",
            "assert_eq!(candidate(vec![3, 2, 1]), 2);",
            "}"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "/ Write a rsthon function to find the volume of a triangular prism.",
        "code": "fn find_Volume(l: isize, b: isize, h: isize) -> isize {\n    if (l == 0) {\n        return 0;\n    }\n    if (b == 0) {\n        return 1;\n    }\n    if (h == 0) {\n        return 2;\n    }\n    if (b == h) {\n        return 3;\n    }\n    if (h == b) {\n        return 4;\n    }\n    if (b == h) {\n        return 5;\n    }\n    if (h == b) {\n        return 6;\n    }\n    if (b == h) {\n        return 7;\n    }\n    if (h == b) {\n        return 8;\n    }\n    if (b == h) {\n        return 9;\n    }\n    if (h == b) {\n        return 10;\n    }\n    if (b == h) {\n        return 11;\n    }\n    if (h == b) {\n        return 12;\n    }\n    if (b == h) {\n        return 13;\n    }\n    if (h == b) {\n        return 14;\n    }\n    if (b == h) {\n        return 15;\n    }\n    if (h == b) {\n        return 16;\n    }\n    if (b == h) {\n        return 17;\n    }\n    if (h == b) {\n        return 18;\n    }\n    if (b == h) {\n        return 19;\n    }\n    if (h == b) {\n        return 20;\n    }\n    if (b == h) {\n        return 21;\n    }\n    if (h == b) {\n        return 22;\n    }\n    if (b == h) {\n        return 23;\n    }\n    if (h == b) {\n        return 24;\n    }\n    if (b == h) {\n        return 25;\n    }\n    if (h == b) {\n        return 26;\n    }\n    if (b == h) {\n        return\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Volume;",
            "assert_eq!(candidate(10, 8, 6), 240);",
            "assert_eq!(candidate(3, 2, 2), 6);",
            "assert_eq!(candidate(1, 2, 1), 1);",
            "}"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "/ Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "code": "fn find_solution(a: isize, b: isize, n: isize) -> Option<(isize, isize)> {\n    if (n == 0) {\n        return None\n    }\n    if (n == 1) {\n        return (a, b)\n    }\n    if (n == 2) {\n        return (a, b, a, b)\n    }\n    if (n == 3) {\n        return (a, b, a, b, a, b)\n    }\n    if (n == 4) {\n        return (a, b, a, b, a, b, a, b)\n    }\n    if (n == 5) {\n        return (a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_solution;",
            "assert_eq!(candidate(2, 3, 7), Some((2, 1)));",
            "assert_eq!(candidate(4, 2, 7), None);",
            "assert_eq!(candidate(1, 13, 17), Some((4, 1)));",
            "}"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "/ Write a function to remove all elements from a given vector present in another vector.",
        "code": "fn remove_elements(list1: Vec<isize>, list2: Vec<isize>) -> Vec<isize> {\n  Vec<isize> result = Vec<isize>();\n  for (isize i = 0; i < list1.size(); i++) {\n    if (list2.contains(list1[i])) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_elements;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![2, 4, 6, 8]), vec![1, 3, 5, 7, 9, 10]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![1, 3, 5, 7]), vec![2, 4, 6, 8, 9, 10]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![5, 7]), vec![1, 2, 3, 4, 6, 8, 9, 10]);",
            "}"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "/ Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "fn sum_series(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_series;",
            "assert_eq!(candidate(6), 12);",
            "assert_eq!(candidate(10), 30);",
            "assert_eq!(candidate(9), 25);",
            "}"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "/ Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "fn are_equivalent(num1: isize, num2: isize) -> bool {\n    if (num1 == num2) {\n        return true;\n    }\n    if (num1 == 0) {\n        return false;\n    }\n    if (num2 == 0) {\n        return false;\n    }\n    if (num1 % num2 == 0) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = are_equivalent;",
            "assert_eq!(candidate(36, 57), false);",
            "assert_eq!(candidate(2, 4), false);",
            "assert_eq!(candidate(23, 47), true);",
            "}"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "/ Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "fn count_char_position(str1: String) -> isize {\n    return str1.length();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_char_position;",
            "assert_eq!(candidate(String::from(\"xbcefg\")), 2);",
            "assert_eq!(candidate(String::from(\"ABcED\")), 3);",
            "assert_eq!(candidate(String::from(\"AbgdeF\")), 5);",
            "}"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "/ Write a function that counts the number of pairs of integers in a vector that xor to an even number.",
        "code": "fn find_even_pair(A: Vec<isize>) -> isize {\n    isize n = A.size();\n    isize k = n / 2;\n    isize m = n - k;\n    isize i = 0;\n    isize j = 0;\n    while (i < k) {\n        if (A[i] == A[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n            j++;\n        }\n    }\n    return m;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_even_pair;",
            "assert_eq!(candidate(vec![5, 4, 7, 2, 1]), 4);",
            "assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11]), 9);",
            "assert_eq!(candidate(vec![1, 2, 3]), 1);",
            "}"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "/ Write a rsthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "fn next_power_of_2(n: isize) -> isize {\n    let p = 1;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = next_power_of_2;",
            "assert_eq!(candidate(0), 1);",
            "assert_eq!(candidate(5), 8);",
            "assert_eq!(candidate(17), 32);",
            "}"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "/ Write a function to count the number of occurrences of a number in a given vector.",
        "code": "fn frequency(a: Vec<isize>, x: isize) -> isize {\n    return x.size();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = frequency;",
            "assert_eq!(candidate(vec![1, 2, 3], 4), 0);",
            "assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);",
            "assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);",
            "}"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "/ Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "fn text_lowercase_underscore(text: String) -> bool {\n  return text.includes('_');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_lowercase_underscore;",
            "assert_eq!(candidate(String::from(\"aab_cbbbc\")), true);",
            "assert_eq!(candidate(String::from(\"aab_Abbbc\")), false);",
            "assert_eq!(candidate(String::from(\"Aaab_abbbc\")), false);",
            "}"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "/ Write a function to find the sum of numbers in a vector within a range specified by two indices.",
        "code": "fn sum_range_list(list1: Vec<isize>, m: isize, n: isize) -> isize {\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (m == n) {\n        return 0;\n    }\n    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_range_list;",
            "assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10), 29);",
            "assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7), 16);",
            "assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10), 38);",
            "}"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "/ Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "fn perimeter_pentagon(a: isize) -> isize {\n    let perimeter = 0;\n    let sides = a.sides;\n    let sides_length = sides.length;\n    for (let i = 0; i < sides_length; i++) {\n        let side = sides[i];\n        let side_length = side.length;\n        perimeter += side_length * side_length;\n    }\n    return perimeter;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = perimeter_pentagon;",
            "assert_eq!(candidate(5), 25);",
            "assert_eq!(candidate(10), 50);",
            "assert_eq!(candidate(15), 75);",
            "}"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "/ Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "fn count_occurance(s: String) -> isize {\n    const count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_occurance;",
            "assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);",
            "assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);",
            "assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);",
            "assert_eq!(candidate(String::from(\"stds\")), 1);",
            "assert_eq!(candidate(String::from(\"\")), 0);",
            "}"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "/ Write a function that returns the perimeter of a square given its side length as input.",
        "code": "fn square_perimeter(a: isize) -> isize {\n    return a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = square_perimeter;",
            "assert_eq!(candidate(10), 40);",
            "assert_eq!(candidate(5), 20);",
            "assert_eq!(candidate(4), 16);",
            "}"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "/ Write a function to remove characters from the first string which are present in the second string.",
        "code": "fn remove_dirty_chars(string: String, second_string: String) -> String {\n    const first_string = string.split('');\n    const second_string = second_string.split('');\n    const first_string_length = first_string.length;\n    const second_string_length = second_string.length;\n    const first_string_index = 0;\n    const second_string_index = 0;\n    const first_string_index_max = first_string_length;\n    const second_string_index_max = second_string_length;\n    const first_string_index_min = 0;\n    const second_string_index_min = 0;\n    const first_string_index_min = first_string_index_max;\n    const second_string_index_min = second_string_index_max;\n    const first_string_index_max = first_string_index_min;\n    const second_string_index_max = second_string_index_min;\n    const first_string_index_min = first_string_index_max;\n    const second_string_index_min = second_string_index_max;\n    const first_string_index_max = first_string_index_min;\n    const second_string_index_max = second_string_index_min;\n    const first_string_index_min = first_string_index_max;\n    const second_string_index_min = second_string_index_max;\n    const first_string_index_max = first_string_index_min;\n    const second_string_index_max = second_string_index_min;\n    const first_string_index_min = first_string_index_max;\n    const second_string_index_min = second_string_index_max;\n    const first_string_index_max = first_string_index_min;\n    const second_string_index_max = second_string_index_min;\n    const first_string_index_min = first_string_index_max;\n    const second_string_index\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_dirty_chars;",
            "assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));",
            "assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));",
            "assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));",
            "}"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "/ Write a function to find whether a given vector of integers contains any duplicate element.",
        "code": "fn test_duplicate(arraynums: Vec<isize>) -> bool {\n    for (i in range(arraynums.size())) {\n        if (arraynums[i] == arraynums[arraynums.size() - 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = test_duplicate;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 4]), true);",
            "assert_eq!(candidate(vec![1, 1, 2, 2, 3, 3, 4, 4, 5]), true);",
            "}"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "/ Write a function to check if the given number is woodball or not.",
        "code": "fn is_woodall(x: isize) -> bool {\n    return x % 2 == 0\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_woodall;",
            "assert_eq!(candidate(383), true);",
            "assert_eq!(candidate(254), false);",
            "assert_eq!(candidate(200), false);",
            "}"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "/ Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)",
        "code": "fn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    if (n == 0) {\n        return false;\n    }\n    if (n == 1) {\n        return arr[0] == x;\n    }\n    if (n == 2) {\n        return arr[0] == x && arr[1] == x;\n    }\n    if (n == 3) {\n        return arr[0] == x && arr[1] == x && arr[2] == x;\n    }\n    if (n == 4) {\n        return arr[0] == x && arr[1] == x && arr[2] == x && arr[3] == x;\n    }\n    if (n == 5) {\n        return arr[0] == x && arr[1] == x && arr[2] == x && arr[3] == x && arr[4] == x;\n    }\n    if (n == 6) {\n        return arr[0] == x && arr[1] == x && arr[2] == x && arr[3] == x && arr[4] == x && arr[5] == x;\n    }\n    if (n == 7) {\n        return arr[0] == x && arr[1] == x && arr[2] == x && arr[3] == x && arr[4] == x && arr[5] == x && arr[6] == x;\n    }\n    if (n == 8) {\n        return arr[0] == x && arr[1] == x && arr[2] == x && arr[3] == x && arr[4] == x && arr[5] == x && arr[6] == x && arr[7] == x;\n    }\n    if (n == 9) {\n        return arr[0] == x && arr[1] == x && arr[2] == x && arr[3] == x && arr[4] == x &&\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_majority;",
            "assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);",
            "assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);",
            "assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);",
            "assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);",
            "}"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "/ Write a rsthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "fn count_Set_Bits(n: isize) -> isize {\n    if (n < 2) {\n        return 0;\n    }\n    return 1 << (n - 1);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_Set_Bits;",
            "assert_eq!(candidate(2), 1);",
            "assert_eq!(candidate(4), 1);",
            "assert_eq!(candidate(6), 2);",
            "}"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "/ Write a rsthon function to remove the characters which have odd index values of a given string.",
        "code": "fn odd_values_string(str: String) -> String {\n    return str.map(i => i % 2).join('');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = odd_values_string;",
            "assert_eq!(candidate(String::from(\"abcdef\")), String::from(\"ace\"));",
            "assert_eq!(candidate(String::from(\"python\")), String::from(\"pto\"));",
            "assert_eq!(candidate(String::from(\"data\")), String::from(\"dt\"));",
            "assert_eq!(candidate(String::from(\"lambs\")), String::from(\"lms\"));",
            "}"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "/ Write a function to find minimum of three numbers.",
        "code": "fn min_of_three(a: isize, b: isize, c: isize) -> isize {\n  let min = a;\n  let max = b;\n  let sum = 0;\n  for (let i = 0; i < c; i++) {\n    sum += a[i] * b[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = min_of_three;",
            "assert_eq!(candidate(10, 20, 0), 0);",
            "assert_eq!(candidate(19, 15, 18), 15);",
            "assert_eq!(candidate(-10, -20, -30), -30);",
            "}"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "/ Write a rsthon function to check whether all the bits are unset in the given range or not.",
        "code": "fn all_Bits_Set_In_The_Given_Range(n: isize, l: isize, r: isize) -> bool {\n    if (l == r) {\n        return true;\n    }\n    if (l == 0) {\n        return false;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r) {\n        return true;\n    }\n    if (l == r - 1) {\n        return true;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (l == r) {\n        return true;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (l == r) {\n        return true;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (l == r) {\n        return true;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (l == r) {\n        return true;\n    }\n    if (r == 0) {\n        return false;\n    }\n    if (l == r - 1) {\n        return false;\n    }\n    if (r == 0) {\n        \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = all_Bits_Set_In_The_Given_Range;",
            "assert_eq!(candidate(4, 1, 2), true);",
            "assert_eq!(candidate(17, 2, 4), true);",
            "assert_eq!(candidate(39, 4, 6), false);",
            "}"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "/ Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "fn re_arrange_array(arr: Vec<isize>, n: isize) -> Vec<isize> {\n    arr = arr.sort();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    arr = arr.reverse();\n    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = re_arrange_array;",
            "assert_eq!(candidate(vec![-1, 2, -3, 4, 5, 6, -7, 8, 9], 9), vec![-1, -3, -7, 4, 5, 6, 2, 8, 9]);",
            "assert_eq!(candidate(vec![12, -14, -26, 13, 15], 5), vec![-14, -26, 12, 13, 15]);",
            "assert_eq!(candidate(vec![10, 24, 36, -42, -39, -78, 85], 7), vec![-42, -39, -78, 10, 24, 36, 85]);",
            "}"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "/ Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "fn replace_blank(str1: String, char: String) -> String {\n    return str1.replace(/\\s+/g, char)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = replace_blank;",
            "assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));",
            "assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));",
            "assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));",
            "}"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "/ Write a function to find the volume of a cube given its side length.",
        "code": "fn volume_cube(l: isize) -> isize {\n    return l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l * l *\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = volume_cube;",
            "assert_eq!(candidate(3), 27);",
            "assert_eq!(candidate(2), 8);",
            "assert_eq!(candidate(5), 125);",
            "}"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "/ Write a rsthon function to count the number of non-empty substrings of a given string.",
        "code": "fn number_of_substrings(str: String) -> isize {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i]!= '') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = number_of_substrings;",
            "assert_eq!(candidate(String::from(\"abc\")), 6);",
            "assert_eq!(candidate(String::from(\"abcd\")), 10);",
            "assert_eq!(candidate(String::from(\"abcde\")), 15);",
            "}"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "/ Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "fn get_total_number_of_sequences(m: isize, n: isize) -> isize {\n    let total = 0;\n    for (let i = 0; i < m; i++) {\n        total += i;\n    }\n    for (let i = 0; i < n; i++) {\n        total += i;\n    }\n    return total;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_total_number_of_sequences;",
            "assert_eq!(candidate(10, 4), 4);",
            "assert_eq!(candidate(5, 2), 6);",
            "assert_eq!(candidate(16, 3), 84);",
            "}"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "/ Write a function to count the total number of characters in a string.",
        "code": "fn count_charac(str1: String) -> isize {\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] =='') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_charac;",
            "assert_eq!(candidate(String::from(\"python programming\")), 18);",
            "assert_eq!(candidate(String::from(\"language\")), 8);",
            "assert_eq!(candidate(String::from(\"words\")), 5);",
            "}"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "/ Write a rsthon function to find the next perfect square greater than a given number.",
        "code": "fn next_Perfect_Square(N: isize) -> isize {\n  const N_ = N;\n  const N_ = N_ + 1;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n  const N_ = N_ + N_;\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = next_Perfect_Square;",
            "assert_eq!(candidate(35), 36);",
            "assert_eq!(candidate(6), 9);",
            "assert_eq!(candidate(9), 16);",
            "}"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "/ Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "fn max_sum(arr: Vec<isize>) -> isize {\n    let max_sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max_sum) {\n            max_sum = arr[i];\n        }\n    }\n    return max_sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_sum;",
            "assert_eq!(candidate(vec![1, 15, 51, 45, 33, 100, 12, 18, 9]), 194);",
            "assert_eq!(candidate(vec![80, 60, 30, 40, 20, 10]), 210);",
            "assert_eq!(candidate(vec![2, 3, 14, 16, 21, 23, 29, 30]), 138);",
            "}"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "/ Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "fn lps(str: String) -> isize {\n    const max_len = max(str.length(), 1);\n    const lps = [0];\n    for (let i = 0; i < max_len; i++) {\n        lps.push(i);\n    }\n    return lps.length;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = lps;",
            "assert_eq!(candidate(String::from(\"TENS FOR TENS\")), 5);",
            "assert_eq!(candidate(String::from(\"CARDIO FOR CARDS\")), 7);",
            "assert_eq!(candidate(String::from(\"PART OF THE JOURNEY IS PART\")), 9);",
            "}"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "/ Write a function to find the intersection of two vectors.",
        "code": "fn intersection_array(array_nums1: Vec<isize>, array_nums2: Vec<isize>) -> Vec<isize> {\n  // The first vector is the intersection of the first and the second.\n  // The second vector is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the second.\n  // The result is the intersection of the second and the first.\n  // The result is the intersection of the first and the\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = intersection_array;",
            "assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![1, 2, 4, 8, 9]), vec![1, 2, 8, 9]);",
            "assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![3, 5, 7, 9]), vec![3, 5, 7, 9]);",
            "assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![10, 20, 30, 40]), vec![10]);",
            "}"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "/ Write a rsthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.",
        "code": "fn count_X(tup: Vec<isize>, x: isize) -> isize {\n    return x.size()\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_X;",
            "assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4), 0);",
            "assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10), 3);",
            "assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8), 4);",
            "}"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "/ Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.",
        "code": "fn insert_element(list: Vec<String>, element: String) -> Vec<String> {\n    var result = [];\n    for (var i = 0; i < element.length; i++) {\n        result.push(element[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = insert_element;",
            "assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Black\")], String::from(\"c\")), vec![String::from(\"c\"), String::from(\"Red\"), String::from(\"c\"), String::from(\"Green\"), String::from(\"c\"), String::from(\"Black\")]);",
            "assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"java\")], String::from(\"program\")), vec![String::from(\"program\"), String::from(\"python\"), String::from(\"program\"), String::from(\"java\")]);",
            "assert_eq!(candidate(vec![String::from(\"happy\"), String::from(\"sad\")], String::from(\"laugh\")), vec![String::from(\"laugh\"), String::from(\"happy\"), String::from(\"laugh\"), String::from(\"sad\")]);",
            "}"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "/ Write a rsthon function to convert complex numbers to polar coordinates.",
        "code": "fn convert(numbers: isize) -> (f64, f64) {\n    if (numbers.is_complex) {\n        return convert_complex(numbers)\n    } else {\n        return convert_real(numbers)\n    }\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = convert;",
            "assert_eq!(candidate(1), (1.0, 0.0));",
            "assert_eq!(candidate(4), (4.0, 0.0));",
            "assert_eq!(candidate(5), (5.0, 0.0));",
            "}"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "/ Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.",
        "code": "fn combinations_colors(l: Vec<String>, n: isize) -> Vec<Vec<String>> {\n    Vec<String> result = Vec<String>();\n    for (int i = 0; i < n; i++) {\n        result = result.concat(combinations_colors(l, i));\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = combinations_colors;",
            "assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 1), vec![vec![String::from(\"Red\")], vec![String::from(\"Green\")], vec![String::from(\"Blue\")]]);",
            "assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 2), vec![vec![String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\")]]);",
            "assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 3), vec![vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\"), String::from(\"Blue\")]]);",
            "}"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "/ Write a rsthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "fn count_Primes_nums(n: isize) -> isize {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_Primes_nums;",
            "assert_eq!(candidate(5), 2);",
            "assert_eq!(candidate(10), 4);",
            "assert_eq!(candidate(100), 25);",
            "}"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "/ Write a function that takes in two numbers and returns a vector with the second number and then the first number.",
        "code": "fn swap_numbers(a: isize, b: isize) -> Vec<isize> {\n    return Vec<isize>(a, b);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = swap_numbers;",
            "assert_eq!(candidate(10, 20), vec![20, 10]);",
            "assert_eq!(candidate(15, 17), vec![17, 15]);",
            "assert_eq!(candidate(100, 200), vec![200, 100]);",
            "}"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "/ Write a function to maximize the given two vectors.",
        "code": "fn maximize_elements(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    Vec<isize> max_elements = Vec<isize>();\n    for (isize i = 0; i < test_tup1.size(); i++) {\n        if (test_tup1[i] > test_tup2[i]) {\n            max_elements = Vec<isize>(test_tup1[i], test_tup2[i]);\n        }\n    }\n    return max_elements;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = maximize_elements;",
            "assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 7], vec![4, 9], vec![2, 9], vec![7, 10]]);",
            "assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![7, 8], vec![5, 10], vec![3, 10], vec![8, 11]]);",
            "assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![8, 9], vec![6, 11], vec![4, 11], vec![9, 12]]);",
            "}"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "/ Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "fn newman_prime(n: isize) -> isize {\n  let n_prime = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      n_prime = i;\n      break;\n    }\n  }\n  return n_prime;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = newman_prime;",
            "assert_eq!(candidate(3), 7);",
            "assert_eq!(candidate(4), 17);",
            "assert_eq!(candidate(5), 41);",
            "}"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "/ Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "fn division_elements(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    return (isize, isize, isize, isize)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = division_elements;",
            "assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (2, 2, 2, 3));",
            "assert_eq!(candidate((12, 6, 8, 16), (6, 3, 4, 4)), (2, 2, 2, 4));",
            "assert_eq!(candidate((20, 14, 36, 18), (5, 7, 6, 9)), (4, 2, 6, 2));",
            "}"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "/ Write a function to calculate a dog's age in dog's years.",
        "code": "fn dog_age(h_age: isize) -> isize {\n    return h_age.sum() / h_age.size()\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = dog_age;",
            "assert_eq!(candidate(12), 61);",
            "assert_eq!(candidate(15), 73);",
            "assert_eq!(candidate(24), 109);",
            "}"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "/ Write a function to find the lateral surface area of a cube given its side length.",
        "code": "fn lateralsurface_cube(l: isize) -> isize {\n    return (l + 1) * (l + 2) / 2\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = lateralsurface_cube;",
            "assert_eq!(candidate(5), 100);",
            "assert_eq!(candidate(9), 324);",
            "assert_eq!(candidate(10), 400);",
            "}"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "/ Write a rsthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "fn square_Sum(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = square_Sum;",
            "assert_eq!(candidate(2), 10);",
            "assert_eq!(candidate(3), 35);",
            "assert_eq!(candidate(4), 84);",
            "}"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "/ Write a function to find then'th star number.",
        "code": "fn find_star_num(n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n        return 26;\n    }\n    if (n == 27) {\n        return 27;\n    }\n    if (n ==\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_star_num;",
            "assert_eq!(candidate(3), 37);",
            "assert_eq!(candidate(4), 73);",
            "assert_eq!(candidate(5), 121);",
            "}"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "/ Write a function to find the ascii value of a character.",
        "code": "fn ascii_value(k: String) -> isize {\n  return k.length();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = ascii_value;",
            "assert_eq!(candidate(String::from(\"A\")), 65);",
            "assert_eq!(candidate(String::from(\"R\")), 82);",
            "assert_eq!(candidate(String::from(\"S\")), 83);",
            "}"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "/ Write a rsthon function to find the sum of even numbers at even positions of a vector.",
        "code": "fn sum_even_and_even_index(arr: Vec<isize>) -> isize {\n    const isize n = arr.size();\n    const isize k = n / 2;\n    const isize m = n - k;\n    const isize i = k;\n    const isize j = m;\n    const isize k_i = k;\n    const isize k_j = m;\n    const isize k_k = k;\n    const isize k_m = m;\n    const isize k_n = n;\n    const isize k_o = n;\n    const isize k_p = n;\n    const isize k_q = n;\n    const isize k_r = n;\n    const isize k_s = n;\n    const isize k_t = n;\n    const isize k_u = n;\n    const isize k_v = n;\n    const isize k_w = n;\n    const isize k_x = n;\n    const isize k_y = n;\n    const isize k_z = n;\n    const isize k_A = n;\n    const isize k_B = n;\n    const isize k_C = n;\n    const isize k_D = n;\n    const isize k_E = n;\n    const isize k_F = n;\n    const isize k_G = n;\n    const isize k_H = n;\n    const isize k_I = n;\n    const isize k_J = n;\n    const isize k_K = n;\n    const isize k_L = n;\n    const isize k_M = n;\n    const isize k_N = n;\n    const isize k_O = n;\n    const isize k_P = n;\n    const isize k_Q = n;\n    const isize k_R = n;\n    const isize k_S = n;\n    const isize k_T = n;\n    const isize k_U = n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_even_and_even_index;",
            "assert_eq!(candidate(vec![5, 6, 12, 1, 18, 8]), 30);",
            "assert_eq!(candidate(vec![3, 20, 17, 9, 2, 10, 18, 13, 6, 18]), 26);",
            "assert_eq!(candidate(vec![5, 6, 12, 1]), 12);",
            "}"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "/ Write a rsthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "fn even_Power_Sum(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = even_Power_Sum;",
            "assert_eq!(candidate(2), 1056);",
            "assert_eq!(candidate(3), 8832);",
            "assert_eq!(candidate(1), 32);",
            "}"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "/ Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.",
        "code": "fn rear_extract(test_list: Vec<(isize, String, isize)>) -> Vec<isize> {\n    return test_list.rear_extract(0);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = rear_extract;",
            "assert_eq!(candidate(vec![(1, String::from(\"Rash\"), 21), (2, String::from(\"Varsha\"), 20), (3, String::from(\"Kil\"), 19)]), vec![21, 20, 19]);",
            "assert_eq!(candidate(vec![(1, String::from(\"Sai\"), 36), (2, String::from(\"Ayesha\"), 25), (3, String::from(\"Salman\"), 45)]), vec![36, 25, 45]);",
            "assert_eq!(candidate(vec![(1, String::from(\"Sudeep\"), 14), (2, String::from(\"Vandana\"), 36), (3, String::from(\"Dawood\"), 56)]), vec![14, 36, 56]);",
            "}"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "/ Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "fn substract_elements(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> (isize, isize, isize) {\n    return (isize, isize, isize)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = substract_elements;",
            "assert_eq!(candidate((10, 4, 5), (2, 5, 18)), (8, -1, -13));",
            "assert_eq!(candidate((11, 2, 3), (24, 45, 16)), (-13, -43, -13));",
            "assert_eq!(candidate((7, 18, 9), (10, 11, 12)), (-3, 7, -3));",
            "}"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "/ Write a rsthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "fn even_binomial_Coeff_Sum(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = even_binomial_Coeff_Sum;",
            "assert_eq!(candidate(4), 8);",
            "assert_eq!(candidate(6), 32);",
            "assert_eq!(candidate(2), 2);",
            "}"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "/ Write a function that takes in a HashMap and integer n and filters the HashMap to only include entries with values greater than or equal to n.",
        "code": "use std::collections::HashMap;\n\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n    const auto keys = dict.keys();\n    const auto values = dict.values();\n    const auto values_size = values.size();\n    const auto values_count = values_size;\n    const auto values_min = std::min(values_size, n);\n    const auto values_max = std::max(values_size, n);\n    const auto values_min_max = std::min(values_max, n);\n    const auto values_min_max_count = values_max - values_min_max;\n    const auto values_max_count = values_max - values_min_max;\n    const auto values_min_max_count_count = values_max_count - values_min_max_count;\n    const auto values_max_count_count = values_max_count - values_min_max_count;\n    const auto values_min_max_count_count_count = values_max_count_count - values_min_max_count_count;\n    const auto values_min_max_count_count_count_count = values_max_count_count_count - values_min_max_count_count_count;\n    const auto values_min_max_count_count_count_count = values_max_count_count_count_count - values_min_max_count_count_count_count;\n    const auto values_min_max_count_count_count_count_count = values_max_count_count_count_count_count - values_min_max_count_count_count_count_count;\n    const auto values_min_max_count_count_count_count_count = values_max_count_count_count_count_count_count - values_min_max_count_count_count_count_count_count;\n    const auto values_min_max_count_count_count_count_count = values\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = dict_filter;",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));",
            "}"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "/ Write a function to find the nth decagonal number.",
        "code": "fn is_num_decagonal(n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n        return 26;\n    }\n    if (n == 27) {\n        return 27;\n    }\n    if (n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_num_decagonal;",
            "assert_eq!(candidate(3), 27);",
            "assert_eq!(candidate(7), 175);",
            "assert_eq!(candidate(10), 370);",
            "}"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "/ Write a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).",
        "code": "fn sequential_search(dlist: Vec<isize>, item: isize) -> (bool, isize) {\n    if (len(dlist) == 0) {\n        return False, -1\n    }\n    if (len(dlist) == 1) {\n        return dlist[0] == item, 0\n    }\n    return dlist[0] < item, 0\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sequential_search;",
            "assert_eq!(candidate(vec![11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31), (true, 3));",
            "assert_eq!(candidate(vec![12, 32, 45, 62, 35, 47, 44, 61], 61), (true, 7));",
            "assert_eq!(candidate(vec![9, 10, 17, 19, 22, 39, 48, 56], 48), (true, 6));",
            "}"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "/ Write a rsthon function to check if the elements of a given vector are unique or not.",
        "code": "fn all_unique(test_list: Vec<isize>) -> bool {\n    for (i in test_list) {\n        if (test_list[i] == test_list[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = all_unique;",
            "assert_eq!(candidate(vec![1, 2, 3]), true);",
            "assert_eq!(candidate(vec![1, 2, 1, 2]), false);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);",
            "}"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "/ Write a function to subtract two vectors element-wise.",
        "code": "fn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n  return nums1.sub_list(nums2);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sub_list;",
            "assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);",
            "assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);",
            "assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);",
            "}"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "/ Write a rsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "fn validate(n: isize) -> bool {\n    if (n < 0) {\n        return false;\n    }\n    for (i = 0; i < n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = validate;",
            "assert_eq!(candidate(1234), true);",
            "assert_eq!(candidate(51241), false);",
            "assert_eq!(candidate(321), true);",
            "}"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "/ Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "fn text_match_two_three(text: String) -> bool {\n  return text.contains('a') && text.contains('b') && text.contains('c');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_match_two_three;",
            "assert_eq!(candidate(String::from(\"ac\")), false);",
            "assert_eq!(candidate(String::from(\"dc\")), false);",
            "assert_eq!(candidate(String::from(\"abbbba\")), true);",
            "}"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "/ Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.",
        "code": "fn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return a[0];\n    }\n    if (n == 2) {\n        return a[0] + a[1];\n    }\n    if (n == 3) {\n        return a[0] + a[1] + a[2];\n    }\n    if (n == 4) {\n        return a[0] + a[1] + a[2] + a[3];\n    }\n    if (n == 5) {\n        return a[0] + a[1] + a[2] + a[3] + a[4];\n    }\n    if (n == 6) {\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5];\n    }\n    if (n == 7) {\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6];\n    }\n    if (n == 8) {\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7];\n    }\n    if (n == 9) {\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8];\n    }\n    if (n == 10) {\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9];\n    }\n    if (n == 11) {\n        return a[0] + a\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_sub_array_sum_repeated;",
            "assert_eq!(candidate(vec![10, 20, -30, -1], 4, 3), 30);",
            "assert_eq!(candidate(vec![-1, 10, 20], 3, 2), 59);",
            "assert_eq!(candidate(vec![-1, -2, -3], 3, 3), -1);",
            "}"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "/ Write a rsthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "fn square_Sum(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = square_Sum;",
            "assert_eq!(candidate(2), 20);",
            "assert_eq!(candidate(3), 56);",
            "assert_eq!(candidate(4), 120);",
            "}"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "/ Write a function to find the vector of maximum length in a vector of vectors.",
        "code": "fn max_length(list1: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n  isize = 0;\n  for (isize = 0; isize < list1.size(); isize++) {\n    if (list1[isize] > list1[isize + 1]) {\n      break;\n    }\n  }\n  return isize;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_length;",
            "assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));",
            "assert_eq!(candidate(vec![vec![1], vec![5, 7], vec![10, 12, 14, 15]]), (4, vec![10, 12, 14, 15]));",
            "assert_eq!(candidate(vec![vec![5], vec![15, 20, 25]]), (3, vec![15, 20, 25]));",
            "}"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "/ Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "fn count_no_of_ways(n: isize, k: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_no_of_ways;",
            "assert_eq!(candidate(2, 4), 16);",
            "assert_eq!(candidate(3, 2), 6);",
            "assert_eq!(candidate(4, 4), 228);",
            "}"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "/ Write a rsthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "fn find(n: isize, m: isize) -> isize {\n    if (n == m) {\n        return n;\n    }\n    if (n < m) {\n        return find(n, m - n) + find(m, n);\n    }\n    return find(n, m - n) + find(m, n);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find;",
            "assert_eq!(candidate(10, 3), 3);",
            "assert_eq!(candidate(4, 2), 2);",
            "assert_eq!(candidate(20, 5), 4);",
            "}"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "/ Write a function to find the third side of a right angled triangle.",
        "code": "fn otherside_rightangle(w: isize, h: isize) -> f64 {\n    const a = w[0]\n    const b = w[1]\n    const c = w[2]\n    const d = w[3]\n    const e = w[4]\n    const f = w[5]\n    const g = w[6]\n    const h = w[7]\n    const i = w[8]\n    const j = w[9]\n    const k = w[10]\n    const l = w[11]\n    const m = w[12]\n    const n = w[13]\n    const o = w[14]\n    const p = w[15]\n    const q = w[16]\n    const r = w[17]\n    const s = w[18]\n    const t = w[19]\n    const u = w[20]\n    const v = w[21]\n    const w = w[22]\n    const x = w[23]\n    const y = w[24]\n    const z = w[25]\n    const a_ = w[26]\n    const b_ = w[27]\n    const c_ = w[28]\n    const d_ = w[29]\n    const e_ = w[30]\n    const f_ = w[31]\n    const g_ = w[32]\n    const h_ = w[33]\n    const i_ = w[34]\n    const j_ = w[35]\n    const k_ = w[36]\n    const l_ = w[37]\n    const m_ = w[38]\n    const n_ = w[39]\n    const o_ = w[40]\n    const p_ = w[41]\n    const q_ = w[42]\n    const r_ = w[43]\n    const s_ = w[44]\n    const t_ = w[45]\n    const u_ = w[46]\n    const v_ = w[47]\n    const w_ = w[48]\n    const x_ = w[49]\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = otherside_rightangle;",
            "assert_eq!(candidate(7, 8), 10.63014581273465);",
            "assert_eq!(candidate(3, 4), 5.0);",
            "assert_eq!(candidate(7, 15), 16.55294535724685);",
            "}"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "/ Write a function to return the sum of all divisors of a number.",
        "code": "fn sum_div(number: isize) -> isize {\n  let sum = 0;\n  let divisors = [];\n  for (let i = 0; i < number; i++) {\n    let divisor = Math.floor(Math.sqrt(i));\n    if (divisor > 1) {\n      divisors.push(divisor);\n    }\n    sum += divisor;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_div;",
            "assert_eq!(candidate(8), 7);",
            "assert_eq!(candidate(12), 16);",
            "assert_eq!(candidate(7), 1);",
            "}"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "/ Write a rsthon function to count inversions in a vector.",
        "code": "fn get_Inv_Count(arr: Vec<isize>) -> isize {\n  return arr.sum()\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_Inv_Count;",
            "assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);",
            "assert_eq!(candidate(vec![1, 2, 1]), 1);",
            "assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);",
            "}"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "/ Write a function to calculate the maximum aggregate from the vector of tuples.",
        "code": "fn max_aggregate(stdata: Vec<(String, isize)>) -> (String, isize) {\n    return (\n        stdata.max_aggregate(\n            stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.get_vector_length(stdata.\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_aggregate;",
            "assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 90), (String::from(\"Sabah Colley\"), 88), (String::from(\"Peter Nichols\"), 7), (String::from(\"Juan Whelan\"), 122), (String::from(\"Sabah Colley\"), 84)]), (String::from(\"Juan Whelan\"), 212));",
            "assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 50), (String::from(\"Sabah Colley\"), 48), (String::from(\"Peter Nichols\"), 37), (String::from(\"Juan Whelan\"), 22), (String::from(\"Sabah Colley\"), 14)]), (String::from(\"Juan Whelan\"), 72));",
            "assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 10), (String::from(\"Sabah Colley\"), 20), (String::from(\"Peter Nichols\"), 30), (String::from(\"Juan Whelan\"), 40), (String::from(\"Sabah Colley\"), 50)]), (String::from(\"Sabah Colley\"), 70));",
            "}"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "/ Write a rsthon function to find element at a given index after number of rotations.",
        "code": "fn find_Element(arr: Vec<isize>, ranges: Vec<Vec<isize>>, rotations: isize, index: isize) -> isize {\n    if (index >= ranges.size()) {\n        return 0;\n    }\n    if (index < 0) {\n        return 0;\n    }\n    if (index >= ranges.size()) {\n        return ranges.size() - 1;\n    }\n    return index;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Element;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![vec![0, 2], vec![0, 3]], 2, 1), 3);",
            "assert_eq!(candidate(vec![1, 2, 3, 4], vec![vec![0, 1], vec![0, 2]], 1, 2), 3);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![vec![0, 1], vec![0, 2]], 1, 1), 1);",
            "}"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "/ Write a function to return two words from a vector of words starting with letter 'p'.",
        "code": "fn start_withp(words: Vec<String>) -> (String, String) {\n    return words.map(word => word.charAt(0)).map(word => word.charAt(1)).join(' ');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = start_withp;",
            "assert_eq!(candidate(vec![String::from(\"Python PHP\"), String::from(\"Java JavaScript\"), String::from(\"c c++\")]), (String::from(\"Python\"), String::from(\"PHP\")));",
            "assert_eq!(candidate(vec![String::from(\"Python Programming\"), String::from(\"Java Programming\")]), (String::from(\"Python\"), String::from(\"Programming\")));",
            "assert_eq!(candidate(vec![String::from(\"Pqrst Pqr\"), String::from(\"qrstuv\")]), (String::from(\"Pqrst\"), String::from(\"Pqr\")));",
            "}"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "/ Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "fn max_sum_increasing_subseq(a: Vec<isize>, n: isize, index: isize, k: isize) -> isize {\n    if (index == n) {\n        return k;\n    }\n    if (index == 0) {\n        return 0;\n    }\n    if (index == n - 1) {\n        return k;\n    }\n    if (index == n) {\n        return k;\n    }\n    if (index == 0) {\n        return 0;\n    }\n    if (index == n - 1) {\n        return k;\n    }\n    if (index == n - 2) {\n        return k;\n    }\n    if (index == n - 3) {\n        return k;\n    }\n    if (index == n - 4) {\n        return k;\n    }\n    if (index == n - 5) {\n        return k;\n    }\n    if (index == n - 6) {\n        return k;\n    }\n    if (index == n - 7) {\n        return k;\n    }\n    if (index == n - 8) {\n        return k;\n    }\n    if (index == n - 9) {\n        return k;\n    }\n    if (index == n - 10) {\n        return k;\n    }\n    if (index == n - 11) {\n        return k;\n    }\n    if (index == n - 12) {\n        return k;\n    }\n    if (index == n - 13) {\n        return k;\n    }\n    if (index == n - 14) {\n        return k;\n    }\n    if (index == n - 15) {\n        return k;\n    }\n    if (index == n - 16) {\n        return k;\n    }\n    if (index == n - 17) {\n        return k;\n    }\n    if (index == n - 18) {\n        return k;\n    }\n    if (index ==\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_sum_increasing_subseq;",
            "assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 4, 6), 11);",
            "assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 2, 5), 7);",
            "assert_eq!(candidate(vec![11, 15, 19, 21, 26, 28, 31], 7, 2, 4), 71);",
            "}"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "/ Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.",
        "code": "fn large_product(nums1: Vec<isize>, nums2: Vec<isize>, N: isize) -> Vec<isize> {\n    if (N == 0) {\n        return nums1;\n    }\n    Vec<isize> res = nums1;\n    for (isize i = 0; i < N; i++) {\n        res = res.add(nums2.get(i));\n    }\n    return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = large_product;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 3), vec![60, 54, 50]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 4), vec![60, 54, 50, 48]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 5), vec![60, 54, 50, 48, 45]);",
            "}"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "/ Write a rsthon function to find the maximum of two numbers.",
        "code": "fn maximum(a: isize, b: isize) -> isize {\n    if (a == b) {\n        return a;\n    }\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = maximum;",
            "assert_eq!(candidate(5, 10), 10);",
            "assert_eq!(candidate(-1, -2), -1);",
            "assert_eq!(candidate(9, 7), 9);",
            "}"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "/ Write a function to convert a given string to a vector of characters.",
        "code": "fn string_to_tuple(str1: String) -> Vec<String> {\n    // TODO: Implement this function.\n    return Vec<String>{};\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = string_to_tuple;",
            "assert_eq!(candidate(String::from(\"python 3.0\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\"), String::from(\"3\"), String::from(\".\"), String::from(\"0\")]);",
            "assert_eq!(candidate(String::from(\"item1\")), vec![String::from(\"i\"), String::from(\"t\"), String::from(\"e\"), String::from(\"m\"), String::from(\"1\")]);",
            "assert_eq!(candidate(String::from(\"15.10\")), vec![String::from(\"1\"), String::from(\"5\"), String::from(\".\"), String::from(\"1\"), String::from(\"0\")]);",
            "}"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "/ Write a rsthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "fn highest_Power_of_2(n: isize) -> isize {\n    let highest_power_of_2 = 0;\n    for (let i = 0; i < n; i++) {\n        if (n & 1) {\n            highest_power_of_2 = i;\n        }\n    }\n    return highest_power_of_2;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = highest_Power_of_2;",
            "assert_eq!(candidate(10), 8);",
            "assert_eq!(candidate(19), 16);",
            "assert_eq!(candidate(32), 32);",
            "}"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "/ Write a function to find then'th lucas number.",
        "code": "fn find_lucas(n: isize) -> isize {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n    return 3;\n  }\n  if (n == 4) {\n    return 4;\n  }\n  if (n == 5) {\n    return 5;\n  }\n  if (n == 6) {\n    return 6;\n  }\n  if (n == 7) {\n    return 7;\n  }\n  if (n == 8) {\n    return 8;\n  }\n  if (n == 9) {\n    return 9;\n  }\n  if (n == 10) {\n    return 10;\n  }\n  if (n == 11) {\n    return 11;\n  }\n  if (n == 12) {\n    return 12;\n  }\n  if (n == 13) {\n    return 13;\n  }\n  if (n == 14) {\n    return 14;\n  }\n  if (n == 15) {\n    return 15;\n  }\n  if (n == 16) {\n    return 16;\n  }\n  if (n == 17) {\n    return 17;\n  }\n  if (n == 18) {\n    return 18;\n  }\n  if (n == 19) {\n    return 19;\n  }\n  if (n == 20) {\n    return 20;\n  }\n  if (n == 21) {\n    return 21;\n  }\n  if (n == 22) {\n    return 22;\n  }\n  if (n == 23) {\n    return 23;\n  }\n  if (n == 24) {\n    return 24;\n  }\n  if (n == 25) {\n    return 25;\n  }\n  if (n == 26) {\n    return 26;\n  }\n  if (n == 27) {\n    return 27;\n  }\n  if (n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_lucas;",
            "assert_eq!(candidate(9), 76);",
            "assert_eq!(candidate(4), 7);",
            "assert_eq!(candidate(3), 4);",
            "}"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "/ Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "fn get_max_sum(n: isize) -> isize {\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n );\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_max_sum;",
            "assert_eq!(candidate(60), 106);",
            "assert_eq!(candidate(10), 12);",
            "assert_eq!(candidate(2), 2);",
            "}"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "/ Write a function to find the vector with maximum length.",
        "code": "fn max_length_list(input_list: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n  isize max_length = 0;\n  for (isize i = 0; i < input_list.size(); i++) {\n    if (input_list[i].size() > max_length) {\n      max_length = input_list[i].size();\n    }\n  }\n  return max_length;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_length_list;",
            "assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));",
            "assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5], vec![1, 2, 3, 4], vec![1, 2, 3], vec![1, 2], vec![1]]), (5, vec![1, 2, 3, 4, 5]));",
            "assert_eq!(candidate(vec![vec![3, 4, 5], vec![6, 7, 8, 9], vec![10, 11, 12]]), (4, vec![6, 7, 8, 9]));",
            "}"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "/ Write a function to check if given vector contains no duplicates.",
        "code": "fn check_distinct(test_tup: Vec<isize>) -> bool {\n  if (test_tup.size() == 0) {\n    return true;\n  }\n  for (i = 0; i < test_tup.size(); i++) {\n    if (test_tup[i]!= test_tup[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_distinct;",
            "assert_eq!(candidate(vec![1, 4, 5, 6, 1, 4]), false);",
            "assert_eq!(candidate(vec![1, 4, 5, 6]), true);",
            "assert_eq!(candidate(vec![2, 3, 4, 5, 6]), true);",
            "}"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "/ Write a rsthon function to find the first non-repeated character in a given string.",
        "code": "fn first_non_repeating_character(str1: String) -> Option<String> {\n  const char *str = str1.c_str();\n  const char *str_end = str + str1.size();\n  const char *str_start = str;\n  while (str < str_end) {\n    if (*str == '\\'') {\n      if (str + 1 < str_end && *(str + 1) == '\\'') {\n        str += 2;\n      } else {\n        return str;\n      }\n    } else if (*str == '\\'') {\n      if (str + 1 < str_end && *(str + 1) == '\\'') {\n        str += 2;\n      } else {\n        return str;\n      }\n    } else if (*str == '\\'') {\n      if (str + 1 < str_end && *(str + 1) == '\\'') {\n        str += 2;\n      } else {\n        return str;\n      }\n    } else if (*str == '\\'') {\n      if (str + 1 < str_end && *(str + 1) == '\\'') {\n        str += 2;\n      } else {\n        return str;\n      }\n    } else if (*str == '\\'') {\n      if (str + 1 < str_end && *(str + 1) == '\\'') {\n        str += 2;\n      } else {\n        return str;\n      }\n    } else if (*str == '\\'') {\n      if (str + 1 < str_end && *(str + 1) == '\\'') {\n        str += 2;\n      } else {\n        return str;\n      }\n    } else if (*str == '\\'') {\n      if (str + 1 < str_end && *(str + 1) == '\\'') {\n        str += 2;\n      } else {\n        return str;\n      }\n    } else if (*str == '\\'') {\n      if (str + 1 < str_end && *(\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = first_non_repeating_character;",
            "assert_eq!(candidate(String::from(\"abcabc\")), None);",
            "assert_eq!(candidate(String::from(\"abc\")), Some(String::from(\"a\")));",
            "assert_eq!(candidate(String::from(\"ababc\")), Some(String::from(\"c\")));",
            "}"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "/ Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "fn check_char(string: String) -> String {\n    if (string.length() == 0) {\n        return string;\n    }\n    if (string.length() == 1) {\n        return string;\n    }\n    if (string.length() == 2) {\n        return string;\n    }\n    if (string.length() == 3) {\n        return string;\n    }\n    if (string.length() == 4) {\n        return string;\n    }\n    if (string.length() == 5) {\n        return string;\n    }\n    if (string.length() == 6) {\n        return string;\n    }\n    if (string.length() == 7) {\n        return string;\n    }\n    if (string.length() == 8) {\n        return string;\n    }\n    if (string.length() == 9) {\n        return string;\n    }\n    if (string.length() == 10) {\n        return string;\n    }\n    if (string.length() == 11) {\n        return string;\n    }\n    if (string.length() == 12) {\n        return string;\n    }\n    if (string.length() == 13) {\n        return string;\n    }\n    if (string.length() == 14) {\n        return string;\n    }\n    if (string.length() == 15) {\n        return string;\n    }\n    if (string.length() == 16) {\n        return string;\n    }\n    if (string.length() == 17) {\n        return string;\n    }\n    if (string.length() == 18) {\n        return string;\n    }\n    if (string.length() == 19) {\n        return string;\n    }\n    if (string.length() == 20) {\n        return string;\n    }\n    if (string.length() == 21) {\n        return string;\n    }\n    if (string.length() == 22) {\n        return string;\n    }\n    if (string.length() == 23) {\n        return string;\n    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_char;",
            "assert_eq!(candidate(String::from(\"abba\")), String::from(\"Valid\"));",
            "assert_eq!(candidate(String::from(\"a\")), String::from(\"Valid\"));",
            "assert_eq!(candidate(String::from(\"abcd\")), String::from(\"Invalid\"));",
            "}"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "/ Write a function to find the median of three numbers.",
        "code": "fn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = median_numbers;",
            "assert_eq!(candidate(25, 55, 65), 55.0);",
            "assert_eq!(candidate(20, 10, 30), 20.0);",
            "assert_eq!(candidate(15, 45, 75), 45.0);",
            "}"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "/ Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "fn bitwise_xor(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    return (isize, isize, isize, isize)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = bitwise_xor;",
            "assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (15, 6, 5, 10));",
            "assert_eq!(candidate((11, 5, 7, 10), (6, 3, 4, 4)), (13, 6, 3, 14));",
            "assert_eq!(candidate((12, 6, 8, 11), (7, 4, 5, 6)), (11, 2, 13, 13));",
            "}"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "/ Write a rsthon function to identify non-prime numbers.",
        "code": "fn is_not_prime(n: isize) -> bool {\n    if (n == 1) return true\n    if (n == 2) return false\n    if (n % 2 == 0) return false\n    return true\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_not_prime;",
            "assert_eq!(candidate(2), false);",
            "assert_eq!(candidate(10), true);",
            "assert_eq!(candidate(35), true);",
            "assert_eq!(candidate(37), false);",
            "}"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "/ Write a function to extract the number of unique tuples in the given vector.",
        "code": "fn extract_freq(test_list: Vec<(isize, isize)>) -> isize {\n    return (\n        (\n            (\n                (\n                    (\n                        (\n                            (\n                                (\n                                    (\n                                        (\n                                            (\n                                                (\n                                                    (\n                                                        (\n                                                            (\n                                                                (\n                                                                    (\n                                                                        (\n                                                                            (\n                                                                                (\n                                                                                    (\n                                                                                        (\n                                                                                            (\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = extract_freq;",
            "assert_eq!(candidate(vec![(3, 4), (1, 2), (4, 3), (5, 6)]), 3);",
            "assert_eq!(candidate(vec![(4, 15), (2, 3), (5, 4), (6, 7)]), 4);",
            "assert_eq!(candidate(vec![(5, 16), (2, 3), (6, 5), (6, 9)]), 4);",
            "}"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "/ Write a function to perform index wise addition of vector elements in the given two nested vectors.",
        "code": "fn add_nested_tuples(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    return Vec<Vec<isize>>(\n        test_tup1.add_nested_tuples(test_tup2),\n        test_tup2.add_nested_tuples(test_tup1)\n    );\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = add_nested_tuples;",
            "assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![7, 10], vec![7, 14], vec![3, 10], vec![8, 13]]);",
            "assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![9, 12], vec![9, 16], vec![5, 12], vec![10, 15]]);",
            "assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![11, 14], vec![11, 18], vec![7, 14], vec![12, 17]]);",
            "}"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "/ Write a rsthon function to find the minimum of two numbers.",
        "code": "fn minimum(a: isize, b: isize) -> isize {\n    let min = a;\n    let max = b;\n    for (let i = 0; i < a; i++) {\n        let temp = min;\n        min = max;\n        max = temp;\n    }\n    return max;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = minimum;",
            "assert_eq!(candidate(1, 2), 1);",
            "assert_eq!(candidate(-5, -4), -5);",
            "assert_eq!(candidate(0, 0), 0);",
            "}"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "/ Write a rsthon function to find whether the parity of a given number is odd.",
        "code": "fn find_Parity(x: isize) -> bool {\n    if (x == 0) {\n        return true;\n    }\n    if (x % 2 == 0) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Parity;",
            "assert_eq!(candidate(12), false);",
            "assert_eq!(candidate(7), true);",
            "assert_eq!(candidate(10), false);",
            "}"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "/ Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.",
        "code": "fn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n    Vec<isize> nums1_ = nums1.map(lambda x: x.size());\n    Vec<isize> nums2_ = nums2.map(lambda x: x.size());\n    Vec<isize> nums3 = nums1_.sub(nums2_);\n    Vec<isize> nums4 = nums2_.sub(nums1_);\n    Vec<isize> nums5 = nums3.sub(nums4);\n    Vec<isize> nums6 = nums4.sub(nums3);\n    Vec<isize> nums7 = nums5.sub(nums6);\n    Vec<isize> nums8 = nums6.sub(nums5);\n    Vec<isize> nums9 = nums7.sub(nums8);\n    Vec<isize> nums10 = nums8.sub(nums7);\n    Vec<isize> nums11 = nums9.sub(nums10);\n    Vec<isize> nums12 = nums10.sub(nums9);\n    Vec<isize> nums13 = nums11.sub(nums12);\n    Vec<isize> nums14 = nums12.sub(nums11);\n    Vec<isize> nums15 = nums13.sub(nums14);\n    Vec<isize> nums16 = nums14.sub(nums13);\n    Vec<isize> nums17 = nums15.sub(nums16);\n    Vec<isize> nums18 = nums16.sub(nums15);\n    Vec<isize> nums19 = nums17.sub(nums18);\n    Vec<isize> nums20\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = k_smallest_pairs;",
            "assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);",
            "assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);",
            "assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);",
            "}"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "/ Write a function to find the minimum product from the pairs of tuples within a given vector.",
        "code": "fn min_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n    if (isize(0) == isize(0)) {\n        return isize(0);\n    }\n    if (isize(0) == isize(1)) {\n        return isize(1);\n    }\n    if (isize(1) == isize(0)) {\n        return isize(0);\n    }\n    if (isize(1) == isize(1)) {\n        return isize(1);\n    }\n    if (isize(2) == isize(0)) {\n        return isize(0);\n    }\n    if (isize(2) == isize(1)) {\n        return isize(1);\n    }\n    if (isize(2) == isize(2)) {\n        return isize(2);\n    }\n    if (isize(3) == isize(0)) {\n        return isize(0);\n    }\n    if (isize(3) == isize(1)) {\n        return isize(1);\n    }\n    if (isize(3) == isize(2)) {\n        return isize(2);\n    }\n    if (isize(3) == isize(3)) {\n        return isize(3);\n    }\n    if (isize(4) == isize(0)) {\n        return isize(0);\n    }\n    if (isize(4) == isize(1)) {\n        return isize(1);\n    }\n    if (isize(4) == isize(2)) {\n        return isize(2);\n    }\n    if (isize(4) == isize(3)) {\n        return isize(3);\n    }\n    if (isize(4) == isize(4)) {\n        return isize(4);\n    }\n    if (isize(5) == isize(0)) {\n        return isize(0);\n    }\n    if (isize(\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = min_product_tuple;",
            "assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 8);",
            "assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 30);",
            "assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 100);",
            "}"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "/ Write a function to convert the given snake case string to camel case string.",
        "code": "fn snake_to_camel(word: String) -> String {\n  return word.replace(/([A-Z])/g, function(match) {\n    return match.toUpperCase();\n  });\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = snake_to_camel;",
            "assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));",
            "assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));",
            "assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));",
            "}"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "/ Write a rsthon function to remove odd numbers from a given vector.",
        "code": "fn remove_odd(l: Vec<isize>) -> Vec<isize> {\n    l.sort();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    l.reverse();\n    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_odd;",
            "assert_eq!(candidate(vec![1, 2, 3]), vec![2]);",
            "assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);",
            "assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);",
            "}"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "/ Write a rsthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    if (list1.size() == 0) {\n        return false;\n    }\n    if (list2.size() == 0) {\n        return true;\n    }\n    for (i = 0; i < list1.size(); i++) {\n        if (list1[i] == list2[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = overlapping;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);",
            "assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);",
            "assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);",
            "}"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "/ Write a rsthon function to find a pair with highest product from a given vector of integers.",
        "code": "fn max_Product(arr: Vec<isize>) -> (isize, isize) {\n    if (arr.size() == 0) {\n        return (isize, isize);\n    }\n    \n    // Find the max product of the elements in the vector.\n    isize = arr.size();\n    isize = max(isize, 1);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[0]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[1]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[2]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[3]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[4]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[5]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[6]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[7]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[8]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[9]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[10]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[11]);\n    \n    // Find the max product of the elements in the vector.\n    isize = max(isize, arr[12]);\n    \n    // Find the max product of the elements in the vector.\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_Product;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 7, 0, 8, 4]), (7, 8));",
            "assert_eq!(candidate(vec![0, -1, -2, -4, 5, 0, -6]), (-4, -6));",
            "assert_eq!(candidate(vec![1, 2, 3]), (2, 3));",
            "}"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "/ Write a function to find common first element in given vector of vectors.",
        "code": "fn group_tuples(Input: Vec<Vec<String>>) -> Vec<Vec<String>> {\n  Vec<String> result = Vec<String>();\n  for (int i = 0; i < len(Input); i++) {\n    if (i == 0) {\n      result = Input[i];\n    } else {\n      result = result.merge(Input[i]);\n    }\n  }\n  return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = group_tuples;",
            "assert_eq!(candidate(vec![vec![String::from(\"x\"), String::from(\"y\")], vec![String::from(\"x\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]), vec![vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]);",
            "assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"a\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]);",
            "assert_eq!(candidate(vec![vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]), vec![vec![String::from(\"f\"), String::from(\"g\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]);",
            "}"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "/ Write a rsthon function to find the cube sum of first n even natural numbers.",
        "code": "fn cube_Sum(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = cube_Sum;",
            "assert_eq!(candidate(2), 72);",
            "assert_eq!(candidate(3), 288);",
            "assert_eq!(candidate(4), 800);",
            "}"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "/ Write a function to concatenate each element of tuple by the delimiter.",
        "code": "fn concatenate_tuple(test_tup: (String, String, isize, String)) -> String {\n    return concatenate_tuple_by_delimiter(test_tup, ',');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = concatenate_tuple;",
            "assert_eq!(candidate((String::from(\"ID\"), String::from(\"is\"), 4, String::from(\"UTS\"))), String::from(\"ID-is-4-UTS\"));",
            "assert_eq!(candidate((String::from(\"QWE\"), String::from(\"is\"), 4, String::from(\"RTY\"))), String::from(\"QWE-is-4-RTY\"));",
            "assert_eq!(candidate((String::from(\"ZEN\"), String::from(\"is\"), 4, String::from(\"OP\"))), String::from(\"ZEN-is-4-OP\"));",
            "}"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "/ Write a rsthon function to find the average of cubes of first n natural numbers.",
        "code": "fn find_Average_Of_Cube(n: isize) -> f64 {\n    if (n == 0) {\n        return 0;\n    }\n    return (n - 1) / 2;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Average_Of_Cube;",
            "assert_eq!(candidate(2), 4.5);",
            "assert_eq!(candidate(3), 12.0);",
            "assert_eq!(candidate(1), 1.0);",
            "}"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "/ Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "fn extract_rear(test_tuple: (String, String, String)) -> Vec<String> {\n    return test_tuple.map(\n        (s1, s2, s3) -> s1 + s2 + s3).map(\n            (s1, s2, s3) -> s1 + s2 + s3).map(\n                (s1, s2, s3) -> s1 + s2 + s3).map(\n                    (s1, s2, s3) -> s1 + s2 + s3).map(\n                        (s1, s2, s3) -> s1 + s2 + s3).map(\n                            (s1, s2, s3) -> s1 + s2 + s3).map(\n                                (s1, s2, s3) -> s1 + s2 + s3).map(\n                                    (s1, s2, s3) -> s1 + s2 + s3).map(\n                                        (s1, s2, s3) -> s1 + s2 + s3).map(\n                                            (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                    (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                        (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                            (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                                (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                                    (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                                        (s1, s2, s3) -> s1 + s2 + s3).map(\n                                                                            (s1, s\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = extract_rear;",
            "assert_eq!(candidate((String::from(\"Mers\"), String::from(\"for\"), String::from(\"Vers\"))), vec![String::from(\"s\"), String::from(\"r\"), String::from(\"s\")]);",
            "assert_eq!(candidate((String::from(\"Avenge\"), String::from(\"for\"), String::from(\"People\"))), vec![String::from(\"e\"), String::from(\"r\"), String::from(\"e\")]);",
            "assert_eq!(candidate((String::from(\"Gotta\"), String::from(\"get\"), String::from(\"go\"))), vec![String::from(\"a\"), String::from(\"t\"), String::from(\"o\")]);",
            "}"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "/ Write a function to filter odd numbers.",
        "code": "fn filter_oddnumbers(nums: Vec<isize>) -> Vec<isize> {\n  return filter(nums, is_oddnumbers);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = filter_oddnumbers;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 3, 5, 7, 9]);",
            "assert_eq!(candidate(vec![10, 20, 45, 67, 84, 93]), vec![45, 67, 93]);",
            "assert_eq!(candidate(vec![5, 7, 9, 8, 6, 4, 3]), vec![5, 7, 9, 3]);",
            "}"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "/ Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "fn change_date_format(dt: String) -> String {\n  return dt.replace(/[^0-9]/g, '');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = change_date_format;",
            "assert_eq!(candidate(String::from(\"2026-01-02\")), String::from(\"02-01-2026\"));",
            "assert_eq!(candidate(String::from(\"2020-11-13\")), String::from(\"13-11-2020\"));",
            "assert_eq!(candidate(String::from(\"2021-04-26\")), String::from(\"26-04-2021\"));",
            "}"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "/ Write a function to sort the given vector by using shell sort.",
        "code": "fn shell_sort(my_list: Vec<isize>) -> Vec<isize> {\n  // Sort the list by using shell sort.\n  return sort(my_list, 0, my_list.size() - 1);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = shell_sort;",
            "assert_eq!(candidate(vec![12, 23, 4, 5, 3, 2, 12, 81, 56, 95]), vec![2, 3, 4, 5, 12, 12, 23, 56, 81, 95]);",
            "assert_eq!(candidate(vec![24, 22, 39, 34, 87, 73, 68]), vec![22, 24, 34, 39, 68, 73, 87]);",
            "assert_eq!(candidate(vec![32, 30, 16, 96, 82, 83, 74]), vec![16, 30, 32, 74, 82, 83, 96]);",
            "}"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "/ Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "fn and_tuples(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    return (isize, isize, isize, isize)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = and_tuples;",
            "assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (0, 0, 2, 1));",
            "assert_eq!(candidate((1, 2, 3, 4), (5, 6, 7, 8)), (1, 2, 3, 0));",
            "assert_eq!(candidate((8, 9, 11, 12), (7, 13, 14, 17)), (0, 9, 10, 0));",
            "}"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "/ Write a function to find the directrix of a parabola.",
        "code": "fn parabola_directrix(a: isize, b: isize, c: isize) -> isize {\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n        return b;\n    }\n    if (a == b) {\n        return c;\n    }\n    if (a == c) {\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = parabola_directrix;",
            "assert_eq!(candidate(5, 3, 2), -198);",
            "assert_eq!(candidate(9, 8, 4), -2336);",
            "assert_eq!(candidate(2, 4, 6), -130);",
            "}"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "/ Write a function to find the median length of a trapezium.",
        "code": "fn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n    if (height <= 1) {\n        return 0;\n    }\n    if (height % 2 == 0) {\n        return base1 + base2;\n    }\n    return base1 + (base2 - base1) / 2;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = median_trapezium;",
            "assert_eq!(candidate(15, 25, 35), 20.0);",
            "assert_eq!(candidate(10, 20, 30), 15.0);",
            "assert_eq!(candidate(6, 9, 4), 7.5);",
            "}"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "/ Write a function to check whether the entered number is greater than the elements of the given vector.",
        "code": "fn check_greater(arr: Vec<isize>, number: isize) -> bool {\n    if (arr.size() == 0) {\n        return false;\n    }\n    if (number == 0) {\n        return true;\n    }\n    if (number > arr.size()) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_greater;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5], 4), false);",
            "assert_eq!(candidate(vec![2, 3, 4, 5, 6], 8), true);",
            "assert_eq!(candidate(vec![9, 7, 4, 8, 6, 1], 11), true);",
            "}"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "/ Write a function that matches a string that has an a followed by one or more b's.",
        "code": "fn text_match_one(text: String) -> bool {\n  return text.match(/\\b(a|b)\\b/);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_match_one;",
            "assert_eq!(candidate(String::from(\"ac\")), false);",
            "assert_eq!(candidate(String::from(\"dc\")), false);",
            "assert_eq!(candidate(String::from(\"abba\")), true);",
            "}"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "/ Write a rsthon function to find the last digit of a given number.",
        "code": "fn last_Digit(n: isize) -> isize {\n    let last_digit = 0;\n    for (let i = 0; i < n; i++) {\n        last_digit = last_digit * 10 + (n - i - 1);\n    }\n    return last_digit;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = last_Digit;",
            "assert_eq!(candidate(123), 3);",
            "assert_eq!(candidate(25), 5);",
            "assert_eq!(candidate(30), 0);",
            "}"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "/ Write a rsthon function to return the negative numbers in a vector.",
        "code": "fn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n  return list1.reverse();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = neg_nos;",
            "assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);",
            "assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);",
            "assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);",
            "}"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "/ Write a function to remove odd characters in a string.",
        "code": "fn remove_odd(str1: String) -> String {\n  const odd_chars = 'abcdefghijklmnopqrstuvwxyz';\n  const odd_chars_len = odd_chars.length;\n  const str_len = str1.length;\n  const odd_chars_len_removed = odd_chars_len - odd_chars_len_removed;\n  const str_len_removed = str_len - odd_chars_len_removed;\n  const str_len_removed_str = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str_len = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str_len_removed = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str_len_removed = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str_len_removed = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str_len_removed = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str_len_removed = str_len - odd_chars_len_removed;\n  const str_len_removed_str_len_removed_str_len_removed = str_len - odd_chars_len_rem\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_odd;",
            "assert_eq!(candidate(String::from(\"python\")), String::from(\"yhn\"));",
            "assert_eq!(candidate(String::from(\"program\")), String::from(\"rga\"));",
            "assert_eq!(candidate(String::from(\"language\")), String::from(\"agae\"));",
            "}"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "/ Write a function to count bidirectional tuple pairs.",
        "code": "fn count_bidirectional(test_list: Vec<(isize, isize)>) -> isize {\n  var n = test_list.size();\n  var n_bid = 0;\n  for (var i = 0; i < n; i++) {\n    if (test_list[i][0] == 1) {\n      n_bid++;\n    }\n  }\n  return n_bid;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_bidirectional;",
            "assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]), 3);",
            "assert_eq!(candidate(vec![(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]), 2);",
            "assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]), 4);",
            "}"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "/ Write a function to join a vector of multiple integers into a single integer.",
        "code": "fn multiple_to_single(L: Vec<isize>) -> isize {\n  return isize(L.size());\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = multiple_to_single;",
            "assert_eq!(candidate(vec![11, 33, 50]), 113350);",
            "assert_eq!(candidate(vec![-1, 2, 3, 4, 5, 6]), -123456);",
            "assert_eq!(candidate(vec![10, 15, 20, 25]), 10152025);",
            "}"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "/ Write a function to find the first adverb and their positions in a given sentence.",
        "code": "fn find_adverb_position(text: String) -> (isize, isize, String) {\n  // Find the first adverb and its position in the sentence.\n  // The first adverb is the first one in the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence.\n  // The position of the first adverb is the position of the first character of the sentence\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_adverb_position;",
            "assert_eq!(candidate(String::from(\"clearly!! we can see the sky\")), (0, 7, String::from(\"clearly\")));",
            "assert_eq!(candidate(String::from(\"seriously!! there are many roses\")), (0, 9, String::from(\"seriously\")));",
            "assert_eq!(candidate(String::from(\"unfortunately!! sita is going to home\")), (0, 13, String::from(\"unfortunately\")));",
            "}"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "/ Write a function to find the surface area of a cube of a given size.",
        "code": "fn surfacearea_cube(l: isize) -> isize {\n    return l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l.size() * l\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = surfacearea_cube;",
            "assert_eq!(candidate(5), 150);",
            "assert_eq!(candidate(3), 54);",
            "assert_eq!(candidate(10), 600);",
            "}"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "/ Write a function to find the ration of positive numbers in a vector of integers.",
        "code": "fn positive_count(nums: Vec<isize>) -> f64 {\n    f64 res = 0;\n    for (i = 0; i < nums.size(); i++) {\n        res += nums[i];\n    }\n    return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = positive_count;",
            "assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.54);",
            "assert_eq!(candidate(vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.69);",
            "assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.56);",
            "}"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "/ Write a rsthon function to find the largest negative number from the given vector.",
        "code": "fn largest_neg(list1: Vec<isize>) -> isize {\n  let max_val = -1;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      max_val = i;\n    }\n  }\n  return max_val;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = largest_neg;",
            "assert_eq!(candidate(vec![1, 2, 3, -4, -6]), -6);",
            "assert_eq!(candidate(vec![1, 2, 3, -8, -9]), -9);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, -1]), -1);",
            "}"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "/ Write a function to trim each vector by k in the given vectors.",
        "code": "fn trim_tuple(test_list: Vec<Vec<isize>>, K: isize) -> Vec<Vec<isize>> {\n    Vec<isize> v = Vec<isize>();\n    for (isize i = 0; i < K; i++) {\n        v = v.trim(i);\n    }\n    return v;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = trim_tuple;",
            "assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 2), vec![vec![2], vec![9], vec![2], vec![2]]);",
            "assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 1), vec![vec![3, 2, 1], vec![4, 9, 2], vec![1, 2, 3], vec![8, 2, 1]]);",
            "assert_eq!(candidate(vec![vec![7, 8, 4, 9], vec![11, 8, 12, 4], vec![4, 1, 7, 8], vec![3, 6, 9, 7]], 1), vec![vec![8, 4], vec![8, 12], vec![1, 7], vec![6, 9]]);",
            "}"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "/ Write a function to perform index wise multiplication of vector elements in the given two vectors.",
        "code": "fn index_multiplication(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    Vec<isize> result = Vec<isize>();\n    for (isize i = 0; i < isize(test_tup1.size()); i++) {\n        result = result * test_tup1[i];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = index_multiplication;",
            "assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 21], vec![12, 45], vec![2, 9], vec![7, 30]]);",
            "assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![14, 32], vec![20, 60], vec![6, 20], vec![16, 44]]);",
            "assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![24, 45], vec![30, 77], vec![12, 33], vec![27, 60]]);",
            "}"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "/ Write a function to find cubes of individual elements in a vector.",
        "code": "fn cube_nums(nums: Vec<isize>) -> Vec<isize> {\n  Vec<isize> res = Vec<isize>();\n  for (isize i = 0; i < nums.size(); i++) {\n    if (nums[i] == 0) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = cube_nums;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);",
            "assert_eq!(candidate(vec![10, 20, 30]), vec![1000, 8000, 27000]);",
            "assert_eq!(candidate(vec![12, 15]), vec![1728, 3375]);",
            "}"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "/ Write a function to calculate the sum of perrin numbers.",
        "code": "fn cal_sum(n: isize) -> isize {\n    return sum(n)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = cal_sum;",
            "assert_eq!(candidate(9), 49);",
            "assert_eq!(candidate(10), 66);",
            "assert_eq!(candidate(11), 88);",
            "}"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "/ Write a function to extract specified size of strings from a given vector of string values.",
        "code": "fn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    return str.map(s -> s.substr(0, l)).map(s -> s.substr(l)).map(s -> s.substr(0, l));\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = extract_string;",
            "assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);",
            "assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);",
            "assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);",
            "}"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "/ Write a function to remove all whitespaces from the given string.",
        "code": "fn remove_whitespaces(text1: String) -> String {\n  const text2 = text1.replace(/\\s+/g, '');\n  return text2;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_whitespaces;",
            "assert_eq!(candidate(String::from(\" Google    Flutter \")), String::from(\"GoogleFlutter\"));",
            "assert_eq!(candidate(String::from(\" Google    Dart \")), String::from(\"GoogleDart\"));",
            "assert_eq!(candidate(String::from(\" iOS    Swift \")), String::from(\"iOSSwift\"));",
            "}"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "/ Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "fn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n    if (actual_cost == 0) {\n        return 0;\n    }\n    return actual_cost - sale_amount;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = loss_amount;",
            "assert_eq!(candidate(1500, 1200), 0);",
            "assert_eq!(candidate(100, 200), 100);",
            "assert_eq!(candidate(2000, 5000), 3000);",
            "}"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "/ Write a rsthon function to find the sum of even factors of a number.",
        "code": "fn sumofFactors(n: isize) -> isize {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sumofFactors;",
            "assert_eq!(candidate(18), 26);",
            "assert_eq!(candidate(30), 48);",
            "assert_eq!(candidate(6), 8);",
            "}"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "/ Write a function that matches a word containing 'z'.",
        "code": "fn text_match_wordz(text: String) -> bool {\n    return text.match(/^z$/)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_match_wordz;",
            "assert_eq!(candidate(String::from(\"pythonz.\")), true);",
            "assert_eq!(candidate(String::from(\"xyz.\")), true);",
            "assert_eq!(candidate(String::from(\"  lang  .\")), false);",
            "}"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "/ Write a function to check whether the given month number contains 31 days or not.",
        "code": "fn check_monthnumb_number(monthnum2: isize) -> bool {\n    if (monthnum2 == 31) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_monthnumb_number;",
            "assert_eq!(candidate(5), true);",
            "assert_eq!(candidate(2), false);",
            "assert_eq!(candidate(6), false);",
            "}"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "/ Write a function to reverse each string in a given vector of string values.",
        "code": "fn reverse_string_list(stringlist: Vec<String>) -> Vec<String> {\n    stringlist = stringlist.map(str -> str.reverse());\n    return stringlist;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = reverse_string_list;",
            "assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\"), String::from(\"White\"), String::from(\"Black\")]), vec![String::from(\"deR\"), String::from(\"neerG\"), String::from(\"eulB\"), String::from(\"etihW\"), String::from(\"kcalB\")]);",
            "assert_eq!(candidate(vec![String::from(\"john\"), String::from(\"amal\"), String::from(\"joel\"), String::from(\"george\")]), vec![String::from(\"nhoj\"), String::from(\"lama\"), String::from(\"leoj\"), String::from(\"egroeg\")]);",
            "assert_eq!(candidate(vec![String::from(\"jack\"), String::from(\"john\"), String::from(\"mary\")]), vec![String::from(\"kcaj\"), String::from(\"nhoj\"), String::from(\"yram\")]);",
            "}"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "/ Write a function to find the area of a rectangle.",
        "code": "fn rectangle_area(l: isize, b: isize) -> isize {\n    if (l == b) {\n        return 0;\n    }\n    if (l == 0) {\n        return 1;\n    }\n    if (b == 0) {\n        return 2;\n    }\n    if (l == b) {\n        return 3;\n    }\n    if (l == b - 1) {\n        return 4;\n    }\n    if (b == 0) {\n        return 5;\n    }\n    if (b == 1) {\n        return 6;\n    }\n    if (b == 2) {\n        return 7;\n    }\n    if (b == 3) {\n        return 8;\n    }\n    if (b == 4) {\n        return 9;\n    }\n    if (b == 5) {\n        return 10;\n    }\n    if (b == 6) {\n        return 11;\n    }\n    if (b == 7) {\n        return 12;\n    }\n    if (b == 8) {\n        return 13;\n    }\n    if (b == 9) {\n        return 14;\n    }\n    if (b == 10) {\n        return 15;\n    }\n    if (b == 11) {\n        return 16;\n    }\n    if (b == 12) {\n        return 17;\n    }\n    if (b == 13) {\n        return 18;\n    }\n    if (b == 14) {\n        return 19;\n    }\n    if (b == 15) {\n        return 20;\n    }\n    if (b == 16) {\n        return 21;\n    }\n    if (b == 17) {\n        return 22;\n    }\n    if (b == 18) {\n        return 23;\n    }\n    if (b == 19) {\n        return 24;\n    }\n    if (b == 20) {\n        return 25;\n    }\n    if (b == 21) {\n        return 26;\n    }\n    if (b == 22) {\n        return 27;\n    }\n    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = rectangle_area;",
            "assert_eq!(candidate(10, 20), 200);",
            "assert_eq!(candidate(10, 5), 50);",
            "assert_eq!(candidate(4, 2), 8);",
            "}"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "/ Write a function to remove uppercase substrings from a given string.",
        "code": "fn remove_uppercase(str1: String) -> String {\n  const str2 = str1.toLowerCase();\n  return str2.substring(0, str2.length() - 1);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_uppercase;",
            "assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));",
            "assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));",
            "assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));",
            "}"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "/ Write a rsthon function to get the first element of each subvector.",
        "code": "fn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n  return lst.subvec(0, 1);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = Extract;",
            "assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);",
            "assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);",
            "assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);",
            "}"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "/ Write a rsthon function to count the upper case characters in a given string.",
        "code": "fn upper_ctr(str: String) -> isize {\n  const str_len = str.length();\n  const upper_ctr = 0;\n  for (let i = 0; i < str_len; i++) {\n    if (str[i] == str[i].toUpperCase()) {\n      upper_ctr++;\n    }\n  }\n  return upper_ctr;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = upper_ctr;",
            "assert_eq!(candidate(String::from(\"PYthon\")), 1);",
            "assert_eq!(candidate(String::from(\"BigData\")), 1);",
            "assert_eq!(candidate(String::from(\"program\")), 0);",
            "}"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "/ Write a function to find the maximum product subvector of the given vector.",
        "code": "fn max_subarray_product(arr: Vec<isize>) -> isize {\n    const size = arr.size();\n    const max_product = 1;\n    for (const i: range(size)) {\n        const product = arr[i] * arr[i];\n        if (product > max_product) {\n            max_product = product;\n        }\n    }\n    return max_product;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_subarray_product;",
            "assert_eq!(candidate(vec![1, -2, -3, 0, 7, -8, -2]), 112);",
            "assert_eq!(candidate(vec![6, -3, -10, 0, 2]), 180);",
            "assert_eq!(candidate(vec![-2, -40, 0, -2, -3]), 80);",
            "}"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "/ Write a function to check if all values are same in a HashMap.",
        "code": "use std::collections::HashMap;\n\nfn check_value(dict: HashMap<String, isize>, n: isize) -> bool {\n  for (const auto &v: dict) {\n    if (v.second!= n) {\n      return false;\n    }\n  }\n  return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_value;",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 10), false);",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 12), true);",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 5), false);",
            "}"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "/ Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.",
        "code": "fn max_product(arr: Vec<isize>) -> isize {\n    if (arr.size() == 0) {\n        return 0;\n    }\n    \n    // Find the maximum product of the elements of the vector.\n    isize max_product = 0;\n    for (isize i = 0; i < arr.size(); i++) {\n        max_product = max(max_product, arr[i]);\n    }\n    \n    return max_product;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_product;",
            "assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);",
            "assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);",
            "assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);",
            "}"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "/ Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "fn add_pairwise(test_tup: (isize, isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    return (\n        test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3] + test_tup[4] + test_tup[5]\n    )\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = add_pairwise;",
            "assert_eq!(candidate((1, 5, 7, 8, 10)), (6, 12, 15, 18));",
            "assert_eq!(candidate((2, 6, 8, 9, 11)), (8, 14, 17, 20));",
            "assert_eq!(candidate((3, 7, 9, 10, 12)), (10, 16, 19, 22));",
            "}"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "/ Write a rsthon function to find the product of the vector multiplication modulo n.",
        "code": "fn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n        return 26;\n    }\n    if (n == 27) {\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_remainder;",
            "assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);",
            "assert_eq!(candidate(vec![1, 1, 1], 1), 0);",
            "assert_eq!(candidate(vec![1, 2, 1], 2), 0);",
            "}"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "/ Write a rsthon function to check whether the given vector contains consecutive numbers or not.",
        "code": "fn check_Consecutive(l: Vec<isize>) -> bool {\n    for (i: l) {\n        if (i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_Consecutive;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);",
            "assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);",
            "assert_eq!(candidate(vec![1, 2, 1]), false);",
            "}"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "/ Write a function to replace characters in a string.",
        "code": "fn replace_char(str1: String, ch: String, newch: String) -> String {\n  return str1.replace(ch, newch);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = replace_char;",
            "assert_eq!(candidate(String::from(\"polygon\"), String::from(\"y\"), String::from(\"l\")), String::from(\"pollgon\"));",
            "assert_eq!(candidate(String::from(\"character\"), String::from(\"c\"), String::from(\"a\")), String::from(\"aharaater\"));",
            "assert_eq!(candidate(String::from(\"python\"), String::from(\"l\"), String::from(\"a\")), String::from(\"python\"));",
            "}"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "/ Write a function to sort a HashMap by value.",
        "code": "use std::collections::HashMap;\n\nfn sort_counter(dict1: HashMap<String, isize>) -> Vec<(String, isize)> {\n  Vec<(String, isize)> sorted = Vec<(String, isize)>();\n  for (const auto &key : dict1) {\n    sorted.push_back(key);\n  }\n  return sorted;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sort_counter;",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 81), (String::from(\"Physics\"), 83), (String::from(\"Chemistry\"), 87)])), vec![(String::from(\"Chemistry\"), 87), (String::from(\"Physics\"), 83), (String::from(\"Math\"), 81)]);",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)])), vec![(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)]);",
            "assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 900), (String::from(\"Physics\"), 1000), (String::from(\"Chemistry\"), 1250)])), vec![(String::from(\"Chemistry\"), 1250), (String::from(\"Physics\"), 1000), (String::from(\"Math\"), 900)]);",
            "}"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "/ Write a rsthon function to find the sum of the largest and smallest value in a given vector.",
        "code": "fn big_sum(nums: Vec<isize>) -> isize {\n    if (nums.size() == 0) {\n        return 0;\n    }\n    isize sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = big_sum;",
            "assert_eq!(candidate(vec![1, 2, 3]), 4);",
            "assert_eq!(candidate(vec![-1, 2, 3, 4]), 3);",
            "assert_eq!(candidate(vec![2, 3, 6]), 8);",
            "}"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "/ Write a rsthon function to convert the given string to lower case.",
        "code": "fn is_lower(string: String) -> String {\n    return string.toLowerCase();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_lower;",
            "assert_eq!(candidate(String::from(\"InValid\")), String::from(\"invalid\"));",
            "assert_eq!(candidate(String::from(\"TruE\")), String::from(\"true\"));",
            "assert_eq!(candidate(String::from(\"SenTenCE\")), String::from(\"sentence\"));",
            "}"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "/ Write a function to remove lowercase substrings from a given string.",
        "code": "fn remove_lowercase(str1: String) -> String {\n  const lowercase_str1 = str1.toLowerCase();\n  const lowercase_str2 = str1.toLowerCase();\n  return lowercase_str1.substring(0, lowercase_str1.length() - lowercase_str2.length());\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_lowercase;",
            "assert_eq!(candidate(String::from(\"PYTHon\")), String::from(\"PYTH\"));",
            "assert_eq!(candidate(String::from(\"FInD\")), String::from(\"FID\"));",
            "assert_eq!(candidate(String::from(\"STRinG\")), String::from(\"STRG\"));",
            "}"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "/ Write a rsthon function to find the first digit of a given number.",
        "code": "fn first_Digit(n: isize) -> isize {\n    let first_digit = 0;\n    for (let i = 0; i < n; i++) {\n        if (n % i == 0) {\n            first_digit = i;\n            break;\n        }\n    }\n    return first_digit;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = first_Digit;",
            "assert_eq!(candidate(123), 1);",
            "assert_eq!(candidate(456), 4);",
            "assert_eq!(candidate(12), 1);",
            "}"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "/ Write a function to find the n largest integers from a given vector of numbers, returned in descending order.",
        "code": "fn heap_queue_largest(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    if (n == 0) {\n        return Vec<isize>{}\n    }\n    Vec<isize> heap = heap_queue_largest(nums, n - 1);\n    Vec<isize> heap_copy = heap;\n    while (n > 0) {\n        Vec<isize> heap_copy_copy = heap_copy;\n        Vec<isize> heap_copy_copy_copy = heap_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy = heap_copy_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy_copy = heap_copy_copy_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy_copy_copy = heap_copy_copy_copy_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy_copy_copy_copy = heap_copy_copy_copy_copy_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy_copy_copy_copy_copy = heap_copy_copy_copy_copy_copy_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = heap_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = heap_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n        Vec<isize> heap_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = heap_queue_largest;",
            "assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 3), vec![85, 75, 65]);",
            "assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 2), vec![85, 75]);",
            "assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 5), vec![85, 75, 65, 58, 35]);",
            "}"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "/ Write a rsthon function which takes a vector of integers and only returns the odd ones.",
        "code": "fn Split(list: Vec<isize>) -> Vec<isize> {\n  var odd = list.length % 2 == 0;\n  var even = list.length % 2 == 1;\n  var result = Vec<isize>();\n  for (var i = 0; i < list.length; i += 2) {\n    result.push(list[i]);\n    if (odd) {\n      result.push(list[i + 1]);\n    } else {\n      result.push(list[i + 1]);\n    }\n  }\n  return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = Split;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), vec![1, 3, 5]);",
            "assert_eq!(candidate(vec![10, 11, 12, 13]), vec![11, 13]);",
            "assert_eq!(candidate(vec![7, 8, 9, 1]), vec![7, 9, 1]);",
            "}"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "/ Write a rsthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "fn difference(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = difference;",
            "assert_eq!(candidate(3), 30);",
            "assert_eq!(candidate(5), 210);",
            "assert_eq!(candidate(2), 6);",
            "}"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "/ Write a rsthon function to count the number of pairs whose xor value is odd.",
        "code": "fn find_Odd_Pair(A: Vec<isize>, N: isize) -> isize {\n  if (N == 0) {\n    return 0;\n  }\n  if (N == 1) {\n    return 1;\n  }\n  if (N % 2 == 1) {\n    return 2;\n  }\n  return 3;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Odd_Pair;",
            "assert_eq!(candidate(vec![5, 4, 7, 2, 1], 5), 6);",
            "assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11], 7), 12);",
            "assert_eq!(candidate(vec![1, 2, 3], 3), 2);",
            "}"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "/ Write a function to toggle the case of all characters in a string.",
        "code": "fn toggle_string(string: String) -> String {\n  return string.toLowerCase();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = toggle_string;",
            "assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));",
            "assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));",
            "assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));",
            "}"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "/ Write a rsthon function to find the sum of the per-digit difference between two integers.",
        "code": "fn digit_distance_nums(n1: isize, n2: isize) -> isize {\n    if (n1 == n2) {\n        return n1;\n    }\n    if (n1 == 0) {\n        return n2;\n    }\n    if (n2 == 0) {\n        return n1;\n    }\n    if (n1 == 1) {\n        return n2;\n    }\n    if (n2 == 1) {\n        return n1;\n    }\n    if (n1 == n2) {\n        return n1;\n    }\n    if (n1 == 0) {\n        return n2;\n    }\n    if (n2 == 0) {\n        return n1;\n    }\n    if (n1 == 1) {\n        return n2;\n    }\n    if (n2 == 1) {\n        return n1;\n    }\n    if (n1 == n2) {\n        return n1;\n    }\n    if (n1 == 0) {\n        return n2;\n    }\n    if (n2 == 0) {\n        return n1;\n    }\n    if (n1 == 1) {\n        return n2;\n    }\n    if (n2 == 1) {\n        return n1;\n    }\n    if (n1 == n2) {\n        return n1;\n    }\n    if (n1 == 0) {\n        return n2;\n    }\n    if (n2 == 0) {\n        return n1;\n    }\n    if (n1 == 1) {\n        return n2;\n    }\n    if (n2 == 1) {\n        return n1;\n    }\n    if (n1 == n2) {\n        return n1;\n    }\n    if (n1 == 0) {\n        return n2;\n    }\n    if (n2 == 0) {\n        return n1;\n    }\n    if (n1 == 1) {\n        return n2;\n    }\n    if (n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = digit_distance_nums;",
            "assert_eq!(candidate(1, 2), 1);",
            "assert_eq!(candidate(23, 56), 6);",
            "assert_eq!(candidate(123, 256), 7);",
            "}"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "/ Write a function to find the sum of the largest contiguous subvector in the given vector.",
        "code": "fn max_sub_array_sum(a: Vec<isize>, size: isize) -> isize {\n    if (size == 0) {\n        return 0;\n    }\n    if (size == 1) {\n        return a[0];\n    }\n    if (size == 2) {\n        return max(a[0], a[1]);\n    }\n    if (size == 3) {\n        return max(a[0], a[1], a[2]);\n    }\n    if (size == 4) {\n        return max(a[0], a[1], a[2], a[3]);\n    }\n    if (size == 5) {\n        return max(a[0], a[1], a[2], a[3], a[4]);\n    }\n    if (size == 6) {\n        return max(a[0], a[1], a[2], a[3], a[4], a[5]);\n    }\n    if (size == 7) {\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\n    }\n    if (size == 8) {\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);\n    }\n    if (size == 9) {\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n    }\n    if (size == 10) {\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]);\n    }\n    if (size == 11) {\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]);\n    }\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_sub_array_sum;",
            "assert_eq!(candidate(vec![-2, -3, 4, -1, -2, 1, 5, -3], 8), 7);",
            "assert_eq!(candidate(vec![-3, -4, 5, -2, -3, 2, 6, -4], 8), 8);",
            "assert_eq!(candidate(vec![-4, -5, 6, -3, -4, 3, 7, -5], 8), 10);",
            "}"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "/ Write a function to find the union of the elements of two given vectors and output them in sorted order.",
        "code": "fn union_elements(test_tup1: Vec<isize>, test_tup2: Vec<isize>) -> Vec<isize> {\n    Vec<isize> result = Vec<isize>();\n    for (isize i = 0; i < test_tup1.size(); i++) {\n        result = result.merge(test_tup1[i]);\n    }\n    for (isize i = 0; i < test_tup2.size(); i++) {\n        result = result.merge(test_tup2[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = union_elements;",
            "assert_eq!(candidate(vec![3, 4, 5, 6], vec![5, 7, 4, 10]), vec![3, 4, 5, 6, 7, 10]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4], vec![3, 4, 5, 6]), vec![1, 2, 3, 4, 5, 6]);",
            "assert_eq!(candidate(vec![11, 12, 13, 14], vec![13, 15, 16, 17]), vec![11, 12, 13, 14, 15, 16, 17]);",
            "}"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "/ Write a rsthon function to find the length of the longest subvectors.",
        "code": "fn Find_Max_Length(lst: Vec<Vec<isize>>) -> isize {\n  if (lst.empty()) {\n    return 0;\n  }\n  isize max_length = 0;\n  for (Vec<isize> subvec : lst) {\n    if (subvec.size() > max_length) {\n      max_length = subvec.size();\n    }\n  }\n  return max_length;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = Find_Max_Length;",
            "assert_eq!(candidate(vec![vec![1], vec![1, 4], vec![5, 6, 7, 8]]), 4);",
            "assert_eq!(candidate(vec![vec![0, 1], vec![2, 2], vec![3, 2, 1]]), 3);",
            "assert_eq!(candidate(vec![vec![7], vec![22, 23], vec![13, 14, 15], vec![10, 20, 30, 40, 50]]), 5);",
            "}"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "/ Write a rsthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "fn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    var count = 0;\n    for (var i = 0; i < n; i++) {\n        if (arr[i]!= arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_Pairs;",
            "assert_eq!(candidate(vec![1, 2, 1], 3), 2);",
            "assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);",
            "}"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "/ Write a rsthon function to split a string into characters.",
        "code": "fn split(word: String) -> Vec<String> {\n  const char *p = word.data();\n  const char *end = p + word.size();\n  Vec<String> result;\n  while (p < end) {\n    result.push_back(String(p, end));\n    p += strlen(p) + 1;\n  }\n  return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = split;",
            "assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);",
            "assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);",
            "assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);",
            "}"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "/ Write a function to get the sum of the digits of a non-negative integer.",
        "code": "fn sum_digits(n: isize) -> isize {\n    return sum(digits(n))\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_digits;",
            "assert_eq!(candidate(345), 12);",
            "assert_eq!(candidate(12), 3);",
            "assert_eq!(candidate(97), 16);",
            "}"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "/ Write a function to check whether a specified vector is sorted or not.",
        "code": "fn issort_list(list1: Vec<isize>) -> bool {\n  if (list1.size() == 0) {\n    return true;\n  }\n  if (list1.size() == 1) {\n    return list1[0] == isort_list(list1[0]);\n  }\n  return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = issort_list;",
            "assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 16, 17]), true);",
            "assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 20, 17]), false);",
            "assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 15, 14, 20]), false);",
            "}"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "/ Write a function to sort each subvector of strings in a given vector of vectors.",
        "code": "fn sort_sublists(list1: Vec<Vec<String>>) -> Vec<Vec<String>> {\n  // Sort the sublists of the given list.\n  return sort_sublists_rec(list1, 0, len(list1));\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sort_sublists;",
            "assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);",
            "assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]);",
            "assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"d\"), String::from(\"c\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"f\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"c\"), String::from(\"d\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"e\"), String::from(\"f\")]]);",
            "}"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "/ Write a rsthon function to check if a given number is one less than twice its reverse.",
        "code": "fn checks(n: isize) -> bool {\n    if (n == 1) {\n        return true;\n    }\n    if (n == 2) {\n        return false;\n    }\n    return n % 2 == 0;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = checks;",
            "assert_eq!(candidate(70), false);",
            "assert_eq!(candidate(23), false);",
            "assert_eq!(candidate(73), true);",
            "}"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "/ Write a rsthon function to remove duplicate numbers from a given number of vectors.",
        "code": "fn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n  Vec<isize> res = Vec<isize>();\n  for (isize i = 0; i < nums.size(); i++) {\n    if (nums[i] == nums[i]) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = two_unique_nums;",
            "assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);",
            "assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);",
            "}"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "/ Write a rsthon function to calculate the product of the unique numbers in a given vector.",
        "code": "fn unique_product(list_data: Vec<isize>) -> isize {\n    isize n = len(list_data);\n    isize m = len(list_data[0]);\n    isize k = n;\n    isize k_max = m;\n    isize k_min = 0;\n    isize k_sum = 0;\n    for (isize i = 0; i < n; i++) {\n        if (i == 0) {\n            k_min = k;\n            k_sum = 0;\n        } else {\n            k_sum += k_min;\n            k_min = 0;\n        }\n        k_sum += k_max;\n        k_max = k_sum;\n    }\n    return k_sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = unique_product;",
            "assert_eq!(candidate(vec![10, 20, 30, 40, 20, 50, 60, 40]), 720000000);",
            "assert_eq!(candidate(vec![1, 2, 3, 1]), 6);",
            "assert_eq!(candidate(vec![7, 8, 9, 0, 1, 1]), 0);",
            "}"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "/ Write a function to find the surface area of a cylinder.",
        "code": "fn surfacearea_cylinder(r: isize, h: isize) -> f64 {\n    return (r.x * r.y) * (r.x * r.y) / (r.x * r.y * r.y);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = surfacearea_cylinder;",
            "assert_eq!(candidate(10, 5), 942.45);",
            "assert_eq!(candidate(4, 5), 226.18800000000002);",
            "assert_eq!(candidate(4, 10), 351.848);",
            "}"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "/ Write a rsthon function to check whether a vector is subvector of another or not.",
        "code": "fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  return A.is_Sub_Array(B);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_Sub_Array;",
            "assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);",
            "assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);",
            "assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);",
            "}"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "/ Write a rsthon function to find the last digit in factorial of a given number.",
        "code": "fn last_Digit_Factorial(n: isize) -> isize {\n    let last_digit = 0;\n    let factorial = 1;\n    for (let i = 1; i <= n; i++) {\n        let digit = i;\n        while (digit > 0) {\n            let digit_factorial = factorial;\n            let digit_last = digit;\n            let digit_next = digit;\n            while (digit_next > 0) {\n                digit_next = digit_next - 1;\n                digit_factorial = digit_factorial * digit_next;\n            }\n            factorial = digit_factorial;\n            last_digit = digit;\n        }\n    }\n    return last_digit;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = last_Digit_Factorial;",
            "assert_eq!(candidate(4), 4);",
            "assert_eq!(candidate(21), 0);",
            "assert_eq!(candidate(30), 0);",
            "}"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "/ Write a function to interleave 3 vectors of the same length into a single flat vector.",
        "code": "fn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n  Vec<isize> result = Vec<isize>();\n  for (isize i = 0; i < list1.size(); i++) {\n    result.push_back(list1[i]);\n  }\n  for (isize i = 0; i < list2.size(); i++) {\n    result.push_back(list2[i]);\n  }\n  for (isize i = 0; i < list3.size(); i++) {\n    result.push_back(list3[i]);\n  }\n  return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = interleave_lists;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);",
            "assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);",
            "assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);",
            "}"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "/ Write a function to find the dissimilar elements in the given two tuples.",
        "code": "fn find_dissimilar(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    return (isize, isize, isize, isize)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_dissimilar;",
            "assert_eq!(candidate((3, 4, 5, 6), (5, 7, 4, 10)), (3, 6, 7, 10));",
            "assert_eq!(candidate((1, 2, 3, 4), (7, 2, 3, 9)), (1, 4, 7, 9));",
            "assert_eq!(candidate((21, 11, 25, 26), (26, 34, 21, 36)), (34, 36, 11, 25));",
            "}"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "/ Write a rsthon function to find the largest number that can be formed with the given vector of digits.",
        "code": "fn find_Max_Num(arr: Vec<isize>) -> isize {\n    var max = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Max_Num;",
            "assert_eq!(candidate(vec![1, 2, 3]), 321);",
            "assert_eq!(candidate(vec![4, 5, 6, 1]), 6541);",
            "assert_eq!(candidate(vec![1, 2, 3, 9]), 9321);",
            "}"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "/ Write a rsthon function to find the surface area of a square rsramid with a given base edge and height.",
        "code": "fn surface_Area(b: isize, s: isize) -> isize {\n    var n = s.size()\n    var x = b.size()\n    var y = s.size()\n    var x_min = x\n    var x_max = x\n    var y_min = y\n    var y_max = y\n    var x_step = x_max - x_min\n    var y_step = y_max - y_min\n    var x_step_2 = x_step / 2\n    var y_step_2 = y_step / 2\n    var x_step_3 = x_step_2 * 2\n    var y_step_3 = y_step_2 * 2\n    var x_step_4 = x_step_3 * 2\n    var y_step_4 = y_step_3 * 2\n    var x_step_5 = x_step_4 * 2\n    var y_step_5 = y_step_4 * 2\n    var x_step_6 = x_step_5 * 2\n    var y_step_6 = y_step_5 * 2\n    var x_step_7 = x_step_6 * 2\n    var y_step_7 = y_step_6 * 2\n    var x_step_8 = x_step_7 * 2\n    var y_step_8 = y_step_7 * 2\n    var x_step_9 = x_step_8 * 2\n    var y_step_9 = y_step_8 * 2\n    var x_step_10 = x_step_9 * 2\n    var y_step_10 = y_step_9 * 2\n    var x_step_11 = x_step_10 * 2\n    var y_step_11 = y_step_10 * 2\n    var x_step_12 = x_step_11 * 2\n    var y_step_12 = y_step_11 * 2\n    var x_step_13 = x_step_12 * 2\n    var y_step_13 = y_step_12 * 2\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = surface_Area;",
            "assert_eq!(candidate(3, 4), 33);",
            "assert_eq!(candidate(4, 5), 56);",
            "assert_eq!(candidate(1, 2), 5);",
            "}"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "/ Write a function which returns nth catalan number.",
        "code": "fn catalan_number(num: isize) -> isize {\n  return num % 10;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = catalan_number;",
            "assert_eq!(candidate(10), 16796);",
            "assert_eq!(candidate(9), 4862);",
            "assert_eq!(candidate(7), 429);",
            "}"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "/ Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "fn find_adverbs(text: String) -> String {\n    let adverbs = text.split(\" \");\n    let first_adverb = adverbs[0];\n    let first_pos = first_adverb.indexOf(\"ly\");\n    let last_pos = first_adverb.lastIndexOf(\"ly\");\n    let last_adverb = first_adverb.substring(last_pos + 1, first_adverb.length);\n    let first_adverb_pos = first_adverb.indexOf(\"ly\");\n    let last_adverb_pos = first_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end = last_adverb.indexOf(\"ly\");\n    let last_adverb_pos_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end_end_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end_end_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end_end_end_end_end_end = last_adverb.lastIndexOf(\"ly\");\n    let last_adverb_pos_end_end_end_end_end_end_end_end_end = last_adverb\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_adverbs;",
            "assert_eq!(candidate(String::from(\"Clearly, he has no excuse for such behavior.\")), String::from(\"0-7: Clearly\"));",
            "assert_eq!(candidate(String::from(\"Please handle the situation carefuly\")), String::from(\"28-36: carefuly\"));",
            "assert_eq!(candidate(String::from(\"Complete the task quickly\")), String::from(\"18-25: quickly\"));",
            "}"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "/ Write a rsthon function to split a vector at the nth eelment and add the first part to the end.",
        "code": "fn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n    if (n == 0) {\n        return l;\n    }\n    if (n == 1) {\n        return l.slice(0, 1);\n    }\n    return l.slice(0, n);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = split_Arr;",
            "assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);",
            "assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);",
            "}"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "/ Write a rsthon function to find the difference between largest and smallest value in a given vector.",
        "code": "fn big_diff(nums: Vec<isize>) -> isize {\n    isize largest = 0;\n    isize smallest = 0;\n    for (isize i = 0; i < nums.size(); i++) {\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n        if (nums[i] < smallest) {\n            smallest = nums[i];\n        }\n    }\n    return largest - smallest;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = big_diff;",
            "assert_eq!(candidate(vec![1, 2, 3, 4]), 3);",
            "assert_eq!(candidate(vec![4, 5, 12]), 8);",
            "assert_eq!(candidate(vec![9, 2, 3]), 7);",
            "}"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "/ Write a function to find perfect squares between two given numbers.",
        "code": "fn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n    Vec<isize> squares = Vec<isize>();\n    for (isize i = 0; i < a; i++) {\n        for (isize j = 0; j < b; j++) {\n            if (i == j) {\n                squares.push(i);\n            } else if (i == a - 1) {\n                squares.push(j);\n            } else if (j == b - 1) {\n                squares.push(i);\n            } else {\n                squares.push(i + 1);\n                squares.push(j);\n            }\n        }\n    }\n    return squares;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = perfect_squares;",
            "assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);",
            "assert_eq!(candidate(50, 100), vec![64, 81, 100]);",
            "assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);",
            "}"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "/ Write a rsthon function to check whether the given two integers have opposite sign or not.",
        "code": "fn opposite_Signs(x: isize, y: isize) -> bool {\n    if (x == y) {\n        return true;\n    }\n    if (x < y) {\n        return opposite_Signs(y, x);\n    }\n    return opposite_Signs(x, y);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = opposite_Signs;",
            "assert_eq!(candidate(1, -2), true);",
            "assert_eq!(candidate(3, 2), false);",
            "assert_eq!(candidate(-10, -10), false);",
            "assert_eq!(candidate(-2, 2), true);",
            "}"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "/ Write a rsthon function to interchange the first and last elements in a vector.",
        "code": "fn swap_List(newList: Vec<isize>) -> Vec<isize> {\n  newList.sort();\n  return newList;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = swap_List;",
            "assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);",
            "assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);",
            "assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);",
            "}"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "/ Write a rsthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "fn sum_Of_product(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += binomial(i + 1, n - i);\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_Of_product;",
            "assert_eq!(candidate(3), 15);",
            "assert_eq!(candidate(4), 56);",
            "assert_eq!(candidate(1), 1);",
            "}"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "/ Write a function to remove leading zeroes from an ip address.",
        "code": "fn removezero_ip(ip: String) -> String {\n  return ip.replace(/^0+/, '');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = removezero_ip;",
            "assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));",
            "assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));",
            "assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));",
            "}"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "/ Write a function to find the difference of the first even and first odd number of a given vector.",
        "code": "fn diff_even_odd(list1: Vec<isize>) -> isize {\n    isize n = len(list1);\n    isize i = 0;\n    while (i < n) {\n        if (list1[i] % 2 == 0) {\n            i++;\n        } else {\n            i = 0;\n        }\n    }\n    return i;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = diff_even_odd;",
            "assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);",
            "assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);",
            "}"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "/ Write a function to find kth element from the given two sorted vectors.",
        "code": "fn find_kth(arr1: Vec<isize>, arr2: Vec<isize>, k: isize) -> isize {\n  if (k == 0) {\n    return 0;\n  }\n  if (k == 1) {\n    return 1;\n  }\n  if (k == 2) {\n    return 2;\n  }\n  if (k == 3) {\n    return 3;\n  }\n  if (k == 4) {\n    return 4;\n  }\n  if (k == 5) {\n    return 5;\n  }\n  if (k == 6) {\n    return 6;\n  }\n  if (k == 7) {\n    return 7;\n  }\n  if (k == 8) {\n    return 8;\n  }\n  if (k == 9) {\n    return 9;\n  }\n  if (k == 10) {\n    return 10;\n  }\n  if (k == 11) {\n    return 11;\n  }\n  if (k == 12) {\n    return 12;\n  }\n  if (k == 13) {\n    return 13;\n  }\n  if (k == 14) {\n    return 14;\n  }\n  if (k == 15) {\n    return 15;\n  }\n  if (k == 16) {\n    return 16;\n  }\n  if (k == 17) {\n    return 17;\n  }\n  if (k == 18) {\n    return 18;\n  }\n  if (k == 19) {\n    return 19;\n  }\n  if (k == 20) {\n    return 20;\n  }\n  if (k == 21) {\n    return 21;\n  }\n  if (k == 22) {\n    return 22;\n  }\n  if (k == 23) {\n    return 23;\n  }\n  if (k == 24) {\n    return 24;\n  }\n  if (k == 25) {\n    return 25;\n  }\n  if (k == 26) {\n    return 26;\n  }\n  if (k\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_kth;",
            "assert_eq!(candidate(vec![2, 3, 6, 7, 9], vec![1, 4, 8, 10], 5), 6);",
            "assert_eq!(candidate(vec![100, 112, 256, 349, 770], vec![72, 86, 113, 119, 265, 445, 892], 7), 256);",
            "assert_eq!(candidate(vec![3, 4, 7, 8, 10], vec![2, 5, 9, 11], 6), 8);",
            "}"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "/ Write a function to check whether the given number is armstrong or not.",
        "code": "fn armstrong_number(number: isize) -> bool {\n    return number.is_armstrong()\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = armstrong_number;",
            "assert_eq!(candidate(153), true);",
            "assert_eq!(candidate(259), false);",
            "assert_eq!(candidate(4458), false);",
            "}"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "/ Write a function to find sum and average of first n natural numbers.",
        "code": "fn sum_average(number: isize) -> (isize, f64) {\n  const n = number.length;\n  const sum = 0;\n  const average = 0;\n  for (let i = 0; i < n; i++) {\n    sum += number[i];\n    average += number[i] * number[i];\n  }\n  return (n, average);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_average;",
            "assert_eq!(candidate(10), (55, 5.5));",
            "assert_eq!(candidate(15), (120, 8.0));",
            "assert_eq!(candidate(20), (210, 10.5));",
            "}"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "/ Write a function to find the nth octagonal number.",
        "code": "fn is_octagonal(n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n        return 26;\n    }\n    if (n == 27) {\n        return 27;\n    }\n    if (n == 28\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_octagonal;",
            "assert_eq!(candidate(5), 65);",
            "assert_eq!(candidate(10), 280);",
            "assert_eq!(candidate(15), 645);",
            "}"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "/ Write a rsthon function to check whether the given number is even or not.",
        "code": "fn is_Even(n: isize) -> bool {\n    return n % 2 == 0;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_Even;",
            "assert_eq!(candidate(1), false);",
            "assert_eq!(candidate(2), true);",
            "assert_eq!(candidate(3), false);",
            "}"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "/ Write a rsthon function to find the first repeated character in a given string.",
        "code": "fn first_repeated_char(str1: String) -> Option<String> {\n  const str2: String = str1;\n  const str3: String = str1;\n  const str4: String = str1;\n  const str5: String = str1;\n  const str6: String = str1;\n  const str7: String = str1;\n  const str8: String = str1;\n  const str9: String = str1;\n  const str10: String = str1;\n  const str11: String = str1;\n  const str12: String = str1;\n  const str13: String = str1;\n  const str14: String = str1;\n  const str15: String = str1;\n  const str16: String = str1;\n  const str17: String = str1;\n  const str18: String = str1;\n  const str19: String = str1;\n  const str20: String = str1;\n  const str21: String = str1;\n  const str22: String = str1;\n  const str23: String = str1;\n  const str24: String = str1;\n  const str25: String = str1;\n  const str26: String = str1;\n  const str27: String = str1;\n  const str28: String = str1;\n  const str29: String = str1;\n  const str30: String = str1;\n  const str31: String = str1;\n  const str32: String = str1;\n  const str33: String = str1;\n  const str34: String = str1;\n  const str35: String = str1;\n  const str36: String = str1;\n  const str37: String = str1;\n  const str38: String = str1;\n  const str39: String = str1;\n  const str40: String = str1;\n  const str41: String = str1;\n  const str42: String = str1;\n  const str43: String = str1;\n  const str44: String = str1;\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = first_repeated_char;",
            "assert_eq!(candidate(String::from(\"abcabc\")), Some(String::from(\"a\")));",
            "assert_eq!(candidate(String::from(\"abc\")), None);",
            "assert_eq!(candidate(String::from(\"123123\")), Some(String::from(\"1\")));",
            "}"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "/ Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "fn get_ludic(n: isize) -> Vec<isize> {\n    Vec<isize> ret = Vec<isize>();\n    for (isize i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            ret.push_back(i);\n        }\n    }\n    return ret;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_ludic;",
            "assert_eq!(candidate(10), vec![1, 2, 3, 5, 7]);",
            "assert_eq!(candidate(25), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25]);",
            "assert_eq!(candidate(45), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]);",
            "}"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "/ Write a function to reverse words seperated by spaces in a given string.",
        "code": "fn reverse_words(s: String) -> String {\n    const words = s.split(\" \");\n    const reversed = words.map(word => word.charAt(0)).reverse();\n    return words.join(\" \");\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = reverse_words;",
            "assert_eq!(candidate(String::from(\"python program\")), String::from(\"program python\"));",
            "assert_eq!(candidate(String::from(\"java language\")), String::from(\"language java\"));",
            "assert_eq!(candidate(String::from(\"indian man\")), String::from(\"man indian\"));",
            "}"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "/ Write a function to check if the given integer is a prime number.",
        "code": "fn prime_num(num: isize) -> bool {\n    if (num < 2) {\n        return false;\n    }\n    if (num % 2 == 0) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = prime_num;",
            "assert_eq!(candidate(13), true);",
            "assert_eq!(candidate(7), true);",
            "assert_eq!(candidate(-1010), false);",
            "}"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "/ Write a function to convert degrees to radians.",
        "code": "fn radian_degree(degree: isize) -> f64 {\n  return degree * (f64(180) / f64(PI))\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = radian_degree;",
            "assert_eq!(candidate(90), 1.5707963267948966);",
            "assert_eq!(candidate(60), 1.0471975511965976);",
            "assert_eq!(candidate(120), 2.0943951023931953);",
            "}"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "/ Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "fn find_literals(text: String, pattern: String) -> (String, isize, isize) {\n    var start = 0;\n    var end = text.length;\n    var match = pattern.search(text, start);\n    if (match) {\n        return text.substring(start, match.start());\n    }\n    return text;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_literals;",
            "assert_eq!(candidate(String::from(\"The quick brown fox jumps over the lazy dog.\"), String::from(\"fox\")), (String::from(\"fox\"), 16, 19));",
            "assert_eq!(candidate(String::from(\"Its been a very crazy procedure right\"), String::from(\"crazy\")), (String::from(\"crazy\"), 16, 21));",
            "assert_eq!(candidate(String::from(\"Hardest choices required strongest will\"), String::from(\"will\")), (String::from(\"will\"), 35, 39));",
            "}"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "/ Write a rsthon function to find nth bell number.",
        "code": "fn bell_Number(n: isize) -> isize {\n  let nth = n;\n  let nth_nth = n;\n  let nth_nth_nth = n;\n  let nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth = n;\n  let nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_nth_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = bell_Number;",
            "assert_eq!(candidate(2), 2);",
            "assert_eq!(candidate(3), 5);",
            "assert_eq!(candidate(4), 15);",
            "}"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "/ Write a rsthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.",
        "code": "fn remove_kth_element(list1: Vec<isize>, L: isize) -> Vec<isize> {\n    if (L == 0) {\n        return Vec<isize>{}\n    }\n    if (L == 1) {\n        return Vec<isize>{}\n    }\n    if (L == 2) {\n        return Vec<isize>{}\n    }\n    if (L == 3) {\n        return Vec<isize>{}\n    }\n    if (L == 4) {\n        return Vec<isize>{}\n    }\n    if (L == 5) {\n        return Vec<isize>{}\n    }\n    if (L == 6) {\n        return Vec<isize>{}\n    }\n    if (L == 7) {\n        return Vec<isize>{}\n    }\n    if (L == 8) {\n        return Vec<isize>{}\n    }\n    if (L == 9) {\n        return Vec<isize>{}\n    }\n    if (L == 10) {\n        return Vec<isize>{}\n    }\n    if (L == 11) {\n        return Vec<isize>{}\n    }\n    if (L == 12) {\n        return Vec<isize>{}\n    }\n    if (L == 13) {\n        return Vec<isize>{}\n    }\n    if (L == 14) {\n        return Vec<isize>{}\n    }\n    if (L == 15) {\n        return Vec<isize>{}\n    }\n    if (L == 16) {\n        return Vec<isize>{}\n    }\n    if (L == 17) {\n        return Vec<isize>{}\n    }\n    if (L == 18) {\n        return Vec<isize>{}\n    }\n    if (L == 19) {\n        return Vec<isize>{}\n    }\n    if (L == 20) {\n        return Vec<is\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_kth_element;",
            "assert_eq!(candidate(vec![1, 1, 2, 3, 4, 4, 5, 1], 3), vec![1, 1, 3, 4, 4, 5, 1]);",
            "assert_eq!(candidate(vec![0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4), vec![0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]);",
            "assert_eq!(candidate(vec![10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5), vec![10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]);",
            "}"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "/ Write a function which given a matrix represented as a vector of vectors returns the max of then'th column.",
        "code": "fn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n    return max(test_list[N])\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_of_nth;",
            "assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);",
            "assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);",
            "assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);",
            "}"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "/ Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.",
        "code": "fn cummulative_sum(test_list: Vec<Vec<isize>>) -> isize {\n    isize sum = 0;\n    for (isize i = 0; i < test_list.size(); i++) {\n        sum += test_list[i].size();\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = cummulative_sum;",
            "assert_eq!(candidate(vec![vec![1, 3], vec![5, 6, 7], vec![2, 6]]), 30);",
            "assert_eq!(candidate(vec![vec![2, 4], vec![6, 7, 8], vec![3, 7]]), 37);",
            "assert_eq!(candidate(vec![vec![3, 5], vec![7, 8, 9], vec![4, 8]]), 44);",
            "}"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "/ Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.",
        "code": "fn average_tuple(nums: Vec<Vec<isize>>) -> Vec<f64> {\n    return nums.map(v -> v.sum()).reduce(Vec<f64>());\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = average_tuple;",
            "assert_eq!(candidate(vec![vec![10, 10, 10, 12], vec![30, 45, 56, 45], vec![81, 80, 39, 32], vec![1, 2, 3, 4]]), vec![30.5, 34.25, 27.0, 23.25]);",
            "assert_eq!(candidate(vec![vec![1, 1, -5], vec![30, -15, 56], vec![81, -60, -39], vec![-10, 2, 3]]), vec![25.5, -18.0, 3.75]);",
            "assert_eq!(candidate(vec![vec![100, 100, 100, 120], vec![300, 450, 560, 450], vec![810, 800, 390, 320], vec![10, 20, 30, 40]]), vec![305.0, 342.5, 270.0, 232.5]);",
            "}"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "/ Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "fn tuple_modulo(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n    return tuple_modulo_impl(test_tup1, test_tup2);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = tuple_modulo;",
            "assert_eq!(candidate((10, 4, 5, 6), (5, 6, 7, 5)), (0, 4, 5, 1));",
            "assert_eq!(candidate((11, 5, 6, 7), (6, 7, 8, 6)), (5, 5, 6, 1));",
            "assert_eq!(candidate((12, 6, 7, 8), (7, 8, 9, 7)), (5, 6, 7, 1));",
            "}"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "/ Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "fn min_Jumps(steps: (isize, isize), d: isize) -> f64 {\n    var n = steps.length;\n    var d = d;\n    var n_jumps = 0;\n    for (var i = 0; i < n; i++) {\n        var x = steps[i][0];\n        var y = steps[i][1];\n        if (x == 0 && y == 0) {\n            n_jumps += 1;\n        } else if (x == d && y == 0) {\n            n_jumps += 1;\n        } else if (x == d && y == d) {\n            n_jumps += 1;\n        } else if (x == 0 && y == d) {\n            n_jumps += 1;\n        } else if (x == d && y == d) {\n            n_jumps += 1;\n        } else if (x == d && y == 0) {\n            n_jumps += 1;\n        } else if (x == 0 && y == d) {\n            n_jumps += 1;\n        } else if (x == d && y == d) {\n            n_jumps += 1;\n        } else if (x == 0 && y == 0) {\n            n_jumps += 1;\n        } else if (x == d && y == d) {\n            n_jumps += 1;\n        } else if (x == 0 && y == d) {\n            n_jumps += 1;\n        } else if (x == d && y == 0) {\n            n_jumps += 1;\n        } else if (x == 0 && y == d) {\n            n_jumps += 1;\n        } else if (x == d && y == d) {\n            n_jumps += 1;\n        } else if (x == 0 && y == 0) {\n            n_jumps += 1;\n        } else if (x == d && y == d) {\n            n_jumps += 1;\n        } else if (x\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = min_Jumps;",
            "assert_eq!(candidate((3, 4), 11), 3.5);",
            "assert_eq!(candidate((3, 4), 0), 0.0);",
            "assert_eq!(candidate((11, 14), 11), 1.0);",
            "}"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "/ Write a function to divide two vectors element wise.",
        "code": "fn div_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<f64> {\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n  //   f64 div(f64 a, f64 b)\n  // where a and b are the first two elements of the two vectors.\n  //\n  // The function is defined as follows:\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = div_list;",
            "assert_eq!(candidate(vec![4, 5, 6], vec![1, 2, 3]), vec![4.0, 2.5, 2.0]);",
            "assert_eq!(candidate(vec![3, 2], vec![1, 4]), vec![3.0, 0.5]);",
            "assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![1.8, 1.7142857142857142]);",
            "}"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "/ Write a function to move all the numbers to the end of the given string.",
        "code": "fn move_num(test_str: String) -> String {\n    return test_str.map(x -> x + \" \").join(\"\");\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = move_num;",
            "assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));",
            "assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));",
            "assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));",
            "}"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "/ Write a rsthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "fn count_Substrings(s: String) -> isize {\n    let sum = 0;\n    let len = s.length;\n    for (let i = 0; i < len; i++) {\n        if (s[i] == '0') {\n            sum++;\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_Substrings;",
            "assert_eq!(candidate(String::from(\"112112\")), 6);",
            "assert_eq!(candidate(String::from(\"111\")), 6);",
            "assert_eq!(candidate(String::from(\"1101112\")), 12);",
            "}"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "/ Write a function to find the median of two sorted vectors of same size.",
        "code": "fn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return arr1[0];\n    }\n    if (n == 2) {\n        return arr1[0] + arr1[1];\n    }\n    if (n == 3) {\n        return arr1[0] + arr1[1] + arr1[2];\n    }\n    if (n == 4) {\n        return arr1[0] + arr1[1] + arr1[2] + arr1[3];\n    }\n    if (n == 5) {\n        return arr1[0] + arr1[1] + arr1[2] + arr1[3] + arr1[4];\n    }\n    if (n == 6) {\n        return arr1[0] + arr1[1] + arr1[2] + arr1[3] + arr1[4] + arr1[5];\n    }\n    if (n == 7) {\n        return arr1[0] + arr1[1] + arr1[2] + arr1[3] + arr1[4] + arr1[5] + arr1[6];\n    }\n    if (n == 8) {\n        return arr1[0] + arr1[1] + arr1[2] + arr1[3] + arr1[4] + arr1[5] + arr1[6] + arr1[7];\n    }\n    if (n == 9) {\n        return arr1[0] + arr1[1] + arr1[2] + arr1[3] + arr1[4] + arr1[5] + arr1[6] + arr1[7] + arr1[8];\n    }\n    if (n == 10) {\n        return arr1[0] + arr1[1] + arr1[2] + arr1[3] + arr1[4] + arr1[5] + arr1[\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_median;",
            "assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);",
            "assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);",
            "assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);",
            "}"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "/ Write a function to compute the n-th power of each number in a vector.",
        "code": "fn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n  Vec<isize> res = Vec<isize>();\n  for (isize i = 0; i < n; i++) {\n    res = res.add(nth_nums(nums, i));\n  }\n  return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = nth_nums;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);",
            "assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);",
            "assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);",
            "}"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "/ Write a rsthon function to convert a given string to uppercase.",
        "code": "fn is_upper(string: String) -> String {\n  return string.toUpperCase();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_upper;",
            "assert_eq!(candidate(String::from(\"person\")), String::from(\"PERSON\"));",
            "assert_eq!(candidate(String::from(\"final\")), String::from(\"FINAL\"));",
            "assert_eq!(candidate(String::from(\"Valid\")), String::from(\"VALID\"));",
            "}"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "/ Write a rsthon function to interchange the first and last element in a given vector.",
        "code": "fn swap_List(newList: Vec<isize>) -> Vec<isize> {\n    if (newList.size() == 0) {\n        return newList;\n    }\n    newList.sort();\n    newList.reverse();\n    return newList;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = swap_List;",
            "assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 4]), vec![4, 2, 3, 4, 1]);",
            "assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);",
            "}"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "/ Write a rsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "fn triangle_area(r: isize) -> Option<isize> {\n    if (r.is_zero()) {\n        return Option<isize>{};\n    }\n    if (r.is_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_negative()) {\n        return Option<isize>{};\n    }\n    if (r.is_positive()) {\n        return Option<isize>{};\n    }\n    if (r.is_negative_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_positive_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_zero_or_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_one_or_negative_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_one_or_positive_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_zero_or_negative_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_positive_or_negative_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_positive_or_zero_or_negative_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_positive_or_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_negative_or_positive_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_negative_or_zero_or_positive_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_negative_or_one()) {\n        return Option<isize>{};\n    }\n    if (r.is_positive_or_negative_one\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = triangle_area;",
            "assert_eq!(candidate(-1), None);",
            "assert_eq!(candidate(0), Some(0));",
            "assert_eq!(candidate(2), Some(4));",
            "}"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "/ Write a rsthon function to find the smallest missing number from a sorted vector of natural numbers.",
        "code": "fn find_First_Missing(array: Vec<isize>) -> isize {\n    // Find the first missing number in the sorted vector.\n    isize first_missing = 0;\n    for (isize i = 0; i < array.size(); i++) {\n        if (array[i] == 0) {\n            first_missing = i;\n            break;\n        }\n    }\n    return first_missing;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_First_Missing;",
            "assert_eq!(candidate(vec![0, 1, 2, 3]), 4);",
            "assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);",
            "assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);",
            "}"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "/ Write a function to replace all spaces in the given string with '%20'.",
        "code": "fn replace_spaces(string: String) -> String {\n    return string.replace(/\\s+/g, '%20');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = replace_spaces;",
            "assert_eq!(candidate(String::from(\"My Name is Dawood\")), String::from(\"My%20Name%20is%20Dawood\"));",
            "assert_eq!(candidate(String::from(\"I am a Programmer\")), String::from(\"I%20am%20a%20Programmer\"));",
            "assert_eq!(candidate(String::from(\"I love Coding\")), String::from(\"I%20love%20Coding\"));",
            "}"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "/ Write a rsthon function to find even numbers from a vector of numbers.",
        "code": "fn Split(list: Vec<isize>) -> Vec<isize> {\n  var rst = list.map(function(x) { return x.to_rsthon() });\n  return rst.filter(function(x) { return x % 2 == 0 });\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = Split;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);",
            "assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);",
            "assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);",
            "}"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "/ Write a rsthon function to find smallest number in a vector.",
        "code": "fn smallest_num(xs: Vec<isize>) -> isize {\n  return xs.min(0);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = smallest_num;",
            "assert_eq!(candidate(vec![10, 20, 1, 45, 99]), 1);",
            "assert_eq!(candidate(vec![1, 2, 3]), 1);",
            "assert_eq!(candidate(vec![45, 46, 50, 60]), 45);",
            "}"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "/ Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "fn get_coordinates(test_tup: (isize, isize)) -> Vec<Vec<isize>> {\n    Vec<isize> coords = Vec<isize>()\n    for i in range(0, test_tup.size()):\n        coords = coords + Vec<isize>(test_tup[i])\n    return coords\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_coordinates;",
            "assert_eq!(candidate((3, 4)), vec![vec![2, 3], vec![2, 4], vec![2, 5], vec![3, 3], vec![3, 4], vec![3, 5], vec![4, 3], vec![4, 4], vec![4, 5]]);",
            "assert_eq!(candidate((4, 5)), vec![vec![3, 4], vec![3, 5], vec![3, 6], vec![4, 4], vec![4, 5], vec![4, 6], vec![5, 4], vec![5, 5], vec![5, 6]]);",
            "assert_eq!(candidate((5, 6)), vec![vec![4, 5], vec![4, 6], vec![4, 7], vec![5, 5], vec![5, 6], vec![5, 7], vec![6, 5], vec![6, 6], vec![6, 7]]);",
            "}"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "/ Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "fn replace_spaces(text: String) -> String {\n  return text.replace(/\\s+/g, '_').replace(/_/g,'');\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = replace_spaces;",
            "assert_eq!(candidate(String::from(\"Jumanji The Jungle\")), String::from(\"Jumanji_The_Jungle\"));",
            "assert_eq!(candidate(String::from(\"The_Avengers\")), String::from(\"The Avengers\"));",
            "assert_eq!(candidate(String::from(\"Fast and Furious\")), String::from(\"Fast_and_Furious\"));",
            "}"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "/ Write a rsthon function to move all zeroes to the end of the given vector.",
        "code": "fn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n    num_list.for_each([](isize i) {\n        if (i == 0) {\n            return;\n        }\n        num_list.push_back(i);\n    });\n    return num_list;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = move_zero;",
            "assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);",
            "assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);",
            "assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);",
            "}"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "/ Write a rsthon function to find the sum of xor of all pairs of numbers in the given vector.",
        "code": "fn pair_xor_Sum(arr: Vec<isize>, n: isize) -> isize {\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        var xor = 0;\n        for (var j = 0; j < n; j++) {\n            xor += arr[i] ^ arr[j];\n        }\n        sum += xor;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = pair_xor_Sum;",
            "assert_eq!(candidate(vec![5, 9, 7, 6], 4), 47);",
            "assert_eq!(candidate(vec![7, 3, 5], 3), 12);",
            "assert_eq!(candidate(vec![7, 3], 2), 4);",
            "}"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "/ Write a function to sort the given vector.",
        "code": "fn heap_sort(iterable: Vec<isize>) -> Vec<isize> {\n  // Sort the vector.\n  std::sort(iterable.begin(), iterable.end());\n\n  // Return the sorted vector.\n  return iterable;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = heap_sort;",
            "assert_eq!(candidate(vec![1, 3, 5, 7, 9, 2, 4, 6, 8, 0]), vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
            "assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 25, 58]), vec![14, 22, 25, 25, 35, 58, 65, 75, 85]);",
            "assert_eq!(candidate(vec![7, 1, 9, 5]), vec![1, 5, 7, 9]);",
            "}"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "/ Write a function to check whether the given amount has no profit and no loss",
        "code": "fn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    return actual_cost == sale_amount\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = noprofit_noloss;",
            "assert_eq!(candidate(1500, 1200), false);",
            "assert_eq!(candidate(100, 100), true);",
            "assert_eq!(candidate(2000, 5000), false);",
            "}"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "/ Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "fn wind_chill(v: isize, t: isize) -> isize {\n    return (v * 0.01) + (t * 0.01)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = wind_chill;",
            "assert_eq!(candidate(120, 35), 40);",
            "assert_eq!(candidate(40, 20), 19);",
            "assert_eq!(candidate(10, 8), 6);",
            "}"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "/ Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.",
        "code": "fn sample_nam(sample_names: Vec<String>) -> isize {\n    return len(sample_names)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sample_nam;",
            "assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);",
            "assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);",
            "assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);",
            "}"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "/ Write a function to find the maximum difference between available pairs in the given tuple vector.",
        "code": "fn max_difference(test_list: Vec<(isize, isize)>) -> isize {\n    var max_diff = 0;\n    for (var i = 0; i < test_list.size(); i++) {\n        var diff = test_list[i][1] - test_list[i][0];\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n    return max_diff;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_difference;",
            "assert_eq!(candidate(vec![(3, 5), (1, 7), (10, 3), (1, 2)]), 7);",
            "assert_eq!(candidate(vec![(4, 6), (2, 17), (9, 13), (11, 12)]), 15);",
            "assert_eq!(candidate(vec![(12, 35), (21, 27), (13, 23), (41, 22)]), 23);",
            "}"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "/ Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "fn remove_parenthesis(items: Vec<String>) -> String {\n  var result = '';\n  for (var i = 0; i < items.length; i++) {\n    if (items[i] == '(') {\n      result += items[i];\n    } else if (items[i] == ')') {\n      result += items[i];\n    } else {\n      result += items[i];\n    }\n  }\n  return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_parenthesis;",
            "assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));",
            "assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));",
            "assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));",
            "}"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "/ Write a function to find the nth nonagonal number.",
        "code": "fn is_nonagonal(n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n        return 26;\n    }\n    if (n == 27) {\n        return 27;\n    }\n    if (n == 28\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_nonagonal;",
            "assert_eq!(candidate(10), 325);",
            "assert_eq!(candidate(15), 750);",
            "assert_eq!(candidate(18), 1089);",
            "}"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "/ Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "fn text_match_wordz_middle(text: String) -> bool {\n    return text.contains('z') && text.contains('z')\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_match_wordz_middle;",
            "assert_eq!(candidate(String::from(\"pythonzabc.\")), true);",
            "assert_eq!(candidate(String::from(\"zxyabc.\")), false);",
            "assert_eq!(candidate(String::from(\"  lang  .\")), false);",
            "}"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "/ Write a rsthon function to reverse a vector upto a given position.",
        "code": "fn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n  return reverse(input, k);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = reverse_Array_Upto_K;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);",
            "assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);",
            "assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);",
            "}"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "/ Write a function to sort a vector of tuples using the second value of each tuple.",
        "code": "fn subject_marks(subjectmarks: Vec<(String, isize)>) -> Vec<(String, isize)> {\n    var subjectmarks_ = subjectmarks.copy();\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_[0];\n    var subjectmarks_ = subjectmarks_[1];\n    var subjectmarks_ = subjectmarks_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = subject_marks;",
            "assert_eq!(candidate(vec![(String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97), (String::from(\"Social sciences\"), 82)]), vec![(String::from(\"Social sciences\"), 82), (String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97)]);",
            "assert_eq!(candidate(vec![(String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54), (String::from(\"Social\"), 33)]), vec![(String::from(\"Social\"), 33), (String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54)]);",
            "assert_eq!(candidate(vec![(String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97), (String::from(\"Biology\"), 45)]), vec![(String::from(\"Biology\"), 45), (String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97)]);",
            "}"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "/ Write a rsthon function to count the number of positive numbers in a vector.",
        "code": "fn pos_count(list: Vec<isize>) -> isize {\n  var count = 0;\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = pos_count;",
            "assert_eq!(candidate(vec![1, -2, 3, -4]), 2);",
            "assert_eq!(candidate(vec![3, 4, 5, -1]), 3);",
            "assert_eq!(candidate(vec![1, 2, 3, 4]), 4);",
            "}"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "/ Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "fn bell_number(n: isize) -> isize {\n    let n_partitions = 0;\n    for (let i = 0; i < n; i++) {\n        let k = i + 1;\n        let n_partitions = 0;\n        for (let j = 0; j < k; j++) {\n            let k_partitions = 0;\n            for (let k_partition = 0; k_partition < k; k_partition++) {\n                let k_partition_partitions = 0;\n                for (let k_partition_partition = 0; k_partition_partition < k_partition; k_partition_partition++) {\n                    let k_partition_partition_partitions = 0;\n                    for (let k_partition_partition_partition = 0; k_partition_partition_partition < k_partition_partition; k_partition_partition_partition++) {\n                        let k_partition_partition_partition_partitions = 0;\n                        for (let k_partition_partition_partition_partition = 0; k_partition_partition_partition_partition < k_partition_partition_partition; k_partition_partition_partition_partition++) {\n                            let k_partition_partition_partition_partition_partitions = 0;\n                            for (let k_partition_partition_partition_partition_partition = 0; k_partition_partition_partition_partition_partition < k_partition_partition_partition; k_partition_partition_partition_partition_partition++) {\n                                let k_partition_partition_partition_partition_partitions = 0;\n                                for (let k_partition_partition_partition_partition_partition = 0; k_partition_partition_partition_partition_partition < k_partition_partition_partition; k_partition_partition_partition_partition_partition++) {\n                                    \n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = bell_number;",
            "assert_eq!(candidate(2), 2);",
            "assert_eq!(candidate(10), 115975);",
            "assert_eq!(candidate(56), 6775685320645824322581483068371419745979053216268760300);",
            "}"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "/ Write a rsthon function to check whether the given vector is monotonic or not.",
        "code": "fn is_Monotonic(A: Vec<isize>) -> bool {\n    if (A.size() == 0) {\n        return false;\n    }\n    if (A.size() == 1) {\n        return true;\n    }\n    if (A.size() == 2) {\n        return A[0] == A[1];\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_Monotonic;",
            "assert_eq!(candidate(vec![6, 5, 4, 4]), true);",
            "assert_eq!(candidate(vec![1, 2, 2, 3]), true);",
            "assert_eq!(candidate(vec![1, 3, 2]), false);",
            "}"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "/ Write a function to check whether a vector contains the given subvector or not.",
        "code": "fn is_sublist(l: Vec<isize>, s: Vec<isize>) -> bool {\n    for (i: range(l.size())) {\n        if (s[i] == l[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_sublist;",
            "assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![3, 7]), false);",
            "assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![4, 3]), true);",
            "assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![1, 6]), false);",
            "}"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "/ Write a rsthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "fn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n    if (a == b) {\n        return true;\n    }\n    if (a == 0) {\n        return false;\n    }\n    if (b == 0) {\n        return false;\n    }\n    if (a == b) {\n        return true;\n    }\n    if (b == 0) {\n        return true;\n    }\n    if (a == b) {\n        return false;\n    }\n    if (a == 0) {\n        return false;\n    }\n    if (b == 0) {\n        return false;\n    }\n    if (a == b) {\n        return true;\n    }\n    if (b == 0) {\n        return true;\n    }\n    if (a == b) {\n        return false;\n    }\n    if (b == 0) {\n        return false;\n    }\n    if (a == b) {\n        return true;\n    }\n    if (b == 0) {\n        return true;\n    }\n    if (a == b) {\n        return false;\n    }\n    if (b == 0) {\n        return false;\n    }\n    if (a == b) {\n        return true;\n    }\n    if (b == 0) {\n        return true;\n    }\n    if (a == b) {\n        return false;\n    }\n    if (b == 0) {\n        return false;\n    }\n    if (a == b) {\n        return true;\n    }\n    if (b == 0) {\n        return true;\n    }\n    if (a == b) {\n        return false;\n    }\n    if (b == 0) {\n        return false;\n    }\n    if (a == b) {\n        return true;\n    }\n    if (b == 0) {\n        return true;\n    }\n    if (a == b) {\n        return false;\n    }\n    if (b ==\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = differ_At_One_Bit_Pos;",
            "assert_eq!(candidate(13, 9), true);",
            "assert_eq!(candidate(15, 8), false);",
            "assert_eq!(candidate(2, 4), false);",
            "assert_eq!(candidate(2, 3), true);",
            "assert_eq!(candidate(5, 1), true);",
            "assert_eq!(candidate(1, 5), true);",
            "}"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "/ Write a function to find whether all the given vectors have equal length or not.",
        "code": "fn get_equal(Input: Vec<Vec<isize>>) -> bool {\n  for (isize i = 0; i < this.length; i++) {\n    if (this[i].length!= this[i].length) {\n      return false;\n    }\n  }\n  return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_equal;",
            "assert_eq!(candidate(vec![vec![11, 22, 33], vec![44, 55, 66]]), true);",
            "assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6, 7]]), false);",
            "assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]]), true);",
            "}"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "/ Write a function to sort a vector of elements.",
        "code": "fn comb_sort(nums: Vec<isize>) -> Vec<isize> {\n  Vec<isize> res = Vec<isize>();\n  for (isize i = 0; i < nums.size(); i++) {\n    res.push_back(nums[i]);\n  }\n  return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = comb_sort;",
            "assert_eq!(candidate(vec![5, 15, 37, 25, 79]), vec![5, 15, 25, 37, 79]);",
            "assert_eq!(candidate(vec![41, 32, 15, 19, 22]), vec![15, 19, 22, 32, 41]);",
            "assert_eq!(candidate(vec![99, 15, 13, 47]), vec![13, 15, 47, 99]);",
            "}"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "/ Write a function to add a HashMap to the tuple. The output should be a tuple.",
        "code": "use std::collections::HashMap;\n\nfn add_dict_to_tuple(test_tup: (isize, isize, isize), test_dict: HashMap<String, isize>) -> (isize, isize, isize, HashMap<String, isize>) {\n    return (isize, isize, isize, HashMap<String, isize>());\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = add_dict_to_tuple;",
            "assert_eq!(candidate((4, 5, 6), HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])), (4, 5, 6, HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])));",
            "assert_eq!(candidate((1, 2, 3), HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])), (1, 2, 3, HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])));",
            "assert_eq!(candidate((8, 9, 10), HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])), (8, 9, 10, HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])));",
            "}"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "/ Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "fn maxAverageOfPath(cost: Vec<Vec<isize>>) -> f64 {\n  let max = 0;\n  let maxCost = 0;\n  let maxNum = 0;\n  let maxNumCost = 0;\n  let num = cost.length;\n  for (let i = 0; i < num; i++) {\n    let costi = cost[i];\n    let numi = costi.length;\n    for (let j = 0; j < numi; j++) {\n      let costj = costi[j];\n      let numj = costj.length;\n      for (let k = 0; k < numj; k++) {\n        let costk = costj[k];\n        let numk = costk.length;\n        for (let l = 0; l < numk; l++) {\n          let costl = costk[l];\n          let numl = costl.length;\n          for (let m = 0; m < numl; m++) {\n            let costm = costl[m];\n            let numm = costm.length;\n            for (let n = 0; n < numm; n++) {\n              let costn = costm[n];\n              let numn = costn.length;\n              for (let o = 0; o < numn; o++) {\n                let costo = costn[o];\n                let numo = costo.length;\n                for (let p = 0; p < numo; p++) {\n                  let costp = costo[p];\n                  let nump = costp.length;\n                  for (let q = 0; q < nump; q++) {\n                    let costq = costp[q];\n                    let numq = costq.length;\n                    for (let r = 0; r <\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = maxAverageOfPath;",
            "assert_eq!(candidate(vec![vec![1, 2, 3], vec![6, 5, 4], vec![7, 3, 9]]), 5.2);",
            "assert_eq!(candidate(vec![vec![2, 3, 4], vec![7, 6, 5], vec![8, 4, 10]]), 6.2);",
            "assert_eq!(candidate(vec![vec![3, 4, 5], vec![8, 7, 6], vec![9, 5, 11]]), 7.2);",
            "assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]]), 5.8);",
            "}"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "/ The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.",
        "code": "fn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n    isize i1 = nums1.size();\n    isize i2 = nums2.size();\n    isize i = 0;\n    while (i < i1 && i < i2) {\n        if (nums1[i] == nums2[i]) {\n            ++i;\n        } else {\n            return i;\n        }\n    }\n    return i;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_same_pair;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);",
            "assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);",
            "assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);",
            "assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);",
            "}"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "/ Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "fn power_base_sum(base: isize, power: isize) -> isize {\n    let sum = 0;\n    for (let i = 0; i < base; i++) {\n        sum += power;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = power_base_sum;",
            "assert_eq!(candidate(2, 100), 115);",
            "assert_eq!(candidate(8, 10), 37);",
            "assert_eq!(candidate(8, 15), 62);",
            "assert_eq!(candidate(3, 3), 9);",
            "}"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "/ Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "fn sum_list(lst1: Vec<isize>, lst2: Vec<isize>) -> Vec<isize> {\n    Vec<isize> res = Vec<isize>();\n    for (isize i = 0; i < lst1.size(); i++) {\n        res += lst1[i] + lst2[i];\n    }\n    return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_list;",
            "assert_eq!(candidate(vec![10, 20, 30], vec![15, 25, 35]), vec![25, 45, 65]);",
            "assert_eq!(candidate(vec![1, 2, 3], vec![5, 6, 7]), vec![6, 8, 10]);",
            "assert_eq!(candidate(vec![15, 20, 30], vec![15, 45, 75]), vec![30, 65, 105]);",
            "}"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "/ Write a rsthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "fn dif_Square(n: isize) -> bool {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    if (n == 2) {\n        return false;\n    }\n    if (n == 3) {\n        return false;\n    }\n    if (n == 4) {\n        return false;\n    }\n    if (n == 5) {\n        return false;\n    }\n    if (n == 6) {\n        return false;\n    }\n    if (n == 7) {\n        return false;\n    }\n    if (n == 8) {\n        return false;\n    }\n    if (n == 9) {\n        return false;\n    }\n    if (n == 10) {\n        return false;\n    }\n    if (n == 11) {\n        return false;\n    }\n    if (n == 12) {\n        return false;\n    }\n    if (n == 13) {\n        return false;\n    }\n    if (n == 14) {\n        return false;\n    }\n    if (n == 15) {\n        return false;\n    }\n    if (n == 16) {\n        return false;\n    }\n    if (n == 17) {\n        return false;\n    }\n    if (n == 18) {\n        return false;\n    }\n    if (n == 19) {\n        return false;\n    }\n    if (n == 20) {\n        return false;\n    }\n    if (n == 21) {\n        return false;\n    }\n    if (n == 22) {\n        return false;\n    }\n    if (n == 23) {\n        return false;\n    }\n    if (n == 24) {\n        return false;\n    }\n    if (n == 25) {\n        return false;\n    }\n    if (n == 26) {\n        return false;\n    }\n    if (n == 27) {\n        return false\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = dif_Square;",
            "assert_eq!(candidate(5), true);",
            "assert_eq!(candidate(10), false);",
            "assert_eq!(candidate(15), true);",
            "}"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "/ Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "fn lateralsurface_cone(r: isize, h: isize) -> f64 {\n    return (r.width * r.height) / (2 * h);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = lateralsurface_cone;",
            "assert_eq!(candidate(5, 12), 204.20352248333654);",
            "assert_eq!(candidate(10, 15), 566.3586699569488);",
            "assert_eq!(candidate(19, 17), 1521.8090132193388);",
            "}"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "/ Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "fn replace_specialchar(text: String) -> String {\n  const specialchar = {\n   '':'',\n    ',': ','\n  };\n  const replace = {\n   '':'',\n    ',': ','\n  };\n  const replace_all = {\n   '':'',\n    ',': ','\n  };\n  const replace_all_with_colon = {\n   '': ':',\n    ',': ':'\n  };\n  const replace_all_with_comma = {\n   '': ',',\n    ',': ','\n  };\n  const replace_all_with_dot = {\n   '': '.',\n    ',': '.'\n  };\n  const replace_all_with_dot_dot = {\n   '': '..',\n    ',': '..'\n  };\n  const replace_all_with_dot_dot_dot = {\n   '': '....',\n    ',': '....'\n  };\n  const replace_all_with_dot_dot_dot_dot = {\n   '': '......',\n    ',': '......'\n  };\n  const replace_all_with_dot_dot_dot_dot_dot = {\n   '': '........',\n    ',': '........'\n  };\n  const replace_all_with_dot_dot_dot_dot_dot_dot = {\n   '': '..........',\n    ',': '..........'\n  };\n  const replace_all_with_dot_dot_dot_dot_dot_dot = {\n   '': '............',\n    ',': '............'\n  };\n  const replace_all_with_dot_dot_dot_dot_dot_dot = {\n   '': '..............',\n    ',': '..............'\n  };\n  const replace_all_with_dot_dot_dot_dot_dot_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = replace_specialchar;",
            "assert_eq!(candidate(String::from(\"Python language, Programming language.\")), String::from(\"Python:language::Programming:language:\"));",
            "assert_eq!(candidate(String::from(\"a b c,d e f\")), String::from(\"a:b:c:d:e:f\"));",
            "assert_eq!(candidate(String::from(\"ram reshma,ram rahim\")), String::from(\"ram:reshma:ram:rahim\"));",
            "}"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "/ Write a function to find the index of the first occurrence of a given number in a sorted vector.",
        "code": "fn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n    if (x == 0) {\n        return 0;\n    }\n    return find_first_occurrence(A, x - 1);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_first_occurrence;",
            "assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);",
            "assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);",
            "assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);",
            "}"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "/ Write a rsthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/",
        "code": "fn sum_Of_Subarray_Prod(arr: Vec<isize>) -> isize {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_Of_Subarray_Prod;",
            "assert_eq!(candidate(vec![1, 2, 3]), 20);",
            "assert_eq!(candidate(vec![1, 2]), 5);",
            "assert_eq!(candidate(vec![1, 2, 3, 4]), 84);",
            "}"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "/ Write a rsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "fn toggle_middle_bits(n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n ==\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = toggle_middle_bits;",
            "assert_eq!(candidate(9), 15);",
            "assert_eq!(candidate(10), 12);",
            "assert_eq!(candidate(11), 13);",
            "assert_eq!(candidate(65), 127);",
            "assert_eq!(candidate(77), 115);",
            "}"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "/ Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-data-structure-exercise-24.php",
        "code": "fn left_insertion(a: Vec<isize>, x: isize) -> isize {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = left_insertion;",
            "assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);",
            "assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);",
            "assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);",
            "}"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "/ Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "fn check_str(string: String) -> bool {\n    return string.match(/^[a-z]$/)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_str;",
            "assert_eq!(candidate(String::from(\"annie\")), true);",
            "assert_eq!(candidate(String::from(\"dawood\")), false);",
            "assert_eq!(candidate(String::from(\"Else\")), true);",
            "}"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "/ Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rsthon-exercises/data-structures-and-algorithms/rsthon-recursion-exercise-9.php",
        "code": "fn geometric_sum(n: isize) -> f64 {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = geometric_sum;",
            "assert_eq!(candidate(7), 1.9921875);",
            "assert_eq!(candidate(4), 1.9375);",
            "assert_eq!(candidate(8), 1.99609375);",
            "}"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "/ Write a rsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "fn find_Index(n: isize) -> isize {\n    let index = 0;\n    let max = n;\n    let min = 0;\n    let sum = 0;\n    let temp = 0;\n    let temp2 = 0;\n    let temp3 = 0;\n    let temp4 = 0;\n    let temp5 = 0;\n    let temp6 = 0;\n    let temp7 = 0;\n    let temp8 = 0;\n    let temp9 = 0;\n    let temp10 = 0;\n    let temp11 = 0;\n    let temp12 = 0;\n    let temp13 = 0;\n    let temp14 = 0;\n    let temp15 = 0;\n    let temp16 = 0;\n    let temp17 = 0;\n    let temp18 = 0;\n    let temp19 = 0;\n    let temp20 = 0;\n    let temp21 = 0;\n    let temp22 = 0;\n    let temp23 = 0;\n    let temp24 = 0;\n    let temp25 = 0;\n    let temp26 = 0;\n    let temp27 = 0;\n    let temp28 = 0;\n    let temp29 = 0;\n    let temp30 = 0;\n    let temp31 = 0;\n    let temp32 = 0;\n    let temp33 = 0;\n    let temp34 = 0;\n    let temp35 = 0;\n    let temp36 = 0;\n    let temp37 = 0;\n    let temp38 = 0;\n    let temp39 = 0;\n    let temp40 = 0;\n    let temp41 = 0;\n    let temp42 = 0;\n    let temp43 = 0;\n    let temp44 = 0;\n    let temp45 = 0;\n    let temp46 = 0;\n    let temp47 = 0;\n    let temp48 = 0;\n    let temp49 = 0;\n    let temp50 = 0;\n    let temp51 = 0;\n    let temp52 = 0;\n    let temp53\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Index;",
            "assert_eq!(candidate(2), 4);",
            "assert_eq!(candidate(3), 14);",
            "assert_eq!(candidate(4), 45);",
            "}"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "/ Write a function to convert the given tuple to a key-value HashMap using adjacent elements. https://www.geeksforgeeks.org/rsthon-convert-tuple-to-adjacent-pair-HashMap/",
        "code": "use std::collections::HashMap;\n\nfn tuple_to_dict(test_tup: (isize, isize, isize, isize, isize, isize)) -> HashMap<isize, isize> {\n    HashMap<isize, isize> result;\n    for (isize i = 0; i < test_tup.size(); i++) {\n        result[i] = test_tup[i];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = tuple_to_dict;",
            "assert_eq!(candidate((1, 5, 7, 10, 13, 5)), HashMap::from([(1, 5), (7, 10), (13, 5)]));",
            "assert_eq!(candidate((1, 2, 3, 4, 5, 6)), HashMap::from([(1, 2), (3, 4), (5, 6)]));",
            "assert_eq!(candidate((7, 8, 9, 10, 11, 12)), HashMap::from([(7, 8), (9, 10), (11, 12)]));",
            "}"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "/ Write a rsthon function to check whether all the characters are same or not.",
        "code": "fn all_Characters_Same(s: String) -> bool {\n  for (char c : s) {\n    if (c!= s[0]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = all_Characters_Same;",
            "assert_eq!(candidate(String::from(\"python\")), false);",
            "assert_eq!(candidate(String::from(\"aaa\")), true);",
            "assert_eq!(candidate(String::from(\"data\")), false);",
            "}"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "/ Write a function to caluclate the area of a tetrahedron.",
        "code": "fn area_tetrahedron(side: isize) -> f64 {\n    return (side * side) * (side * side);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = area_tetrahedron;",
            "assert_eq!(candidate(3), 15.588457268119894);",
            "assert_eq!(candidate(20), 692.8203230275509);",
            "assert_eq!(candidate(10), 173.20508075688772);",
            "}"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "/ Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/rsthon-program-right-rotate-vector-n/",
        "code": "fn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    if (m == 0) {\n        return list\n    }\n    list = list.reverse()\n    list.reverse()\n    return list\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = rotate_right;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);",
            "}"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "/ Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rsthon-exercises/lambda/rsthon-lambda-exercise-24.php",
        "code": "fn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let divisible_by_digits_vec = [];\n    let divisible_by_digits_vec_i = [];\n    let divisible_by_digits_vec_j = [];\n    let divisible_by_digits_vec_k = [];\n    let divisible_by_digits_vec_l = [];\n    let divisible_by_digits_vec_m = [];\n    let divisible_by_digits_vec_n = [];\n    let divisible_by_digits_vec_o = [];\n    let divisible_by_digits_vec_p = [];\n    let divisible_by_digits_vec_q = [];\n    let divisible_by_digits_vec_r = [];\n    let divisible_by_digits_vec_s = [];\n    let divisible_by_digits_vec_t = [];\n    let divisible_by_digits_vec_u = [];\n    let divisible_by_digits_vec_v = [];\n    let divisible_by_digits_vec_w = [];\n    let divisible_by_digits_vec_x = [];\n    let divisible_by_digits_vec_y = [];\n    let divisible_by_digits_vec_z = [];\n    let divisible_by_digits_vec_a = [];\n    let divisible_by_digits_vec_b = [];\n    let divisible_by_digits_vec_c = [];\n    let divisible_by_digits_vec_d = [];\n    let divisible_by_digits_vec_e = [];\n    let divisible_by_digits_vec_f = [];\n    let divisible_by_digits_vec_g = [];\n    let divisible_by_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = divisible_by_digits;",
            "assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);",
            "assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);",
            "assert_eq!(candidate(20, 25), vec![22, 24]);",
            "}"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "/ Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "code": "fn sector_area(r: isize, a: isize) -> Option<f64> {\n    if (r.is_zero() or a.is_zero()) {\n        return None\n    }\n    if (r.is_negative() or a.is_negative()) {\n        return None\n    }\n    if (r.is_positive() or a.is_positive()) {\n        return None\n    }\n    if (r.is_positive() and a.is_positive()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r.is_positive() and a.is_positive()) {\n        return None\n    }\n    if (r.is_positive() and a.is_positive()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r.is_positive() and a.is_positive()) {\n        return None\n    }\n    if (r.is_positive() and a.is_positive()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r.is_positive() and a.is_positive()) {\n        return None\n    }\n    if (r.is_positive() and a.is_positive()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r.is_negative() and a.is_negative()) {\n        return None\n    }\n    if (r\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sector_area;",
            "assert_eq!(candidate(4, 45), Some(6.283185307179586));",
            "assert_eq!(candidate(9, 45), Some(31.808625617596654));",
            "assert_eq!(candidate(9, 361), None);",
            "}"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "/ Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "fn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n    if (X.length() == 0 || Y.length() == 0 || Z.length() == 0) {\n        return 0;\n    }\n    if (X.length() == 1 && Y.length() == 1 && Z.length() == 1) {\n        return 1;\n    }\n    if (X.length() == 2 && Y.length() == 2 && Z.length() == 2) {\n        return 2;\n    }\n    if (X.length() == 3 && Y.length() == 3 && Z.length() == 3) {\n        return 3;\n    }\n    if (X.length() == 4 && Y.length() == 4 && Z.length() == 4) {\n        return 4;\n    }\n    if (X.length() == 5 && Y.length() == 5 && Z.length() == 5) {\n        return 5;\n    }\n    if (X.length() == 6 && Y.length() == 6 && Z.length() == 6) {\n        return 6;\n    }\n    if (X.length() == 7 && Y.length() == 7 && Z.length() == 7) {\n        return 7;\n    }\n    if (X.length() == 8 && Y.length() == 8 && Z.length() == 8) {\n        return 8;\n    }\n    if (X.length() == 9 && Y.length() == 9 && Z.length() == 9) {\n        return 9;\n    }\n    if (X.length() == 10 && Y.length() == 10 && Z.length() == 10) {\n        return 10;\n    }\n    if (X.length() == 11 && Y.length() == 11 && Z.length() == 11) {\n        return 11;\n    }\n    if (X.length() == 12 && Y.length() == 12 && Z.length() == 12) {\n        return 12;\n    }\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = lcs_of_three;",
            "assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);",
            "assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);",
            "assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);",
            "}"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "/ Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "fn capital_words_spaces(str1: String) -> String {\n    const str2 = str1.split(\" \");\n    const str3 = str2.map(word => word.charAt(0).toUpperCase() + word.substr(1));\n    return str3;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = capital_words_spaces;",
            "assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));",
            "assert_eq!(candidate(String::from(\"PythonProgrammingExamples\")), String::from(\"Python Programming Examples\"));",
            "assert_eq!(candidate(String::from(\"GetReadyToBeCodingFreak\")), String::from(\"Get Ready To Be Coding Freak\"));",
            "}"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "/ Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/rsthon-sort-numeric-strings-in-a-vector/",
        "code": "fn sort_numeric_strings(nums_str: Vec<String>) -> Vec<isize> {\n    nums_str.sort();\n    return nums_str;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sort_numeric_strings;",
            "assert_eq!(candidate(vec![String::from(\"4\"), String::from(\"12\"), String::from(\"45\"), String::from(\"7\"), String::from(\"0\"), String::from(\"100\"), String::from(\"200\"), String::from(\"-12\"), String::from(\"-500\")]), vec![-500, -12, 0, 4, 7, 12, 45, 100, 200]);",
            "assert_eq!(candidate(vec![String::from(\"2\"), String::from(\"3\"), String::from(\"8\"), String::from(\"4\"), String::from(\"7\"), String::from(\"9\"), String::from(\"8\"), String::from(\"2\"), String::from(\"6\"), String::from(\"5\"), String::from(\"1\"), String::from(\"6\"), String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"6\"), String::from(\"9\"), String::from(\"1\"), String::from(\"2\")]), vec![1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);",
            "assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"3\"), String::from(\"5\"), String::from(\"7\"), String::from(\"1\"), String::from(\"3\"), String::from(\"13\"), String::from(\"15\"), String::from(\"17\"), String::from(\"5\"), String::from(\"7 \"), String::from(\"9\"), String::from(\"1\"), String::from(\"11\")]), vec![1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);",
            "}"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "/ Write a function to check whether it follows the sequence given in the patterns vector.",
        "code": "fn is_samepatterns(colors: Vec<String>, patterns: Vec<String>) -> bool {\n    if (patterns.size() == 0) {\n        return false;\n    }\n    for (int i = 0; i < patterns.size(); i++) {\n        if (patterns[i]!= colors[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_samepatterns;",
            "assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"green\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), true);",
            "assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), false);",
            "assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\")]), false);",
            "}"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "/ Write a function to add the given tuple to the given vector.",
        "code": "fn add_tuple(test_list: Vec<isize>, test_tup: (isize, isize)) -> Vec<isize> {\n    Vec<isize> vec = Vec<isize>();\n    for (isize i = 0; i < test_tup.size(); i++) {\n        vec.push_back(test_tup[i]);\n    }\n    return vec;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = add_tuple;",
            "assert_eq!(candidate(vec![5, 6, 7], (9, 10)), vec![5, 6, 7, 9, 10]);",
            "assert_eq!(candidate(vec![6, 7, 8], (10, 11)), vec![6, 7, 8, 10, 11]);",
            "assert_eq!(candidate(vec![7, 8, 9], (11, 12)), vec![7, 8, 9, 11, 12]);",
            "}"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "/ Write a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/",
        "code": "fn check_min_heap(arr: Vec<isize>) -> bool {\n    if (arr.size() == 0) {\n        return true;\n    }\n    if (arr.size() == 1) {\n        return arr[0] < arr[1];\n    }\n    if (arr.size() == 2) {\n        return arr[0] < arr[1] && arr[0] < arr[2];\n    }\n    if (arr.size() == 3) {\n        return arr[0] < arr[1] && arr[0] < arr[2] && arr[0] < arr[3];\n    }\n    if (arr.size() == 4) {\n        return arr[0] < arr[1] && arr[0] < arr[2] && arr[0] < arr[3] && arr[0] < arr[4];\n    }\n    if (arr.size() == 5) {\n        return arr[0] < arr[1] && arr[0] < arr[2] && arr[0] < arr[3] && arr[0] < arr[4] && arr[0] < arr[5];\n    }\n    if (arr.size() == 6) {\n        return arr[0] < arr[1] && arr[0] < arr[2] && arr[0] < arr[3] && arr[0] < arr[4] && arr[0] < arr[5] && arr[0] < arr[6];\n    }\n    if (arr.size() == 7) {\n        return arr[0] < arr[1] && arr[0] < arr[2] && arr[0] < arr[3] && arr[0] < arr[4] && arr[0] < arr[5] && arr[0] < arr[6] && arr[0] < arr[7];\n    }\n    if (arr.size() == 8) {\n        return arr[0] < arr[1\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_min_heap;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);",
            "assert_eq!(candidate(vec![2, 3, 4, 5, 10, 15]), true);",
            "assert_eq!(candidate(vec![2, 10, 4, 5, 3, 15]), false);",
            "}"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "/ Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "fn jacobsthal_num(n: isize) -> isize {\n  let jacobsthal = 0;\n  let jacobsthal_num = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n      jacobsthal = jacobsthal + 1;\n    } else {\n      jacobsthal = jacobsthal + 1;\n    }\n    if (i % 3 == 0) {\n      jacobsthal_num = jacobsthal_num + 1;\n    } else {\n      jacobsthal_num = jacobsthal_num + 1;\n    }\n  }\n  return jacobsthal_num;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = jacobsthal_num;",
            "assert_eq!(candidate(5), 11);",
            "assert_eq!(candidate(2), 1);",
            "assert_eq!(candidate(4), 5);",
            "assert_eq!(candidate(13), 2731);",
            "}"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "/ Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/rsthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cors of test cases",
        "code": "fn min_k(test_list: Vec<(String, isize)>, K: isize) -> Vec<(String, isize)> {\n    var min_k = Vec<(String, isize)>();\n    for (var i = 0; i < test_list.length; i++) {\n        var test = test_list[i];\n        var k = test[0];\n        var v = test[1];\n        if (v == \"\") {\n            continue;\n        }\n        if (k < min_k.length) {\n            min_k = Vec<(String, isize)>(k);\n        }\n    }\n    return min_k;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = min_k;",
            "assert_eq!(candidate(vec![(String::from(\"Manjeet\"), 10), (String::from(\"Akshat\"), 4), (String::from(\"Akash\"), 2), (String::from(\"Nikhil\"), 8)], 2), vec![(String::from(\"Akash\"), 2), (String::from(\"Akshat\"), 4)]);",
            "assert_eq!(candidate(vec![(String::from(\"Sanjeev\"), 11), (String::from(\"Angat\"), 5), (String::from(\"Akash\"), 3), (String::from(\"Nepin\"), 9)], 3), vec![(String::from(\"Akash\"), 3), (String::from(\"Angat\"), 5), (String::from(\"Nepin\"), 9)]);",
            "assert_eq!(candidate(vec![(String::from(\"tanmay\"), 14), (String::from(\"Amer\"), 11), (String::from(\"Ayesha\"), 9), (String::from(\"SKD\"), 16)], 1), vec![(String::from(\"Ayesha\"), 9)]);",
            "}"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "/ Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rsthon-exercises/re/rsthon-re-exercise-3.php",
        "code": "fn text_match_zero_one(text: String) -> bool {\n    return text.match(/^a/);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_match_zero_one;",
            "assert_eq!(candidate(String::from(\"ac\")), false);",
            "assert_eq!(candidate(String::from(\"dc\")), false);",
            "assert_eq!(candidate(String::from(\"abbbba\")), true);",
            "assert_eq!(candidate(String::from(\"dsabbbba\")), true);",
            "assert_eq!(candidate(String::from(\"asbbbba\")), false);",
            "assert_eq!(candidate(String::from(\"abaaa\")), true);",
            "}"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "/ Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/rsthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "fn count_reverse_pairs(test_list: Vec<String>) -> isize {\n    var count = 0;\n    for (var i = 0; i < test_list.length; i++) {\n        var test = test_list[i];\n        var reverse_str = test.substring(0, test.length - 1);\n        var reverse_str_len = reverse_str.length;\n        for (var j = 0; j < reverse_str_len; j++) {\n            var reverse_str_char = reverse_str[j];\n            if (reverse_str_char == 'R') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_reverse_pairs;",
            "assert_eq!(candidate(vec![String::from(\"julia\"), String::from(\"best\"), String::from(\"tseb\"), String::from(\"for\"), String::from(\"ailuj\")]), 2);",
            "assert_eq!(candidate(vec![String::from(\"geeks\"), String::from(\"best\"), String::from(\"for\"), String::from(\"skeeg\")]), 1);",
            "assert_eq!(candidate(vec![String::from(\"makes\"), String::from(\"best\"), String::from(\"sekam\"), String::from(\"for\"), String::from(\"rof\")]), 2);",
            "}"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "/ Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "fn is_decimal(num: String) -> bool {\n  return num.match(/^\\d+$/)\n    && num.match(/^\\d*\\.\\d+$/)\n    && num.match(/^\\d*\\.\\d*$/)\n    && num.match(/^\\d*\\.\\d*\\d+$/)\n    && num.match(/^\\d*\\.\\d*\\d*$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d+$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d+$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d+$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d*$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d*\\d+$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d*\\d*$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d*\\d*\\d+$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d*\\d*\\d*$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d*\\d*\\d*\\d+$/)\n    && num.match(/^\\d*\\.\\d*\\d*\\d*\\d*\\d*\\d*\\d*\\d*$/)\n    && num.match(/\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_decimal;",
            "assert_eq!(candidate(String::from(\"123.11\")), true);",
            "assert_eq!(candidate(String::from(\"e666.86\")), false);",
            "assert_eq!(candidate(String::from(\"3.124587\")), false);",
            "assert_eq!(candidate(String::from(\"1.11\")), true);",
            "assert_eq!(candidate(String::from(\"1.1.11\")), false);",
            "}"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "/ Write a function to find tuples which have all elements divisible by k from the given vector of tuples.",
        "code": "fn find_tuples(test_list: Vec<(isize, isize, isize)>, K: isize) -> Vec<(isize, isize, isize)> {\n    var tuples = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                tuples.append(test_list[i][j])\n    return tuples\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_tuples;",
            "assert_eq!(candidate(vec![(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6), vec![(6, 24, 12)]);",
            "assert_eq!(candidate(vec![(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5), vec![(5, 25, 30)]);",
            "assert_eq!(candidate(vec![(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4), vec![(8, 16, 4)]);",
            "}"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "/ Write a rsthon function to check whether a vector of numbers contains only one distinct element or not.",
        "code": "fn unique_Element(arr: Vec<isize>) -> bool {\n    if (arr.size() == 0) {\n        return false;\n    }\n    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]!= arr[i]) {\n            count++;\n        }\n    }\n    return count == 1;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = unique_Element;",
            "assert_eq!(candidate(vec![1, 1, 1]), true);",
            "assert_eq!(candidate(vec![1, 2, 1, 2]), false);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);",
            "}"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "/ Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "fn check_monthnumber_number(monthnum3: isize) -> bool {\n    if (monthnum3 < 1 || monthnum3 > 12) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_monthnumber_number;",
            "assert_eq!(candidate(6), true);",
            "assert_eq!(candidate(2), false);",
            "assert_eq!(candidate(12), false);",
            "}"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "/ Write a rsthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "fn find_min_diff(arr: Vec<isize>, n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return arr[0];\n    }\n    if (n == 2) {\n        return arr[0] + arr[1];\n    }\n    if (n == 3) {\n        return arr[0] + arr[1] + arr[2];\n    }\n    if (n == 4) {\n        return arr[0] + arr[1] + arr[2] + arr[3];\n    }\n    if (n == 5) {\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4];\n    }\n    if (n == 6) {\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5];\n    }\n    if (n == 7) {\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6];\n    }\n    if (n == 8) {\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7];\n    }\n    if (n == 9) {\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8];\n    }\n    if (n == 10) {\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9];\n    }\n    if (n == 11) {\n        return arr[0\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_min_diff;",
            "assert_eq!(candidate(vec![1, 5, 3, 19, 18, 25], 6), 1);",
            "assert_eq!(candidate(vec![4, 3, 2, 6], 4), 1);",
            "assert_eq!(candidate(vec![30, 5, 20, 9], 4), 4);",
            "}"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "/ Write a rsthon function to count number of digits in a given string.",
        "code": "fn number_ctr(str: String) -> isize {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] == '0') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = number_ctr;",
            "assert_eq!(candidate(String::from(\"program2bedone\")), 1);",
            "assert_eq!(candidate(String::from(\"3wonders\")), 1);",
            "assert_eq!(candidate(String::from(\"123\")), 3);",
            "assert_eq!(candidate(String::from(\"3wond-1ers2\")), 3);",
            "}"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "/ Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "fn is_polite(n: isize) -> isize {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 4;\n    if (n == 5) return 5;\n    if (n == 6) return 6;\n    if (n == 7) return 7;\n    if (n == 8) return 8;\n    if (n == 9) return 9;\n    if (n == 10) return 10;\n    if (n == 11) return 11;\n    if (n == 12) return 12;\n    if (n == 13) return 13;\n    if (n == 14) return 14;\n    if (n == 15) return 15;\n    if (n == 16) return 16;\n    if (n == 17) return 17;\n    if (n == 18) return 18;\n    if (n == 19) return 19;\n    if (n == 20) return 20;\n    if (n == 21) return 21;\n    if (n == 22) return 22;\n    if (n == 23) return 23;\n    if (n == 24) return 24;\n    if (n == 25) return 25;\n    if (n == 26) return 26;\n    if (n == 27) return 27;\n    if (n == 28) return 28;\n    if (n == 29) return 29;\n    if (n == 30) return 30;\n    if (n == 31) return 31;\n    if (n == 32) return 32;\n    if (n == 33) return 33;\n    if (n == 34) return 34;\n    if (n == 35) return 35;\n    if (n == 36) return 36;\n    if (n == 37) return 37;\n    if (n == 38) return 38;\n    if (n == 39) return 39;\n    if (n == 40) return 40;\n    if (n == 41) return 41;\n    if (n == 42\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_polite;",
            "assert_eq!(candidate(7), 11);",
            "assert_eq!(candidate(4), 7);",
            "assert_eq!(candidate(9), 13);",
            "}"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "/ Write a function to return a vector of all pairs of consecutive items in a given vector.",
        "code": "fn pair_wise(l1: Vec<isize>) -> Vec<(isize, isize)> {\n    Vec<(isize, isize)> res = Vec<(isize, isize)>();\n    for (isize i = 0; i < l1.size(); i++) {\n        for (isize j = 0; j < l1.size(); j++) {\n            if (l1[i] == l1[j]) {\n                res[i][j] = l1[i];\n            }\n        }\n    }\n    return res;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = pair_wise;",
            "assert_eq!(candidate(vec![1, 1, 2, 3, 3, 4, 4, 5]), vec![(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]);",
            "assert_eq!(candidate(vec![1, 5, 7, 9, 10]), vec![(1, 5), (5, 7), (7, 9), (9, 10)]);",
            "assert_eq!(candidate(vec![5, 1, 9, 7, 10]), vec![(5, 1), (1, 9), (9, 7), (7, 10)]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]);",
            "}"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "/ Write a rsthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,",
        "code": "fn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == sum) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_pairs_count;",
            "assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);",
            "assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);",
            "assert_eq!(candidate(vec![1, -2, 3], 1), 1);",
            "assert_eq!(candidate(vec![-1, -2, 3], -3), 1);",
            "}"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "/ Write a rsthon function to get the difference between two vectors.",
        "code": "fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n  return li1 - li2;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = Diff;",
            "assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);",
            "assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);",
            "}"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "/ Write a rsthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "fn odd_num_sum(n: isize) -> isize {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = odd_num_sum;",
            "assert_eq!(candidate(2), 82);",
            "assert_eq!(candidate(3), 707);",
            "assert_eq!(candidate(4), 3108);",
            "}"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "/ Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "fn check_expression(exp: String) -> bool {\n    var stack = [];\n    var stack_size = 0;\n    var stack_index = 0;\n    var stack_index_max = 0;\n    var stack_index_min = 0;\n    var stack_index_min_max = 0;\n    var stack_index_min_max_max = 0;\n    var stack_index_min_max_max_max = 0;\n    var stack_index_min_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    var stack_index_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_expression;",
            "assert_eq!(candidate(String::from(\"{()}[{}]\")), true);",
            "assert_eq!(candidate(String::from(\"{()}[{]\")), false);",
            "assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);",
            "}"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "/ Write a function to remove all the words with k length in the given string.",
        "code": "fn remove_length(test_str: String, K: isize) -> String {\n    var words = test_str.split(\" \");\n    var result = \"\";\n    for (var i = 0; i < words.length; i++) {\n        if (words[i].length == K) {\n            result += words[i];\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_length;",
            "assert_eq!(candidate(String::from(\"The person is most value tet\"), 3), String::from(\"person is most value\"));",
            "assert_eq!(candidate(String::from(\"If you told me about this ok\"), 4), String::from(\"If you me about ok\"));",
            "assert_eq!(candidate(String::from(\"Forces of darkeness is come into the play\"), 4), String::from(\"Forces of darkeness is the\"));",
            "}"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "/ Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "code": "fn occurance_substring(text: String, pattern: String) -> Option<(String, isize, isize)> {\n    // Find the occurrence of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n    // If the substring is not found, return None.\n    // If the substring is found, return the position of the substring within the string.\n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = occurance_substring;",
            "assert_eq!(candidate(String::from(\"python programming, python language\"), String::from(\"python\")), Some((String::from(\"python\"), 0, 6)));",
            "assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"programming\")), Some((String::from(\"programming\"), 7, 18)));",
            "assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"language\")), Some((String::from(\"language\"), 31, 39)));",
            "assert_eq!(candidate(String::from(\"c++ programming, c++ language\"), String::from(\"python\")), None);",
            "}"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "/ Write a rsthon function to check whether every odd index contains odd numbers of a given vector.",
        "code": "fn odd_position(nums: Vec<isize>) -> bool {\n    for (i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = odd_position;",
            "assert_eq!(candidate(vec![2, 1, 4, 3, 6, 7, 6, 3]), true);",
            "assert_eq!(candidate(vec![4, 1, 2]), true);",
            "assert_eq!(candidate(vec![1, 2, 3]), false);",
            "}"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "/ Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "fn count_vowels(test_str: String) -> isize {\n    const count = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == 'v') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_vowels;",
            "assert_eq!(candidate(String::from(\"bestinstareels\")), 7);",
            "assert_eq!(candidate(String::from(\"partofthejourneyistheend\")), 12);",
            "assert_eq!(candidate(String::from(\"amazonprime\")), 5);",
            "}"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "/ Write a rsthon function to find the sum of non-repeated elements in a given vector.",
        "code": "fn find_sum(arr: Vec<isize>) -> isize {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i]!= 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_sum;",
            "assert_eq!(candidate(vec![1, 2, 3, 1, 1, 4, 5, 6]), 21);",
            "assert_eq!(candidate(vec![1, 10, 9, 4, 2, 10, 10, 45, 4]), 71);",
            "assert_eq!(candidate(vec![12, 10, 9, 45, 2, 10, 10, 45, 10]), 78);",
            "}"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "/ Write a rsthon function to find whether a number is divisible by 11.",
        "code": "fn is_Diff(n: isize) -> bool {\n  return n % 11 == 0;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_Diff;",
            "assert_eq!(candidate(12345), false);",
            "assert_eq!(candidate(1212112), true);",
            "assert_eq!(candidate(1212), false);",
            "}"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "/ Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/rsthon-combinations-of-sum-with-tuples-in-tuple-vector/",
        "code": "fn find_combinations(test_list: Vec<(isize, isize)>) -> Vec<(isize, isize)> {\n    var num_of_tuples = test_list.size()\n    var num_of_sums = 0\n    var num_of_sums_of_tuples = 0\n    var num_of_sums_of_tuples_of_sums = 0\n    var num_of_sums_of_tuples_of_sums_of_sums = 0\n    var num_of_sums_of_tuples_of_sums_of_sums_of_sums = 0\n    var num_of_sums_of_tuples_of_sums_of_sums_of_sums_of_sums = 0\n    var num_of_sums_of_tuples_of_sums_of_sums_of_sums_of_sums_of_sums = 0\n    var num_of_sums_of_tuples_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums = 0\n    var num_of_sums_of_tuples_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums = 0\n    var num_of_sums_of_tuples_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of_sums_of\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_combinations;",
            "assert_eq!(candidate(vec![(2, 4), (6, 7), (5, 1), (6, 10)]), vec![(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]);",
            "assert_eq!(candidate(vec![(3, 5), (7, 8), (6, 2), (7, 11)]), vec![(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]);",
            "assert_eq!(candidate(vec![(4, 6), (8, 9), (7, 3), (8, 12)]), vec![(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]);",
            "}"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "/ Write a rsthon function to check whether the count of divisors is even. https://www.w3resource.com/rsthon-exercises/basic/rsthon-basic-1-exercise-24.php",
        "code": "fn count_divisors(n: isize) -> bool {\n    if (n < 2) {\n        return false;\n    }\n    if (n % 2 == 0) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_divisors;",
            "assert_eq!(candidate(10), true);",
            "assert_eq!(candidate(100), false);",
            "assert_eq!(candidate(125), true);",
            "}"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "/ Write a rsthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/",
        "code": "fn odd_length_sum(arr: Vec<isize>) -> isize {\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = odd_length_sum;",
            "assert_eq!(candidate(vec![1, 2, 4]), 14);",
            "assert_eq!(candidate(vec![1, 2, 1, 2]), 15);",
            "assert_eq!(candidate(vec![1, 7]), 8);",
            "}"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "/ Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "fn rgb_to_hsv(r: isize, g: isize, b: isize) -> Vec<f64> {\n    r = r / 255.0;\n    g = g / 255.0;\n    b = b / 255.0;\n    f64 h = (r * 6.0) / 255.0;\n    f64 s = (g * 6.0) / 255.0;\n    f64 v = (b * 6.0) / 255.0;\n    return Vec<f64>(h, s, v);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = rgb_to_hsv;",
            "assert_eq!(candidate(255, 255, 255), vec![0.0, 0.0, 100.0]);",
            "assert_eq!(candidate(0, 215, 0), vec![120.0, 100.0, 84.31372549019608]);",
            "assert_eq!(candidate(10, 215, 110), vec![149.26829268292684, 95.34883720930233, 84.31372549019608]);",
            "}"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "/ Write a function to find the product of first even and odd number of a given vector.",
        "code": "fn mul_even_odd(list1: Vec<isize>) -> isize {\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = mul_even_odd;",
            "assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 4);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2);",
            "assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 10);",
            "}"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "/ Write a function to convert tuple string to integer tuple.",
        "code": "fn tuple_str_int(test_str: String) -> (isize, isize, isize) {\n  return tuple_str_int_from_tuple(test_str)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = tuple_str_int;",
            "assert_eq!(candidate(String::from(\"(7, 8, 9)\")), (7, 8, 9));",
            "assert_eq!(candidate(String::from(\"(1, 2, 3)\")), (1, 2, 3));",
            "assert_eq!(candidate(String::from(\"(4, 5, 6)\")), (4, 5, 6));",
            "assert_eq!(candidate(String::from(\"(7, 81, 19)\")), (7, 81, 19));",
            "}"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "/ Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "fn right_insertion(a: Vec<isize>, x: isize) -> isize {\n  if (x < a.size()) {\n    return x;\n  }\n  return a.size();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = right_insertion;",
            "assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);",
            "assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);",
            "assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);",
            "}"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "/ Write a function that matches a string that has an a followed by three 'b'.",
        "code": "fn text_match_three(text: String) -> bool {\n  return text.match(/b/);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_match_three;",
            "assert_eq!(candidate(String::from(\"ac\")), false);",
            "assert_eq!(candidate(String::from(\"dc\")), false);",
            "assert_eq!(candidate(String::from(\"abbbba\")), true);",
            "assert_eq!(candidate(String::from(\"caacabbbba\")), true);",
            "}"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "/ Write a function to create a new tuple from the given string and vector.",
        "code": "fn new_tuple(test_list: Vec<String>, test_str: String) -> (String, String, String) {\n    return test_str, test_str, test_str;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = new_tuple;",
            "assert_eq!(candidate(vec![String::from(\"WEB\"), String::from(\"is\")], String::from(\"best\")), (String::from(\"WEB\"), String::from(\"is\"), String::from(\"best\")));",
            "assert_eq!(candidate(vec![String::from(\"We\"), String::from(\"are\")], String::from(\"Developers\")), (String::from(\"We\"), String::from(\"are\"), String::from(\"Developers\")));",
            "assert_eq!(candidate(vec![String::from(\"Part\"), String::from(\"is\")], String::from(\"Wrong\")), (String::from(\"Part\"), String::from(\"is\"), String::from(\"Wrong\")));",
            "}"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "/ Write a rsthon function to check whether every even index contains even numbers of a given vector.",
        "code": "fn even_position(nums: Vec<isize>) -> bool {\n    for (i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = even_position;",
            "assert_eq!(candidate(vec![3, 2, 1]), false);",
            "assert_eq!(candidate(vec![1, 2, 3]), false);",
            "assert_eq!(candidate(vec![2, 1, 4]), true);",
            "}"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "/ Write a rsthon function to count the number of vectors in a given number of vectors.",
        "code": "fn count_list(input_list: Vec<Vec<isize>>) -> isize {\n    isize n = input_list.size();\n    isize n_vec = n / 2;\n    isize n_vec_vec = n_vec / 2;\n    isize n_vec_vec_vec = n_vec_vec / 2;\n    isize n_vec_vec_vec_vec = n_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec = n_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec / 2;\n    isize n_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec = n_vec_vec_vec_vec_vec_vec\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_list;",
            "assert_eq!(candidate(vec![vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), 4);",
            "assert_eq!(candidate(vec![vec![1, 2], vec![2, 3], vec![4, 5]]), 3);",
            "assert_eq!(candidate(vec![vec![1, 0], vec![2, 0]]), 2);",
            "}"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "/ Write a rsthon function to find the last position of an element in a sorted vector.",
        "code": "fn last(arr: Vec<isize>, x: isize) -> isize {\n    if (x == 0) return 0;\n    return arr[x - 1];\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = last;",
            "assert_eq!(candidate(vec![1, 2, 3], 1), 0);",
            "assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);",
            "assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);",
            "}"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "/ Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "fn text_starta_endb(text: String) -> bool {\n    return text.startsWith('a') && text.endsWith('b')\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = text_starta_endb;",
            "assert_eq!(candidate(String::from(\"aabbbb\")), true);",
            "assert_eq!(candidate(String::from(\"aabAbbbc\")), false);",
            "assert_eq!(candidate(String::from(\"accddbbjjj\")), false);",
            "}"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "/ Write function to find the sum of all items in the given HashMap.",
        "code": "use std::collections::HashMap;\n\nfn return_sum(dict: HashMap<String, isize>) -> isize {\n  return dict.sum();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = return_sum;",
            "assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 100), (String::from(\"b\"), 200), (String::from(\"c\"), 300)])), 600);",
            "assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 25), (String::from(\"b\"), 18), (String::from(\"c\"), 45)])), 88);",
            "assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 36), (String::from(\"b\"), 39), (String::from(\"c\"), 49)])), 124);",
            "}"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "/ Write a rsthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "fn sum_in_range(l: isize, r: isize) -> isize {\n    if (l == r) {\n        return 0;\n    }\n    if (l == 0) {\n        return 1;\n    }\n    if (r == 0) {\n        return 1;\n    }\n    if (l % 2 == r % 2) {\n        return 0;\n    }\n    if (l % 2 == 0) {\n        return 1;\n    }\n    return 0;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sum_in_range;",
            "assert_eq!(candidate(2, 5), 8);",
            "assert_eq!(candidate(5, 7), 12);",
            "assert_eq!(candidate(7, 13), 40);",
            "}"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "/ Write a rsthon function to find the sum of a vector.",
        "code": "fn _sum(arr: Vec<isize>) -> isize {\n  return arr.sum();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = _sum;",
            "assert_eq!(candidate(vec![1, 2, 3]), 6);",
            "assert_eq!(candidate(vec![15, 12, 13, 10]), 50);",
            "assert_eq!(candidate(vec![0, 1, 2]), 3);",
            "}"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "/ Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "fn left_rotate(n: isize, d: isize) -> isize {\n    if (d == 0) {\n        return n;\n    }\n    if (d == 1) {\n        return n >> 1;\n    }\n    if (d == 2) {\n        return n >> 2;\n    }\n    if (d == 3) {\n        return n >> 3;\n    }\n    if (d == 4) {\n        return n >> 4;\n    }\n    if (d == 5) {\n        return n >> 5;\n    }\n    if (d == 6) {\n        return n >> 6;\n    }\n    if (d == 7) {\n        return n >> 7;\n    }\n    if (d == 8) {\n        return n >> 8;\n    }\n    if (d == 9) {\n        return n >> 9;\n    }\n    if (d == 10) {\n        return n >> 10;\n    }\n    if (d == 11) {\n        return n >> 11;\n    }\n    if (d == 12) {\n        return n >> 12;\n    }\n    if (d == 13) {\n        return n >> 13;\n    }\n    if (d == 14) {\n        return n >> 14;\n    }\n    if (d == 15) {\n        return n >> 15;\n    }\n    return n;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = left_rotate;",
            "assert_eq!(candidate(16, 2), 64);",
            "assert_eq!(candidate(10, 2), 40);",
            "assert_eq!(candidate(99, 3), 792);",
            "assert_eq!(candidate(99, 3), 792);",
            "assert_eq!(candidate(1, 3), 8);",
            "assert_eq!(candidate(5, 3), 40);",
            "assert_eq!(candidate(29, 3), 232);",
            "}"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "/ Write a rsthon function to check whether the length of the word is odd or not.",
        "code": "fn word_len(s: String) -> bool {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = word_len;",
            "assert_eq!(candidate(String::from(\"Hadoop\")), false);",
            "assert_eq!(candidate(String::from(\"great\")), true);",
            "assert_eq!(candidate(String::from(\"structure\")), true);",
            "}"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "/ Write a function to remove all whitespaces from a string.",
        "code": "fn remove_all_spaces(text: String) -> String {\n  return text.replace(/\\s+/g, \"\").trim();\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = remove_all_spaces;",
            "assert_eq!(candidate(String::from(\"python  program\")), String::from(\"pythonprogram\"));",
            "assert_eq!(candidate(String::from(\"python   programming    language\")), String::from(\"pythonprogramminglanguage\"));",
            "assert_eq!(candidate(String::from(\"python                     program\")), String::from(\"pythonprogram\"));",
            "assert_eq!(candidate(String::from(\"   python                     program\")), String::from(\"pythonprogram\"));",
            "}"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "/ Write a rsthon function to count the number of equal numbers from three given integers.",
        "code": "fn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n    return x + y + z\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = test_three_equal;",
            "assert_eq!(candidate(1, 1, 1), 3);",
            "assert_eq!(candidate(-1, -2, -3), 0);",
            "assert_eq!(candidate(1, 2, 2), 2);",
            "}"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "/ Write a rsthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/",
        "code": "fn count_rotation(arr: Vec<isize>) -> isize {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = count_rotation;",
            "assert_eq!(candidate(vec![3, 2, 1]), 1);",
            "assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);",
            "assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);",
            "assert_eq!(candidate(vec![1, 2, 3]), 0);",
            "assert_eq!(candidate(vec![1, 3, 2]), 2);",
            "}"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "/ Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "fn is_perfect_square(n: isize) -> bool {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return true;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n == 3) {\n        return true;\n    }\n    if (n == 4) {\n        return true;\n    }\n    if (n == 5) {\n        return true;\n    }\n    if (n == 6) {\n        return true;\n    }\n    if (n == 7) {\n        return true;\n    }\n    if (n == 8) {\n        return true;\n    }\n    if (n == 9) {\n        return true;\n    }\n    if (n == 10) {\n        return true;\n    }\n    if (n == 11) {\n        return true;\n    }\n    if (n == 12) {\n        return true;\n    }\n    if (n == 13) {\n        return true;\n    }\n    if (n == 14) {\n        return true;\n    }\n    if (n == 15) {\n        return true;\n    }\n    if (n == 16) {\n        return true;\n    }\n    if (n == 17) {\n        return true;\n    }\n    if (n == 18) {\n        return true;\n    }\n    if (n == 19) {\n        return true;\n    }\n    if (n == 20) {\n        return true;\n    }\n    if (n == 21) {\n        return true;\n    }\n    if (n == 22) {\n        return true;\n    }\n    if (n == 23) {\n        return true;\n    }\n    if (n == 24) {\n        return true;\n    }\n    if (n == 25) {\n        return true;\n    }\n    if (n == 26)\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_perfect_square;",
            "assert_eq!(candidate(10), false);",
            "assert_eq!(candidate(36), true);",
            "assert_eq!(candidate(14), false);",
            "assert_eq!(candidate(196), true);",
            "assert_eq!(candidate(125), false);",
            "assert_eq!(candidate(15625), true);",
            "}"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "/ Write a function to check whether the product of numbers in a vector is even or not.",
        "code": "fn is_product_even(arr: Vec<isize>) -> bool {\n    for (i in range(len(arr))) {\n        if (arr[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_product_even;",
            "assert_eq!(candidate(vec![1, 2, 3]), true);",
            "assert_eq!(candidate(vec![1, 2, 1, 4]), true);",
            "assert_eq!(candidate(vec![1, 1]), false);",
            "}"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "/ Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.",
        "code": "fn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n    Vec<isize> sum = Vec<isize>();\n    for (isize i = 0; i < lists.size(); i++) {\n        sum = sum.add(lists[i]);\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_sum_list;",
            "assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);",
            "assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);",
            "assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);",
            "}"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "/ Write a function to find maximum run of uppercase characters in the given string.",
        "code": "fn max_run_uppercase(test_str: String) -> isize {\n    const max_run_uppercase_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    const max_run_uppercase_str_len = len(max_run_uppercase_str);\n    const max_run_uppercase_str_len_max = max_run_uppercase_str_len;\n    const max_run_uppercase_str_len_min = 1;\n    const max_run_uppercase_str_len_min_max = max_run_uppercase_str_len_min;\n    const max_run_uppercase_str_len_min_max_len = max_run_uppercase_str_len_min_max;\n    const max_run_uppercase_str_len_min_max_len_max = max_run_uppercase_str_len_min_max;\n    const max_run_uppercase_str_len_min_max_len_max_len = max_run_uppercase_str_len_min_max_len;\n    const max_run_uppercase_str_len_min_max_len_max_len = max_run_uppercase_str_len_min_max_len;\n    const max_run_uppercase_str_len_min_max_len_max_len_max = max_run_uppercase_str_len_min_max_len_max;\n    const max_run_uppercase_str_len_min_max_len_max_len_max = max_run_uppercase_str_len_min_max_len_max;\n    const max_run_uppercase_str_len_min_max_len_max_len_max = max_run_uppercase_str_len_min_max_len_max;\n    const max_run_uppercase_str_len_min_max_\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = max_run_uppercase;",
            "assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);",
            "assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);",
            "assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);",
            "}"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "/ Write a rsthon function to find the first odd number in a given vector of numbers.",
        "code": "fn first_odd(nums: Vec<isize>) -> isize {\n    if (nums.size() == 0) {\n        return 0;\n    }\n    return nums[0];\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = first_odd;",
            "assert_eq!(candidate(vec![1, 3, 5]), 1);",
            "assert_eq!(candidate(vec![2, 4, 1, 3]), 1);",
            "assert_eq!(candidate(vec![8, 9, 1]), 9);",
            "}"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "/ Write a function to check if the given tuples contain the k or not.",
        "code": "fn check_K(test_tup: Vec<isize>, K: isize) -> bool {\n    for (i in test_tup) {\n        if (test_tup[i] == K) {\n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_K;",
            "assert_eq!(candidate(vec![10, 4, 5, 6, 8], 6), true);",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 7), false);",
            "assert_eq!(candidate(vec![7, 8, 9, 44, 11, 12], 11), true);",
            "}"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "/ Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "fn check_smaller(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> bool {\n    if (test_tup1.size()!= test_tup2.size()) {\n        return false;\n    }\n    for (i = 0; i < test_tup1.size(); i++) {\n        if (test_tup1[i] < test_tup2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = check_smaller;",
            "assert_eq!(candidate((1, 2, 3), (2, 3, 4)), false);",
            "assert_eq!(candidate((4, 5, 6), (3, 4, 5)), true);",
            "assert_eq!(candidate((11, 12, 13), (10, 11, 12)), true);",
            "}"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "/ Write a function to find the nth tetrahedral number.",
        "code": "fn tetrahedral_number(n: isize) -> isize {\n    if (n < 0) {\n        throw new Error(\"n must be a non-negative integer\");\n    }\n    return n;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = tetrahedral_number;",
            "assert_eq!(candidate(5), 35);",
            "assert_eq!(candidate(6), 56);",
            "assert_eq!(candidate(7), 84);",
            "}"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "/ Write a rsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "fn get_Char(strr: String) -> String {\n    var char_str = strr.toLowerCase();\n    var char_str_len = char_str.length;\n    var char_str_mod = char_str_len % 26;\n    var char_str_mod_str = char_str_mod.toString(16);\n    var char_str_mod_str_len = char_str_mod_str.length;\n    var char_str_mod_str_len_mod = char_str_mod_str_len % 26;\n    var char_str_mod_str_len_mod_str = char_str_mod_str_len_mod.toString(16);\n    var char_str_mod_str_len_mod_str_len = char_str_mod_str_len_mod_str.length;\n    var char_str_mod_str_len_mod_str_len_mod = char_str_mod_str_len_mod_str_len % 26;\n    var char_str_mod_str_len_mod_str_len_mod_str = char_str_mod_str_len_mod_str_len_mod.toString(16);\n    var char_str_mod_str_len_mod_str_len_mod_str_len = char_str_mod_str_len_mod_str_len_mod_str_len % 26;\n    var char_str_mod_str_len_mod_str_len_mod_str_len_mod_str_len = char_str_mod_str_len_mod_str_len_mod_str_len_mod_str_len % 26;\n    var char_str_mod_str_len_mod_str_len_mod_str_len_mod_str_len_mod_str_len = char_str_mod_str_len_mod_str_len_mod_str_len_mod_str_len_mod_str_len % 26;\n    var char_str_mod_str_len_mod\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = get_Char;",
            "assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));",
            "assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));",
            "assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));",
            "}"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "/ Write a function to find the nth number in the newman conway sequence.",
        "code": "fn sequence(n: isize) -> isize {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n        return 26;\n    }\n    if (n == 27) {\n        return 27;\n    }\n    if (n\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = sequence;",
            "assert_eq!(candidate(10), 6);",
            "assert_eq!(candidate(2), 1);",
            "assert_eq!(candidate(3), 2);",
            "}"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "/ Write a function to find nth centered hexagonal number.",
        "code": "fn centered_hexagonal_number(n: isize) -> isize {\n    return n // 2 * n + 1\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = centered_hexagonal_number;",
            "assert_eq!(candidate(10), 271);",
            "assert_eq!(candidate(2), 7);",
            "assert_eq!(candidate(9), 217);",
            "}"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "/ Write a function to merge three dictionaries into a single HashMap.",
        "code": "use std::collections::HashMap;\n\nfn merge_dictionaries_three(dict1: HashMap<String, String>, dict2: HashMap<String, String>, dict3: HashMap<String, String>) -> HashMap<String, String> {\n    HashMap<String, String> result = new HashMap<>();\n    result.insert(dict1.begin(), dict2.begin(), dict3.begin());\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = merge_dictionaries_three;",
            "assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"O\"), String::from(\"Orange\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"B\"), String::from(\"Black\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"O\"), String::from(\"Orange\"))]));",
            "assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))])), HashMap::from([(String::from(\"W\"), String::from(\"White\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\"))]));",
            "assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\")), (String::from(\"W\"), String::from(\"White\"))]));",
            "}"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "/ Write a function to get the frequency of all the elements in a vector, returned as a HashMap.",
        "code": "use std::collections::HashMap;\n\nfn freq_count(list1: Vec<isize>) -> HashMap<isize, isize> {\n    HashMap<isize, isize> result;\n    for (isize i = 0; i < list1.size(); i++) {\n        result[list1[i]] = i;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = freq_count;",
            "assert_eq!(candidate(vec![10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]), HashMap::from([(10, 4), (20, 4), (40, 2), (50, 2), (30, 1)]));",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]), HashMap::from([(1, 3), (2, 2), (3, 3), (4, 3)]));",
            "assert_eq!(candidate(vec![5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]), HashMap::from([(10, 1), (5, 3), (6, 2), (7, 2), (4, 2), (9, 2)]));",
            "}"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "/ Write a function to find the closest smaller number than n.",
        "code": "fn closest_num(N: isize) -> isize {\n  let min = Infinity;\n  let max = -Infinity;\n  for (let i = 0; i < N; i++) {\n    let num = N - i;\n    if (num < min) {\n      min = num;\n    }\n    if (num > max) {\n      max = num;\n    }\n  }\n  return max;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = closest_num;",
            "assert_eq!(candidate(11), 10);",
            "assert_eq!(candidate(7), 6);",
            "assert_eq!(candidate(12), 11);",
            "}"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "/ Write a function to find squares of individual elements in a vector.",
        "code": "fn square_nums(nums: Vec<isize>) -> Vec<isize> {\n  Vec<isize> squares = Vec<isize>();\n  for (isize i = 0; i < nums.size(); i++) {\n    squares = squares.add(nums[i]);\n  }\n  return squares;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = square_nums;",
            "assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);",
            "assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);",
            "assert_eq!(candidate(vec![12, 15]), vec![144, 225]);",
            "}"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "/ Write a rsthon function to find the length of the longest word.",
        "code": "fn len_log(list1: Vec<String>) -> isize {\n  let len = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let word = list1[i];\n    if (word.length > len) {\n      len = word.length;\n    }\n  }\n  return len;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = len_log;",
            "assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"PHP\"), String::from(\"bigdata\")]), 7);",
            "assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]), 3);",
            "assert_eq!(candidate(vec![String::from(\"small\"), String::from(\"big\"), String::from(\"tall\")]), 5);",
            "}"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "/ Write a function to check if a string is present as a substring in a given vector of string values.",
        "code": "fn find_substring(str1: Vec<String>, sub_str: String) -> bool {\n    for (int i = 0; i < sub_str.length(); i++) {\n        if (str1.contains(sub_str.substring(i))) {\n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_substring;",
            "assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ack\")), true);",
            "assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"abc\")), false);",
            "assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ange\")), true);",
            "}"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "/ Write a function to check whether the given number is undulating or not.",
        "code": "fn is_undulating(n: isize) -> bool {\n    return n % 2 == 0;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = is_undulating;",
            "assert_eq!(candidate(1212121), true);",
            "assert_eq!(candidate(1991), false);",
            "assert_eq!(candidate(121), true);",
            "}"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "/ Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "fn power(a: isize, b: isize) -> isize {\n    return a * b\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = power;",
            "assert_eq!(candidate(3, 4), 81);",
            "assert_eq!(candidate(2, 3), 8);",
            "assert_eq!(candidate(5, 5), 3125);",
            "}"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "/ Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "fn index_minimum(test_list: Vec<(String, isize)>) -> String {\n    return min(test_list, key=lambda x: x[1])[0]\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = index_minimum;",
            "assert_eq!(candidate(vec![(String::from(\"Rash\"), 143), (String::from(\"Manjeet\"), 200), (String::from(\"Varsha\"), 100)]), String::from(\"Varsha\"));",
            "assert_eq!(candidate(vec![(String::from(\"Yash\"), 185), (String::from(\"Dawood\"), 125), (String::from(\"Sanya\"), 175)]), String::from(\"Dawood\"));",
            "assert_eq!(candidate(vec![(String::from(\"Sai\"), 345), (String::from(\"Salman\"), 145), (String::from(\"Ayesha\"), 96)]), String::from(\"Ayesha\"));",
            "}"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "/ Write a rsthon function to find the length of the smallest vector in a vector of vectors.",
        "code": "fn Find_Min_Length(lst: Vec<Vec<isize>>) -> isize {\n  return min(lst.size(), lst.size() - 1);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = Find_Min_Length;",
            "assert_eq!(candidate(vec![vec![1], vec![1, 2]]), 1);",
            "assert_eq!(candidate(vec![vec![1, 2], vec![1, 2, 3], vec![1, 2, 3, 4]]), 2);",
            "assert_eq!(candidate(vec![vec![3, 3, 3], vec![4, 4, 4, 4]]), 3);",
            "}"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "/ Write a rsthon function to find the number of divisors of a given integer.",
        "code": "fn divisor(n: isize) -> isize {\n    let divisors = [];\n    let n_divisors = 0;\n    for (let i = 0; i < n; i++) {\n        let divisor = 1;\n        for (let j = i + 1; j < n; j++) {\n            if (n_divisors < j) {\n                divisor *= n_divisors;\n                n_divisors = j;\n            }\n        }\n        divisors.push(divisor);\n    }\n    return divisors.length;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = divisor;",
            "assert_eq!(candidate(15), 4);",
            "assert_eq!(candidate(12), 6);",
            "assert_eq!(candidate(9), 3);",
            "}"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "/ Write a function to find frequency of each element in a flattened vector of vectors, returned in a HashMap.",
        "code": "use std::collections::HashMap;\n\nfn frequency_lists(list1: Vec<Vec<isize>>) -> HashMap<isize, isize> {\n    HashMap<isize, isize> result;\n    for (auto &v : list1) {\n        result[v[0]] = v[1];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = frequency_lists;",
            "assert_eq!(candidate(vec![vec![1, 2, 3, 2], vec![4, 5, 6, 2], vec![7, 8, 9, 5]]), HashMap::from([(1, 1), (2, 3), (3, 1), (4, 1), (5, 2), (6, 1), (7, 1), (8, 1), (9, 1)]));",
            "assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12]]), HashMap::from([(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]));",
            "assert_eq!(candidate(vec![vec![20, 30, 40, 17], vec![18, 16, 14, 13], vec![10, 20, 30, 40]]), HashMap::from([(20, 2), (30, 2), (40, 2), (17, 1), (18, 1), (16, 1), (14, 1), (13, 1), (10, 1)]));",
            "}"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "/ Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "fn decimal_to_binary(n: isize) -> String {\n    if (n < 0) {\n        return \"-\" + fn.to_binary(n);\n    }\n    return fn.to_binary(n);\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = decimal_to_binary;",
            "assert_eq!(candidate(8), String::from(\"1000\"));",
            "assert_eq!(candidate(18), String::from(\"10010\"));",
            "assert_eq!(candidate(7), String::from(\"111\"));",
            "}"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "/ Write a rsthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "fn find_Rotations(str: String) -> isize {\n    let rotations = 0;\n    let max_rotations = 0;\n    let max_rotations_str = '';\n    let rotations_str = '';\n    let rotations_str_len = 0;\n    let rotations_str_len_max = 0;\n    let rotations_str_len_min = 0;\n    let rotations_str_len_min_max = 0;\n    let rotations_str_len_min_max_max = 0;\n    let rotations_str_len_min_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max_max_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max_max_max_max_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let rotations_str_len_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\n}\n\n",
        "test_list": [
            "fn main() {",
            "let candidate = find_Rotations;",
            "assert_eq!(candidate(String::from(\"aaaa\")), 1);",
            "assert_eq!(candidate(String::from(\"ab\")), 2);",
            "assert_eq!(candidate(String::from(\"abc\")), 3);",
            "}"
        ]
    }
]