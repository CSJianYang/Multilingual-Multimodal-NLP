[
    {
        "title": "Curry",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1893390,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893315,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1899693,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893891,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893791,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893683,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1894237,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1892998,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1915223,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1906664,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893390,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893315,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1899693,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893891,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893791,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1893683,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1894237,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1892998,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1915223,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            },
            {
                "id": 1906664,
                "content": [
                    {
                        "username": "AndrewFan0408",
                        "content": "I thought I got most knowledge about JS, then I saw today\\'s question.  Even reading and understand the question feels so hard"
                    },
                    {
                        "username": "khoinpb96",
                        "content": "Just realise I\\'ve not yet use JS in its full potential "
                    },
                    {
                        "username": "Jateq",
                        "content": "only Curry that i know is Stephen\\n"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahhaha"
                    },
                    {
                        "username": "Neet0110",
                        "content": "after learning c I thought java was difficult, now I bet javascript is the worst, these daily questions every time I read a question I get it but fail to solve it then go to the solutions - Copy Paste the solution, I feel so hopeless.\\n\\n"
                    },
                    {
                        "username": "ODD_BALL",
                        "content": "Dont feel hopeless anytime I dont understand one of the questions I go to the editorial and take notes to understand the concept of it."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t undestand the question, without adding any code, I get an error: `Error: An error occurred calling executing the curried function: curryFn is not a function`.\\nShould I add a function named curryFn? "
                    },
                    {
                        "username": "agora94",
                        "content": "It is not an error. Look at the commented example function call of `csum(1)(2)` and consider the return type of the curried() function."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "I got the same error. What was causing it was that I wasn\\'t passing all the parameters to the function."
                    },
                    {
                        "username": "AdamFromUPS",
                        "content": "Having this issue as well..."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "is there anyone doing these js problems without seeing editorial or am i the only one :)"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@misba_shoeib](/misba_shoeib) if u don\\'t know how to solve that question at all... editorial helps a lot, but u need to understand the editorial and try to replicate, do not copy/paste. Ofc that I for example feel bad to see the editorials... but it can\\'t be helped."
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "[@Ayush_Singh_610](/Ayush_Singh_610)  i\\'m also new to it but don\\'t u think seeing the editorials and solving is not that much effective ?\\n"
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "im new to JS so yeah i always learn through editorials n then solve the ques\\n"
                    },
                    {
                        "username": "iRONiCBAT7",
                        "content": "``` My first exposure to this currying concept. ```"
                    },
                    {
                        "username": "soobak",
                        "content": "Pretty awesome to review this topic through leetcode; Honestly have been utilizing curry without realizing it in API calls but never examined how it worked;"
                    },
                    {
                        "username": "xeniawann",
                        "content": "Do as the **Hint** tab says, and a hint on recursive call is that when calling `csum(1,2)(3)`, you return a function `func` after `csum(1,2)`, so `func` receives the last parameter and becomes `func(3)`. So inside `func(...newArgs)`, it should call *something like* `curried(...args)`. \n\nFurther hint: It should actually call `curried(...args, ...newArgs)` to \"concatenate\" the new parameters and the old parameters together."
                    },
                    {
                        "username": "antoniojsp",
                        "content": "In one of the solutions, wee find this piece of code (...nextArgs) => curried(...args, ...nextArgs), how when using a Rest Element  (...args or ...nextArgs) in this form doesn\\'t generate an issue. but if you use this syntax when defining a regular function it gives, \"yntax error: Rest element must be last element\""
                    }
                ]
            }
        ]
    },
    {
        "title": "Convert Object to JSON String",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1894766,
                "content": [
                    {
                        "username": "JustBored",
                        "content": "If you look at the submitted solutions, a lot of them just use Json.stringify. Maybe LC staff should filter them out from showing."
                    },
                    {
                        "username": "ivancea",
                        "content": "They could just remove the function in the testing code. It\\'s an easily avoidable thing in JS after all"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "[@echohowardlam](/echohowardlam) dude chill, there\\'s no notion of cheating when there\\'s no notion of competition. What do you want them to be disqualified from?\\nMy first submitted code was also that, because it was the fastest way to check that it was exactly the format they expected (I was a bit confused because they represent both the input object and the output in the same way).\\n\\nLeetcoders do really love to scream cheater at the first occasion they\\'re given"
                    },
                    {
                        "username": "echohowardlam",
                        "content": "The amount of cheater is just ridiculous. Hopefully they are silently disqualified at the last moment."
                    },
                    {
                        "username": "maxevilmind",
                        "content": "I mean, \"Please solve it without using the built-in\". No? JS is a powerful language with a lot of built-ins, using it for a reason. How about a challenging problem that would not require such constraints.\\n\\nOr shall we maybe not use a programming language at all next time? Perhaps the solution could even be pursued without the assistance of a keyboard?"
                    },
                    {
                        "username": "ivancea",
                        "content": "Most problems are solvable by \"just calling an existing implementation of the algorithm\". What are you even talking about here? What\\'s your point?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Agreed with Mister_CK. \nPretty much every language will have a built-in `sort` implementation. Yet when someone told you that you should study how sorting algorithms work I don't think you answered \"I can just use a built-in, why would I waste my time understanding it?\".\nThe point of this problem is to force you to understand the implementation of the utility. \nNot gonna lie, I didn;t enjoy it one bit, it was painstaking and my solution is twice as long as the editorial, but I did learn a lot doing it"
                    },
                    {
                        "username": "rcomesan",
                        "content": "lol the last part got me"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I mean, the whole point of LeetCode is to practice writing interesting functions. There is a lot of value in understanding how functions work under the hood. Also, there could be reasons why you wouldn\\'t want to use a build-in function or library. I thought this was quite an interesting question. Forcing you to use some recursion and typeof functions I don\\'t often use. "
                    },
                    {
                        "username": "john-hu",
                        "content": "Should we handle date?"
                    },
                    {
                        "username": "Jateq",
                        "content": "very useful thanks"
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "For just checking I was using a for in loop but it returning `[object Object]` instead of the res. Why ?\\n```js\\nvar jsonStringify = function(object) {\\n    let res ;\\n  if (typeof object === \\'object\\')   res = {} ; \\n  \\n\\n    for(let i in object){\\nif(object[i]!==undefined){\\n    res[i] = object[i];\\n}\\n    }\\n    \\n    return res\\n    \\n\\n};\\n```"
                    },
                    {
                        "username": "soupracer",
                        "content": "[@Mister_CK](/Mister_CK) Not exactly; all test cases output `[object Object]` even those without nested objects. The object output in this case is the `res` object. I believe the return value is being converted to a string for each test case, leading to the `[object Object]` output. Some test cases don\\'t have nested objects, but in those cases you\\'d see `{\"key\": [object Object]}` if we aren\\'t deep converting all values to a string. My suggestion, just to understand what is happening, is to let `res` be a string, and then append all keys and values as `res += i + String(object[i])`. From there you can add the missing pieces and start handling each object type differently."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I believe it is because you are putting an object inside of another object and returning that object, so `res={key:{another object}}`. when you find an object inside another object, try to use recursion to call your jsonStringify() function on that nested object. use recursion untill you find a primitive (string, boolean, number), then you turn those into strings."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day18 : Done Solving Today\\'s Question "
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Includes*"
                    }
                ]
            },
            {
                "id": 1896951,
                "content": [
                    {
                        "username": "JustBored",
                        "content": "If you look at the submitted solutions, a lot of them just use Json.stringify. Maybe LC staff should filter them out from showing."
                    },
                    {
                        "username": "ivancea",
                        "content": "They could just remove the function in the testing code. It\\'s an easily avoidable thing in JS after all"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "[@echohowardlam](/echohowardlam) dude chill, there\\'s no notion of cheating when there\\'s no notion of competition. What do you want them to be disqualified from?\\nMy first submitted code was also that, because it was the fastest way to check that it was exactly the format they expected (I was a bit confused because they represent both the input object and the output in the same way).\\n\\nLeetcoders do really love to scream cheater at the first occasion they\\'re given"
                    },
                    {
                        "username": "echohowardlam",
                        "content": "The amount of cheater is just ridiculous. Hopefully they are silently disqualified at the last moment."
                    },
                    {
                        "username": "maxevilmind",
                        "content": "I mean, \"Please solve it without using the built-in\". No? JS is a powerful language with a lot of built-ins, using it for a reason. How about a challenging problem that would not require such constraints.\\n\\nOr shall we maybe not use a programming language at all next time? Perhaps the solution could even be pursued without the assistance of a keyboard?"
                    },
                    {
                        "username": "ivancea",
                        "content": "Most problems are solvable by \"just calling an existing implementation of the algorithm\". What are you even talking about here? What\\'s your point?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Agreed with Mister_CK. \nPretty much every language will have a built-in `sort` implementation. Yet when someone told you that you should study how sorting algorithms work I don't think you answered \"I can just use a built-in, why would I waste my time understanding it?\".\nThe point of this problem is to force you to understand the implementation of the utility. \nNot gonna lie, I didn;t enjoy it one bit, it was painstaking and my solution is twice as long as the editorial, but I did learn a lot doing it"
                    },
                    {
                        "username": "rcomesan",
                        "content": "lol the last part got me"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I mean, the whole point of LeetCode is to practice writing interesting functions. There is a lot of value in understanding how functions work under the hood. Also, there could be reasons why you wouldn\\'t want to use a build-in function or library. I thought this was quite an interesting question. Forcing you to use some recursion and typeof functions I don\\'t often use. "
                    },
                    {
                        "username": "john-hu",
                        "content": "Should we handle date?"
                    },
                    {
                        "username": "Jateq",
                        "content": "very useful thanks"
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "For just checking I was using a for in loop but it returning `[object Object]` instead of the res. Why ?\\n```js\\nvar jsonStringify = function(object) {\\n    let res ;\\n  if (typeof object === \\'object\\')   res = {} ; \\n  \\n\\n    for(let i in object){\\nif(object[i]!==undefined){\\n    res[i] = object[i];\\n}\\n    }\\n    \\n    return res\\n    \\n\\n};\\n```"
                    },
                    {
                        "username": "soupracer",
                        "content": "[@Mister_CK](/Mister_CK) Not exactly; all test cases output `[object Object]` even those without nested objects. The object output in this case is the `res` object. I believe the return value is being converted to a string for each test case, leading to the `[object Object]` output. Some test cases don\\'t have nested objects, but in those cases you\\'d see `{\"key\": [object Object]}` if we aren\\'t deep converting all values to a string. My suggestion, just to understand what is happening, is to let `res` be a string, and then append all keys and values as `res += i + String(object[i])`. From there you can add the missing pieces and start handling each object type differently."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I believe it is because you are putting an object inside of another object and returning that object, so `res={key:{another object}}`. when you find an object inside another object, try to use recursion to call your jsonStringify() function on that nested object. use recursion untill you find a primitive (string, boolean, number), then you turn those into strings."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day18 : Done Solving Today\\'s Question "
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Includes*"
                    }
                ]
            },
            {
                "id": 1913922,
                "content": [
                    {
                        "username": "JustBored",
                        "content": "If you look at the submitted solutions, a lot of them just use Json.stringify. Maybe LC staff should filter them out from showing."
                    },
                    {
                        "username": "ivancea",
                        "content": "They could just remove the function in the testing code. It\\'s an easily avoidable thing in JS after all"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "[@echohowardlam](/echohowardlam) dude chill, there\\'s no notion of cheating when there\\'s no notion of competition. What do you want them to be disqualified from?\\nMy first submitted code was also that, because it was the fastest way to check that it was exactly the format they expected (I was a bit confused because they represent both the input object and the output in the same way).\\n\\nLeetcoders do really love to scream cheater at the first occasion they\\'re given"
                    },
                    {
                        "username": "echohowardlam",
                        "content": "The amount of cheater is just ridiculous. Hopefully they are silently disqualified at the last moment."
                    },
                    {
                        "username": "maxevilmind",
                        "content": "I mean, \"Please solve it without using the built-in\". No? JS is a powerful language with a lot of built-ins, using it for a reason. How about a challenging problem that would not require such constraints.\\n\\nOr shall we maybe not use a programming language at all next time? Perhaps the solution could even be pursued without the assistance of a keyboard?"
                    },
                    {
                        "username": "ivancea",
                        "content": "Most problems are solvable by \"just calling an existing implementation of the algorithm\". What are you even talking about here? What\\'s your point?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Agreed with Mister_CK. \nPretty much every language will have a built-in `sort` implementation. Yet when someone told you that you should study how sorting algorithms work I don't think you answered \"I can just use a built-in, why would I waste my time understanding it?\".\nThe point of this problem is to force you to understand the implementation of the utility. \nNot gonna lie, I didn;t enjoy it one bit, it was painstaking and my solution is twice as long as the editorial, but I did learn a lot doing it"
                    },
                    {
                        "username": "rcomesan",
                        "content": "lol the last part got me"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I mean, the whole point of LeetCode is to practice writing interesting functions. There is a lot of value in understanding how functions work under the hood. Also, there could be reasons why you wouldn\\'t want to use a build-in function or library. I thought this was quite an interesting question. Forcing you to use some recursion and typeof functions I don\\'t often use. "
                    },
                    {
                        "username": "john-hu",
                        "content": "Should we handle date?"
                    },
                    {
                        "username": "Jateq",
                        "content": "very useful thanks"
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "For just checking I was using a for in loop but it returning `[object Object]` instead of the res. Why ?\\n```js\\nvar jsonStringify = function(object) {\\n    let res ;\\n  if (typeof object === \\'object\\')   res = {} ; \\n  \\n\\n    for(let i in object){\\nif(object[i]!==undefined){\\n    res[i] = object[i];\\n}\\n    }\\n    \\n    return res\\n    \\n\\n};\\n```"
                    },
                    {
                        "username": "soupracer",
                        "content": "[@Mister_CK](/Mister_CK) Not exactly; all test cases output `[object Object]` even those without nested objects. The object output in this case is the `res` object. I believe the return value is being converted to a string for each test case, leading to the `[object Object]` output. Some test cases don\\'t have nested objects, but in those cases you\\'d see `{\"key\": [object Object]}` if we aren\\'t deep converting all values to a string. My suggestion, just to understand what is happening, is to let `res` be a string, and then append all keys and values as `res += i + String(object[i])`. From there you can add the missing pieces and start handling each object type differently."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I believe it is because you are putting an object inside of another object and returning that object, so `res={key:{another object}}`. when you find an object inside another object, try to use recursion to call your jsonStringify() function on that nested object. use recursion untill you find a primitive (string, boolean, number), then you turn those into strings."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day18 : Done Solving Today\\'s Question "
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Includes*"
                    }
                ]
            },
            {
                "id": 1906974,
                "content": [
                    {
                        "username": "JustBored",
                        "content": "If you look at the submitted solutions, a lot of them just use Json.stringify. Maybe LC staff should filter them out from showing."
                    },
                    {
                        "username": "ivancea",
                        "content": "They could just remove the function in the testing code. It\\'s an easily avoidable thing in JS after all"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "[@echohowardlam](/echohowardlam) dude chill, there\\'s no notion of cheating when there\\'s no notion of competition. What do you want them to be disqualified from?\\nMy first submitted code was also that, because it was the fastest way to check that it was exactly the format they expected (I was a bit confused because they represent both the input object and the output in the same way).\\n\\nLeetcoders do really love to scream cheater at the first occasion they\\'re given"
                    },
                    {
                        "username": "echohowardlam",
                        "content": "The amount of cheater is just ridiculous. Hopefully they are silently disqualified at the last moment."
                    },
                    {
                        "username": "maxevilmind",
                        "content": "I mean, \"Please solve it without using the built-in\". No? JS is a powerful language with a lot of built-ins, using it for a reason. How about a challenging problem that would not require such constraints.\\n\\nOr shall we maybe not use a programming language at all next time? Perhaps the solution could even be pursued without the assistance of a keyboard?"
                    },
                    {
                        "username": "ivancea",
                        "content": "Most problems are solvable by \"just calling an existing implementation of the algorithm\". What are you even talking about here? What\\'s your point?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Agreed with Mister_CK. \nPretty much every language will have a built-in `sort` implementation. Yet when someone told you that you should study how sorting algorithms work I don't think you answered \"I can just use a built-in, why would I waste my time understanding it?\".\nThe point of this problem is to force you to understand the implementation of the utility. \nNot gonna lie, I didn;t enjoy it one bit, it was painstaking and my solution is twice as long as the editorial, but I did learn a lot doing it"
                    },
                    {
                        "username": "rcomesan",
                        "content": "lol the last part got me"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I mean, the whole point of LeetCode is to practice writing interesting functions. There is a lot of value in understanding how functions work under the hood. Also, there could be reasons why you wouldn\\'t want to use a build-in function or library. I thought this was quite an interesting question. Forcing you to use some recursion and typeof functions I don\\'t often use. "
                    },
                    {
                        "username": "john-hu",
                        "content": "Should we handle date?"
                    },
                    {
                        "username": "Jateq",
                        "content": "very useful thanks"
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "For just checking I was using a for in loop but it returning `[object Object]` instead of the res. Why ?\\n```js\\nvar jsonStringify = function(object) {\\n    let res ;\\n  if (typeof object === \\'object\\')   res = {} ; \\n  \\n\\n    for(let i in object){\\nif(object[i]!==undefined){\\n    res[i] = object[i];\\n}\\n    }\\n    \\n    return res\\n    \\n\\n};\\n```"
                    },
                    {
                        "username": "soupracer",
                        "content": "[@Mister_CK](/Mister_CK) Not exactly; all test cases output `[object Object]` even those without nested objects. The object output in this case is the `res` object. I believe the return value is being converted to a string for each test case, leading to the `[object Object]` output. Some test cases don\\'t have nested objects, but in those cases you\\'d see `{\"key\": [object Object]}` if we aren\\'t deep converting all values to a string. My suggestion, just to understand what is happening, is to let `res` be a string, and then append all keys and values as `res += i + String(object[i])`. From there you can add the missing pieces and start handling each object type differently."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I believe it is because you are putting an object inside of another object and returning that object, so `res={key:{another object}}`. when you find an object inside another object, try to use recursion to call your jsonStringify() function on that nested object. use recursion untill you find a primitive (string, boolean, number), then you turn those into strings."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day18 : Done Solving Today\\'s Question "
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Includes*"
                    }
                ]
            },
            {
                "id": 1901872,
                "content": [
                    {
                        "username": "JustBored",
                        "content": "If you look at the submitted solutions, a lot of them just use Json.stringify. Maybe LC staff should filter them out from showing."
                    },
                    {
                        "username": "ivancea",
                        "content": "They could just remove the function in the testing code. It\\'s an easily avoidable thing in JS after all"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "[@echohowardlam](/echohowardlam) dude chill, there\\'s no notion of cheating when there\\'s no notion of competition. What do you want them to be disqualified from?\\nMy first submitted code was also that, because it was the fastest way to check that it was exactly the format they expected (I was a bit confused because they represent both the input object and the output in the same way).\\n\\nLeetcoders do really love to scream cheater at the first occasion they\\'re given"
                    },
                    {
                        "username": "echohowardlam",
                        "content": "The amount of cheater is just ridiculous. Hopefully they are silently disqualified at the last moment."
                    },
                    {
                        "username": "maxevilmind",
                        "content": "I mean, \"Please solve it without using the built-in\". No? JS is a powerful language with a lot of built-ins, using it for a reason. How about a challenging problem that would not require such constraints.\\n\\nOr shall we maybe not use a programming language at all next time? Perhaps the solution could even be pursued without the assistance of a keyboard?"
                    },
                    {
                        "username": "ivancea",
                        "content": "Most problems are solvable by \"just calling an existing implementation of the algorithm\". What are you even talking about here? What\\'s your point?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Agreed with Mister_CK. \nPretty much every language will have a built-in `sort` implementation. Yet when someone told you that you should study how sorting algorithms work I don't think you answered \"I can just use a built-in, why would I waste my time understanding it?\".\nThe point of this problem is to force you to understand the implementation of the utility. \nNot gonna lie, I didn;t enjoy it one bit, it was painstaking and my solution is twice as long as the editorial, but I did learn a lot doing it"
                    },
                    {
                        "username": "rcomesan",
                        "content": "lol the last part got me"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I mean, the whole point of LeetCode is to practice writing interesting functions. There is a lot of value in understanding how functions work under the hood. Also, there could be reasons why you wouldn\\'t want to use a build-in function or library. I thought this was quite an interesting question. Forcing you to use some recursion and typeof functions I don\\'t often use. "
                    },
                    {
                        "username": "john-hu",
                        "content": "Should we handle date?"
                    },
                    {
                        "username": "Jateq",
                        "content": "very useful thanks"
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "For just checking I was using a for in loop but it returning `[object Object]` instead of the res. Why ?\\n```js\\nvar jsonStringify = function(object) {\\n    let res ;\\n  if (typeof object === \\'object\\')   res = {} ; \\n  \\n\\n    for(let i in object){\\nif(object[i]!==undefined){\\n    res[i] = object[i];\\n}\\n    }\\n    \\n    return res\\n    \\n\\n};\\n```"
                    },
                    {
                        "username": "soupracer",
                        "content": "[@Mister_CK](/Mister_CK) Not exactly; all test cases output `[object Object]` even those without nested objects. The object output in this case is the `res` object. I believe the return value is being converted to a string for each test case, leading to the `[object Object]` output. Some test cases don\\'t have nested objects, but in those cases you\\'d see `{\"key\": [object Object]}` if we aren\\'t deep converting all values to a string. My suggestion, just to understand what is happening, is to let `res` be a string, and then append all keys and values as `res += i + String(object[i])`. From there you can add the missing pieces and start handling each object type differently."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I believe it is because you are putting an object inside of another object and returning that object, so `res={key:{another object}}`. when you find an object inside another object, try to use recursion to call your jsonStringify() function on that nested object. use recursion untill you find a primitive (string, boolean, number), then you turn those into strings."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day18 : Done Solving Today\\'s Question "
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Includes*"
                    }
                ]
            },
            {
                "id": 1901758,
                "content": [
                    {
                        "username": "JustBored",
                        "content": "If you look at the submitted solutions, a lot of them just use Json.stringify. Maybe LC staff should filter them out from showing."
                    },
                    {
                        "username": "ivancea",
                        "content": "They could just remove the function in the testing code. It\\'s an easily avoidable thing in JS after all"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "[@echohowardlam](/echohowardlam) dude chill, there\\'s no notion of cheating when there\\'s no notion of competition. What do you want them to be disqualified from?\\nMy first submitted code was also that, because it was the fastest way to check that it was exactly the format they expected (I was a bit confused because they represent both the input object and the output in the same way).\\n\\nLeetcoders do really love to scream cheater at the first occasion they\\'re given"
                    },
                    {
                        "username": "echohowardlam",
                        "content": "The amount of cheater is just ridiculous. Hopefully they are silently disqualified at the last moment."
                    },
                    {
                        "username": "maxevilmind",
                        "content": "I mean, \"Please solve it without using the built-in\". No? JS is a powerful language with a lot of built-ins, using it for a reason. How about a challenging problem that would not require such constraints.\\n\\nOr shall we maybe not use a programming language at all next time? Perhaps the solution could even be pursued without the assistance of a keyboard?"
                    },
                    {
                        "username": "ivancea",
                        "content": "Most problems are solvable by \"just calling an existing implementation of the algorithm\". What are you even talking about here? What\\'s your point?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Agreed with Mister_CK. \nPretty much every language will have a built-in `sort` implementation. Yet when someone told you that you should study how sorting algorithms work I don't think you answered \"I can just use a built-in, why would I waste my time understanding it?\".\nThe point of this problem is to force you to understand the implementation of the utility. \nNot gonna lie, I didn;t enjoy it one bit, it was painstaking and my solution is twice as long as the editorial, but I did learn a lot doing it"
                    },
                    {
                        "username": "rcomesan",
                        "content": "lol the last part got me"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I mean, the whole point of LeetCode is to practice writing interesting functions. There is a lot of value in understanding how functions work under the hood. Also, there could be reasons why you wouldn\\'t want to use a build-in function or library. I thought this was quite an interesting question. Forcing you to use some recursion and typeof functions I don\\'t often use. "
                    },
                    {
                        "username": "john-hu",
                        "content": "Should we handle date?"
                    },
                    {
                        "username": "Jateq",
                        "content": "very useful thanks"
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "For just checking I was using a for in loop but it returning `[object Object]` instead of the res. Why ?\\n```js\\nvar jsonStringify = function(object) {\\n    let res ;\\n  if (typeof object === \\'object\\')   res = {} ; \\n  \\n\\n    for(let i in object){\\nif(object[i]!==undefined){\\n    res[i] = object[i];\\n}\\n    }\\n    \\n    return res\\n    \\n\\n};\\n```"
                    },
                    {
                        "username": "soupracer",
                        "content": "[@Mister_CK](/Mister_CK) Not exactly; all test cases output `[object Object]` even those without nested objects. The object output in this case is the `res` object. I believe the return value is being converted to a string for each test case, leading to the `[object Object]` output. Some test cases don\\'t have nested objects, but in those cases you\\'d see `{\"key\": [object Object]}` if we aren\\'t deep converting all values to a string. My suggestion, just to understand what is happening, is to let `res` be a string, and then append all keys and values as `res += i + String(object[i])`. From there you can add the missing pieces and start handling each object type differently."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I believe it is because you are putting an object inside of another object and returning that object, so `res={key:{another object}}`. when you find an object inside another object, try to use recursion to call your jsonStringify() function on that nested object. use recursion untill you find a primitive (string, boolean, number), then you turn those into strings."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day18 : Done Solving Today\\'s Question "
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Includes*"
                    }
                ]
            },
            {
                "id": 1901584,
                "content": [
                    {
                        "username": "JustBored",
                        "content": "If you look at the submitted solutions, a lot of them just use Json.stringify. Maybe LC staff should filter them out from showing."
                    },
                    {
                        "username": "ivancea",
                        "content": "They could just remove the function in the testing code. It\\'s an easily avoidable thing in JS after all"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "[@echohowardlam](/echohowardlam) dude chill, there\\'s no notion of cheating when there\\'s no notion of competition. What do you want them to be disqualified from?\\nMy first submitted code was also that, because it was the fastest way to check that it was exactly the format they expected (I was a bit confused because they represent both the input object and the output in the same way).\\n\\nLeetcoders do really love to scream cheater at the first occasion they\\'re given"
                    },
                    {
                        "username": "echohowardlam",
                        "content": "The amount of cheater is just ridiculous. Hopefully they are silently disqualified at the last moment."
                    },
                    {
                        "username": "maxevilmind",
                        "content": "I mean, \"Please solve it without using the built-in\". No? JS is a powerful language with a lot of built-ins, using it for a reason. How about a challenging problem that would not require such constraints.\\n\\nOr shall we maybe not use a programming language at all next time? Perhaps the solution could even be pursued without the assistance of a keyboard?"
                    },
                    {
                        "username": "ivancea",
                        "content": "Most problems are solvable by \"just calling an existing implementation of the algorithm\". What are you even talking about here? What\\'s your point?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Agreed with Mister_CK. \nPretty much every language will have a built-in `sort` implementation. Yet when someone told you that you should study how sorting algorithms work I don't think you answered \"I can just use a built-in, why would I waste my time understanding it?\".\nThe point of this problem is to force you to understand the implementation of the utility. \nNot gonna lie, I didn;t enjoy it one bit, it was painstaking and my solution is twice as long as the editorial, but I did learn a lot doing it"
                    },
                    {
                        "username": "rcomesan",
                        "content": "lol the last part got me"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I mean, the whole point of LeetCode is to practice writing interesting functions. There is a lot of value in understanding how functions work under the hood. Also, there could be reasons why you wouldn\\'t want to use a build-in function or library. I thought this was quite an interesting question. Forcing you to use some recursion and typeof functions I don\\'t often use. "
                    },
                    {
                        "username": "john-hu",
                        "content": "Should we handle date?"
                    },
                    {
                        "username": "Jateq",
                        "content": "very useful thanks"
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "For just checking I was using a for in loop but it returning `[object Object]` instead of the res. Why ?\\n```js\\nvar jsonStringify = function(object) {\\n    let res ;\\n  if (typeof object === \\'object\\')   res = {} ; \\n  \\n\\n    for(let i in object){\\nif(object[i]!==undefined){\\n    res[i] = object[i];\\n}\\n    }\\n    \\n    return res\\n    \\n\\n};\\n```"
                    },
                    {
                        "username": "soupracer",
                        "content": "[@Mister_CK](/Mister_CK) Not exactly; all test cases output `[object Object]` even those without nested objects. The object output in this case is the `res` object. I believe the return value is being converted to a string for each test case, leading to the `[object Object]` output. Some test cases don\\'t have nested objects, but in those cases you\\'d see `{\"key\": [object Object]}` if we aren\\'t deep converting all values to a string. My suggestion, just to understand what is happening, is to let `res` be a string, and then append all keys and values as `res += i + String(object[i])`. From there you can add the missing pieces and start handling each object type differently."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I believe it is because you are putting an object inside of another object and returning that object, so `res={key:{another object}}`. when you find an object inside another object, try to use recursion to call your jsonStringify() function on that nested object. use recursion untill you find a primitive (string, boolean, number), then you turn those into strings."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "#Day18 : Done Solving Today\\'s Question "
                    },
                    {
                        "username": "RyanSadowski",
                        "content": "Includes*"
                    }
                ]
            }
        ]
    },
    {
        "title": "Filter Elements from Array",
        "question_content": "<p>Given an integer array <code>arr</code> and a filtering function <code>fn</code>, return a filtered array <code>filteredArr</code>.</p>\n\n<p>The <code>fn</code> function takes one or two arguments:</p>\n\n<ul>\n\t<li><code>arr[i]</code> - number&nbsp;from&nbsp;the <code>arr</code></li>\n\t<li><code>i</code>&nbsp;- index of <code>arr[i]</code></li>\n</ul>\n\n<p><code>filteredArr</code> should only contain the elements from the&nbsp;<code>arr</code> for which the expression <code>fn(arr[i], i)</code> evaluates to a <strong>truthy</strong> value. A&nbsp;<strong>truthy</strong>&nbsp;value is a value where&nbsp;<code>Boolean(value)</code>&nbsp;returns&nbsp;<code>true</code>.</p>\n\n<p>Please solve it without the built-in <code>Array.filter</code> method.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,10,20,30], fn = function greaterThan10(n) { return n &gt; 10; }\n<strong>Output:</strong> [20,30]\n<strong>Explanation:</strong>\nconst newArray = filter(arr, fn); // [20, 30]\nThe function filters out values that are not greater than 10</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; }\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong>\nfn can also accept the index of each element\nIn this case, the function removes elements not at index 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 }\n<strong>Output:</strong> [-2,0,1,2]\n<strong>Explanation:</strong>\nFalsey values such as 0 should be filtered out\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 3502618,
                "title": "o-1-sc-solution-in-js-and-typescript-learn-js-with-question-day-5",
                "content": "# Intuition\\nThe `filter `function takes an array and a filtering function, and returns a new array containing only the elements that pass the filter. We can think of this as a way to \"filter out\" unwanted elements from an array, leaving only the ones that meet a certain criteria.\\n\\n# Approach\\nThe approach used in this implementation is to create a new array `(filteredArr)` and loop through the original array `(arr).` At each iteration, the filtering function `(fn)` is applied to the current element and its index. If the result is truthy, the current element is added to the` filteredArr` using the` push method`.\\n\\n# Complexity\\n- Time complexity:\\nO(n), where n is the length of the input array arr. \\n\\n- Space complexity:\\nO(k), where k is the number of elements in the resulting filtered array. \\n\\n# New Learning \\nThis implementation demonstrates how to use a higher-order function (in this case, fn) to filter elements in an array based on a specific condition. It also shows how to use the push method to add elements to a new array.\\n\\n# Code in JavaScript\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```\\n\\n# Code in TypeScript \\n```\\ntype FilterFn<T> = (element: T, index?: number, array?: T[]) => boolean;\\n\\nfunction filter<T>(arr: T[], fn: FilterFn<T>): T[] {\\n    const filteredArr: T[] = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i, arr)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n}\\n\\n```\\n# Code O(1) Space  Complexity\\n\\nwe need to modify the original array in place instead of creating a new filtered array. We can keep two pointers - one pointing to the next position to be filled in the filtered array, and one pointing to the next position to be examined in the original array.\\n\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredIndex = 0;\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            if (i !== filteredIndex) {\\n                // now I will Swap current element with next available position in filtered array\\n                var temp = arr[i];\\n                arr[i] = arr[filteredIndex];\\n                arr[filteredIndex] = temp;\\n            }\\n            filteredIndex++;\\n        }\\n    }\\n    // then we can Remove the remaining elements after filteredIndex\\n    arr.length = filteredIndex;\\n    return arr;\\n};\\n```\\n\\n![upvote-2.png](https://assets.leetcode.com/users/images/3e92e718-04fa-42af-a588-e0a67fb0a932_1683591652.8206594.png)\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```\n```\\ntype FilterFn<T> = (element: T, index?: number, array?: T[]) => boolean;\\n\\nfunction filter<T>(arr: T[], fn: FilterFn<T>): T[] {\\n    const filteredArr: T[] = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i, arr)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n}\\n\\n```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredIndex = 0;\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            if (i !== filteredIndex) {\\n                // now I will Swap current element with next available position in filtered array\\n                var temp = arr[i];\\n                arr[i] = arr[filteredIndex];\\n                arr[filteredIndex] = temp;\\n            }\\n            filteredIndex++;\\n        }\\n    }\\n    // then we can Remove the remaining elements after filteredIndex\\n    arr.length = filteredIndex;\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502864,
                "title": "day5-different-approaches-with-beginner-friendly-explanation-ts-js",
                "content": "## Problem Summary\\n\\nThe problem asks us to return just the truthy value i.e to remove falsy value. \\n***\\n**So What are truthy and falsy value??**\\n* In JavaScript, the following values are considered falsy:\\n```\\n\\tfalse\\n\\t0\\n\\t-0\\n\\t0n (BigInt zero)\\n\\t\\'\\' (empty string)\\n\\tnull\\n\\tundefined\\n\\tNaN\\n```\\n* All other values are considered truthy, including:*\\n```\\n\\t\\'0\\' (string containing a single zero)\\n\\t\\'false\\' (string containing the word \"false\")\\n\\t[] (empty array)\\n\\t{} (empty object)\\n\\tfunction() {} (empty function)\\n```\\n***\\n## **Approaches:**\\n**Approach 1: Using a `for loop` and `Array.push`**\\n* One way to solve this problem is to iterate through the input array using a for loop, and for each element, call the filtering function with two arguments - the element itself and its index. \\n* If the filtering function returns a truthy value, add the element to a result array using the push method.\\n<iframe src=\"https://leetcode.com/playground/VESffdcc/shared\" frameBorder=\"0\" width=\"700\" height=\"300\"></iframe>\\n\\n***\\n**Approach 2: Using `Array.reduce`**\\nAnother way to solve this problem is to use the `Array.reduce` method. We can use `Array.reduce` to accumulate the elements that satisfy the filtering function into a new array.\\n<iframe src=\"https://leetcode.com/playground/gCu4hqjx/shared\" frameBorder=\"0\" width=\"700\" height=\"300\"></iframe>\\n\\n***\\n**Approach 3: Using `Array.forEach`**\\n* We can also solve this problem using the `Array.forEach` method. We can use `Array.forEach` to iterate through the input array, and for each element, call the filtering function with two arguments - the element itself and its index.\\n* If the filtering function returns a truthy value, add the element to a result array using the push method.\\n```\\nvar filter = function(arr, fn) {\\n  const result = [];\\n  arr.forEach((value, index) => {\\n    if (fn(value, index)) {\\n      result.push(value);\\n    }\\n  });\\n  return result;\\n};\\n```\\n***\\n**Approach 4: Using `Array.map` and `Array.reduce`**\\nWe can also use the `Array.map` method to create a new array containing only the elements that satisfy the filtering function, and then use `Array.reduce` to remove any undefined elements from the result array.\\n```\\nvar filter = function(arr, fn) {\\n  return arr.map((value, index) => {\\n    if (fn(value, index)) {\\n      return value;\\n    }\\n  }).reduce((result, value) => {\\n    if (value !== undefined) {\\n      result.push(value);\\n    }\\n    return result;\\n  }, []);\\n};\\n```\\n***\\n**Approach 5: Using `Array.flatMap()`**\\n* The `flatMap` method applies a function to each element of an array and flattens the result into a new array. \\n* In this case, the function passed to `flatMap` takes two arguments, the current element `i` and its index `j`, and uses a ternary operator to check if `fn(i, j) `is `truthy`. If it is, the function returns an array containing `i`, otherwise it returns an empty array. \\n* The `flatMap` method flattens these arrays into a new array containing only the elements that satisfies our filtering function.\\n```\\nvar filter = function(arr, fn) {\\n    return arr.flatMap((i, j) => fn(i, j) ? [i] : []);\\n};\\n```\\n***\\nYou can support this article by upvoitng \\u2B06\\u2B06!!\\n***\\nFeel free to comment for any doubts or appreciation!!",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n\\tfalse\\n\\t0\\n\\t-0\\n\\t0n (BigInt zero)\\n\\t\\'\\' (empty string)\\n\\tnull\\n\\tundefined\\n\\tNaN\\n```\n```\\n\\t\\'0\\' (string containing a single zero)\\n\\t\\'false\\' (string containing the word \"false\")\\n\\t[] (empty array)\\n\\t{} (empty object)\\n\\tfunction() {} (empty function)\\n```\n```\\nvar filter = function(arr, fn) {\\n  const result = [];\\n  arr.forEach((value, index) => {\\n    if (fn(value, index)) {\\n      result.push(value);\\n    }\\n  });\\n  return result;\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n  return arr.map((value, index) => {\\n    if (fn(value, index)) {\\n      return value;\\n    }\\n  }).reduce((result, value) => {\\n    if (value !== undefined) {\\n      result.push(value);\\n    }\\n    return result;\\n  }, []);\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n    return arr.flatMap((i, j) => fn(i, j) ? [i] : []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406687,
                "title": "8-ways-to-filter-map-reduce-filter-for-of-for-while-for-each-flatmap",
                "content": "## Complexity : \\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n### For Each loop\\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   arr.forEach((x,i) => {\\n      if(fn(x,i)){\\n         newArray.push(x);\\n      }\\n   });\\n   return newArray;\\n};\\n```\\n### For of loop\\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   let i=0;\\n   for(const x of arr){\\n      if(fn(x,i)){\\n         newArray.push(x);\\n      }\\n      i++;\\n   }\\n   return newArray;\\n};\\n```\\n\\n### Array.map()\\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   arr.map((x,i) => {\\n      if(fn(x,i)){\\n         newArray.push(x);\\n      }\\n   });\\n   return newArray;\\n};\\n```\\n\\n### Array.reduce()\\n```\\nvar filter = function(arr, fn) {\\n   return arr.reduce((newArray, x, i) => {\\n      if(fn(x, i)){\\n         newArray.push(x);\\n      }\\n      return newArray;\\n   }, []);\\n};\\n```\\n\\n### For loop\\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   for(let i=0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n         newArray.push(arr[i]);\\n      }\\n   }\\n   return newArray;\\n};\\n```\\n\\n### While loop\\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   let i=0;\\n   while(i<arr.length){\\n      if(fn(arr[i],i)){\\n         newArray.push(arr[i]);\\n      }\\n      i++;\\n   }\\n   return newArray;\\n};\\n```\\n### Array.filter() [Restricted for this problem]\\n``` \\nvar filter = function(arr, fn) {\\n    return arr.filter(fn);\\n};\\n```\\n\\n### Array.flatMap()   \\ncredit to [@Nathan](/SkookumChoocher)\\n```\\nvar filter = function(arr, fn) {\\n    return arr.flatMap((x, i) => fn(x, i) ? [x] : []);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   arr.forEach((x,i) => {\\n      if(fn(x,i)){\\n         newArray.push(x);\\n      }\\n   });\\n   return newArray;\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   let i=0;\\n   for(const x of arr){\\n      if(fn(x,i)){\\n         newArray.push(x);\\n      }\\n      i++;\\n   }\\n   return newArray;\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   arr.map((x,i) => {\\n      if(fn(x,i)){\\n         newArray.push(x);\\n      }\\n   });\\n   return newArray;\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n   return arr.reduce((newArray, x, i) => {\\n      if(fn(x, i)){\\n         newArray.push(x);\\n      }\\n      return newArray;\\n   }, []);\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   for(let i=0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n         newArray.push(arr[i]);\\n      }\\n   }\\n   return newArray;\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   let i=0;\\n   while(i<arr.length){\\n      if(fn(arr[i],i)){\\n         newArray.push(arr[i]);\\n      }\\n      i++;\\n   }\\n   return newArray;\\n};\\n```\n``` \\nvar filter = function(arr, fn) {\\n    return arr.filter(fn);\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n    return arr.flatMap((x, i) => fn(x, i) ? [x] : []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502664,
                "title": "2634-filter-elements-level-up-your-javascript-skills-with-these-intuitive-implementations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n>We need to filter the array based on a given condition, i.e., a filtering function `fn`. We can iterate over the array and apply the function `fn` on each element to check whether it satisfies the condition. If it does, we append that element to our resultant array\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n>1. Create an empty array `resultantArr` that will contain the filtered elements.\\n>2. Loop through the input array `arr`.\\n>3. For each element `arr[i]`, apply the function `fn` to check whether it satisfies the condition.\\n>4. If it does, append the element `arr[i]` to `resultantArr`.\\n>5. Return the `resultantArr`.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n>We need to loop through the entire array `arr` once, and for each element, we call the function `fn` once. Therefore, the time complexity of this approach is O(n), where n is the length of the input array `arr`.\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n>We are using an additional array `resultantArr` to store the filtered elements. The maximum size of this array will be equal to the size of the input array `arr`. Therefore, the space complexity of this approach is also O(n).\\n\\n\\n# Code\\n``` JS []\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const filteredArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      filteredArr.push(arr[i]);\\n    }\\n  }\\n  return filteredArr;\\n};\\n\\n```\\n```TS []\\nfunction filter<T>(arr: T[], fn: (val: T, index: number) => boolean): T[] {\\n  const result: T[] = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n}\\n\\n```\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n> #### There are several ways to implement a filter function that filters an array based on a given condition. Here are a few more ways to solve the same problem:\\n1. Using Array.reduce():\\n```\\nfunction filter(arr, fn) {\\n  return arr.reduce((result, val, index) => {\\n    if (fn(val, index)) {\\n      result.push(val);\\n    }\\n    return result;\\n  }, []);\\n}\\n\\n```\\n2. Using a for...of loop:\\n```\\nfunction filter(arr, fn) {\\n  const result = [];\\n  for (const [index, val] of arr.entries()) {\\n    if (fn(val, index)) {\\n      result.push(val);\\n    }\\n  }\\n  return result;\\n}\\n```\\n3. Using a for...of loop with Array.from():\\n```\\nfunction filter(arr, fn) {\\n  return Array.from(arr, (val, index) => fn(val, index) && val);\\n}\\n```\\n4. Using recursion:\\n```\\nfunction filter(arr, fn) {\\n  if (arr.length === 0) {\\n    return [];\\n  } else {\\n    const [head, ...tail] = arr;\\n    return fn(head, 0) ? [head, ...filter(tail, fn)] : filter(tail, fn);\\n  }\\n}\\n```\\n\\n# Important topic to Learn\\n\\n| Sr No. | Topic |\\n|-----|-----|\\n1.|Arrays|\\n2.|Functions|\\n3.|Truthy and falsy values|\\n4.|Higher-order functions|\\n5.|Function expressions|\\n\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "``` JS []\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const filteredArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      filteredArr.push(arr[i]);\\n    }\\n  }\\n  return filteredArr;\\n};\\n\\n```\n```TS []\\nfunction filter<T>(arr: T[], fn: (val: T, index: number) => boolean): T[] {\\n  const result: T[] = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n}\\n\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```\\nfunction filter(arr, fn) {\\n  return arr.reduce((result, val, index) => {\\n    if (fn(val, index)) {\\n      result.push(val);\\n    }\\n    return result;\\n  }, []);\\n}\\n\\n```\n```\\nfunction filter(arr, fn) {\\n  const result = [];\\n  for (const [index, val] of arr.entries()) {\\n    if (fn(val, index)) {\\n      result.push(val);\\n    }\\n  }\\n  return result;\\n}\\n```\n```\\nfunction filter(arr, fn) {\\n  return Array.from(arr, (val, index) => fn(val, index) && val);\\n}\\n```\n```\\nfunction filter(arr, fn) {\\n  if (arr.length === 0) {\\n    return [];\\n  } else {\\n    const [head, ...tail] = arr;\\n    return fn(head, 0) ? [head, ...filter(tail, fn)] : filter(tail, fn);\\n  }\\n}\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406573,
                "title": "detailed-explanation-beginner-friendly",
                "content": "# Explanation:\\n1. The filter function accepts an input array of integers arr and a filtering function fn.\\n2. It initializes an empty array result.\\n3. It then iterates through each element in the arr array using a for loop. For each element, it calls the filtering function fn with the element value and its index.\\n4. If the filtering function returns a truthy value, it adds the element to the result array using the push method.\\n5. After processing every element in the array, it returns the result array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N);\\n\\n- Space complexity:\\nO(1);\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  var result = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};\\n```\\nPlease upvote if found helpful. :)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  var result = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3407369,
                "title": "easy-solution-by-create-new-array-and-push-element",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const res = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      res.push(arr[i]);\\n    }\\n  }\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const res = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      res.push(arr[i]);\\n    }\\n  }\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503146,
                "title": "o-n-commented-solution-examples",
                "content": "\\nThe code  defines a **function** named filter that takes two **arguments**: an ***array (arr)*** and a **function** (fn). The filter function then loops through each element in the arr array and applies the fn function to each element. If the result of calling fn on an element is truthy (i.e., not false, 0, null, undefined, NaN, or an empty string), the element is added to a new array (ans). The filter function then returns the ans array containing all elements for which the fn function returned a truthy value.\\n\\nHere\\'s an example usage of the filter function:\\n```\\nvar numbers = [1, 2, 3, 4, 5];\\n\\nvar evenNumbers = filter(numbers, function(num) {\\n  return num % 2 === 0;\\n});\\n\\nconsole.log(evenNumbers); // Output: [2, 4]\\n\\n```\\nIn this **example** , we call the ***filter function*** with an array of numbers (numbers) and a function that checks whether a number is even. The filter function returns a **new array** (evenNumbers) containing only the even numbers from the numbers array. The evenNumbers array is then logged to the console.\\n\\n\\n***Here is the solution to the given problem statement***\\n\\n```\\n\\nvar filter = function(arr, fn) {\\n    var ans = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      ans.push(arr[i]);\\n    }\\n  }\\n  return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nvar numbers = [1, 2, 3, 4, 5];\\n\\nvar evenNumbers = filter(numbers, function(num) {\\n  return num % 2 === 0;\\n});\\n\\nconsole.log(evenNumbers); // Output: [2, 4]\\n\\n```\n```\\n\\nvar filter = function(arr, fn) {\\n    var ans = [];\\n  for (var i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      ans.push(arr[i]);\\n    }\\n  }\\n  return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3408756,
                "title": "leetcode-the-hard-way-o-n",
                "content": "Javascript\\n\\n```js\\nvar filter = function(arr, fn) {\\n    let res = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            res.push(arr[i])\\n        }\\n    }\\n    return res\\n};\\n```\\n\\nTypescript\\n\\n```ts\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    let res: number[] = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            res.push(arr[i])\\n        }\\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "```js\\nvar filter = function(arr, fn) {\\n    let res = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            res.push(arr[i])\\n        }\\n    }\\n    return res\\n};\\n```\n```ts\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    let res: number[] = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            res.push(arr[i])\\n        }\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3644545,
                "title": "javascipt-easy-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result=[]\\n    for(let i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            result.push(arr[i])\\n        }\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result=[]\\n    for(let i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            result.push(arr[i])\\n        }\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503277,
                "title": "very-simple-and-easy-solution-in-js-wow-0-o",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result = []\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            result.push(arr[i])\\n        }\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result = []\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            result.push(arr[i])\\n        }\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502916,
                "title": "easy-javascript-solution-using-implementation-of-filter-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCall fn method on each array element and if fn for current element return true then push that element into new arr.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n using our own filter method.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        {\\n           newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        {\\n           newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3498551,
                "title": "explained-the-process-javascript",
                "content": "# Intuition\\nTry not use filter method.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1) We are given a array `arr` and `fn` that returns a boolean.\\n2) There is a condition in `fn` function, if that condition satisfies then returns true else false.\\n3) So check if `fn` is true, if it is then store `arr[i]` in a array.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` JavaScript []\\nvar filter = function(arr, fn) {\\n    var n = arr.length, temp = 0;\\n    nums = [];\\n    for(var i = 0; i < n; i++){\\n        if(fn(arr[i], i)){\\n            nums[temp++] = arr[i];\\n        }\\n    }\\n    return nums;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` JavaScript []\\nvar filter = function(arr, fn) {\\n    var n = arr.length, temp = 0;\\n    nums = [];\\n    for(var i = 0; i < n; i++){\\n        if(fn(arr[i], i)){\\n            nums[temp++] = arr[i];\\n        }\\n    }\\n    return nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4029371,
                "title": "accepted-fast-javascript-beats-80",
                "content": "# Complexity\\n- Time complexity : $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# JavaScript :\\n -- | Details | --\\n--- | --- | ---:\\n**Runtime** | **45** *ms* | *Beats* **90%**\\n**Memory** | **40** *MB* | *Beats* **76%**\\n```\\nlet filter = (arr, fn) => {\\n    let i=0, result = [];\\n    for(let num of arr)\\n        if(fn(num, i++))\\n            result.push(num);\\n    return result;\\n};\\n```\\n## UPVOTE : |\\n![waiting-tom-and-jerry.gif](https://assets.leetcode.com/users/images/4f0cc754-71e1-4cfc-816b-36a94c20b17f_1678366238.9546802.gif)",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nlet filter = (arr, fn) => {\\n    let i=0, result = [];\\n    for(let num of arr)\\n        if(fn(num, i++))\\n            result.push(num);\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503071,
                "title": "java-script-solution-for-filter-elements-from-array-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- The filter function is a higher-order function commonly used in functional programming.\\n- It takes an array and a predicate function as input and returns a new array containing only the elements that pass the predicate.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- The filter function takes two parameters: arr (the input array) and fn (the predicate function).\\n- It initializes a variable size to 0 to keep track of the new array\\'s size.\\n- It iterates through the elements of the arr array using a loop variable i.\\n- For each element, it applies the predicate function fn with two arguments: the current element of arr and the index i.\\n- If the predicate returns true, indicating that the element satisfies the condition, it is assigned to the position size in the arr array, and size is incremented.\\n- After iterating through all the elements, any excess elements beyond the new size are removed from the arr array using the pop() method.\\n- Finally, the modified arr array, containing only the filtered elements, is returned.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution is O(n), where n is the length of the input array arr.\\nWe iterate through the entire array, visiting each element once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1) because the filter function performs the filtering operation in-place, modifying the original arr array without using any additional memory.\\nThe returned array is the same as the input array.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n     let size = 0;\\n    for (let i = 0; i < arr.length; ++i) {\\n        if (fn(arr[i], i)) {\\n            arr[size] = arr[i];\\n            size++;\\n        }\\n    }\\n    // Ensure array is of length size\\n    while (arr.length > size) {\\n        arr.pop();\\n    }\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n     let size = 0;\\n    for (let i = 0; i < arr.length; ++i) {\\n        if (fn(arr[i], i)) {\\n            arr[size] = arr[i];\\n            size++;\\n        }\\n    }\\n    // Ensure array is of length size\\n    while (arr.length > size) {\\n        arr.pop();\\n    }\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3410063,
                "title": "truthy-concept-explained-easy-javascript-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nIn Javascript, all values are considered truthy unless they are defined as falsy, when encountered in a boolean context. That is, all values are truthy except: false, 0, -0, 0n, \"\", null, undefined, and NaN. The `fn` function will return a value for each element of `arr` when we loop through it. All we need to do is check if the value is truthy. Javascript does that for us!\\n\\n```\\nif (3) {\\n  // The below code will execute!\\n  console.log(\\'This will execute because the number 3 is a truthy value!\\');\\n}\\n```\\n\\n\\nIf the value is true, we push it to the new array. Return the new array `newArr` at the end of the cycle.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [];\\n\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i], i)){\\n            newArr.push(arr[i]);\\n        }\\n    }\\n\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nif (3) {\\n  // The below code will execute!\\n  console.log(\\'This will execute because the number 3 is a truthy value!\\');\\n}\\n```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [];\\n\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i], i)){\\n            newArr.push(arr[i]);\\n        }\\n    }\\n\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406431,
                "title": "two-efficient-solutions",
                "content": "# Approach\\nThe function uses a for loop to iterate over each element in the input array. The loop initializes a new array named newArr and iterates over each element in the input array. For each element, the filtering function fn is applied to the element and its index. If the filtering function returns a truthy value, the element is added to newArr using the push() method.\\n# Complexity\\n- Time complexity:\\n\\nThe function iterates over each element in the input array once, so the time complexity is **O(n)**, where n is the length of the input array.\\n\\n- Space complexity:\\n\\nThe function creates a new array to hold the filtered elements. The size of this array depends on the number of elements that pass the filtering condition. Therefore, the worst-case space complexity is **O(n)**, where n is the length of the input array if all elements pass the filtering condition.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  newArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    element = arr[i];\\n    if (fn(element, i)) {\\n      newArr.push(element);\\n    }\\n  }\\n  return newArr;\\n};\\n```\\n\\n**One-Liner:**\\n\\n```\\nconst filter = (arr, fn) => arr.reduce((acc, curr, i) => (fn(curr, i) ? [...acc, curr] : acc), []);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  newArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    element = arr[i];\\n    if (fn(element, i)) {\\n      newArr.push(element);\\n    }\\n  }\\n  return newArr;\\n};\\n```\n```\\nconst filter = (arr, fn) => arr.reduce((acc, curr, i) => (fn(curr, i) ? [...acc, curr] : acc), []);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3829258,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var ar=[];\\n    for(var i=0; i<arr.length; i++){\\n        if(fn(arr[i], i)){\\n            ar.push(arr[i]);\\n        }\\n    }\\n    return ar;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var ar=[];\\n    for(var i=0; i<arr.length; i++){\\n        if(fn(arr[i], i)){\\n            ar.push(arr[i]);\\n        }\\n    }\\n    return ar;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3505196,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDoing the same as question says\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate a empty array(\\'arry\\' here).\\nRun a for loop.\\nCheck condition for all whether fn(arr[i], i) is true or not, if true push it into new array that we created in begining(\\'arry\\')\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var arry = [];\\n    for(let i = 0; i < arr.length; i++)\\n    {\\n        if(fn(arr[i], i)) arry.push(arr[i]);\\n    }\\n    return arry;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var arry = [];\\n    for(let i = 0; i < arr.length; i++)\\n    {\\n        if(fn(arr[i], i)) arry.push(arr[i]);\\n    }\\n    return arry;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3504565,
                "title": "easy-to-understand-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  let result = []\\n    for(let i = 0; i < arr.length; i++){\\n        let currentItem = fn(arr[i], i)\\n        if(currentItem) result.push(arr[i])\\n    }\\n\\n    return result \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  let result = []\\n    for(let i = 0; i < arr.length; i++){\\n        let currentItem = fn(arr[i], i)\\n        if(currentItem) result.push(arr[i])\\n    }\\n\\n    return result \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3504180,
                "title": "easy-approach",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var ar=[];\\n    for(var i=0; i<arr.length; i++){\\n        if(fn(arr[i], i)){\\n            ar.push(arr[i]);\\n        }\\n    }\\n    return ar;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var ar=[];\\n    for(var i=0; i<arr.length; i++){\\n        if(fn(arr[i], i)){\\n            ar.push(arr[i]);\\n        }\\n    }\\n    return ar;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503997,
                "title": "4-day-js-solution",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n\\n- Space complexity:O(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) \\n{\\n    const newArr = [];\\n    for (let i = 0; i < arr.length; ++i) \\n    {\\n        if (fn(arr[i], i)) \\n        {\\n            newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) \\n{\\n    const newArr = [];\\n    for (let i = 0; i < arr.length; ++i) \\n    {\\n        if (fn(arr[i], i)) \\n        {\\n            newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503682,
                "title": "ts-in-place-2-pointer-filtering-53ms-42-7mb",
                "content": "I know the problem demands us to create a new array, but since it does not really check for that and we might want to squeeze some more efficieny and fun out of an otherwise pretty plain problem, let\\'s do it in place!\\n\\nTo do so, we will need a writing pointer `w`, initially set to `0`.\\n\\nThen we will use a pointer `r` for reading and for each element that match our requirements (ie: returining a truthy value for `fn(arr[r], r)`), we will write down the element in place (even if it is already there) and then advance the pointer to the next cell.\\n\\nFor example, with `arr = [1, 5, 4, 3, 2, 8]` and `fn = (el, r) => el - i < 2`, we will have:\\n\\n```ts\\n// initial state, the | shows where w is\\n    1   5   4   3   2   8\\n    |\\n// 1st step, (1 - 0) < 2 === true, so we write 1 in position 0 and move w forward 1 step\\n    1   5   4   3   2   8\\n        |\\n// 2nd step, (5 - 1) < 2 === false, so we do nothing\\n    1   5   4   3   2   8\\n        |\\n// 3rd step, (4 - 2) < 2 === false, so we do nothing\\n    1   5   4   3   2   8\\n        |\\n// 4th step, (3 - 3) < 2 === true, so we write it in w and advance w\\n    1   3   4   3   2   8\\n            |\\n// 5th step, (2 - 4) < 2 === true, so we write it in w and advance w\\n    1   3   2   3   2   8\\n                |\\n// 6th step, (8 - 5) < 2 === false, so we do nothing\\n    1   3   2   3   2   8\\n                |\\n// final step, we cut arr to have only w elements\\n    1   3   2\\n```\\n\\nThe last step is rather easy: to cut an array short in JS/TS is pretty easy, we just have to force its `.length` property to a specific value.\\n\\nFinally, we can `return` `arr` :)\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```ts\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    // support variables\\n    let w = 0;\\n    // keeping only valid elements in arr\\n    for (let r = 0, len = arr.length; r < len; r++) if (fn(arr[r], r)) arr[w++] = arr[r];\\n    // cutting off extra cells\\n    arr.length = w;\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```ts\\n// initial state, the | shows where w is\\n    1   5   4   3   2   8\\n    |\\n// 1st step, (1 - 0) < 2 === true, so we write 1 in position 0 and move w forward 1 step\\n    1   5   4   3   2   8\\n        |\\n// 2nd step, (5 - 1) < 2 === false, so we do nothing\\n    1   5   4   3   2   8\\n        |\\n// 3rd step, (4 - 2) < 2 === false, so we do nothing\\n    1   5   4   3   2   8\\n        |\\n// 4th step, (3 - 3) < 2 === true, so we write it in w and advance w\\n    1   3   4   3   2   8\\n            |\\n// 5th step, (2 - 4) < 2 === true, so we write it in w and advance w\\n    1   3   2   3   2   8\\n                |\\n// 6th step, (8 - 5) < 2 === false, so we do nothing\\n    1   3   2   3   2   8\\n                |\\n// final step, we cut arr to have only w elements\\n    1   3   2\\n```\n```ts\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    // support variables\\n    let w = 0;\\n    // keeping only valid elements in arr\\n    for (let r = 0, len = arr.length; r < len; r++) if (fn(arr[r], r)) arr[w++] = arr[r];\\n    // cutting off extra cells\\n    arr.length = w;\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503155,
                "title": "3-lines-code-o-1-sc-javascript-typescript-what-is-filter",
                "content": "# Intuition\\nFilter - Filter we use for select some data from big data using some condition (Like filtering the harmful particle from water).\\n\\nInput -> Filter -> Output\\n\\n# Approach\\nWe have given array and filter function , we pass every element of the array to the function, if it\\'s true we will add that element to the resultant array . For this we need 1 traversal from array.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\nJavascript\\n```\\nvar filter = function(arr, fn) {\\n    const res = [];\\n    for(let i=0;i<arr.length;++i) fn(arr[i],i) && res.push(arr[i]);\\n    return res;\\n};\\n```\\nTypescript\\n```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    const res: number[] = [];\\n    for(let i=0;i<arr.length;++i) fn(arr[i],i) && res.push(arr[i]);\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "```\\nvar filter = function(arr, fn) {\\n    const res = [];\\n    for(let i=0;i<arr.length;++i) fn(arr[i],i) && res.push(arr[i]);\\n    return res;\\n};\\n```\n```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    const res: number[] = [];\\n    for(let i=0;i<arr.length;++i) fn(arr[i],i) && res.push(arr[i]);\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502623,
                "title": "4-easy-solution-with-video-explanation-in-js-ts-learn-concepts-first",
                "content": "\\n\\n## The solution (explained below)\\n\\n```javascript []\\n**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   for(let i=0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n         newArray.push(arr[i]);\\n      }\\n   }\\n   return newArray;\\n};\\n\\n// var filter = function(arr, fn) {\\n//    return arr.filter((x, i) => fn(x,i));\\n// };\\n\\n// var filter = function(arr, fn) {\\n//    let newArray = [];\\n//    arr.forEach((x,i) => {\\n//       if(fn(x,i)){\\n//          newArray.push(x);\\n//       }\\n//    });\\n//    return newArray;\\n// };\\n\\n// var filter = function(arr, fn) {\\n//    let newArray = [];\\n//    arr.map((x,i) => {\\n//       if(fn(x,i)){\\n//          newArray.push(x);\\n//       }\\n//    });\\n//    return newArray;\\n// };\\n\\n\\n```\\n\\n\\n```typescript []\\nconst filter = function<T>(arr: T[], fn: (value: T, index: number) => boolean): T[] {\\n   let newArray: T[] = [];\\n   for(let i=0;i<arr.length;i++){\\n      if(fn(arr[i], i)){\\n         newArray.push(arr[i]);\\n      }\\n   }\\n   return newArray;\\n};\\n```\\n\\n\\n### Learn concept first\\n\\nOther good resources:-\\n* [Loops in JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\\n* [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\\n* [Filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\\n\\n___\\n\\n\\n## Intution - steps to think (explained in video too)\\n* The problem is asking us to return new array\\n* then we have to apply the function to each element, hence loop it\\n* only push element in new array if the given function return `true`.\\n\\n\\n---\\n\\n\\n## Complexity\\nTime complexity:\\nThe time complexity of the above solution is O(n), where n is the length of the input array arr.\\n\\nSpace complexity:\\nThe space complexity of the solution is O(n) as well. This is because we are creating a new array mappedArray with the same length as the input array to store the transformed elements.\\n\\n\\n# Easy Video Explanation\\n[Video link, click here.](https://youtu.be/ED-g8nQD_nA)\\n[Join 100+ other JS lovers](https://discord.gg/2BxFN63EFc) \\uD83D\\uDE80\\n[Reach out to me on Linkedin.](https://www.linkedin.com/in/anshulontech/) \\uD83D\\uDE4F\\uD83C\\uDFFB\\n\\nhttps://youtu.be/ED-g8nQD_nA\\n\\n![upvote me.jpeg](https://assets.leetcode.com/users/images/bc2afe3a-768d-42cb-aba8-39023ef69af2_1683593182.9982169.jpeg)\\n\\n[Join 100+ other JS lovers](https://discord.gg/2BxFN63EFc) \\uD83D\\uDE80\\n[Reach out to me on Linkedin.](https://www.linkedin.com/in/anshulontech/) \\uD83D\\uDE4F\\uD83C\\uDFFB\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript []\\n**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar filter = function(arr, fn) {\\n   let newArray = [];\\n   for(let i=0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n         newArray.push(arr[i]);\\n      }\\n   }\\n   return newArray;\\n};\\n\\n// var filter = function(arr, fn) {\\n//    return arr.filter((x, i) => fn(x,i));\\n// };\\n\\n// var filter = function(arr, fn) {\\n//    let newArray = [];\\n//    arr.forEach((x,i) => {\\n//       if(fn(x,i)){\\n//          newArray.push(x);\\n//       }\\n//    });\\n//    return newArray;\\n// };\\n\\n// var filter = function(arr, fn) {\\n//    let newArray = [];\\n//    arr.map((x,i) => {\\n//       if(fn(x,i)){\\n//          newArray.push(x);\\n//       }\\n//    });\\n//    return newArray;\\n// };\\n\\n\\n```\n```typescript []\\nconst filter = function<T>(arr: T[], fn: (value: T, index: number) => boolean): T[] {\\n   let newArray: T[] = [];\\n   for(let i=0;i<arr.length;i++){\\n      if(fn(arr[i], i)){\\n         newArray.push(arr[i]);\\n      }\\n   }\\n   return newArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3428027,
                "title": "2-easy-approaches-reduce-loop-js-ts-detail-explanation-concise-readable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires filtering the input array `arr` based on a filtering function `fn` that takes two arguments: the array element and its index. We can use a simple loop to iterate over the array elements and check if the filtering function returns a truthy value for each element. If it does, we can add the element to a new array filteredArray.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Create an empty array `filteredArray` to store the filtered elements.\\n- Loop through each element `arr[i]` in the input array arr.\\n- Check if the filtering function `fn(arr[i], i)` returns a truthy value.\\n- If it does, push `arr[i]` to `filteredArray`.\\n- Return `filteredArray`.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution is $$O(n)$$, where n is the length of the input array arr. This is because we iterate over each element in the array once and perform a constant amount of work for each element.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this solution is $$O(m)$$, where m is the number of elements that satisfy the filtering condition (i.e., the number of elements in the filteredArray). This is because we create a new array filteredArray to store these elements. \\n\\nIn the **worst case**, where all elements satisfy the filtering condition, the space complexity is $$O(n)$$ (i.e., the same as the input array).\\n\\n# Code \\n```javascript []\\nfunction filterArray(arr, fn) {\\n  const filteredArray = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      filteredArray.push(arr[i]);\\n    }\\n  }\\n  return filteredArray;\\n}\\n```\\n```Typescript []\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    const filteredArr: number[] = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```\\n\\n## Alternative approch using Reduce \\nhere is an alternative approach using reduce which is more concise than the above approach.\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(m)$$\\n```\\nvar filter = function(arr, fn) {\\n    return arr.reduce((acc, curr, i) => {\\n    fn(curr,i) && acc.push(curr) \\n    return acc\\n    } ,[])\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "```javascript []\\nfunction filterArray(arr, fn) {\\n  const filteredArray = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      filteredArray.push(arr[i]);\\n    }\\n  }\\n  return filteredArray;\\n}\\n```\n```Typescript []\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    const filteredArr: number[] = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n    return arr.reduce((acc, curr, i) => {\\n    fn(curr,i) && acc.push(curr) \\n    return acc\\n    } ,[])\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3951066,
                "title": "one-line-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function (arr, fn) {\\n    return arr.map((e, i) => { if (fn(e, i)) return e })\\n        .filter(el => el !== undefined);\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Math",
                    "Shortest Path"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function (arr, fn) {\\n    return arr.map((e, i) => { if (fn(e, i)) return e })\\n        .filter(el => el !== undefined);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3567134,
                "title": "day-5-of-js-challenge-easy-solution-for-beginners-to-understand",
                "content": "\\n# Approach\\n 1. We create a new array `filteredArr`.\\n 2. We loop through the original array `arr` using for loop.\\n 3. if the function `fn` applied to the current element and it\\'s index is true, we return the new array with the element.\\n 4. We add the element to the `filteredArr` using `.push()` method.\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = []; //create a new array\\n    //loop through the original array\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {//fn is applied to current element and its index\\n            filteredArr.push(arr[i]);//ele added to new array if true\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = []; //create a new array\\n    //loop through the original array\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {//fn is applied to current element and its index\\n            filteredArr.push(arr[i]);//ele added to new array if true\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3536838,
                "title": "js-fast-easy-detailed-explanation",
                "content": "# Intuition\\n  Usinh the Js \"Truthy and Falsy\" property.\\n\\n# Approach\\nUsing Truthy and Falsy property of Js we can create a copy for the array \\'arr\\' into an auxiliary array which we can iterate and if calling the function \\'fn\\' with the parameters \"aux[i] and i\" we get some value that is stored in the variable \\'x\\' if the function returns any value, then only we will push the value (if the result is truthy)\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ \\n\\n- Space complexity: $$O(n)$$ \\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let aux = arr;\\n    let result=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        let x= fn(aux[i],i)\\n        if(x)\\n            result.push(aux[i]);\\n    }\\n    return result;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let aux = arr;\\n    let result=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        let x= fn(aux[i],i)\\n        if(x)\\n            result.push(aux[i]);\\n    }\\n    return result;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3505737,
                "title": "linear-traversal-o-n-approach",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n) -- Result Array\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let res=[]\\n    for(var i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            res.push(arr[i]);\\n        }\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let res=[]\\n    for(var i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            res.push(arr[i]);\\n        }\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3505585,
                "title": "javascript-day-4-of-30-days-challange",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    \\n    let newArr = [];\\n    \\n    for(let i=0; i<arr.length; i++){\\n        \\n        let checkVal = fn(arr[i],i);\\n        \\n        if(checkVal){\\n            newArr.push(arr[i]);\\n        }\\n    }\\n\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    \\n    let newArr = [];\\n    \\n    for(let i=0; i<arr.length; i++){\\n        \\n        let checkVal = fn(arr[i],i);\\n        \\n        if(checkVal){\\n            newArr.push(arr[i]);\\n        }\\n    }\\n\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3505268,
                "title": "self-explanatory-easy",
                "content": "The filterArray function that we are given is an arrow function that takes in two parameters: an array arr, and a filtering function fn. We can use this function to create a new array by filtering out elements from the original arr array based on a truthy evaluation of fn.\\n\\nFirst, we initialize an empty array called filtered, which we will use to store the filtered elements. Next, we call the forEach method on the arr array. This method allows us to iterate over each element in the array and perform some operation on it.\\n\\nInside the forEach loop, we define a callback function that takes in two parameters: the current element of the array elem, and its index index. This function checks if fn(elem, index) returns a truthy value. If so, we push the element elem into the filtered array using the push method.\\n\\nFinally, the function returns the filtered array containing the filtered elements.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => {\\n  const filtered = [];\\n  arr.forEach((elem, index) => {\\n    if (fn(elem, index)) {\\n      filtered.push(elem);\\n    }\\n  });\\n  return filtered;\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => {\\n  const filtered = [];\\n  arr.forEach((elem, index) => {\\n    if (fn(elem, index)) {\\n      filtered.push(elem);\\n    }\\n  });\\n  return filtered;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3504634,
                "title": "easy-javascript-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: $$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(N)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArray = [];\\n    for(let i=0; i<arr.length;i++){\\n        if(fn(arr[i], i)){\\n            newArray.push(arr[i]);\\n        }\\n    }\\n    return newArray;\\n};\\n```\\n![UpvoteLeetcode.jpeg](https://assets.leetcode.com/users/images/9e7be41b-f9fc-455f-95ed-85158e6d4cf9_1683633186.755594.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArray = [];\\n    for(let i=0; i<arr.length;i++){\\n        if(fn(arr[i], i)){\\n            newArray.push(arr[i]);\\n        }\\n    }\\n    return newArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3503127,
                "title": "easy-for-loop-solution-using-new-array-o-n",
                "content": "\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = []\\n    for(let i = 0;i<arr.length;i++) {\\n     if(fn(arr[i],i)) {\\n         newArr.push(arr[i]);\\n    }\\n    }\\n    return newArr;\\n};\\n```\\n\\nUPVOTE IF IT HELPS",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = []\\n    for(let i = 0;i<arr.length;i++) {\\n     if(fn(arr[i],i)) {\\n         newArr.push(arr[i]);\\n    }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502690,
                "title": "day-5-javascript-easy-approach",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const nums = []\\n    for(let i = 0 ; i < arr.length ;i++  ){\\n        if(fn(arr[i],i)){\\n            nums.push(arr[i])\\n        }\\n    }\\n\\n   return nums; \\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const nums = []\\n    for(let i = 0 ; i < arr.length ;i++  ){\\n        if(fn(arr[i],i)){\\n            nums.push(arr[i])\\n        }\\n    }\\n\\n   return nums; \\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489908,
                "title": "one-line-solution-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   return arr.filter((x, i) => fn(x,i)) \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   return arr.filter((x, i) => fn(x,i)) \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3412779,
                "title": "arrow-function",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => arr.filter(fn)\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => arr.filter(fn)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3411915,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [];\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            newArr.push(arr[i])\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [];\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            newArr.push(arr[i])\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092325,
                "title": "filter-elements-from-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype Fn = (n: number, i: number) => any\\n\\nfunction filter(arr: number[], fn: Fn): number[] {\\n    const filterdArr = []\\n    arr.forEach((e,i) => fn(e, i) ? filterdArr.push(arr[i]) : \\'\\');\\n    return filterdArr;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (n: number, i: number) => any\\n\\nfunction filter(arr: number[], fn: Fn): number[] {\\n    const filterdArr = []\\n    arr.forEach((e,i) => fn(e, i) ? filterdArr.push(arr[i]) : \\'\\');\\n    return filterdArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090086,
                "title": "one-line-solution-using-arr-filter-method",
                "content": "The filterfunction takes an array and a filtering function, and returns a new array containing only the elements that pass the filter.\\n```\\nvar filter = function(arr, fn) {\\n    return arr.filter(fn);\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar filter = function(arr, fn) {\\n    return arr.filter(fn);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089110,
                "title": "filter-elements-of-array-with-contstraint",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var x= [];\\n    if (0 <= arr.length <= 1000){\\n    for (let i=0;i<arr.length;i++){\\n        if (fn(arr[i],i)){\\n            x.push(arr[i]);\\n        }\\n    }\\n    }\\n    return x;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var x= [];\\n    if (0 <= arr.length <= 1000){\\n    for (let i=0;i<arr.length;i++){\\n        if (fn(arr[i],i)){\\n            x.push(arr[i]);\\n        }\\n    }\\n    }\\n    return x;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085229,
                "title": "js-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   // return arr.filter((num, i) => Boolean(fn(num, i)));\\n   return arr.reduce((acc, num, i) => Boolean(fn(num, i)) ? [...acc, num] : acc, []);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   // return arr.filter((num, i) => Boolean(fn(num, i)));\\n   return arr.reduce((acc, num, i) => Boolean(fn(num, i)) ? [...acc, num] : acc, []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084318,
                "title": "push",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function (arr, fn) {\\n    const newArray = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            newArray.push(arr[i])\\n        }\\n    }\\n    return newArray\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function (arr, fn) {\\n    const newArray = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            newArray.push(arr[i])\\n        }\\n    }\\n    return newArray\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083346,
                "title": "filtered-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTruthy value check using for loop\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe add the element to the filteredArr using .push() method.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n48ms\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = function(arr, fn) {\\n    let filteredArr=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        filteredArr.push(arr[i]);\\n       \\n    } return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = function(arr, fn) {\\n    let filteredArr=[];\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        filteredArr.push(arr[i]);\\n       \\n    } return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080029,
                "title": "easy-understandable-solution",
                "content": "Intuition:\\nThe intuition behind this code is to filter elements from an input array arr based on a given filtering function fn. The filtering function fn takes two arguments: the current element and its index. If fn returns true for an element, that element is included in the filtered result.\\n\\nApproach:\\n\\nInitialize an empty array filteredArr to store the filtered elements.\\nInitialize a variable m to keep track of the position in the filteredArr.\\nIterate through the elements of the input array arr using a for loop.\\nFor each element at index i, call the filtering function fn with two arguments: arr[i] (the current element) and i (the index).\\nIf the filtering function fn returns true for the current element, add that element to the filteredArr at index m, and increment m to prepare for the next element.\\nAfter processing all elements, return the filteredArr containing the elements that satisfy the filtering condition.\\nComplexity:\\n\\nTime complexity: The time complexity of this code is O(n), where n is the length of the input array arr. This is because we iterate through the entire array once, and the time taken for each iteration is constant.\\nSpace complexity: The space complexity is also O(n) because in the worst case, the filteredArr can have the same length as the input array arr.\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr =[]\\n    let m=0;\\n    for(let i=0;i<arr.length;i++){\\n        \\n        if(fn(arr[i],i)){\\n        filteredArr[m]=arr[i]\\n        m++\\n        }\\n    }\\n    return filteredArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr =[]\\n    let m=0;\\n    for(let i=0;i<arr.length;i++){\\n        \\n        if(fn(arr[i],i)){\\n        filteredArr[m]=arr[i]\\n        m++\\n        }\\n    }\\n    return filteredArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077492,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    arr.forEach((item, i) => {\\n        if (fn(item, i)) {\\n            filteredArr.push(item);\\n        }\\n    })\\n    return filteredArr;\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    arr.forEach((item, i) => {\\n        if (fn(item, i)) {\\n            filteredArr.push(item);\\n        }\\n    })\\n    return filteredArr;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076829,
                "title": "one-line-js-solution",
                "content": "# Code\\n```\\nconst filter = (arr, fn) => arr.filter((val , index) => fn(val , index))\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst filter = (arr, fn) => arr.filter((val , index) => fn(val , index))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076471,
                "title": "typescript-filter-array",
                "content": "\\n```\\ntype Fn = (n: number, i: number) => any\\n\\nconst filter = (arr: number[], fn: Fn): number[] => arr.filter((el, index) => fn(el, index))\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (n: number, i: number) => any\\n\\nconst filter = (arr: number[], fn: Fn): number[] => arr.filter((el, index) => fn(el, index))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4075068,
                "title": "fast-and-beginner-friendly-solution",
                "content": "# Intuition\\nSince the question asked us to apply a function on all the elements of the array, I thought traversing the array and applying function on the element one by one.\\n\\n# Approach\\nFirstly, I initialised an empty array and then I started traversing the arr which was passed as the function argument using the **forEach** loop in which the **first parameter** represents the **array element** and the **second parameter** represents **current element index**.\\n\\nThen I applied `fn` on each element which was wrapped in an if statement, when it returns a truthy value the element gets pushed to the newArray.\\n\\nFinally, we return the newArray which contains the filtered values.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity will be O(n) where n is the number of elements in the array.\\n\\n- Space complexity:\\nThe space complexity will be O(f) where f is the number of elements in the filtered array.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArray =[];\\n    arr.forEach((e,i)=>{\\n        if (fn(e,i)){\\n            newArray.push(e);\\n        }\\n    })    \\n    return newArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArray =[];\\n    arr.forEach((e,i)=>{\\n        if (fn(e,i)){\\n            newArray.push(e);\\n        }\\n    })    \\n    return newArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073245,
                "title": "java-script-day-5",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. first we created a empty arr to store and return value \\n2. then we started for loop to goo through with given array\\n3. then we used if condition to check whether function resolve or not if yes then we push the current array which satify the condition into our empty array which we created and repeat same with other values\\n4. if not satify then we move on to other value\\n5. and last we return the our newArr which we created and filled with vaues\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = []\\n    for(let i= 0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            newArr.push(arr[i])\\n        }\\n    }\\n    return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = []\\n    for(let i= 0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            newArr.push(arr[i])\\n        }\\n    }\\n    return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072022,
                "title": "using-foreach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nInitial thought was to iterate over array and to check if the function is a truthy and then filter the array to show the one\\'s that meet the requirement.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe problem statement carefully states that in this case, we need to filter elements from an input array based on a given filtering function. Given that we need to iterate through the array, my initial thought was to use the Array.forEach method, as it allows us to perform a callback function on each element of the array. Inside the forEach loop, we could apply the filtering function to each element, and if the result is true (truthy), we could add the element to the filtered array.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    arr.forEach((element, index) => {\\n      if(fn(element, index)){\\n        filteredArr.push(element)\\n      }\\n    })\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    arr.forEach((element, index) => {\\n      if(fn(element, index)){\\n        filteredArr.push(element)\\n      }\\n    })\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069570,
                "title": "js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArray = [];\\n    const arrLength = arr.length;\\n\\n    for (let i = 0; i < arrLength; i++) {\\n      const result = fn(arr[i], i);\\n      if (result) {\\n        filteredArray.push(arr[i]);\\n      }\\n    }\\n\\n    return filteredArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArray = [];\\n    const arrLength = arr.length;\\n\\n    for (let i = 0; i < arrLength; i++) {\\n      const result = fn(arr[i], i);\\n      if (result) {\\n        filteredArray.push(arr[i]);\\n      }\\n    }\\n\\n    return filteredArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067810,
                "title": "codde-using-foreach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    filteredArr=[]\\n\\n    arr.forEach((el,idx) => {\\n        fn(el,idx)?filteredArr.push(el):null\\n    })\\n\\n    return filteredArr\\n};\\n\\n// arr=[0,10,20,30] => greaterthan10, 0>10,10>10,20>10\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    filteredArr=[]\\n\\n    arr.forEach((el,idx) => {\\n        fn(el,idx)?filteredArr.push(el):null\\n    })\\n\\n    return filteredArr\\n};\\n\\n// arr=[0,10,20,30] => greaterthan10, 0>10,10>10,20>10\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067109,
                "title": "simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nread question apply your approch face problem ? , read problem try new approch don\\'t see solution .\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInitialize an empty array ans to store the filtered elements.\\nIterate through the input array arr using a for loop.\\nFor each element at index i, call the callback function fn(arr[i], i).\\nIf the callback function returns true for the current element, push that element into the ans array.\\nFinally, return the ans array containing the filtered elements.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let ans = []\\n    for(let i=0; i<arr.length;i++)\\n    {\\n       if(fn(arr[i],i))\\n       {\\n           ans.push(arr[i]);\\n       }\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let ans = []\\n    for(let i=0; i<arr.length;i++)\\n    {\\n       if(fn(arr[i],i))\\n       {\\n           ans.push(arr[i]);\\n       }\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067052,
                "title": "javascript-beginner-friendly-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = []\\n    arr.forEach((element, index)=>{\\n        if(fn(element, index)){\\n            newArr.push(element);\\n        }\\n    });\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = []\\n    arr.forEach((element, index)=>{\\n        if(fn(element, index)){\\n            newArr.push(element);\\n        }\\n    });\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066786,
                "title": "filter-elements-from-array-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n        let newArr = [];\\n        for(let i = 0; i < arr.length; i++){\\n            if(fn(arr[i], i)){\\n                newArr.push(arr[i])\\n            }\\n\\n        }\\n    \\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n        let newArr = [];\\n        for(let i = 0; i < arr.length; i++){\\n            if(fn(arr[i], i)){\\n                newArr.push(arr[i])\\n            }\\n\\n        }\\n    \\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065816,
                "title": "simple-javscript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArray = [];\\n    for(let i = 0; i < arr.length; i++)\\n    {\\n      if(fn(arr[i], i))\\n      {\\n        filteredArray.push(arr[i]);\\n      }\\n    }\\n    return filteredArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArray = [];\\n    for(let i = 0; i < arr.length; i++)\\n    {\\n      if(fn(arr[i], i))\\n      {\\n        filteredArray.push(arr[i]);\\n      }\\n    }\\n    return filteredArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064842,
                "title": "javascript-code-beats-93-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo solve this problem without using the built-in Array.filter method, you can iterate over each element of the array and apply the filtering function fn to determine whether the element should be included in the filtered array or not\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1.create a empty array\\n2.check whether the given condition of the fucntion is correct for the given array value\\n3.push the correct value in the empty array and return it.\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n\\n  for (var i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      filteredArr.push(arr[i]);\\n    }\\n  }\\n\\n  return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n\\n  for (var i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      filteredArr.push(arr[i]);\\n    }\\n  }\\n\\n  return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058944,
                "title": "custom-array-filtering-in-javascript-without-array-filter",
                "content": "# What I Learned\\n<!-- Describe what you learned from working on this problem. -->\\n\\n- I learned how to use the Array.reduce method to filter an array based on a custom function.\\n- I improved my understanding of closures and their use in JavaScript.\\n\\n# Mistakes Made\\n<!-- Highlight any mistakes you made and what you learned from them. -->\\n\\n- Initially, I used a for...in loop, which is not suitable for iterating over arrays.\\n- I mistakenly declared the filteredArray variable outside the reduce function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- The time complexity of the filter function is $$O(n)$$, where \\'n\\' is the number of elements in the input array \\'arr\\'. This is because we iterate through each element in the array exactly once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n- The space complexity of the filter function is also $$O(n)$$ in the worst case. This is due to the additional space used to store the filteredArray, which can grow linearly with the number of elements that pass the filter.\\n\\n# Code\\nFirst Approach \\n``` javascript\\n/**\\n\\n@param {number[]} arr\\n@param {Function} fn\\n@return {number[]}\\n*/\\nvar filter = function (arr, fn) {\\nconst filteredArray = [];\\nfor (let index of arr.keys()) {\\nif (fn(arr[index], index)) {\\nfilteredArray.push(arr[index]);\\n}\\n}\\nreturn filteredArray;\\n};\\n```\\n## Second Approach using Reduce\\n ```javascript\\nvar filter = function (arr, fn) {\\n  return arr.reduce((filteredArray, currentElement, index) => {\\n    if (fn(currentElement, index)) {\\n      filteredArray.push(currentElement);\\n    }\\n    return filteredArray;\\n  }, []);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` javascript\\n/**\\n\\n@param {number[]} arr\\n@param {Function} fn\\n@return {number[]}\\n*/\\nvar filter = function (arr, fn) {\\nconst filteredArray = [];\\nfor (let index of arr.keys()) {\\nif (fn(arr[index], index)) {\\nfilteredArray.push(arr[index]);\\n}\\n}\\nreturn filteredArray;\\n};\\n```\n```javascript\\nvar filter = function (arr, fn) {\\n  return arr.reduce((filteredArray, currentElement, index) => {\\n    if (fn(currentElement, index)) {\\n      filteredArray.push(currentElement);\\n    }\\n    return filteredArray;\\n  }, []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055398,
                "title": "this-way-help-you-beats-76-95-of-users-with-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    return arr.filter(fn)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    return arr.filter(fn)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048459,
                "title": "solution-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for(var i = 0; i< arr.length; i++){\\n        if(fn(arr[i], i)){\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for(var i = 0; i< arr.length; i++){\\n        if(fn(arr[i], i)){\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047648,
                "title": "day-2-filter-array-from-array",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Declare a new empty array \\n2. Run a for loop for iteraing through array elements\\n3. Use if conditional operator to run inner condition if element is a truthy value\\n4. use array.push() method to add new element to declared array\\n5. Return new array\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n     o(n)\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)){\\n            filteredArr.push(arr[i])\\n        }        \\n    }\\n    \\n    return filteredArr\\n}\\n```\\n## Using while loop\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = []\\n    let i = 0\\n\\n    while(i < arr.length) {\\n        if(fn(arr[i], i)){\\n            filteredArr.push(arr[i])\\n        }\\n        i+=1\\n    }\\n    return filteredArr\\n};\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)){\\n            filteredArr.push(arr[i])\\n        }        \\n    }\\n    \\n    return filteredArr\\n}\\n```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = []\\n    let i = 0\\n\\n    while(i < arr.length) {\\n        if(fn(arr[i], i)){\\n            filteredArr.push(arr[i])\\n        }\\n        i+=1\\n    }\\n    return filteredArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047184,
                "title": "just-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  let result = []\\n    for(let i = 0; i < arr.length; i++){\\n        let currentItem = fn(arr[i], i)\\n        if(currentItem) result.push(arr[i])\\n    }\\n\\n    return result \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  let result = []\\n    for(let i = 0; i < arr.length; i++){\\n        let currentItem = fn(arr[i], i)\\n        if(currentItem) result.push(arr[i])\\n    }\\n\\n    return result \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044751,
                "title": "beats-92-of-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var ans=[];\\n    for(var i=0;i<arr.length;i++){\\n        fn(arr[i],i)?ans.push(arr[i]) :{} ;\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var ans=[];\\n    for(var i=0;i<arr.length;i++){\\n        fn(arr[i],i)?ans.push(arr[i]) :{} ;\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044529,
                "title": "easy-javascript-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThink of the problem in this way. The function filter out the elements that does not satisfy the certain condition. So you just have to pass the array element and its index.\\n\\n\\n# Code\\n```\\nlet filter = function(arr, fn) {\\n    let filteredArr = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet filter = function(arr, fn) {\\n    let filteredArr = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043691,
                "title": "2634",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n\\nconst res = [];\\nfor(let i=0; i < arr.length; i++){\\n\\n   if (fn(arr[i], i)) {\\n       res.push(arr[i]);\\n   }\\n   }\\n   return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n\\nconst res = [];\\nfor(let i=0; i < arr.length; i++){\\n\\n   if (fn(arr[i], i)) {\\n       res.push(arr[i]);\\n   }\\n   }\\n   return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041162,
                "title": "javascript-1-liner-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    return arr.filter((el, idx) => fn(el, idx))\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    return arr.filter((el, idx) => fn(el, idx))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038734,
                "title": "memo-to-remember-how-to-write-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI thought that it might be used `if` method and `for` method.\\n- `for`: to evaruate each elements in the given array`arr`.\\n- `if`: to check the given function`fn` true or false. if it is true, we should push that element to new array. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI know it can be a combination of `for` and `if`. But I wanted to try  `Array.forEach()`.\\nFirst I made a new array`newarr` with empty, then used `Array.push()` to add elements that returns true in function `fn`.\\n\\nI prefer to use `Array.forEach()` because it seems simple and understandable what the code is doing.\\n\\n# Code\\nUsing `Array.forEach()`:\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newarr = [];\\n    arr.forEach((el, id) => {\\n        if (fn(el, id))\\n            newarr.push(el);\\n    });\\n    return newarr;\\n};\\n```\\n\\nUsing `for` and `if`:\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newarr = [];\\n    for (i=0; i<arr.length; i++){\\n        if (fn(arr[i], i))\\n            newarr.push(arr[i]);\\n    }\\n    return newarr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newarr = [];\\n    arr.forEach((el, id) => {\\n        if (fn(el, id))\\n            newarr.push(el);\\n    });\\n    return newarr;\\n};\\n```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newarr = [];\\n    for (i=0; i<arr.length; i++){\\n        if (fn(arr[i], i))\\n            newarr.push(arr[i]);\\n    }\\n    return newarr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038070,
                "title": "beats-95-97-of-users-with-javascript",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let ans = []\\n    arr.forEach((e,i) => fn(e,i) && ans.push(e))\\n    return ans\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let ans = []\\n    arr.forEach((e,i) => fn(e,i) && ans.push(e))\\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034085,
                "title": "ez",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr  =[];\\n    for(var i = 0; i<arr.length; i++){\\n    if(fn(arr[i], i)){\\n        filteredArr.push(arr[i]);\\n    }\\n    }\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr  =[];\\n    for(var i = 0; i<arr.length; i++){\\n    if(fn(arr[i], i)){\\n        filteredArr.push(arr[i]);\\n    }\\n    }\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033906,
                "title": "filter-elements-from-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let arrLength=arr.length\\n    let filteredArray=[]\\n    for(let i=0;i<arrLength;i++){\\n        if(fn(arr[i],i)){\\n            filteredArray.push(arr[i])\\n        }\\n    }\\n    return filteredArray\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let arrLength=arr.length\\n    let filteredArray=[]\\n    for(let i=0;i<arrLength;i++){\\n        if(fn(arr[i],i)){\\n            filteredArray.push(arr[i])\\n        }\\n    }\\n    return filteredArray\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033158,
                "title": "js",
                "content": "```\\nvar filter = function(arr, fn) {\\n    const newArr = new Array(arr.length);\\n    let s = 0;\\n    for (let i = 0; i < arr.length; ++i)\\n        if (fn(arr[i], i)) newArr[s++] = arr[i];\\n    while (newArr.length > s) newArr.pop();\\n    return newArr;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar filter = function(arr, fn) {\\n    const newArr = new Array(arr.length);\\n    let s = 0;\\n    for (let i = 0; i < arr.length; ++i)\\n        if (fn(arr[i], i)) newArr[s++] = arr[i];\\n    while (newArr.length > s) newArr.pop();\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032449,
                "title": "filter-elements-from-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031277,
                "title": "runtime-details-54ms-beats-72-10-of-users-with-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    let res:number[]=[];\\n    for(let i=0;i<arr.length;i++)if(fn(arr[i],i)) res.push(arr[i]);\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    let res:number[]=[];\\n    for(let i=0;i<arr.length;i++)if(fn(arr[i],i)) res.push(arr[i]);\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031120,
                "title": "using-foreach-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var newarray=[];\\n    arr.forEach(function(index,val){\\n      if(fn(index,val)){\\n        \\n        newarray.push(index);\\n      }\\n    });\\n    \\n    return newarray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var newarray=[];\\n    arr.forEach(function(index,val){\\n      if(fn(index,val)){\\n        \\n        newarray.push(index);\\n      }\\n    });\\n    \\n    return newarray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4030141,
                "title": "filter-elements-from-array",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$Big-O = O(n) - Linear$$\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    for(let i=0; i<arr.length; i++){\\n        if(fn(arr[i], i)){\\n        filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    for(let i=0; i<arr.length; i++){\\n        if(fn(arr[i], i)){\\n        filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025553,
                "title": "simple-js-ts-solution-99-beat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst filter = (arr: number[], fn: (n: number, i: number) => any): number[] => {\\n    let filteredArray: number [] = [];\\n    for (let i = 0; i < arr.length; i++){\\n        if(fn(arr[i], i)){\\n            filteredArray.push(arr[i])\\n        }\\n    }\\n    return filteredArray;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst filter = (arr: number[], fn: (n: number, i: number) => any): number[] => {\\n    let filteredArray: number [] = [];\\n    for (let i = 0; i < arr.length; i++){\\n        if(fn(arr[i], i)){\\n            filteredArray.push(arr[i])\\n        }\\n    }\\n    return filteredArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4021115,
                "title": "array-element-filter",
                "content": "# Intuition\\n\\nFirst glance at the question suggested we have some array and that needs to be filtered using some function.\\n\\n# Approach\\n\\nRead the question carefully. Start by planning your solution.\\nFor eg. It says to return filteredArr, so we know what we have to return. Then it gives details of the filter function like no. of parameters it takes. It also talks about return type of filtered function by telling it returns truthy value, it means boolean value will be returned from filtered function.\\n\\n# Complexity\\n- Time complexity:\\n O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr =[];\\n    for(let i =0; i< arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            newArr.push(arr[i])\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr =[];\\n    for(let i =0; i< arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            newArr.push(arr[i])\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020248,
                "title": "solution-using-push-and-ternary-operator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArray = [];\\n    for(i = 0; i < arr.length; i++){\\n        fn(arr[i], i) ?  filteredArray.push(arr[i]) : null;\\n       \\n    }\\n    return filteredArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArray = [];\\n    for(i = 0; i < arr.length; i++){\\n        fn(arr[i], i) ?  filteredArray.push(arr[i]) : null;\\n       \\n    }\\n    return filteredArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014613,
                "title": "filter-elements-from-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredarr = []\\n    arr.map((e,i)=>{\\n         if(fn(e,i)){\\n             filteredarr.push(arr[i])\\n         }\\n    })\\n    return filteredarr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredarr = []\\n    arr.map((e,i)=>{\\n         if(fn(e,i)){\\n             filteredarr.push(arr[i])\\n         }\\n    })\\n    return filteredarr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014596,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => {\\n    const result = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        fn(arr[i], i) && result.push(arr[i]);\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => {\\n    const result = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        fn(arr[i], i) && result.push(arr[i]);\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014277,
                "title": "clean-solution-with-explanation",
                "content": "# Explanation\\n\\nThe provided function `fn` provides `true` or `false` based on the arguments passed. So if it returns `true`, it enters the if condition and the `arr[i]` will be added to `filteredArr` or else that particular item i.e. `arr[i]` won\\'t be added to `filteredArr` since the return value of `const isTruthy = fn(arr[i], i);` will be false.\\nAfter the for loop is over, simply return `filteredArr`.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArr = [];\\n    for(let i = 0; i < arr.length; i++) {\\n        const isTruthy = fn(arr[i], i);\\n\\n        if(isTruthy) {\\n        filteredArr.push(arr[i]);\\n        }\\n    }\\n    \\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArr = [];\\n    for(let i = 0; i < arr.length; i++) {\\n        const isTruthy = fn(arr[i], i);\\n\\n        if(isTruthy) {\\n        filteredArr.push(arr[i]);\\n        }\\n    }\\n    \\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012451,
                "title": "filter-elements-from-array-in-js",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let results = [];\\n    let i = 0;\\n    arr.forEach(function(x) {\\n        i = arr.indexOf(x);\\n        if (fn(x, i)) {\\n            results.push(x);\\n        }\\n    });\\n    return results;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let results = [];\\n    let i = 0;\\n    arr.forEach(function(x) {\\n        i = arr.indexOf(x);\\n        if (fn(x, i)) {\\n            results.push(x);\\n        }\\n    });\\n    return results;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008531,
                "title": "beats-86-simple-solution",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\nvar filteredArr=[];\\n    for(var i=0; i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n        filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\nvar filteredArr=[];\\n    for(var i=0; i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n        filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008127,
                "title": "easy-typescript-solution",
                "content": "# Code\\n```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    let ans = [];\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i],i)){\\n            ans.push(arr[i]);\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    let ans = [];\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i],i)){\\n            ans.push(arr[i]);\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4007063,
                "title": "solution-in-java-script-learn-js-with-question-day-5",
                "content": "# Intuition\\nThe **`filter`** function takes an array and a filtering function, and returns a new array containing only the elements that pass the filter. We can think of this as a way to \"filter out\" unwanted elements from an array, leaving only the ones that meet a certain criteria.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach used in this implementation is to create a new array `(filteredArr)` and loop through the original array `(arr)`. At each iteration, the filtering function `(fn)` is applied to the current element and its index. If the result is truthy, the current element is added to the `filteredArr` using the `push` method.\\n\\n# Complexity\\n- Time complexity:\\n O(n), where n is the length of the input array arr.\\n\\n- Space complexity:\\n        O(k), where k is the number of elements in the resulting filtered array.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArr =[];\\n    arr.forEach((element,index)=>{\\n       if(fn(element,index)){\\n           filteredArr.push(arr[index]);\\n       }\\n    })\\n    return filteredArr;\\n};\\n```\\n\\n                    \\n \\uD83D\\uDE4F\\uD83D\\uDE4F **PLEASE UPVOTE.** \\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArr =[];\\n    arr.forEach((element,index)=>{\\n       if(fn(element,index)){\\n           filteredArr.push(arr[index]);\\n       }\\n    })\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006705,
                "title": "coding",
                "content": "# Intuition\\nI solved it by thinking like this\\n1. Func will return a filtered arr so i need to return an arr\\n2. func is already give they just want me to iterate every element of arr and if it passes the condi push it in filtered arr and return it\\n3. So used boolean as it will give you true on every value whether postive or negative.\\n4. They had this conditon that if returned 0 eliminate it so boolean automatically handles that and converts it to false.\\n5. So that is it.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = function (arr, fn) {\\n\\n  const filteredArr = []\\n\\n  arr.forEach((element, index) => {\\n\\n  Boolean(fn(element, index)) === true ? filteredArr.push(element) : null\\n\\n  })\\n\\n  return filteredArr\\n\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = function (arr, fn) {\\n\\n  const filteredArr = []\\n\\n  arr.forEach((element, index) => {\\n\\n  Boolean(fn(element, index)) === true ? filteredArr.push(element) : null\\n\\n  })\\n\\n  return filteredArr\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006144,
                "title": "solution-with-step-by-step-appended-notes",
                "content": "\\n# Code\\n```\\nvar filter = function (arr, fn) {\\n  let filteredArr = [];\\n  arr.forEach((element, index) => {\\n    if (fn(element, index)) {\\n      filteredArr.push(element);\\n    }\\n  });\\n  return filteredArr;\\n};\\n\\n// Pre-code process: Describe the problem to yourself.\\n// We need to return an array that contains only elements of a\\n// given array that pass a given function as truthy.\\n\\n// Create a function that accepts the two given arguments arr and fn.\\n    var filter = function (arr, fn) {\\n// Declare an empty array that will be modified and returned later\\n        let filteredArr = [];\\n// For each element and corresponding index in the given array\\n        arr.forEach((element, index) => {\\n// If function evaluates truthy\\n            if (fn(element, index)) {\\n// Push given element to the empty array we created earlier.\\n                filteredArr.push(element);\\n            }\\n        });\\n// Return the modified array\\n         return filteredArr;\\n        };\\n\\n// I hope this helps. I\\'m a beginner and this method was my initial\\n// reaction to the problem.\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar filter = function (arr, fn) {\\n  let filteredArr = [];\\n  arr.forEach((element, index) => {\\n    if (fn(element, index)) {\\n      filteredArr.push(element);\\n    }\\n  });\\n  return filteredArr;\\n};\\n\\n// Pre-code process: Describe the problem to yourself.\\n// We need to return an array that contains only elements of a\\n// given array that pass a given function as truthy.\\n\\n// Create a function that accepts the two given arguments arr and fn.\\n    var filter = function (arr, fn) {\\n// Declare an empty array that will be modified and returned later\\n        let filteredArr = [];\\n// For each element and corresponding index in the given array\\n        arr.forEach((element, index) => {\\n// If function evaluates truthy\\n            if (fn(element, index)) {\\n// Push given element to the empty array we created earlier.\\n                filteredArr.push(element);\\n            }\\n        });\\n// Return the modified array\\n         return filteredArr;\\n        };\\n\\n// I hope this helps. I\\'m a beginner and this method was my initial\\n// reaction to the problem.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006061,
                "title": "easiest-solution-using-javascript-100-acceptance",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n     var filteredArray = [];\\n    for(let i=0;i<arr.length;i++){\\n       if(fn(arr[i],i)){\\n            filteredArray.push(arr[i]);\\n       }\\n    }\\n    return filteredArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n     var filteredArray = [];\\n    for(let i=0;i<arr.length;i++){\\n       if(fn(arr[i],i)){\\n            filteredArray.push(arr[i]);\\n       }\\n    }\\n    return filteredArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006049,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let new_arr = []\\n    for(let i=0; i<arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            new_arr.push(arr[i])\\n        }\\n    }\\n    return new_arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let new_arr = []\\n    for(let i=0; i<arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            new_arr.push(arr[i])\\n        }\\n    }\\n    return new_arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4005649,
                "title": "using-spread-syntax",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result = []\\n    \\n    for (let i = 0; i < arr.length; i++ ){\\n        \\n        if(fn(arr[i], i)){\\n            result = [...result, arr[i]]\\n        }\\n    }\\n\\n    return result \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result = []\\n    \\n    for (let i = 0; i < arr.length; i++ ){\\n        \\n        if(fn(arr[i], i)){\\n            result = [...result, arr[i]]\\n        }\\n    }\\n\\n    return result \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004209,
                "title": "ok",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr=[];\\n\\n        for(var i=0;i<arr.length;i++){\\n            if(fn(arr[i],i)){\\n                filteredArr.push(arr[i])\\n            } \\n        }\\n        return filteredArr\\n        \\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr=[];\\n\\n        for(var i=0;i<arr.length;i++){\\n            if(fn(arr[i],i)){\\n                filteredArr.push(arr[i])\\n            } \\n        }\\n        return filteredArr\\n        \\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003954,
                "title": "compare-and-push",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nfirstly compare elements of an arrays one by one in function an if it is true push that element into new array.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr=[];\\n    for(let i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            newArr.push(arr[i]);\\n        }\\n        \\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr=[];\\n    for(let i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            newArr.push(arr[i]);\\n        }\\n        \\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003498,
                "title": "easy-and-simple-o-n-solution-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGiven the inputted array, and a function to filter, return the complete filtered array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst, we know we will need to iterate through each element of the list so a simple for loop will do. For each item in the list we will use the given function to test for a truthy value and if it returns truthy, the item is pushed into our new array. return filteredArr once loop is complete.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n), where n is the length of the input array arr.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(k), where k is the number of elements in the resulting filtered array.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for(var i =0; i < arr.length; i++){\\n        if(fn(arr[i],i)){\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for(var i =0; i < arr.length; i++){\\n        if(fn(arr[i],i)){\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001940,
                "title": "filter-elements-from-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nLine By Line.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n        let filteredArr=[];\\n        for(let i=0; i< arr.length; i++){\\n            if(fn(arr[i], i)){\\n                filteredArr.push(arr[i]); \\n            }\\n        }\\n        return filteredArr\\n};\\nlet greaterThan= function(n){\\n    if(n>10){\\n        return n;\\n    }\\n};\\nlet firstIndex= function(n, ind){\\n    if(ind === 0){\\n        return n;\\n    }\\n};\\nlet plusOne= function(n){\\n    if(n+1 !== 0){\\n        return n;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n        let filteredArr=[];\\n        for(let i=0; i< arr.length; i++){\\n            if(fn(arr[i], i)){\\n                filteredArr.push(arr[i]); \\n            }\\n        }\\n        return filteredArr\\n};\\nlet greaterThan= function(n){\\n    if(n>10){\\n        return n;\\n    }\\n};\\nlet firstIndex= function(n, ind){\\n    if(ind === 0){\\n        return n;\\n    }\\n};\\nlet plusOne= function(n){\\n    if(n+1 !== 0){\\n        return n;\\n    }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000508,
                "title": "without-filter-method",
                "content": "# Intuition\\nEasy solution time complexity better  84%\\n\\n```\\n\\nvar filter = function(arr, fn) {\\n  let newArr = [];\\n    for(var i=0; i< arr.length; i++){\\n      if(fn(arr[i],i)){\\nnewArr.push(arr[i]);\\n      }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar filter = function(arr, fn) {\\n  let newArr = [];\\n    for(var i=0; i< arr.length; i++){\\n      if(fn(arr[i],i)){\\nnewArr.push(arr[i]);\\n      }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3999209,
                "title": "easy-to-understand-well-commented",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) \\n{ \\n  const filteredArr = [];\\n    for (let i=0; i<arr.length;i++){\\n     const result = fn(arr[i], i);\\n\\n    // Check if the result is truthy\\n    if (result) {\\n      filteredArr.push(arr[i]);\\n    }\\n    }\\n    return filteredArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) \\n{ \\n  const filteredArr = [];\\n    for (let i=0; i<arr.length;i++){\\n     const result = fn(arr[i], i);\\n\\n    // Check if the result is truthy\\n    if (result) {\\n      filteredArr.push(arr[i]);\\n    }\\n    }\\n    return filteredArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996370,
                "title": "filter-element-without-the-built-in-array-filter-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i],i)){\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i],i)){\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992300,
                "title": "javascript-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. `index` of `for...in` is `String` type. So if you want to use it, you have to parse `Number`.\\n2. `fn(arr[i], i) == true` and `fn(arr[i], i) !== false` is not correct. That\\'s because `fn` returns `Number` type value. Then, we have to push value without `0`.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    \\n    let filteredArr = [];\\n\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i) != false) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    \\n    let filteredArr = [];\\n\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i) != false) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985380,
                "title": "typescript-solution",
                "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    const length: number = arr.length;\\n    const filterArr: number[] = [];\\n    for(let i = 0; i < length; i++){\\n        const num: number = arr[i];\\n        const result: boolean = fn(arr[i], i);\\n        if(result) filterArr.push(num);\\n    }\\n    return filterArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    const length: number = arr.length;\\n    const filterArr: number[] = [];\\n    for(let i = 0; i < length; i++){\\n        const num: number = arr[i];\\n        const result: boolean = fn(arr[i], i);\\n        if(result) filterArr.push(num);\\n    }\\n    return filterArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985261,
                "title": "filter-elements-from-array-best-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArray = [];\\n    arr.forEach((ele,i)=>{\\n       if(fn(ele,i)){\\n           newArray.push(ele)\\n       }\\n    })\\n    return newArray;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArray = [];\\n    arr.forEach((ele,i)=>{\\n       if(fn(ele,i)){\\n           newArray.push(ele)\\n       }\\n    })\\n    return newArray;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3982750,
                "title": "beginner-friendly-solution",
                "content": "\\nApproach:\\nFor both the map and filter functions, the approach involves iterating through the input array, applying the given function to each element, and either transforming or filtering based on the function\\'s return value.\\n\\nFor the map function, the approach is to iterate through each element of the input array and apply the given function to each element. The transformed values are then collected in a new array, which is returned as the output.\\n\\nFor the filter function, the approach is similar to the map function. The function iterates through each element of the input array and applies the given filtering function. If the filtering function returns a truthy value, the element is included in the filtered array; otherwise, it\\'s excluded.\\n\\nComplexity:\\n\\nFor the map function:\\n\\nTime complexity: O(n) - where n is the length of the input array. The function needs to iterate through each element of the array to apply the transformation function.\\nSpace complexity: O(n) - The space complexity comes from the additional array used to store the transformed values.\\nFor the filter function:\\n\\nTime complexity: O(n) - The function iterates through each element of the array to apply the filtering function.\\nSpace complexity: O(n) - Similar to the map function, the space complexity arises from the additional array used to store the filtered values.\\nBoth functions have linear time and space complexity due to the need to process and store each element of the input array.\\n\\n# Code\\n```\\nfunction filter(arr, fn) {\\n    const filteredArr = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n\\n    return filteredArr;\\n}\\n\\n// Example usage\\nconst arr1 = [0, 10, 20, 30];\\nconst greaterThan10 = function(n) { return n > 10; };\\nconsole.log(filter(arr1, greaterThan10)); // Output: [20, 30]\\n\\nconst arr2 = [1, 2, 3];\\nconst firstIndex = function(n, i) { return i === 0; };\\nconsole.log(filter(arr2, firstIndex));    // Output: [1]\\n\\nconst arr3 = [-2, -1, 0, 1, 2];\\nconst plusOne = function(n) { return n + 1; };\\nconsole.log(filter(arr3, plusOne));       // Output: [-2, 0, 1, 2]\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction filter(arr, fn) {\\n    const filteredArr = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n\\n    return filteredArr;\\n}\\n\\n// Example usage\\nconst arr1 = [0, 10, 20, 30];\\nconst greaterThan10 = function(n) { return n > 10; };\\nconsole.log(filter(arr1, greaterThan10)); // Output: [20, 30]\\n\\nconst arr2 = [1, 2, 3];\\nconst firstIndex = function(n, i) { return i === 0; };\\nconsole.log(filter(arr2, firstIndex));    // Output: [1]\\n\\nconst arr3 = [-2, -1, 0, 1, 2];\\nconst plusOne = function(n) { return n + 1; };\\nconsole.log(filter(arr3, plusOne));       // Output: [-2, 0, 1, 2]\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3982184,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar filter = function(arr, fn) \\n{\\n    const ss = []\\n for(let i = 0; i < arr.length; i++ )\\n   {\\nif (fn(arr[i],i))\\n  {  \\nss.push(arr[i]);\\n  }\\n}\\nreturn  ss;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\nvar filter = function(arr, fn) \\n{\\n    const ss = []\\n for(let i = 0; i < arr.length; i++ )\\n   {\\nif (fn(arr[i],i))\\n  {  \\nss.push(arr[i]);\\n  }\\n}\\nreturn  ss;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978002,
                "title": "use-for-of-loop",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = [];\\n    for(const [i, num] of arr.entries()){\\n        if(fn(num, i)){\\n            newArr.push(num)\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = [];\\n    for(const [i, num] of arr.entries()){\\n        if(fn(num, i)){\\n            newArr.push(num)\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3975836,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result = []\\n        for (let i=0; i < arr.length; i++){\\n            if(fn(arr[i],i)){\\n                result.push(arr[i])\\n            }\\n        }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result = []\\n        for (let i=0; i < arr.length; i++){\\n            if(fn(arr[i],i)){\\n                result.push(arr[i])\\n            }\\n        }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3973598,
                "title": "cleear-ts-solution",
                "content": "# Code\\n```\\nconst filter = (array: number[], filterFunction: (value: number, index: number) => any): number[] => {\\n    const filteredArray = [];\\n    \\n    for (let i = 0; i < array.length; i++) {\\n        if (filterFunction(array[i], i)) {\\n            filteredArray.push(array[i]);\\n        }\\n    }\\n\\n    return filteredArray;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst filter = (array: number[], filterFunction: (value: number, index: number) => any): number[] => {\\n    const filteredArray = [];\\n    \\n    for (let i = 0; i < array.length; i++) {\\n        if (filterFunction(array[i], i)) {\\n            filteredArray.push(array[i]);\\n        }\\n    }\\n\\n    return filteredArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3970813,
                "title": "javascript-filter-function-beats-98-47-of-users",
                "content": "# Code\\n\\n```\\nvar filter = (arr, fn) => (\\n    arr.filter((n,i) => fn(n,i))\\n)\\n```\\n# Explanation\\n\\nThis function creates a new array that contains all the elements of the original array that pass the test specified by the `fn` function. The `fn` function takes two arguments: the current element and its index in the array. The `filter()` function returns a new array with the elements that pass the test.\\n\\nFor example, the following code creates a new array that contains all the even numbers from the original array:\\n\\n```\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst evenNumbers = numbers.filter(function(number) {\\n  return number % 2 === 0;\\n});\\n\\nconsole.log(evenNumbers); // [2, 4]\\n```\\n\\nThe `filter()` function is a very efficient function and it beats 98.57% of the users on LeetCode. It is a good choice for filtering arrays when performance is important.\\n\\nHere are some additional things to note about the `filter()` function:\\n\\n* The `filter()` function does not modify the original array. It creates a new array with the filtered elements.\\n* The `filter()` function can be used with any type of array, including strings, numbers, and objects.\\n* The `filter()` function can be used with anonymous functions or named functions.\\n\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nvar filter = (arr, fn) => (\\n    arr.filter((n,i) => fn(n,i))\\n)\\n```\n```\\nconst numbers = [1, 2, 3, 4, 5];\\n\\nconst evenNumbers = numbers.filter(function(number) {\\n  return number % 2 === 0;\\n});\\n\\nconsole.log(evenNumbers); // [2, 4]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3969808,
                "title": "simple-beginner-approach-and-beats-99-runtime-and-90-in-memory-without-array-filter-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredIndex = 0\\n\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i], i)){\\n            if(i !== filteredIndex){\\n                let temp = arr[i]\\n                arr[i] = arr[filteredIndex]\\n                arr[filteredIndex] = temp;\\n            }\\n            filteredIndex++;\\n        }\\n    }\\n    arr.length = filteredIndex;\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredIndex = 0\\n\\n    for(let i = 0; i < arr.length; i++){\\n        if(fn(arr[i], i)){\\n            if(i !== filteredIndex){\\n                let temp = arr[i]\\n                arr[i] = arr[filteredIndex]\\n                arr[filteredIndex] = temp;\\n            }\\n            filteredIndex++;\\n        }\\n    }\\n    arr.length = filteredIndex;\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3965634,
                "title": "solution-using-reduce-function-t-o-n-space-o-1",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n\\nvar filter = function(arr, fn) {\\n    return arr.reduce((prev, curr,idx)=>{\\n        if(fn(curr,idx)){\\n            return [...prev, curr]\\n        }\\n        else return[...prev]\\n    },[])\\n    \\n};\\n// one liner \\nvar filter = function(arr, fn) {\\n    return arr.reduce((prev, curr,idx)=>fn(curr,idx)?[...prev, curr]:[...prev],[])\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar filter = function(arr, fn) {\\n    return arr.reduce((prev, curr,idx)=>{\\n        if(fn(curr,idx)){\\n            return [...prev, curr]\\n        }\\n        else return[...prev]\\n    },[])\\n    \\n};\\n// one liner \\nvar filter = function(arr, fn) {\\n    return arr.reduce((prev, curr,idx)=>fn(curr,idx)?[...prev, curr]:[...prev],[])\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3962456,
                "title": "array-filter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredData = [];\\n     arr.forEach((element,index)=>{ \\n         if(fn(element,index)){\\n             filteredData.push(element);\\n         }\\n     });\\n     return filteredData;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredData = [];\\n     arr.forEach((element,index)=>{ \\n         if(fn(element,index)){\\n             filteredData.push(element);\\n         }\\n     });\\n     return filteredData;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3961599,
                "title": "easy-method-using-foreach-without-the-built-in-array-filter-method",
                "content": "\\n\\n# Code\\n```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n   let a=[]\\n    arr.forEach((v,i)=>{\\n        if(fn(v,i)){\\n          a.push(v)  \\n        }\\n    })\\n    return a\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n   let a=[]\\n    arr.forEach((v,i)=>{\\n        if(fn(v,i)){\\n          a.push(v)  \\n        }\\n    })\\n    return a\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3958645,
                "title": "using-foreach-and-logical",
                "content": "\\n# Code\\n\\tvar filter = function (arr, fn) {\\n\\t\\tlet newArr = []\\n\\n\\t\\tarr.forEach((element,index) => fn(element, index) && newArr.push(element))\\n\\t\\treturn newArr\\n\\t}\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n# Code\\n\\tvar filter = function (arr, fn) {\\n\\t\\tlet newArr = []\\n\\n\\t\\tarr.forEach((element,index) => fn(element, index) && newArr.push(element))\\n\\t\\treturn newArr\\n\\t}\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3955268,
                "title": "js-simple-approach-with-for-loop",
                "content": "\\n\\n# Code\\n```\\n\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    for(let i = 0; i < arr.length; i++) {\\n        if(fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3952080,
                "title": "simple-solution-using-map",
                "content": "\\n\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const arr2 = []\\n    arr.map((item, index)=> { if(fn(item, index)){arr2.push(item)} } )\\n    return arr2\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const arr2 = []\\n    arr.map((item, index)=> { if(fn(item, index)){arr2.push(item)} } )\\n    return arr2\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3951940,
                "title": "w-foreach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMade it using for loop but wanted to practice using forEach.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArr = [];\\n    arr.forEach((val, i) => {\\n        if(fn(val, i)) {\\n            filteredArr.push(val);\\n        }\\n    });\\n    return filteredArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const filteredArr = [];\\n    arr.forEach((val, i) => {\\n        if(fn(val, i)) {\\n            filteredArr.push(val);\\n        }\\n    });\\n    return filteredArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3950877,
                "title": "one-line-filtering",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst filter = (arr, fn) => {\\n    const newArr = [];\\n    arr.forEach((element , index) => fn(element , index) ? newArr.push(element): false)\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst filter = (arr, fn) => {\\n    const newArr = [];\\n    arr.forEach((element , index) => fn(element , index) ? newArr.push(element): false)\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3950190,
                "title": "with-built-in-array-filter-method-solution",
                "content": "\\n\\nfunction customFilter(arr, fn) {\\n    return arr.filter(function(element, index) {\\n      return fn(element, index);\\n    });\\n  }\\n  function firstIndex(n, i) {\\n    return i === 0;\\n  }\\n  \\n  function greaterThan10(n) {\\n    return n > 10;\\n  }\\n  \\n  function plusOne(n) {\\n    return n + 1;\\n  }\\n  \\n  const arr = [0, 10, 20, 30];\\n  const arr1 = [1, 2, 3];\\n  const arr2 = [-2, -1, 0, 1, 2];\\n  \\n  const filteredArr = customFilter(arr, greaterThan10);\\n  console.log(filteredArr);\\n  \\n  const filteredArr1 = customFilter(arr1, firstIndex);\\n  console.log(filteredArr1);\\n  \\n  const filteredArr2 = customFilter(arr2, plusOne);\\n  console.log(filteredArr2);\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "\\n\\nfunction customFilter(arr, fn) {\\n    return arr.filter(function(element, index) {\\n      return fn(element, index);\\n    });\\n  }\\n  function firstIndex(n, i) {\\n    return i === 0;\\n  }\\n  \\n  function greaterThan10(n) {\\n    return n > 10;\\n  }\\n  \\n  function plusOne(n) {\\n    return n + 1;\\n  }\\n  \\n  const arr = [0, 10, 20, 30];\\n  const arr1 = [1, 2, 3];\\n  const arr2 = [-2, -1, 0, 1, 2];\\n  \\n  const filteredArr = customFilter(arr, greaterThan10);\\n  console.log(filteredArr);\\n  \\n  const filteredArr1 = customFilter(arr1, firstIndex);\\n  console.log(filteredArr1);\\n  \\n  const filteredArr2 = customFilter(arr2, plusOne);\\n  console.log(filteredArr2);\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3950183,
                "title": "without-built-in-array-filter-method-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var newArray = [];\\n    for (var i=0; i<arr.length; i++){\\n      const element = arr[i];\\n      const index = i;\\n      if(fn(element, index)){\\n        newArray.push(element);\\n      }\\n    }\\n    return newArray;\\n      \\n};\\n\\nfunction greaterThan10(n) {\\n  return n>10;\\n};\\nfunction firstIndex(n,i) {\\n  return i === 0;\\n};\\n\\nfunction plusOne(n) {\\n  return n+1;\\n};\\n\\nconst arr = [0,10,20,30];\\nconst arr1 =[1,2,3];\\nconst arr2 = [-2,-1,0,1,2];\\n\\nvar newArray = filter(arr, greaterThan10);\\nconsole.log(newArray);\\nvar newArray = filter(arr1, firstIndex);\\nconsole.log(newArray);\\nvar newArray = filter(arr2, plusOne);\\nconsole.log(newArray);\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var newArray = [];\\n    for (var i=0; i<arr.length; i++){\\n      const element = arr[i];\\n      const index = i;\\n      if(fn(element, index)){\\n        newArray.push(element);\\n      }\\n    }\\n    return newArray;\\n      \\n};\\n\\nfunction greaterThan10(n) {\\n  return n>10;\\n};\\nfunction firstIndex(n,i) {\\n  return i === 0;\\n};\\n\\nfunction plusOne(n) {\\n  return n+1;\\n};\\n\\nconst arr = [0,10,20,30];\\nconst arr1 =[1,2,3];\\nconst arr2 = [-2,-1,0,1,2];\\n\\nvar newArray = filter(arr, greaterThan10);\\nconsole.log(newArray);\\nvar newArray = filter(arr1, firstIndex);\\nconsole.log(newArray);\\nvar newArray = filter(arr2, plusOne);\\nconsole.log(newArray);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3948098,
                "title": "simple-javascript-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let r = []\\n    for (let i =0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {r.push(arr[i])}\\n    }\\n    return r;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let r = []\\n    for (let i =0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {r.push(arr[i])}\\n    }\\n    return r;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3947868,
                "title": "2-solutions-using-simple-for-loop",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const newArr = new Array(arr.length);\\n  size = 0;\\n  for(let i=0; i<arr.length; i++){\\n    if(fn(arr[i],i)){\\n      newArr[size] = arr[i];\\n      size++;\\n    }\\n  }\\n  while(size < arr.length){\\n    newArr.pop();\\n    size++;\\n  }\\n  return newArr;\\n}\\n```\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = new Array();\\n    for(let i=0; i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArr.push(arr[i]);\\n      }\\n    }\\n    return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const newArr = new Array(arr.length);\\n  size = 0;\\n  for(let i=0; i<arr.length; i++){\\n    if(fn(arr[i],i)){\\n      newArr[size] = arr[i];\\n      size++;\\n    }\\n  }\\n  while(size < arr.length){\\n    newArr.pop();\\n    size++;\\n  }\\n  return newArr;\\n}\\n```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = new Array();\\n    for(let i=0; i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArr.push(arr[i]);\\n      }\\n    }\\n    return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946181,
                "title": "fast-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let trueStates = [],\\n     num = 0;\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            trueStates[num] = arr[i];\\n            num++\\n            // this is really nested but i think it\\'ll be fine\\n        }\\n    }\\n    return trueStates\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let trueStates = [],\\n     num = 0;\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            trueStates[num] = arr[i];\\n            num++\\n            // this is really nested but i think it\\'ll be fine\\n        }\\n    }\\n    return trueStates\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3942943,
                "title": "hinglish-me-solution-hai-bhaiyo",
                "content": "# Intuition\\nPehle to direct filter function se ho jaiega in one sentence \\n\\n\\n\\n# Complexity\\n- Time complexity:\\n Filter option se O(1) me ho jaiga nahi to for loop se O(n) me hoga\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n      \\n1st Method\\n     return arr.filter(fn)\\n\\n\\n**2ND METHOD **\\nPehle ek empty array le lo phir phir ek foor  loop lagao afar wo arr \\nfunction (fn) me aata hai to use push function se filteredArrray me bhej do or phir return karwa do.\\n\\nlet filteredArray = [];\\n  for(let i = 0; i<arr.length ; i++){\\n        if(fn(arr[i],i)){\\n              filteredArray.push(arr[i]);\\n        }\\n  }\\n   return filteredArray;\\n\\n\\n};\\n\\n<!-- Maza aaya to UPVOTE KAR DENA kioki AAYEGA TO MODI HI \\uD83D\\uDE01\\uD83D\\uDE01 -->\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n      \\n1st Method\\n     return arr.filter(fn)\\n\\n\\n**2ND METHOD **\\nPehle ek empty array le lo phir phir ek foor  loop lagao afar wo arr \\nfunction (fn) me aata hai to use push function se filteredArrray me bhej do or phir return karwa do.\\n\\nlet filteredArray = [];\\n  for(let i = 0; i<arr.length ; i++){\\n        if(fn(arr[i],i)){\\n              filteredArray.push(arr[i]);\\n        }\\n  }\\n   return filteredArray;\\n\\n\\n};\\n\\n<!-- Maza aaya to UPVOTE KAR DENA kioki AAYEGA TO MODI HI \\uD83D\\uDE01\\uD83D\\uDE01 -->\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3942309,
                "title": "javascript-simple-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var filteredArr = [];\\n    for (var i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            filteredArr.push(arr[i]);\\n        }\\n    }\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937941,
                "title": "js-and-filter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [], l = arr.length\\n    for(let i = 0; i<l; i++) {\\n        if(fn(arr[i], i)) {\\n            newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [], l = arr.length\\n    for(let i = 0; i<l; i++) {\\n        if(fn(arr[i], i)) {\\n            newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3935939,
                "title": "easy-solution-using-short-circuit-with-push-method",
                "content": "# Approach\\nReally easy solution with short circuit and creating new array that will be returned.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let accum = [];\\n\\n    for (let i = 0; i < arr.length; i++) fn(arr[i], i) && accum.push(arr[i]);\\n\\n    return accum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let accum = [];\\n\\n    for (let i = 0; i < arr.length; i++) fn(arr[i], i) && accum.push(arr[i]);\\n\\n    return accum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3934740,
                "title": "3-different-methods",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    // return arr.filter(fn);\\n\\n//    let new_arr=[]\\n//    for(var i=0;i<arr.length;i++){\\n//        if(fn(arr[i],i)){new_arr.push(arr[i])}\\n//    }\\n//    return new_arr;\\n\\n\\nreturn arr.filter((x,y)=>fn(x,y));\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    // return arr.filter(fn);\\n\\n//    let new_arr=[]\\n//    for(var i=0;i<arr.length;i++){\\n//        if(fn(arr[i],i)){new_arr.push(arr[i])}\\n//    }\\n//    return new_arr;\\n\\n\\nreturn arr.filter((x,y)=>fn(x,y));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3926900,
                "title": "simplest-javascript-es6-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimple JS solution using forEach to loop through the elements and then conditionally push elements into a new array.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n) time complexity\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(k) where k is no. of elements in new array\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    filteredArr = [];\\n    arr.forEach((el, index) => {\\n        if(fn(el, index)){\\n            filteredArr.push(el);\\n        }\\n    });\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    filteredArr = [];\\n    arr.forEach((el, index) => {\\n        if(fn(el, index)){\\n            filteredArr.push(el);\\n        }\\n    });\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3924055,
                "title": "filter-elements-from-array-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe filter() method of Array instances creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.\\n\\nWe done it without built-in function.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [];\\n    for (let i = 0; i < arr.length; ++i) \\n    {\\n        if (fn(arr[i], i)) \\n        {\\n            newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const newArr = [];\\n    for (let i = 0; i < arr.length; ++i) \\n    {\\n        if (fn(arr[i], i)) \\n        {\\n            newArr.push(arr[i]);\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923257,
                "title": "simplest-javascript-solution",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe first define a new array that would be storing all the values that is to be returned as an array\\n\\nThen, we run a loop for each element in the argument array ```arr``` and pass the element of the array ```arr``` at position ```i``` for each iteration to the ```fn``` function we got as a argument\\n\\nFor each ```true``` value returned by the ```fn``` function, we push the element to the array that is to be returned as the answer which is ```filteredArr```\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    arr.forEach((element, index) => {\\n        if(fn(element, index))\\n            filteredArr.push(element);\\n    });\\n    return filteredArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```arr```\n```arr```\n```i```\n```fn```\n```true```\n```fn```\n```filteredArr```\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filteredArr = [];\\n    arr.forEach((element, index) => {\\n        if(fn(element, index))\\n            filteredArr.push(element);\\n    });\\n    return filteredArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3922706,
                "title": "typescript-fast-and-clean-code-o-n-o-n",
                "content": "# Complexity\\n- Time complexity: $\\\\mathcal{O}(n)$\\n- Space complexity: $\\\\mathcal{O}(n)$\\n\\n# Code\\n```\\nfunction filter(arr: number[], fn: (n: number, i: number) => boolean): number[] {\\n    const result = [];\\n    for ( let i = 0; i < arr.length; i++ )\\n        if ( fn( arr[ i ], i ) ) result.push( arr[i] );\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array"
                ],
                "code": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => boolean): number[] {\\n    const result = [];\\n    for ( let i = 0; i < arr.length; i++ )\\n        if ( fn( arr[ i ], i ) ) result.push( arr[i] );\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3919826,
                "title": "82-beast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    var returnedArray =[]\\n    arr.forEach((value,index)=>{\\n        if(fn(value,index)){\\n            returnedArray.push(value)\\n        }\\n    })\\n    return returnedArray\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n    var returnedArray =[]\\n    arr.forEach((value,index)=>{\\n        if(fn(value,index)){\\n            returnedArray.push(value)\\n        }\\n    })\\n    return returnedArray\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3919388,
                "title": "easy-for-loop-solution-without-push",
                "content": "# Intuition\\n it can be done using for loop\\n\\n# Approach\\n Hence we know fn(arr,i) function return bool value so we use it in if condition \\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result=[]\\n    let j=0;\\n    for(let i=0;i<arr.length;i++)\\n    {\\n      if(fn(arr[i],i))\\n      {\\n        result[j]=arr[i]\\n        j++;\\n      }\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let result=[]\\n    let j=0;\\n    for(let i=0;i<arr.length;i++)\\n    {\\n      if(fn(arr[i],i))\\n      {\\n        result[j]=arr[i]\\n        j++;\\n      }\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3917123,
                "title": "easy-solution-for-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   let newArr = [];\\n   for(let i = 0; i<arr.length;i++){\\n       if(fn(arr[i],i)){\\n           newArr.push(arr[i])\\n       }\\n   } \\n   return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   let newArr = [];\\n   for(let i = 0; i<arr.length;i++){\\n       if(fn(arr[i],i)){\\n           newArr.push(arr[i])\\n       }\\n   } \\n   return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3911352,
                "title": "easy-approach-with-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   let filteredArr = arr.filter(fn)\\n   return filteredArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   let filteredArr = arr.filter(fn)\\n   return filteredArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3907214,
                "title": "use-filter-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    return arr.filter(fn)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    return arr.filter(fn)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3903891,
                "title": "js-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let arraylist2=[];\\n    for(i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            arraylist2.push(arr[i]);\\n        }\\n    }\\n    return arraylist2;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let arraylist2=[];\\n    for(i=0;i<arr.length;i++){\\n        if(fn(arr[i],i)){\\n            arraylist2.push(arr[i]);\\n        }\\n    }\\n    return arraylist2;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3902965,
                "title": "js-simple-arrow-function-code-with-explanation",
                "content": "# Approach\\nSo, we simply need to add element to filtered array when the function return true\\n\\nSo, for each element in array we check if function returns true, if it return true we add it to the filtered array.\\n# Complexity\\n- Time complexity:\\no(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) =>{\\nconst filteredArr = [];\\n    arr.forEach((element, index) => {\\n        if(fn(element,index)){\\n            filteredArr.push(element);\\n        }\\n    });\\n    return filteredArr;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) =>{\\nconst filteredArr = [];\\n    arr.forEach((element, index) => {\\n        if(fn(element,index)){\\n            filteredArr.push(element);\\n        }\\n    });\\n    return filteredArr;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3902545,
                "title": "easy-solution",
                "content": "# Code\\n```\\nvar filter = function(arr, fn) {\\n    let res = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            res.push(arr[i])\\n        }\\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar filter = function(arr, fn) {\\n    let res = []\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) {\\n            res.push(arr[i])\\n        }\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3898822,
                "title": "easy-javascript-solution",
                "content": "# Approach\\nVery Simple approach ..we just need to check it within the if block if its true and if it is then just push it into it..\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n):-- It is because in the worst case if all the elements meet the condition then all the elements would be stored in it..\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filtered_array=[];\\n    for( i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        {\\n            filtered_array.push(arr[i]);\\n        }\\n    }\\n    return filtered_array;\\n\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let filtered_array=[];\\n    for( i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        {\\n            filtered_array.push(arr[i]);\\n        }\\n    }\\n    return filtered_array;\\n\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897137,
                "title": "beginner-solution",
                "content": "# Intuition && Approach\\nCreate a new array, for each item in the initial array if fnreturn true then add the item in to new array. Return the new array as result\\n# Complexity\\n- Time complexity: O(n)\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    result = []\\n    for(i =0;i<arr.length;i++){\\n        if(fn(arr[i],i)) result.push(arr[i])\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    result = []\\n    for(i =0;i<arr.length;i++){\\n        if(fn(arr[i],i)) result.push(arr[i])\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3893292,
                "title": "simple-solution-not-using-built-in-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) result.push(arr[i])\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (fn(arr[i], i)) result.push(arr[i])\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892802,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const a = [];\\n    let k=0\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        a[k++] =arr[i];\\n    }\\n    return a;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const a = [];\\n    let k=0\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        a[k++] =arr[i];\\n    }\\n    return a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892792,
                "title": "simple-solution-of-filter-elements-from-array-using-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const a = [];\\n    let k=0\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        a[k++] =arr[i];\\n    }\\n    return a;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    const a = [];\\n    let k=0\\n    for(let i=0;i<arr.length;i++)\\n    {\\n        if(fn(arr[i],i))\\n        a[k++] =arr[i];\\n    }\\n    return a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892503,
                "title": "good",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => {\\n  const filtered = [];\\n  arr.forEach((elem, index) => {\\n    if (fn(elem, index)) {\\n      filtered.push(elem);\\n    }\\n  });\\n  return filtered;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nconst filter = (arr, fn) => {\\n  const filtered = [];\\n  arr.forEach((elem, index) => {\\n    if (fn(elem, index)) {\\n      filtered.push(elem);\\n    }\\n  });\\n  return filtered;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892278,
                "title": "easy-solution",
                "content": "\\n```\\nvar filter = function (arr, fn) {\\n    let res =[]\\n    for(let j=0;j<arr.length;j++){\\n        if(fn(arr[j],j)){\\n            res.push(arr[j])\\n        }\\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar filter = function (arr, fn) {\\n    let res =[]\\n    for(let j=0;j<arr.length;j++){\\n        if(fn(arr[j],j)){\\n            res.push(arr[j])\\n        }\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3888250,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const a=[];\\n  for(let i=0;i<arr.length;i++)\\n  {\\n      if(fn(arr[i],i))\\n      a.push(arr[i]);\\n  }  \\n  return a;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n  const a=[];\\n  for(let i=0;i<arr.length;i++)\\n  {\\n      if(fn(arr[i],i))\\n      a.push(arr[i]);\\n  }  \\n  return a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3884515,
                "title": "two-simple-approaches-with-the-best-scores",
                "content": "\\n\\n# The First Approach (Better)\\n\\nwe used splice to remove elements from the original array\\nthe for loop is in reverse to avoid ```modifying the array while iterating over it ``` By iterating in reverse order, you ensure that removing an element from the array doesn\\'t affect the remaining elements\\' positions. This way, the code correctly filters out the elements that don\\'t satisfy the condition specified by the fn function.\\n\\n```\\n\\nvar filter = function(arr, fn) {\\n    const length = arr.length-1\\n    for(let i=length; i>=0; i--){\\n        if (!fn(arr[i], i)){\\n            arr.splice(i, 1); \\n        }\\n    }\\n    return arr\\n};\\n```\\n\\n\\n# The Second Approach\\n\\nwe created a new array and used the push method to add elements to the new array and returned it \\n```\\nvar filter = function(arr, fn) {\\n    const length = arr.length\\n    const newArr = []\\n        for(let i=0; i<length; i++){\\n        if (fn(arr[i], i)){\\n            newArr.push(arr[i]); \\n        }\\n    }\\n    return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```modifying the array while iterating over it ```\n```\\n\\nvar filter = function(arr, fn) {\\n    const length = arr.length-1\\n    for(let i=length; i>=0; i--){\\n        if (!fn(arr[i], i)){\\n            arr.splice(i, 1); \\n        }\\n    }\\n    return arr\\n};\\n```\n```\\nvar filter = function(arr, fn) {\\n    const length = arr.length\\n    const newArr = []\\n        for(let i=0; i<length; i++){\\n        if (fn(arr[i], i)){\\n            newArr.push(arr[i]); \\n        }\\n    }\\n    return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3881735,
                "title": "easy-fast-javascript",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\n /* here it checks the given function that is it returning true or false   */\\nvar filter = function(arr, fn) {\\n\\nlet filteredArr = [];\\n\\n    for(let i=0; i<arr.length; i++){\\n\\nif(fn(arr[i], i)){\\nfilteredArr.push(arr[i])\\n\\n    }}\\n    return filteredArr;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\n\\n /* here it checks the given function that is it returning true or false   */\\nvar filter = function(arr, fn) {\\n\\nlet filteredArr = [];\\n\\n    for(let i=0; i<arr.length; i++){\\n\\nif(fn(arr[i], i)){\\nfilteredArr.push(arr[i])\\n\\n    }}\\n    return filteredArr;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3880489,
                "title": "solving-filter-elements-from-array-using-for-loop-and-array-push-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI want to have a new array that will contains a filtered contents so that its easy to return and read the filtered array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach I was seen here was basically filter will need to filter out the value based on condition.\\nSo Based on truthy value i will push the value otherwise nothing.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = []\\n    for(let i=0; i < arr.length; i++){\\n        // pushing the value if its truthy value from the function\\n        fn(arr[i],i) ? newArr.push(arr[i]) : null        \\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    let newArr = []\\n    for(let i=0; i < arr.length; i++){\\n        // pushing the value if its truthy value from the function\\n        fn(arr[i],i) ? newArr.push(arr[i]) : null        \\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3878963,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var stack = []\\n    for(let i = 0; i < arr.length; i++){\\n        let znach = fn(arr[i], i)\\n        if (Boolean(znach) !== false){\\n            stack.push(arr[i])\\n        }\\n    }\\n    return stack\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n    var stack = []\\n    for(let i = 0; i < arr.length; i++){\\n        let znach = fn(arr[i], i)\\n        if (Boolean(znach) !== false){\\n            stack.push(arr[i])\\n        }\\n    }\\n    return stack\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3877371,
                "title": "use-filter-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   return arr.filter((e, i) => fn(e,i))\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @param {Function} fn\\n * @return {number[]}\\n */\\nvar filter = function(arr, fn) {\\n   return arr.filter((e, i) => fn(e,i))\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1890797,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 2001560,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1888259,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1883712,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1924363,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 2016518,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1888044,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1870064,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1863975,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1888317,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1890797,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 2001560,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1888259,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1883712,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1924363,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 2016518,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1888044,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1870064,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1863975,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 1888317,
                "content": [
                    {
                        "username": "wesleyarya40",
                        "content": "please help me to know how the examples given can be related to the solution, is those examples gives us any idea of getting solution. For me its more confusing and disturbing. please help me out of this"
                    },
                    {
                        "username": "mayerm",
                        "content": "`fn` mentioned is an unknown function that returns a boolean (true or false). \\n\\nThe point of this is that you create code that can handle whatever function they throw at you. You only need to know the max amount of parameters and what it returns.\\n\\nIn Javascript, you can write a function call with either more or less parameters than it was originally defined. \\n\\nSo, if I use `fn(element, index)`, when they pass the function `greaterThan10(n)`, `element` is passed as `n` and `index` is ignored.\\n\\n"
                    },
                    {
                        "username": "rahulchouhan2408",
                        "content": "[@cortadordeunha666](/cortadordeunha666) he and i also want to know - description section how the examples given can be related to the problems  is those examples gives us any idea of getting solution of that problem?"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "what you  want to know exactly?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not even able to understand the input ...,"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 5 : Done the question .\\n\\nHint : simple push the element in the back of new array for each value in array if the fn returns true"
                    },
                    {
                        "username": "mr_chetan005",
                        "content": "In the second example, if you\\'ll use for in loop, you should keep in mind that \"===\"\\nIt checks for index 0 and its type should be number, but in \\'for in\\' loop it will give the index but in the string format. "
                    },
                    {
                        "username": "xeniawann",
                        "content": "Hint: Change the loop method or convert `string` to `number` using `Number(i)`."
                    },
                    {
                        "username": "Pushkraj",
                        "content": "Thank you brother"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "When I use the following code:` if (fn(arr[i], i) === true)`, I fail the third test case, but when I use  `if (fn(arr[i], i)) `, I pas it. Could someone please explain the difference between the two? I was uder the impression that it\\'s exactly the same thing."
                    },
                    {
                        "username": "tomeknaj",
                        "content": "[@peradonjongjaroonkait](/peradonjongjaroonkait) thank you! so basically it\\'s the difference between true (boolean) and truthy?"
                    },
                    {
                        "username": "peradonjongjaroonkait",
                        "content": "Third test case it return number not boolean, so you can\\'t use === to check it."
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\nfunction filter(arr: number[], fn: (n: number, i: number) => any): number[] {\\n  let _array = []\\n  arr.forEach((item,i) => {\\n    if(fn(item, i)){\\n      _array.push(item);\\n    }\\n  })\\n  return _array;\\n};\\n```"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "if I declare my result array as: `let res = []` or `let res = new Array()`, I can then use the `push()` method in both cases.\n\nHowever if I use `let res = new Int32Array()`, it tells me that res.push is not a function...\n\nWhy is that so? Isn't it weird that they made typed array have a fixed size? I am new to JS obviously, but I feel like `Int32Array()` should inherit push through its prototypes. I can't think of a good reason why a typed array should not be able to have elements appended, if an untyped array can"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "[@JayVerma](/JayVerma) ehat\\'s the difference of these arrays?"
                    },
                    {
                        "username": "JayVerma",
                        "content": "perhaps it\\'s designed like a c/c++ array, instead of c++\\'s std::vector"
                    },
                    {
                        "username": "foryougautam",
                        "content": "Second test case\nThe firstIndex function you provided always returns false because it checks if the index i is equal to 0 instead of checking if the value at index i is equal to n"
                    },
                    {
                        "username": "CristianM92",
                        "content": "Any hints how to do that?"
                    },
                    {
                        "username": "michaelwhittemore",
                        "content": "That\\'s the point though? The test case says as follows: \"In this case, the function removes elements not at index 0\"."
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "those iterations feel me comfortable! \\uD83D\\uDE07"
                    },
                    {
                        "username": "testing8181",
                        "content": "can someone tell me that is it right way to solve a question using hints because i tried this question till 30 min but i did not get answer and using hints i solved it within 5 min."
                    },
                    {
                        "username": "Matthew_Murdock",
                        "content": "1. use a new array to store\\n2. Use a for loop.\\n3. function arguments can be arr[i] or (arr[i], i) and function returns true or false\\n4.return result array."
                    }
                ]
            },
            {
                "id": 2063042,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 2061857,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 2061854,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 2045686,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 1998729,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 1976273,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 1950357,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 1939875,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 1900232,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            },
            {
                "id": 1890794,
                "content": [
                    {
                        "username": "GeorgeDev254",
                        "content": "Just curious,according to this 'Falsey values such as 0 should be filtered out\n' why is the output [-2,0,1,2]?\n"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": " `var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};`"
                    },
                    {
                        "username": "adityasaini1644",
                        "content": "var filter = function(arr, fn) {\\n    var newArray=[];\\n    for(let i= 0;i<arr.length;i++){\\n      if(fn(arr[i],i)){\\n        newArray.push(arr[i])\\n      }\\n    }\\n    return newArray;\\n};"
                    },
                    {
                        "username": "user6593XG",
                        "content": "I see where I messed up. \\nHint: remember what the index is in a for-of loop.\\nfor (const i of arr) does not mean the index."
                    },
                    {
                        "username": "Abhishekjwp",
                        "content": "the last example is kind of not making sense to me.\\ncan someone explain?\\n\\n"
                    },
                    {
                        "username": "tomeknaj",
                        "content": "This is how I understand it, although it also wasn\\'t clear to me at first:\\n\\nThe filtering function in example 3 will filter out any values (n) for which n+1 evaluates to a falsey value. So -1 gets filtered out because -1+1 evaluates to zero, which is falsey.\\n\\nHope this makes sense."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Hey finally I am coming with solutions."
                    },
                    {
                        "username": "ahimCode",
                        "content": "const filter = (arr, fn) => {\\n  let result = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    if (fn(arr[i], i)) {\\n      result.push(arr[i]);\\n    }\\n  }\\n  return result;\\n};"
                    },
                    {
                        "username": "qwsazi",
                        "content": "can someone explain why 3 example output is [-2,0,1,2] and not the [-1,0,1,2,3] if the fn function is just incrementing every arr[i] values?\nupdated after 3 minutes: I understood why. Code uses `if`, that only checks boolean values, -1 + 0 = 0 and 0 is 'false' boolean value"
                    },
                    {
                        "username": "Pushkraj",
                        "content": "actually it says we have to keep those values who returns true (truthy value) and \\n-2 + 1 = -1 (truthy)\\n-1 + 1 = 0 (falsy)\\n0 + 1 = 1 (truthy)\\n1 + 1 = 2 (truthy)\\n2 + 1 = 3 (truthy)\\n\\nso answer is [-2,0,1,2] .\\n\\nfalse, 0 , \"\", null, undefined, NaN are falsy values."
                    },
                    {
                        "username": "duranbe",
                        "content": "that i thing is confusing"
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "are you a beginner?"
                    },
                    {
                        "username": "wesleyarya40",
                        "content": "can anyone please explain the full process of this question"
                    }
                ]
            }
        ]
    }
]