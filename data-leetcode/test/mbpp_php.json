[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "<?php\nfunction next_smallest_palindrome($num) {\n    var i = 0;\n    var j = $num.length - 1;\n    while (i < j) {\n        if ($num[i] < $num[j]) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $num[i];\n}\n\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome_of_a_string($str) {\n    var i = 0;\n    var j = $str.length - 1;\n    while (i < j) {\n        if ($str[i] < $str[j]) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $str[i];\n}\n\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome_of_a_string_with_a_prefix($str, prefix) {\n    var i = 0;\n    var j = $str.length - 1;\n    while (i < j) {\n        if ($str[i] < $str[j] && $str[i] < prefix) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $str[i];\n}\n\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome_of_a_string_with_a_prefix_and_a_suffix($str, prefix, suffix) {\n    var i = 0;\n    var j = $str.length - 1;\n    while (i < j) {\n        if ($str[i] < $str[j] && $str[i] < prefix && $str[i] < suffix) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $str[i];\n",
        "test_list": [
            "function candidate(...$args) {",
            "return next_smallest_palindrome(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(99) !== 101) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1221) !== 1331) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(120) !== 121) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "<?php\nfunction kth_element($arr, $k) {\n    var $i = $arr.length - 1;\n    var $j = $arr.length - 1;\n    var $k_i = $k - 1;\n    var $k_j = $k - 1;\n    while ($i >= 0 && $j >= 0 && $k_i >= 0 && $k_j >= 0) {\n        if ($arr[$i] === $arr[$j]) {\n            $i--;\n            $j--;\n            $k_i--;\n            $k_j--;\n        } else if ($arr[$i] < $arr[$j]) {\n            $i--;\n            $j--;\n            $k_i--;\n            $k_j--;\n        } else {\n            $i--;\n            $j--;\n            $k_i--;\n            $k_j--;\n        }\n    }\n    return $arr[$i];\n}\n\n// Write a function to find the kth element in the given array using 0-based indexing.\nfunction kth_element_reverse($arr, $k) {\n    var $i = $arr.length - 1;\n    var $j = $arr.length - 1;\n    var $k_i = $k - 1;\n    var $k_j = $k - 1;\n    while ($i >= 0 && $j >= 0 && $k_i >= 0 && $k_j >= 0) {\n        if ($arr[$i] === $arr[$j]) {\n            $i--;\n            $j--;\n            $k_i--;\n            $k_j--;\n        } else if ($arr[$i] < $arr[$j]) {\n            $i--;\n            $j--;\n            $k_i--;\n            $k_j--;\n        } else {\n            $i--;\n            $j--;\n            $k_i--;\n            $k_j--;\n        }\n    }\n    return $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return kth_element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(12, 3, 5, 7, 19), 2) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(17, 24, 8, 23), 3) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(16, 21, 25, 36, 4), 4) !== 36) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "<?php\nfunction snake_to_camel($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toUpperCase();\n    });\n}\n\n// Write a function to convert a snake case string to camel case string.\nfunction camel_to_snake($word) {\n    return $word.replace(/([a-z])/g, function(match, $1) {\n        return $1.toLowerCase();\n    });\n}\n\n// Write a function to convert a snake case string to camel case string.\nfunction snake_to_camel_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toLowerCase();\n    });\n}\n\n// Write a function to convert a snake case string to camel case string.\nfunction camel_to_snake_case($word) {\n    return $word.replace(/([a-z])/g, function(match, $1) {\n        return $1.toUpperCase();\n    });\n}\n\n// Write a function to convert a snake case string to camel case string.\nfunction snake_to_camel_case_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toLowerCase();\n    });\n}\n\n// Write a function to convert a snake case string to camel case string.\nfunction camel_to_snake_case_case($word) {\n    return $word.replace(/([a-z])/g, function(match, $1) {\n        return $1.toUpperCase();\n    });\n}\n\n// Write a function to convert a snake case string to camel case string.\nfunction snake_to_camel_case_case_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toLowerCase();\n    });\n}\n\n// Write a function to\n",
        "test_list": [
            "function candidate(...$args) {",
            "return snake_to_camel(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python_program\") !== \"PythonProgram\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python_language\") !== \"PythonLanguage\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"programming_language\") !== \"ProgrammingLanguage\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "<?php\nfunction eulerian_num($n, $m) {\n    var a = [];\n    for (var i = 0; i < $n; i++) {\n        a.push(i);\n    }\n    for (var i = 0; i < $m; i++) {\n        a.push(i);\n    }\n    return a;\n}\n\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num_2($n, $m) {\n    var a = [];\n    for (var i = 0; i < $n; i++) {\n        a.push(i);\n    }\n    for (var i = 0; i < $m; i++) {\n        a.push(i);\n    }\n    return a;\n}\n\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num_3($n, $m) {\n    var a = [];\n    for (var i = 0; i < $n; i++) {\n        a.push(i);\n    }\n    for (var i = 0; i < $m; i++) {\n        a.push(i);\n    }\n    return a;\n}\n\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num_4($n, $m) {\n    var a = [];\n    for (var i = 0; i < $n; i++) {\n        a.push(i);\n    }\n    for (var i = 0; i < $m; i++) {\n        a.push(i);\n    }\n    return a;\n}\n\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num_5($n, $m) {\n    var a = [];\n    for (var i = 0; i < $n; i++) {\n        a.push(i);\n    }\n    for (var i = 0; i < $m; i++) {\n        a.push(i);\n    }\n",
        "test_list": [
            "function candidate(...$args) {",
            "return eulerian_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3, 1) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 1) !== 11) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, 3) !== 26) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "<?php\nfunction sort_sublists($input_list) {\n    var $sub_list = [];\n    for (var i = 0; i < $input_list.length; i++) {\n        $sub_list.push($input_list[i]);\n    }\n    $sub_list.sort();\n    return $sub_list;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length($input_list) {\n    var $sub_list = [];\n    for (var i = 0; i < $input_list.length; i++) {\n        $sub_list.push($input_list[i].length);\n    }\n    $sub_list.sort();\n    return $sub_list;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length_by_length($input_list) {\n    var $sub_list = [];\n    for (var i = 0; i < $input_list.length; i++) {\n        $sub_list.push($input_list[i].length);\n    }\n    $sub_list.sort();\n    return $sub_list;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length_by_length_by_length($input_list) {\n    var $sub_list = [];\n    for (var i = 0; i < $input_list.length; i++) {\n        $sub_list.push($input_list[i].length);\n        $sub_list.push($input_list[i].length);\n    }\n    $sub_list.sort();\n    return $sub_list;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length_by_length_by_length_by_length($input_list) {\n    var $sub_list = [];\n    for (var i = 0; i <\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sort_sublists(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"white\", \"black\", \"orange\"))) !== array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"black\", \"orange\", \"white\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\" red \", \"green\"), array(\"blue \", \" black\"), array(\" orange\", \"brown\"))) !== array(array(\" red \", \"green\"), array(\" black\", \"blue \"), array(\" orange\", \"brown\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"zilver\", \"gold\"), array(\"magnesium\", \"aluminium\"), array(\"steel\", \"bronze\"))) !== array(array(\"gold\", \"zilver\"), array(\"aluminium\", \"magnesium\"), array(\"bronze\", \"steel\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a phpthon function to count true booleans in the given array.",
        "code": "<?php\nfunction count($lst) {\n\tvar $ret = 0;\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\tif ($lst[i]) {\n\t\t\t$ret++;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n// Write a phpthon function to count the number of true booleans in the given array.\nfunction count_true($lst) {\n\tvar $ret = 0;\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\tif ($lst[i]) {\n\t\t\t$ret++;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n// Write a phpthon function to count the number of false booleans in the given array.\nfunction count_false($lst) {\n\tvar $ret = 0;\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\tif (!$lst[i]) {\n\t\t\t$ret++;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n// Write a phpthon function to count the number of false booleans in the given array.\nfunction count_false_true($lst) {\n\tvar $ret = 0;\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\tif (!$lst[i]) {\n\t\t\t$ret++;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n// Write a phpthon function to count the number of false booleans in the given array.\nfunction count_false_true_true($lst) {\n\tvar $ret = 0;\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\tif (!$lst[i]) {\n\t\t\t$ret++;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n// Write a phpthon function to count the number of false booleans in the given array.\nfunction count_false_true_false($lst) {\n\tvar $ret = 0;\n\tfor (var i = 0; i < $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(true, false, true)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(false, false)) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(true, true, true)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given array to the given arrays.",
        "code": "<?php\nfunction add_lists($test_list, $test_tup) {\n  var $test_list_len = $test_list.length;\n  var $test_tup_len = $test_tup.length;\n  var $test_array = [];\n  for (var i = 0; i < $test_list_len; i++) {\n    $test_array.push($test_list[i]);\n  }\n  for (var i = 0; i < $test_tup_len; i++) {\n    $test_array.push($test_tup[i]);\n  }\n  return $test_array;\n}\n\n// Write a function to append the given array to the given array.\nfunction add_lists_to_array($test_list, $test_tup) {\n  var $test_list_len = $test_list.length;\n  var $test_tup_len = $test_tup.length;\n  var $test_array = [];\n  for (var i = 0; i < $test_list_len; i++) {\n    $test_array.push($test_list[i]);\n  }\n  for (var i = 0; i < $test_tup_len; i++) {\n    $test_array.push($test_tup[i]);\n  }\n  return $test_array;\n}\n\n// Write a function to append the given array to the given array.\nfunction add_lists_to_array_with_index($test_list, $test_tup, $index) {\n  var $test_list_len = $test_list.length;\n  var $test_tup_len = $test_tup.length;\n  var $test_array = [];\n  for (var i = 0; i < $test_list_len; i++) {\n    $test_array.push($test_list[i]);\n  }\n  for (var i = 0; i < $test_tup_len; i++) {\n    $test_array.push($test_tup[i]);\n  }\n  \n",
        "test_list": [
            "function candidate(...$args) {",
            "return add_lists(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 6, 7), array(9, 10)) !== array(9, 10, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(6, 7, 8), array(10, 11)) !== array(10, 11, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9), array(11, 12)) !== array(11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three arrays into a single sorted array.",
        "code": "<?php\nfunction merge_sorted_list($num1, $num2, $num3) {\n  var $merged = [];\n  $merged.push($num1);\n  $merged.push($num2);\n  $merged.push($num3);\n  return $merged;\n}\n\n// Write a function to merge three arrays into a single sorted array.\nfunction merge_sorted_list_with_key($num1, $num2, $num3, $key) {\n  var $merged = [];\n  $merged.push($num1);\n  $merged.push($num2);\n  $merged.push($num3);\n  $merged.push($key);\n  return $merged;\n}\n\n// Write a function to merge three arrays into a single sorted array.\nfunction merge_sorted_list_with_key_and_value($num1, $num2, $num3, $key, $value) {\n  var $merged = [];\n  $merged.push($num1);\n  $merged.push($num2);\n  $merged.push($num3);\n  $merged.push($key);\n  $merged.push($value);\n  return $merged;\n}\n\n// Write a function to merge three arrays into a single sorted array.\nfunction merge_sorted_list_with_key_and_value_and_value($num1, $num2, $num3, $key, $value, $value2) {\n  var $merged = [];\n  $merged.push($num1);\n  $merged.push($num2);\n  $merged.push($num3);\n  $merged.push($key);\n  $merged.push($value);\n  $merged.push($value2);\n  return $merged;\n}\n\n// Write a function to merge three arrays into a single sorted array.\nfunction merge_sorted_list_with_key_and_value_and_value_and_value($num1, $num2, $num3, $key, $value, $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return merge_sorted_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(25, 24, 15, 4, 5, 29, 110), array(19, 20, 11, 56, 25, 233, 154), array(24, 26, 54, 48)) !== array(4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 3, 5, 6, 8, 9), array(2, 5, 7, 11), array(1, 4, 7, 8, 12)) !== array(1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1), array(25, 35, 22, 85, 14, 65, 75, 25, 58), array(12, 74, 9, 50, 61, 41)) !== array(1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a phpthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "<?php\nfunction odd_Equivalent($s, $n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        if ($s[$i] % 2 == 1) {\n            $i++;\n        } else {\n            $i = $i + 1;\n        }\n    }\n    return $i;\n}\n\n// Write a phpthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Count($s, $n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        if ($s[$i] % 2 == 1) {\n            $i++;\n        } else {\n            $i = $i + 1;\n        }\n    }\n    return $i;\n}\n\n// Write a phpthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Count_2($s, $n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        if ($s[$i] % 2 == 1) {\n            $i++;\n        } else {\n            $i = $i + 1;\n        }\n    }\n    return $i;\n}\n\n// Write a phpthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Count_3($s, $n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        if ($s[$i] % 2 == 1) {\n            $i++;\n        } else {\n            $i = $i + 1;\n        }\n    }\n    return $i;\n}\n\n// Write a phpthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return odd_Equivalent(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"011001\", 6) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"11011\", 5) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"1010\", 4) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "<?php\nfunction check_integer($text) {\n    if ($text.match(/^\\d+$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if a string represents a number or not.\nfunction check_number($text) {\n    if ($text.match(/^\\d+$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if a string represents a boolean or not.\nfunction check_boolean($text) {\n    if ($text.match(/^\\d+$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if a string represents a string or not.\nfunction check_string($text) {\n    if ($text.match(/^[a-zA-Z0-9]+$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if a string represents a function or not.\nfunction check_function($text) {\n    if ($text.match(/^\\(.*\\)\\s*$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if a string represents a function or not.\nfunction check_function_call($text) {\n    if ($text.match(/^\\(.*\\)\\s*$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if a string represents a function or not.\nfunction check_function_call_with_args($text) {\n    if ($text.match(/^\\(.*\\)\\s*$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if a string represents a function or not.\nfunction check_function_call_with_args_and_args($text) {\n    if ($text.match(/^\\(.*\\)\\s*$/)) {\n        return true;\n    }\n    return false;\n}\n\n// Write\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_integer(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"1\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"12345\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given array of positive integers into a single integer.",
        "code": "<?php\nfunction tuple_to_int($nums) {\n    var i = 0;\n    var nums = $nums;\n    while (i < nums.length) {\n        if (nums[i] < 0) {\n            nums[i] = nums[i] + 1;\n        }\n        i++;\n    }\n    return nums;\n}\n\n// Write a function to convert a given array of integers into a single integer.\nfunction int_to_tuple($ints) {\n    var i = 0;\n    var nums = $ints;\n    while (i < nums.length) {\n        if (nums[i] < 0) {\n            nums[i] = nums[i] + 1;\n        }\n        i++;\n    }\n    return nums;\n}\n\n// Write a function to convert a given array of integers into a single integer.\nfunction tuple_to_int_array($ints) {\n    var i = 0;\n    var nums = $ints;\n    while (i < nums.length) {\n        if (nums[i] < 0) {\n            nums[i] = nums[i] + 1;\n        }\n        i++;\n    }\n    return nums;\n}\n\n// Write a function to convert a given array of integers into a single integer.\nfunction int_to_tuple_array($ints) {\n    var i = 0;\n    var nums = $ints;\n    while (i < nums.length) {\n        if (nums[i] < 0) {\n            nums[i] = nums[i] + 1;\n        }\n        i++;\n    }\n    return nums;\n}\n\n// Write a function to convert a given array of integers into a single integer.\nfunction tuple_to_int_array_array($ints) {\n    var i = 0;\n    var nums = $ints;\n    while (i < nums.length) {\n        if (nums[i] < 0) {\n            nums[i] = nums[i\n",
        "test_list": [
            "function candidate(...$args) {",
            "return tuple_to_int(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== 123) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 6)) !== 456) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 6, 7)) !== 567) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in an array of arrays to floats.",
        "code": "<?php\nfunction list_to_float($test_list) {\n    var $test_array = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $test_array.push($test_list[i]);\n    }\n    return $test_array;\n}\n\n// Write a function to convert all possible convertible elements in an array of arrays to integers.\nfunction list_to_int($test_list) {\n    var $test_array = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $test_array.push($test_list[i].toInt());\n    }\n    return $test_array;\n}\n\n// Write a function to convert all possible convertible elements in an array of arrays to strings.\nfunction list_to_string($test_list) {\n    var $test_array = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $test_array.push($test_list[i].toString());\n    }\n    return $test_array;\n}\n\n// Write a function to convert all possible convertible elements in an array of arrays to booleans.\nfunction list_to_bool($test_list) {\n    var $test_array = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $test_array.push($test_list[i].toBoolean());\n    }\n    return $test_array;\n}\n\n// Write a function to convert all possible convertible elements in an array of arrays to arrays.\nfunction list_to_array($test_list) {\n    var $test_array = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $test_array.push($test_list[i].toArray());\n    }\n    return $test_array;\n}\n\n// Write a function to convert all possible convertible elements in an array of arrays to objects.\nfunction list_to_object($test_list) {\n    var $test_array =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return list_to_float(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"3\", \"4\"), array(\"1\", \"26.45\"), array(\"7.32\", \"8\"), array(\"4\", \"8\"))) !== array(array(3.0, 4.0), array(1.0, 26.45), array(7.32, 8.0), array(4.0, 8.0))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"4\", \"4\"), array(\"2\", \"27\"), array(\"4.12\", \"9\"), array(\"7\", \"11\"))) !== array(array(4.0, 4.0), array(2.0, 27.0), array(4.12, 9.0), array(7.0, 11.0))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"6\", \"78\"), array(\"5\", \"26.45\"), array(\"1.33\", \"4\"), array(\"82\", \"13\"))) !== array(array(6.0, 78.0), array(5.0, 26.45), array(1.33, 4.0), array(82.0, 13.0))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to an array of strings split on the space character.",
        "code": "<?php\nfunction string_to_list($string) {\n    var $list = [];\n    $string.split(/\\s+/g).forEach(function(item) {\n        $list.push(item);\n    });\n    return $list;\n}\n\n// Write a function to convert a string to an array of strings split on the space character.\nfunction string_to_array($string) {\n    var $array = [];\n    $string.split(/\\s+/g).forEach(function(item) {\n        $array.push(item);\n    });\n    return $array;\n}\n\n// Write a function to convert a string to an array of strings split on the space character.\nfunction string_to_array_with_space($string) {\n    var $array = [];\n    $string.split(/\\s+/g).forEach(function(item) {\n        $array.push(item);\n    });\n    return $array;\n}\n\n// Write a function to convert a string to an array of strings split on the space character.\nfunction string_to_array_with_space_with_space($string) {\n    var $array = [];\n    $string.split(/\\s+/g).forEach(function(item) {\n        $array.push(item);\n    });\n    return $array;\n}\n\n// Write a function to convert a string to an array of strings split on the space character.\nfunction string_to_array_with_space_with_space_with_space($string) {\n    var $array = [];\n    $string.split(/\\s+/g).forEach(function(item) {\n        $array.push(item);\n    });\n    return $array;\n}\n\n// Write a function to convert a string to an array of strings split on the space character.\nfunction string_to_array_with_space_with_space_with_space_with_space($string) {\n    var $array = [];\n    $string.split(/\\s+/g).forEach(function(item) {\n        $array.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return string_to_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python programming\") !== array(\"python\", \"programming\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"lists tuples strings\") !== array(\"lists\", \"tuples\", \"strings\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"write a program\") !== array(\"write\", \"a\", \"program\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a phpthon function to find the element that appears only once in a sorted array.",
        "code": "<?php\nfunction search($arr) {\n    var i = 0;\n    var j = $arr.length - 1;\n    while (i < j) {\n        if ($arr[i] === $arr[j]) {\n            return i;\n        }\n        i++;\n        j--;\n    }\n    return -1;\n}\n\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction find_element($arr) {\n    var i = 0;\n    var j = $arr.length - 1;\n    while (i < j) {\n        if ($arr[i] === $arr[j]) {\n            return $arr[i];\n        }\n        i++;\n        j--;\n    }\n    return null;\n}\n\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction find_element_by_index($arr) {\n    var i = 0;\n    var j = $arr.length - 1;\n    while (i < j) {\n        if ($arr[i] === $arr[j]) {\n            return $arr[i];\n        }\n        i++;\n        j--;\n    }\n    return null;\n}\n\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction find_element_by_index_by_index($arr) {\n    var i = 0;\n    var j = $arr.length - 1;\n    while (i < j) {\n        if ($arr[i] === $arr[j]) {\n            return $arr[i];\n        }\n        i++;\n        j--;\n    }\n    return null;\n}\n\n// Write a phpthon function to find the element that appears only once in a sorted array.\nfunction find_element_by_index_by_index_by_index($arr) {\n    var i = 0;\n    var j = $arr.length - 1;\n    while (i < j) {\n        if ($arr[i] === $arr[j]) {\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return search(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a phpthon function to remove first and last occurrence of a given character from the string.",
        "code": "<?php\nfunction remove_Occ($s, $ch) {\n    var $ret = \"\";\n    var $i = 0;\n    var $len = $s.length;\n    while ($i < $len) {\n        if ($s.charAt($i) == $ch) {\n            $ret = $ret.sub($i, $i + 1);\n            $i++;\n        } else {\n            $i++;\n        }\n    }\n    return $ret;\n}\n\n// Write a phpthon function to remove the first occurrence of a given character from the string.\nfunction remove_Occ_First($s, $ch) {\n    var $ret = \"\";\n    var $i = 0;\n    var $len = $s.length;\n    while ($i < $len) {\n        if ($s.charAt($i) == $ch) {\n            $ret = $ret.sub($i, $i + 1);\n            $i++;\n        } else {\n            $i++;\n        }\n    }\n    return $ret;\n}\n\n// Write a phpthon function to remove the last occurrence of a given character from the string.\nfunction remove_Occ_Last($s, $ch) {\n    var $ret = \"\";\n    var $i = $s.length - 1;\n    var $len = $s.length;\n    while ($i >= 0) {\n        if ($s.charAt($i) == $ch) {\n            $ret = $ret.sub($i, $i + 1);\n            $i--;\n        } else {\n            $i--;\n        }\n    }\n    return $ret;\n}\n\n// Write a phpthon function to remove the first occurrence of a given character from the string.\nfunction remove_Occ_First_Last($s, $ch) {\n    var $ret = \"\";\n    var $i = 0;\n    var $len = $s.length;\n    while ($i < $len) {\n        if ($s.charAt($i) == $ch) {\n            $ret = $ret.sub($\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_Occ(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"hello\", \"l\") !== \"heo\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abcda\", \"a\") !== \"bcd\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"PHP\", \"P\") !== \"H\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.",
        "code": "<?php\nfunction max_product_tuple($list1) {\n    var max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        var max_i = 0;\n        for (var j = 0; j < $list1.length; j++) {\n            if ($list1[i] > $list1[j]) {\n                max_i = j;\n                break;\n            }\n        }\n        if (max_i > max) {\n            max = max_i;\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.\nfunction max_product_array($list1) {\n    var max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        var max_i = 0;\n        for (var j = 0; j < $list1.length; j++) {\n            if ($list1[i] > $list1[j]) {\n                max_i = j;\n                break;\n            }\n        }\n        if (max_i > max) {\n            max = max_i;\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.\nfunction max_product_array_tuple($list1) {\n    var max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        var max_i = 0;\n        for (var j = 0; j < $list1.length; j++) {\n            if ($list1[i] > $list1[j]) {\n                max_i = j;\n                break;\n            }\n        }\n        if (max_i > max) {\n            max = max_i;\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.\nfunction max_product_array_array($\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_product_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(2, 7), array(2, 6), array(1, 8), array(4, 9))) !== 36) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(10, 20), array(15, 2), array(5, 10))) !== 200) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(11, 44), array(10, 15), array(20, 5), array(12, 9))) !== 484) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "<?php\nfunction amicable_numbers_sum($limit) {\n    var sum = 0;\n    for (var i = 1; i <= $limit; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a function to find the number of amicable numbers from 1 to a specified number.\nfunction amicable_numbers_count($limit) {\n    var count = 0;\n    for (var i = 1; i <= $limit; i++) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to find the number of amicable numbers from 1 to a specified number.\nfunction amicable_numbers_min($limit) {\n    var min = 0;\n    for (var i = 1; i <= $limit; i++) {\n        if (i % 2 == 0) {\n            min = i;\n        }\n    }\n    return min;\n}\n\n// Write a function to find the number of amicable numbers from 1 to a specified number.\nfunction amicable_numbers_max($limit) {\n    var max = 0;\n    for (var i = 1; i <= $limit; i++) {\n        if (i % 2 == 0) {\n            max = i;\n        }\n    }\n    return max;\n}\n\n// Write a function to find the number of amicable numbers from 1 to a specified number.\nfunction amicable_numbers_sum_of_powers($limit) {\n    var sum = 0;\n    for (var i = 1; i <= $limit; i++) {\n        sum += Math.pow(i, 2);\n    }\n    return sum;\n}\n\n// Write a function to find the number of amicable numbers from 1 to a specified number.\nfunction amicable_numbers_sum_of_powers_of_two($limit) {\n    var sum = 0;\n    for (var i = 1; i <= $limit; i++) {\n        sum += Math.pow(i, 2) * i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "function candidate(...$args) {",
            "return amicable_numbers_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(999) !== 504) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9999) !== 31626) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(99) !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "<?php\nfunction find_length($string) {\n    var max_length = 0;\n    for (var i = 0; i < $string.length; i++) {\n        if ($string[i] == 0) {\n            max_length = i;\n        }\n    }\n    return max_length;\n}\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunction find_length_sub($string) {\n    var max_length = 0;\n    for (var i = 0; i < $string.length; i++) {\n        if ($string[i] == 1) {\n            max_length = i;\n        }\n    }\n    return max_length;\n}\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunction find_length_sub_sub($string) {\n    var max_length = 0;\n    for (var i = 0; i < $string.length; i++) {\n        if ($string[i] == 0) {\n            max_length = i;\n        }\n    }\n    return max_length;\n}\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunction find_length_sub_sub_sub($string) {\n    var max_length = 0;\n    for (var i = 0; i < $string.length; i++) {\n        if ($string[i] == 1) {\n            max_length = i;\n        }\n    }\n    return max_length;\n}\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunction find_length_sub_sub_sub($string) {\n    var max_length = 0;\n    for (var i = 0; i < $string.length; i++) {\n        if\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_length(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"11000010001\") !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"10111\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"11011101100101\") !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a phpthon function to find the sum of common divisors of two given numbers.",
        "code": "<?php\nfunction sum($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $a * $b;\n    return $c;\n}\n\n// Write a phpthon function to find the sum of the first two given numbers.\nfunction sum2($a, $b) {\n    var $c = 0;\n    $c = $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 15) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(100, 150) !== 93) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 6) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "<?php\nfunction multiply_int($x, $y) {\n    return $x * $y;\n}\n\n// Write a function to divide two integers.\nfunction divide_int($x, $y) {\n    return $x / $y;\n}\n\n// Write a function to check if two integers are equal.\nfunction is_equal_int($x, $y) {\n    return $x === $y;\n}\n\n// Write a function to check if two integers are not equal.\nfunction is_not_equal_int($x, $y) {\n    return $x!== $y;\n}\n\n// Write a function to check if two integers are equal.\nfunction is_equal_float($x, $y) {\n    return $x === $y;\n}\n\n// Write a function to check if two integers are not equal.\nfunction is_not_equal_float($x, $y) {\n    return $x!== $y;\n}\n\n// Write a function to check if two integers are equal.\nfunction is_equal_double($x, $y) {\n    return $x === $y;\n}\n\n// Write a function to check if two integers are not equal.\nfunction is_not_equal_double($x, $y) {\n    return $x!== $y;\n}\n\n// Write a function to check if two integers are equal.\nfunction is_equal_string($x, $y) {\n    return $x === $y;\n}\n\n// Write a function to check if two integers are not equal.\nfunction is_not_equal_string($x, $y) {\n    return $x!== $y;\n}\n\n// Write a function to check if two integers are equal.\nfunction is_equal_boolean($x, $y) {\n    return $x === $y;\n}\n\n// Write a function to check if two integers are not equal.\nfunction is_not_equal_boolean($x, $y) {\n    return $x!== $y;\n}\n\n// Write a function to check if two integers are equal.\nfunction is_equal_array($x, $y) {\n    return\n",
        "test_list": [
            "function candidate(...$args) {",
            "return multiply_int(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 20) !== 200) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, 10) !== 50) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 8) !== 32) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given array of words.",
        "code": "<?php\nfunction long_words($n, $str) {\n    var $l = 0;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $str.length;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = $n;\n    var $i\n",
        "test_list": [
            "function candidate(...$args) {",
            "return long_words(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3, \"python is a programming language\") !== array(\"python\", \"programming\", \"language\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2, \"writing a program\") !== array(\"writing\", \"program\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, \"sorting list\") !== array(\"sorting\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "<?php\nfunction magic_square_test($my_matrix) {\n  var $magic_square = $my_matrix[0][0];\n  var $magic_square_sum = 0;\n  for (var i = 0; i < $my_matrix.length; i++) {\n    $magic_square_sum += $my_matrix[i][i];\n  }\n  return $magic_square_sum == $magic_square;\n}\n\n// Write a function to calculate the sum of the squares of the elements in the matrix.\nfunction sum_of_squares($my_matrix) {\n  var $sum_of_squares = 0;\n  for (var i = 0; i < $my_matrix.length; i++) {\n    $sum_of_squares += $my_matrix[i][i];\n  }\n  return $sum_of_squares;\n}\n\n// Write a function to calculate the sum of the squares of the elements in the matrix.\nfunction sum_of_squares_of_matrix($my_matrix) {\n  var $sum_of_squares_of_matrix = 0;\n  for (var i = 0; i < $my_matrix.length; i++) {\n    $sum_of_squares_of_matrix += $my_matrix[i][i];\n  }\n  return $sum_of_squares_of_matrix;\n}\n\n// Write a function to calculate the sum of the squares of the elements in the matrix.\nfunction sum_of_squares_of_matrix_of_matrix($my_matrix) {\n  var $sum_of_squares_of_matrix_of_matrix = 0;\n  for (var i = 0; i < $my_matrix.length; i++) {\n    $sum_of_squares_of_matrix_of_matrix += $my_matrix[i][i];\n  }\n  return $sum_of_squares_of_matrix_of_matrix;\n}\n\n// Write a function to calculate the sum of the\n",
        "test_list": [
            "function candidate(...$args) {",
            "return magic_square_test(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(7, 12, 1, 14), array(2, 13, 8, 11), array(16, 3, 10, 5), array(9, 6, 15, 4))) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 7, 6), array(9, 5, 1), array(4, 3, 8))) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 7, 6), array(9, 5, 1), array(4, 3, 7))) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "<?php\nfunction sort_matrix($M) {\n    var $M_rows = $M.rows;\n    var $M_cols = $M.cols;\n    var $M_sum = 0;\n    for (var i = 0; i < $M_rows; i++) {\n        for (var j = 0; j < $M_cols; j++) {\n            $M_sum += $M_rows * $M_cols * $M[i][j];\n        }\n    }\n    return $M_sum;\n}\n\n// Write a function to sort a given matrix in descending order according to the sum of its rows.\nfunction sort_matrix_desc($M) {\n    var $M_rows = $M.rows;\n    var $M_cols = $M.cols;\n    var $M_sum = 0;\n    for (var i = $M_rows - 1; i >= 0; i--) {\n        for (var j = 0; j < $M_cols; j++) {\n            $M_sum += $M_rows * $M_cols * $M[i][j];\n        }\n    }\n    return $M_sum;\n}\n\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix_asc($M) {\n    var $M_rows = $M.rows;\n    var $M_cols = $M.cols;\n    var $M_sum = 0;\n    for (var i = 0; i < $M_rows; i++) {\n        for (var j = 0; j < $M_cols; j++) {\n            $M_sum += $M_rows * $M_cols * $M[i][j];\n        }\n    }\n    return $M_sum;\n}\n\n// Write a function to sort a given matrix in descending order according to the sum of its rows.\nfunction sort_matrix_desc_asc($M) {\n    var $M_rows = $M.rows;\n    var $M\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sort_matrix(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given array.",
        "code": "<?php\nfunction max_occurrences($nums) {\n    var max_occurrences = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > max_occurrences) {\n            max_occurrences = $nums[i];\n        }\n    }\n    return max_occurrences;\n}\n\n// Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences_of_item($item) {\n    var max_occurrences = 0;\n    for (var i = 0; i < $item.length; i++) {\n        if ($item[i] > max_occurrences) {\n            max_occurrences = $item[i];\n        }\n    }\n    return max_occurrences;\n}\n\n// Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences_of_item_of_array($item) {\n    var max_occurrences = 0;\n    for (var i = 0; i < $item.length; i++) {\n        if ($item[i] > max_occurrences) {\n            max_occurrences = $item[i];\n        }\n    }\n    return max_occurrences;\n}\n\n// Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences_of_item_of_array_of_array($item) {\n    var max_occurrences = 0;\n    for (var i = 0; i < $item.length; i++) {\n        if ($item[i] > max_occurrences) {\n            max_occurrences = $item[i];\n        }\n    }\n    return max_occurrences;\n}\n\n// Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences_of_item_of_array_of_array($item) {\n    var max_occurrences = 0;\n    for (var i = 0; i <\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_occurrences(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18)) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10)) !== 20) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a phpthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "<?php\nfunction reverse_vowels($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.replace(/[aeiouy]/g, function(match) {\n        return match.toUpperCase();\n    });\n    return $str3;\n}\n\n// Write a phpthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels_lower($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.replace(/[aeiouy]/g, function(match) {\n        return match.toUpperCase();\n    });\n    return $str3;\n}\n\n// Write a phpthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels_upper($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.replace(/[aeiouy]/g, function(match) {\n        return match.toUpperCase();\n    });\n    return $str3;\n}\n\n// Write a phpthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels_lower_upper($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.replace(/[aeiouy]/g, function(match) {\n        return match.toUpperCase();\n    });\n    return $str3;\n}\n\n// Write a phpthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels_upper_lower($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.replace(/[aeiouy]/g, function(match) {\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return reverse_vowels(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Python\") !== \"Python\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"USA\") !== \"ASU\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"ab\") !== \"ab\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert an array to a string.",
        "code": "<?php\nfunction tup_string($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array_array($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array_array_array($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array_array_array_array($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array_array_array_array($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array_array_array_array($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array_array_array_array($tup1) {\n  $tup1 = $tup1.join('');\n  return $tup1;\n}\n\n// Write a function to convert an array to a string.\nfunction tup_string_array_array_array_array($tup1) {\n  $tup1 = $tup1.join('');\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return tup_string(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\")) !== \"exercises\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")) !== \"python\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\")) !== \"program\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given array of numbers.",
        "code": "<?php\nfunction sum_negativenum($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of the positive numbers of a given array of numbers.\nfunction sum_positivenum($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of the negative and positive numbers of a given array of numbers.\nfunction sum_negativenum_positivenum($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of the negative and positive numbers of a given array of numbers.\nfunction sum_positivenum_positivenum($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of the negative and positive numbers of a given array of numbers.\nfunction sum_negativenum_positivenum($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of the negative and positive numbers of a given array of numbers.\nfunction sum_positivenum_positivenum($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_negativenum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 4, -6, -9, 11, -12, 14, -5, 17)) !== -32) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 15, -14, 13, -18, 12, -20)) !== -52) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(19, -65, 57, 39, 152, -639, 121, 44, 90, -190)) !== -894) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "<?php\nfunction hexagonal_num($n) {\n    var $n_hex = $n % 2;\n    var $n_hex_hex = $n_hex % 2;\n    return $n_hex_hex;\n}\n\n// Write a function to find the nth triangular number.\nfunction triangular_num($n) {\n    var $n_tri = $n % 3;\n    var $n_tri_hex = $n_tri % 2;\n    return $n_tri_hex;\n}\n\n// Write a function to find the nth triangular number.\nfunction triangular_num_hex($n) {\n    var $n_hex = $n % 4;\n    var $n_hex_hex = $n_hex % 2;\n    return $n_hex_hex;\n}\n\n// Write a function to find the nth triangular number.\nfunction triangular_num_hex_hex($n) {\n    var $n_hex = $n % 8;\n    var $n_hex_hex = $n_hex % 2;\n    return $n_hex_hex;\n}\n\n// Write a function to find the nth triangular number.\nfunction triangular_num_hex_hex_hex($n) {\n    var $n_hex = $n % 16;\n    var $n_hex_hex = $n_hex % 2;\n    return $n_hex_hex;\n}\n\n// Write a function to find the nth triangular number.\nfunction triangular_num_hex_hex_hex_hex($n) {\n    var $n_hex = $n % 32;\n    var $n_hex_hex = $n_hex % 2;\n    return $n_hex_hex;\n}\n\n// Write a function to find the nth triangular number.\nfunction triangular_num_hex_hex_hex_hex($n) {\n    var $n_hex = $n % 64;\n    var $n_hex_hex = $n_hex % 2;\n    return $n_hex_hex;\n}\n\n// Write a function to find the nth triangular number.\nfunction triangular_num_hex_hex_hex_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return hexagonal_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== 190) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== 45) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== 91) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "<?php\nfunction is_Sum_Of_Powers_Of_Two($n) {\n    return $n % 2 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 3 or not.\nfunction is_Sum_Of_Powers_Of_Three($n) {\n    return $n % 3 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 4 or not.\nfunction is_Sum_Of_Powers_Of_Four($n) {\n    return $n % 4 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 5 or not.\nfunction is_Sum_Of_Powers_Of_Five($n) {\n    return $n % 5 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 6 or not.\nfunction is_Sum_Of_Powers_Of_Six($n) {\n    return $n % 6 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 7 or not.\nfunction is_Sum_Of_Powers_Of_Seven($n) {\n    return $n % 7 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 8 or not.\nfunction is_Sum_Of_Powers_Of_Eight($n) {\n    return $n % 8 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 9 or not.\nfunction is_Sum_Of_Powers_Of_Nine($n) {\n    return $n % 9 == 0;\n}\n\n// Write a phpthon function to check whether the given number can be represented as sum of non-zero powers of 10 or not.\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_Sum_Of_Powers_Of_Two(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(14) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "<?php\nfunction pancake_sort($nums) {\n    var $tmp = [];\n    for (var i = 0; i < $nums.length; i++) {\n        $tmp.push($nums[i]);\n    }\n    return $tmp;\n}\n\n// Write a function to sort an array of elements.\nfunction pancake_sort_reverse($nums) {\n    var $tmp = [];\n    for (var i = 0; i < $nums.length; i++) {\n        $tmp.push($nums[i]);\n    }\n    return $tmp;\n}\n\n// Write a function to sort an array of elements.\nfunction pancake_sort_unique($nums) {\n    var $tmp = [];\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i]!= $nums[i - 1]) {\n            $tmp.push($nums[i]);\n        }\n    }\n    return $tmp;\n}\n\n// Write a function to sort an array of elements.\nfunction pancake_sort_unique_reverse($nums) {\n    var $tmp = [];\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i]!= $nums[i + 1]) {\n            $tmp.push($nums[i]);\n        }\n    }\n    return $tmp;\n}\n\n// Write a function to sort an array of elements.\nfunction pancake_sort_unique_reverse_reverse($nums) {\n    var $tmp = [];\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i]!= $nums[i + 1]) {\n            $tmp.push($nums[i]);\n        }\n    }\n    return $tmp;\n}\n\n// Write a function to sort an array of elements.\nfunction pancake_sort_unique_reverse_reverse($nums) {\n    var $tmp = [];\n    for (var i = 0; i < $nums.length; i++) {\n        if ($\n",
        "test_list": [
            "function candidate(...$args) {",
            "return pancake_sort(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(15, 79, 25, 38, 69)) !== array(15, 25, 38, 69, 79)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(98, 12, 54, 36, 85)) !== array(12, 36, 54, 85, 98)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(41, 42, 32, 12, 23)) !== array(12, 23, 32, 41, 42)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given arrays.",
        "code": "<?php\nfunction count_samepair($list1, $list2, $list3) {\n    var $count = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] === $list2[i] && $list1[i] === $list3[i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a function to count number items that are identical in the same position of three given arrays.\nfunction count_samepair_with_count($list1, $list2, $list3, $count) {\n    var $count = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] === $list2[i] && $list1[i] === $list3[i] && $count < $count) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a function to count number items that are identical in the same position of three given arrays.\nfunction count_samepair_with_count_with_count($list1, $list2, $list3, $count, $count2) {\n    var $count = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] === $list2[i] && $list1[i] === $list3[i] && $count < $count2) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a function to count number items that are identical in the same position of three given arrays.\nfunction count_samepair_with_count_with_count_with_count($list1, $list2, $list3, $count, $count2, $count3) {\n    var $count = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] === $list2[i] && $list1[i] === $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_samepair(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 9), array(2, 1, 3, 1, 2, 6, 7, 9)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 8), array(2, 1, 3, 1, 2, 6, 7, 8)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 2, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 8), array(2, 1, 3, 1, 2, 6, 7, 8)) !== 5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of arrays present in the given array.",
        "code": "<?php\nfunction find_lists($Input) {\n    var $Lists = [];\n    for (var i = 0; i < $Input.length; i++) {\n        $Lists.push($Input[i]);\n    }\n    return $Lists.length;\n}\n\n// Write a function to find the number of arrays present in the given array.\nfunction find_lists_of_arrays($Input) {\n    var $Lists = [];\n    for (var i = 0; i < $Input.length; i++) {\n        $Lists.push($Input[i].split(' '));\n    }\n    return $Lists.length;\n}\n\n// Write a function to find the number of arrays present in the given array.\nfunction find_lists_of_arrays_of_lists($Input) {\n    var $Lists = [];\n    for (var i = 0; i < $Input.length; i++) {\n        $Lists.push($Input[i].split(' '));\n    }\n    return $Lists.length;\n}\n\n// Write a function to find the number of arrays present in the given array.\nfunction find_lists_of_arrays_of_lists_of_lists($Input) {\n    var $Lists = [];\n    for (var i = 0; i < $Input.length; i++) {\n        $Lists.push($Input[i].split(' '));\n    }\n    return $Lists.length;\n}\n\n// Write a function to find the number of arrays present in the given array.\nfunction find_lists_of_arrays_of_lists_of_lists_of_lists($Input) {\n    var $Lists = [];\n    for (var i = 0; i < $Input.length; i++) {\n        $Lists.push($Input[i].split(' '));\n    }\n    return $Lists.length;\n}\n\n// Write a function to find the number of arrays present in the given array.\nfunction find_lists_of_arrays_of_lists_of_lists_of_lists($Input) {\n    var $Lists = [];\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_lists(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8))) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2), array(3, 4), array(5, 6))) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(9, 8, 7, 6, 5, 4, 3, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a phpthon function to find the maximum difference between any two elements in a given array.",
        "code": "<?php\nfunction max_Abs_Diff($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > $arr[i + 1]) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find the minimum difference between any two elements in a given array.\nfunction min_Abs_Diff($arr) {\n    var min = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            min = $arr[i];\n        }\n    }\n    return min;\n}\n\n// Write a phpthon function to find the maximum difference between any two elements in a given array.\nfunction max_Abs_Diff_2($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > $arr[i + 1]) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find the minimum difference between any two elements in a given array.\nfunction min_Abs_Diff_2($arr) {\n    var min = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            min = $arr[i];\n        }\n    }\n    return min;\n}\n\n// Write a phpthon function to find the maximum difference between any two elements in a given array.\nfunction max_Abs_Diff_3($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > $arr[i + 1]) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_Abs_Diff(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 1, 5, 3)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(9, 3, 2, 5, 1)) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 2, 1)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a phpthon function to find the volume of a triangular prism.",
        "code": "<?php\nfunction find_Volume($l, $b, $h) {\n  var $v = 0;\n  var $i = 0;\n  var $j = 0;\n  var $k = 0;\n  var $l2 = $l;\n  var $b2 = $b;\n  var $h2 = $h;\n  var $i2 = 0;\n  var $j2 = 0;\n  var $k2 = 0;\n  var $l3 = $l;\n  var $b3 = $b;\n  var $h3 = $h;\n  var $i3 = 0;\n  var $j3 = 0;\n  var $k3 = 0;\n  var $l4 = $l;\n  var $b4 = $b;\n  var $h4 = $h;\n  var $i4 = 0;\n  var $j4 = 0;\n  var $k4 = 0;\n  var $l5 = $l;\n  var $b5 = $b;\n  var $h5 = $h;\n  var $i5 = 0;\n  var $j5 = 0;\n  var $k5 = 0;\n  var $l6 = $l;\n  var $b6 = $b;\n  var $h6 = $h;\n  var $i6 = 0;\n  var $j6 = 0;\n  var $k6 = 0;\n  var $l7 = $l;\n  var $b7 = $b;\n  var $h7 = $h;\n  var $i7 = 0;\n  var $j7 = 0;\n  var $k7 = 0;\n  var $l8 = $l;\n  var $b8 = $b;\n  var $h8 = $h;\n  var $i8 = 0;\n  var $j8 = 0;\n  var $k8 = 0;\n  var $l9 = $l;\n  var $b9 = $b;\n  var $h9 = $h;\n  var $i9 = 0;\n  var $j9 = 0\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Volume(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 8, 6) !== 240) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3, 2, 2) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1, 2, 1) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as an array, or return null if no solution exists.",
        "code": "<?php\nfunction find_solution($a, $b, $n) {\n    var $x = $a[0], $y = $a[1];\n    var $x_i = $x, $y_i = $y;\n    var $x_j = $x, $y_j = $y;\n    var $x_k = $x, $y_k = $y;\n    var $x_l = $x, $y_l = $y;\n    var $x_m = $x, $y_m = $y;\n    var $x_n = $x, $y_n = $y;\n    var $x_o = $x, $y_o = $y;\n    var $x_p = $x, $y_p = $y;\n    var $x_q = $x, $y_q = $y;\n    var $x_r = $x, $y_r = $y;\n    var $x_s = $x, $y_s = $y;\n    var $x_t = $x, $y_t = $y;\n    var $x_u = $x, $y_u = $y;\n    var $x_v = $x, $y_v = $y;\n    var $x_w = $x, $y_w = $y;\n    var $x_x = $x, $y_x = $y;\n    var $x_y = $x, $y_y = $y;\n    var $x_z = $x, $y_z = $y;\n    var $x_w_i = $x_w, $y_w_i = $y_w;\n    var $x_w_j = $x_w, $y_w_j = $y_w;\n    var $x_w_k = $x_w, $y_w_k = $y_w;\n    var $x_w_l = $x_w, $y_w_l =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_solution(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given array present in another array.",
        "code": "<?php\nfunction remove_elements($list1, $list2) {\n    var $list1_length = $list1.length;\n    var $list2_length = $list2.length;\n    var $index = 0;\n    while ($index < $list1_length) {\n        if ($list1[$index] === $list2[$index]) {\n            $list1.splice($index, 1);\n            $index++;\n        } else {\n            $index++;\n        }\n    }\n}\n\n// Remove all elements from a given array present in another array.\nfunction remove_elements_from_array($list1, $list2) {\n    var $list1_length = $list1.length;\n    var $list2_length = $list2.length;\n    var $index = 0;\n    while ($index < $list1_length) {\n        if ($list1[$index] === $list2[$index]) {\n            $list1.splice($index, 1);\n            $index++;\n        } else {\n            $index++;\n        }\n    }\n}\n\n// Remove all elements from a given array present in another array.\nfunction remove_elements_from_array_from_array($list1, $list2) {\n    var $list1_length = $list1.length;\n    var $list2_length = $list2.length;\n    var $index = 0;\n    while ($index < $list1_length) {\n        if ($list1[$index] === $list2[$index]) {\n            $list1.splice($index, 1);\n            $index++;\n        } else {\n            $index++;\n        }\n    }\n}\n\n// Remove all elements from a given array present in another array.\nfunction remove_elements_from_array_from_array_from_array($list1, $list2) {\n    var $list1_length = $list1.length;\n    var $list2_length = $list2.length;\n    var $index = 0;\n    while ($index < $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_elements(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), array(2, 4, 6, 8)) !== array(1, 3, 5, 7, 9, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), array(1, 3, 5, 7)) !== array(2, 4, 6, 8, 9, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), array(5, 7)) !== array(1, 2, 3, 4, 6, 8, 9, 10)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "<?php\nfunction sum_series($n) {\n  var sum = 0;\n  for (var i = 0; i < $n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunction sum_series_2($n) {\n  var sum = 0;\n  for (var i = 0; i < $n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunction sum_series_3($n) {\n  var sum = 0;\n  for (var i = 0; i < $n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunction sum_series_4($n) {\n  var sum = 0;\n  for (var i = 0; i < $n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunction sum_series_5($n) {\n  var sum = 0;\n  for (var i = 0; i < $n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n// Write a function to calculate\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_series(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(6) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 30) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9) !== 25) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "<?php\nfunction are_equivalent($num1, $num2) {\n    var $num1_div = $num1 / $num1;\n    var $num2_div = $num2 / $num2;\n    return $num1_div === $num2_div;\n}\n\n// Write a function to determine if the sum of the divisors of two integers is the same.\nfunction are_equivalent_divisors($num1, $num2) {\n    var $num1_div = $num1 / $num1;\n    var $num2_div = $num2 / $num2;\n    return $num1_div === $num2_div;\n}\n\n// Write a function to determine if the sum of the divisors of two integers is the same.\nfunction are_equivalent_divisors_divisors($num1, $num2) {\n    var $num1_div = $num1 / $num1;\n    var $num2_div = $num2 / $num2;\n    return $num1_div === $num2_div;\n}\n\n// Write a function to determine if the sum of the divisors of two integers is the same.\nfunction are_equivalent_divisors_divisors_divisors($num1, $num2) {\n    var $num1_div = $num1 / $num1;\n    var $num2_div = $num2 / $num2;\n    return $num1_div === $num2_div;\n}\n\n// Write a function to determine if the sum of the divisors of two integers is the same.\nfunction are_equivalent_divisors_divisors_divisors($num1, $num2) {\n    var $num1_div = $num1 / $num1;\n    var $num2_div = $num2 / $num2;\n    return $num1_div === $num2_div;\n}\n\n// Write a function to determine if the sum of the divisors of two integers is the same.\nfunction are_equivalent_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return are_equivalent(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(36, 57) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2, 4) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(23, 47) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "<?php\nfunction count_char_position($str1) {\n\tvar $str2 = $str1.toLowerCase();\n\tvar $str3 = $str2.split('');\n\tvar $str4 = $str3.join('');\n\tvar $str5 = $str4.split('');\n\tvar $str6 = $str5.join('');\n\tvar $str7 = $str6.split('');\n\tvar $str8 = $str7.join('');\n\tvar $str9 = $str8.split('');\n\tvar $str10 = $str9.join('');\n\tvar $str11 = $str10.split('');\n\tvar $str12 = $str11.join('');\n\tvar $str13 = $str12.split('');\n\tvar $str14 = $str13.join('');\n\tvar $str15 = $str14.split('');\n\tvar $str16 = $str15.join('');\n\tvar $str17 = $str16.split('');\n\tvar $str18 = $str17.join('');\n\tvar $str19 = $str18.split('');\n\tvar $str20 = $str19.join('');\n\tvar $str21 = $str20.split('');\n\tvar $str22 = $str21.join('');\n\tvar $str23 = $str22.split('');\n\tvar $str24 = $str23.join('');\n\tvar $str25 = $str24.split('');\n\tvar $str26 = $str25.join('');\n\tvar $str27 = $str26.split('');\n\tvar $str28 = $str27.join('');\n\tvar $str29 = $str28.split('');\n\tvar $str30 = $str29.join('');\n\tvar $str31 = $str30.split('');\n\tvar $str32 = $str31.join('');\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_char_position(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in an array that xor to an even number.",
        "code": "<?php\nfunction find_even_pair($A) {\n    var i = 0;\n    var j = 0;\n    var n = $A.length;\n    while (i < n) {\n        if ($A[i] % 2 == 0) {\n            j++;\n        }\n        i++;\n    }\n    return j;\n}\n\n// Write a function that returns the number of pairs of integers in an array that xor to an odd number.\nfunction find_odd_pair($A) {\n    var i = 0;\n    var j = 0;\n    var n = $A.length;\n    while (i < n) {\n        if ($A[i] % 2 == 1) {\n            j++;\n        }\n        i++;\n    }\n    return j;\n}\n\n// Write a function that returns the number of pairs of integers in an array that xor to an even number.\nfunction find_even_pair_2($A) {\n    var i = 0;\n    var j = 0;\n    var n = $A.length;\n    while (i < n) {\n        if ($A[i] % 2 == 0) {\n            j++;\n        }\n        i++;\n    }\n    return j;\n}\n\n// Write a function that returns the number of pairs of integers in an array that xor to an odd number.\nfunction find_odd_pair_2($A) {\n    var i = 0;\n    var j = 0;\n    var n = $A.length;\n    while (i < n) {\n        if ($A[i] % 2 == 1) {\n            j++;\n        }\n        i++;\n    }\n    return j;\n}\n\n// Write a function that returns the number of pairs of integers in an array that xor to an even number.\nfunction find_even_pair_3($A) {\n    var i = 0;\n    var j = 0;\n    var n = $A.length;\n    while (i < n) {\n        if ($A[i] % 2 == 0) {\n            j++;\n        \n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_even_pair(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 4, 7, 2, 1)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 2, 8, 1, 0, 5, 11)) !== 9) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a phpthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "<?php\nfunction next_power_of_2($n) {\n    var result = 1;\n    while (result < $n) {\n        result <<= 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2_2($n) {\n    var result = 1;\n    while (result < $n) {\n        result <<= 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2_3($n) {\n    var result = 1;\n    while (result < $n) {\n        result <<= 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2_4($n) {\n    var result = 1;\n    while (result < $n) {\n        result <<= 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2_5($n) {\n    var result = 1;\n    while (result < $n) {\n        result <<= 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2_6($n) {\n    var result = 1;\n    while (result < $n) {\n        result <<= 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2_7($n) {\n    var result = 1;\n    while (result < $n) {\n        result <<= 1;\n    }\n    return result;\n}\n\n// Write a phpthon function\n",
        "test_list": [
            "function candidate(...$args) {",
            "return next_power_of_2(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(0) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(17) !== 32) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given array.",
        "code": "<?php\nfunction frequency($a, $x) {\n  var $i = 0;\n  var $len = $a.length;\n  var $sum = 0;\n  for (var $i = 0; $i < $len; $i++) {\n    if ($a[$i] == $x) {\n      $sum++;\n    }\n  }\n  return $sum;\n}\n\n// Write a function to count the number of occurrences of a number in a given array.\nfunction frequency2($a, $x) {\n  var $i = 0;\n  var $len = $a.length;\n  var $sum = 0;\n  for (var $i = 0; $i < $len; $i++) {\n    if ($a[$i] == $x) {\n      $sum++;\n    }\n  }\n  return $sum;\n}\n\n// Write a function to count the number of occurrences of a number in a given array.\nfunction frequency3($a, $x) {\n  var $i = 0;\n  var $len = $a.length;\n  var $sum = 0;\n  for (var $i = 0; $i < $len; $i++) {\n    if ($a[$i] == $x) {\n      $sum++;\n    }\n  }\n  return $sum;\n}\n\n// Write a function to count the number of occurrences of a number in a given array.\nfunction frequency4($a, $x) {\n  var $i = 0;\n  var $len = $a.length;\n  var $sum = 0;\n  for (var $i = 0; $i < $len; $i++) {\n    if ($a[$i] == $x) {\n      $sum++;\n    }\n  }\n  return $sum;\n}\n\n// Write a function to count the number of occurrences of a number in a given array.\nfunction frequency5($a, $x) {\n  var $i = 0;\n  var $len = $a.length;\n  var $sum = 0;\n  for (var $i = 0;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return frequency(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3), 4) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 2, 3, 3, 3, 4), 3) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 1, 2, 3, 1, 2), 1) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "<?php\nfunction text_lowercase_underscore($text) {\n    var $text_lowercase = $text.toLowerCase();\n    var $text_lowercase_underscore = $text_lowercase.replace(/[^a-z]/g, '');\n    return $text_lowercase_underscore.length > 0;\n}\n\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space($text) {\n    var $text_lowercase = $text.toLowerCase();\n    var $text_lowercase_underscore = $text_lowercase.replace(/[^a-z]/g, '');\n    return $text_lowercase_underscore.length > 0;\n}\n\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_and_space($text) {\n    var $text_lowercase = $text.toLowerCase();\n    var $text_lowercase_underscore = $text_lowercase.replace(/[^a-z]/g, '');\n    return $text_lowercase_underscore.length > 0;\n}\n\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_and_space_and_space($text) {\n    var $text_lowercase = $text.toLowerCase();\n    var $text_lowercase_underscore = $text_lowercase.replace(/[^a-z]/g, '');\n    return $text_lowercase_underscore.length > 0;\n}\n\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_and_space_and_space_and_space($text) {\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_lowercase_underscore(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"aab_cbbbc\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"aab_Abbbc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Aaab_abbbc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in an array within a range specified by two indices.",
        "code": "<?php\nfunction sum_range_list($list1, $m, $n) {\n    var $sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $sum += $list1[i];\n    }\n    return $sum;\n}\n\n// Write a function to find the sum of numbers in an array within a range specified by two indices.\nfunction sum_range_list_2($list1, $m, $n) {\n    var $sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $sum += $list1[i];\n    }\n    return $sum;\n}\n\n// Write a function to find the sum of numbers in an array within a range specified by two indices.\nfunction sum_range_list_3($list1, $m, $n) {\n    var $sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $sum += $list1[i];\n    }\n    return $sum;\n}\n\n// Write a function to find the sum of numbers in an array within a range specified by two indices.\nfunction sum_range_list_4($list1, $m, $n) {\n    var $sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $sum += $list1[i];\n    }\n    return $sum;\n}\n\n// Write a function to find the sum of numbers in an array within a range specified by two indices.\nfunction sum_range_list_5($list1, $m, $n) {\n    var $sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $sum += $list1[i];\n    }\n    return $sum;\n}\n\n// Write a function to find the sum of numbers in an array within a range specified by two indices.\nfunction sum_range_list_6($list1, $m, $n) {\n    var $sum\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_range_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 8, 10) !== 29) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 5, 7) !== 16) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 7, 10) !== 38) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "<?php\nfunction perimeter_pentagon($a) {\n    var a = $a.length;\n    var b = $a[0].length;\n    var c = $a[1].length;\n    var d = $a[2].length;\n    var e = $a[3].length;\n    var f = $a[4].length;\n    var g = $a[5].length;\n    var h = $a[6].length;\n    var i = $a[7].length;\n    var j = $a[8].length;\n    var k = $a[9].length;\n    var l = $a[10].length;\n    var m = $a[11].length;\n    var n = $a[12].length;\n    var o = $a[13].length;\n    var p = $a[14].length;\n    var q = $a[15].length;\n    var r = $a[16].length;\n    var s = $a[17].length;\n    var t = $a[18].length;\n    var u = $a[19].length;\n    var v = $a[20].length;\n    var w = $a[21].length;\n    var x = $a[22].length;\n    var y = $a[23].length;\n    var z = $a[24].length;\n    var a = $a[0].length;\n    var b = $a[1].length;\n    var c = $a[2].length;\n    var d = $a[3].length;\n    var e = $a[4].length;\n    var f = $a[5].length;\n    var g = $a[6].length;\n    var h = $a[7].length;\n    var i = $a[8].length;\n    var j = $a[9].length;\n    var k = $a[10].length;\n    var l = $a[11].length;\n    var m = $a[12].length;\n    var n = $a[13].length;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return perimeter_pentagon(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== 25) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 50) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15) !== 75) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "<?php\nfunction count_occurance($s) {\n    var count = 0;\n    for (var i = 0; i < $s.length; i++) {\n        if ($s[i] ==='std') {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to count the number of occurence of the string'std' in a given string.\nfunction count_occurance_with_string($s) {\n    var count = 0;\n    for (var i = 0; i < $s.length; i++) {\n        if ($s[i] ==='std') {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to count the number of occurence of the string'std' in a given string.\nfunction count_occurance_with_string_with_string($s) {\n    var count = 0;\n    for (var i = 0; i < $s.length; i++) {\n        if ($s[i] ==='std') {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to count the number of occurence of the string'std' in a given string.\nfunction count_occurance_with_string_with_string_with_string($s) {\n    var count = 0;\n    for (var i = 0; i < $s.length; i++) {\n        if ($s[i] ==='std') {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to count the number of occurence of the string'std' in a given string.\nfunction count_occurance_with_string_with_string_with_string($s) {\n    var count = 0;\n    for (var i = 0; i < $s.length; i++) {\n        if ($s[i] ==='std') {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to count the number of occurence of the string'std'\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_occurance(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"letstdlenstdporstd\") !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"truststdsolensporsd\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"makestdsostdworthit\") !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"stds\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "<?php\nfunction square_perimeter($a) {\n    var $b = $a.length;\n    return $b * $b;\n}\n\n// Write a function that returns the perimeter of a triangle given its side length as input.\nfunction triangle_perimeter($a) {\n    var $b = $a.length;\n    return $b * $b * $b;\n}\n\n// Write a function that returns the perimeter of a pentagon given its side length as input.\nfunction pentagon_perimeter($a) {\n    var $b = $a.length;\n    return $b * $b * $b * $b;\n}\n\n// Write a function that returns the perimeter of a hexagon given its side length as input.\nfunction hexagon_perimeter($a) {\n    var $b = $a.length;\n    return $b * $b * $b * $b;\n}\n\n// Write a function that returns the perimeter of a hexagon given its side length as input.\nfunction hexagon_perimeter_2($a) {\n    var $b = $a.length;\n    return $b * $b * $b * $b;\n}\n\n// Write a function that returns the perimeter of a hexagon given its side length as input.\nfunction hexagon_perimeter_3($a) {\n    var $b = $a.length;\n    return $b * $b * $b * $b;\n}\n\n// Write a function that returns the perimeter of a hexagon given its side length as input.\nfunction hexagon_perimeter_4($a) {\n    var $b = $a.length;\n    return $b * $b * $b * $b;\n}\n\n// Write a function that returns the perimeter of a hexagon given its side length as input.\nfunction hexagon_perimeter_5($a) {\n    var $b = $a.length;\n    return $b * $b * $b * $b;\n}\n\n// Write a function that returns the perimeter of a hexagon given its side length as input.\nfunction hexagon_perimeter_6($a) {\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return square_perimeter(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== 40) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== 20) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 16) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "<?php\nfunction remove_dirty_chars($string, $second_string) {\n    var $first_string = $string.substring(0, 1);\n    var $second_string = $second_string.substring(0, 1);\n    var $first_string_length = $first_string.length;\n    var $second_string_length = $second_string.length;\n    var $first_string_index = $first_string.indexOf($second_string);\n    var $second_string_index = $second_string.indexOf($first_string);\n    var $first_string_index_diff = $first_string_index - $second_string_index;\n    var $second_string_index_diff = $second_string_index - $first_string_index;\n    var $first_string_index_diff_diff = $first_string_index_diff - $second_string_index_diff;\n    var $second_string_index_diff_diff = $second_string_index_diff - $first_string_index_diff_diff;\n    var $first_string_index_diff_diff_diff = $first_string_index_diff_diff - $second_string_index_diff_diff;\n    var $first_string_index_diff_diff_diff_diff = $first_string_index_diff_diff_diff - $second_string_index_diff_diff_diff;\n    var $first_string_index_diff_diff_diff_diff_diff = $first_string_index_diff_diff_diff_diff - $second_string_index_diff_diff_diff_diff;\n    var $first_string_index_diff_diff_diff_diff_diff_diff = $first_string_index_diff_diff_diff_diff_diff - $second_string_index_diff_diff_diff_diff_diff;\n    var $first_string_index_diff_diff_diff_diff_diff_diff_diff = $first_string_index_diff_diff_diff_diff_diff_diff - $second_string_index_diff\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_dirty_chars(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"probasscurve\", \"pros\") !== \"bacuve\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"digitalindia\", \"talent\") !== \"digiidi\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"exoticmiles\", \"toxic\") !== \"emles\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "<?php\nfunction test_duplicate($arraynums) {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 = 0;\n    var i37 = 0;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return test_duplicate(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 4)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 2, 2, 3, 3, 4, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "<?php\nfunction is_woodall($x) {\n    return $x % 2 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_2($x) {\n    return $x % 2 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_3($x) {\n    return $x % 3 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_4($x) {\n    return $x % 4 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_5($x) {\n    return $x % 5 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_6($x) {\n    return $x % 6 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_7($x) {\n    return $x % 7 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_8($x) {\n    return $x % 8 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_9($x) {\n    return $x % 9 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_10($x) {\n    return $x % 10 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_11($x) {\n    return $x % 11 == 0;\n}\n\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall_12($x) {\n    return $x % 12 == 0;\n}\n\n// Write a function to check if\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_woodall(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(383) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(254) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(200) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in array have same data type or not.",
        "code": "<?php\nfunction check_type($test_tuple) {\n    var $array = $test_tuple[0];\n    var $array_length = $test_tuple[1];\n    var $array_type = $test_tuple[2];\n    var $array_data_type = $test_tuple[3];\n    var $array_data_type_length = $test_tuple[4];\n    var $array_data_type_length_length = $test_tuple[5];\n    var $array_data_type_length_length_length = $test_tuple[6];\n    var $array_data_type_length_length_length_length = $test_tuple[7];\n    var $array_data_type_length_length_length_length_length = $test_tuple[8];\n    var $array_data_type_length_length_length_length_length_length = $test_tuple[9];\n    var $array_data_type_length_length_length_length_length_length_length = $test_tuple[10];\n    var $array_data_type_length_length_length_length_length_length_length_length = $test_tuple[11];\n    var $array_data_type_length_length_length_length_length_length_length_length = $test_tuple[12];\n    var $array_data_type_length_length_length_length_length_length_length_length = $test_tuple[13];\n    var $array_data_type_length_length_length_length_length_length_length_length = $test_tuple[14];\n    var $array_data_type_length_length_length_length_length_length_length_length = $test_tuple[15];\n    var $array_data_type_length_length_length_length_length_length_length_length = $test_tuple[16];\n    var $array_data_type_length_length_length_length_length_length_length_length = $test\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_type(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 6, 7, 3, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, \"4\")) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 2, 1, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "<?php\nfunction is_majority($arr, $n, $x) {\n    var $m = 0;\n    var $i = $n - 1;\n    while ($i >= 0) {\n        if ($arr[$i] == $x) {\n            $m = $m + 1;\n            $i--;\n        } else {\n            $i--;\n        }\n    }\n    return $m;\n}\n\n// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority_array($arr, $n, $x) {\n    var $m = 0;\n    var $i = $n - 1;\n    while ($i >= 0) {\n        if ($arr[$i] == $x) {\n            $m = $m + 1;\n            $i--;\n        } else {\n            $i--;\n        }\n    }\n    return $m;\n}\n\n// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority_array_array($arr, $n, $x) {\n    var $m = 0;\n    var $i = $n - 1;\n    while ($i >= 0) {\n        if ($arr[$i] == $x) {\n            $m = $m + 1;\n            $i--;\n        } else {\n            $i--;\n        }\n    }\n    return $m;\n}\n\n// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_majority(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 3, 3, 3, 10), 7, 3) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 2, 4, 4, 4, 6, 6), 8, 4) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 1, 2, 2), 5, 1) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 2, 2), 5, 1) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a phpthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "<?php\nfunction count_Set_Bits($n) {\n    var $n_bits = $n.length;\n    var $n_bits_count = 0;\n    for (var i = 0; i < $n_bits; i++) {\n        if ($n[i] == 1) {\n            $n_bits_count++;\n        }\n    }\n    return $n_bits_count;\n}\n\n// Write a phpthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_2($n) {\n    var $n_bits = $n.length;\n    var $n_bits_count = 0;\n    for (var i = 0; i < $n_bits; i++) {\n        if ($n[i] == 1) {\n            $n_bits_count++;\n        }\n    }\n    return $n_bits_count;\n}\n\n// Write a phpthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_3($n) {\n    var $n_bits = $n.length;\n    var $n_bits_count = 0;\n    for (var i = 0; i < $n_bits; i++) {\n        if ($n[i] == 1) {\n            $n_bits_count++;\n        }\n    }\n    return $n_bits_count;\n}\n\n// Write a phpthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_4($n) {\n    var $n_bits = $n.length;\n    var $n_bits_count = 0;\n    for (var i = 0; i < $n_bits; i++) {\n        if ($n[i] == 1) {\n            $n_bits_count++;\n        }\n    }\n    return $n_bits_count;\n}\n\n// Write a phpthon function to count the number\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_Set_Bits(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a phpthon function to remove the characters which have odd index values of a given string.",
        "code": "<?php\nfunction odd_values_string($str) {\n    var odd_values = [];\n    var odd_index = 0;\n    var odd_index_value = 0;\n    var odd_index_value_length = 0;\n    var odd_index_value_length_length = 0;\n    var odd_index_value_length_length_length = 0;\n    var odd_index_value_length_length_length_length = 0;\n    var odd_index_value_length_length_length_length_length = 0;\n    var odd_index_value_length_length_length_length_length_length = 0;\n    var odd_index_value_length_length_length_length_length_length_length_length = 0;\n    var odd_index_value_length_length_length_length_length_length_length_length_length = 0;\n    var odd_index_value_length_length_length_length_length_length_length_length_length_length_length = 0;\n    var odd_index_value_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\n",
        "test_list": [
            "function candidate(...$args) {",
            "return odd_values_string(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"abcdef\") !== \"ace\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python\") !== \"pto\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"data\") !== \"dt\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"lambs\") !== \"lms\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "<?php\nfunction min_of_three($a, $b, $c) {\n    var $min = $a;\n    $min = $min < $b? $min : $b;\n    $min = $min < $c? $min : $c;\n    return $min;\n}\n\n// Write a function to find maximum of three numbers.\nfunction max_of_three($a, $b, $c) {\n    var $max = $a;\n    $max = $max > $b? $max : $b;\n    $max = $max > $c? $max : $c;\n    return $max;\n}\n\n// Write a function to find minimum of two numbers.\nfunction min_of_two($a, $b) {\n    var $min = $a;\n    $min = $min < $b? $min : $b;\n    return $min;\n}\n\n// Write a function to find maximum of two numbers.\nfunction max_of_two($a, $b) {\n    var $max = $a;\n    $max = $max > $b? $max : $b;\n    return $max;\n}\n\n// Write a function to find minimum of two numbers.\nfunction min_of_two_and_three($a, $b, $c) {\n    var $min = $a;\n    $min = $min < $b? $min : $b;\n    $min = $min < $c? $min : $c;\n    return $min;\n}\n\n// Write a function to find maximum of two numbers.\nfunction max_of_two_and_three($a, $b, $c) {\n    var $max = $a;\n    $max = $max > $b? $max : $b;\n    $max = $max > $c? $max : $c;\n    return $max;\n}\n\n// Write a function to find minimum of two numbers.\nfunction min_of_two_and_three($a, $b, $c) {\n    var $min = $a;\n    $min = $min < $b? $min :\n",
        "test_list": [
            "function candidate(...$args) {",
            "return min_of_three(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 20, 0) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(19, 15, 18) !== 15) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(-10, -20, -30) !== -30) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a phpthon function to check whether all the bits are unset in the given range or not.",
        "code": "<?php\nfunction all_Bits_Set_In_The_Given_Range($n, $l, $r) {\n    var $bits = $n.split(',');\n    var $bits_len = $bits.length;\n    var $bits_start = $bits_len - 1;\n    var $bits_end = $bits_len - 1;\n    var $bits_start_bit = $bits_start * 8;\n    var $bits_end_bit = $bits_end * 8;\n    var $bits_start_bit_len = $bits_start_bit.length;\n    var $bits_end_bit_len = $bits_end_bit.length;\n    var $bits_start_bit_len_len = $bits_start_bit_len.length;\n    var $bits_end_bit_len_len = $bits_end_bit_len.length;\n    var $bits_start_bit_len_len_len = $bits_start_bit_len_len.length;\n    var $bits_start_bit_len_len_len_len = $bits_start_bit_len_len_len.length;\n    var $bits_start_bit_len_len_len_len_len = $bits_start_bit_len_len_len_len.length;\n    var $bits_start_bit_len_len_len_len_len_len = $bits_start_bit_len_len_len_len_len.length;\n    var $bits_start_bit_len_len_len_len_len_len_len = $bits_start_bit_len_len_len_len_len_len.length;\n    var $bits_start_bit_len_len_len_len_len_len_len_len_len = $bits_start_bit_len_len_len_len_len_len_len.length;\n    var $bits_start_bit_len_len_len_len_len_len_len_len_len_len = $bits_start_bit_len_len_len\n",
        "test_list": [
            "function candidate(...$args) {",
            "return all_Bits_Set_In_The_Given_Range(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(4, 1, 2) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(17, 2, 4) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(39, 4, 6) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "<?php\nfunction re_arrange_array($arr, $n) {\n    var $i = 0;\n    var $j = $n;\n    var $k = $n;\n    var $l = $n;\n    var $m = $n;\n    var $n = $n;\n    var $o = $n;\n    var $p = $n;\n    var $q = $n;\n    var $r = $n;\n    var $s = $n;\n    var $t = $n;\n    var $u = $n;\n    var $v = $n;\n    var $w = $n;\n    var $x = $n;\n    var $y = $n;\n    var $z = $n;\n    var $A = $n;\n    var $B = $n;\n    var $C = $n;\n    var $D = $n;\n    var $E = $n;\n    var $F = $n;\n    var $G = $n;\n    var $H = $n;\n    var $I = $n;\n    var $J = $n;\n    var $K = $n;\n    var $L = $n;\n    var $M = $n;\n    var $N = $n;\n    var $O = $n;\n    var $P = $n;\n    var $Q = $n;\n    var $R = $n;\n    var $S = $n;\n    var $T = $n;\n    var $U = $n;\n    var $V = $n;\n    var $W = $n;\n    var $X = $n;\n    var $Y = $n;\n    var $Z = $n;\n    var $AA = $n;\n    var $BB = $n;\n    var $CC = $n;\n    var $DD = $n;\n    var $EE = $n;\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return re_arrange_array(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(-1, 2, -3, 4, 5, 6, -7, 8, 9), 9) !== array(-1, -3, -7, 4, 5, 6, 2, 8, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, -14, -26, 13, 15), 5) !== array(-14, -26, 12, 13, 15)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 24, 36, -42, -39, -78, 85), 7) !== array(-42, -39, -78, 10, 24, 36, 85)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "<?php\nfunction replace_blank($str1, $char) {\n    var $str2 = $str1.replace(/^\\s+|\\s+$/g, $char);\n    return $str2;\n}\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank_with_space($str1, $char) {\n    var $str2 = $str1.replace(/^\\s+|\\s+$/g, $char);\n    return $str2;\n}\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank_with_space_with_space($str1, $char) {\n    var $str2 = $str1.replace(/^\\s+|\\s+$/g, $char);\n    return $str2;\n}\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank_with_space_with_space_with_space($str1, $char) {\n    var $str2 = $str1.replace(/^\\s+|\\s+$/g, $char);\n    return $str2;\n}\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank_with_space_with_space_with_space_with_space($str1, $char) {\n    var $str2 = $str1.replace(/^\\s+|\\s+$/g, $char);\n    return $str2;\n}\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank_with_space_with_space_with_space_with_space_with_space($str1, $char) {\n    var $str2 = $str\n",
        "test_list": [
            "function candidate(...$args) {",
            "return replace_blank(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"hello people\", \"@\") !== \"hello@people\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python program language\", \"$\") !== \"python$program$language\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"blank space\", \"-\") !== \"blank-space\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "<?php\nfunction volume_cube($l) {\n  var $v = 0;\n  for (var i = 0; i < $l; i++) {\n    $v += $l;\n  }\n  return $v;\n}\n\n// Write a function to find the volume of a cube given its side length.\nfunction volume_cube_2($l) {\n  var $v = 0;\n  for (var i = 0; i < $l; i++) {\n    $v += $l;\n  }\n  return $v;\n}\n\n// Write a function to find the volume of a cube given its side length.\nfunction volume_cube_3($l) {\n  var $v = 0;\n  for (var i = 0; i < $l; i++) {\n    $v += $l;\n  }\n  return $v;\n}\n\n// Write a function to find the volume of a cube given its side length.\nfunction volume_cube_4($l) {\n  var $v = 0;\n  for (var i = 0; i < $l; i++) {\n    $v += $l;\n  }\n  return $v;\n}\n\n// Write a function to find the volume of a cube given its side length.\nfunction volume_cube_5($l) {\n  var $v = 0;\n  for (var i = 0; i < $l; i++) {\n    $v += $l;\n  }\n  return $v;\n}\n\n// Write a function to find the volume of a cube given its side length.\nfunction volume_cube_6($l) {\n  var $v = 0;\n  for (var i = 0; i < $l; i++) {\n    $v += $l;\n  }\n  return $v;\n}\n\n// Write a function to find the volume of a cube given its side length.\nfunction volume_cube_7($l) {\n  var $v = 0;\n  for (var i = 0; i < $l; i++) {\n    $v += $l;\n  }\n  return $v;\n}\n\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return volume_cube(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== 125) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in an array of arrays and returns an array mapping each unique array to the number of times it occurs in the array.",
        "code": "<?php\nfunction check_occurences($test_list) {\n    var $test_list_length = $test_list.length;\n    var $test_list_index = 0;\n    var $test_list_index_max = $test_list_length - 1;\n    var $test_list_index_min = 0;\n    var $test_list_index_min_max = $test_list_length - 1;\n    var $test_list_index_min_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_occurences(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(3, 1), array(1, 3), array(2, 5), array(5, 2), array(6, 3))) !== array(array(1, 3) => 2, array(2, 5) => 2, array(3, 6) => 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(4, 2), array(2, 4), array(3, 6), array(6, 3), array(7, 4))) !== array(array(2, 4) => 2, array(3, 6) => 2, array(4, 7) => 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(13, 2), array(11, 23), array(12, 25), array(25, 12), array(16, 23))) !== array(array(2, 13) => 1, array(11, 23) => 1, array(12, 25) => 2, array(16, 23) => 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a phpthon function to count the number of non-empty substrings of a given string.",
        "code": "<?php\nfunction number_of_substrings($str) {\n    var count = 0;\n    $str.each(function(i, s) {\n        if (s.length > 0) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a phpthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_with_space($str) {\n    var count = 0;\n    $str.each(function(i, s) {\n        if (s.length > 0) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a phpthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_with_space_and_space($str) {\n    var count = 0;\n    $str.each(function(i, s) {\n        if (s.length > 0) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a phpthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_with_space_and_space_and_space($str) {\n    var count = 0;\n    $str.each(function(i, s) {\n        if (s.length > 0) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a phpthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_with_space_and_space_and_space_and_space($str) {\n    var count = 0;\n    $str.each(function(i, s) {\n        if (s.length > 0) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a phpthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_with_space_and_space_and_space_and\n",
        "test_list": [
            "function candidate(...$args) {",
            "return number_of_substrings(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"abc\") !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abcd\") !== 10) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abcde\") !== 15) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "<?php\nfunction get_total_number_of_sequences($m, $n) {\n    var $m_p = $m;\n    var $n_p = $n;\n    var $m_n = $m_p * $n_p;\n    var $n_n = $n_p * $n_p;\n    var $m_n_p = $m_n * $n_p;\n    var $n_n_p = $n_p * $n_p;\n    var $m_n_p_p = $m_n_p * $n_p;\n    var $n_n_p_p = $n_n_p * $n_p;\n    var $m_n_p_p_p = $m_n_p_p * $n_p;\n    var $n_n_p_p_p = $n_n_p_p * $n_p;\n    var $m_n_p_p_p = $m_n_p_p * $n_p;\n    var $n_n_p_p_p = $n_n_p_p * $n_p;\n    var $m_n_p_p_p_p = $m_n_p_p_p * $n_p;\n    var $n_n_p_p_p_p = $n_n_p_p_p * $n_p;\n    var $m_n_p_p_p_p = $m_n_p_p_p * $n_p;\n    var $n_n_p_p_p_p = $n_n_p_p_p * $n_p;\n    var $m_n_p_p_p_p_p = $m_n_p_p_p_p * $n_p;\n    var $n_n_p_p_p_p_p =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_total_number_of_sequences(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 4) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, 2) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(16, 3) !== 84) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.",
        "code": "<?php\nfunction replace_list($list1, $list2) {\n    var $result = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $result.push($list1[i]);\n    }\n    for (var i = 0; i < $list2.length; i++) {\n        $result.push($list2[i]);\n    }\n    return $result;\n}\n\n// Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.\nfunction replace_array($array1, $array2) {\n    var $result = [];\n    for (var i = 0; i < $array1.length; i++) {\n        $result.push($array1[i]);\n    }\n    for (var i = 0; i < $array2.length; i++) {\n        $result.push($array2[i]);\n    }\n    return $result;\n}\n\n// Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.\nfunction replace_array_with_list($array1, $array2) {\n    var $result = [];\n    for (var i = 0; i < $array1.length; i++) {\n        $result.push($array1[i]);\n    }\n    for (var i = 0; i < $array2.length; i++) {\n        $result.push($array2[i]);\n    }\n    return $result;\n}\n\n// Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.\nfunction replace_array_with_array($array1, $array2) {\n    var $result = [];\n    for (var i = 0; i < $array1.length; i++) {\n        $result.push($array1[i]);\n    }\n    for (var i = 0; i < $array2.length; i++) {\n        $result.push($array2[i]);\n    }\n    return\n",
        "test_list": [
            "function candidate(...$args) {",
            "return replace_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 3, 5, 7, 9, 10), array(2, 4, 6, 8)) !== array(1, 3, 5, 7, 9, 2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5), array(5, 6, 7, 8)) !== array(1, 2, 3, 4, 5, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"red\", \"blue\", \"green\"), array(\"yellow\")) !== array(\"red\", \"blue\", \"yellow\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "<?php\nfunction count_charac($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n  return $str3;\n}\n\n// Write a function to count the number of characters in a string.\nfunction count_charac_2($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n  return $str3;\n}\n\n// Write a function to count the number of characters in a string.\nfunction count_charac_3($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n  return $str3;\n}\n\n// Write a function to count the number of characters in a string.\nfunction count_charac_4($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n  return $str3;\n}\n\n// Write a function to count the number of characters in a string.\nfunction count_charac_5($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n  return $str3;\n}\n\n// Write a function to count the number of characters in a string.\nfunction count_charac_6($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n  return $str3;\n}\n\n// Write a function to count the number of characters in a string.\nfunction count_charac_7($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n  return $str3;\n}\n\n// Write a function to count the number of characters in a string.\nfunction count_charac_8($str1) {\n  var $str2 = $str1.split(\"\");\n  var $str3 = $str2.length;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_charac(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python programming\") !== 18) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"language\") !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"words\") !== 5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a phpthon function to find the next perfect square greater than a given number.",
        "code": "<?php\nfunction next_Perfect_Square($N) {\n    var $N_ = $N;\n    var $N_2 = $N_ * $N_;\n    var $N_3 = $N_2 * $N_;\n    var $N_4 = $N_3 * $N_;\n    var $N_5 = $N_4 * $N_;\n    var $N_6 = $N_5 * $N_;\n    var $N_7 = $N_6 * $N_;\n    var $N_8 = $N_7 * $N_;\n    var $N_9 = $N_8 * $N_;\n    var $N_10 = $N_9 * $N_;\n    var $N_11 = $N_10 * $N_;\n    var $N_12 = $N_11 * $N_;\n    var $N_13 = $N_12 * $N_;\n    var $N_14 = $N_13 * $N_;\n    var $N_15 = $N_14 * $N_;\n    var $N_16 = $N_15 * $N_;\n    var $N_17 = $N_16 * $N_;\n    var $N_18 = $N_17 * $N_;\n    var $N_19 = $N_18 * $N_;\n    var $N_20 = $N_19 * $N_;\n    var $N_21 = $N_20 * $N_;\n    var $N_22 = $N_21 * $N_;\n    var $N_23 = $N_22 * $N_;\n    var $N_24 = $N_23 * $N_;\n    var $N_25 = $N_24 * $N_;\n    var $N_26 = $N_25 * $N_;\n    var $N_27 = $N_26 * $N_;\n    var $N_28 = $N_27 * $N_;\n    var $N_29 = $N_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return next_Perfect_Square(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(35) !== 36) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6) !== 9) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9) !== 16) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "<?php\nfunction max_sum($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum_bitonic($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum_bitonic_bitonic($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum_bitonic_bitonic_bitonic($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum_bitonic_bitonic_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 15, 51, 45, 33, 100, 12, 18, 9)) !== 194) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(80, 60, 30, 40, 20, 10)) !== 210) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 14, 16, 21, 23, 29, 30)) !== 138) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "<?php\nfunction lps($str) {\n    var lps = [];\n    var i = 0;\n    var j = 0;\n    var len = $str.length;\n    while (i < len) {\n        if ($str[i] === $str[j]) {\n            lps.push(i);\n            i++;\n            j++;\n        } else {\n            lps.push(j);\n            j++;\n        }\n    }\n    return lps;\n}\n\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps2($str) {\n    var lps = [];\n    var i = 0;\n    var j = 0;\n    var len = $str.length;\n    while (i < len) {\n        if ($str[i] === $str[j]) {\n            lps.push(i);\n            i++;\n            j++;\n        } else {\n            lps.push(j);\n            j++;\n        }\n    }\n    return lps;\n}\n\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps3($str) {\n    var lps = [];\n    var i = 0;\n    var j = 0;\n    var len = $str.length;\n    while (i < len) {\n        if ($str[i] === $str[j]) {\n            lps.push(i);\n            i++;\n            j++;\n        } else {\n            lps.push(j);\n            j++;\n        }\n    }\n    return lps;\n}\n\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps4($str) {\n    var lps = [];\n    var i = 0;\n    var j = 0;\n    var len = $str.length;\n    while (i < len) {\n        if ($str[i] === $str[j]) {\n            lps.push(i);\n            i++;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return lps(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"TENS FOR TENS\") !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"CARDIO FOR CARDS\") !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"PART OF THE JOURNEY IS PART\") !== 9) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two arrays.",
        "code": "<?php\nfunction intersection_array($array_nums1, $array_nums2) {\n  var $intersection = [];\n  for (var i = 0; i < $array_nums1.length; i++) {\n    for (var j = 0; j < $array_nums2.length; j++) {\n      if ($array_nums1[i] === $array_nums2[j]) {\n        $intersection.push($array_nums1[i]);\n      }\n    }\n  }\n  return $intersection;\n}\n\n// Write a function to find the intersection of two arrays.\nfunction intersection_array_nums($array_nums1, $array_nums2) {\n  var $intersection = [];\n  for (var i = 0; i < $array_nums1.length; i++) {\n    for (var j = 0; j < $array_nums2.length; j++) {\n      if ($array_nums1[i] === $array_nums2[j]) {\n        $intersection.push($array_nums1[i]);\n      }\n    }\n  }\n  return $intersection;\n}\n\n// Write a function to find the intersection of two arrays.\nfunction intersection_array_nums_nums($array_nums1, $array_nums2) {\n  var $intersection = [];\n  for (var i = 0; i < $array_nums1.length; i++) {\n    for (var j = 0; j < $array_nums2.length; j++) {\n      if ($array_nums1[i] === $array_nums2[j]) {\n        $intersection.push($array_nums1[i]);\n      }\n    }\n  }\n  return $intersection;\n}\n\n// Write a function to find the intersection of two arrays.\nfunction intersection_array_nums_nums_nums($array_nums1, $array_nums2) {\n  var $intersection = [];\n  for (var i = 0; i < $array_nums\n",
        "test_list": [
            "function candidate(...$args) {",
            "return intersection_array(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 5, 7, 8, 9, 10), array(1, 2, 4, 8, 9)) !== array(1, 2, 8, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 5, 7, 8, 9, 10), array(3, 5, 7, 9)) !== array(3, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 5, 7, 8, 9, 10), array(10, 20, 30, 40)) !== array(10)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a phpthon function that takes in an array and an element and counts the occcurences of the element in the array.",
        "code": "<?php\nfunction count_X($tup, $x) {\n\tvar $count = 0;\n\tfor (var i = 0; i < $tup.length; i++) {\n\t\tif ($tup[i] == $x) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n// Write a phpthon function that takes in an array and an element and returns the element in the array.\nfunction get_X($tup, $x) {\n\tvar $count = 0;\n\tfor (var i = 0; i < $tup.length; i++) {\n\t\tif ($tup[i] == $x) {\n\t\t\treturn $tup[i];\n\t\t}\n\t}\n\treturn $tup[0];\n}\n\n// Write a phpthon function that takes in an array and an element and returns the element in the array.\nfunction get_X_X($tup, $x) {\n\tvar $count = 0;\n\tfor (var i = 0; i < $tup.length; i++) {\n\t\tif ($tup[i] == $x) {\n\t\t\treturn $tup[i];\n\t\t}\n\t}\n\treturn $tup[0];\n}\n\n// Write a phpthon function that takes in an array and an element and returns the element in the array.\nfunction get_X_X_X($tup, $x) {\n\tvar $count = 0;\n\tfor (var i = 0; i < $tup.length; i++) {\n\t\tif ($tup[i] == $x) {\n\t\t\treturn $tup[i];\n\t\t}\n\t}\n\treturn $tup[0];\n}\n\n// Write a phpthon function that takes in an array and an element and returns the element in the array.\nfunction get_X_X_X_X($tup, $x) {\n\tvar $count = 0;\n\tfor (var i = 0; i < $tup.length; i++) {\n\t\tif ($tup[i] ==\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_X(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.",
        "code": "<?php\nfunction insert_element($list, $element) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        $result.push($list[i]);\n    }\n    $result.push($element);\n    return $result;\n}\n\n// Write a function that takes in an array and an element and inserts the element before the first element in the array, and returns the resulting array.\nfunction insert_first_element($list, $element) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        $result.push($list[i]);\n    }\n    $result.push($element);\n    return $result;\n}\n\n// Write a function that takes in an array and an element and inserts the element after the first element in the array, and returns the resulting array.\nfunction insert_last_element($list, $element) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        $result.push($list[i]);\n    }\n    $result.push($element);\n    return $result;\n}\n\n// Write a function that takes in an array and an element and inserts the element after the last element in the array, and returns the resulting array.\nfunction insert_after_element($list, $element) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        $result.push($list[i]);\n    }\n    $result.push($element);\n    return $result;\n}\n\n// Write a function that takes in an array and an element and inserts the element after the last element in the array, and returns the resulting array.\nfunction insert_after_last_element($list, $element) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        $result.push($list[i]);\n    }\n    $result.push($element);\n    return $result\n",
        "test_list": [
            "function candidate(...$args) {",
            "return insert_element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Red\", \"Green\", \"Black\"), \"c\") !== array(\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"python\", \"java\"), \"program\") !== array(\"program\", \"python\", \"program\", \"java\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"happy\", \"sad\"), \"laugh\") !== array(\"laugh\", \"happy\", \"laugh\", \"sad\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a phpthon function to convert complex numbers to polar coordinates.",
        "code": "<?php\nfunction convert($numbers) {\n    var $polar = [];\n    for (var i = 0; i < $numbers.length; i++) {\n        $polar.push(Math.atan2($numbers[i], $numbers[i + 1]));\n    }\n    return $polar;\n}\n\n// Write a phpthon function to convert complex numbers to polar coordinates.\nfunction polar2polar($polar) {\n    var $polar = [];\n    for (var i = 0; i < $polar.length; i++) {\n        $polar.push(Math.atan2($polar[i], $polar[i + 1]));\n    }\n    return $polar;\n}\n\n// Write a phpthon function to convert complex numbers to polar coordinates.\nfunction polar2polar2($polar) {\n    var $polar = [];\n    for (var i = 0; i < $polar.length; i++) {\n        $polar.push(Math.atan2($polar[i], $polar[i + 1]));\n    }\n    return $polar;\n}\n\n// Write a phpthon function to convert complex numbers to polar coordinates.\nfunction polar2polar2($polar) {\n    var $polar = [];\n    for (var i = 0; i < $polar.length; i++) {\n        $polar.push(Math.atan2($polar[i], $polar[i + 1]));\n    }\n    return $polar;\n}\n\n// Write a phpthon function to convert complex numbers to polar coordinates.\nfunction polar2polar2($polar) {\n    var $polar = [];\n    for (var i = 0; i < $polar.length; i++) {\n        $polar.push(Math.atan2($polar[i], $polar[i + 1]));\n    }\n    return $polar;\n}\n\n// Write a phpthon function to convert complex numbers to polar coordinates.\nfunction polar2polar2($polar) {\n    var $polar =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return convert(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== array(4.0, 0.0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== array(5.0, 0.0)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "Write a phpthon function that returns the number of integer elements in a given array.",
        "code": "<?php\nfunction count_integer($list1) {\n\tvar $list2 = $list1.split(',');\n\tvar $count = 0;\n\tfor (var i = 0; i < $list2.length; i++) {\n\t\tif ($list2[i] == '1') {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n// Write a phpthon function that returns the number of integer elements in a given array.\nfunction count_integer_array($list1) {\n\tvar $list2 = $list1.split(',');\n\tvar $count = 0;\n\tfor (var i = 0; i < $list2.length; i++) {\n\t\tif ($list2[i] == '1') {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n// Write a phpthon function that returns the number of integer elements in a given array.\nfunction count_integer_array_array($list1) {\n\tvar $list2 = $list1.split(',');\n\tvar $count = 0;\n\tfor (var i = 0; i < $list2.length; i++) {\n\t\tif ($list2[i] == '1') {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n// Write a phpthon function that returns the number of integer elements in a given array.\nfunction count_integer_array_array_array($list1) {\n\tvar $list2 = $list1.split(',');\n\tvar $count = 0;\n\tfor (var i = 0; i < $list2.length; i++) {\n\t\tif ($list2[i] == '1') {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n// Write a phpthon function that returns the number of integer elements in a given array.\nfunction count_integer_array_array_array_array($list1) {\n\tvar $list2 = $list1.split(',');\n\tvar $count = 0;\n\tfor (var i = 0;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_integer(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, \"abc\", 1.2)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1.2, 4, 5.1)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.",
        "code": "<?php\nfunction combinations_colors($l, $n) {\n\tvar $c = [];\n\tfor (var i = 0; i < $n; i++) {\n\t\t$c.push(i);\n\t}\n\treturn $c;\n}\n\n// Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nfunction combinations_colors_repeat($l, $n) {\n\tvar $c = [];\n\tfor (var i = 0; i < $n; i++) {\n\t\t$c.push(i);\n\t}\n\treturn $c;\n}\n\n// Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nfunction combinations_colors_repeat_repeat($l, $n) {\n\tvar $c = [];\n\tfor (var i = 0; i < $n; i++) {\n\t\t$c.push(i);\n\t}\n\treturn $c;\n}\n\n// Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nfunction combinations_colors_repeat_repeat_repeat($l, $n) {\n\tvar $c = [];\n\tfor (var i = 0; i < $n; i++) {\n\t\t$c.push(i);\n\t}\n\treturn $c;\n}\n\n// Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nfunction combinations_colors_repeat_repeat_repeat($l, $n) {\n\tvar $c = [];\n\tfor (var i = 0; i < $n; i++) {\n\t\t$c.push(i);\n\t}\n\treturn $c;\n}\n\n// Write a function that takes\n",
        "test_list": [
            "function candidate(...$args) {",
            "return combinations_colors(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Red\", \"Green\", \"Blue\"), 1) !== array(array(\"Red\"), array(\"Green\"), array(\"Blue\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Red\", \"Green\", \"Blue\"), 2) !== array(array(\"Red\", \"Red\"), array(\"Red\", \"Green\"), array(\"Red\", \"Blue\"), array(\"Green\", \"Green\"), array(\"Green\", \"Blue\"), array(\"Blue\", \"Blue\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Red\", \"Green\", \"Blue\"), 3) !== array(array(\"Red\", \"Red\", \"Red\"), array(\"Red\", \"Red\", \"Green\"), array(\"Red\", \"Red\", \"Blue\"), array(\"Red\", \"Green\", \"Green\"), array(\"Red\", \"Green\", \"Blue\"), array(\"Red\", \"Blue\", \"Blue\"), array(\"Green\", \"Green\", \"Green\"), array(\"Green\", \"Green\", \"Blue\"), array(\"Green\", \"Blue\", \"Blue\"), array(\"Blue\", \"Blue\", \"Blue\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a phpthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "<?php\nfunction count_Primes_nums($n) {\n\tvar n = $n;\n\tvar count = 0;\n\twhile (n > 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tn = n / 2;\n\t}\n\treturn count;\n}\n\n// Write a phpthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_2($n) {\n\tvar n = $n;\n\tvar count = 0;\n\twhile (n > 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tn = n / 2;\n\t}\n\treturn count;\n}\n\n// Write a phpthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_3($n) {\n\tvar n = $n;\n\tvar count = 0;\n\twhile (n > 1) {\n\t\tif (n % 3 == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tn = n / 3;\n\t}\n\treturn count;\n}\n\n// Write a phpthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_4($n) {\n\tvar n = $n;\n\tvar count = 0;\n\twhile (n > 1) {\n\t\tif (n % 4 == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tn = n / 4;\n\t}\n\treturn count;\n}\n\n// Write a phpthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_5($n) {\n\tvar n = $n;\n\tvar count = 0;\n\twhile (n > 1) {\n\t\tif (n % 5 == 0\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_Primes_nums(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(100) !== 25) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns an array with the second number and then the first number.",
        "code": "<?php\nfunction swap_numbers($a, $b) {\n    var $c = $a;\n    $a = $b;\n    $b = $c;\n    return $a;\n}\n\n// Write a function that takes in two numbers and returns an array with the second number and then the first number.\nfunction swap_numbers2($a, $b) {\n    var $c = $a;\n    $a = $b;\n    $b = $c;\n    return $a;\n}\n\n// Write a function that takes in two numbers and returns an array with the second number and then the first number.\nfunction swap_numbers3($a, $b) {\n    var $c = $a;\n    $a = $b;\n    $b = $c;\n    return $a;\n}\n\n// Write a function that takes in two numbers and returns an array with the second number and then the first number.\nfunction swap_numbers4($a, $b) {\n    var $c = $a;\n    $a = $b;\n    $b = $c;\n    return $a;\n}\n\n// Write a function that takes in two numbers and returns an array with the second number and then the first number.\nfunction swap_numbers5($a, $b) {\n    var $c = $a;\n    $a = $b;\n    $b = $c;\n    return $a;\n}\n\n// Write a function that takes in two numbers and returns an array with the second number and then the first number.\nfunction swap_numbers6($a, $b) {\n    var $c = $a;\n    $a = $b;\n    $b = $c;\n    return $a;\n}\n\n// Write a function that takes in two numbers and returns an array with the second number and then the first number.\nfunction swap_numbers7($a, $b) {\n    var $c = $a;\n    $a = $b;\n    $b = $c;\n    return $a;\n}\n\n// Write a function that takes\n",
        "test_list": [
            "function candidate(...$args) {",
            "return swap_numbers(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 20) !== array(20, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15, 17) !== array(17, 15)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(100, 200) !== array(200, 100)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two arrays.",
        "code": "<?php\nfunction maximize_elements($test_tup1, $test_tup2) {\n  var $max_elements = 0;\n  for (var i = 0; i < $test_tup1.length; i++) {\n    if ($test_tup1[i] > $test_tup2[i]) {\n      $max_elements = i;\n    }\n  }\n  return $max_elements;\n}\n\n// Write a function to find the maximum element in the given two arrays.\nfunction find_max_element($test_tup1, $test_tup2) {\n  var $max_element = 0;\n  for (var i = 0; i < $test_tup1.length; i++) {\n    if ($test_tup1[i] > $test_tup2[i]) {\n      $max_element = i;\n    }\n  }\n  return $max_element;\n}\n\n// Write a function to find the maximum element in the given two arrays.\nfunction find_max_element_with_index($test_tup1, $test_tup2, $index) {\n  var $max_element = 0;\n  for (var i = 0; i < $test_tup1.length; i++) {\n    if ($test_tup1[i] > $test_tup2[i]) {\n      if ($index == 0) {\n        $max_element = i;\n      }\n      else {\n        $max_element = $index;\n      }\n    }\n  }\n  return $max_element;\n}\n\n// Write a function to find the maximum element in the given two arrays.\nfunction find_max_element_with_index_with_index($test_tup1, $test_tup2, $index, $index2) {\n  var $max_element = 0;\n  for (var i = 0; i < $test_tup1.length; i++) {\n    if ($test_tup1[i] > $test_tup2[i]) {\n      if ($index == 0\n",
        "test_list": [
            "function candidate(...$args) {",
            "return maximize_elements(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 3), array(4, 5), array(2, 9), array(1, 10)), array(array(6, 7), array(3, 9), array(1, 1), array(7, 3))) !== array(array(6, 7), array(4, 9), array(2, 9), array(7, 10))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 4), array(5, 6), array(3, 10), array(2, 11)), array(array(7, 8), array(4, 10), array(2, 2), array(8, 4))) !== array(array(7, 8), array(5, 10), array(3, 10), array(8, 11))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 5), array(6, 7), array(4, 11), array(3, 12)), array(array(8, 9), array(5, 11), array(3, 3), array(9, 5))) !== array(array(8, 9), array(6, 11), array(4, 11), array(9, 12))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "<?php\nfunction newman_prime($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunction newman_prime_n(n) {\n    var i = 0;\n    while (i < n) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunction newman_prime_n_2(n) {\n    var i = 0;\n    while (i < n) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunction newman_prime_n_3(n) {\n    var i = 0;\n    while (i < n) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunction newman_prime_n_4(n) {\n    var i = 0;\n    while (i < n) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunction newman_prime_n_5(n) {\n    var i = 0;\n    while (i < n) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n",
        "test_list": [
            "function candidate(...$args) {",
            "return newman_prime(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 17) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== 41) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.",
        "code": "<?php\nfunction division_elements($test_tup1, $test_tup2) {\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 0;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 1;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 2;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 3;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 4;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 5;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 6;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 7;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 8;\n\t$test_tup1[0] = $test_tup1[1] = $test_tup2[0] = $test_tup2[1] = 9;\n\t$test_tup1[0] = $test_tup1[1] = $test_t\n",
        "test_list": [
            "function candidate(...$args) {",
            "return division_elements(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 4, 6, 9), array(5, 2, 3, 3)) !== array(2, 2, 2, 3)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 6, 8, 16), array(6, 3, 4, 4)) !== array(2, 2, 2, 4)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(20, 14, 36, 18), array(5, 7, 6, 9)) !== array(4, 2, 6, 2)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.",
        "code": "<?php\nfunction split_two_parts($list1, $L) {\n\t$list1 = $list1.split(',');\n\t$list1 = $list1.slice(0, $L);\n\treturn $list1;\n}\n\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts_with_length($list1, $L) {\n\t$list1 = $list1.split(',');\n\t$list1 = $list1.slice(0, $L);\n\treturn $list1;\n}\n\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the first part of the array is L, and the second part of the array is the number of elements in the array.\nfunction split_two_parts_with_length_and_length($list1, $L, $N) {\n\t$list1 = $list1.split(',');\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0, $L);\n\t$list1 = $list1.slice(0,\n",
        "test_list": [
            "function candidate(...$args) {",
            "return split_two_parts(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "<?php\nfunction dog_age($h_age) {\n  $h_age = $h_age.toLowerCase();\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, '');\n  $h_age = $h_age.replace(/[^0-9]/g, ''\n",
        "test_list": [
            "function candidate(...$args) {",
            "return dog_age(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(12) !== 61) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15) !== 73) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(24) !== 109) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.",
        "code": "<?php\nfunction list_split($S, $step) {\n\tvar $array = [];\n\tfor (var i = 0; i < $S.length; i += $step) {\n\t\t$array.push($S.substr($i, $step));\n\t}\n\treturn $array;\n}\n\n// Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nfunction list_split_n($S, $step) {\n\tvar $array = [];\n\tfor (var i = 0; i < $S.length; i += $step) {\n\t\t$array.push($S.substr(i, $step));\n\t}\n\treturn $array;\n}\n\n// Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nfunction list_split_n_n($S, $step) {\n\tvar $array = [];\n\tfor (var i = 0; i < $S.length; i += $step) {\n\t\t$array.push($S.substr(i, $step));\n\t}\n\treturn $array;\n}\n\n// Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nfunction list_split_n_n_n($S, $step) {\n\tvar $array = [];\n\tfor (var i = 0; i < $S.length; i += $step) {\n\t\t$array.push($S.substr(i, $step));\n\t}\n\treturn $array;\n}\n\n// Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nfunction list_split_n_n_n_n($S, $step) {\n\tvar $array = [];\n\tfor (var i = 0; i < $S.length; i += $step) {\n\t\t$array.push($S.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return list_split(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"), 3) !== array(array(\"a\", \"d\", \"g\", \"j\", \"m\"), array(\"b\", \"e\", \"h\", \"k\", \"n\"), array(\"c\", \"f\", \"i\", \"l\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 3) !== array(array(1, 4, 7, 10, 13), array(2, 5, 8, 11, 14), array(3, 6, 9, 12))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"), 2) !== array(array(\"python\", \"C\", \"DBMS\"), array(\"java\", \"C++\", \"SQL\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "<?php\nfunction lateralsurface_cube($l) {\n  var side = $l.length;\n  var area = 0;\n  for (var i = 0; i < side; i++) {\n    area += $l[i];\n  }\n  return area;\n}\n\n// Write a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_area($l) {\n  var side = $l.length;\n  var area = 0;\n  for (var i = 0; i < side; i++) {\n    area += $l[i];\n  }\n  return area;\n}\n\n// Write a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_area_area($l) {\n  var side = $l.length;\n  var area = 0;\n  for (var i = 0; i < side; i++) {\n    area += $l[i];\n  }\n  return area;\n}\n\n// Write a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_area_area_area($l) {\n  var side = $l.length;\n  var area = 0;\n  for (var i = 0; i < side; i++) {\n    area += $l[i];\n  }\n  return area;\n}\n\n// Write a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_area_area_area($l) {\n  var side = $l.length;\n  var area = 0;\n  for (var i = 0; i < side; i++) {\n    area += $l[i];\n  }\n  return area;\n}\n\n// Write a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_area_area_area($l) {\n  var side = $l.length;\n  var area = 0;\n  for (var i = 0; i < side; i++) {\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return lateralsurface_cube(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== 100) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9) !== 324) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 400) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a phpthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "<?php\nfunction square_Sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\nfunction square_Sum_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum_3($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\nfunction square_Sum_4($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum_5($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\nfunction square_Sum_6($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return square_Sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 10) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 35) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 84) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "<?php\nfunction find_star_num($n) {\n    var $i = 0;\n    var $j = $n.length - 1;\n    while ($i < $j) {\n        if ($n[$i] === $n[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i;\n}\n\n// Write a function to find then'th star number.\nfunction find_star_num_2($n) {\n    var $i = 0;\n    var $j = $n.length - 1;\n    while ($i < $j) {\n        if ($n[$i] === $n[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i;\n}\n\n// Write a function to find then'th star number.\nfunction find_star_num_3($n) {\n    var $i = 0;\n    var $j = $n.length - 1;\n    while ($i < $j) {\n        if ($n[$i] === $n[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i;\n}\n\n// Write a function to find then'th star number.\nfunction find_star_num_4($n) {\n    var $i = 0;\n    var $j = $n.length - 1;\n    while ($i < $j) {\n        if ($n[$i] === $n[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i;\n}\n\n// Write a function to find then'th star number.\nfunction find_star_num_5($n) {\n    var $i = 0;\n    var $j = $n.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_star_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3) !== 37) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 73) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== 121) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "<?php\nfunction ascii_value($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string_of_string($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string_of_string($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string_of_string($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string_of_string($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string_of_string($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string_of_string($k) {\n  return $k.charCodeAt(0);\n}\n\n// Write a function to find the ascii value of a character.\nfunction ascii_value_of_char_of_string_of_string($k) {\n  return $k.charCodeAt\n",
        "test_list": [
            "function candidate(...$args) {",
            "return ascii_value(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"A\") !== 65) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"R\") !== 82) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"S\") !== 83) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a phpthon function to find the sum of even numbers at even positions of an array.",
        "code": "<?php\nfunction sum_even_and_even_index($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] % 2 == 0) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of odd numbers at odd positions of an array.\nfunction sum_odd_and_odd_index($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] % 2 == 1) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of even numbers at odd positions of an array.\nfunction sum_even_and_odd_index_2($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] % 2 == 1) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of even numbers at odd positions of an array.\nfunction sum_odd_and_even_index_2($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] % 2 == 1) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of even numbers at odd positions of an array.\nfunction sum_even_and_odd_index_3($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] % 2 == 1) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_even_and_even_index(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 6, 12, 1, 18, 8)) !== 30) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 20, 17, 9, 2, 10, 18, 13, 6, 18)) !== 26) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 6, 12, 1)) !== 12) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a phpthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "<?php\nfunction even_Power_Sum($n) {\n    var sum = 0;\n    for (var i = 1; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\nfunction odd_Power_Sum($n) {\n    var sum = 0;\n    for (var i = 1; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_2($n) {\n    var sum = 0;\n    for (var i = 1; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\nfunction odd_Power_Sum_2($n) {\n    var sum = 0;\n    for (var i = 1; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_2($n) {\n    var sum = 0;\n    for (var i = 1; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\nfunction odd_Power_Sum_2($n) {\n    var sum = 0;\n    for (var i = 1; i < $n; i++) {\n        sum += i;\n    }\n",
        "test_list": [
            "function candidate(...$args) {",
            "return even_Power_Sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 1056) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 8832) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1) !== 32) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in an array of arrays and returns an array containing the rear element of each array.",
        "code": "<?php\nfunction rear_extract($test_list) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $result.push($test_list[i][1]);\n    }\n    return $result;\n}\n\n// Write a function that takes in an array of arrays and returns an array containing the front element of each array.\nfunction front_extract($test_list) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $result.push($test_list[i][0]);\n    }\n    return $result;\n}\n\n// Write a function that takes in an array of arrays and returns an array containing the middle element of each array.\nfunction middle_extract($test_list) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $result.push($test_list[i][1]);\n        $result.push($test_list[i][2]);\n    }\n    return $result;\n}\n\n// Write a function that takes in an array of arrays and returns an array containing the last element of each array.\nfunction last_extract($test_list) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $result.push($test_list[i][0]);\n        $result.push($test_list[i][1]);\n        $result.push($test_list[i][2]);\n    }\n    return $result;\n}\n\n// Write a function that takes in an array of arrays and returns an array containing the sum of the elements of each array.\nfunction sum_extract($test_list) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        $result.push($test_list[i][0]);\n        $result.push($test_list[i][1]);\n        $result.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return rear_extract(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, \"Rash\", 21), array(2, \"Varsha\", 20), array(3, \"Kil\", 19))) !== array(21, 20, 19)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, \"Sai\", 36), array(2, \"Ayesha\", 25), array(3, \"Salman\", 45))) !== array(36, 25, 45)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, \"Sudeep\", 14), array(2, \"Vandana\", 36), array(3, \"Dawood\", 56))) !== array(14, 36, 56)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.",
        "code": "<?php\nfunction substract_elements($test_tup1, $test_tup2) {\n\tvar $result = [];\n\tfor (var i = 0; i < $test_tup1.length; i++) {\n\t\t$result.push($test_tup1[i] - $test_tup2[i]);\n\t}\n\treturn $result;\n}\n\n// Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\nfunction substract_elements_by_index($test_tup1, $test_tup2) {\n\tvar $result = [];\n\tfor (var i = 0; i < $test_tup1.length; i++) {\n\t\t$result.push($test_tup1[i] - $test_tup2[i]);\n\t}\n\treturn $result;\n}\n\n// Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\nfunction substract_elements_by_index_by_index($test_tup1, $test_tup2) {\n\tvar $result = [];\n\tfor (var i = 0; i < $test_tup1.length; i++) {\n\t\t$result.push($test_tup1[i] - $test_tup2[i]);\n\t}\n\treturn $result;\n}\n\n// Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\nfunction substract_elements_by_index_by_index_by_index($test_tup1, $test_tup2) {\n\tvar $result = [];\n\tfor (var i = 0; i < $test_tup1.length; i++) {\n\t\t$result.push($test_tup1[i] - $test_tup2[i]);\n\t}\n\treturn $result;\n}\n\n// Write a function that\n",
        "test_list": [
            "function candidate(...$args) {",
            "return substract_elements(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 4, 5), array(2, 5, 18)) !== array(8, -1, -13)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 2, 3), array(24, 45, 16)) !== array(-13, -43, -13)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 18, 9), array(10, 11, 12)) !== array(-3, 7, -3)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a phpthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "<?php\nfunction even_binomial_Coeff_Sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\nfunction odd_binomial_Coeff_Sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\nfunction odd_binomial_Coeff_Sum_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\nfunction odd_binomial_Coeff_Sum_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a\n",
        "test_list": [
            "function candidate(...$args) {",
            "return even_binomial_Coeff_Sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(4) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6) !== 32) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in an array and integer n and filters the array to only include entries with values greater than or equal to n.",
        "code": "<?php\nfunction dict_filter($dict, $n) {\n    $dict = $dict.filter(function(item) {\n        return item.value >= $n;\n    });\n    return $dict;\n}\n\n// Write a function that takes in an array and integer n and filters the array to only include entries with values less than or equal to n.\nfunction dict_filter_reverse($dict, $n) {\n    $dict = $dict.filter(function(item) {\n        return item.value <= $n;\n    });\n    return $dict;\n}\n\n// Write a function that takes in an array and integer n and filters the array to only include entries with values greater than or equal to n.\nfunction dict_filter_reverse_reverse($dict, $n) {\n    $dict = $dict.filter(function(item) {\n        return item.value >= $n;\n    });\n    return $dict;\n}\n\n// Write a function that takes in an array and integer n and filters the array to only include entries with values less than or equal to n.\nfunction dict_filter_reverse_reverse_reverse($dict, $n) {\n    $dict = $dict.filter(function(item) {\n        return item.value <= $n;\n    });\n    return $dict;\n}\n\n// Write a function that takes in an array and integer n and filters the array to only include entries with values greater than or equal to n.\nfunction dict_filter_reverse_reverse_reverse($dict, $n) {\n    $dict = $dict.filter(function(item) {\n        return item.value >= $n;\n    });\n    return $dict;\n}\n\n// Write a function that takes in an array and integer n and filters the array to only include entries with values less than or equal to n.\nfunction dict_filter_reverse_reverse_reverse($dict, $n) {\n    $dict = $dict.filter(function(item) {\n        return item.value <= $n;\n    });\n    return $dict;\n}\n\n// Write a function that takes in an array and integer\n",
        "test_list": [
            "function candidate(...$args) {",
            "return dict_filter(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 170) !== array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 180) !== array(\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 190) !== array(\"Pierre Cox\" => 190)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the array element in the given array.",
        "code": "<?php\nfunction count_first_elements($test_tup) {\n    var $test_tup_array = $test_tup.split(',');\n    var $test_tup_array_length = $test_tup_array.length;\n    var $test_tup_array_index = 0;\n    var $test_tup_array_index_max = $test_tup_array_length - 1;\n    var $test_tup_array_index_min = 0;\n    var $test_tup_array_index_max_min = $test_tup_array_length - 1;\n    var $test_tup_array_index_min_max = 0;\n    var $test_tup_array_index_max_min_max = $test_tup_array_length - 1;\n    var $test_tup_array_index_min_max_min = 0;\n    var $test_tup_array_index_max_min_max = $test_tup_array_length - 1;\n    var $test_tup_array_index_min_max_min_max = 0;\n    var $test_tup_array_index_max_min_max_min = $test_tup_array_length - 1;\n    var $test_tup_array_index_min_max_min_max = 0;\n    var $test_tup_array_index_max_min_max_min = $test_tup_array_length - 1;\n    var $test_tup_array_index_min_max_min_max = 0;\n    var $test_tup_array_index_max_min_max_min = $test_tup_array_length - 1;\n    var $test_tup_array_index_min_max_min_max = 0;\n    var $test_tup_array_index_max_min_max_min = $test_tup_array_length - 1;\n    var $test_tup_array_index_min_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_first_elements(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 5, 7, array(4, 6), 10)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 9, array(5, 7), 11)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 15, 5, 8, array(2, 3), 8)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "<?php\nfunction is_num_decagonal($n) {\n    return $n % 2 == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal($n) {\n    return $n % 2!= 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_of_length($n, $l) {\n    return $n % $l == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_of_length_of_length($n, $l) {\n    return $n % $l == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_of_length_of_length_of_length($n, $l) {\n    return $n % $l == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_of_length_of_length_of_length($n, $l) {\n    return $n % $l == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_of_length_of_length_of_length($n, $l) {\n    return $n % $l == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_of_length_of_length_of_length($n, $l) {\n    return $n % $l == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_of_length_of_length_of_length($n, $l) {\n    return $n % $l == 0;\n}\n\n// Write a function to find the nth non-decagonal number.\nfunction is_num_non_decagonal_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_num_decagonal(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== 175) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 370) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "<?php\nfunction sequential_search($dlist, $item) {\n\tvar $index = 0;\n\tvar $array = [];\n\tfor (var $i = 0; $i < $dlist.length; $i++) {\n\t\tif ($dlist[$i] == $item) {\n\t\t\t$array.push($i);\n\t\t\t$index = $i;\n\t\t}\n\t}\n\treturn $array;\n}\n\n// Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search_with_index($dlist, $item) {\n\tvar $index = 0;\n\tvar $array = [];\n\tfor (var $i = 0; $i < $dlist.length; $i++) {\n\t\tif ($dlist[$i] == $item) {\n\t\t\t$array.push($i);\n\t\t\t$index = $i;\n\t\t}\n\t}\n\treturn $array;\n}\n\n// Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search_with_index_with_index($dlist, $item) {\n\tvar $index = 0;\n\tvar $array = [];\n\tfor (var $i = 0; $i < $dlist.length; $i++) {\n\t\tif ($dlist[$i] == $item) {\n\t\t\t$array.push($i);\n\t\t\t$index = $i;\n\t\t}\n\t}\n\treturn $array;\n}\n\n// Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search_with_index_with_index_with_index($dlist\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sequential_search(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(11, 23, 58, 31, 56, 77, 43, 12, 65, 19), 31) !== array(true, 3)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 32, 45, 62, 35, 47, 44, 61), 61) !== array(true, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(9, 10, 17, 19, 22, 39, 48, 56), 48) !== array(true, 6)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a phpthon function to check if the elements of a given array are unique or not.",
        "code": "<?php\nfunction all_unique($test_list) {\n    var $test_list_length = $test_list.length;\n    var $test_list_index = 0;\n    var $test_list_index_max = $test_list_length - 1;\n    var $test_list_index_min = 0;\n    var $test_list_index_min_max = $test_list_length - 1;\n    var $test_list_index_min_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max = $test_list_length - 1;\n    var $test_list_index_min_max_max_max_max\n",
        "test_list": [
            "function candidate(...$args) {",
            "return all_unique(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two arrays element-wise.",
        "code": "<?php\nfunction sub_list($nums1, $nums2) {\n    var $result = [];\n    for (var i = 0; i < $nums1.length; i++) {\n        $result.push($nums1[i] - $nums2[i]);\n    }\n    return $result;\n}\n\n// Write a function to multiply two arrays element-wise.\nfunction mul_list($nums1, $nums2) {\n    var $result = [];\n    for (var i = 0; i < $nums1.length; i++) {\n        $result.push($nums1[i] * $nums2[i]);\n    }\n    return $result;\n}\n\n// Write a function to divide two arrays element-wise.\nfunction div_list($nums1, $nums2) {\n    var $result = [];\n    for (var i = 0; i < $nums1.length; i++) {\n        $result.push($nums1[i] / $nums2[i]);\n    }\n    return $result;\n}\n\n// Write a function to add two arrays element-wise.\nfunction add_list($nums1, $nums2) {\n    var $result = [];\n    for (var i = 0; i < $nums1.length; i++) {\n        $result.push($nums1[i] + $nums2[i]);\n    }\n    return $result;\n}\n\n// Write a function to subtract two arrays element-wise.\nfunction sub_list($nums1, $nums2) {\n    var $result = [];\n    for (var i = 0; i < $nums1.length; i++) {\n        $result.push($nums1[i] - $nums2[i]);\n    }\n    return $result;\n}\n\n// Write a function to multiply two arrays element-wise.\nfunction mul_list($nums1, $nums2) {\n    var $result = [];\n    for (var i = 0; i < $nums1.length; i++) {\n        $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sub_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3), array(4, 5, 6)) !== array(-3, -3, -3)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2), array(3, 4)) !== array(-2, -2)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(90, 120), array(50, 70)) !== array(40, 50)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a phpthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "<?php\nfunction validate($n) {\n    var $i = 0;\n    var $f = 0;\n    var $d = 0;\n    var $n = $n.toString();\n    var $f = $n.length;\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $n.charAt($f - 1);\n    var $d = $n.charAt($f - 1);\n    var $i = $n.charAt($f - 1);\n    var $f = $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return validate(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1234) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(51241) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(321) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.",
        "code": "<?php\nfunction check_element($list, $element) {\n    var $i = 0;\n    for (var $i = 0; $i < $list.length; $i++) {\n        if ($list[$i]!= $element) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.\nfunction check_all_items($list, $element) {\n    var $i = 0;\n    for (var $i = 0; $i < $list.length; $i++) {\n        if ($list[$i]!= $element) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.\nfunction check_all_items_with_index($list, $index, $element) {\n    var $i = 0;\n    for (var $i = 0; $i < $list.length; $i++) {\n        if ($list[$i]!= $element) {\n            return false;\n        }\n        if ($i == $index) {\n            return true;\n        }\n    }\n    return true;\n}\n\n// Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.\nfunction check_all_items_with_index_with_index($list, $index, $index2, $element) {\n    var $i = 0;\n    for (var $i = 0; $i < $list.length; $i++) {\n        if ($list[$i]!= $element) {\n            return false;\n        }\n        if ($i == $index) {\n            return true;\n        }\n        if ($i == $index2) {\n            return true;\n        }\n    }\n    return true;\n}\n\n// Write a function that takes in an array and element and checks whether all items in the\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"green\", \"orange\", \"black\", \"white\"), \"blue\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4), 7) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"green\", \"green\", \"green\", \"green\"), \"green\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "<?php\nfunction text_match_two_three($text) {\n    var $match = $text.match(/^(a|b)$/);\n    return $match && $match[1].length === 3;\n}\n\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_two_three_with_whitespace($text) {\n    var $match = $text.match(/^(a|b)$/);\n    return $match && $match[1].length === 3 && $match[2].length === 3;\n}\n\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_two_three_with_whitespace_with_whitespace($text) {\n    var $match = $text.match(/^(a|b)$/);\n    return $match && $match[1].length === 3 && $match[2].length === 3 && $match[3].length === 3;\n}\n\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_two_three_with_whitespace_with_whitespace_with_whitespace($text) {\n    var $match = $text.match(/^(a|b)$/);\n    return $match && $match[1].length === 3 && $match[2].length === 3 && $match[3].length === 3;\n}\n\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_two_three_with_whitespace_with_whitespace_with_whitespace_with_whitespace($text) {\n    var $match = $text.match(/^(a|b)$/);\n    return $match && $match[1].length === 3 && $match[2].length === 3 && $match[3].length === 3;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_match_two_three(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abbbba\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "<?php\nfunction max_sub_array_sum_repeated($a, $n, $k) {\n    var $max = 0;\n    for (var i = 0; i < $n; i++) {\n        $max = $max + $a[i];\n    }\n    return $max;\n}\n\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated_k($a, $n, $k) {\n    var $max = 0;\n    for (var i = 0; i < $n; i++) {\n        $max = $max + $a[i];\n    }\n    return $max;\n}\n\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated_k_repeated($a, $n, $k) {\n    var $max = 0;\n    for (var i = 0; i < $n; i++) {\n        $max = $max + $a[i];\n    }\n    return $max;\n}\n\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated_k_repeated_repeated($a, $n, $k) {\n    var $max = 0;\n    for (var i = 0; i < $n; i++) {\n        $max = $max + $a[i];\n    }\n    return $max;\n}\n\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated_k_repeated_repeated($a, $n, $k) {\n    var $max = 0;\n    for (var i = 0; i < $n; i++) {\n        $max = $max\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_sub_array_sum_repeated(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 20, -30, -1), 4, 3) !== 30) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-1, 10, 20), 3, 2) !== 59) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-1, -2, -3), 3, 3) !== -1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a phpthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "<?php\nfunction square_Sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function takes in an integer n and returns the sum of squares of first n odd natural numbers.\nfunction square_SumOdd($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_SumEven($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function takes in an integer n and returns the sum of squares of first n odd natural numbers.\nfunction square_SumOddEven($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_SumEvenEven($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function takes in an integer n and returns the sum of squares of first n odd natural numbers.\nfunction square_SumOddEven($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n// Write a phpthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum\n",
        "test_list": [
            "function candidate(...$args) {",
            "return square_Sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 20) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 56) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 120) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the array of maximum length in an array of arrays.",
        "code": "<?php\nfunction max_length($list1) {\n    var $max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] > $max) {\n            $max = $list1[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the array of maximum length in an array of arrays.\nfunction max_length_array($list1) {\n    var $max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] > $max) {\n            $max = $list1[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the array of maximum length in an array of arrays.\nfunction max_length_array_array($list1) {\n    var $max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] > $max) {\n            $max = $list1[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the array of maximum length in an array of arrays.\nfunction max_length_array_array_array($list1) {\n    var $max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] > $max) {\n            $max = $list1[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the array of maximum length in an array of arrays.\nfunction max_length_array_array_array_array($list1) {\n    var $max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] > $max) {\n            $max = $list1[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the array of\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_length(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(0), array(1, 3), array(5, 7), array(9, 11), array(13, 15, 17))) !== array(3, array(13, 15, 17))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1), array(5, 7), array(10, 12, 14, 15))) !== array(4, array(10, 12, 14, 15))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(5), array(15, 20, 25))) !== array(3, array(15, 20, 25))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "<?php\nfunction count_no_of_ways($n, $k) {\n    var n = $n;\n    var k = $k;\n    var n_posts = 0;\n    var k_posts = 0;\n    for (var i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            n_posts++;\n        } else {\n            k_posts++;\n        }\n    }\n    return n_posts + k_posts;\n}\n\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunction count_no_of_ways_with_k($n, $k) {\n    var n = $n;\n    var k = $k;\n    var n_posts = 0;\n    var k_posts = 0;\n    for (var i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            n_posts++;\n        } else {\n            k_posts++;\n        }\n    }\n    return n_posts + k_posts;\n}\n\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunction count_no_of_ways_with_k_and_n($n, $k) {\n    var n = $n;\n    var k = $k;\n    var n_posts = 0;\n    var k_posts = 0;\n    for (var i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            n_posts++;\n        } else {\n            k_posts++;\n        }\n    }\n    return n_posts + k_posts;\n}\n\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunction count_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_no_of_ways(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2, 4) !== 16) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3, 2) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 4) !== 228) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a phpthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "<?php\nfunction find($n, $m) {\n    $n = $n.toString();\n    $m = $m.toString();\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-9]/g, '');\n    $m = $m.replace(/[^0-9]/g, '');\n    $n = $n.replace(/[^0-\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 3) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 2) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(20, 5) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "<?php\nfunction otherside_rightangle($w, $h) {\n  var $a = $w.length;\n  var $b = $h.length;\n  var $c = $a + $b;\n  var $d = $c + $b;\n  var $e = $d + $b;\n  var $f = $e + $b;\n  var $g = $f + $b;\n  var $h = $g + $b;\n  var $i = $h + $b;\n  var $j = $i + $b;\n  var $k = $j + $b;\n  var $l = $k + $b;\n  var $m = $l + $b;\n  var $n = $m + $b;\n  var $o = $n + $b;\n  var $p = $o + $b;\n  var $q = $p + $b;\n  var $r = $q + $b;\n  var $s = $r + $b;\n  var $t = $s + $b;\n  var $u = $t + $b;\n  var $v = $u + $b;\n  var $w = $v + $b;\n  var $x = $w + $b;\n  var $y = $x + $b;\n  var $z = $y + $b;\n  var $A = $z + $b;\n  var $B = $A + $b;\n  var $C = $B + $b;\n  var $D = $C + $b;\n  var $E = $D + $b;\n  var $F = $E + $b;\n  var $G = $F + $b;\n  var $H = $G + $b;\n  var $I = $H + $b;\n  var $J = $I + $b;\n  var $K = $J + $b;\n  var $L = $K + $b;\n  var $M = $L + $b;\n  var $N = $M + $b;\n  \n",
        "test_list": [
            "function candidate(...$args) {",
            "return otherside_rightangle(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(7, 8) !== 10.63014581273465) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3, 4) !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7, 15) !== 16.55294535724685) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the maximum value in a given heterogeneous array.",
        "code": "<?php\nfunction max_val($listval) {\n    var max = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] > max) {\n            max = $listval[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to find the minimum value in a given heterogeneous array.\nfunction min_val($listval) {\n    var min = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] < min) {\n            min = $listval[i];\n        }\n    }\n    return min;\n}\n\n// Write a function to find the sum of the values in a given heterogeneous array.\nfunction sum_val($listval) {\n    var sum = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        sum += $listval[i];\n    }\n    return sum;\n}\n\n// Write a function to find the average value in a given heterogeneous array.\nfunction avg_val($listval) {\n    var avg = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        avg += $listval[i];\n    }\n    return avg / $listval.length;\n}\n\n// Write a function to find the median value in a given heterogeneous array.\nfunction median_val($listval) {\n    var median = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] > median) {\n            median = $listval[i];\n        }\n    }\n    return median;\n}\n\n// Write a function to find the minimum value in a given heterogeneous array.\nfunction min_val_max($listval) {\n    var min = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] > min) {\n            min = $listval[\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_val(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Python\", 3, 2, 4, 5, \"version\")) !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Python\", 15, 20, 25)) !== 25) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Python\", 30, 20, 40, 50, \"version\")) !== 50) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "<?php\nfunction sum_div($number) {\n    var sum = 0;\n    for (var i = 0; i < $number.length; i++) {\n        if ($number[i] % 2 == 0) {\n            sum += $number[i];\n        }\n    }\n    return sum;\n}\n\n// Write a function to return the sum of all divisors of a number.\nfunction sum_div_2($number) {\n    var sum = 0;\n    for (var i = 0; i < $number.length; i++) {\n        if ($number[i] % 2 == 0) {\n            sum += $number[i];\n        }\n    }\n    return sum;\n}\n\n// Write a function to return the sum of all divisors of a number.\nfunction sum_div_3($number) {\n    var sum = 0;\n    for (var i = 0; i < $number.length; i++) {\n        if ($number[i] % 3 == 0) {\n            sum += $number[i];\n        }\n    }\n    return sum;\n}\n\n// Write a function to return the sum of all divisors of a number.\nfunction sum_div_4($number) {\n    var sum = 0;\n    for (var i = 0; i < $number.length; i++) {\n        if ($number[i] % 4 == 0) {\n            sum += $number[i];\n        }\n    }\n    return sum;\n}\n\n// Write a function to return the sum of all divisors of a number.\nfunction sum_div_5($number) {\n    var sum = 0;\n    for (var i = 0; i < $number.length; i++) {\n        if ($number[i] % 5 == 0) {\n            sum += $number[i];\n        }\n    }\n    return sum;\n}\n\n// Write a function to return the sum of all divisors of a number.\nfunction sum_div_6($number) {\n    var sum = 0;\n    for (var i = 0; i < $number.length;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_div(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(8) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(12) !== 16) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a phpthon function to count inversions in an array.",
        "code": "<?php\nfunction get_Inv_Count($arr) {\n  var count = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] == 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Write a phpthon function to count inversions in an array.\nfunction get_Inv_Count_2($arr) {\n  var count = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] == 2) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Write a phpthon function to count inversions in an array.\nfunction get_Inv_Count_3($arr) {\n  var count = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] == 3) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Write a phpthon function to count inversions in an array.\nfunction get_Inv_Count_4($arr) {\n  var count = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] == 4) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Write a phpthon function to count inversions in an array.\nfunction get_Inv_Count_5($arr) {\n  var count = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] == 5) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Write a phpthon function to count inversions in an array.\nfunction get_Inv_Count_6($arr) {\n  var count = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] == 6) {\n      count++;\n    }\n  }\n  return count;\n}\n\n//\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_Inv_Count(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested array structure.",
        "code": "<?php\nfunction flatten_list($list1) {\n  var $list2 = [];\n  for (var i = 0; i < $list1.length; i++) {\n    $list2.push($list1[i]);\n  }\n  return $list2;\n}\n\n// Write a function to flatten a given nested array structure.\nfunction flatten_array($array1) {\n  var $array2 = [];\n  for (var i = 0; i < $array1.length; i++) {\n    $array2.push($array1[i]);\n  }\n  return $array2;\n}\n\n// Write a function to flatten a given nested array structure.\nfunction flatten_map($map1) {\n  var $map2 = {};\n  for (var i = 0; i < $map1.length; i++) {\n    $map2[$map1[i]] = $map1[i];\n  }\n  return $map2;\n}\n\n// Write a function to flatten a given nested array structure.\nfunction flatten_set($set1) {\n  var $set2 = {};\n  for (var i = 0; i < $set1.length; i++) {\n    $set2[$set1[i]] = $set1[i];\n  }\n  return $set2;\n}\n\n// Write a function to flatten a given nested array structure.\nfunction flatten_dictionary($dict1) {\n  var $dict2 = {};\n  for (var i = 0; i < $dict1.length; i++) {\n    $dict2[$dict1[i]] = $dict1[i];\n  }\n  return $dict2;\n}\n\n// Write a function to flatten a given nested array structure.\nfunction flatten_string($string1) {\n  var $string2 = '';\n  for (var i = 0; i < $string1.length; i++) {\n    $string2 += $string1[i];\n  }\n  return $string2;\n}\n\n// Write a function to flatten a given nested array structure.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return flatten_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the array of arrays.",
        "code": "<?php\nfunction max_aggregate($stdata) {\n    var max = 0;\n    for (var i = 0; i < $stdata.length; i++) {\n        if ($stdata[i] > max) {\n            max = $stdata[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to calculate the minimum aggregate from the array of arrays.\nfunction min_aggregate($stdata) {\n    var min = 0;\n    for (var i = 0; i < $stdata.length; i++) {\n        if ($stdata[i] < min) {\n            min = $stdata[i];\n        }\n    }\n    return min;\n}\n\n// Write a function to calculate the average aggregate from the array of arrays.\nfunction average_aggregate($stdata) {\n    var average = 0;\n    for (var i = 0; i < $stdata.length; i++) {\n        average += $stdata[i];\n    }\n    return average / $stdata.length;\n}\n\n// Write a function to calculate the sum aggregate from the array of arrays.\nfunction sum_aggregate($stdata) {\n    var sum = 0;\n    for (var i = 0; i < $stdata.length; i++) {\n        sum += $stdata[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the average of the array of arrays.\nfunction average_of_array($stdata) {\n    var average = 0;\n    for (var i = 0; i < $stdata.length; i++) {\n        average += $stdata[i];\n    }\n    return average / $stdata.length;\n}\n\n// Write a function to calculate the sum of the array of arrays.\nfunction sum_of_array($stdata) {\n    var sum = 0;\n    for (var i = 0; i < $stdata.length; i++) {\n        sum += $stdata[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the maximum aggregate from the array of arrays.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_aggregate(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"Juan Whelan\", 90), array(\"Sabah Colley\", 88), array(\"Peter Nichols\", 7), array(\"Juan Whelan\", 122), array(\"Sabah Colley\", 84))) !== array(\"Juan Whelan\", 212)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Juan Whelan\", 50), array(\"Sabah Colley\", 48), array(\"Peter Nichols\", 37), array(\"Juan Whelan\", 22), array(\"Sabah Colley\", 14))) !== array(\"Juan Whelan\", 72)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Juan Whelan\", 10), array(\"Sabah Colley\", 20), array(\"Peter Nichols\", 30), array(\"Juan Whelan\", 40), array(\"Sabah Colley\", 50))) !== array(\"Sabah Colley\", 70)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a phpthon function to find element at a given index after number of rotations.",
        "code": "<?php\nfunction find_Element($arr, $ranges, $rotations, $index) {\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $arr = $arr || [];\n    var $length = $arr.length;\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $length = $length || 0;\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $length = $length || 0;\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $length = $length || 0;\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $length = $length || 0;\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $length = $length || 0;\n    var $index = $index || 0;\n    var $ranges = $ranges || [];\n    var $rotations = $rotations || [];\n    var $length = $length\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5), array(array(0, 2), array(0, 3)), 2, 1) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4), array(array(0, 1), array(0, 2)), 1, 2) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6), array(array(0, 1), array(0, 2)), 1, 1) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from an array of words starting with letter 'p'.",
        "code": "<?php\nfunction start_withp($words) {\n    var $first = $words[0];\n    var $second = $words[1];\n    return [$first, $second];\n}\n\n// Write a function to return the first word from an array of words starting with letter 'p'.\nfunction first_withp($words) {\n    var $first = $words[0];\n    return $first;\n}\n\n// Write a function to return the second word from an array of words starting with letter 'p'.\nfunction second_withp($words) {\n    var $second = $words[1];\n    return $second;\n}\n\n// Write a function to return the third word from an array of words starting with letter 'p'.\nfunction third_withp($words) {\n    var $third = $words[2];\n    return $third;\n}\n\n// Write a function to return the fourth word from an array of words starting with letter 'p'.\nfunction fourth_withp($words) {\n    var $fourth = $words[3];\n    return $fourth;\n}\n\n// Write a function to return the fifth word from an array of words starting with letter 'p'.\nfunction fifth_withp($words) {\n    var $fifth = $words[4];\n    return $fifth;\n}\n\n// Write a function to return the sixth word from an array of words starting with letter 'p'.\nfunction sixth_withp($words) {\n    var $sixth = $words[5];\n    return $sixth;\n}\n\n// Write a function to return the seventh word from an array of words starting with letter 'p'.\nfunction seventh_withp($words) {\n    var $seventh = $words[6];\n    return $seventh;\n}\n\n// Write a function to return the eighth word from an array of words starting with letter 'p'.\nfunction eighth_withp($words) {\n    var $eighth = $words[7];\n    return $eighth;\n}\n\n// Write a function to return the ninth word from an array of words starting with letter 'p'.\nfunction ninth_withp($words) {\n",
        "test_list": [
            "function candidate(...$args) {",
            "return start_withp(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Python PHP\", \"Java JavaScript\", \"c c++\")) !== array(\"Python\", \"PHP\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Python Programming\", \"Java Programming\")) !== array(\"Python\", \"Programming\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Pqrst Pqr\", \"qrstuv\")) !== array(\"Pqrst\", \"Pqr\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "<?php\nfunction max_sum_increasing_subseq($a, $n, $index, $k) {\n  var $max = 0;\n  var $i = $index;\n  var $j = $index + $k;\n  while ($i < $n) {\n    if ($a[$i] > $a[$j]) {\n      $max = $max + $a[$i];\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $max;\n}\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\nfunction max_sum_increasing_subseq_k($a, $n, $index, $k) {\n  var $max = 0;\n  var $i = $index;\n  var $j = $index + $k;\n  while ($i < $n) {\n    if ($a[$i] > $a[$j]) {\n      $max = $max + $a[$i];\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $max;\n}\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\nfunction max_sum_increasing_subseq_k_k($a, $n, $index, $k) {\n  var $max = 0;\n  var $i = $index;\n  var $j = $index + $k;\n  while ($i < $n) {\n    if ($a[$i] > $a[$j]) {\n      $max = $max + $a[$i];\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $max;\n}\n\n// Write a function to find the maximum sum of increasing\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_sum_increasing_subseq(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 101, 2, 3, 100, 4, 5), 7, 4, 6) !== 11) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 101, 2, 3, 100, 4, 5), 7, 2, 5) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 15, 19, 21, 26, 28, 31), 7, 2, 4) !== 71) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.",
        "code": "<?php\nfunction large_product($nums1, $nums2, $N) {\n    var $max = 0;\n    for (var i = 0; i < $N; i++) {\n        if ($nums1[i] > $nums2[i]) {\n            $max = i;\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the largest product of two given arrays, selecting one factor from each array.\nfunction largest_product($nums1, $nums2) {\n    var $max = 0;\n    for (var i = 0; i < $nums1.length; i++) {\n        if ($nums1[i] > $nums2[i]) {\n            $max = i;\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the smallest product of two given arrays, selecting one factor from each array.\nfunction smallest_product($nums1, $nums2) {\n    var $min = 0;\n    for (var i = 0; i < $nums1.length; i++) {\n        if ($nums1[i] < $nums2[i]) {\n            $min = i;\n        }\n    }\n    return $min;\n}\n\n// Write a function to find the smallest product of two given arrays, selecting one factor from each array.\nfunction smallest_product_of_two($nums1, $nums2) {\n    var $min = 0;\n    for (var i = 0; i < $nums1.length; i++) {\n        if ($nums1[i] < $nums2[i]) {\n            $min = i;\n        }\n    }\n    return $min;\n}\n\n// Write a function to find the smallest product of two given arrays, selecting one factor from each array.\nfunction smallest_product_of_two_of_three($nums1, $nums2) {\n    var $min = 0;\n    for (var i = 0; i < $nums1.length;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return large_product(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 3) !== array(60, 54, 50)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 4) !== array(60, 54, 50, 48)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 5) !== array(60, 54, 50, 48, 45)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a phpthon function to find the maximum of two numbers.",
        "code": "<?php\nfunction maximum($a, $b) {\n  return $a > $b? $a : $b;\n}\n\n// Write a phpthon function to find the minimum of two numbers.\nfunction minimum($a, $b) {\n  return $a < $b? $a : $b;\n}\n\n// Write a phpthon function to find the sum of two numbers.\nfunction sum($a, $b) {\n  return $a + $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product2($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product3($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product4($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product5($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product6($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product7($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product8($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product9($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product10($a, $b) {\n  return $a * $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return maximum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5, 10) !== 10) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(-1, -2) !== -1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9, 7) !== 9) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to an array of characters.",
        "code": "<?php\nfunction string_to_tuple($str1) {\n    var $str2 = $str1.split('');\n    var $tuple = [];\n    for (var i = 0; i < $str2.length; i++) {\n        $tuple.push($str2[i]);\n    }\n    return $tuple;\n}\n\n// Write a function to convert a given array of characters to a string.\nfunction tuple_to_string($tuple) {\n    var $str = '';\n    for (var i = 0; i < $tuple.length; i++) {\n        $str += $tuple[i];\n    }\n    return $str;\n}\n\n// Write a function to convert a given string to a string array.\nfunction string_to_array($str) {\n    var $str2 = $str.split('');\n    var $array = [];\n    for (var i = 0; i < $str2.length; i++) {\n        $array.push($str2[i]);\n    }\n    return $array;\n}\n\n// Write a function to convert a given string array to a string array.\nfunction array_to_string($array) {\n    var $str = '';\n    for (var i = 0; i < $array.length; i++) {\n        $str += $array[i];\n    }\n    return $str;\n}\n\n// Write a function to convert a given string array to a string array.\nfunction array_to_array($array) {\n    var $str = '';\n    for (var i = 0; i < $array.length; i++) {\n        $str += $array[i];\n    }\n    return $str;\n}\n\n// Write a function to convert a given string array to a string array.\nfunction array_to_string_array($array) {\n    var $str = '';\n    for (var i = 0; i < $array.length; i++) {\n        $str += $array[i];\n    }\n    return $str;\n}\n\n// Write a function to convert a given string array to\n",
        "test_list": [
            "function candidate(...$args) {",
            "return string_to_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python 3.0\") !== array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"item1\") !== array(\"i\", \"t\", \"e\", \"m\", \"1\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"15.10\") !== array(\"1\", \"5\", \".\", \"1\", \"0\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a phpthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "<?php\nfunction highest_Power_of_2($n) {\n    var result = 0;\n    for (var i = 0; i < $n; i++) {\n        result = result << 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2_2($n) {\n    var result = 0;\n    for (var i = 0; i < $n; i++) {\n        result = result << 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2_3($n) {\n    var result = 0;\n    for (var i = 0; i < $n; i++) {\n        result = result << 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2_4($n) {\n    var result = 0;\n    for (var i = 0; i < $n; i++) {\n        result = result << 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2_5($n) {\n    var result = 0;\n    for (var i = 0; i < $n; i++) {\n        result = result << 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2_6($n) {\n    var result = 0;\n    for (var i = 0; i < $n; i++) {\n        result = result << 1;\n    }\n    return result;\n}\n\n// Write a phpthon function to find the highest power of 2 that is less than or\n",
        "test_list": [
            "function candidate(...$args) {",
            "return highest_Power_of_2(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(19) !== 16) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(32) !== 32) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "<?php\nfunction find_lucas($n) {\n    var $lucas = 0;\n    for (var i = 0; i < $n; i++) {\n        $lucas += 1;\n    }\n    return $lucas;\n}\n\n// Write a function to find then'th lucas number.\nfunction find_lucas_n(n) {\n    var $lucas = 0;\n    for (var i = 0; i < n; i++) {\n        $lucas += 1;\n    }\n    return $lucas;\n}\n\n// Write a function to find then'th lucas number.\nfunction find_lucas_n_2(n) {\n    var $lucas = 0;\n    for (var i = 0; i < n; i++) {\n        $lucas += 1;\n    }\n    return $lucas;\n}\n\n// Write a function to find then'th lucas number.\nfunction find_lucas_n_3(n) {\n    var $lucas = 0;\n    for (var i = 0; i < n; i++) {\n        $lucas += 1;\n    }\n    return $lucas;\n}\n\n// Write a function to find then'th lucas number.\nfunction find_lucas_n_4(n) {\n    var $lucas = 0;\n    for (var i = 0; i < n; i++) {\n        $lucas += 1;\n    }\n    return $lucas;\n}\n\n// Write a function to find then'th lucas number.\nfunction find_lucas_n_5(n) {\n    var $lucas = 0;\n    for (var i = 0; i < n; i++) {\n        $lucas += 1;\n    }\n    return $lucas;\n}\n\n// Write a function to find then'th lucas number.\nfunction find_lucas_n_6(n) {\n    var $lucas = 0;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_lucas(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(9) !== 76) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in an array.",
        "code": "<?php\nfunction add_string($list_, $string) {\n    $list_.push($string);\n}\n\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string_array($list_, $string_array) {\n    $list_.push($string_array);\n}\n\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string_array_array($list_, $string_array_array) {\n    $list_.push($string_array_array);\n}\n\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string_array_array_array($list_, $string_array_array_array) {\n    $list_.push($string_array_array_array);\n}\n\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string_array_array_array_array($list_, $string_array_array_array_array) {\n    $list_.push($string_array_array_array_array);\n}\n\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string_array_array_array_array_array($list_, $string_array_array_array_array_array) {\n    $list_.push($string_array_array_array_array_array);\n}\n\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string_array_array_array_array_array_array($list_, $string_array_array_array_array_array_array) {\n    $list_.push($string_array_array_array_array_array_array);\n}\n\n// Write a function to apply a given format string to all of the elements in an array.\nfunction add_string_array_array_array_array_array_array_array($list_, $string_array_array_array_array_array_array_array) {\n    $list_.push($string\n",
        "test_list": [
            "function candidate(...$args) {",
            "return add_string(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4), \"temp{0}\") !== array(\"temp1\", \"temp2\", \"temp3\", \"temp4\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\", \"b\", \"c\", \"d\"), \"python{0}\") !== array(\"pythona\", \"pythonb\", \"pythonc\", \"pythond\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 6, 7, 8), \"string{0}\") !== array(\"string5\", \"string6\", \"string7\", \"string8\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one array to nested array.",
        "code": "<?php\nfunction convert_list_dictionary($l1, $l2, $l3) {\n  $l1 = $l1.split(',');\n  $l2 = $l2.split(',');\n  $l3 = $l3.split(',');\n  $l1 = $l1.join(',');\n  $l2 = $l2.join(',');\n  $l3 = $l3.join(',');\n  return {\n    $l1: $l1,\n    $l2: $l2,\n    $l3: $l3\n  };\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array_dictionary($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array_array($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array_array_dictionary($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array_array_array($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array_array_array_dictionary($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array_array_array_array($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to a list.\nfunction convert_list_array_array_array_array_dictionary($l) {\n  return $l.split(',');\n}\n\n// Write a function to convert a nested array to\n",
        "test_list": [
            "function candidate(...$args) {",
            "return convert_list_dictionary(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"S001\", \"S002\", \"S003\", \"S004\"), array(\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"), array(85, 98, 89, 92)) !== array(array(\"S001\" => array(\"Adina Park\" => 85)), array(\"S002\" => array(\"Leyton Marsh\" => 98)), array(\"S003\" => array(\"Duncan Boyle\" => 89)), array(\"S004\" => array(\"Saim Richards\" => 92)))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"abc\", \"def\", \"ghi\", \"jkl\"), array(\"python\", \"program\", \"language\", \"programs\"), array(100, 200, 300, 400)) !== array(array(\"abc\" => array(\"python\" => 100)), array(\"def\" => array(\"program\" => 200)), array(\"ghi\" => array(\"language\" => 300)), array(\"jkl\" => array(\"programs\" => 400)))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"A1\", \"A2\", \"A3\", \"A4\"), array(\"java\", \"C\", \"C++\", \"DBMS\"), array(10, 20, 30, 40)) !== array(array(\"A1\" => array(\"java\" => 10)), array(\"A2\" => array(\"C\" => 20)), array(\"A3\" => array(\"C++\" => 30)), array(\"A4\" => array(\"DBMS\" => 40)))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "<?php\nfunction get_max_sum($n) {\n    var max_sum = 0;\n    for (var i = 0; i < $n; i++) {\n        max_sum = Math.max(max_sum, $n - i);\n    }\n    return max_sum;\n}\n\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum_by_equation($n) {\n    var max_sum = 0;\n    for (var i = 0; i < $n; i++) {\n        max_sum = Math.max(max_sum, $n - i);\n    }\n    return max_sum;\n}\n\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum_by_equation_by_n($n) {\n    var max_sum = 0;\n    for (var i = 0; i < $n; i++) {\n        max_sum = Math.max(max_sum, $n - i);\n    }\n    return max_sum;\n}\n\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum_by_equation_by_n_by_n($n) {\n    var max_sum = 0;\n    for (var i = 0; i < $n; i++) {\n        max_sum = Math.max(max_sum, $n - i);\n    }\n    return max_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_max_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(60) !== 106) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the array with maximum length.",
        "code": "<?php\nfunction max_length_list($input_list) {\n    var max_length = 0;\n    for (var i = 0; i < $input_list.length; i++) {\n        if ($input_list[i] > max_length) {\n            max_length = $input_list[i];\n        }\n    }\n    return max_length;\n}\n\n// Write a function to find the array with minimum length.\nfunction min_length_list($input_list) {\n    var min_length = 0;\n    for (var i = 0; i < $input_list.length; i++) {\n        if ($input_list[i] < min_length) {\n            min_length = $input_list[i];\n        }\n    }\n    return min_length;\n}\n\n// Write a function to find the array with maximum length.\nfunction max_length_array($input_array) {\n    var max_length = 0;\n    for (var i = 0; i < $input_array.length; i++) {\n        if ($input_array[i] > max_length) {\n            max_length = $input_array[i];\n        }\n    }\n    return max_length;\n}\n\n// Write a function to find the array with minimum length.\nfunction min_length_array($input_array) {\n    var min_length = 0;\n    for (var i = 0; i < $input_array.length; i++) {\n        if ($input_array[i] < min_length) {\n            min_length = $input_array[i];\n        }\n    }\n    return min_length;\n}\n\n// Write a function to find the array with maximum length.\nfunction max_length_array_with_min_length($input_array) {\n    var max_length = 0;\n    for (var i = 0; i < $input_array.length; i++) {\n        if ($input_array[i] > max_length) {\n            max_length = $input_array[i];\n        }\n    }\n    return max_length;\n}\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_length_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(0), array(1, 3), array(5, 7), array(9, 11), array(13, 15, 17))) !== array(3, array(13, 15, 17))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2, 3, 4, 5), array(1, 2, 3, 4), array(1, 2, 3), array(1, 2), array(1))) !== array(5, array(1, 2, 3, 4, 5))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 4, 5), array(6, 7, 8, 9), array(10, 11, 12))) !== array(4, array(6, 7, 8, 9))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given array contains no duplicates.",
        "code": "<?php\nfunction check_distinct($test_tup) {\n  var $test_tup_len = $test_tup.length;\n  var $test_tup_i = 0;\n  var $test_tup_j = $test_tup_len - 1;\n  while ($test_tup_i < $test_tup_len) {\n    if ($test_tup[$test_tup_i] === $test_tup[$test_tup_j]) {\n      $test_tup_i++;\n      $test_tup_j--;\n    } else {\n      $test_tup_i++;\n      $test_tup_j++;\n    }\n  }\n  return $test_tup_i;\n}\n\n// Write a function to check if given array contains no duplicates.\nfunction check_distinct_array($test_tup) {\n  var $test_tup_len = $test_tup.length;\n  var $test_tup_i = 0;\n  var $test_tup_j = $test_tup_len - 1;\n  while ($test_tup_i < $test_tup_len) {\n    if ($test_tup[$test_tup_i] === $test_tup[$test_tup_j]) {\n      $test_tup_i++;\n      $test_tup_j--;\n    } else {\n      $test_tup_i++;\n      $test_tup_j++;\n    }\n  }\n  return $test_tup_i;\n}\n\n// Write a function to check if given array contains no duplicates.\nfunction check_distinct_array_array($test_tup) {\n  var $test_tup_len = $test_tup.length;\n  var $test_tup_i = 0;\n  var $test_tup_j = $test_tup_len - 1;\n  while ($test_tup_i < $test_tup_len) {\n    if\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_distinct(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 4, 5, 6, 1, 4)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a phpthon function to find the first non-repeated character in a given string.",
        "code": "<?php\nfunction first_non_repeating_character($str1) {\n    var $str2 = $str1.substr(0, 1);\n    var $str3 = $str1.substr(1);\n    var $str4 = $str1.substr(2);\n    var $str5 = $str1.substr(3);\n    var $str6 = $str1.substr(4);\n    var $str7 = $str1.substr(5);\n    var $str8 = $str1.substr(6);\n    var $str9 = $str1.substr(7);\n    var $str10 = $str1.substr(8);\n    var $str11 = $str1.substr(9);\n    var $str12 = $str1.substr(10);\n    var $str13 = $str1.substr(11);\n    var $str14 = $str1.substr(12);\n    var $str15 = $str1.substr(13);\n    var $str16 = $str1.substr(14);\n    var $str17 = $str1.substr(15);\n    var $str18 = $str1.substr(16);\n    var $str19 = $str1.substr(17);\n    var $str20 = $str1.substr(18);\n    var $str21 = $str1.substr(19);\n    var $str22 = $str1.substr(20);\n    var $str23 = $str1.substr(21);\n    var $str24 = $str1.substr(22);\n    var $str25 = $str1.substr(23);\n    var $str26 = $str1.substr(24);\n    var $str27 = $str1.substr(25);\n    var $str28 = $str1.substr(26);\n    var $str29 = $str1.substr(27);\n    var $str30 = $str1.substr(28);\n    var $str31 =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return first_non_repeating_character(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"abcabc\") !== null) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abc\") !== \"a\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"ababc\") !== \"c\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "<?php\nfunction check_char($string) {\n    var $start = $string.indexOf($string.charAt(0));\n    var $end = $string.indexOf($string.charAt(1));\n    return ($start == -1 && $end == -1);\n}\n\n// Write a function to check whether the given string starts and ends with the same character or not.\nfunction check_char_end($string) {\n    var $start = $string.indexOf($string.charAt(0));\n    var $end = $string.indexOf($string.charAt(1));\n    return ($start == -1 && $end == -1);\n}\n\n// Write a function to check whether the given string starts and ends with the same character or not.\nfunction check_char_end_end($string) {\n    var $start = $string.indexOf($string.charAt(0));\n    var $end = $string.indexOf($string.charAt(1));\n    return ($start == -1 && $end == -1);\n}\n\n// Write a function to check whether the given string starts and ends with the same character or not.\nfunction check_char_end_end_end($string) {\n    var $start = $string.indexOf($string.charAt(0));\n    var $end = $string.indexOf($string.charAt(1));\n    return ($start == -1 && $end == -1);\n}\n\n// Write a function to check whether the given string starts and ends with the same character or not.\nfunction check_char_end_end_end_end($string) {\n    var $start = $string.indexOf($string.charAt(0));\n    var $end = $string.indexOf($string.charAt(1));\n    return ($start == -1 && $end == -1);\n}\n\n// Write a function to check whether the given string starts and ends with the same character or not.\nfunction check_char_end_end_end_end($string) {\n    var $start = $string.indexOf($string.charAt(0));\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_char(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"abba\") !== \"Valid\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"a\") !== \"Valid\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abcd\") !== \"Invalid\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "<?php\nfunction median_numbers($a, $b, $c) {\n  var $a_median = $a.slice(0, $a.length / 2);\n  var $b_median = $b.slice(0, $b.length / 2);\n  var $c_median = $c.slice(0, $c.length / 2);\n\n  return {\n    $a_median: $a_median,\n    $b_median: $b_median,\n    $c_median: $c_median\n  };\n}\n\n// Write a function to find the median of three numbers.\nfunction median_numbers_with_index($a, $b, $c, $index) {\n  var $a_median = $a.slice(0, $a.length / 2);\n  var $b_median = $b.slice(0, $b.length / 2);\n  var $c_median = $c.slice(0, $c.length / 2);\n\n  return {\n    $a_median: $a_median,\n    $b_median: $b_median,\n    $c_median: $c_median,\n    $index: $index\n  };\n}\n\n// Write a function to find the median of three numbers.\nfunction median_numbers_with_index_with_index($a, $b, $c, $index, $index2) {\n  var $a_median = $a.slice(0, $a.length / 2);\n  var $b_median = $b.slice(0, $b.length / 2);\n  var $c_median = $c.slice(0, $c.length / 2);\n\n  return {\n    $a_median: $a_median,\n    $b_median: $b_median,\n    $c_median: $c_median,\n    $index: $index,\n    $index2: $index2\n  };\n}\n\n// Write a function to find the median of three numbers.\nfunction\n",
        "test_list": [
            "function candidate(...$args) {",
            "return median_numbers(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(25, 55, 65) !== 55.0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(20, 10, 30) !== 20.0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15, 45, 75) !== 45.0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given array.",
        "code": "<?php\nfunction sum_of_digits($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to compute the sum of digits of each number of a given array.\nfunction sum_of_digits_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to compute the sum of digits of each number of a given array.\nfunction sum_of_digits_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to compute the sum of digits of each number of a given array.\nfunction sum_of_digits_array_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to compute the sum of digits of each number of a given array.\nfunction sum_of_digits_array_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a function to compute the sum of digits of each number of a given array.\nfunction sum_of_digits_array_array_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_of_digits(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 2, 56)) !== 14) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(10, 20, 4, 5, \"b\", 70, \"a\"))) !== 19) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, -4, 5, -70)) !== 19) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given arrays.",
        "code": "<?php\nfunction bitwise_xor($test_tup1, $test_tup2) {\n    var $result = 0;\n    for (var i = 0; i < $test_tup1.length; i++) {\n        $result = $result ^ $test_tup1[i];\n    }\n    for (var i = 0; i < $test_tup2.length; i++) {\n        $result = $result ^ $test_tup2[i];\n    }\n    return $result;\n}\n\n// Write a function to perform the mathematical bitwise xor operation across the given arrays.\nfunction bitwise_xor_array($test_tup1, $test_tup2) {\n    var $result = 0;\n    for (var i = 0; i < $test_tup1.length; i++) {\n        $result = $result ^ $test_tup1[i];\n    }\n    for (var i = 0; i < $test_tup2.length; i++) {\n        $result = $result ^ $test_tup2[i];\n    }\n    return $result;\n}\n\n// Write a function to perform the mathematical bitwise xor operation across the given arrays.\nfunction bitwise_xor_array_array($test_tup1, $test_tup2) {\n    var $result = 0;\n    for (var i = 0; i < $test_tup1.length; i++) {\n        $result = $result ^ $test_tup1[i];\n    }\n    for (var i = 0; i < $test_tup2.length; i++) {\n        $result = $result ^ $test_tup2[i];\n    }\n    return $result;\n}\n\n// Write a function to perform the mathematical bitwise xor operation across the given arrays.\nfunction bitwise_xor_array_array_array($test_tup1, $test_tup2) {\n    var $result = 0;\n    for (var i = 0; i < $test_tup1\n",
        "test_list": [
            "function candidate(...$args) {",
            "return bitwise_xor(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 4, 6, 9), array(5, 2, 3, 3)) !== array(15, 6, 5, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 5, 7, 10), array(6, 3, 4, 4)) !== array(13, 6, 3, 14)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 6, 8, 11), array(7, 4, 5, 6)) !== array(11, 2, 13, 13)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a phpthon function to identify non-prime numbers.",
        "code": "<?php\nfunction is_not_prime($n) {\n    var n = $n;\n    var i = 0;\n    while (i < $n) {\n        if ($n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\n// Write a phpthon function to identify prime numbers.\nfunction is_prime($n) {\n    var n = $n;\n    var i = 0;\n    while (i < $n) {\n        if ($n % i === 0) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\n// Write a phpthon function to identify non-prime numbers.\nfunction is_not_prime_n($n) {\n    var n = $n;\n    var i = 0;\n    while (i < $n) {\n        if ($n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\n// Write a phpthon function to identify prime numbers.\nfunction is_prime_n($n) {\n    var n = $n;\n    var i = 0;\n    while (i < $n) {\n        if ($n % i === 0) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\n// Write a phpthon function to identify non-prime numbers.\nfunction is_not_prime_p($n) {\n    var n = $n;\n    var i = 0;\n    while (i < $n) {\n        if ($n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\n// Write a phpthon function to identify prime numbers.\nfunction is_prime_p($n) {\n    var n = $n;\n    var i = 0;\n    while (i < $n) {\n        if ($n % i === 0) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\n// Write a\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_not_prime(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(35) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(37) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique arrays in the given array.",
        "code": "<?php\nfunction extract_freq($test_list) {\n  var $test_list_length = $test_list.length;\n  var $test_list_array = [];\n  for (var i = 0; i < $test_list_length; i++) {\n    $test_list_array.push($test_list[i]);\n  }\n  return $test_list_array.length;\n}\n\n// Write a function to extract the number of unique arrays in the given array.\nfunction extract_unique($test_list) {\n  var $test_list_length = $test_list.length;\n  var $test_list_array = [];\n  for (var i = 0; i < $test_list_length; i++) {\n    $test_list_array.push($test_list[i]);\n  }\n  return $test_list_array.length;\n}\n\n// Write a function to extract the number of unique arrays in the given array.\nfunction extract_unique_array($test_list) {\n  var $test_list_length = $test_list.length;\n  var $test_list_array = [];\n  for (var i = 0; i < $test_list_length; i++) {\n    $test_list_array.push($test_list[i]);\n  }\n  return $test_list_array.length;\n}\n\n// Write a function to extract the number of unique arrays in the given array.\nfunction extract_unique_array_array($test_list) {\n  var $test_list_length = $test_list.length;\n  var $test_list_array = [];\n  for (var i = 0; i < $test_list_length; i++) {\n    $test_list_array.push($test_list[i]);\n  }\n  return $test_list_array.length;\n}\n\n// Write a function to extract the number of unique arrays in the given array.\nfunction extract_unique_array_array_array($test_list) {\n  var $test_list_length = $test_list.length;\n  var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_freq(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(3, 4), array(1, 2), array(4, 3), array(5, 6))) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(4, 15), array(2, 3), array(5, 4), array(6, 7))) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(5, 16), array(2, 3), array(6, 5), array(6, 9))) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of array elements in the given two nested arrays.",
        "code": "<?php\nfunction add_nested_tuples($test_tup1, $test_tup2) {\n    $test_tup1.push($test_tup2);\n    $test_tup2.push($test_tup1);\n}\n\n// Write a function to perform index wise subtraction of array elements in the given two nested arrays.\nfunction subtract_nested_tuples($test_tup1, $test_tup2) {\n    $test_tup1.pop();\n    $test_tup2.pop();\n}\n\n// Write a function to perform index wise multiplication of array elements in the given two nested arrays.\nfunction multiply_nested_tuples($test_tup1, $test_tup2) {\n    $test_tup1.push($test_tup2);\n    $test_tup2.push($test_tup1);\n}\n\n// Write a function to perform index wise division of array elements in the given two nested arrays.\nfunction divide_nested_tuples($test_tup1, $test_tup2) {\n    $test_tup1.pop();\n    $test_tup2.pop();\n}\n\n// Write a function to perform index wise addition of array elements in the given two nested arrays.\nfunction add_nested_arrays($test_arr1, $test_arr2) {\n    $test_arr1.push($test_arr2);\n    $test_arr2.push($test_arr1);\n}\n\n// Write a function to perform index wise subtraction of array elements in the given two nested arrays.\nfunction subtract_nested_arrays($test_arr1, $test_arr2) {\n    $test_arr1.pop();\n    $test_arr2.pop();\n}\n\n// Write a function to perform index wise multiplication of array elements in the given two nested arrays.\nfunction multiply_nested_arrays($test_arr1, $test_arr2) {\n    $test_arr1.push($test_arr2);\n    $test_arr2.push($test\n",
        "test_list": [
            "function candidate(...$args) {",
            "return add_nested_tuples(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 3), array(4, 5), array(2, 9), array(1, 10)), array(array(6, 7), array(3, 9), array(1, 1), array(7, 3))) !== array(array(7, 10), array(7, 14), array(3, 10), array(8, 13))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 4), array(5, 6), array(3, 10), array(2, 11)), array(array(7, 8), array(4, 10), array(2, 2), array(8, 4))) !== array(array(9, 12), array(9, 16), array(5, 12), array(10, 15))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 5), array(6, 7), array(4, 11), array(3, 12)), array(array(8, 9), array(5, 11), array(3, 3), array(9, 5))) !== array(array(11, 14), array(11, 18), array(7, 14), array(12, 17))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a phpthon function to find the minimum of two numbers.",
        "code": "<?php\nfunction minimum($a, $b) {\n  return $a < $b? $a : $b;\n}\n\n// Write a phpthon function to find the maximum of two numbers.\nfunction maximum($a, $b) {\n  return $a > $b? $a : $b;\n}\n\n// Write a phpthon function to find the sum of two numbers.\nfunction sum($a, $b) {\n  return $a + $b;\n}\n\n// Write a phpthon function to find the product of two numbers.\nfunction product($a, $b) {\n  return $a * $b;\n}\n\n// Write a phpthon function to find the quotient of two numbers.\nfunction quotient($a, $b) {\n  return $a / $b;\n}\n\n// Write a phpthon function to find the remainder of two numbers.\nfunction remainder($a, $b) {\n  return $a % $b;\n}\n\n// Write a phpthon function to find the power of two.\nfunction power($a) {\n  return $a & 1;\n}\n\n// Write a phpthon function to find the bitwise AND of two numbers.\nfunction bitwise_and($a, $b) {\n  return $a & $b;\n}\n\n// Write a phpthon function to find the bitwise OR of two numbers.\nfunction bitwise_or($a, $b) {\n  return $a | $b;\n}\n\n// Write a phpthon function to find the bitwise XOR of two numbers.\nfunction bitwise_xor($a, $b) {\n  return $a ^ $b;\n}\n\n// Write a phpthon function to find the bitwise NOT of two numbers.\nfunction bitwise_not($a) {\n  return ~$a;\n}\n\n// Write a phpthon function to find the bitwise NOT of two numbers.\nfunction bitwise_not($a) {\n  return ~$a;\n}\n\n// Write a phpthon function to find the bitwise AND of two numbers.\nfunction bitwise_and($a, $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return minimum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1, 2) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(-5, -4) !== -5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within an array.",
        "code": "<?php\nfunction check_tuplex($tuplex, $tuple1) {\n  var $tuple2 = $tuple1.split(',');\n  var $tuple3 = $tuple2.shift();\n  var $tuple4 = $tuple2.shift();\n  var $tuple5 = $tuple2.shift();\n  var $tuple6 = $tuple2.shift();\n  var $tuple7 = $tuple2.shift();\n  var $tuple8 = $tuple2.shift();\n  var $tuple9 = $tuple2.shift();\n  var $tuple10 = $tuple2.shift();\n  var $tuple11 = $tuple2.shift();\n  var $tuple12 = $tuple2.shift();\n  var $tuple13 = $tuple2.shift();\n  var $tuple14 = $tuple2.shift();\n  var $tuple15 = $tuple2.shift();\n  var $tuple16 = $tuple2.shift();\n  var $tuple17 = $tuple2.shift();\n  var $tuple18 = $tuple2.shift();\n  var $tuple19 = $tuple2.shift();\n  var $tuple20 = $tuple2.shift();\n  var $tuple21 = $tuple2.shift();\n  var $tuple22 = $tuple2.shift();\n  var $tuple23 = $tuple2.shift();\n  var $tuple24 = $tuple2.shift();\n  var $tuple25 = $tuple2.shift();\n  var $tuple26 = $tuple2.shift();\n  var $tuple27 = $tuple2.shift();\n  var $tuple28 = $tuple2.shift();\n  var $tuple29 = $tuple2.shift();\n  var $tuple30 = $tuple2.shift();\n  var $tuple31 = $tuple2.shift();\n  var $tuple32 = $tuple2.shift();\n  var $tuple33 = $t\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_tuplex(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), \"r\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), \"5\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a phpthon function to find whether the parity of a given number is odd.",
        "code": "<?php\nfunction find_Parity($x) {\n    var $y = $x;\n    var $z = $y;\n    var $w = $y;\n    var $x = $y;\n    var $y = $z;\n    var $z = $w;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var $z = $x;\n    var $w = $y;\n    var $x = $z;\n    var $y = $w;\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Parity(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(12) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "<?php\nfunction rearrange_bigger($n) {\n    var $n_big = $n.toString();\n    var $n_big_big = $n_big.substring($n_big.length - 1);\n    var $n_big_big_big = $n_big_big.substring($n_big_big.length - 1);\n    return $n_big_big + $n_big_big_big;\n}\n\n// Write a function to create the next smaller number by rearranging the digits of a given number.\nfunction rearrange_smaller($n) {\n    var $n_small = $n.toString();\n    var $n_small_small = $n_small.substring($n_small.length - 1);\n    var $n_small_small_small = $n_small_small.substring($n_small_small.length - 1);\n    return $n_small_small + $n_small_small_small;\n}\n\n// Write a function to create the next larger number by rearranging the digits of a given number.\nfunction rearrange_larger($n) {\n    var $n_larger = $n.toString();\n    var $n_larger_larger = $n_larger.substring($n_larger.length - 1);\n    var $n_larger_larger_larger = $n_larger_larger.substring($n_larger_larger.length - 1);\n    return $n_larger_larger + $n_larger_larger_larger;\n}\n\n// Write a function to create the next smaller number by rearranging the digits of a given number.\nfunction rearrange_smaller_smaller($n) {\n    var $n_smaller = $n.toString();\n    var $n_smaller_small = $n_smaller.substring($n_smaller.length - 1);\n    var $n_smaller_small_small = $n_smaller_small.substring($n_smaller_small.length - 1);\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return rearrange_bigger(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(12) !== 21) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(102) !== 120) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "<?php\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n    let $nums1_len = $nums1.length;\n    let $nums2_len = $nums2.length;\n    let $k_len = $k;\n    let $k_len_max = $k_len - 1;\n    let $k_len_min = $k_len;\n    let $k_len_min_max = $k_len_min;\n    let $k_len_min_max_max = $k_len_min_max;\n    let $k_len_min_max_min = $k_len_min_max;\n    let $k_len_min_max_min_max = $k_len_min_max_max;\n    let $k_len_min_max_min_max_max = $k_len_min_max_max;\n    let $k_len_min_max_min_max_min = $k_len_min_max_min_max;\n    let $k_len_min_max_min_max_min_max = $k_len_min_max_min_max_max;\n    let $k_len_min_max_min_max_min_max_max = $k_len_min_max_min_max_max;\n    let $k_len_min_max_min_max_min_max_max = $k_len_min_max_min_max_max;\n    let $k_len_min_max_min_max_min_max_max = $k_len_min_max_min_max_max;\n    let $k_len_min_max_min_max_min_max_max = $k_len_min_max_min_max_max;\n    let $k_len_min_max_min_max_min_max_max = $k_len_min_max_min_max_max;\n    let $k_len_min\n",
        "test_list": [
            "function candidate(...$args) {",
            "return k_smallest_pairs(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of arrays within a given array.",
        "code": "<?php\nfunction min_product_tuple($list1) {\n    var $list2 = $list1.slice(0);\n    var $list3 = $list1.slice(0);\n    var $list4 = $list1.slice(0);\n    var $list5 = $list1.slice(0);\n    var $list6 = $list1.slice(0);\n    var $list7 = $list1.slice(0);\n    var $list8 = $list1.slice(0);\n    var $list9 = $list1.slice(0);\n    var $list10 = $list1.slice(0);\n    var $list11 = $list1.slice(0);\n    var $list12 = $list1.slice(0);\n    var $list13 = $list1.slice(0);\n    var $list14 = $list1.slice(0);\n    var $list15 = $list1.slice(0);\n    var $list16 = $list1.slice(0);\n    var $list17 = $list1.slice(0);\n    var $list18 = $list1.slice(0);\n    var $list19 = $list1.slice(0);\n    var $list20 = $list1.slice(0);\n    var $list21 = $list1.slice(0);\n    var $list22 = $list1.slice(0);\n    var $list23 = $list1.slice(0);\n    var $list24 = $list1.slice(0);\n    var $list25 = $list1.slice(0);\n    var $list26 = $list1.slice(0);\n    var $list27 = $list1.slice(0);\n    var $list28 = $list1.slice(0);\n    var $list29 = $list1.slice(0);\n    var $list30 = $list1.slice(0);\n    var $list31 = $list1.slice(0);\n    var $list32 = $list1.slice(0);\n    var $list33 = $list1.slice\n",
        "test_list": [
            "function candidate(...$args) {",
            "return min_product_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(2, 7), array(2, 6), array(1, 8), array(4, 9))) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(10, 20), array(15, 2), array(5, 10))) !== 30) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(11, 44), array(10, 15), array(20, 5), array(12, 9))) !== 100) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the minimum value in a given heterogeneous array.",
        "code": "<?php\nfunction min_val($listval) {\n    var min = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] < min) {\n            min = $listval[i];\n        }\n    }\n    return min;\n}\n\n// Write a function to find the maximum value in a given heterogeneous array.\nfunction max_val($listval) {\n    var max = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] > max) {\n            max = $listval[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to find the sum of the values in a given heterogeneous array.\nfunction sum_val($listval) {\n    var sum = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        sum += $listval[i];\n    }\n    return sum;\n}\n\n// Write a function to find the average value in a given heterogeneous array.\nfunction avg_val($listval) {\n    var avg = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        avg += $listval[i];\n    }\n    return avg / $listval.length;\n}\n\n// Write a function to find the median value in a given heterogeneous array.\nfunction median_val($listval) {\n    var median = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] > median) {\n            median = $listval[i];\n        }\n    }\n    return median;\n}\n\n// Write a function to find the minimum value in a given heterogeneous array.\nfunction min_val_array($listval) {\n    var min = 0;\n    for (var i = 0; i < $listval.length; i++) {\n        if ($listval[i] < min) {\n            min = $listval[\n",
        "test_list": [
            "function candidate(...$args) {",
            "return min_val(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Python\", 3, 2, 4, 5, \"version\")) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Python\", 15, 20, 25)) !== 15) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Python\", 30, 20, 40, 50, \"version\")) !== 20) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "<?php\nfunction snake_to_camel($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toUpperCase();\n    });\n}\n\n// Write a function to convert the given snake case string to camel case string.\nfunction camel_to_snake($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toLowerCase();\n    });\n}\n\n// Write a function to convert the given snake case string to camel case string.\nfunction snake_to_camel_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toLowerCase();\n    });\n}\n\n// Write a function to convert the given snake case string to camel case string.\nfunction camel_to_snake_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toUpperCase();\n    });\n}\n\n// Write a function to convert the given snake case string to camel case string.\nfunction snake_to_camel_case_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toLowerCase();\n    });\n}\n\n// Write a function to convert the given snake case string to camel case string.\nfunction snake_to_camel_case_case_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toUpperCase();\n    });\n}\n\n// Write a function to convert the given snake case string to camel case string.\nfunction snake_to_camel_case_case_case_case($word) {\n    return $word.replace(/([A-Z])/g, function(match, $1) {\n        return $1.toLowerCase();\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return snake_to_camel(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"android_tv\") !== \"AndroidTv\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"google_pixel\") !== \"GooglePixel\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"apple_watch\") !== \"AppleWatch\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a phpthon function to remove odd numbers from a given array.",
        "code": "<?php\nfunction remove_odd($l) {\n    var $r = $l.slice(0, $l.length - 1);\n    return $r;\n}\n\n// Write a phpthon function to remove a given element from a given array.\nfunction remove_element($l, $e) {\n    var $r = $l.slice(0, $l.indexOf($e));\n    return $r;\n}\n\n// Write a phpthon function to remove a given element from a given array.\nfunction remove_element_from_array($l, $e) {\n    var $r = $l.slice(0, $l.indexOf($e));\n    return $r;\n}\n\n// Write a phpthon function to remove a given element from a given array.\nfunction remove_element_from_array_from_index($l, $e, $i) {\n    var $r = $l.slice(0, $l.indexOf($e));\n    return $r;\n}\n\n// Write a phpthon function to remove a given element from a given array.\nfunction remove_element_from_array_from_index_from_index($l, $e, $i) {\n    var $r = $l.slice(0, $l.indexOf($e));\n    return $r;\n}\n\n// Write a phpthon function to remove a given element from a given array.\nfunction remove_element_from_array_from_index_from_index_from_index($l, $e, $i) {\n    var $r = $l.slice(0, $l.indexOf($e));\n    return $r;\n}\n\n// Write a phpthon function to remove a given element from a given array.\nfunction remove_element_from_array_from_index_from_index_from_index($l, $e, $i) {\n    var $r = $l.slice(0, $l.indexOf($e));\n    return $r;\n}\n\n// Write a phpthon function to remove a given element from a given array.\nfunction remove_element_from_array\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_odd(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== array(2)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 6)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, 3)) !== array(10, 20)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given array of arrays.",
        "code": "<?php\nfunction extract_nth_element($list1, $n) {\n    var $i = 0;\n    var $j = $list1.length;\n    while ($i < $j) {\n        if ($list1[$i] == $n) {\n            $i++;\n        } else {\n            $i++;\n        }\n    }\n    return $i;\n}\n\n// Write a function to extract the nth element from a given array of arrays.\nfunction extract_nth_element_from_array($list1, $n) {\n    var $i = 0;\n    var $j = $list1.length;\n    while ($i < $j) {\n        if ($list1[$i] == $n) {\n            return $i;\n        } else {\n            $i++;\n        }\n    }\n    return $i;\n}\n\n// Write a function to extract the nth element from a given array of arrays.\nfunction extract_nth_element_from_array_from_array($list1, $n) {\n    var $i = 0;\n    var $j = $list1.length;\n    while ($i < $j) {\n        if ($list1[$i] == $n) {\n            return $i;\n        } else {\n            $i++;\n        }\n    }\n    return $i;\n}\n\n// Write a function to extract the nth element from a given array of arrays.\nfunction extract_nth_element_from_array_from_array_from_array($list1, $n) {\n    var $i = 0;\n    var $j = $list1.length;\n    while ($i < $j) {\n        if ($list1[$i] == $n) {\n            return $i;\n        } else {\n            $i++;\n        }\n    }\n    return $i;\n}\n\n// Write a function to extract the nth element from a given array of arrays.\nfunction extract_nth_element_from_array_from_array_from_array($list1, $n) {\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_nth_element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 0) !== array(\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 2) !== array(99, 96, 94, 98)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 1) !== array(98, 97, 91, 94)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a phpthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "<?php\nfunction overlapping($list1, $list2) {\n    var $result = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] in $list2) {\n            $result.push($list1[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to check whether any value in a sequence exists in a sequence or not.\nfunction overlapping2($list1, $list2) {\n    var $result = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] in $list2) {\n            $result.push($list1[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to check whether any value in a sequence exists in a sequence or not.\nfunction overlapping3($list1, $list2) {\n    var $result = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] in $list2) {\n            $result.push($list1[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to check whether any value in a sequence exists in a sequence or not.\nfunction overlapping4($list1, $list2) {\n    var $result = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] in $list2) {\n            $result.push($list1[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to check whether any value in a sequence exists in a sequence or not.\nfunction overlapping5($list1, $list2) {\n    var $result = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] in $list2) {\n            $result.push($list1[i]);\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return overlapping(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5), array(6, 7, 8, 9)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3), array(4, 5, 6)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 4, 5), array(1, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a phpthon function to find a pair with highest product from a given array of integers.",
        "code": "<?php\nfunction max_Product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find a pair with the highest product from a given array of integers.\nfunction max_Product_2($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find a pair with the highest product from a given array of integers.\nfunction max_Product_3($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find a pair with the highest product from a given array of integers.\nfunction max_Product_4($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find a pair with the highest product from a given array of integers.\nfunction max_Product_5($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find a pair with the highest product from a given array of integers.\nfunction max_Product_6($arr) {\n    var max\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_Product(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 7, 0, 8, 4)) !== array(7, 8)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, -1, -2, -4, 5, 0, -6)) !== array(-4, -6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given array of arrays.",
        "code": "<?php\nfunction group_tuples($Input) {\n    var $Output = [];\n    var $InputLength = $Input.length;\n    for (var $i = 0; $i < $InputLength; $i++) {\n        var $a = $Input[$i];\n        if ($a.length > 1) {\n            $Output.push($a);\n        }\n    }\n    return $Output;\n}\n\n// Write a function to find common first element in given array of arrays.\nfunction group_tuples_with_index($Input) {\n    var $Output = [];\n    var $InputLength = $Input.length;\n    for (var $i = 0; $i < $InputLength; $i++) {\n        var $a = $Input[$i];\n        if ($a.length > 1) {\n            $Output.push($a);\n        }\n    }\n    return $Output;\n}\n\n// Write a function to find common first element in given array of arrays.\nfunction group_tuples_with_index_with_index($Input) {\n    var $Output = [];\n    var $InputLength = $Input.length;\n    for (var $i = 0; $i < $InputLength; $i++) {\n        var $a = $Input[$i];\n        if ($a.length > 1) {\n            $Output.push($a);\n        }\n    }\n    return $Output;\n}\n\n// Write a function to find common first element in given array of arrays.\nfunction group_tuples_with_index_with_index_with_index($Input) {\n    var $Output = [];\n    var $InputLength = $Input.length;\n    for (var $i = 0; $i < $InputLength; $i++) {\n        var $a = $Input[$i];\n        if ($a.length > 1) {\n            $Output.push($a);\n        }\n    }\n    return $Output;\n}\n\n// Write a function to find common first element in given array of arrays.\nfunction group_tuples_with_index_with_index_with_index\n",
        "test_list": [
            "function candidate(...$args) {",
            "return group_tuples(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"x\", \"y\"), array(\"x\", \"z\"), array(\"w\", \"t\"))) !== array(array(\"x\", \"y\", \"z\"), array(\"w\", \"t\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"a\", \"b\"), array(\"a\", \"c\"), array(\"d\", \"e\"))) !== array(array(\"a\", \"b\", \"c\"), array(\"d\", \"e\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"f\", \"g\"), array(\"f\", \"g\"), array(\"h\", \"i\"))) !== array(array(\"f\", \"g\", \"g\"), array(\"h\", \"i\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a phpthon function to find the element of an array having maximum length.",
        "code": "<?php\nfunction Find_Max($lst) {\n    var $max = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] > $max) {\n            $max = $lst[i];\n        }\n    }\n    return $max;\n}\n\n// Write a phpthon function to find the element of an array having minimum length.\nfunction Find_Min($lst) {\n    var $min = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] < $min) {\n            $min = $lst[i];\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the element of an array having maximum length.\nfunction Find_Max_Min($lst) {\n    var $max = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] > $max) {\n            $max = $lst[i];\n        }\n    }\n    return $max;\n}\n\n// Write a phpthon function to find the element of an array having minimum length.\nfunction Find_Min_Max($lst) {\n    var $min = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] < $min) {\n            $min = $lst[i];\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the element of an array having maximum length.\nfunction Find_Max_Min_Max($lst) {\n    var $max = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] > $max) {\n            $max = $lst[i];\n        }\n    }\n    return $max;\n}\n\n// Write a phpthon function to find the element of an array having minimum\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Find_Max(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"A\"), array(\"A\", \"B\"), array(\"A\", \"B\", \"C\"))) !== array(\"A\", \"B\", \"C\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1), array(1, 2), array(1, 2, 3))) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 1), array(1, 2, 3), array(1, 5, 6, 1))) !== array(1, 5, 6, 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.",
        "code": "<?php\nfunction round_and_sum($list1) {\n    var sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        sum += $list1[i];\n    }\n    return sum;\n}\n\n// Write a function to print the sum of the array of numbers.\nfunction sum_of_array($list1) {\n    var sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        sum += $list1[i];\n    }\n    return sum;\n}\n\n// Write a function to print the sum of the array of numbers.\nfunction sum_of_array_of_numbers($list1) {\n    var sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        sum += $list1[i];\n    }\n    return sum;\n}\n\n// Write a function to print the sum of the array of numbers.\nfunction sum_of_array_of_numbers_of_numbers($list1) {\n    var sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        sum += $list1[i];\n    }\n    return sum;\n}\n\n// Write a function to print the sum of the array of numbers.\nfunction sum_of_array_of_numbers_of_numbers_of_numbers($list1) {\n    var sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        sum += $list1[i];\n    }\n    return sum;\n}\n\n// Write a function to print the sum of the array of numbers.\nfunction sum_of_array_of_numbers_of_numbers_of_numbers($list1) {\n    var sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        sum += $list1[i];\n    }\n    return sum;\n}\n\n//\n",
        "test_list": [
            "function candidate(...$args) {",
            "return round_and_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5)) !== 243) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 2, 9, 24.3, 29)) !== 345) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(25.0, 56.7, 89.2)) !== 513) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a phpthon function to find the cube sum of first n even natural numbers.",
        "code": "<?php\nfunction cube_Sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the cube sum of the first n odd natural numbers.\nfunction cube_SumOdd($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the cube sum of the first n odd natural numbers.\nfunction cube_SumOddOdd($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the cube sum of the first n even natural numbers.\nfunction cube_SumEven($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the cube sum of the first n odd natural numbers.\nfunction cube_SumEvenOdd($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the cube sum of the first n even natural numbers.\nfunction cube_SumEvenOddEven($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the cube sum of the first n even natural numbers.\nfunction cube_SumEvenOddEven($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum\n",
        "test_list": [
            "function candidate(...$args) {",
            "return cube_Sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 72) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 288) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 800) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of array by the delimiter.",
        "code": "<?php\nfunction concatenate_tuple($test_tup) {\n  var $result = [];\n  for (var i = 0; i < $test_tup.length; i++) {\n    $result.push($test_tup[i]);\n  }\n  return $result;\n}\n\n// Write a function to concatenate each element of array by the delimiter.\nfunction concatenate_array($test_array) {\n  var $result = [];\n  for (var i = 0; i < $test_array.length; i++) {\n    $result.push($test_array[i]);\n  }\n  return $result;\n}\n\n// Write a function to concatenate each element of array by the delimiter.\nfunction concatenate_array_by_delimiter($test_array) {\n  var $result = [];\n  for (var i = 0; i < $test_array.length; i++) {\n    $result.push($test_array[i].substr(0, $test_array[i].length - 1));\n  }\n  return $result;\n}\n\n// Write a function to concatenate each element of array by the delimiter.\nfunction concatenate_array_by_delimiter_by_delimiter($test_array) {\n  var $result = [];\n  for (var i = 0; i < $test_array.length; i++) {\n    $result.push($test_array[i].substr(0, $test_array[i].length - 1));\n    $result.push($test_array[i].substr(0, $test_array[i].length - 1));\n  }\n  return $result;\n}\n\n// Write a function to concatenate each element of array by the delimiter.\nfunction concatenate_array_by_delimiter_by_delimiter($test_array) {\n  var $result = [];\n  for (var i = 0; i < $test_array.length; i++) {\n    $result.push($test_array[i].substr(0, $test\n",
        "test_list": [
            "function candidate(...$args) {",
            "return concatenate_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"ID\", \"is\", 4, \"UTS\")) !== \"ID-is-4-UTS\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"QWE\", \"is\", 4, \"RTY\")) !== \"QWE-is-4-RTY\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"ZEN\", \"is\", 4, \"OP\")) !== \"ZEN-is-4-OP\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a phpthon function to find the average of cubes of first n natural numbers.",
        "code": "<?php\nfunction find_Average_Of_Cube($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.floor(Math.random() * 10);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.floor(Math.random() * 10);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_3($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.floor(Math.random() * 10);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_4($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.floor(Math.random() * 10);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_5($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.floor(Math.random() * 10);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_6($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.floor(Math.random() * 10);\n    }\n    return sum;\n}\n\n//\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Average_Of_Cube(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 4.5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given array.",
        "code": "<?php\nfunction extract_rear($test_tuple) {\n    var $test_array = $test_tuple[0];\n    var $test_array_length = $test_array.length;\n    var $test_index = $test_array_length - 1;\n    var $test_index_element = $test_array[$test_index];\n    return $test_index_element;\n}\n\n// Write a function to extract only the front index element of each string in the given array.\nfunction extract_front($test_tuple) {\n    var $test_array = $test_tuple[0];\n    var $test_array_length = $test_array.length;\n    var $test_index = 0;\n    var $test_index_element = $test_array[$test_index];\n    return $test_index_element;\n}\n\n// Write a function to extract only the front index element of each string in the given array.\nfunction extract_front_index($test_tuple) {\n    var $test_array = $test_tuple[0];\n    var $test_array_length = $test_array.length;\n    var $test_index = $test_array_length - 1;\n    var $test_index_element = $test_array[$test_index];\n    return $test_index_element;\n}\n\n// Write a function to extract only the front index element of each string in the given array.\nfunction extract_front_index_element($test_tuple) {\n    var $test_array = $test_tuple[0];\n    var $test_array_length = $test_array.length;\n    var $test_index = $test_array_length - 1;\n    var $test_index_element = $test_array[$test_index];\n    return $test_index_element;\n}\n\n// Write a function to extract only the front index element of each string in the given array.\nfunction extract_front_index_element_index($test_tuple) {\n    var $test_array = $test_t\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_rear(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Mers\", \"for\", \"Vers\")) !== array(\"s\", \"r\", \"s\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Avenge\", \"for\", \"People\")) !== array(\"e\", \"r\", \"e\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Gotta\", \"get\", \"go\")) !== array(\"a\", \"t\", \"o\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of subarrays containing a particular element.",
        "code": "<?php\nfunction count_element_in_list($list1, $x) {\n  var $count = 0;\n  $list1.forEach($function(element) {\n    if ($x == element) {\n      $count++;\n    }\n  });\n  return $count;\n}\n\n// Write a function to count the number of subarrays containing a particular element.\nfunction count_element_in_list_with_count($list1, $x, $count) {\n  var $count = 0;\n  $list1.forEach($function(element) {\n    if ($x == element) {\n      $count++;\n    }\n  });\n  return $count;\n}\n\n// Write a function to count the number of subarrays containing a particular element.\nfunction count_element_in_list_with_count_with_count($list1, $x, $count, $count2) {\n  var $count = 0;\n  $list1.forEach($function(element) {\n    if ($x == element) {\n      $count++;\n    }\n  });\n  $count += $count2;\n  return $count;\n}\n\n// Write a function to count the number of subarrays containing a particular element.\nfunction count_element_in_list_with_count_with_count_with_count($list1, $x, $count, $count2, $count3) {\n  var $count = 0;\n  $list1.forEach($function(element) {\n    if ($x == element) {\n      $count++;\n    }\n  });\n  $count += $count2;\n  $count += $count3;\n  return $count;\n}\n\n// Write a function to count the number of subarrays containing a particular element.\nfunction count_element_in_list_with_count_with_count_with_count_with_count($list1, $x, $count, $count2, $count3, $count4) {\n  var $count = 0;\n  $list1.forEach($function(element) {\n    if ($x ==\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_element_in_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 3), array(5, 7), array(1, 11), array(1, 15, 7)), 1) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"A\", \"B\"), array(\"A\", \"C\"), array(\"A\", \"D\", \"E\"), array(\"B\", \"C\", \"D\")), \"A\") !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"A\", \"B\"), array(\"A\", \"C\"), array(\"A\", \"D\", \"E\"), array(\"B\", \"C\", \"D\")), \"E\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "<?php\nfunction filter_oddnumbers($nums) {\n  var oddnumbers = [];\n  for (var i = 0; i < $nums.length; i++) {\n    if ($nums[i] % 2 === 0) {\n      oddnumbers.push($nums[i]);\n    }\n  }\n  return oddnumbers;\n}\n\n// Write a function to filter even numbers.\nfunction filter_evennumbers($nums) {\n  var evennumbers = [];\n  for (var i = 0; i < $nums.length; i++) {\n    if ($nums[i] % 2 === 1) {\n      evennumbers.push($nums[i]);\n    }\n  }\n  return evennumbers;\n}\n\n// Write a function to filter all numbers.\nfunction filter_allnumbers($nums) {\n  var allnumbers = [];\n  for (var i = 0; i < $nums.length; i++) {\n    allnumbers.push($nums[i]);\n  }\n  return allnumbers;\n}\n\n// Write a function to filter all numbers.\nfunction filter_allnumbers_with_oddnumbers($nums) {\n  var allnumbers = [];\n  for (var i = 0; i < $nums.length; i++) {\n    if ($nums[i] % 2 === 1) {\n      allnumbers.push($nums[i]);\n    }\n  }\n  return allnumbers;\n}\n\n// Write a function to filter all numbers.\nfunction filter_allnumbers_with_evennumbers($nums) {\n  var allnumbers = [];\n  for (var i = 0; i < $nums.length; i++) {\n    if ($nums[i] % 2 === 0) {\n      allnumbers.push($nums[i]);\n    }\n  }\n  return allnumbers;\n}\n\n// Write a function to filter all numbers.\nfunction filter_allnumbers_with_allnumbers($nums) {\n  var allnumbers = [];\n  for (var i = 0; i\n",
        "test_list": [
            "function candidate(...$args) {",
            "return filter_oddnumbers(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(1, 3, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, 45, 67, 84, 93)) !== array(45, 67, 93)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 7, 9, 8, 6, 4, 3)) !== array(5, 7, 9, 3)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "<?php\nfunction change_date_format($dt) {\n    var $date = $dt.split('-');\n    var $date_year = $date[0];\n    var $date_month = $date[1];\n    var $date_day = $date[2];\n    var $date_hour = $date[3];\n    var $date_minute = $date[4];\n    var $date_second = $date[5];\n    var $date_year_month = $date_year + '-' + $date_month + '-' + $date_day;\n    return $date_year_month;\n}\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunction change_date_format_to_yyyymmdd($dt) {\n    var $date = $dt.split('-');\n    var $date_year = $date[0];\n    var $date_month = $date[1];\n    var $date_day = $date[2];\n    var $date_hour = $date[3];\n    var $date_minute = $date[4];\n    var $date_second = $date[5];\n    var $date_year_month = $date_year + '-' + $date_month + '-' + $date_day;\n    return $date_year_month;\n}\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunction change_date_format_to_yyyymmdd_to_ddddmmdd($dt) {\n    var $date = $dt.split('-');\n    var $date_year = $date[0];\n    var $date_month = $date[1];\n    var $date_day = $date[2];\n    var $date_hour = $date[3];\n    var $date_minute = $date[4];\n    var $date_second = $date[5];\n    var $date_year_month = $date_year\n",
        "test_list": [
            "function candidate(...$args) {",
            "return change_date_format(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"2026-01-02\") !== \"02-01-2026\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"2020-11-13\") !== \"13-11-2020\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"2021-04-26\") !== \"26-04-2021\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "<?php\nfunction shell_sort($my_list) {\n  var $tmp = [];\n  $tmp.push($my_list[0]);\n  for (var i = 1; i < $my_list.length; i++) {\n    $tmp.push($my_list[i]);\n    $tmp.sort();\n    $tmp.splice(i, 1);\n  }\n  return $tmp;\n}\n\n// Write a function to sort the given array by using merge sort.\nfunction merge_sort($my_list) {\n  var $tmp = [];\n  for (var i = 0; i < $my_list.length; i++) {\n    $tmp.push($my_list[i]);\n  }\n  $tmp.sort();\n  return $tmp;\n}\n\n// Write a function to sort the given array by using bubble sort.\nfunction bubble_sort($my_list) {\n  var $tmp = [];\n  for (var i = 0; i < $my_list.length; i++) {\n    $tmp.push($my_list[i]);\n  }\n  $tmp.sort();\n  return $tmp;\n}\n\n// Write a function to sort the given array by using insertion sort.\nfunction insertion_sort($my_list) {\n  var $tmp = [];\n  for (var i = 0; i < $my_list.length; i++) {\n    $tmp.push($my_list[i]);\n  }\n  $tmp.sort();\n  return $tmp;\n}\n\n// Write a function to sort the given array by using merge sort.\nfunction merge_sort_with_index($my_list, $index) {\n  var $tmp = [];\n  for (var i = 0; i < $my_list.length; i++) {\n    $tmp.push($my_list[i]);\n  }\n  $tmp.sort($index);\n  return $tmp;\n}\n\n// Write a function to sort the given array by using bubble sort.\nfunction bubble_sort_with_index($my_list, $index) {\n  var $tmp = [];\n  for (var i\n",
        "test_list": [
            "function candidate(...$args) {",
            "return shell_sort(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and arrays from the given two arrays.",
        "code": "<?php\nfunction and_tuples($test_tup1, $test_tup2) {\n  var $test_tup1_array = $test_tup1.split(',');\n  var $test_tup2_array = $test_tup2.split(',');\n  return {\n    $test_tup1_array: $test_tup1_array,\n    $test_tup2_array: $test_tup2_array\n  };\n}\n\n// Write a function to extract the elementwise and arrays from the given two arrays.\nfunction and_arrays($test_arr1, $test_arr2) {\n  var $test_arr1_array = $test_arr1.split(',');\n  var $test_arr2_array = $test_arr2.split(',');\n  return {\n    $test_arr1_array: $test_arr1_array,\n    $test_arr2_array: $test_arr2_array\n  };\n}\n\n// Write a function to extract the elementwise and arrays from the given two arrays.\nfunction and_arrays_with_tuples($test_arr1, $test_arr2) {\n  var $test_arr1_array = $test_arr1.split(',');\n  var $test_arr2_array = $test_arr2.split(',');\n  return {\n    $test_arr1_array: $test_arr1_array,\n    $test_arr2_array: $test_arr2_array\n  };\n}\n\n// Write a function to extract the elementwise and arrays from the given two arrays.\nfunction and_arrays_with_arrays($test_arr1, $test_arr2) {\n  var $test_arr1_array = $test_arr1.split(',');\n  var $test_arr2_array = $test_arr2.split(',');\n  return {\n    $test_arr1_array: $test_arr1_array,\n    $test_arr2_array: $test_arr2_array\n",
        "test_list": [
            "function candidate(...$args) {",
            "return and_tuples(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 4, 6, 9), array(5, 2, 3, 3)) !== array(0, 0, 2, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4), array(5, 6, 7, 8)) !== array(1, 2, 3, 0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(8, 9, 11, 12), array(7, 13, 14, 17)) !== array(0, 9, 10, 0)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "<?php\nfunction parabola_directrix($a, $b, $c) {\n  var $d = $a.substr($b.length);\n  var $e = $c.substr($b.length);\n  var $f = $d.substr($e.length);\n  var $g = $f.substr($e.length);\n  var $h = $g.substr($f.length);\n  var $i = $h.substr($g.length);\n  var $j = $i.substr($g.length);\n  var $k = $j.substr($i.length);\n  var $l = $k.substr($i.length);\n  var $m = $l.substr($i.length);\n  var $n = $m.substr($i.length);\n  var $o = $n.substr($i.length);\n  var $p = $o.substr($i.length);\n  var $q = $p.substr($i.length);\n  var $r = $q.substr($i.length);\n  var $s = $r.substr($i.length);\n  var $t = $s.substr($i.length);\n  var $u = $t.substr($i.length);\n  var $v = $u.substr($i.length);\n  var $w = $v.substr($i.length);\n  var $x = $w.substr($i.length);\n  var $y = $x.substr($i.length);\n  var $z = $y.substr($i.length);\n  var $A = $z.substr($i.length);\n  var $B = $A.substr($i.length);\n  var $C = $B.substr($i.length);\n  var $D = $C.substr($i.length);\n  var $E = $D.substr($i.length);\n  var $F = $E.substr($i.length);\n  var $G = $F.substr($\n",
        "test_list": [
            "function candidate(...$args) {",
            "return parabola_directrix(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5, 3, 2) !== -198) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9, 8, 4) !== -2336) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2, 4, 6) !== -130) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two arrays and returns true if they have at least one common element.",
        "code": "<?php\nfunction common_element($list1, $list2) {\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = 0;\n    var $m = 0;\n    var $n = 0;\n    var $o = 0;\n    var $p = 0;\n    var $q = 0;\n    var $r = 0;\n    var $s = 0;\n    var $t = 0;\n    var $u = 0;\n    var $v = 0;\n    var $w = 0;\n    var $x = 0;\n    var $y = 0;\n    var $z = 0;\n    var $A = 0;\n    var $B = 0;\n    var $C = 0;\n    var $D = 0;\n    var $E = 0;\n    var $F = 0;\n    var $G = 0;\n    var $H = 0;\n    var $I = 0;\n    var $J = 0;\n    var $K = 0;\n    var $L = 0;\n    var $M = 0;\n    var $N = 0;\n    var $O = 0;\n    var $P = 0;\n    var $Q = 0;\n    var $R = 0;\n    var $S = 0;\n    var $T = 0;\n    var $U = 0;\n    var $V = 0;\n    var $W = 0;\n    var $X = 0;\n    var $Y = 0;\n    var $Z = 0;\n    var $AA = 0;\n    var $AB = 0;\n    var $AC = 0;\n    var $AD = 0;\n    var $AE = 0;\n    var $AF = 0;\n    var $AG = 0;\n    var $AH = 0;\n    var $AI = 0;\n    var $JI = 0;\n    var $KJ = 0;\n    var $LI = 0;\n    var $LJ = 0;\n    var $MII = 0;\n    var $MJJ =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return common_element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5), array(5, 6, 7, 8, 9)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5), array(6, 7, 8, 9)) !== null) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\", \"b\", \"c\"), array(\"d\", \"b\", \"e\")) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "<?php\nfunction median_trapezium($base1, $base2, $height) {\n  var $median = $base1 + $base2;\n  var $median_length = $height - $base1 - $base2;\n  return $median / $median_length;\n}\n\n// Write a function to find the median length of a trapezium.\nfunction median_trapezium_length($base1, $base2, $height) {\n  var $median_length = $height - $base1 - $base2;\n  return $median_length;\n}\n\n// Write a function to find the median length of a trapezium.\nfunction median_trapezium_length_height($base1, $base2, $height) {\n  var $median_length = $height - $base1 - $base2;\n  return $median_length;\n}\n\n// Write a function to find the median length of a trapezium.\nfunction median_trapezium_length_height_height($base1, $base2, $height) {\n  var $median_length = $height - $base1 - $base2;\n  return $median_length;\n}\n\n// Write a function to find the median length of a trapezium.\nfunction median_trapezium_length_height_height_height($base1, $base2, $height) {\n  var $median_length = $height - $base1 - $base2;\n  return $median_length;\n}\n\n// Write a function to find the median length of a trapezium.\nfunction median_trapezium_length_height_height_height($base1, $base2, $height) {\n  var $median_length = $height - $base1 - $base2;\n  return $median_length;\n}\n\n// Write a function to find the median length of a trapezium.\nfunction median_trapezium_length_height_height_height($base1, $base2, $height) {\n  var $median_length = $height - $base1 - $base\n",
        "test_list": [
            "function candidate(...$args) {",
            "return median_trapezium(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(15, 25, 35) !== 20) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10, 20, 30) !== 15) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6, 9, 4) !== 7.5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "<?php\nfunction check_greater($arr, $number) {\n    var $index = $arr.indexOf($number);\n    if ($index < 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check whether the entered number is less than the elements of the given array.\nfunction check_less($arr, $number) {\n    var $index = $arr.indexOf($number);\n    if ($index > 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check whether the entered number is greater than or equal to the elements of the given array.\nfunction check_greater_or_equal($arr, $number) {\n    var $index = $arr.indexOf($number);\n    if ($index < 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check whether the entered number is less than or equal to the elements of the given array.\nfunction check_less_or_equal($arr, $number) {\n    var $index = $arr.indexOf($number);\n    if ($index > 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunction check_greater_or_equal_array($arr, $number) {\n    var $index = $arr.indexOf($number);\n    if ($index < 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check whether the entered number is greater than or equal to the elements of the given array.\nfunction check_greater_or_equal_array_array($arr, $number) {\n    var $index = $arr.indexOf($number);\n    if ($index < 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunction check_greater_or_equal_array_array_array($arr, $number)\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_greater(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5), 4) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 4, 5, 6), 8) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(9, 7, 4, 8, 6, 1), 11) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "<?php\nfunction text_match_one($text) {\n    var $match = $text.match(/^(.*?)\\1$/);\n    return $match? $match[1] : $text;\n}\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_all($text) {\n    var $match = $text.match(/^(.*?)\\1$/);\n    return $match? $match[1] : $text;\n}\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_all_with_case($text) {\n    var $match = $text.match(/^(.*?)\\1$/);\n    return $match? $match[1] : $text;\n}\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_all_with_case_with_case($text) {\n    var $match = $text.match(/^(.*?)\\1$/);\n    return $match? $match[1] : $text;\n}\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_all_with_case_with_case_with_case($text) {\n    var $match = $text.match(/^(.*?)\\1$/);\n    return $match? $match[1] : $text;\n}\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_all_with_case_with_case_with_case($text) {\n    var $match = $text.match(/^(.*?)\\1$/);\n    return $match? $match[1] : $text;\n}\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_all_with_case_with_case_with_case($text) {\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_match_one(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abba\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a phpthon function to find the last digit of a given number.",
        "code": "<?php\nfunction last_Digit($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length > 1? $digit : 0;\n}\n\n// Write a phpthon function to find the first digit of a given number.\nfunction first_Digit($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length > 1? $digit : 0;\n}\n\n// Write a phpthon function to find the last digit of a given number.\nfunction last_Digit_of_Number($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length > 1? $digit : 0;\n}\n\n// Write a phpthon function to find the first digit of a given number.\nfunction first_Digit_of_Number($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length > 1? $digit : 0;\n}\n\n// Write a phpthon function to find the last digit of a given number.\nfunction last_Digit_of_Number_of_Number($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length > 1? $digit : 0;\n}\n\n// Write a phpthon function to find the first digit of a given number.\nfunction first_Digit_of_Number_of_Number($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length > 1? $digit : 0;\n}\n\n// Write a phpthon function to find the last digit of a given number.\nfunction last_Digit_of_Number_of_Number($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length > 1? $digit : 0;\n}\n\n// Write a phpthon function to find the first digit of a given number.\nfunction first_Dig\n",
        "test_list": [
            "function candidate(...$args) {",
            "return last_Digit(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(123) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(25) !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(30) !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a phpthon function to return the negative numbers in an array.",
        "code": "<?php\nfunction neg_nos($list1) {\n\t$list1 = $list1.split(',');\n\t$list1.forEach(function(item) {\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace(/^\\s+/,'');\n\t\titem = item.replace(/\\s+$/,'');\n\t\titem = item.replace\n",
        "test_list": [
            "function candidate(...$args) {",
            "return neg_nos(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(-1, 4, 5, -6)) !== array(-1, -6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-1, -2, 3, 4)) !== array(-1, -2)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-7, -6, 8, 9)) !== array(-7, -6)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "<?php\nfunction remove_odd($str1) {\n    var $str2 = $str1.replace(/[^a-zA-Z0-9]/g, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction remove_char($str1, $char) {\n    var $str2 = $str1.replace($char, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction remove_char_from_string($str1, $char) {\n    var $str2 = $str1.replace($char, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction remove_char_from_string_from_string($str1, $char) {\n    var $str2 = $str1.replace($char, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction remove_char_from_string_from_string_from_string($str1, $char) {\n    var $str2 = $str1.replace($char, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction remove_char_from_string_from_string_from_string($str1, $char) {\n    var $str2 = $str1.replace($char, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction remove_char_from_string_from_string_from_string($str1, $char) {\n    var $str2 = $str1.replace($char, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction remove_char_from_string_from_string_from_string($str1, $char) {\n    var $str2 = $str1.replace($char, '');\n    return $str2;\n}\n\n// Write a function to remove a character from a string.\nfunction\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_odd(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python\") !== \"yhn\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"program\") !== \"rga\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"language\") !== \"agae\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional array pairs.",
        "code": "<?php\nfunction count_bidirectional($test_list) {\n  var $test_list_length = $test_list.length;\n  var $test_list_index = 0;\n  var $test_list_array = [];\n  var $test_list_array_length = 0;\n  var $test_list_array_index = 0;\n  var $test_list_array_array = [];\n  var $test_list_array_array_length = 0;\n  var $test_list_array_array_index = 0;\n  var $test_list_array_array_array = [];\n  var $test_list_array_array_array_length = 0;\n  var $test_list_array_array_array_index = 0;\n  var $test_list_array_array_array_array = [];\n  var $test_list_array_array_array_array_length = 0;\n  var $test_list_array_array_array_array_index = 0;\n  var $test_list_array_array_array_array_array = [];\n  var $test_list_array_array_array_array_array_length = 0;\n  var $test_list_array_array_array_array_array_index = 0;\n  var $test_list_array_array_array_array_array_array = [];\n  var $test_list_array_array_array_array_array_array_length = 0;\n  var $test_list_array_array_array_array_array_array_index = 0;\n  var $test_list_array_array_array_array_array_array_array = [];\n  var $test_list_array_array_array_array_array_array_array_length = 0;\n  var $test_list_array_array_array_array_array_array_array_index = 0;\n  var $test_list_array_array_array_array_array_array_array_array = [];\n  var $test_list_array_array_array_array_array_array_array_array_length = 0;\n  var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_bidirectional(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(5, 6), array(1, 2), array(6, 5), array(9, 1), array(6, 5), array(2, 1))) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(5, 6), array(1, 3), array(6, 5), array(9, 1), array(6, 5), array(2, 1))) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(5, 6), array(1, 2), array(6, 5), array(9, 2), array(6, 5), array(2, 1))) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join an array of multiple integers into a single integer.",
        "code": "<?php\nfunction multiple_to_single($L) {\n    var $a = $L;\n    var $r = 0;\n    while ($a.length > 0) {\n        $r = $r * 10 + $a.shift();\n    }\n    return $r;\n}\n\n// Write a function to join an array of multiple integers into a single integer.\nfunction multiple_to_single_array($L) {\n    var $a = $L;\n    var $r = 0;\n    while ($a.length > 0) {\n        $r = $r * 10 + $a.shift();\n    }\n    return $r;\n}\n\n// Write a function to join an array of multiple integers into a single integer.\nfunction multiple_to_single_array_array($L) {\n    var $a = $L;\n    var $r = 0;\n    while ($a.length > 0) {\n        $r = $r * 10 + $a.shift();\n    }\n    return $r;\n}\n\n// Write a function to join an array of multiple integers into a single integer.\nfunction multiple_to_single_array_array_array($L) {\n    var $a = $L;\n    var $r = 0;\n    while ($a.length > 0) {\n        $r = $r * 10 + $a.shift();\n    }\n    return $r;\n}\n\n// Write a function to join an array of multiple integers into a single integer.\nfunction multiple_to_single_array_array_array_array($L) {\n    var $a = $L;\n    var $r = 0;\n    while ($a.length > 0) {\n        $r = $r * 10 + $a.shift();\n    }\n    return $r;\n}\n\n// Write a function to join an array of multiple integers into a single integer.\nfunction multiple_to_single_array_array_array_array_array($L) {\n    var $a = $L;\n    var $r = 0;\n    while ($a.length > 0) {\n        $r = $r * 10\n",
        "test_list": [
            "function candidate(...$args) {",
            "return multiple_to_single(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(11, 33, 50)) !== 113350) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-1, 2, 3, 4, 5, 6)) !== -123456) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 15, 20, 25)) !== 10152025) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "<?php\nfunction find_adverb_position($text) {\n    var $first = $text.find(':first-of-type');\n    var $last = $text.find(':last-of-type');\n    var $adverb = $first.find(':first-of-type');\n    var $pos = $adverb.position();\n    return {\n        first: $first.position(),\n        last: $last.position(),\n        adverb: $adverb.position()\n    };\n}\n\n// Find the first adverb and its position in a given sentence.\nfunction find_adverb_position_and_pos($text) {\n    var $first = $text.find(':first-of-type');\n    var $last = $text.find(':last-of-type');\n    var $adverb = $first.find(':first-of-type');\n    var $pos = $adverb.position();\n    return {\n        first: $first.position(),\n        last: $last.position(),\n        adverb: $adverb.position()\n    };\n}\n\n// Find the first adverb and its position in a given sentence.\nfunction find_adverb_position_and_pos_and_pos($text) {\n    var $first = $text.find(':first-of-type');\n    var $last = $text.find(':last-of-type');\n    var $adverb = $first.find(':first-of-type');\n    var $pos = $adverb.position();\n    var $pos_and_pos = $adverb.position();\n    return {\n        first: $first.position(),\n        last: $last.position(),\n        adverb: $adverb.position(),\n        pos: $pos\n    };\n}\n\n// Find the first adverb and its position in a given sentence.\nfunction find_adverb_position_and_pos_and_pos_and_pos($text) {\n    var $first = $text.find(':first-of-type');\n    var $last = $text.find(':last-of-\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_adverb_position(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"clearly!! we can see the sky\") !== array(0, 7, \"clearly\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"seriously!! there are many roses\") !== array(0, 9, \"seriously\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"unfortunately!! sita is going to home\") !== array(0, 13, \"unfortunately\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "<?php\nfunction surfacearea_cube($l) {\n  var $l = $l.toLowerCase();\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.replace(/[^a-z]/g, '');\n  var $l = $l.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return surfacearea_cube(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== 150) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 54) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 600) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "<?php\nfunction positive_count($nums) {\n    var count = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to find the ratio of a number to its closest positive number.\nfunction closest_positive($nums) {\n    var count = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to find the ratio of a number to its closest negative number.\nfunction closest_negative($nums) {\n    var count = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to find the ratio of a number to its closest positive number.\nfunction closest_positive_count($nums) {\n    var count = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to find the ratio of a number to its closest negative number.\nfunction closest_negative_count($nums) {\n    var count = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a function to find the ratio of a number to its closest positive number.\nfunction closest_positive_count_count($nums) {\n    var count = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > 0) {\n            count++;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return positive_count(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)) !== 0.54) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)) !== 0.69) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, -6, -9, 11, -12, 14, -5, 17)) !== 0.56) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a phpthon function to find the largest negative number from the given array.",
        "code": "<?php\nfunction largest_neg($list1) {\n    var max_value = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] < 0) {\n            max_value = $list1[i];\n        }\n    }\n    return max_value;\n}\n\n// Write a phpthon function to find the smallest positive number from the given array.\nfunction smallest_pos($list1) {\n    var min_value = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] > 0) {\n            min_value = $list1[i];\n        }\n    }\n    return min_value;\n}\n\n// Write a phpthon function to find the smallest positive number from the given array.\nfunction smallest_neg($list1) {\n    var min_value = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] < 0) {\n            min_value = $list1[i];\n        }\n    }\n    return min_value;\n}\n\n// Write a phpthon function to find the smallest positive number from the given array.\nfunction smallest_pos_neg($list1) {\n    var min_value = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] < 0) {\n            min_value = $list1[i];\n        }\n    }\n    return min_value;\n}\n\n// Write a phpthon function to find the smallest positive number from the given array.\nfunction smallest_pos_neg_neg($list1) {\n    var min_value = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] < 0) {\n            min_value = $list1[i];\n        }\n    }\n    return min_value;\n}\n\n// Write a phpthon function to\n",
        "test_list": [
            "function candidate(...$args) {",
            "return largest_neg(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, -4, -6)) !== -6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, -8, -9)) !== -9) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, -1)) !== -1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each array by k in the given arrays.",
        "code": "<?php\nfunction trim_tuple($test_list, $K) {\n  var $tuple = {};\n  for (var i = 0; i < $test_list.length; i++) {\n    $tuple[$test_list[i]] = $K;\n  }\n  return $tuple;\n}\n\n// Write a function to trim each array by k in the given arrays.\nfunction trim_array($test_list, $K) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_list[i]);\n  }\n  return $array;\n}\n\n// Write a function to trim each array by k in the given arrays.\nfunction trim_array_by_k($test_list, $K) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_list[i].$K);\n  }\n  return $array;\n}\n\n// Write a function to trim each array by k in the given arrays.\nfunction trim_array_by_k_array($test_list, $K) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_list[i].$K);\n  }\n  return $array;\n}\n\n// Write a function to trim each array by k in the given arrays.\nfunction trim_array_by_k_array_by_k($test_list, $K) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_list[i].$K);\n  }\n  return $array;\n}\n\n// Write a function to trim each array by k in the given arrays.\nfunction trim_array_by_k_array_by_k_array($test_list, $K) {\n  var $array = [];\n  for (var i = 0;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return trim_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(5, 3, 2, 1, 4), array(3, 4, 9, 2, 1), array(9, 1, 2, 3, 5), array(4, 8, 2, 1, 7)), 2) !== array(array(2), array(9), array(2), array(2))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(5, 3, 2, 1, 4), array(3, 4, 9, 2, 1), array(9, 1, 2, 3, 5), array(4, 8, 2, 1, 7)), 1) !== array(array(3, 2, 1), array(4, 9, 2), array(1, 2, 3), array(8, 2, 1))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(7, 8, 4, 9), array(11, 8, 12, 4), array(4, 1, 7, 8), array(3, 6, 9, 7)), 1) !== array(array(8, 4), array(8, 12), array(1, 7), array(6, 9))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of array elements in the given two arrays.",
        "code": "<?php\nfunction index_multiplication($test_tup1, $test_tup2) {\n    $test_tup1[0] = $test_tup1[1] * $test_tup2[0];\n    $test_tup1[1] = $test_tup1[1] * $test_tup2[1];\n    return $test_tup1;\n}\n\n// Write a function to perform index wise division of array elements in the given two arrays.\nfunction index_division($test_tup1, $test_tup2) {\n    $test_tup1[0] = $test_tup1[1] / $test_tup2[0];\n    $test_tup1[1] = $test_tup1[1] / $test_tup2[1];\n    return $test_tup1;\n}\n\n// Write a function to perform index wise multiplication of array elements in the given two arrays.\nfunction index_multiplication_with_index($test_tup1, $test_tup2, $index) {\n    $test_tup1[0] = $test_tup1[1] * $test_tup2[0] + $test_tup1[0];\n    $test_tup1[1] = $test_tup1[1] * $test_tup2[1] + $test_tup1[1];\n    return $test_tup1;\n}\n\n// Write a function to perform index wise division of array elements in the given two arrays.\nfunction index_division_with_index($test_tup1, $test_tup2, $index) {\n    $test_tup1[0] = $test_tup1[1] / $test_tup2[0] + $test_tup1[0];\n    $test_tup1[1] = $test_tup1[1] / $test_tup2[1] + $test_tup1[1];\n    return $test_tup1;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return index_multiplication(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 3), array(4, 5), array(2, 9), array(1, 10)), array(array(6, 7), array(3, 9), array(1, 1), array(7, 3))) !== array(array(6, 21), array(12, 45), array(2, 9), array(7, 30))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 4), array(5, 6), array(3, 10), array(2, 11)), array(array(7, 8), array(4, 10), array(2, 2), array(8, 4))) !== array(array(14, 32), array(20, 60), array(6, 20), array(16, 44))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 5), array(6, 7), array(4, 11), array(3, 12)), array(array(8, 9), array(5, 11), array(3, 3), array(9, 5))) !== array(array(24, 45), array(30, 77), array(12, 33), array(27, 60))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a phpthon function to count the occurence of all elements of array in an array.",
        "code": "<?php\nfunction count_Occurrence($tup, $lst) {\n    var $count = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($tup[i] == $lst[i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a phpthon function to count the occurence of all elements of array in an array.\nfunction count_Occurrence_Array($tup, $lst) {\n    var $count = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($tup[i] == $lst[i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a phpthon function to count the occurence of all elements of array in an array.\nfunction count_Occurrence_Array_Array($tup, $lst) {\n    var $count = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($tup[i] == $lst[i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a phpthon function to count the occurence of all elements of array in an array.\nfunction count_Occurrence_Array_Array($tup, $lst) {\n    var $count = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($tup[i] == $lst[i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a phpthon function to count the occurence of all elements of array in an array.\nfunction count_Occurrence_Array_Array($tup, $lst) {\n    var $count = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($tup[i] == $lst[i]) {\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_Occurrence(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"a\", \"a\", \"c\", \"b\", \"d\"), array(\"a\", \"b\")) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 1, 4, 6, 7, 1, 4), array(1, 4, 7)) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6), array(1, 2)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in an array.",
        "code": "<?php\nfunction cube_nums($nums) {\n  var $cubes = [];\n  for (var i = 0; i < $nums.length; i++) {\n    $cubes.push([]);\n    for (var j = 0; j < $nums[i].length; j++) {\n      $cubes[i].push($nums[i][j]);\n    }\n  }\n  return $cubes;\n}\n\n// Write a function to find the number of elements in an array.\nfunction num_nums($nums) {\n  var $num_cubes = [];\n  for (var i = 0; i < $nums.length; i++) {\n    $num_cubes.push(0);\n    for (var j = 0; j < $nums[i].length; j++) {\n      $num_cubes[i] += $nums[i][j];\n    }\n  }\n  return $num_cubes;\n}\n\n// Write a function to find the number of elements in an array.\nfunction num_nums_array($nums) {\n  var $num_cubes = [];\n  for (var i = 0; i < $nums.length; i++) {\n    $num_cubes.push(0);\n    for (var j = 0; j < $nums[i].length; j++) {\n      $num_cubes[i] += $nums[i][j];\n    }\n  }\n  return $num_cubes;\n}\n\n// Write a function to find the number of elements in an array.\nfunction num_nums_array_array($nums) {\n  var $num_cubes = [];\n  for (var i = 0; i < $nums.length; i++) {\n    $num_cubes.push(0);\n    for (var j = 0; j < $nums[i].length; j++) {\n      $num_cubes[i] += $nums[i][j];\n    }\n  }\n  return $num_cubes;\n}\n\n// Write a\n",
        "test_list": [
            "function candidate(...$args) {",
            "return cube_nums(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, 30)) !== array(1000, 8000, 27000)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 15)) !== array(1728, 3375)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "<?php\nfunction cal_sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of perrin numbers.\nfunction cal_sum_perrin($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i] * $n[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of perrin numbers.\nfunction cal_sum_perrin_perrin($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i] * $n[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of perrin numbers.\nfunction cal_sum_perrin_perrin_perrin($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i] * $n[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of perrin numbers.\nfunction cal_sum_perrin_perrin_perrin($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i] * $n[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of perrin numbers.\nfunction cal_sum_perrin_perrin_perrin($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i] * $n[i];\n    }\n    return sum;\n}\n\n// Write a function to calculate the sum of perrin numbers.\nfunction cal_sum_perrin_perrin_perrin($n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return cal_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(9) !== 49) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 66) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(11) !== 88) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given array of string values.",
        "code": "<?php\nfunction extract_string($str, $l) {\n    var $s = $str.substr($l);\n    return $s.length;\n}\n\n// Write a function to extract specified size of strings from a given array of string values.\nfunction extract_string_from_array($str, $arr) {\n    var $s = $str.substr($arr[0]);\n    return $s.length;\n}\n\n// Write a function to extract specified size of strings from a given array of string values.\nfunction extract_string_from_array_from_array($str, $arr) {\n    var $s = $str.substr($arr[0]);\n    return $s.length;\n}\n\n// Write a function to extract specified size of strings from a given array of string values.\nfunction extract_string_from_array_from_array_from_array($str, $arr) {\n    var $s = $str.substr($arr[0]);\n    return $s.length;\n}\n\n// Write a function to extract specified size of strings from a given array of string values.\nfunction extract_string_from_array_from_array_from_array($str, $arr) {\n    var $s = $str.substr($arr[0]);\n    return $s.length;\n}\n\n// Write a function to extract specified size of strings from a given array of string values.\nfunction extract_string_from_array_from_array_from_array($str, $arr) {\n    var $s = $str.substr($arr[0]);\n    return $s.length;\n}\n\n// Write a function to extract specified size of strings from a given array of string values.\nfunction extract_string_from_array_from_array_from_array($str, $arr) {\n    var $s = $str.substr($arr[0]);\n    return $s.length;\n}\n\n// Write a function to extract specified size of strings from a given array of string values.\nfunction extract_string_from_array_from_array_from_array($str, $arr) {\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_string(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 8) !== array(\"practice\", \"solution\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 6) !== array(\"Python\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 9) !== array(\"exercises\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "<?php\nfunction remove_whitespaces($text1) {\n    var $text2 = $text1.replace(/\\s+/g, '');\n    return $text2;\n}\n\n// Write a function to remove all whitespaces from the given string.\nfunction remove_whitespaces_from_string($text1) {\n    var $text2 = $text1.replace(/\\s+/g, '');\n    return $text2;\n}\n\n// Write a function to remove all whitespaces from the given string.\nfunction remove_whitespaces_from_string_with_whitespaces($text1) {\n    var $text2 = $text1.replace(/\\s+/g, '');\n    return $text2;\n}\n\n// Write a function to remove all whitespaces from the given string.\nfunction remove_whitespaces_from_string_with_whitespaces_with_whitespaces($text1) {\n    var $text2 = $text1.replace(/\\s+/g, '');\n    return $text2;\n}\n\n// Write a function to remove all whitespaces from the given string.\nfunction remove_whitespaces_from_string_with_whitespaces_with_whitespaces_with_whitespaces($text1) {\n    var $text2 = $text1.replace(/\\s+/g, '');\n    return $text2;\n}\n\n// Write a function to remove all whitespaces from the given string.\nfunction remove_whitespaces_from_string_with_whitespaces_with_whitespaces_with_whitespaces_with_whitespaces($text1) {\n    var $text2 = $text1.replace(/\\s+/g, '');\n    return $text2;\n}\n\n// Write a function to remove all whitespaces from the given string.\nfunction remove_whitespaces_from_string_with_whitespaces_with_whitespaces_with_whitespaces_with_whitespaces_with_whitespaces($text1) {\n    var $text2 = $text1.replace(/\\\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_whitespaces(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\" Google    Flutter \") !== \"GoogleFlutter\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\" Google    Dart \") !== \"GoogleDart\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\" iOS    Swift \") !== \"iOSSwift\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "<?php\nfunction loss_amount($actual_cost, $sale_amount) {\n    if ($sale_amount > 0) {\n        return $actual_cost - $sale_amount;\n    } else {\n        return 0;\n    }\n}\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount_with_sale($actual_cost, $sale_amount) {\n    if ($sale_amount > 0) {\n        return $actual_cost - $sale_amount;\n    } else {\n        return 0;\n    }\n}\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount_with_sale_with_sale_amount($actual_cost, $sale_amount, $sale_amount_with_sale) {\n    if ($sale_amount > 0) {\n        return $actual_cost - $sale_amount;\n    } else {\n        return 0;\n    }\n}\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount_with_sale_with_sale_amount_with_sale_amount($actual_cost, $sale_amount, $sale_amount_with_sale, $sale_amount_with_sale_amount) {\n    if ($sale_amount > 0) {\n        return $actual_cost - $sale_amount;\n    } else {\n        return 0;\n    }\n}\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount_with_sale_with_sale_amount_with_sale_amount_with_sale_amount($actual_cost, $sale_amount, $sale_amount_with_sale, $sale_amount_with_sale_amount, $sale_amount_with_sale_amount_with_sale_amount) {\n    if ($sale_amount > 0) {\n        return $actual_cost - $sale_amount;\n    } else {\n        return 0;\n    }\n}\n\n//\n",
        "test_list": [
            "function candidate(...$args) {",
            "return loss_amount(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1500, 1200) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(100, 200) !== 100) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2000, 5000) !== 3000) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a phpthon function to find the sum of even factors of a number.",
        "code": "<?php\nfunction sumofFactors($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of odd factors of a number.\nfunction sumofOddFactors($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of even factors of a number.\nfunction sumofEvenFactors($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of odd factors of a number.\nfunction sumofOddFactors2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of even factors of a number.\nfunction sumofEvenFactors2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of odd factors of a number.\nfunction sumofOddFactors3($n) {\n    var sum = 0;\n    for (var i = 0; i < $n.length; i++) {\n        sum += $n[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of even factors of a number.\nfunction sumofEvenFactors3($n) {\n    var sum = 0;\n    for (var i = 0; i <\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sumofFactors(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(18) !== 26) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(30) !== 48) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6) !== 8) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "<?php\nfunction text_match_wordz($text) {\n  $text = $text.replace(/[^a-z]/g, '');\n  return $text.length > 0;\n}\n\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz_nocase($text) {\n  $text = $text.replace(/[^a-z]/g, '');\n  return $text.length > 0;\n}\n\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz_nocase_nocase($text) {\n  $text = $text.replace(/[^a-z]/g, '');\n  return $text.length > 0;\n}\n\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz_nocase_nocase_nocase($text) {\n  $text = $text.replace(/[^a-z]/g, '');\n  return $text.length > 0;\n}\n\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz_nocase_nocase_nocase($text) {\n  $text = $text.replace(/[^a-z]/g, '');\n  return $text.length > 0;\n}\n\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz_nocase_nocase_nocase($text) {\n  $text = $text.replace(/[^a-z]/g, '');\n  return $text.length > 0;\n}\n\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz_nocase_nocase_nocase($text) {\n  $text = $text.replace(/[^a-z]/g, '');\n  return $text.length > 0;\n}\n\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz_nocase_nocase_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_match_wordz(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"pythonz.\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"xyz.\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"  lang  .\") !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "<?php\nfunction check_monthnumb_number($monthnum2) {\n    var $monthnum = $monthnum2.toString();\n    var $monthnum2 = $monthnum.substring(0, $monthnum.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2 = $monthnum2.toString();\n    var $monthnum2 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum2\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_monthnumb_number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given array of string values.",
        "code": "<?php\nfunction reverse_string_list($stringlist) {\n    var $result = [];\n    for (var i = 0; i < $stringlist.length; i++) {\n        $result.push($stringlist[i]);\n    }\n    return $result;\n}\n\n// Write a function to reverse each string in a given array of string values.\nfunction reverse_string_list_reverse($stringlist) {\n    var $result = [];\n    for (var i = 0; i < $stringlist.length; i++) {\n        $result.push($stringlist[i]);\n    }\n    return $result;\n}\n\n// Write a function to reverse each string in a given array of string values.\nfunction reverse_string_list_reverse_reverse($stringlist) {\n    var $result = [];\n    for (var i = 0; i < $stringlist.length; i++) {\n        $result.push($stringlist[i]);\n    }\n    return $result;\n}\n\n// Write a function to reverse each string in a given array of string values.\nfunction reverse_string_list_reverse_reverse($stringlist) {\n    var $result = [];\n    for (var i = 0; i < $stringlist.length; i++) {\n        $result.push($stringlist[i]);\n    }\n    return $result;\n}\n\n// Write a function to reverse each string in a given array of string values.\nfunction reverse_string_list_reverse_reverse_reverse($stringlist) {\n    var $result = [];\n    for (var i = 0; i < $stringlist.length; i++) {\n        $result.push($stringlist[i]);\n    }\n    return $result;\n}\n\n// Write a function to reverse each string in a given array of string values.\nfunction reverse_string_list_reverse_reverse_reverse($stringlist) {\n    var $result = [];\n    for (var i = 0; i < $stringlist.length; i++) {\n        $result.push($stringlist[i]);\n    }\n    return $result;\n}\n\n// Write a function to reverse each\n",
        "test_list": [
            "function candidate(...$args) {",
            "return reverse_string_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Red\", \"Green\", \"Blue\", \"White\", \"Black\")) !== array(\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"john\", \"amal\", \"joel\", \"george\")) !== array(\"nhoj\", \"lama\", \"leoj\", \"egroeg\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"jack\", \"john\", \"mary\")) !== array(\"kcaj\", \"nhoj\", \"yram\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a phpthon function to find the subarray having minimum length.",
        "code": "<?php\nfunction Find_Min($lst) {\n    var $min = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] < $min) {\n            $min = $lst[i];\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the subarray having maximum length.\nfunction Find_Max($lst) {\n    var $max = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] > $max) {\n            $max = $lst[i];\n        }\n    }\n    return $max;\n}\n\n// Write a phpthon function to find the subarray having minimum length.\nfunction Find_Min_Max($lst) {\n    var $min = 0;\n    var $max = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] < $min) {\n            $min = $lst[i];\n        }\n        if ($lst[i] > $max) {\n            $max = $lst[i];\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the subarray having maximum length.\nfunction Find_Max_Min($lst) {\n    var $max = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] > $max) {\n            $max = $lst[i];\n        }\n    }\n    return $max;\n}\n\n// Write a phpthon function to find the subarray having minimum length.\nfunction Find_Min_Max_Min($lst) {\n    var $min = 0;\n    for (var i = 0; i < $lst.length; i++) {\n        if ($lst[i] < $min) {\n            $min = $lst[i];\n        }\n    }\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Find_Min(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1), array(1, 2), array(1, 2, 3))) !== array(1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 1), array(1, 1, 1), array(1, 2, 7, 8))) !== array(1, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"x\"), array(\"x\", \"y\"), array(\"x\", \"y\", \"z\"))) !== array(\"x\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "<?php\nfunction rectangle_area($l, $b) {\n  var $r = $l.length;\n  var $t = $l.length;\n  var $i = 0;\n  var $j = 0;\n  var $k = 0;\n  var $l_i = 0;\n  var $l_j = 0;\n  var $l_k = 0;\n  var $l_l = 0;\n  var $l_t = 0;\n  var $l_b = 0;\n  var $l_r = 0;\n  var $l_t_i = 0;\n  var $l_t_j = 0;\n  var $l_t_k = 0;\n  var $l_t_l = 0;\n  var $l_t_b = 0;\n  var $l_t_r = 0;\n  var $l_t_b_i = 0;\n  var $l_t_b_j = 0;\n  var $l_t_b_k = 0;\n  var $l_t_b_l = 0;\n  var $l_t_b_r = 0;\n  var $l_t_r_i = 0;\n  var $l_t_r_j = 0;\n  var $l_t_r_k = 0;\n  var $l_t_r_l = 0;\n  var $l_t_r_b = 0;\n  var $l_t_r_r = 0;\n  var $l_t_r_b_i = 0;\n  var $l_t_r_b_j = 0;\n  var $l_t_r_b_k = 0;\n  var $l_t_r_b_l = 0;\n  var $l_t_r_b_r = 0;\n  var $l_t_r_r_i = 0;\n  var $l_t_r_r_j = 0;\n  var $l_t_r_r_k = 0;\n  var $l_t_r_r_l = 0\n",
        "test_list": [
            "function candidate(...$args) {",
            "return rectangle_area(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 20) !== 200) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10, 5) !== 50) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 2) !== 8) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "<?php\nfunction remove_uppercase($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.substr($str2.length - 1, 1);\n    return $str3;\n}\n\n// Write a function to remove uppercase substrings from a given string.\nfunction remove_uppercase_all($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.substr(0, $str2.length - 1);\n    return $str3;\n}\n\n// Write a function to remove uppercase substrings from a given string.\nfunction remove_uppercase_all_all($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.substr(0, $str2.length - 1);\n    return $str3;\n}\n\n// Write a function to remove uppercase substrings from a given string.\nfunction remove_uppercase_all_all_all($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.substr(0, $str2.length - 1);\n    return $str3;\n}\n\n// Write a function to remove uppercase substrings from a given string.\nfunction remove_uppercase_all_all_all($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.substr(0, $str2.length - 1);\n    return $str3;\n}\n\n// Write a function to remove uppercase substrings from a given string.\nfunction remove_uppercase_all_all_all($str1) {\n    var $str2 = $str1.toLowerCase();\n    var $str3 = $str2.substr(0, $str2.length - 1);\n    return $str3;\n}\n\n// Write a function to remove uppercase substrings from a given string.\nfunction\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_uppercase(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"cAstyoUrFavoRitETVshoWs\") !== \"cstyoravoitshos\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"wAtchTheinTernEtrAdIo\") !== \"wtchheinerntrdo\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"VoicESeaRchAndreComMendaTionS\") !== \"oiceachndreomendaion\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a phpthon function to get the first element of each subarray.",
        "code": "<?php\nfunction Extract($lst) {\n    var $ret = [];\n    for (var i = 0; i < $lst.length; i++) {\n        $ret.push($lst[i]);\n    }\n    return $ret;\n}\n\n// Write a phpthon function to get the first element of each subarray.\nfunction Extract2($lst) {\n    var $ret = [];\n    for (var i = 0; i < $lst.length; i++) {\n        $ret.push($lst[i][0]);\n    }\n    return $ret;\n}\n\n// Write a phpthon function to get the first element of each subarray.\nfunction Extract3($lst) {\n    var $ret = [];\n    for (var i = 0; i < $lst.length; i++) {\n        $ret.push($lst[i][0][0]);\n    }\n    return $ret;\n}\n\n// Write a phpthon function to get the first element of each subarray.\nfunction Extract4($lst) {\n    var $ret = [];\n    for (var i = 0; i < $lst.length; i++) {\n        $ret.push($lst[i][0][0][0]);\n    }\n    return $ret;\n}\n\n// Write a phpthon function to get the first element of each subarray.\nfunction Extract5($lst) {\n    var $ret = [];\n    for (var i = 0; i < $lst.length; i++) {\n        $ret.push($lst[i][0][0][0]);\n    }\n    return $ret;\n}\n\n// Write a phpthon function to get the first element of each subarray.\nfunction Extract6($lst) {\n    var $ret = [];\n    for (var i = 0; i < $lst.length; i++) {\n        $ret.push($lst[i][0][0][0]);\n    }\n    return $ret;\n}\n\n// Write a phpthon function to get the first element of each subarray.\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Extract(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 2), array(3, 4, 5), array(6, 7, 8, 9))) !== array(1, 3, 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2, 3), array(4, 5))) !== array(1, 4)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(9, 8, 1), array(1, 2))) !== array(9, 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a phpthon function to count the upper case characters in a given string.",
        "code": "<?php\nfunction upper_ctr($str) {\n    var str = $str.toUpperCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the lower case characters in a given string.\nfunction lower_ctr($str) {\n    var str = $str.toLowerCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the upper case characters in a given string.\nfunction upper_str($str) {\n    var str = $str.toUpperCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the lower case characters in a given string.\nfunction lower_str($str) {\n    var str = $str.toLowerCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the upper case characters in a given string.\nfunction upper_str_ctr($str) {\n    var str = $str.toUpperCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the lower case characters in a given string.\nfunction lower_str_ctr($str) {\n    var str = $str.toLowerCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the upper case characters in a given string.\nfunction upper_str_str($str) {\n    var str = $str.toUpperCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the lower case characters in a given string.\nfunction lower_str_str($str) {\n    var str = $str.toLowerCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the upper case characters in a given string.\nfunction upper_str_str_ctr($str) {\n    var str = $str.toUpperCase();\n    return str.length;\n}\n\n// Write a phpthon function to count the lower case characters in a given string.\nfunction lower_str_str_ctr($str) {\n    var str = $str.toLowerCase\n",
        "test_list": [
            "function candidate(...$args) {",
            "return upper_ctr(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"PYthon\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"BigData\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"program\") !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "Write a function to find all possible combinations of the elements of a given array.",
        "code": "<?php\nfunction combinations_list($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to find all possible combinations of the elements of a given array.\nfunction combinations_list_unique($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] == $list1[i]) {\n            $list2.push($list1[i]);\n        }\n    }\n    return $list2;\n}\n\n// Write a function to find all possible combinations of the elements of a given array.\nfunction combinations_list_unique_unique($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] == $list1[i]) {\n            $list2.push($list1[i]);\n        }\n    }\n    return $list2;\n}\n\n// Write a function to find all possible combinations of the elements of a given array.\nfunction combinations_list_unique_unique_unique($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] == $list1[i]) {\n            $list2.push($list1[i]);\n        }\n    }\n    return $list2;\n}\n\n// Write a function to find all possible combinations of the elements of a given array.\nfunction combinations_list_unique_unique_unique($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] == $list1[i]) {\n            $list2.push($list1[i]);\n        }\n    }\n    return $list2;\n}\n\n//\n",
        "test_list": [
            "function candidate(...$args) {",
            "return combinations_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"orange\", \"red\", \"green\", \"blue\")) !== array(array(), array(\"orange\"), array(\"red\"), array(\"red\", \"orange\"), array(\"green\"), array(\"green\", \"orange\"), array(\"green\", \"red\"), array(\"green\", \"red\", \"orange\"), array(\"blue\"), array(\"blue\", \"orange\"), array(\"blue\", \"red\"), array(\"blue\", \"red\", \"orange\"), array(\"blue\", \"green\"), array(\"blue\", \"green\", \"orange\"), array(\"blue\", \"green\", \"red\"), array(\"blue\", \"green\", \"red\", \"orange\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\")) !== array(array(), array(\"red\"), array(\"green\"), array(\"green\", \"red\"), array(\"blue\"), array(\"blue\", \"red\"), array(\"blue\", \"green\"), array(\"blue\", \"green\", \"red\"), array(\"white\"), array(\"white\", \"red\"), array(\"white\", \"green\"), array(\"white\", \"green\", \"red\"), array(\"white\", \"blue\"), array(\"white\", \"blue\", \"red\"), array(\"white\", \"blue\", \"green\"), array(\"white\", \"blue\", \"green\", \"red\"), array(\"black\"), array(\"black\", \"red\"), array(\"black\", \"green\"), array(\"black\", \"green\", \"red\"), array(\"black\", \"blue\"), array(\"black\", \"blue\", \"red\"), array(\"black\", \"blue\", \"green\"), array(\"black\", \"blue\", \"green\", \"red\"), array(\"black\", \"white\"), array(\"black\", \"white\", \"red\"), array(\"black\", \"white\", \"green\"), array(\"black\", \"white\", \"green\", \"red\"), array(\"black\", \"white\", \"blue\"), array(\"black\", \"white\", \"blue\", \"red\"), array(\"black\", \"white\", \"blue\", \"green\"), array(\"black\", \"white\", \"blue\", \"green\", \"red\"), array(\"orange\"), array(\"orange\", \"red\"), array(\"orange\", \"green\"), array(\"orange\", \"green\", \"red\"), array(\"orange\", \"blue\"), array(\"orange\", \"blue\", \"red\"), array(\"orange\", \"blue\", \"green\"), array(\"orange\", \"blue\", \"green\", \"red\"), array(\"orange\", \"white\"), array(\"orange\", \"white\", \"red\"), array(\"orange\", \"white\", \"green\"), array(\"orange\", \"white\", \"green\", \"red\"), array(\"orange\", \"white\", \"blue\"), array(\"orange\", \"white\", \"blue\", \"red\"), array(\"orange\", \"white\", \"blue\", \"green\"), array(\"orange\", \"white\", \"blue\", \"green\", \"red\"), array(\"orange\", \"black\"), array(\"orange\", \"black\", \"red\"), array(\"orange\", \"black\", \"green\"), array(\"orange\", \"black\", \"green\", \"red\"), array(\"orange\", \"black\", \"blue\"), array(\"orange\", \"black\", \"blue\", \"red\"), array(\"orange\", \"black\", \"blue\", \"green\"), array(\"orange\", \"black\", \"blue\", \"green\", \"red\"), array(\"orange\", \"black\", \"white\"), array(\"orange\", \"black\", \"white\", \"red\"), array(\"orange\", \"black\", \"white\", \"green\"), array(\"orange\", \"black\", \"white\", \"green\", \"red\"), array(\"orange\", \"black\", \"white\", \"blue\"), array(\"orange\", \"black\", \"white\", \"blue\", \"red\"), array(\"orange\", \"black\", \"white\", \"blue\", \"green\"), array(\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"red\", \"green\", \"black\", \"orange\")) !== array(array(), array(\"red\"), array(\"green\"), array(\"green\", \"red\"), array(\"black\"), array(\"black\", \"red\"), array(\"black\", \"green\"), array(\"black\", \"green\", \"red\"), array(\"orange\"), array(\"orange\", \"red\"), array(\"orange\", \"green\"), array(\"orange\", \"green\", \"red\"), array(\"orange\", \"black\"), array(\"orange\", \"black\", \"red\"), array(\"orange\", \"black\", \"green\"), array(\"orange\", \"black\", \"green\", \"red\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "<?php\nfunction max_subarray_product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum product of the given array.\nfunction max_product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum product of the given array.\nfunction max_product_product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum product of the given array.\nfunction max_product_product_product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum product of the given array.\nfunction max_product_product_product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a function to find the maximum product of the given array.\nfunction max_product_product_product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_subarray_product(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, -2, -3, 0, 7, -8, -2)) !== 112) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(6, -3, -10, 0, 2)) !== 180) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-2, -40, 0, -2, -3)) !== 80) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in an array.",
        "code": "<?php\nfunction check_value($dict, $n) {\n    var $val = $dict.get($n);\n    if ($val == $dict.get($n)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if all values are same in an array.\nfunction check_value_array($array, $n) {\n    var $val = $array.get($n);\n    if ($val == $array.get($n)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if all values are same in an array.\nfunction check_value_array_array($array, $n) {\n    var $val = $array.get($n);\n    if ($val == $array.get($n)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if all values are same in an array.\nfunction check_value_array_array_array($array, $n) {\n    var $val = $array.get($n);\n    if ($val == $array.get($n)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if all values are same in an array.\nfunction check_value_array_array_array_array($array, $n) {\n    var $val = $array.get($n);\n    if ($val == $array.get($n)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if all values are same in an array.\nfunction check_value_array_array_array_array_array($array, $n) {\n    var $val = $array.get($n);\n    if ($val == $array.get($n)) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if all values are same in an array.\nfunction check_value_array_array_array_array_array_array($array, $n) {\n    var $val = $array.get($n);\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_value(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 10) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 12) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 5) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given array.",
        "code": "<?php\nfunction drop_empty($dict1) {\n    var $dict2 = $dict1.slice(0);\n    $dict2.forEach(function(item) {\n        if (item.length === 0) {\n            $dict1.splice(0, 1);\n        }\n    });\n}\n\n// Write a function to drop items from a given array.\nfunction drop_items($dict1) {\n    var $dict2 = $dict1.slice(0);\n    $dict2.forEach(function(item) {\n        if (item.length > 0) {\n            $dict1.splice(0, item.length);\n        }\n    });\n}\n\n// Write a function to drop items from a given array.\nfunction drop_items_from_array($array) {\n    var $array2 = $array.slice(0);\n    $array2.forEach(function(item) {\n        if (item.length > 0) {\n            $array.splice(0, item.length);\n        }\n    });\n}\n\n// Write a function to drop items from a given array.\nfunction drop_items_from_array_with_limit($array, limit) {\n    var $array2 = $array.slice(0);\n    $array2.forEach(function(item) {\n        if (item.length > 0) {\n            $array.splice(0, item.length, limit);\n        }\n    });\n}\n\n// Write a function to drop items from a given array.\nfunction drop_items_from_array_with_limit_and_skip($array, limit, skip) {\n    var $array2 = $array.slice(0);\n    $array2.forEach(function(item) {\n        if (item.length > 0) {\n            $array.splice(0, item.length, limit, skip);\n        }\n    });\n}\n\n// Write a function to drop items from a given array.\nfunction drop_items_from_array_with_limit_and_skip_and_limit($array, limit, skip, limit2) {\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return drop_empty(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => null)) !== array(\"c1\" => \"Red\", \"c2\" => \"Green\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"c1\" => \"Red\", \"c2\" => null, \"c3\" => null)) !== array(\"c1\" => \"Red\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"c1\" => null, \"c2\" => \"Green\", \"c3\" => null)) !== array(\"c2\" => \"Green\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "<?php\nfunction max_product($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        var temp = $arr[i];\n        for (var j = i + 1; j < $arr.length; j++) {\n            if ($arr[j] > temp) {\n                temp = $arr[j];\n            }\n        }\n        max = max + temp;\n    }\n    return max;\n}\n\n// Write a function to find the maximum product formed by dividing numbers of an increasing subsequence of that array.\nfunction max_product_div($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        var temp = $arr[i];\n        for (var j = i + 1; j < $arr.length; j++) {\n            if ($arr[j] % temp == 0) {\n                temp = $arr[j];\n            }\n        }\n        max = max + temp;\n    }\n    return max;\n}\n\n// Write a function to find the maximum product formed by dividing numbers of an increasing subsequence of that array.\nfunction max_product_div_sub($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        var temp = $arr[i];\n        for (var j = i + 1; j < $arr.length; j++) {\n            if ($arr[j] % temp == 0) {\n                temp = $arr[j];\n            }\n        }\n        max = max + temp;\n    }\n    return max;\n}\n\n// Write a function to find the maximum product formed by dividing numbers of an increasing subsequence of that array.\nfunction max_product_div_sub_sub($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        var temp = $arr[i];\n        for (var j = i + 1; j < $arr.length; j++) {\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_product(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(3, 100, 4, 5, 150, 6)) !== 3000) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 42, 55, 68, 80)) !== 50265600) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 22, 9, 33, 21, 50, 41, 60)) !== 2460) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given array.",
        "code": "<?php\nfunction add_pairwise($test_tup) {\n    var $test_tup_array = $test_tup.split(',');\n    var $test_tup_array_length = $test_tup_array.length;\n    var $test_tup_array_index = 0;\n    var $test_tup_array_index_max = $test_tup_array_index;\n    var $test_tup_array_index_min = $test_tup_array_index;\n    var $test_tup_array_index_min_max = $test_tup_array_index;\n    var $test_tup_array_index_max_min = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min_max = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min_max_min = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min_max_min_max = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min_max_min_max = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min_max_min_max = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min_max_min_max = $test_tup_array_index;\n    var $test_tup_array_index_max_min_max_min_max_min_max = $test_tup_array_index;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return add_pairwise(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 5, 7, 8, 10)) !== array(6, 12, 15, 18)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 6, 8, 9, 11)) !== array(8, 14, 17, 20)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 7, 9, 10, 12)) !== array(10, 16, 19, 22)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a phpthon function to find the product of the array multiplication modulo n.",
        "code": "<?php\nfunction find_remainder($arr, $n) {\n    var $result = 0;\n    $result = $arr[$n] % $n;\n    return $result;\n}\n\n// Write a phpthon function to find the product of the array multiplication modulo n.\nfunction find_product($arr, $n) {\n    var $result = 0;\n    $result = $arr[$n] % $n;\n    return $result;\n}\n\n// Write a phpthon function to find the product of the array multiplication modulo n.\nfunction find_product_modulo_n($arr, $n) {\n    var $result = 0;\n    $result = $arr[$n] % $n;\n    return $result;\n}\n\n// Write a phpthon function to find the product of the array multiplication modulo n.\nfunction find_product_modulo_n_modulo_n($arr, $n) {\n    var $result = 0;\n    $result = $arr[$n] % $n;\n    return $result;\n}\n\n// Write a phpthon function to find the product of the array multiplication modulo n.\nfunction find_product_modulo_n_modulo_n_modulo_n($arr, $n) {\n    var $result = 0;\n    $result = $arr[$n] % $n;\n    return $result;\n}\n\n// Write a phpthon function to find the product of the array multiplication modulo n.\nfunction find_product_modulo_n_modulo_n_modulo_n($arr, $n) {\n    var $result = 0;\n    $result = $arr[$n] % $n;\n    return $result;\n}\n\n// Write a phpthon function to find the product of the array multiplication modulo n.\nfunction find_product_modulo_n_modulo_n_modulo_n($arr, $n) {\n    var $result = 0;\n    $result = $arr[$n] % $n;\n    return $result;\n}\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_remainder(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(100, 10, 5, 25, 35, 14), 11) !== 9) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 1), 1) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1), 2) !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a phpthon function to check whether the given array contains consecutive numbers or not.",
        "code": "<?php\nfunction check_Consecutive($l) {\n    var $i = 0;\n    var $j = $l.length - 1;\n    while ($i < $j) {\n        if ($l[$i] == $l[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i == $j;\n}\n\n// Write a phpthon function to check whether the given array contains consecutive numbers or not.\nfunction check_Consecutive_2($l) {\n    var $i = 0;\n    var $j = $l.length - 1;\n    while ($i < $j) {\n        if ($l[$i] == $l[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i == $j;\n}\n\n// Write a phpthon function to check whether the given array contains consecutive numbers or not.\nfunction check_Consecutive_3($l) {\n    var $i = 0;\n    var $j = $l.length - 1;\n    while ($i < $j) {\n        if ($l[$i] == $l[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i == $j;\n}\n\n// Write a phpthon function to check whether the given array contains consecutive numbers or not.\nfunction check_Consecutive_4($l) {\n    var $i = 0;\n    var $j = $l.length - 1;\n    while ($i < $j) {\n        if ($l[$i] == $l[$j]) {\n            $i++;\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $i == $j;\n}\n\n// Write a phpthon function\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_Consecutive(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 5, 6)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "<?php\nfunction replace_char($str1, $ch, $newch) {\n    var $str2 = $str1.replace(new RegExp($ch, 'g'), $newch);\n    return $str2;\n}\n\n// Write a function to replace characters in a string.\nfunction replace_char_nocase($str1, $ch, $newch) {\n    var $str2 = $str1.replace(new RegExp($ch, 'g'), $newch);\n    return $str2;\n}\n\n// Write a function to replace characters in a string.\nfunction replace_char_nocase_nocase($str1, $ch, $newch) {\n    var $str2 = $str1.replace(new RegExp($ch, 'g'), $newch);\n    return $str2;\n}\n\n// Write a function to replace characters in a string.\nfunction replace_char_nocase_nocase_nocase($str1, $ch, $newch) {\n    var $str2 = $str1.replace(new RegExp($ch, 'g'), $newch);\n    return $str2;\n}\n\n// Write a function to replace characters in a string.\nfunction replace_char_nocase_nocase_nocase_nocase($str1, $ch, $newch) {\n    var $str2 = $str1.replace(new RegExp($ch, 'g'), $newch);\n    return $str2;\n}\n\n// Write a function to replace characters in a string.\nfunction replace_char_nocase_nocase_nocase_nocase_nocase($str1, $ch, $newch) {\n    var $str2 = $str1.replace(new RegExp($ch, 'g'), $newch);\n    return $str2;\n}\n\n// Write a function to replace characters in a string.\nfunction replace_char_nocase_nocase_nocase_nocase_nocase_nocase($str1, $ch, $newch) {\n    var $str2 =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return replace_char(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"polygon\", \"y\", \"l\") !== \"pollgon\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"character\", \"c\", \"a\") !== \"aharaater\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python\", \"l\", \"a\") !== \"python\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort an array by value.",
        "code": "<?php\nfunction sort_counter($dict1) {\n  var $dict2 = $dict1.sort(function(a, b) {\n    return a.value - b.value;\n  });\n  return $dict2;\n}\n\n// Write a function to sort an array by key.\nfunction sort_key($dict1) {\n  var $dict2 = $dict1.sort(function(a, b) {\n    return a.key - b.key;\n  });\n  return $dict2;\n}\n\n// Write a function to sort an array by value.\nfunction sort_value($dict1) {\n  var $dict2 = $dict1.sort(function(a, b) {\n    return a.value - b.value;\n  });\n  return $dict2;\n}\n\n// Write a function to sort an array by key.\nfunction sort_key_value($dict1) {\n  var $dict2 = $dict1.sort(function(a, b) {\n    return a.key - b.key;\n  });\n  return $dict2;\n}\n\n// Write a function to sort an array by value.\nfunction sort_value_value($dict1) {\n  var $dict2 = $dict1.sort(function(a, b) {\n    return a.value - b.value;\n  });\n  return $dict2;\n}\n\n// Write a function to sort an array by key.\nfunction sort_key_value_value($dict1) {\n  var $dict2 = $dict1.sort(function(a, b) {\n    return a.key - b.key;\n  });\n  return $dict2;\n}\n\n// Write a function to sort an array by value.\nfunction sort_value_value_value($dict1) {\n  var $dict2 = $dict1.sort(function(a, b) {\n    return a.value - b.value;\n  });\n  return $dict2;\n}\n\n// Write a function to sort an array by key.\nfunction sort_key_value_value_value($dict1) {\n  var $dict2 = $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sort_counter(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87)) !== array(array(\"Chemistry\", 87), array(\"Physics\", 83), array(\"Math\", 81))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250)) !== array(array(\"Math\", 400), array(\"Physics\", 300), array(\"Chemistry\", 250))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250)) !== array(array(\"Chemistry\", 1250), array(\"Physics\", 1000), array(\"Math\", 900))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a phpthon function to find the sum of the largest and smallest value in a given array.",
        "code": "<?php\nfunction big_sum($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the largest and smallest value in a given array.\nfunction big_sum_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the largest and smallest value in a given array.\nfunction big_sum_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the largest and smallest value in a given array.\nfunction big_sum_array_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the largest and smallest value in a given array.\nfunction big_sum_array_array_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the largest and smallest value in a given array.\nfunction big_sum_array_array_array_array_array($nums) {\n    var sum = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        sum += $nums[i];\n    }\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return big_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-1, 2, 3, 4)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 6)) !== 8) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a phpthon function to convert the given string to lower case.",
        "code": "<?php\nfunction is_lower($string) {\n    return $string.toLowerCase().indexOf($string.toLowerCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to upper case.\nfunction is_upper($string) {\n    return $string.toUpperCase().indexOf($string.toUpperCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to title case.\nfunction is_title_case($string) {\n    return $string.toUpperCase().indexOf($string.toUpperCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to uppercase.\nfunction is_uppercase($string) {\n    return $string.toUpperCase().indexOf($string.toUpperCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to lower case.\nfunction is_lowercase($string) {\n    return $string.toLowerCase().indexOf($string.toLowerCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to title case.\nfunction is_title_case($string) {\n    return $string.toUpperCase().indexOf($string.toUpperCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to uppercase.\nfunction is_uppercase($string) {\n    return $string.toUpperCase().indexOf($string.toUpperCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to title case.\nfunction is_title_case($string) {\n    return $string.toUpperCase().indexOf($string.toUpperCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to lower case.\nfunction is_lowercase($string) {\n    return $string.toLowerCase().indexOf($string.toLowerCase()) >= 0;\n}\n\n// Write a phpthon function to convert the given string to title case.\nfunction is_title_case($\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_lower(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"InValid\") !== \"invalid\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"TruE\") !== \"true\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"SenTenCE\") !== \"sentence\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "<?php\nfunction remove_lowercase($str1) {\n    var $str2 = $str1.toLowerCase();\n    return $str2;\n}\n\n// Write a function to remove uppercase substrings from a given string.\nfunction remove_uppercase($str1) {\n    var $str2 = $str1.toUpperCase();\n    return $str2;\n}\n\n// Write a function to remove all lowercase substrings from a given string.\nfunction remove_all_lowercase($str1) {\n    var $str2 = $str1.toLowerCase();\n    return $str2;\n}\n\n// Write a function to remove all uppercase substrings from a given string.\nfunction remove_all_uppercase($str1) {\n    var $str2 = $str1.toUpperCase();\n    return $str2;\n}\n\n// Write a function to remove all lowercase substrings from a given string.\nfunction remove_all_lowercase($str1) {\n    var $str2 = $str1.toLowerCase();\n    return $str2;\n}\n\n// Write a function to remove all uppercase substrings from a given string.\nfunction remove_all_uppercase($str1) {\n    var $str2 = $str1.toUpperCase();\n    return $str2;\n}\n\n// Write a function to remove all lowercase substrings from a given string.\nfunction remove_all_lowercase($str1) {\n    var $str2 = $str1.toLowerCase();\n    return $str2;\n}\n\n// Write a function to remove all uppercase substrings from a given string.\nfunction remove_all_uppercase($str1) {\n    var $str2 = $str1.toUpperCase();\n    return $str2;\n}\n\n// Write a function to remove all lowercase substrings from a given string.\nfunction remove_all_lowercase($str1) {\n    var $str2 = $str1.toLowerCase();\n    return $str2;\n}\n\n// Write a function to remove all uppercase substrings from a given string.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_lowercase(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"PYTHon\") !== \"PYTH\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"FInD\") !== \"FID\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"STRinG\") !== \"STRG\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a phpthon function to find the first digit of a given number.",
        "code": "<?php\nfunction first_Digit($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit : 0;\n}\n\n// Write a phpthon function to find the last digit of a given number.\nfunction last_Digit($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit : 0;\n}\n\n// Write a phpthon function to find the first digit of a given number.\nfunction first_Digit_2($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit : 0;\n}\n\n// Write a phpthon function to find the last digit of a given number.\nfunction last_Digit_2($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit : 0;\n}\n\n// Write a phpthon function to find the first digit of a given number.\nfunction first_Digit_3($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit : 0;\n}\n\n// Write a phpthon function to find the last digit of a given number.\nfunction last_Digit_3($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit : 0;\n}\n\n// Write a phpthon function to find the first digit of a given number.\nfunction first_Digit_4($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit : 0;\n}\n\n// Write a phpthon function to find the last digit of a given number.\nfunction last_Digit_4($n) {\n    var $digit = $n.toString().substr(0, 1);\n    return $digit.length? $digit\n",
        "test_list": [
            "function candidate(...$args) {",
            "return first_Digit(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(123) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(456) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(12) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given array of numbers, returned in descending order.",
        "code": "<?php\nfunction heap_queue_largest($nums, $n) {\n    var $q = [];\n    $q.push($nums);\n    while ($q.length > 0) {\n        var $i = $q.pop();\n        if ($i.length > $n) {\n            $q.push($i.slice(0, $n));\n        }\n    }\n    return $q;\n}\n\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest_n($nums, $n) {\n    var $q = [];\n    $q.push($nums);\n    while ($q.length > 0) {\n        var $i = $q.pop();\n        if ($i.length > $n) {\n            $q.push($i.slice(0, $n));\n        }\n    }\n    return $q;\n}\n\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest_n_n($nums, $n) {\n    var $q = [];\n    $q.push($nums);\n    while ($q.length > 0) {\n        var $i = $q.pop();\n        if ($i.length > $n) {\n            $q.push($i.slice(0, $n));\n        }\n    }\n    return $q;\n}\n\n// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest_n_n_n($nums, $n) {\n    var $q = [];\n    $q.push($nums);\n    while ($q.length > 0) {\n        var $i = $q.pop();\n        if ($i.length > $n) {\n            $q.push($i.slice(0, $n));\n        }\n    }\n    return $q;\n}\n\n// Write a function to find the n largest integers from a given array of numbers,\n",
        "test_list": [
            "function candidate(...$args) {",
            "return heap_queue_largest(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a phpthon function which takes an array of integers and only returns the odd ones.",
        "code": "<?php\nfunction Split($list) {\n    var odd = 0;\n    var even = 0;\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 1) {\n            odd += 1;\n        } else {\n            even += 1;\n        }\n    }\n    return [odd, even];\n}\n\n// Write a phpthon function which takes an array of integers and only returns the even ones.\nfunction Split2($list) {\n    var odd = 0;\n    var even = 0;\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 0) {\n            odd += 1;\n        } else {\n            even += 1;\n        }\n    }\n    return [odd, even];\n}\n\n// Write a phpthon function which takes an array of integers and only returns the odd ones.\nfunction Split3($list) {\n    var odd = 0;\n    var even = 0;\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 1) {\n            odd += 1;\n        } else {\n            even += 1;\n        }\n    }\n    return [odd, even];\n}\n\n// Write a phpthon function which takes an array of integers and only returns the even ones.\nfunction Split4($list) {\n    var odd = 0;\n    var even = 0;\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 0) {\n            odd += 1;\n        } else {\n            even += 1;\n        }\n    }\n    return [odd, even];\n}\n\n// Write a phpthon function which takes an array of integers and only returns the odd ones.\nfunction Split5($list) {\n    var odd = 0;\n    var even = 0;\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] %\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Split(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6)) !== array(1, 3, 5)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 11, 12, 13)) !== array(11, 13)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9, 1)) !== array(7, 9, 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a phpthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "<?php\nfunction difference($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction difference2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction difference3($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction difference4($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction difference5($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction difference6($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the difference between\n",
        "test_list": [
            "function candidate(...$args) {",
            "return difference(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3) !== 30) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5) !== 210) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 6) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a phpthon function to count the number of pairs whose xor value is odd.",
        "code": "<?php\nfunction find_Odd_Pair($A, $N) {\n    var $B = $A.slice(0, $A.length - 1);\n    var $C = $N.slice(0, $N.length - 1);\n    var $D = $B.slice(0, $B.length - 1);\n    var $E = $C.slice(0, $C.length - 1);\n    var $F = $D.slice(0, $D.length - 1);\n    var $G = $E.slice(0, $E.length - 1);\n    var $H = $F.slice(0, $F.length - 1);\n    var $I = $G.slice(0, $G.length - 1);\n    var $J = $H.slice(0, $H.length - 1);\n    var $K = $I.slice(0, $I.length - 1);\n    var $L = $J.slice(0, $J.length - 1);\n    var $M = $K.slice(0, $K.length - 1);\n    var $N = $L.slice(0, $L.length - 1);\n    var $O = $M.slice(0, $M.length - 1);\n    var $P = $N.slice(0, $N.length - 1);\n    var $Q = $O.slice(0, $O.length - 1);\n    var $R = $P.slice(0, $P.length - 1);\n    var $S = $Q.slice(0, $Q.length - 1);\n    var $T = $R.slice(0, $R.length - 1);\n    var $U = $S.slice(0, $S.length - 1);\n    var $V = $T.slice(0, $T.length - 1);\n    var $W = $U.slice(0, $U.length - 1);\n    var $X = $V.slice(0, $V.length - 1);\n    var $Y = $W.slice(0,\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Odd_Pair(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 4, 7, 2, 1), 5) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 2, 8, 1, 0, 5, 11), 7) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3), 3) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "<?php\nfunction toggle_string($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case_case_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case_case_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case_case_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case_case_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case_case_case($string) {\n    $string = $string.toLowerCase();\n    return $string;\n}\n\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string_case_case_case_case($string) {\n    $string = $string.toLowerCase\n",
        "test_list": [
            "function candidate(...$args) {",
            "return toggle_string(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Python\") !== \"pYTHON\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Pangram\") !== \"pANGRAM\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"LIttLE\") !== \"liTTle\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a phpthon function to find the sum of the per-digit difference between two integers.",
        "code": "<?php\nfunction digit_distance_nums($n1, $n2) {\n    var $d1 = $n1.toString();\n    var $d2 = $n2.toString();\n    var $d1_len = $d1.length;\n    var $d2_len = $d2.length;\n    var $d1_sum = 0;\n    var $d2_sum = 0;\n    for (var i = 0; i < $d1_len; i++) {\n        $d1_sum += $d1[i];\n    }\n    for (var i = 0; i < $d2_len; i++) {\n        $d2_sum += $d2[i];\n    }\n    return $d1_sum - $d2_sum;\n}\n\n// Write a phpthon function to find the sum of the per-digit difference between two strings.\nfunction digit_distance_str($n1, $n2) {\n    var $d1 = $n1.toString();\n    var $d2 = $n2.toString();\n    var $d1_len = $d1.length;\n    var $d2_len = $d2.length;\n    var $d1_sum = 0;\n    var $d2_sum = 0;\n    for (var i = 0; i < $d1_len; i++) {\n        $d1_sum += $d1[i];\n    }\n    for (var i = 0; i < $d2_len; i++) {\n        $d2_sum += $d2[i];\n    }\n    return $d1_sum - $d2_sum;\n}\n\n// Write a phpthon function to find the sum of the per-digit difference between two strings.\nfunction digit_distance_str($n1, $n2) {\n    var $d1 = $n1.toString();\n    var $d2 = $n2.toString();\n    var $d1_len = $d1.length;\n    var $d2_len\n",
        "test_list": [
            "function candidate(...$args) {",
            "return digit_distance_nums(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1, 2) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(23, 56) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(123, 256) !== 7) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subarray in the given array.",
        "code": "<?php\nfunction max_sub_array_sum($a, $size) {\n    var $max = 0;\n    for (var i = 0; i < $size; i++) {\n        if ($a[i] > $max) {\n            $max = $a[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the sum of the smallest contiguous subarray in the given array.\nfunction min_sub_array_sum($a, $size) {\n    var $min = 0;\n    for (var i = 0; i < $size; i++) {\n        if ($a[i] < $min) {\n            $min = $a[i];\n        }\n    }\n    return $min;\n}\n\n// Write a function to find the sum of the smallest contiguous subarray in the given array.\nfunction max_sub_array_sum_of_array($a, $size) {\n    var $max = 0;\n    for (var i = 0; i < $size; i++) {\n        if ($a[i] > $max) {\n            $max = $a[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to find the sum of the smallest contiguous subarray in the given array.\nfunction min_sub_array_sum_of_array($a, $size) {\n    var $min = 0;\n    for (var i = 0; i < $size; i++) {\n        if ($a[i] < $min) {\n            $min = $a[i];\n        }\n    }\n    return $min;\n}\n\n// Write a function to find the sum of the smallest contiguous subarray in the given array.\nfunction max_sub_array_sum_of_array($a, $size) {\n    var $max = 0;\n    for (var i = 0; i < $size; i++) {\n        if ($a[i] > $max) {\n            $max = $a[i];\n        }\n    }\n    return $max;\n}\n\n// Write\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_sub_array_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(-2, -3, 4, -1, -2, 1, 5, -3), 8) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-3, -4, 5, -2, -3, 2, 6, -4), 8) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-4, -5, 6, -3, -4, 3, 7, -5), 8) !== 10) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given arrays and output them in sorted order.",
        "code": "<?php\nfunction union_elements($test_tup1, $test_tup2) {\n    var $result = [];\n    $result.push($test_tup1);\n    $result.push($test_tup2);\n    $result.sort();\n    return $result;\n}\n\n// Write a function to find the intersection of the elements of two given arrays and output them in sorted order.\nfunction intersection_elements($test_tup1, $test_tup2) {\n    var $result = [];\n    $result.push($test_tup1);\n    $result.push($test_tup2);\n    $result.sort();\n    return $result;\n}\n\n// Write a function to find the difference between two given arrays and output them in sorted order.\nfunction difference_elements($test_tup1, $test_tup2) {\n    var $result = [];\n    $result.push($test_tup1);\n    $result.push($test_tup2);\n    $result.sort();\n    return $result;\n}\n\n// Write a function to find the product of two given arrays and output them in sorted order.\nfunction product_elements($test_tup1, $test_tup2) {\n    var $result = [];\n    $result.push($test_tup1);\n    $result.push($test_tup2);\n    $result.sort();\n    return $result;\n}\n\n// Write a function to find the product of two given arrays and output them in sorted order.\nfunction product_elements_sorted($test_tup1, $test_tup2) {\n    var $result = [];\n    $result.push($test_tup1);\n    $result.push($test_tup2);\n    $result.sort();\n    return $result;\n}\n\n// Write a function to find the product of two given arrays and output them in sorted order.\nfunction product_elements_sorted_sorted($test_tup1, $test_tup2) {\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return union_elements(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(3, 4, 5, 6), array(5, 7, 4, 10)) !== array(3, 4, 5, 6, 7, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4), array(3, 4, 5, 6)) !== array(1, 2, 3, 4, 5, 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 12, 13, 14), array(13, 15, 16, 17)) !== array(11, 12, 13, 14, 15, 16, 17)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a phpthon function to find the length of the longest subarrays.",
        "code": "<?php\nfunction Find_Max_Length($lst) {\n  var $max = 0;\n  for (var i = 0; i < $lst.length; i++) {\n    if ($lst[i] > $max) {\n      $max = $lst[i];\n    }\n  }\n  return $max;\n}\n\n// Write a phpthon function to find the longest subarrays.\nfunction Find_Max_Length_2($lst) {\n  var $max = 0;\n  for (var i = 0; i < $lst.length; i++) {\n    if ($lst[i] > $max) {\n      $max = $lst[i];\n    }\n  }\n  return $max;\n}\n\n// Write a phpthon function to find the longest subarrays.\nfunction Find_Max_Length_3($lst) {\n  var $max = 0;\n  for (var i = 0; i < $lst.length; i++) {\n    if ($lst[i] > $max) {\n      $max = $lst[i];\n    }\n  }\n  return $max;\n}\n\n// Write a phpthon function to find the longest subarrays.\nfunction Find_Max_Length_4($lst) {\n  var $max = 0;\n  for (var i = 0; i < $lst.length; i++) {\n    if ($lst[i] > $max) {\n      $max = $lst[i];\n    }\n  }\n  return $max;\n}\n\n// Write a phpthon function to find the longest subarrays.\nfunction Find_Max_Length_5($lst) {\n  var $max = 0;\n  for (var i = 0; i < $lst.length; i++) {\n    if ($lst[i] > $max) {\n      $max = $lst[i];\n    }\n  }\n  return $max;\n}\n\n// Write a phpthon function to find the longest subarrays.\nfunction Find\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Find_Max_Length(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1), array(1, 4), array(5, 6, 7, 8))) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(0, 1), array(2, 2), array(3, 2, 1))) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(7), array(22, 23), array(13, 14, 15), array(10, 20, 30, 40, 50))) !== 5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "<?php\nfunction extract_values($text) {\n    var $result = [];\n    var $index = 0;\n    var $length = $text.length;\n    var $quote = $text.charAt(0);\n    var $quote_index = $text.indexOf($quote);\n    var $quote_length = $quote_index - $index;\n    var $quote_char = $text.charAt($index);\n    var $quote_char_index = $index + $quote_length;\n    var $quote_char_length = $quote_char.length;\n    var $quote_char_char = $quote_char.charAt($index);\n    var $quote_char_char_index = $index + $quote_char_length;\n    var $quote_char_char_length = $quote_char_char.length;\n    var $quote_char_char_char = $quote_char_char.charAt($index);\n    var $quote_char_char_char_index = $index + $quote_char_char_length;\n    var $quote_char_char_char_length = $quote_char_char_char.length;\n    var $quote_char_char_char_char = $quote_char_char_char.charAt($index);\n    var $quote_char_char_char_char_index = $index + $quote_char_char_char_length;\n    var $quote_char_char_char_char_length = $quote_char_char_char_char.length;\n    var $quote_char_char_char_char_length = $quote_char_char_char_char.length;\n    var $quote_char_char_char_char_length = $quote_char_char_char_char.length;\n    var $quote_char_char_char_char_length = $quote_char_char_char_char.length;\n    var $quote_char_char_char_char_length = $quote_char_char_char_char.length;\n    var $quote_char_char_char_char_length = $quote_char_char\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_values(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") !== array(\"Python\", \"PHP\", \"Java\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") !== array(\"python\", \"program\", \"language\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") !== array(\"red\", \"blue\", \"green\", \"yellow\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a phpthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "<?php\nfunction count_Pairs($arr, $n) {\n\tvar $i = 0;\n\tvar $j = $n;\n\twhile ($i < $j) {\n\t\tif ($arr[$i]!= $arr[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j--;\n\t\t}\n\t}\n\treturn $i;\n}\n\n// Write a phpthon function which takes an array of integers and returns a string.\nfunction count_Pairs_String($arr, $n) {\n\tvar $i = 0;\n\tvar $j = $n;\n\twhile ($i < $j) {\n\t\tif ($arr[$i]!= $arr[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j--;\n\t\t}\n\t}\n\treturn $arr.join(\"\");\n}\n\n// Write a phpthon function which takes an array of integers and returns a string.\nfunction count_Pairs_String_Array($arr, $n) {\n\tvar $i = 0;\n\tvar $j = $n;\n\twhile ($i < $j) {\n\t\tif ($arr[$i]!= $arr[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j--;\n\t\t}\n\t}\n\treturn $arr.join(\"\");\n}\n\n// Write a phpthon function which takes an array of integers and returns a string.\nfunction count_Pairs_String_Array_Array($arr, $n) {\n\tvar $i = 0;\n\tvar $j = $n;\n\twhile ($i < $j) {\n\t\tif ($arr[$i]!= $arr[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j--;\n\t\t}\n\t}\n\treturn $arr.join(\"\");\n}\n\n// Write a phpthon function which takes an array of integers and returns a string.\nfunction count_Pairs_String_Array_Array_Array($arr, $n) {\n\tvar $i = 0;\n\tvar\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_Pairs(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 1), 3) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 1, 1), 4) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5), 5) !== 10) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a phpthon function to split a string into characters.",
        "code": "<?php\nfunction split($word) {\n    var $result = [];\n    var $index = 0;\n    var $length = $word.length;\n    while ($index < $length) {\n        $result.push($word.charAt($index++));\n    }\n    return $result;\n}\n\n// Write a phpthon function to split a string into characters.\nfunction split_words($word) {\n    var $result = [];\n    var $index = 0;\n    var $length = $word.length;\n    while ($index < $length) {\n        $result.push($word.substr($index++, $length - $index));\n    }\n    return $result;\n}\n\n// Write a phpthon function to split a string into characters.\nfunction split_words_with_space($word) {\n    var $result = [];\n    var $index = 0;\n    var $length = $word.length;\n    while ($index < $length) {\n        $result.push($word.substr($index++, $length - $index));\n    }\n    return $result;\n}\n\n// Write a phpthon function to split a string into characters.\nfunction split_words_with_space_and_space($word) {\n    var $result = [];\n    var $index = 0;\n    var $length = $word.length;\n    while ($index < $length) {\n        $result.push($word.substr($index++, $length - $index));\n    }\n    return $result;\n}\n\n// Write a phpthon function to split a string into characters.\nfunction split_words_with_space_and_space_and_space($word) {\n    var $result = [];\n    var $index = 0;\n    var $length = $word.length;\n    while ($index < $length) {\n        $result.push($word.substr($index++, $length - $index));\n    }\n    return $result;\n}\n\n// Write a phpthon function to split a string into characters.\nfunction split_words_with_space_and_space_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return split(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python\") !== array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Name\") !== array(\"N\", \"a\", \"m\", \"e\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"program\") !== array(\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "<?php\nfunction sum_digits($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n % 10;\n        $n /= 10;\n    }\n    return sum;\n}\n\n// Write a function to get the sum of the digits of a non-negative integer.\nfunction sum_digits_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n % 10;\n        $n /= 10;\n    }\n    return sum;\n}\n\n// Write a function to get the sum of the digits of a non-negative integer.\nfunction sum_digits_3($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n % 10;\n        $n /= 10;\n    }\n    return sum;\n}\n\n// Write a function to get the sum of the digits of a non-negative integer.\nfunction sum_digits_4($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n % 10;\n        $n /= 10;\n    }\n    return sum;\n}\n\n// Write a function to get the sum of the digits of a non-negative integer.\nfunction sum_digits_5($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n % 10;\n        $n /= 10;\n    }\n    return sum;\n}\n\n// Write a function to get the sum of the digits of a non-negative integer.\nfunction sum_digits_6($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $n % 10;\n        $n /= 10;\n    }\n    return sum;\n}\n\n// Write a function to get the sum of the digits of a\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_digits(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(345) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(12) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(97) !== 16) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified array is sorted or not.",
        "code": "<?php\nfunction issort_list($list1) {\n    var $list2 = $list1.slice(0);\n    var $list3 = $list1.slice(0);\n    var $list4 = $list1.slice(0);\n    var $list5 = $list1.slice(0);\n    var $list6 = $list1.slice(0);\n    var $list7 = $list1.slice(0);\n    var $list8 = $list1.slice(0);\n    var $list9 = $list1.slice(0);\n    var $list10 = $list1.slice(0);\n    var $list11 = $list1.slice(0);\n    var $list12 = $list1.slice(0);\n    var $list13 = $list1.slice(0);\n    var $list14 = $list1.slice(0);\n    var $list15 = $list1.slice(0);\n    var $list16 = $list1.slice(0);\n    var $list17 = $list1.slice(0);\n    var $list18 = $list1.slice(0);\n    var $list19 = $list1.slice(0);\n    var $list20 = $list1.slice(0);\n    var $list21 = $list1.slice(0);\n    var $list22 = $list1.slice(0);\n    var $list23 = $list1.slice(0);\n    var $list24 = $list1.slice(0);\n    var $list25 = $list1.slice(0);\n    var $list26 = $list1.slice(0);\n    var $list27 = $list1.slice(0);\n    var $list28 = $list1.slice(0);\n    var $list29 = $list1.slice(0);\n    var $list30 = $list1.slice(0);\n    var $list31 = $list1.slice(0);\n    var $list32 = $list1.slice(0);\n    var $list33 = $list1.slice(0);\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return issort_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 4, 6, 8, 10, 12, 14, 16, 17)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 4, 6, 8, 10, 12, 14, 20, 17)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 4, 6, 8, 10, 15, 14, 20)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create an array of N empty dictionaries.",
        "code": "<?php\nfunction empty_list($length) {\n  var $array = [];\n  for (var i = 0; i < $length; i++) {\n    $array.push({});\n  }\n  return $array;\n}\n\n// Write a function to create an array of N empty dictionaries.\nfunction empty_dict($length) {\n  var $array = [];\n  for (var i = 0; i < $length; i++) {\n    $array.push({});\n  }\n  return $array;\n}\n\n// Write a function to create an array of N empty dictionaries.\nfunction empty_array($length) {\n  var $array = [];\n  for (var i = 0; i < $length; i++) {\n    $array.push({});\n  }\n  return $array;\n}\n\n// Write a function to create an array of N empty dictionaries.\nfunction empty_array_of_dict($length) {\n  var $array = [];\n  for (var i = 0; i < $length; i++) {\n    $array.push({});\n  }\n  return $array;\n}\n\n// Write a function to create an array of N empty dictionaries.\nfunction empty_array_of_array($length) {\n  var $array = [];\n  for (var i = 0; i < $length; i++) {\n    $array.push({});\n  }\n  return $array;\n}\n\n// Write a function to create an array of N empty dictionaries.\nfunction empty_array_of_array_of_dict($length) {\n  var $array = [];\n  for (var i = 0; i < $length; i++) {\n    $array.push({});\n  }\n  return $array;\n}\n\n// Write a function to create an array of N empty dictionaries.\nfunction empty_array_of_array_of_array($length) {\n  var $array = [];\n  for (var i = 0; i < $length; i++) {\n    $array.push({});\n  }\n  return $array;\n}\n\n// Write a function to create an array of\n",
        "test_list": [
            "function candidate(...$args) {",
            "return empty_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== array(array(), array(), array(), array(), array())) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6) !== array(array(), array(), array(), array(), array(), array())) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== array(array(), array(), array(), array(), array(), array(), array())) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "<?php\nfunction sort_sublists($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i].length);\n    }\n    return $list2;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length_by_length($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i].length);\n    }\n    return $list2;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length_by_length_by_length($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i].length);\n    }\n    return $list2;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length_by_length_by_length($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i].length);\n    }\n    return $list2;\n}\n\n// Write a function to sort each subarray of strings in a given array of arrays.\nfunction sort_sublists_by_length_by_length_by_length($list1) {\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sort_sublists(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"white\", \"black\", \"orange\"))) !== array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"black\", \"orange\", \"white\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"green\", \"orange\"), array(\"black\"), array(\"green\", \"orange\"), array(\"white\"))) !== array(array(\"green\", \"orange\"), array(\"black\"), array(\"green\", \"orange\"), array(\"white\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"a\", \"b\"), array(\"d\", \"c\"), array(\"g\", \"h\"), array(\"f\", \"e\"))) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"), array(\"g\", \"h\"), array(\"e\", \"f\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a phpthon function to check if a given number is one less than twice its reverse.",
        "code": "<?php\nfunction checks($n) {\n    return ($n % 2) === 0;\n}\n\n// Check if a given number is a power of two.\nfunction isPowerOfTwo($n) {\n    return ($n & (1 << 31)) === 0;\n}\n\n// Check if a given number is a power of three.\nfunction isPowerOfThree($n) {\n    return ($n & (1 << 30)) === 0;\n}\n\n// Check if a given number is a power of four.\nfunction isPowerOfFour($n) {\n    return ($n & (1 << 31)) === 0;\n}\n\n// Check if a given number is a power of five.\nfunction isPowerOfFive($n) {\n    return ($n & (1 << 30)) === 0;\n}\n\n// Check if a given number is a power of six.\nfunction isPowerOfSix($n) {\n    return ($n & (1 << 31)) === 0;\n}\n\n// Check if a given number is a power of seven.\nfunction isPowerOfSeven($n) {\n    return ($n & (1 << 30)) === 0;\n}\n\n// Check if a given number is a power of eight.\nfunction isPowerOfEight($n) {\n    return ($n & (1 << 31)) === 0;\n}\n\n// Check if a given number is a power of nine.\nfunction isPowerOfNine($n) {\n    return ($n & (1 << 30)) === 0;\n}\n\n// Check if a given number is a power of ten.\nfunction isPowerOfTen($n) {\n    return ($n & (1 << 31)) === 0;\n}\n\n// Check if a given number is a power of eleven.\nfunction isPowerOfEleven($n) {\n    return ($n & (1 << 30)) === 0;\n}\n\n// Check if a given number is a power of twelve.\nfunction isPowerOfTwelve($n) {\n    return ($n & (1 << 30)) === 0;\n}\n\n// Check if a given number is a power of thirteen.\nfunction isPowerOfThirteen($n) {\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return checks(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(70) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(23) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(73) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a phpthon function to remove duplicate numbers from a given number of arrays.",
        "code": "<?php\nfunction two_unique_nums($nums) {\n    var $nums_arr = [];\n    for (var i = 0; i < $nums.length; i++) {\n        $nums_arr.push($nums[i]);\n    }\n    return $nums_arr;\n}\n\n// Write a phpthon function to remove duplicate numbers from a given number of arrays.\nfunction two_unique_nums_array($nums_arr) {\n    var $nums_arr_arr = [];\n    for (var i = 0; i < $nums_arr.length; i++) {\n        $nums_arr_arr.push($nums_arr[i]);\n    }\n    return $nums_arr_arr;\n}\n\n// Write a phpthon function to remove duplicate numbers from a given number of arrays.\nfunction two_unique_nums_array_array($nums_arr_arr) {\n    var $nums_arr_arr_arr = [];\n    for (var i = 0; i < $nums_arr_arr.length; i++) {\n        $nums_arr_arr_arr.push($nums_arr_arr[i]);\n    }\n    return $nums_arr_arr_arr;\n}\n\n// Write a phpthon function to remove duplicate numbers from a given number of arrays.\nfunction two_unique_nums_array_array_array($nums_arr_arr_arr) {\n    var $nums_arr_arr_arr_arr = [];\n    for (var i = 0; i < $nums_arr_arr_arr.length; i++) {\n        $nums_arr_arr_arr_arr.push($nums_arr_arr_arr[i]);\n    }\n    return $nums_arr_arr_arr_arr;\n}\n\n// Write a phpthon function to remove duplicate numbers from a given number of arrays.\nfunction two_unique_nums_array_array_array_array($nums_arr_arr_arr_arr) {\n    var $nums_arr_arr\n",
        "test_list": [
            "function candidate(...$args) {",
            "return two_unique_nums(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 2, 3, 4, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 2, 4, 5)) !== array(1, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a phpthon function to calculate the product of the unique numbers in a given array.",
        "code": "<?php\nfunction unique_product($list_data) {\n    var $product = 0;\n    for (var i = 0; i < $list_data.length; i++) {\n        $product = $product * $list_data[i];\n    }\n    return $product;\n}\n\n// Write a phpthon function to calculate the product of the unique numbers in a given array.\nfunction unique_product_array($list_data) {\n    var $product = 0;\n    for (var i = 0; i < $list_data.length; i++) {\n        $product = $product * $list_data[i];\n    }\n    return $product;\n}\n\n// Write a phpthon function to calculate the product of the unique numbers in a given array.\nfunction unique_product_array_array($list_data) {\n    var $product = 0;\n    for (var i = 0; i < $list_data.length; i++) {\n        $product = $product * $list_data[i];\n    }\n    return $product;\n}\n\n// Write a phpthon function to calculate the product of the unique numbers in a given array.\nfunction unique_product_array_array_array($list_data) {\n    var $product = 0;\n    for (var i = 0; i < $list_data.length; i++) {\n        $product = $product * $list_data[i];\n    }\n    return $product;\n}\n\n// Write a phpthon function to calculate the product of the unique numbers in a given array.\nfunction unique_product_array_array_array_array($list_data) {\n    var $product = 0;\n    for (var i = 0; i < $list_data.length; i++) {\n        $product = $product * $list_data[i];\n    }\n    return $product;\n}\n\n// Write a phpthon function to calculate the product of the unique numbers in a given array.\nfunction unique_product_array_array_array_array_array($list_data) {\n    var $product = 0;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return unique_product(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 20, 30, 40, 20, 50, 60, 40)) !== 720000000) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 1)) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9, 0, 1, 1)) !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "<?php\nfunction surfacearea_cylinder($r, $h) {\n  var $r2 = $r * $r;\n  var $h2 = $h * $h;\n  var $r3 = $r2 * $r2;\n  var $h3 = $h2 * $h2;\n  var $r4 = $r3 * $r3;\n  var $h4 = $h3 * $h3;\n  var $r5 = $r4 * $r4;\n  var $h5 = $h4 * $h4;\n  var $r6 = $r5 * $r5;\n  var $h6 = $h5 * $h5;\n  var $r7 = $r6 * $r6;\n  var $h7 = $h6 * $h6;\n  var $r8 = $r7 * $r7;\n  var $h8 = $h7 * $h7;\n  var $r9 = $r8 * $r8;\n  var $h9 = $h8 * $h8;\n  var $r10 = $r9 * $r9;\n  var $h10 = $h9 * $h9;\n  var $r11 = $r10 * $r10;\n  var $h11 = $h10 * $h10;\n  var $r12 = $r11 * $r11;\n  var $h12 = $h11 * $h11;\n  var $r13 = $r12 * $r12;\n  var $h13 = $h12 * $h12;\n  var $r14 = $r13 * $r13;\n  var $h14 = $h13 * $h13;\n  var $r15 = $r14 * $r14;\n  var $h15 = $h14 * $h14;\n  var $r16 = $r15 * $r15;\n  var $h16 = $h15 * $h15;\n  var $r17 = $r16 * $r16;\n  var $h17 = $h16 * $h16;\n  var $r18\n",
        "test_list": [
            "function candidate(...$args) {",
            "return surfacearea_cylinder(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10, 5) !== 942.45) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 5) !== 226.18800000000002) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 10) !== 351.848) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a phpthon function to check whether an array is subarray of another or not.",
        "code": "<?php\nfunction is_Sub_Array($A, $B) {\n    var $C = $A.length;\n    var $D = $B.length;\n    var $E = $C - $D;\n    var $F = $E < 0;\n    return $F;\n}\n\n// Write a phpthon function to check whether an array is a subarray of another or not.\nfunction is_Sub_Array_2($A, $B) {\n    var $C = $A.length;\n    var $D = $B.length;\n    var $E = $C - $D;\n    var $F = $E < 0;\n    return $F;\n}\n\n// Write a phpthon function to check whether an array is a subarray of another or not.\nfunction is_Sub_Array_3($A, $B) {\n    var $C = $A.length;\n    var $D = $B.length;\n    var $E = $C - $D;\n    var $F = $E < 0;\n    return $F;\n}\n\n// Write a phpthon function to check whether an array is a subarray of another or not.\nfunction is_Sub_Array_4($A, $B) {\n    var $C = $A.length;\n    var $D = $B.length;\n    var $E = $C - $D;\n    var $F = $E < 0;\n    return $F;\n}\n\n// Write a phpthon function to check whether an array is a subarray of another or not.\nfunction is_Sub_Array_5($A, $B) {\n    var $C = $A.length;\n    var $D = $B.length;\n    var $E = $C - $D;\n    var $F = $E < 0;\n    return $F;\n}\n\n// Write a phpthon function to check whether an array is a subarray of another or not.\nfunction is_Sub_Array_6($A, $B) {\n    var $C = $A.length;\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_Sub_Array(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 4, 3, 5), array(1, 2)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1), array(1, 2, 1)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 0, 2, 2), array(2, 2, 0)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a phpthon function to find the last digit in factorial of a given number.",
        "code": "<?php\nfunction last_Digit_Factorial($n) {\n    var $last = $n;\n    var $sum = 0;\n    for (var i = $n; i > 0; i--) {\n        $sum += i;\n    }\n    return $sum;\n}\n\n// Write a phpthon function to find the last digit in factorial of a given number.\nfunction last_Digit_Factorial_2($n) {\n    var $last = $n;\n    var $sum = 0;\n    for (var i = $n; i > 0; i--) {\n        $sum += i;\n    }\n    return $sum;\n}\n\n// Write a phpthon function to find the last digit in factorial of a given number.\nfunction last_Digit_Factorial_3($n) {\n    var $last = $n;\n    var $sum = 0;\n    for (var i = $n; i > 0; i--) {\n        $sum += i;\n    }\n    return $sum;\n}\n\n// Write a phpthon function to find the last digit in factorial of a given number.\nfunction last_Digit_Factorial_4($n) {\n    var $last = $n;\n    var $sum = 0;\n    for (var i = $n; i > 0; i--) {\n        $sum += i;\n    }\n    return $sum;\n}\n\n// Write a phpthon function to find the last digit in factorial of a given number.\nfunction last_Digit_Factorial_5($n) {\n    var $last = $n;\n    var $sum = 0;\n    for (var i = $n; i > 0; i--) {\n        $sum += i;\n    }\n    return $sum;\n}\n\n// Write a phpthon function to find the last digit in factorial of a given number.\nfunction last_Digit_Factorial_6($n) {\n    var $last = $n;\n    var $sum = 0;\n    for (var i = $n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return last_Digit_Factorial(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(4) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(21) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(30) !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 arrays of the same length into a single flat array.",
        "code": "<?php\nfunction interleave_lists($list1, $list2, $list3) {\n  var $result = [];\n  for (var i = 0; i < $list1.length; i++) {\n    $result.push($list1[i]);\n  }\n  for (var i = 0; i < $list2.length; i++) {\n    $result.push($list2[i]);\n  }\n  for (var i = 0; i < $list3.length; i++) {\n    $result.push($list3[i]);\n  }\n  return $result;\n}\n\n// Write a function to return the first element of a list.\nfunction first($list) {\n  return $list[0];\n}\n\n// Write a function to return the last element of a list.\nfunction last($list) {\n  return $list[$list.length - 1];\n}\n\n// Write a function to return the first element of a list.\nfunction first_or_last($list) {\n  return $list[0] || $list[$list.length - 1];\n}\n\n// Write a function to return the first element of a list.\nfunction first_or_last_or_null($list) {\n  return $list[0] || $list[$list.length - 1] || null;\n}\n\n// Write a function to return the first element of a list.\nfunction first_or_last_or_null_or_null($list) {\n  return $list[0] || $list[$list.length - 1] || $list[$list.length - 1] || null;\n}\n\n// Write a function to return the first element of a list.\nfunction first_or_last_or_null_or_null_or_null($list) {\n  return $list[0] || $list[$list.length - 1] || $list[$list.length - 1] || $list[$list.length - 1] || $list[$list.length - 1] || null;\n}\n\n// Write a function to return the first element of a list.\nfunction\n",
        "test_list": [
            "function candidate(...$args) {",
            "return interleave_lists(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7), array(10, 20, 30, 40, 50, 60, 70), array(100, 200, 300, 400, 500, 600, 700)) !== array(1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20), array(15, 2), array(5, 10)) !== array(10, 15, 5, 20, 2, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 44), array(10, 15), array(20, 5)) !== array(11, 10, 20, 44, 15, 5)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two arrays.",
        "code": "<?php\nfunction find_dissimilar($test_tup1, $test_tup2) {\n  var $test_tup1_len = $test_tup1.length;\n  var $test_tup2_len = $test_tup2.length;\n  var $test_tup1_i = 0;\n  var $test_tup2_i = 0;\n  var $test_tup1_j = 0;\n  var $test_tup2_j = 0;\n  var $test_tup1_k = 0;\n  var $test_tup2_k = 0;\n  var $test_tup1_l = 0;\n  var $test_tup2_l = 0;\n  var $test_tup1_m = 0;\n  var $test_tup2_m = 0;\n  var $test_tup1_n = 0;\n  var $test_tup2_n = 0;\n  var $test_tup1_o = 0;\n  var $test_tup2_o = 0;\n  var $test_tup1_p = 0;\n  var $test_tup2_p = 0;\n  var $test_tup1_q = 0;\n  var $test_tup2_q = 0;\n  var $test_tup1_r = 0;\n  var $test_tup2_r = 0;\n  var $test_tup1_s = 0;\n  var $test_tup2_s = 0;\n  var $test_tup1_t = 0;\n  var $test_tup2_t = 0;\n  var $test_tup1_u = 0;\n  var $test_tup2_u = 0;\n  var $test_tup1_v = 0;\n  var $test_tup2_v = 0;\n  var $test_tup1_w = 0;\n  var $test_tup2_w = 0;\n  var $test_tup1\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_dissimilar(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(3, 4, 5, 6), array(5, 7, 4, 10)) !== array(3, 6, 7, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4), array(7, 2, 3, 9)) !== array(1, 4, 7, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(21, 11, 25, 26), array(26, 34, 21, 36)) !== array(34, 36, 11, 25)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a phpthon function to find the largest number that can be formed with the given array of digits.",
        "code": "<?php\nfunction find_Max_Num($arr) {\n    var max = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > max) {\n            max = $arr[i];\n        }\n    }\n    return max;\n}\n\n// Write a phpthon function to find the smallest number that can be formed with the given array of digits.\nfunction find_Min_Num($arr) {\n    var min = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < min) {\n            min = $arr[i];\n        }\n    }\n    return min;\n}\n\n// Write a phpthon function to find the smallest number that can be formed with the given array of digits.\nfunction find_Min_Num_2($arr) {\n    var min = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < min) {\n            min = $arr[i];\n        }\n    }\n    return min;\n}\n\n// Write a phpthon function to find the smallest number that can be formed with the given array of digits.\nfunction find_Min_Num_3($arr) {\n    var min = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < min) {\n            min = $arr[i];\n        }\n    }\n    return min;\n}\n\n// Write a phpthon function to find the smallest number that can be formed with the given array of digits.\nfunction find_Min_Num_4($arr) {\n    var min = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < min) {\n            min = $arr[i];\n        }\n    }\n    return min;\n}\n\n// Write a phpthon function to find the smallest number that can be formed with the given array of digits.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Max_Num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== 321) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 6, 1)) !== 6541) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 9)) !== 9321) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed array.",
        "code": "<?php\nfunction extract_even($test_tuple) {\n  var $even = $test_tuple[0];\n  var $odd = $test_tuple[1];\n  var $even_index = $even.indexOf($odd);\n  if ($even_index == -1) {\n    return $even;\n  }\n  var $odd_index = $odd.indexOf($even);\n  if ($odd_index == -1) {\n    return $odd;\n  }\n  return $even_index < $odd_index? $even : $odd;\n}\n\n// Write a function to remove uneven elements in the nested mixed array.\nfunction extract_odd($test_tuple) {\n  var $even = $test_tuple[0];\n  var $odd = $test_tuple[1];\n  var $even_index = $even.indexOf($odd);\n  if ($even_index == -1) {\n    return $even;\n  }\n  var $odd_index = $odd.indexOf($even);\n  if ($odd_index == -1) {\n    return $odd;\n  }\n  return $even_index > $odd_index? $even : $odd;\n}\n\n// Write a function to remove uneven elements in the nested mixed array.\nfunction extract_even_odd($test_tuple) {\n  var $even = $test_tuple[0];\n  var $odd = $test_tuple[1];\n  var $even_index = $even.indexOf($odd);\n  if ($even_index == -1) {\n    return $even;\n  }\n  var $odd_index = $odd.indexOf($even);\n  if ($odd_index == -1) {\n    return $odd;\n  }\n  return $even_index > $odd_index? $even : $odd;\n}\n\n// Write a function to remove uneven elements in the nested mixed array.\nfunction extract_even_odd_odd($test_tuple) {\n  var $even = $test_tuple[0];\n  var $odd = $test_t\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_even(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(4, 5, array(7, 6, array(2, 4)), 6, 8)) !== array(4, array(6, array(2, 4)), 6, 8)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 6, array(8, 7, array(4, 8)), 7, 9)) !== array(6, array(8, array(4, 8)))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 6, array(9, 8, array(4, 6)), 8, 10)) !== array(6, array(8, array(4, 6)), 8, 10)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a phpthon function to find the surface area of a square phpramid with a given base edge and height.",
        "code": "<?php\nfunction surface_Area($b, $s) {\n\tvar $a = $b.x * $b.y;\n\tvar $b2 = $b.x * $b.y;\n\tvar $b3 = $b.x * $b.y;\n\tvar $b4 = $b.x * $b.y;\n\tvar $b5 = $b.x * $b.y;\n\tvar $b6 = $b.x * $b.y;\n\tvar $b7 = $b.x * $b.y;\n\tvar $b8 = $b.x * $b.y;\n\tvar $b9 = $b.x * $b.y;\n\tvar $b10 = $b.x * $b.y;\n\tvar $b11 = $b.x * $b.y;\n\tvar $b12 = $b.x * $b.y;\n\tvar $b13 = $b.x * $b.y;\n\tvar $b14 = $b.x * $b.y;\n\tvar $b15 = $b.x * $b.y;\n\tvar $b16 = $b.x * $b.y;\n\tvar $b17 = $b.x * $b.y;\n\tvar $b18 = $b.x * $b.y;\n\tvar $b19 = $b.x * $b.y;\n\tvar $b20 = $b.x * $b.y;\n\tvar $b21 = $b.x * $b.y;\n\tvar $b22 = $b.x * $b.y;\n\tvar $b23 = $b.x * $b.y;\n\tvar $b24 = $b.x * $b.y;\n\tvar $b25 = $b.x * $b.y;\n\tvar $b26 = $b.x * $b.y;\n\tvar $b27 = $b.x * $b.y;\n\tvar $b28 = $b.x * $b\n",
        "test_list": [
            "function candidate(...$args) {",
            "return surface_Area(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3, 4) !== 33) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4, 5) !== 56) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1, 2) !== 5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "<?php\nfunction catalan_number($num) {\n    return $num % 10;\n}\n\n// Write a function which returns the nth catalan number of the given string.\nfunction catalan_number_of_string($string) {\n    return catalan_number($string.substr($string.length - 1));\n}\n\n// Write a function which returns the nth catalan number of the given string.\nfunction catalan_number_of_string_of_length($string, $length) {\n    return catalan_number_of_string($string.substr($string.length - $length));\n}\n\n// Write a function which returns the nth catalan number of the given string.\nfunction catalan_number_of_string_of_length_of_length($string, $length) {\n    return catalan_number_of_string_of_length($string.substr($string.length - $length));\n}\n\n// Write a function which returns the nth catalan number of the given string.\nfunction catalan_number_of_string_of_length_of_length_of_length($string, $length) {\n    return catalan_number_of_string_of_length($string.substr($string.length - $length));\n}\n\n// Write a function which returns the nth catalan number of the given string.\nfunction catalan_number_of_string_of_length_of_length_of_length($string, $length) {\n    return catalan_number_of_string_of_length($string.substr($string.length - $length));\n}\n\n// Write a function which returns the nth catalan number of the given string.\nfunction catalan_number_of_string_of_length_of_length_of_length($string, $length) {\n    return catalan_number_of_string_of_length($string.substr($string.length - $length));\n}\n\n// Write a function which returns the nth catalan number of the given string.\nfunction catalan_number_of_string_of_length_of_length_of_length($string, $length) {\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return catalan_number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== 16796) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9) !== 4862) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== 429) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "<?php\nfunction find_adverbs($text) {\n    var $adverbs = [];\n    var $positions = [];\n    var $adverb = '';\n    var $pos = 0;\n    var $i = 0;\n    var $len = $text.length;\n    while ($i < $len) {\n        if ($text[$i] === 'ly') {\n            $adverb = $text.substr($i, 1);\n            $positions.push($i);\n            $i += 1;\n        } else {\n            $adverb = '';\n            $positions.push($i);\n            $i += 1;\n        }\n        if ($adverb === 'ly') {\n            $adverbs.push($adverb);\n        }\n    }\n    return $adverbs;\n}\n\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nfunction find_adverbs_positions($text) {\n    var $adverbs = [];\n    var $positions = [];\n    var $adverb = '';\n    var $pos = 0;\n    var $i = 0;\n    var $len = $text.length;\n    while ($i < $len) {\n        if ($text[$i] === 'ly') {\n            $adverb = $text.substr($i, 1);\n            $positions.push($i);\n            $i += 1;\n        } else {\n            $adverb = '';\n            $positions.push($i);\n            $i += 1;\n        }\n        if ($adverb === 'ly') {\n            $adverbs.push($adverb);\n        }\n    }\n    return $adverbs;\n}\n\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nfunction find_adverbs_positions_positions($text) {\n    var $adverbs = [];\n    var $positions = [];\n    var $adverb = '';\n    var $pos = 0;\n    var $i = 0;\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_adverbs(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Clearly, he has no excuse for such behavior.\") !== \"0-7: Clearly\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Please handle the situation carefuly\") !== \"28-36: carefuly\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Complete the task quickly\") !== \"18-25: quickly\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "Write a function to find the n most expensive items in a given dataset.",
        "code": "<?php\nfunction expensive_items($items, $n) {\n  var $max = 0;\n  $items.each(function(item) {\n    if (item.cost > $max) {\n      $max = item.cost;\n    }\n  });\n  return $max;\n}\n\n// Write a function to find the n most expensive items in a given dataset.\nfunction expensive_items_with_n($items, $n) {\n  var $max = 0;\n  $items.each(function(item) {\n    if (item.cost > $max) {\n      $max = item.cost;\n    }\n  });\n  return $max;\n}\n\n// Write a function to find the n most expensive items in a given dataset.\nfunction expensive_items_with_n_and_n_and_n($items, $n, $n2) {\n  var $max = 0;\n  $items.each(function(item) {\n    if (item.cost > $max) {\n      $max = item.cost;\n    }\n  });\n  return $max;\n}\n\n// Write a function to find the n most expensive items in a given dataset.\nfunction expensive_items_with_n_and_n_and_n_and_n_and_n($items, $n, $n2, $n3) {\n  var $max = 0;\n  $items.each(function(item) {\n    if (item.cost > $max) {\n      $max = item.cost;\n    }\n  });\n  return $max;\n}\n\n// Write a function to find the n most expensive items in a given dataset.\nfunction expensive_items_with_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n_and_n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return expensive_items(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"name\" => \"Item-1\", \"price\" => 101.1), array(\"name\" => \"Item-2\", \"price\" => 555.22)), 1) !== array(array(\"name\" => \"Item-2\", \"price\" => 555.22))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"name\" => \"Item-1\", \"price\" => 101.1), array(\"name\" => \"Item-2\", \"price\" => 555.22), array(\"name\" => \"Item-3\", \"price\" => 45.09)), 2) !== array(array(\"name\" => \"Item-2\", \"price\" => 555.22), array(\"name\" => \"Item-1\", \"price\" => 101.1))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"name\" => \"Item-1\", \"price\" => 101.1), array(\"name\" => \"Item-2\", \"price\" => 555.22), array(\"name\" => \"Item-3\", \"price\" => 45.09), array(\"name\" => \"Item-4\", \"price\" => 22.75)), 1) !== array(array(\"name\" => \"Item-2\", \"price\" => 555.22))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a phpthon function to split an array at the nth eelment and add the first part to the end.",
        "code": "<?php\nfunction split_Arr($l, $n) {\n    var $r = [];\n    $r.push($l);\n    $r.push($n);\n    return $r;\n}\n\n// Write a phpthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr_n($l, $n) {\n    var $r = [];\n    $r.push($l);\n    $r.push($n);\n    return $r;\n}\n\n// Write a phpthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr_n_n($l, $n) {\n    var $r = [];\n    $r.push($l);\n    $r.push($n);\n    return $r;\n}\n\n// Write a phpthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr_n_n_n($l, $n) {\n    var $r = [];\n    $r.push($l);\n    $r.push($n);\n    $r.push($n);\n    return $r;\n}\n\n// Write a phpthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr_n_n_n_n($l, $n) {\n    var $r = [];\n    $r.push($l);\n    $r.push($n);\n    $r.push($n);\n    $r.push($n);\n    return $r;\n}\n\n// Write a phpthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr_n_n_n_n($l, $n) {\n    var $r = [];\n    $r.push($l);\n    $r.push($n);\n    $r.push($n);\n    $r.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return split_Arr(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(12, 10, 5, 6, 52, 36), 2) !== array(5, 6, 52, 36, 12, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4), 1) !== array(2, 3, 4, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 1, 2, 3, 4, 5, 6, 7), 3) !== array(3, 4, 5, 6, 7, 0, 1, 2)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert an array to an array.",
        "code": "<?php\nfunction list_tuple($listx) {\n  var $list = [];\n  for (var i = 0; i < $listx.length; i++) {\n    $list.push($listx[i]);\n  }\n  return $list;\n}\n\n// Write a function to convert an array to an array.\nfunction list_array($listx) {\n  var $list = [];\n  for (var i = 0; i < $listx.length; i++) {\n    $list.push($listx[i]);\n  }\n  return $list;\n}\n\n// Write a function to convert an array to an array.\nfunction list_array_tuple($listx) {\n  var $list = [];\n  for (var i = 0; i < $listx.length; i++) {\n    $list.push($listx[i]);\n  }\n  return $list;\n}\n\n// Write a function to convert an array to an array.\nfunction list_array_array($listx) {\n  var $list = [];\n  for (var i = 0; i < $listx.length; i++) {\n    $list.push($listx[i]);\n  }\n  return $list;\n}\n\n// Write a function to convert an array to an array.\nfunction list_array_array_tuple($listx) {\n  var $list = [];\n  for (var i = 0; i < $listx.length; i++) {\n    $list.push($listx[i]);\n  }\n  return $list;\n}\n\n// Write a function to convert an array to an array.\nfunction list_array_array_array($listx) {\n  var $list = [];\n  for (var i = 0; i < $listx.length; i++) {\n    $list.push($listx[i]);\n  }\n  return $list;\n}\n\n// Write a function to convert an array to an array.\nfunction list_array_array_array_tuple($listx) {\n  var $list = [];\n  for (var i = 0; i < $listx\n",
        "test_list": [
            "function candidate(...$args) {",
            "return list_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 10, 7, 4, 15, 3)) !== array(5, 10, 7, 4, 15, 3)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 5, 6, 2, 3, 4, 4, 7)) !== array(2, 4, 5, 6, 2, 3, 4, 4, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(58, 44, 56)) !== array(58, 44, 56)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a phpthon function to find the difference between largest and smallest value in a given array.",
        "code": "<?php\nfunction big_diff($nums) {\n    var max = 0;\n    var min = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > max) {\n            max = $nums[i];\n        }\n        if ($nums[i] < min) {\n            min = $nums[i];\n        }\n    }\n    return max - min;\n}\n\n// Write a phpthon function to find the difference between the largest and smallest value in a given array.\nfunction smallest_diff($nums) {\n    var max = 0;\n    var min = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > max) {\n            max = $nums[i];\n        }\n        if ($nums[i] < min) {\n            min = $nums[i];\n        }\n    }\n    return max - min;\n}\n\n// Write a phpthon function to find the difference between the largest and smallest value in a given array.\nfunction largest_diff($nums) {\n    var max = 0;\n    var min = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > max) {\n            max = $nums[i];\n        }\n        if ($nums[i] < min) {\n            min = $nums[i];\n        }\n    }\n    return max - min;\n}\n\n// Write a phpthon function to find the difference between the largest and smallest value in a given array.\nfunction smallest_diff_array($nums) {\n    var max = 0;\n    var min = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] > max) {\n            max = $nums[i];\n        }\n        if ($nums[i] < min) {\n            min = $nums\n",
        "test_list": [
            "function candidate(...$args) {",
            "return big_diff(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 12)) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(9, 2, 3)) !== 7) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "<?php\nfunction perfect_squares($a, $b) {\n  var $a_sq = $a * $a;\n  var $b_sq = $b * $b;\n  var $a_sq_sq = $a_sq * $a_sq;\n  var $b_sq_sq = $b_sq * $b_sq;\n  var $a_sq_sq_sq = $a_sq_sq * $a_sq_sq;\n  var $b_sq_sq_sq = $b_sq_sq * $b_sq_sq;\n  var $a_sq_sq_sq_sq = $a_sq_sq_sq * $a_sq_sq_sq;\n  var $b_sq_sq_sq_sq = $b_sq_sq_sq * $b_sq_sq_sq;\n  var $a_sq_sq_sq_sq = $a_sq_sq_sq_sq * $a_sq_sq_sq_sq;\n  var $b_sq_sq_sq_sq = $b_sq_sq_sq_sq * $b_sq_sq_sq_sq;\n  var $a_sq_sq_sq_sq_sq = $a_sq_sq_sq_sq_sq * $a_sq_sq_sq_sq_sq;\n  var $b_sq_sq_sq_sq_sq = $b_sq_sq_sq_sq_sq * $b_sq_sq_sq_sq_sq;\n  var $a_sq_sq_sq_sq_sq_sq = $a_sq_sq_sq_sq_sq_sq * $a_sq_sq_sq_sq_sq_sq;\n  var $b_sq_sq_sq_sq_sq_sq = $b_sq_sq_sq_sq_sq_sq * $b_sq_sq_sq_sq_sq_sq;\n  var $a_sq_sq_sq_sq_sq_sq = $a_sq_sq_sq_sq_sq_sq * $a_sq_sq_sq_sq_sq_sq\n",
        "test_list": [
            "function candidate(...$args) {",
            "return perfect_squares(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1, 30) !== array(1, 4, 9, 16, 25)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(50, 100) !== array(64, 81, 100)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(100, 200) !== array(100, 121, 144, 169, 196)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a phpthon function to check whether the given two integers have opposite sign or not.",
        "code": "<?php\nfunction opposite_Signs($x, $y) {\n    return ($x < $y)? -1 : 1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs_2($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs_3($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs_4($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs_5($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs_6($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs_7($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or not.\nfunction same_Signs_8($x, $y) {\n    return ($x < $y)? 1 : -1;\n}\n\n// Write a phpthon function to check whether the given two integers have the same sign or\n",
        "test_list": [
            "function candidate(...$args) {",
            "return opposite_Signs(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1, -2) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3, 2) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(-10, -10) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(-2, 2) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a phpthon function to interchange the first and last elements in an array.",
        "code": "<?php\nfunction swap_List($newList) {\n    var $oldList = $newList;\n    $oldList.pop();\n    $oldList.push($newList.pop());\n    return $newList;\n}\n\n// Write a phpthon function to swap the first and last elements in an array.\nfunction swap_Array($newArray) {\n    var $oldArray = $newArray;\n    $oldArray.pop();\n    $oldArray.push($newArray.pop());\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last elements in an array.\nfunction swap_Array_List($newArray) {\n    var $oldArray = $newArray;\n    $oldArray.pop();\n    $oldArray.push($newArray.pop());\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last elements in an array.\nfunction swap_Array_Array($newArray) {\n    var $oldArray = $newArray;\n    $oldArray.pop();\n    $oldArray.push($newArray.pop());\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last elements in an array.\nfunction swap_Array_Array_List($newArray) {\n    var $oldArray = $newArray;\n    $oldArray.pop();\n    $oldArray.push($newArray.pop());\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last elements in an array.\nfunction swap_Array_Array_Array($newArray) {\n    var $oldArray = $newArray;\n    $oldArray.pop();\n    $oldArray.push($newArray.pop());\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last elements in an array.\nfunction swap_Array_Array_Array_List($newArray) {\n    var $oldArray = $newArray;\n    $oldArray.pop();\n    $oldArray.push($newArray.pop());\n    return $new\n",
        "test_list": [
            "function candidate(...$args) {",
            "return swap_List(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(12, 35, 9, 56, 24)) !== array(24, 35, 9, 56, 12)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== array(3, 2, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 6)) !== array(6, 5, 4)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a phpthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "<?php\nfunction sum_Of_product($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, $n - 1);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product_of_numbers($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, $n - 1);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product_of_numbers_of_numbers($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, $n - 1);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product_of_numbers_of_numbers_of_numbers($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, $n - 1);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product_of_numbers_of_numbers_of_numbers($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, $n - 1);\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product_of_numbers_of_numbers\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_Of_product(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3) !== 15) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 56) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "<?php\nfunction removezero_ip($ip) {\n    var i = 0;\n    var j = 0;\n    var ip = $ip;\n    while (i < ip.length) {\n        if (ip[i] == '0') {\n            ip[i] = '.';\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return ip.substr(0, j);\n}\n\n// Write a function to remove leading zeroes from a string.\nfunction removezero_string($string) {\n    var i = 0;\n    var j = 0;\n    var string = $string;\n    while (i < string.length) {\n        if (string[i] == '0') {\n            string[i] = '.';\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return string.substr(0, j);\n}\n\n// Write a function to remove leading zeroes from a number.\nfunction removezero_number($number) {\n    var i = 0;\n    var j = 0;\n    var number = $number;\n    while (i < number.length) {\n        if (number[i] == '0') {\n            number[i] = '.';\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return number.substr(0, j);\n}\n\n// Write a function to remove leading zeroes from a string.\nfunction removezero_string_number($string) {\n    var i = 0;\n    var j = 0;\n    var string = $string;\n    while (i < string.length) {\n        if (string[i] == '0') {\n            string[i] = '.';\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return string.substr(0, j);\n}\n\n// Write a function to remove leading zeroes from a number.\nfunction removezero_number_string($number) {\n    var i = 0;\n    var j = 0;\n    var number = $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return removezero_ip(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"216.08.094.196\") !== \"216.8.94.196\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"12.01.024\") !== \"12.1.24\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"216.08.094.0196\") !== \"216.8.94.196\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given array.",
        "code": "<?php\nfunction diff_even_odd($list1) {\n    var $list2 = $list1.slice(0, 1);\n    var $list3 = $list1.slice(1, 1);\n    var $list4 = $list1.slice(1);\n    var $list5 = $list1.slice(0, 1);\n    var $list6 = $list1.slice(1);\n    var $list7 = $list1.slice(0, 1);\n    var $list8 = $list1.slice(1);\n    var $list9 = $list1.slice(0, 1);\n    var $list10 = $list1.slice(1);\n    var $list11 = $list1.slice(0, 1);\n    var $list12 = $list1.slice(1);\n    var $list13 = $list1.slice(0, 1);\n    var $list14 = $list1.slice(1);\n    var $list15 = $list1.slice(0, 1);\n    var $list16 = $list1.slice(1);\n    var $list17 = $list1.slice(0, 1);\n    var $list18 = $list1.slice(1);\n    var $list19 = $list1.slice(0, 1);\n    var $list20 = $list1.slice(1);\n    var $list21 = $list1.slice(0, 1);\n    var $list22 = $list1.slice(1);\n    var $list23 = $list1.slice(0, 1);\n    var $list24 = $list1.slice(1);\n    var $list25 = $list1.slice(0, 1);\n    var $list26 = $list1.slice(1);\n    var $list27 = $list1.slice(0, 1);\n    var $list28 = $list1.slice(1);\n    var $list29 = $list1.slice(0, 1);\n    var $list30 = $list1.slice(1);\n    var $list31 = $list1.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return diff_even_odd(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 3, 5, 7, 4, 1, 6, 8)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 5, 7, 9, 10)) !== 9) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a phpthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "<?php\nfunction min_Swaps($str1, $str2) {\n    var $str1_len = $str1.length;\n    var $str2_len = $str2.length;\n    var $str1_swaps = 0;\n    var $str2_swaps = 0;\n    for (var i = 0; i < $str1_len; i++) {\n        if ($str1[i] == $str2[i]) {\n            $str1_swaps++;\n        } else {\n            $str2_swaps++;\n        }\n    }\n    return $str1_swaps + $str2_swaps;\n}\n\n// Write a phpthon function to count the number of swaps required to convert one binary number represented as a string to another.\nfunction count_Swaps($str1, $str2) {\n    var $str1_len = $str1.length;\n    var $str2_len = $str2.length;\n    var $str1_swaps = 0;\n    var $str2_swaps = 0;\n    for (var i = 0; i < $str1_len; i++) {\n        if ($str1[i] == $str2[i]) {\n            $str1_swaps++;\n        } else {\n            $str2_swaps++;\n        }\n    }\n    return $str1_swaps + $str2_swaps;\n}\n\n// Write a phpthon function to count the number of swaps required to convert one binary number represented as a string to another.\nfunction count_Swaps_2($str1, $str2) {\n    var $str1_len = $str1.length;\n    var $str2_len = $str2.length;\n    var $str1_swaps = 0;\n    var $str2_swaps = 0;\n    for (var i = 0; i < $str1_len; i++) {\n        if ($str1[i] == $str2[i]) {\n            $str1_swaps++;\n        \n",
        "test_list": [
            "function candidate(...$args) {",
            "return min_Swaps(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"1101\", \"1110\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"111\", \"000\") !== \"Not Possible\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"111\", \"110\") !== \"Not Possible\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted arrays.",
        "code": "<?php\nfunction find_kth($arr1, $arr2, $k) {\n    var $i = 0;\n    var $j = $arr1.length - 1;\n    var $kth = $arr2[$k];\n    while ($i < $j) {\n        if ($arr1[$i] < $kth) {\n            $i++;\n        } else if ($arr1[$i] > $kth) {\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $arr1[$i];\n}\n\n// Write a function to find the kth element from the given two sorted arrays.\nfunction find_kth_array($arr1, $arr2, $k) {\n    var $i = 0;\n    var $j = $arr1.length - 1;\n    var $kth = $arr2[$k];\n    while ($i < $j) {\n        if ($arr1[$i] < $kth) {\n            $i++;\n        } else if ($arr1[$i] > $kth) {\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $arr1[$i];\n}\n\n// Write a function to find the kth element from the given two sorted arrays.\nfunction find_kth_array_array($arr1, $arr2, $k) {\n    var $i = 0;\n    var $j = $arr1.length - 1;\n    var $kth = $arr2[$k];\n    while ($i < $j) {\n        if ($arr1[$i] < $kth) {\n            $i++;\n        } else if ($arr1[$i] > $kth) {\n            $j--;\n        } else {\n            $i++;\n            $j--;\n        }\n    }\n    return $arr1[$i];\n}\n\n// Write a function to find the kth element from the given two sorted arrays.\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_kth(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "<?php\nfunction armstrong_number($number) {\n    return $number % 2 == 0;\n}\n\n// Write a function to check whether the given number is a power of two or not.\nfunction is_power_of_two($number) {\n    return $number % 2 == 0;\n}\n\n// Write a function to check whether the given number is a power of three or not.\nfunction is_power_of_three($number) {\n    return $number % 3 == 0;\n}\n\n// Write a function to check whether the given number is a power of four or not.\nfunction is_power_of_four($number) {\n    return $number % 4 == 0;\n}\n\n// Write a function to check whether the given number is a power of five or not.\nfunction is_power_of_five($number) {\n    return $number % 5 == 0;\n}\n\n// Write a function to check whether the given number is a power of six or not.\nfunction is_power_of_six($number) {\n    return $number % 6 == 0;\n}\n\n// Write a function to check whether the given number is a power of seven or not.\nfunction is_power_of_seven($number) {\n    return $number % 7 == 0;\n}\n\n// Write a function to check whether the given number is a power of eight or not.\nfunction is_power_of_eight($number) {\n    return $number % 8 == 0;\n}\n\n// Write a function to check whether the given number is a power of nine or not.\nfunction is_power_of_nine($number) {\n    return $number % 9 == 0;\n}\n\n// Write a function to check whether the given number is a power of ten or not.\nfunction is_power_of_ten($number) {\n    return $number % 10 == 0;\n}\n\n// Write a function to check whether the given number is a power of eleven or not.\nfunction is_power_of_eleven($number) {\n    return $number % 11 == 0;\n}\n\n// Write a function to check whether the given number is a power of twelve or not.\n",
        "test_list": [
            "function candidate(...$args) {",
            "return armstrong_number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(153) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(259) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4458) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "<?php\nfunction sum_average($number) {\n    var sum = 0;\n    var sum_avg = 0;\n    for (var i = 0; i < $number; i++) {\n        sum += $number[i];\n        sum_avg += $number[i];\n    }\n    return sum_avg / $number.length;\n}\n\n// Write a function to find the sum of the first n natural numbers.\nfunction sum_of_n($number) {\n    var sum = 0;\n    for (var i = 0; i < $number; i++) {\n        sum += $number[i];\n    }\n    return sum;\n}\n\n// Write a function to find the average of the first n natural numbers.\nfunction average_of_n($number) {\n    var sum = 0;\n    for (var i = 0; i < $number; i++) {\n        sum += $number[i];\n    }\n    return sum / $number.length;\n}\n\n// Write a function to find the sum of the first n natural numbers.\nfunction sum_of_n_avg($number) {\n    var sum = 0;\n    for (var i = 0; i < $number; i++) {\n        sum += $number[i];\n    }\n    return sum / $number.length;\n}\n\n// Write a function to find the sum of the first n natural numbers.\nfunction sum_of_n_avg_avg($number) {\n    var sum = 0;\n    for (var i = 0; i < $number; i++) {\n        sum += $number[i];\n    }\n    return sum / $number.length;\n}\n\n// Write a function to find the sum of the first n natural numbers.\nfunction sum_of_n_avg_avg_avg($number) {\n    var sum = 0;\n    for (var i = 0; i < $number; i++) {\n        sum += $number[i];\n    }\n    return sum / $number.length;\n}\n\n// Write a function to find the sum of the first n natural numbers.\nfunction\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_average(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== array(55, 5.5)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15) !== array(120, 8.0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(20) !== array(210, 10.5)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "<?php\nfunction is_octagonal($n) {\n    return $n % 2 == 0;\n}\n\n// Write a function to find the nth non-octagonal number.\nfunction is_non_octagonal($n) {\n    return $n % 2!= 0;\n}\n\n// Write a function to find the nth non-square number.\nfunction is_non_square($n) {\n    return $n % 3 == 0;\n}\n\n// Write a function to find the nth square number.\nfunction is_square($n) {\n    return $n % 3 == 0;\n}\n\n// Write a function to find the nth triangle number.\nfunction is_triangle($n) {\n    return $n % 3 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal($n) {\n    return $n % 5 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal($n) {\n    return $n % 5 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal_square($n) {\n    return $n % 5 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal_square_square($n) {\n    return $n % 5 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal_square_square_square($n) {\n    return $n % 5 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal_square_square_square($n) {\n    return $n % 5 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal_square_square_square_square($n) {\n    return $n % 5 == 0;\n}\n\n// Write a function to find the nth pentagonal number.\nfunction is_pentagonal_square_square_square_square($n) {\n    return $n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_octagonal(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== 65) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 280) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15) !== 645) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a phpthon function to check whether the given number is even or not.",
        "code": "<?php\nfunction is_Even($n) {\n    return $n % 2 === 0;\n}\n\n// Write a phpthon function to check whether the given number is odd or not.\nfunction is_Odd($n) {\n    return $n % 2 === 1;\n}\n\n// Write a phpthon function to check whether the given number is a power of two.\nfunction is_PowerOfTwo($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of two.\nfunction is_PowerOfTwo2($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of three.\nfunction is_PowerOfThree($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of four.\nfunction is_PowerOfFour($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of five.\nfunction is_PowerOfFive($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of six.\nfunction is_PowerOfSix($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of seven.\nfunction is_PowerOfSeven($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of eight.\nfunction is_PowerOfEight($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the given number is a power of nine.\nfunction is_PowerOfNine($n) {\n    return $n & (1 << $n);\n}\n\n// Write a phpthon function to check whether the\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_Even(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a phpthon function to find the first repeated character in a given string.",
        "code": "<?php\nfunction first_repeated_char($str1) {\n    var $str2 = $str1.split('');\n    var $str3 = $str2.slice(0, 1);\n    var $str4 = $str2.slice(1);\n    var $str5 = $str2.slice(0, 1);\n    var $str6 = $str2.slice(1);\n    var $str7 = $str2.slice(0, 1);\n    var $str8 = $str2.slice(1);\n    var $str9 = $str2.slice(0, 1);\n    var $str10 = $str2.slice(1);\n    var $str11 = $str2.slice(0, 1);\n    var $str12 = $str2.slice(1);\n    var $str13 = $str2.slice(0, 1);\n    var $str14 = $str2.slice(1);\n    var $str15 = $str2.slice(0, 1);\n    var $str16 = $str2.slice(1);\n    var $str17 = $str2.slice(0, 1);\n    var $str18 = $str2.slice(1);\n    var $str19 = $str2.slice(0, 1);\n    var $str20 = $str2.slice(1);\n    var $str21 = $str2.slice(0, 1);\n    var $str22 = $str2.slice(1);\n    var $str23 = $str2.slice(0, 1);\n    var $str24 = $str2.slice(1);\n    var $str25 = $str2.slice(0, 1);\n    var $str26 = $str2.slice(1);\n    var $str27 = $str2.slice(0, 1);\n    var $str28 = $str2.slice(1);\n    var $str29 = $str2.slice(0, 1);\n    var $str30 = $str2.slice(1);\n    var $str31 = $str2.slice(0,\n",
        "test_list": [
            "function candidate(...$args) {",
            "return first_repeated_char(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"abcabc\") !== \"a\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abc\") !== null) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"123123\") !== \"1\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "<?php\nfunction get_ludic($n) {\n    var $l = [];\n    for (var i = 0; i < $n; i++) {\n        $l.push($ludic($n - i));\n    }\n    return $l;\n}\n\n// Write a function to get all lucid numbers greater than or equal to a given integer.\nfunction get_ludic_g(n) {\n    var $l = [];\n    for (var i = 0; i < n; i++) {\n        $l.push($ludic(n - i));\n    }\n    return $l;\n}\n\n// Write a function to get all lucid numbers greater than or equal to a given integer.\nfunction get_ludic_g_n(n) {\n    var $l = [];\n    for (var i = 0; i < n; i++) {\n        $l.push($ludic(n - i));\n    }\n    return $l;\n}\n\n// Write a function to get all lucid numbers greater than or equal to a given integer.\nfunction get_ludic_g_n_n(n) {\n    var $l = [];\n    for (var i = 0; i < n; i++) {\n        $l.push($ludic(n - i));\n    }\n    return $l;\n}\n\n// Write a function to get all lucid numbers greater than or equal to a given integer.\nfunction get_ludic_g_n_n_n(n) {\n    var $l = [];\n    for (var i = 0; i < n; i++) {\n        $l.push($ludic(n - i));\n    }\n    return $l;\n}\n\n// Write a function to get all lucid numbers greater than or equal to a given integer.\nfunction get_ludic_g_n_n_n_n(n) {\n    var $l = [];\n    for (var i = 0; i < n; i++) {\n        $l.push($ludic(n - i));\n    }\n    return $l;\n}\n\n// Write a function to get all lucid numbers greater\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_ludic(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== array(1, 2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(25) !== array(1, 2, 3, 5, 7, 11, 13, 17, 23, 25)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(45) !== array(1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "<?php\nfunction reverse_words($s) {\n    var words = $s.split(/\\s+/);\n    var reversed = words.map(function(word) {\n        return word.replace(/\\s+/g,'');\n    });\n    return reversed.join(' ');\n}\n\n// Write a function to reverse a string in a given string.\nfunction reverse_string($s) {\n    return $s.split(/\\s+/).map(function(word) {\n        return word.replace(/\\s+/g,'');\n    }).join(' ');\n}\n\n// Write a function to reverse a string in a given string.\nfunction reverse_string_with_spaces($s) {\n    return $s.split(/\\s+/).map(function(word) {\n        return word.replace(/\\s+/g,'');\n    }).join(' ');\n}\n\n// Write a function to reverse a string in a given string.\nfunction reverse_string_with_spaces_with_spaces($s) {\n    return $s.split(/\\s+/).map(function(word) {\n        return word.replace(/\\s+/g,'');\n    }).join(' ');\n}\n\n// Write a function to reverse a string in a given string.\nfunction reverse_string_with_spaces_with_spaces_with_spaces($s) {\n    return $s.split(/\\s+/).map(function(word) {\n        return word.replace(/\\s+/g,'');\n    }).join(' ');\n}\n\n// Write a function to reverse a string in a given string.\nfunction reverse_string_with_spaces_with_spaces_with_spaces_with_spaces($s) {\n    return $s.split(/\\s+/).map(function(word) {\n        return word.replace(/\\s+/g,'');\n    }).join(' ');\n}\n\n// Write a function to reverse a string in a\n",
        "test_list": [
            "function candidate(...$args) {",
            "return reverse_words(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python program\") !== \"program python\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"java language\") !== \"language java\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"indian man\") !== \"man indian\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "<?php\nfunction prime_num($num) {\n    if ($num < 2) {\n        return false;\n    }\n    if ($num % 2 == 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check if the given integer is a prime number.\nfunction prime_num_2($num) {\n    if ($num < 2) {\n        return false;\n    }\n    if ($num % 2 == 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check if the given integer is a prime number.\nfunction prime_num_3($num) {\n    if ($num < 3) {\n        return false;\n    }\n    if ($num % 3 == 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check if the given integer is a prime number.\nfunction prime_num_4($num) {\n    if ($num < 4) {\n        return false;\n    }\n    if ($num % 4 == 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check if the given integer is a prime number.\nfunction prime_num_5($num) {\n    if ($num < 5) {\n        return false;\n    }\n    if ($num % 5 == 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check if the given integer is a prime number.\nfunction prime_num_6($num) {\n    if ($num < 6) {\n        return false;\n    }\n    if ($num % 6 == 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check if the given integer is a prime number.\nfunction prime_num_7($num) {\n    if ($num < 7) {\n        return false;\n    }\n    if ($num % 7 == 0) {\n        return false;\n    }\n    return true;\n}\n\n// Write a function to check if the given integer is a prime number\n",
        "test_list": [
            "function candidate(...$args) {",
            "return prime_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(13) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(-1010) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "<?php\nfunction radian_degree($degree) {\n  return $degree * (Math.PI / 180.0);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_radian($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_degrees($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_degrees_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_radians_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_degrees_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_radians_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_degrees_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_radians_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_degrees_radians($radian) {\n  return $radian * (180.0 / Math.PI);\n}\n\n// Write a function to convert radians to degrees.\nfunction radian_radians\n",
        "test_list": [
            "function candidate(...$args) {",
            "return radian_degree(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(90) !== 1.5707963267948966) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(60) !== 1.0471975511965976) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(120) !== 2.0943951023931953) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "<?php\nfunction find_literals($text, $pattern) {\n    var $match = $text.match($pattern);\n    if ($match) {\n        return {\n            start: $match.index,\n            end: $match.index + $match.length\n        };\n    }\n    return {\n        start: 0,\n        end: 0\n    };\n}\n\n// Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\nfunction find_substrings($text, $pattern) {\n    var $match = $text.match($pattern);\n    if ($match) {\n        return {\n            start: $match.index,\n            end: $match.index + $match.length\n        };\n    }\n    return {\n        start: 0,\n        end: 0\n    };\n}\n\n// Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\nfunction find_substrings_with_regex($text, $pattern) {\n    var $match = $text.match($pattern);\n    if ($match) {\n        return {\n            start: $match.index,\n            end: $match.index + $match.length\n        };\n    }\n    return {\n        start: 0,\n        end: 0\n    };\n}\n\n// Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\nfunction find_substrings_with_regex_and_start($text, $pattern) {\n    var $match = $text.match($pattern);\n    if ($match) {\n        return {\n            start: $match.index,\n            end: $match.index + $match.length\n        };\n    }\n    return {\n        start: 0,\n        end: 0\n    };\n}\n\n// Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_literals(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") !== array(\"fox\", 16, 19)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Its been a very crazy procedure right\", \"crazy\") !== array(\"crazy\", 16, 21)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Hardest choices required strongest will\", \"will\") !== array(\"will\", 35, 39)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a phpthon function to find nth bell number.",
        "code": "<?php\nfunction bell_Number($n) {\n    var n = $n;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 = 0;\n    var i37 = 0;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return bell_Number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 15) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a phpthon function which takes an array and returns an array with the same elements, but the k'th element removed.",
        "code": "<?php\nfunction remove_kth_element($list1, $L) {\n    var $list2 = $list1.slice(0, $L);\n    var $list3 = $list1.slice($L);\n    var $list4 = $list1.slice($L + 1);\n    var $list5 = $list1.slice($L + 1);\n    var $list6 = $list1.slice($L + 1);\n    var $list7 = $list1.slice($L + 1);\n    var $list8 = $list1.slice($L + 1);\n    var $list9 = $list1.slice($L + 1);\n    var $list10 = $list1.slice($L + 1);\n    var $list11 = $list1.slice($L + 1);\n    var $list12 = $list1.slice($L + 1);\n    var $list13 = $list1.slice($L + 1);\n    var $list14 = $list1.slice($L + 1);\n    var $list15 = $list1.slice($L + 1);\n    var $list16 = $list1.slice($L + 1);\n    var $list17 = $list1.slice($L + 1);\n    var $list18 = $list1.slice($L + 1);\n    var $list19 = $list1.slice($L + 1);\n    var $list20 = $list1.slice($L + 1);\n    var $list21 = $list1.slice($L + 1);\n    var $list22 = $list1.slice($L + 1);\n    var $list23 = $list1.slice($L + 1);\n    var $list24 = $list1.slice($L + 1);\n    var $list25 = $list1.slice($L + 1);\n    var $list26 = $list1.slice($L + 1);\n    var $list27 = $list1.slice($L + 1);\n    var $list28 = $list1.slice($L + 1);\n    var $list29 =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_kth_element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(1, 1, 3, 4, 4, 5, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4), 4) !== array(0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10), 5) !== array(10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as an array of arrays returns the max of then'th column.",
        "code": "<?php\nfunction max_of_nth($test_list, $N) {\n    var $max = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        for (var j = 0; j < $test_list[i].length; j++) {\n            if ($test_list[i][j] > $max) {\n                $max = $test_list[i][j];\n            }\n        }\n    }\n    return $max;\n}\n\n// Write a function which given a matrix represented as an array of arrays returns the max of then'th row.\nfunction max_of_nth_row($test_list, $N) {\n    var $max = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        for (var j = 0; j < $test_list[i].length; j++) {\n            if ($test_list[i][j] > $max) {\n                $max = $test_list[i][j];\n            }\n        }\n    }\n    return $max;\n}\n\n// Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\nfunction max_of_nth_col($test_list, $N) {\n    var $max = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        for (var j = 0; j < $test_list[i].length; j++) {\n            if ($test_list[i][j] > $max) {\n                $max = $test_list[i][j];\n            }\n        }\n    }\n    return $max;\n}\n\n// Write a function which given a matrix represented as an array of arrays returns the max of then'th row.\nfunction max_of_nth_row_col($test_list, $N) {\n    var $max = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        \n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_of_nth(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a phpthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.",
        "code": "<?php\nfunction merge($lst) {\n\tvar $arr = [];\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\t$arr.push($lst[i]);\n\t}\n\treturn $arr;\n}\n\n// Write a phpthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nfunction merge2($lst) {\n\tvar $arr = [];\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\t$arr.push($lst[i]);\n\t}\n\treturn $arr;\n}\n\n// Write a phpthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nfunction merge3($lst) {\n\tvar $arr = [];\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\t$arr.push($lst[i]);\n\t}\n\treturn $arr;\n}\n\n// Write a phpthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nfunction merge4($lst) {\n\tvar $arr = [];\n\tfor (var i = 0; i < $lst.length; i++) {\n\t\t$arr.push($lst[i]);\n\t}\n\treturn $arr;\n}\n\n// Write a phpthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nfunction merge5($lst) {\n\tvar $arr = [];\n\tfor (var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return merge(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"x\", \"y\"), array(\"a\", \"b\"), array(\"m\", \"n\"))) !== array(array(\"x\", \"a\", \"m\"), array(\"y\", \"b\", \"n\"))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2), array(3, 4), array(5, 6), array(7, 8))) !== array(array(1, 3, 5, 7), array(2, 4, 6, 8))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"x\", \"y\", \"z\"), array(\"a\", \"b\", \"c\"), array(\"m\", \"n\", \"o\"))) !== array(array(\"x\", \"a\", \"m\"), array(\"y\", \"b\", \"n\"), array(\"z\", \"c\", \"o\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given array of arrays.",
        "code": "<?php\nfunction cummulative_sum($test_list) {\n    var sum = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        sum += $test_list[i];\n    }\n    return sum;\n}\n\n// Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\nfunction cummulative_sum_of_array($test_list) {\n    var sum = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        sum += $test_list[i];\n    }\n    return sum;\n}\n\n// Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\nfunction cummulative_sum_of_array_of_arrays($test_list) {\n    var sum = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        sum += cummulative_sum($test_list[i]);\n    }\n    return sum;\n}\n\n// Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\nfunction cummulative_sum_of_array_of_arrays($test_list) {\n    var sum = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        sum += cummulative_sum_of_array($test_list[i]);\n    }\n    return sum;\n}\n\n// Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\nfunction cummulative_sum_of_array_of_arrays_of_arrays($test_list) {\n    var sum = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        sum += cummulative_sum_of_array_of_arrays($test_list[i]);\n    }\n    return sum;\n}\n\n// Write a function to find the cumulative sum of\n",
        "test_list": [
            "function candidate(...$args) {",
            "return cummulative_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 3), array(5, 6, 7), array(2, 6))) !== 30) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 4), array(6, 7, 8), array(3, 7))) !== 37) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 5), array(7, 8, 9), array(4, 8))) !== 44) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.",
        "code": "<?php\nfunction average_tuple($nums) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $nums.length; i++) {\n\t\tsum += $nums[i][0];\n\t}\n\treturn sum / $nums.length;\n}\n\n// Write a function which takes an array of arrays and returns the average value for each subarray as an array.\nfunction average_array($nums) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $nums.length; i++) {\n\t\tsum += $nums[i][0];\n\t}\n\treturn sum / $nums.length;\n}\n\n// Write a function which takes an array of arrays and returns the average value for each subarray as an array.\nfunction average_array_tuple($nums) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $nums.length; i++) {\n\t\tsum += $nums[i][0];\n\t}\n\treturn sum / $nums.length;\n}\n\n// Write a function which takes an array of arrays and returns the average value for each subarray as an array.\nfunction average_array_array($nums) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $nums.length; i++) {\n\t\tsum += $nums[i][0];\n\t}\n\treturn sum / $nums.length;\n}\n\n// Write a function which takes an array of arrays and returns the average value for each subarray as an array.\nfunction average_array_array_tuple($nums) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $nums.length; i++) {\n\t\tsum += $nums[i][0];\n\t}\n\treturn sum / $nums.length;\n}\n\n// Write a function which takes an array of arrays and returns the average value for each subarray as an array.\nfunction average_array_array_array($nums) {\n\tvar sum = 0;\n\tfor (\n",
        "test_list": [
            "function candidate(...$args) {",
            "return average_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(10, 10, 10, 12), array(30, 45, 56, 45), array(81, 80, 39, 32), array(1, 2, 3, 4))) !== array(30.5, 34.25, 27.0, 23.25)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 1, -5), array(30, -15, 56), array(81, -60, -39), array(-10, 2, 3))) !== array(25.5, -18.0, 3.75)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(100, 100, 100, 120), array(300, 450, 560, 450), array(810, 800, 390, 320), array(10, 20, 30, 40))) !== array(305.0, 342.5, 270.0, 232.5)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two arrays of the same length and performs the element wise modulo.",
        "code": "<?php\nfunction tuple_modulo($test_tup1, $test_tup2) {\n    var $result = [];\n    for (var i = 0; i < $test_tup1.length; i++) {\n        $result.push($test_tup1[i] % $test_tup2[i]);\n    }\n    return $result;\n}\n\n// Write a function which takes two arrays of the same length and performs the element wise modulo.\nfunction tuple_modulo_2($test_tup1, $test_tup2) {\n    var $result = [];\n    for (var i = 0; i < $test_tup1.length; i++) {\n        $result.push($test_tup1[i] % $test_tup2[i]);\n    }\n    return $result;\n}\n\n// Write a function which takes two arrays of the same length and performs the element wise modulo.\nfunction tuple_modulo_3($test_tup1, $test_tup2) {\n    var $result = [];\n    for (var i = 0; i < $test_tup1.length; i++) {\n        $result.push($test_tup1[i] % $test_tup2[i]);\n    }\n    return $result;\n}\n\n// Write a function which takes two arrays of the same length and performs the element wise modulo.\nfunction tuple_modulo_4($test_tup1, $test_tup2) {\n    var $result = [];\n    for (var i = 0; i < $test_tup1.length; i++) {\n        $result.push($test_tup1[i] % $test_tup2[i]);\n    }\n    return $result;\n}\n\n// Write a function which takes two arrays of the same length and performs the element wise modulo.\nfunction tuple_modulo_5($test_tup1, $test_tup2) {\n    var $result = [];\n    for (var i = 0; i < $test_tup1\n",
        "test_list": [
            "function candidate(...$args) {",
            "return tuple_modulo(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 4, 5, 6), array(5, 6, 7, 5)) !== array(0, 4, 5, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 5, 6, 7), array(6, 7, 8, 6)) !== array(5, 5, 6, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 6, 7, 8), array(7, 8, 9, 7)) !== array(5, 6, 7, 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "<?php\nfunction min_Jumps($steps, $d) {\n    var $jumps = 0;\n    for (var i = 0; i < $steps; i++) {\n        if (i == 0) {\n            $jumps = $jumps + $d;\n        } else {\n            $jumps = $jumps + $d;\n        }\n    }\n    return $jumps;\n}\n\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunction min_Jumps2($steps, $d) {\n    var $jumps = 0;\n    for (var i = 0; i < $steps; i++) {\n        if (i == 0) {\n            $jumps = $jumps + $d;\n        } else {\n            $jumps = $jumps + $d;\n        }\n    }\n    return $jumps;\n}\n\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 3d plane.\nfunction min_Jumps3($steps, $d) {\n    var $jumps = 0;\n    for (var i = 0; i < $steps; i++) {\n        if (i == 0) {\n            $jumps = $jumps + $d;\n        } else {\n            $jumps = $jumps + $d;\n        }\n    }\n    return $jumps;\n}\n\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 3d plane.\nfunction min_Jumps3_2($steps, $d) {\n    var $jumps = 0;\n    for (var i = 0; i < $steps; i++) {\n        if (i == 0) {\n            $jumps = $jumps + $d;\n        } else {\n            $jumps = $jumps + $d;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return min_Jumps(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(3, 4), 11) !== 3.5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 4), 0) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 14), 11) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two arrays element wise.",
        "code": "<?php\nfunction div_list($nums1, $nums2) {\n  var $result = [];\n  for (var i = 0; i < $nums1.length; i++) {\n    $result.push($nums1[i] / $nums2[i]);\n  }\n  return $result;\n}\n\n// Write a function to divide two arrays element wise.\nfunction div_list_array($nums1, $nums2) {\n  var $result = [];\n  for (var i = 0; i < $nums1.length; i++) {\n    $result.push($nums1[i] / $nums2[i]);\n  }\n  return $result;\n}\n\n// Write a function to divide two arrays element wise.\nfunction div_list_array_array($nums1, $nums2) {\n  var $result = [];\n  for (var i = 0; i < $nums1.length; i++) {\n    $result.push($nums1[i] / $nums2[i]);\n  }\n  return $result;\n}\n\n// Write a function to divide two arrays element wise.\nfunction div_list_array_array_array($nums1, $nums2) {\n  var $result = [];\n  for (var i = 0; i < $nums1.length; i++) {\n    $result.push($nums1[i] / $nums2[i]);\n  }\n  return $result;\n}\n\n// Write a function to divide two arrays element wise.\nfunction div_list_array_array_array_array($nums1, $nums2) {\n  var $result = [];\n  for (var i = 0; i < $nums1.length; i++) {\n    $result.push($nums1[i] / $nums2[i]);\n  }\n  return $result;\n}\n\n// Write a function to divide two arrays element wise.\nfunction div_list_array_array_array_array_array($nums1, $nums2) {\n  var $result = [];\n",
        "test_list": [
            "function candidate(...$args) {",
            "return div_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(4, 5, 6), array(1, 2, 3)) !== array(4.0, 2.5, 2.0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 2), array(1, 4)) !== array(3.0, 0.5)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(90, 120), array(50, 70)) !== array(1.8, 1.7142857142857142)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "<?php\nfunction move_num($test_str) {\n    var $test_str_len = $test_str.length;\n    var $test_str_pos = 0;\n    var $test_str_end = $test_str_len;\n    while ($test_str_pos < $test_str_len) {\n        if ($test_str[$test_str_pos] == '0') {\n            $test_str_pos++;\n            $test_str_end--;\n        } else {\n            break;\n        }\n    }\n    return $test_str.substr($test_str_pos, $test_str_end - $test_str_pos);\n}\n\n// Write a function to move all the numbers to the end of the given string.\nfunction move_num_end($test_str) {\n    var $test_str_len = $test_str.length;\n    var $test_str_pos = $test_str_len - 1;\n    while ($test_str_pos >= 0) {\n        if ($test_str[$test_str_pos] == '0') {\n            $test_str_pos--;\n        } else {\n            break;\n        }\n    }\n    return $test_str.substr($test_str_pos + 1, $test_str_len - $test_str_pos);\n}\n\n// Write a function to move all the numbers to the end of the given string.\nfunction move_num_end_end($test_str) {\n    var $test_str_len = $test_str.length;\n    var $test_str_pos = $test_str_len - 1;\n    while ($test_str_pos >= 0) {\n        if ($test_str[$test_str_pos] == '0') {\n            $test_str_pos--;\n        } else {\n            break;\n        }\n    }\n    return $test_str.substr($test_str_pos + 1, $test_str_len - $test_str_pos);\n}\n\n// Write a function\n",
        "test_list": [
            "function candidate(...$args) {",
            "return move_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"I1love143you55three3000thousand\") !== \"Iloveyouthreethousand1143553000\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Avengers124Assemble\") !== \"AvengersAssemble124\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Its11our12path13to14see15things16do17things\") !== \"Itsourpathtoseethingsdothings11121314151617\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a phpthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "<?php\nfunction count_Substrings($s) {\n    var $s = $s.toLowerCase();\n    var $len = $s.length;\n    var $sum = 0;\n    for (var i = 0; i < $len; i++) {\n        $sum += $s.charAt($s.charAt(i) - '0');\n    }\n    return $sum;\n}\n\n// Write a phpthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings_2($s) {\n    var $s = $s.toLowerCase();\n    var $len = $s.length;\n    var $sum = 0;\n    for (var i = 0; i < $len; i++) {\n        $sum += $s.charAt($s.charAt(i) - '0');\n    }\n    return $sum;\n}\n\n// Write a phpthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings_3($s) {\n    var $s = $s.toLowerCase();\n    var $len = $s.length;\n    var $sum = 0;\n    for (var i = 0; i < $len; i++) {\n        $sum += $s.charAt($s.charAt(i) - '0');\n    }\n    return $sum;\n}\n\n// Write a phpthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings_4($s) {\n    var $s = $s.toLowerCase();\n    var $len = $s.length;\n    var $sum = 0;\n    for (var i = 0; i < $len; i++) {\n        $sum += $s.charAt($s.charAt(i) - '0');\n    }\n    return $sum;\n}\n\n// Write a phpthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_Substrings(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"112112\") !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"111\") !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"1101112\") !== 12) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted arrays of same size.",
        "code": "<?php\nfunction get_median($arr1, $arr2, $n) {\n    var $median = 0;\n    var $median_index = 0;\n    var $median_index_max = $n - 1;\n    var $median_index_min = 0;\n    var $median_index_sum = 0;\n    var $median_index_sum_max = 0;\n    var $median_index_sum_min = 0;\n    var $median_index_sum_sum = 0;\n    var $median_index_sum_sum_max = 0;\n    var $median_index_sum_sum_min = 0;\n    var $median_index_sum_sum_sum = 0;\n    var $median_index_sum_sum_sum_max = 0;\n    var $median_index_sum_sum_sum_min = 0;\n    var $median_index_sum_sum_sum_sum = 0;\n    var $median_index_sum_sum_sum_sum_max = 0;\n    var $median_index_sum_sum_sum_sum_min = 0;\n    var $median_index_sum_sum_sum_sum_sum = 0;\n    var $median_index_sum_sum_sum_sum_sum_max = 0;\n    var $median_index_sum_sum_sum_sum_sum_min = 0;\n    var $median_index_sum_sum_sum_sum_sum_sum = 0;\n    var $median_index_sum_sum_sum_sum_sum_sum_max = 0;\n    var $median_index_sum_sum_sum_sum_sum_sum_min = 0;\n    var $median_index_sum_sum_sum_sum_sum_sum_sum = 0;\n    var $median_index_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    var $median_index_sum_sum_sum_sum_sum_sum_sum_min = 0\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_median(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 12, 15, 26, 38), array(2, 13, 17, 30, 45), 5) !== 16.0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 8, 9), array(7, 13, 19, 28), 4) !== 8.5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 6, 14, 23, 36, 42), array(2, 18, 27, 39, 49, 55), 6) !== 25.0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in an array.",
        "code": "<?php\nfunction nth_nums($nums, $n) {\n  var $nums_array = [];\n  for (var i = 0; i < $nums.length; i++) {\n    $nums_array.push($nums[i]);\n  }\n  return $nums_array;\n}\n\n// Write a function to compute the n-th power of each number in an array.\nfunction nth_nums_array($nums_array, $n) {\n  var $nums_array_array = [];\n  for (var i = 0; i < $nums_array.length; i++) {\n    $nums_array_array.push($nums_array[i]);\n  }\n  return $nums_array_array;\n}\n\n// Write a function to compute the n-th power of each number in an array.\nfunction nth_nums_array_array($nums_array_array, $n) {\n  var $nums_array_array_array = [];\n  for (var i = 0; i < $nums_array_array.length; i++) {\n    $nums_array_array_array.push($nums_array_array[i]);\n  }\n  return $nums_array_array_array;\n}\n\n// Write a function to compute the n-th power of each number in an array.\nfunction nth_nums_array_array_array($nums_array_array_array, $n) {\n  var $nums_array_array_array_array = [];\n  for (var i = 0; i < $nums_array_array_array.length; i++) {\n    $nums_array_array_array_array.push($nums_array_array_array[i]);\n  }\n  return $nums_array_array_array_array;\n}\n\n// Write a function to compute the n-th power of each number in an array.\nfunction nth_nums_array_array_array_array($nums_array_array_array_array, $n) {\n",
        "test_list": [
            "function candidate(...$args) {",
            "return nth_nums(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2) !== array(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, 30), 3) !== array(1000, 8000, 27000)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 15), 5) !== array(248832, 759375)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a phpthon function to convert a given string to uppercase.",
        "code": "<?php\nfunction is_upper($string) {\n    return $string.toUpperCase() === $string;\n}\n\n// Write a phpthon function to convert a given string to lowercase.\nfunction is_lower($string) {\n    return $string.toLowerCase() === $string;\n}\n\n// Write a phpthon function to convert a given string to titlecase.\nfunction is_titlecase($string) {\n    return $string.toUpperCase() === $string;\n}\n\n// Write a phpthon function to convert a given string to uppercase and titlecase.\nfunction is_titlecase_and_upper($string) {\n    return is_upper($string) && is_titlecase($string);\n}\n\n// Write a phpthon function to convert a given string to titlecase and lowercase.\nfunction is_titlecase_and_lower($string) {\n    return is_lower($string) && is_titlecase($string);\n}\n\n// Write a phpthon function to convert a given string to titlecase and titlecase.\nfunction is_titlecase_and_titlecase($string) {\n    return is_titlecase($string) && is_titlecase_and_lower($string);\n}\n\n// Write a phpthon function to convert a given string to titlecase and titlecase.\nfunction is_titlecase_and_titlecase_and_upper($string) {\n    return is_titlecase_and_upper($string) && is_titlecase_and_lower($string);\n}\n\n// Write a phpthon function to convert a given string to titlecase and titlecase.\nfunction is_titlecase_and_titlecase_and_lower($string) {\n    return is_titlecase_and_lower($string) && is_titlecase_and_upper($string);\n}\n\n// Write a phpthon function to convert a given string to titlecase and titlecase.\nfunction is_titlecase_and_titlecase_and_titlecase_and_upper($string) {\n    return is_titlecase_and_titlecase($string) && is_titlecase_and_titlecase_and_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_upper(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"person\") !== \"PERSON\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"final\") !== \"FINAL\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Valid\") !== \"VALID\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a phpthon function to interchange the first and last element in a given array.",
        "code": "<?php\nfunction swap_List($newList) {\n    var $oldList = $newList.slice(0, $newList.length - 1);\n    var $newList = $oldList.slice(0, $oldList.length - 1);\n    return $newList;\n}\n\n// Write a phpthon function to swap the first and last element in a given array.\nfunction swap_Array($newArray) {\n    var $oldArray = $newArray.slice(0, $newArray.length - 1);\n    var $newArray = $oldArray.slice(0, $oldArray.length - 1);\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last element in a given array.\nfunction swap_Array_List($newArray) {\n    var $oldArray = $newArray.slice(0, $newArray.length - 1);\n    var $newArray = $oldArray.slice(0, $oldArray.length - 1);\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last element in a given array.\nfunction swap_Array_Array($newArray) {\n    var $oldArray = $newArray.slice(0, $newArray.length - 1);\n    var $newArray = $oldArray.slice(0, $oldArray.length - 1);\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last element in a given array.\nfunction swap_Array_Array_List($newArray) {\n    var $oldArray = $newArray.slice(0, $newArray.length - 1);\n    var $newArray = $oldArray.slice(0, $oldArray.length - 1);\n    return $newArray;\n}\n\n// Write a phpthon function to swap the first and last element in a given array.\nfunction swap_Array_Array_Array($newArray) {\n    var $oldArray = $newArray.slice(0, $newArray.length - 1);\n    var $newArray = $oldArray.slice(0,\n",
        "test_list": [
            "function candidate(...$args) {",
            "return swap_List(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== array(3, 2, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 4)) !== array(4, 2, 3, 4, 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 6)) !== array(6, 5, 4)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a phpthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "<?php\nfunction triangle_area($r) {\n\tvar area = 0;\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\tvar d = 0;\n\tvar e = 0;\n\tvar f = 0;\n\tvar g = 0;\n\tvar h = 0;\n\tvar i1 = 0;\n\tvar i2 = 0;\n\tvar i3 = 0;\n\tvar i4 = 0;\n\tvar i5 = 0;\n\tvar i6 = 0;\n\tvar i7 = 0;\n\tvar i8 = 0;\n\tvar i9 = 0;\n\tvar i10 = 0;\n\tvar i11 = 0;\n\tvar i12 = 0;\n\tvar i13 = 0;\n\tvar i14 = 0;\n\tvar i15 = 0;\n\tvar i16 = 0;\n\tvar i17 = 0;\n\tvar i18 = 0;\n\tvar i19 = 0;\n\tvar i20 = 0;\n\tvar i21 = 0;\n\tvar i22 = 0;\n\tvar i23 = 0;\n\tvar i24 = 0;\n\tvar i25 = 0;\n\tvar i26 = 0;\n\tvar i27 = 0;\n\tvar i28 = 0;\n\tvar i29 = 0;\n\tvar i30 = 0;\n\tvar i31 = 0;\n\tvar i32 = 0;\n\tvar i33 = 0;\n\tvar i34 = 0;\n\tvar i35 = 0;\n\tvar i36 = 0;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return triangle_area(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(-1) !== null) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(0) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a phpthon function to find the smallest missing number from a sorted array of natural numbers.",
        "code": "<?php\nfunction find_First_Missing($array) {\n    var i = 0;\n    var j = $array.length - 1;\n    while (i < j) {\n        if ($array[i] < $array[j]) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $array[i];\n}\n\n// Write a phpthon function to find the smallest missing number from a sorted array of natural numbers.\nfunction find_First_Missing_Array($array) {\n    var i = 0;\n    var j = $array.length - 1;\n    while (i < j) {\n        if ($array[i] < $array[j]) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $array[i];\n}\n\n// Write a phpthon function to find the smallest missing number from a sorted array of natural numbers.\nfunction find_First_Missing_Array_Array($array) {\n    var i = 0;\n    var j = $array.length - 1;\n    while (i < j) {\n        if ($array[i] < $array[j]) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $array[i];\n}\n\n// Write a phpthon function to find the smallest missing number from a sorted array of natural numbers.\nfunction find_First_Missing_Array_Array_Array($array) {\n    var i = 0;\n    var j = $array.length - 1;\n    while (i < j) {\n        if ($array[i] < $array[j]) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return $array[i];\n}\n\n// Write a phpthon function to find the smallest missing number from a sorted array of natural numbers.\nfunction find_First_Missing_Array_Array_Array($array) {\n    var i = 0;\n    var j = $array.length - 1;\n    while (i < j) {\n        if\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_First_Missing(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(0, 1, 2, 3)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 1, 2, 6, 9)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 5, 8, 9)) !== 0) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "<?php\nfunction replace_spaces($string) {\n    $string = $string.replace(/\\s+/g, '%20');\n    return $string;\n}\n\n// Write a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces_with_spaces($string) {\n    $string = $string.replace(/\\s+/g, '%20');\n    return $string;\n}\n\n// Write a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces_with_spaces_with_spaces($string) {\n    $string = $string.replace(/\\s+/g, '%20');\n    return $string;\n}\n\n// Write a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces_with_spaces_with_spaces_with_spaces($string) {\n    $string = $string.replace(/\\s+/g, '%20');\n    return $string;\n}\n\n// Write a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces_with_spaces_with_spaces_with_spaces_with_spaces($string) {\n    $string = $string.replace(/\\s+/g, '%20');\n    return $string;\n}\n\n// Write a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces($string) {\n    $string = $string.replace(/\\s+/g, '%20');\n    return $string;\n}\n\n// Write a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces($string) {\n    $string = $string.replace(/\\s+/g, '%20');\n    return $string;\n}\n",
        "test_list": [
            "function candidate(...$args) {",
            "return replace_spaces(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"My Name is Dawood\") !== \"My%20Name%20is%20Dawood\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"I am a Programmer\") !== \"I%20am%20a%20Programmer\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"I love Coding\") !== \"I%20love%20Coding\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a phpthon function to find even numbers from an array of numbers.",
        "code": "<?php\nfunction Split($list) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        $result.push($list[i]);\n    }\n    return $result;\n}\n\n// Write a phpthon function to find odd numbers from an array of numbers.\nfunction SplitOdd($list) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 0) {\n            $result.push($list[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to find even numbers from an array of numbers.\nfunction SplitEven($list) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 1) {\n            $result.push($list[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to find odd numbers from an array of numbers.\nfunction SplitOddEven($list) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 1 && $list[i] % 2 == 0) {\n            $result.push($list[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to find even numbers from an array of numbers.\nfunction SplitEvenOdd($list) {\n    var $result = [];\n    for (var i = 0; i < $list.length; i++) {\n        if ($list[i] % 2 == 1 && $list[i] % 2 == 1) {\n            $result.push($list[i]);\n        }\n    }\n    return $result;\n}\n\n// Write a phpthon function to find even numbers from an array of numbers.\nfunction SplitEvenOddEven($list) {\n    var $result = [];\n    for (var i =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Split(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5)) !== array(2, 4)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 6, 7, 8, 0, 1)) !== array(4, 6, 8, 0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(8, 12, 15, 19)) !== array(8, 12)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a phpthon function to find smallest number in an array.",
        "code": "<?php\nfunction smallest_num($xs) {\n  var $ret = 0;\n  for (var i = 0; i < $xs.length; i++) {\n    if ($xs[i] < $ret) {\n      $ret = $xs[i];\n    }\n  }\n  return $ret;\n}\n\n// Write a phpthon function to find smallest number in an array.\nfunction smallest_num_array($xs) {\n  var $ret = 0;\n  for (var i = 0; i < $xs.length; i++) {\n    if ($xs[i] < $ret) {\n      $ret = $xs[i];\n    }\n  }\n  return $ret;\n}\n\n// Write a phpthon function to find smallest number in an array.\nfunction smallest_num_array_array($xs) {\n  var $ret = 0;\n  for (var i = 0; i < $xs.length; i++) {\n    if ($xs[i] < $ret) {\n      $ret = $xs[i];\n    }\n  }\n  return $ret;\n}\n\n// Write a phpthon function to find smallest number in an array.\nfunction smallest_num_array_array_array($xs) {\n  var $ret = 0;\n  for (var i = 0; i < $xs.length; i++) {\n    if ($xs[i] < $ret) {\n      $ret = $xs[i];\n    }\n  }\n  return $ret;\n}\n\n// Write a phpthon function to find smallest number in an array.\nfunction smallest_num_array_array_array_array($xs) {\n  var $ret = 0;\n  for (var i = 0; i < $xs.length; i++) {\n    if ($xs[i] < $ret) {\n      $ret = $xs[i];\n    }\n  }\n  return $ret;\n}\n\n// Write a phpthon function to find smallest number in an array.\nfunction smallest_num_array_array_array_array_array($xs) {\n  var $ret\n",
        "test_list": [
            "function candidate(...$args) {",
            "return smallest_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 20, 1, 45, 99)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(45, 46, 50, 60)) !== 45) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate array.",
        "code": "<?php\nfunction get_coordinates($test_tup) {\n    var $coordinates = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $coordinates.push($test_tup[i].x + $test_tup[i].y);\n    }\n    return $coordinates;\n}\n\n// Write a function to extract all the adjacent coordinates of the given coordinate array.\nfunction get_coordinates_from_array($test_tup) {\n    var $coordinates = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $coordinates.push($test_tup[i].x + $test_tup[i].y);\n    }\n    return $coordinates;\n}\n\n// Write a function to extract all the adjacent coordinates of the given coordinate array.\nfunction get_coordinates_from_array_from_array($test_tup) {\n    var $coordinates = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $coordinates.push($test_tup[i].x + $test_tup[i].y);\n    }\n    return $coordinates;\n}\n\n// Write a function to extract all the adjacent coordinates of the given coordinate array.\nfunction get_coordinates_from_array_from_array_from_array($test_tup) {\n    var $coordinates = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $coordinates.push($test_tup[i].x + $test_tup[i].y);\n    }\n    return $coordinates;\n}\n\n// Write a function to extract all the adjacent coordinates of the given coordinate array.\nfunction get_coordinates_from_array_from_array_from_array($test_tup) {\n    var $coordinates = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $coordinates.push($test_tup[i\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_coordinates(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(3, 4)) !== array(array(2, 3), array(2, 4), array(2, 5), array(3, 3), array(3, 4), array(3, 5), array(4, 3), array(4, 4), array(4, 5))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5)) !== array(array(3, 4), array(3, 5), array(3, 6), array(4, 4), array(4, 5), array(4, 6), array(5, 4), array(5, 5), array(5, 6))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 6)) !== array(array(4, 5), array(4, 6), array(4, 7), array(5, 5), array(5, 6), array(5, 7), array(6, 5), array(6, 6), array(6, 7))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "<?php\nfunction replace_spaces($text) {\n  return $text.replace(/\\s+/g, '_').replace(/[^\\w\\s]/g, '');\n}\n\n// Replace all the occurrences of '$' with '_'.\nfunction replace_dollar($text) {\n  return $text.replace(/\\$/g, '_').replace(/[^\\w\\s]/g, '');\n}\n\n// Replace all the occurrences of '_' with '$'.\nfunction replace_underscore($text) {\n  return $text.replace(/_/g, '$').replace(/[^\\w\\s]/g, '');\n}\n\n// Replace all the occurrences of '$' with '_'.\nfunction replace_dollar_underscore($text) {\n  return $text.replace(/_\\$/g, '_').replace(/[^\\w\\s]/g, '');\n}\n\n// Replace all the occurrences of '_' with '_'.\nfunction replace_underscore_dollar($text) {\n  return $text.replace(/_\\_/g, '_').replace(/[^\\w\\s]/g, '');\n}\n\n// Replace all the occurrences of '_' with '_'.\nfunction replace_dollar_underscore_dollar($text) {\n  return $text.replace(/_\\_\\_/g, '_').replace(/[^\\w\\s]/g, '');\n}\n\n// Replace all the occurrences of '_' with '_'.\nfunction replace_dollar_underscore_dollar($text) {\n  return $text.replace(/_\\_\\_\\_/g, '_').replace(/[^\\w\\s]/g, '');\n}\n\n// Replace all the occurrences of '_' with '_'.\nfunction replace_dollar_underscore_dollar($text) {\n  return $text.replace(/_\\_\\_\\_\\_/g, '_').replace(/[^\\w\\s]/g, '');\n}\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return replace_spaces(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Jumanji The Jungle\") !== \"Jumanji_The_Jungle\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"The_Avengers\") !== \"The Avengers\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Fast and Furious\") !== \"Fast_and_Furious\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a phpthon function to move all zeroes to the end of the given array.",
        "code": "<?php\nfunction move_zero($num_list) {\n  var $num_list_length = $num_list.length;\n  var $zero_index = $num_list_length - 1;\n  while ($zero_index >= 0) {\n    if ($num_list[$zero_index] == 0) {\n      $num_list.splice($zero_index, 1);\n      $zero_index--;\n    } else {\n      break;\n    }\n  }\n}\n\n// Write a phpthon function to move all zeroes to the end of the given array.\nfunction move_zero_to_end($num_list) {\n  var $num_list_length = $num_list.length;\n  var $zero_index = $num_list_length - 1;\n  while ($zero_index >= 0) {\n    if ($num_list[$zero_index] == 0) {\n      $num_list.splice($zero_index, 1);\n      $zero_index--;\n    } else {\n      break;\n    }\n  }\n}\n\n// Write a phpthon function to move all zeroes to the end of the given array.\nfunction move_zero_to_end_to_end($num_list) {\n  var $num_list_length = $num_list.length;\n  var $zero_index = $num_list_length - 1;\n  while ($zero_index >= 0) {\n    if ($num_list[$zero_index] == 0) {\n      $num_list.splice($zero_index, 1);\n      $zero_index--;\n    } else {\n      break;\n    }\n  }\n}\n\n// Write a phpthon function to move all zeroes to the end of the given array.\nfunction move_zero_to_end_to_end_to_end($num_list) {\n  var $num_list_length = $num_list.length;\n  var $zero_index = $num_list_length - 1;\n  while ($zero_index >=\n",
        "test_list": [
            "function candidate(...$args) {",
            "return move_zero(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 0, 2, 0, 3, 4)) !== array(1, 2, 3, 4, 0, 0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 2, 0, 0, 4, 0, 5, 0)) !== array(2, 3, 2, 4, 5, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 1, 0, 1, 1)) !== array(1, 1, 1, 0, 0)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a phpthon function to find the sum of xor of all pairs of numbers in the given array.",
        "code": "<?php\nfunction pair_xor_Sum($arr, $n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $arr[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all pairs of numbers in the given array.\nfunction pair_sum_Sum($arr, $n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $arr[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all pairs of numbers in the given array.\nfunction pair_sum_Sum_2($arr, $n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $arr[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all pairs of numbers in the given array.\nfunction pair_sum_Sum_3($arr, $n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $arr[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all pairs of numbers in the given array.\nfunction pair_sum_Sum_4($arr, $n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $arr[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all pairs of numbers in the given array.\nfunction pair_sum_Sum_5($arr, $n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += $arr[i];\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all pairs of numbers in\n",
        "test_list": [
            "function candidate(...$args) {",
            "return pair_xor_Sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 9, 7, 6), 4) !== 47) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 3, 5), 3) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 3), 2) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given array.",
        "code": "<?php\nfunction heap_sort($iterable) {\n  var heap = [];\n  var length = $iterable.length;\n  for (var i = 0; i < length; i++) {\n    heap[i] = $iterable[i];\n  }\n  for (var i = 0; i < length; i++) {\n    var j = i + 1;\n    while (j < length && $iterable[j] < heap[i]) {\n      var temp = $iterable[i];\n      $iterable[i] = $iterable[j];\n      $iterable[j] = temp;\n      j++;\n    }\n  }\n  return heap;\n}\n\n// Write a function to find the smallest element in the given array.\nfunction find_min(array) {\n  var min = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\n// Write a function to find the smallest element in the given array.\nfunction find_min_by_index(array, index) {\n  var min = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\n// Write a function to find the smallest element in the given array.\nfunction find_min_by_value(array, value) {\n  var min = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\n// Write a function to find the smallest element in the given array.\nfunction find_min_by_key(array, key) {\n  var min = array[0];\n  for (var i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min\n",
        "test_list": [
            "function candidate(...$args) {",
            "return heap_sort(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "<?php\nfunction noprofit_noloss($actual_cost, $sale_amount) {\n    if ($actual_cost == 0) {\n        return 0;\n    }\n    if ($sale_amount == 0) {\n        return 0;\n    }\n    if ($actual_cost > $sale_amount) {\n        return 0;\n    }\n    return 1;\n}\n\n// Write a function to check whether the given amount has no profit and profit\nfunction noprofit_profit($actual_cost, $sale_amount) {\n    if ($actual_cost == 0) {\n        return 0;\n    }\n    if ($sale_amount == 0) {\n        return 0;\n    }\n    if ($actual_cost > $sale_amount) {\n        return 0;\n    }\n    return 1;\n}\n\n// Write a function to check whether the given amount has profit and profit\nfunction profit_noprofit($actual_cost, $sale_amount) {\n    if ($actual_cost == 0) {\n        return 0;\n    }\n    if ($sale_amount == 0) {\n        return 0;\n    }\n    if ($actual_cost > $sale_amount) {\n        return 0;\n    }\n    return 1;\n}\n\n// Write a function to check whether the given amount has profit and profit\nfunction profit_profit($actual_cost, $sale_amount) {\n    if ($actual_cost == 0) {\n        return 0;\n    }\n    if ($sale_amount == 0) {\n        return 0;\n    }\n    if ($actual_cost > $sale_amount) {\n        return 0;\n    }\n    return 1;\n}\n\n// Write a function to check whether the given amount has profit and profit\nfunction profit_noprofit_noloss($actual_cost, $sale_amount) {\n    if ($actual_cost == 0) {\n        return 0;\n    }\n    if ($sale_amount == 0) {\n        return 0;\n    }\n    if ($actual_cost > $sale_amount) {\n        return 0;\n    }\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return noprofit_noloss(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1500, 1200) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(100, 100) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2000, 5000) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "<?php\nfunction wind_chill($v, $t) {\n  var $w = $v * 0.001;\n  var $t = $t * 0.001;\n  var $w_int = $w + $t;\n  var $w_int_rounded = Math.floor($w_int);\n  var $w_int_rounded_rounded = Math.floor($w_int_rounded);\n  var $w_int_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = Math.floor($w_int_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n  var $w_int_rounded_rounded_rounded_rounded_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return wind_chill(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(120, 35) !== 40) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(40, 20) !== 19) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10, 8) !== 6) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.",
        "code": "<?php\nfunction sample_nam($sample_names) {\n\tvar $names = $sample_names.split(/\\s+/);\n\tvar $length = $names.length;\n\tvar $sum = 0;\n\tfor (var i = 0; i < $length; i++) {\n\t\tif ($names[i].length > 0) {\n\t\t\t$sum += $names[i].length;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n// Write a function to find the longest name of a given array of names.\nfunction longest_name($sample_names) {\n\tvar $length = $sample_names.length;\n\tvar $max_length = 0;\n\tfor (var i = 0; i < $length; i++) {\n\t\tif ($sample_names[i].length > $max_length) {\n\t\t\t$max_length = $sample_names[i].length;\n\t\t}\n\t}\n\treturn $max_length;\n}\n\n// Write a function to find the longest name of a given array of names.\nfunction longest_name_with_prefix($sample_names) {\n\tvar $length = $sample_names.length;\n\tvar $max_length = 0;\n\tfor (var i = 0; i < $length; i++) {\n\t\tif ($sample_names[i].length > $max_length) {\n\t\t\t$max_length = $sample_names[i].length;\n\t\t}\n\t}\n\treturn $max_length;\n}\n\n// Write a function to find the longest name of a given array of names.\nfunction longest_name_with_prefix_with_prefix($sample_names) {\n\tvar $length = $sample_names.length;\n\tvar $max_length = 0;\n\tfor (var i = 0; i < $length; i++) {\n\t\tif ($sample_names[i].length > $max_length) {\n\t\t\t$max_length = $sample_names[i].length;\n\t\t}\n\t}\n\treturn $max_length;\n}\n\n// Write a function\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sample_nam(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\")) !== 16) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\")) !== 10) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"abcd\", \"Python\", \"abba\", \"aba\")) !== 6) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given array array.",
        "code": "<?php\nfunction max_difference($test_list) {\n    var max_difference = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        var $test_array = $test.split(\" \");\n        for (var j = 0; j < $test_array.length; j++) {\n            var $test_value = $test_array[j];\n            var $test_value_array = $test_value.split(\" \");\n            for (var k = 0; k < $test_value_array.length; k++) {\n                var $test_value_value = $test_value_array[k];\n                var $test_value_value_array = $test_value_value.split(\" \");\n                for (var l = 0; l < $test_value_value_array.length; l++) {\n                    var $test_value_value_array_1 = $test_value_value_array[l];\n                    var $test_value_value_array_2 = $test_value_value_array_1.split(\" \");\n                    var $test_value_value_array_2_1 = $test_value_value_array_2[0];\n                    var $test_value_value_array_2_2 = $test_value_value_array_2[1];\n                    var $test_value_value_array_2_3 = $test_value_value_array_2[2];\n                    var $test_value_value_array_2_4 = $test_value_value_array_2[3];\n                    var $test_value_value_array_2_5 = $test_value_value_array_2[4];\n                    var $test_value_value_array_2_6 = $test_value_value_array_2[5];\n                    var $test_value_value_array_2_7 = $test_value_value_array_2[6];\n                    var $test_value_value_array_2_8 = $test\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_difference(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(3, 5), array(1, 7), array(10, 3), array(1, 2))) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(4, 6), array(2, 17), array(9, 13), array(11, 12))) !== 15) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(12, 35), array(21, 27), array(13, 23), array(41, 22))) !== 23) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "<?php\nfunction remove_parenthesis($items) {\n    var $items_length = $items.length;\n    var $items_index = 0;\n    var $items_string = \"\";\n    for (var $i = 0; $i < $items_length; $i++) {\n        if ($items[$i] == \"(\" && $items_index == 0) {\n            $items_string = $items_string.substring($items_index, $items_index + 1);\n            $items_index = $items_index + 1;\n        } else if ($items[$i] == \")\") {\n            $items_index = $items_index + 1;\n        } else {\n            $items_index++;\n        }\n    }\n    return $items_string;\n}\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunction remove_parenthesis_and_whitespace($items) {\n    var $items_length = $items.length;\n    var $items_index = 0;\n    var $items_string = \"\";\n    for (var $i = 0; $i < $items_length; $i++) {\n        if ($items[$i] == \"(\" && $items_index == 0) {\n            $items_string = $items_string.substring($items_index, $items_index + 1);\n            $items_index = $items_index + 1;\n        } else if ($items[$i] == \")\") {\n            $items_index = $items_index + 1;\n        } else {\n            $items_index++;\n        }\n    }\n    return $items_string;\n}\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunction remove_parenthesis_and_whitespace_and_remove_whitespace($items) {\n    var $items_length = $items.length;\n    var $items_index = 0;\n    var $items_string = \"\";\n    for (var $i = 0; $i < $items_length\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_parenthesis(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"python (chrome)\")) !== \"python\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"string(.abc)\")) !== \"string\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"alpha(num)\")) !== \"alpha\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "<?php\nfunction is_nonagonal($n) {\n    return $n % 2 == 0;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_even($n) {\n    return $n % 2 == 0;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_even_odd($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd_even($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd_even_odd($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd_even_odd_odd($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd_even_odd_odd_odd($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd_even_odd_odd_odd_odd($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd_even_odd_odd_odd_odd_odd($n) {\n    return $n % 2 == 1;\n}\n\n// Write a function to find the nth diagonal number.\nfunction is_diagonal_odd_even_odd_odd_odd_odd_odd_odd($n) {\n    return $n % 2 == 1;\n}\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_nonagonal(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== 325) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15) !== 750) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(18) !== 1089) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "<?php\nfunction text_match_wordz_middle($text) {\n    var $start = $text.indexOf('z');\n    var $end = $text.indexOf('z', $start + 1);\n    return $end == $start;\n}\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunction text_match_wordz_end($text) {\n    var $start = $text.indexOf('z');\n    var $end = $text.indexOf('z', $start + 1);\n    return $end == $start;\n}\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunction text_match_wordz_start($text) {\n    var $start = $text.indexOf('z');\n    var $end = $text.indexOf('z', $start + 1);\n    return $end == $start;\n}\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunction text_match_wordz_end_middle($text) {\n    var $start = $text.indexOf('z');\n    var $end = $text.indexOf('z', $start + 1);\n    return $end == $start;\n}\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunction text_match_wordz_end_end($text) {\n    var $start = $text.indexOf('z');\n    var $end = $text.indexOf('z', $start + 1);\n    return $end == $start;\n}\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunction text_match_wordz_start_middle($text) {\n    var $start = $text.indexOf('z');\n    var $end = $text.indexOf('z', $start + 1);\n    return $end == $start;\n}\n\n// Write a function that\n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_match_wordz_middle(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"pythonzabc.\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"zxyabc.\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"  lang  .\") !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a phpthon function to reverse an array upto a given position.",
        "code": "<?php\nfunction reverse_Array_Upto_K($input, $k) {\n    var $output = [];\n    var $index = $input.length - $k;\n    if ($index < 0) {\n        $output.push($input);\n    } else {\n        $output.push($input.slice(0, $index));\n        $output.push($input.slice($index + 1));\n    }\n    return $output;\n}\n\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K_K($input, $k) {\n    var $output = [];\n    var $index = $input.length - $k;\n    if ($index < 0) {\n        $output.push($input);\n    } else {\n        $output.push($input.slice(0, $index));\n        $output.push($input.slice($index + 1));\n    }\n    return $output;\n}\n\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K_K_K($input, $k) {\n    var $output = [];\n    var $index = $input.length - $k;\n    if ($index < 0) {\n        $output.push($input);\n    } else {\n        $output.push($input.slice(0, $index));\n        $output.push($input.slice($index + 1));\n    }\n    return $output;\n}\n\n// Write a phpthon function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K_K_K($input, $k) {\n    var $output = [];\n    var $index = $input.length - $k;\n    if ($index < 0) {\n        $output.push($input);\n    } else {\n        $output.push($input.slice(0, $index));\n        $output.push($input.slice($index + 1));\n    }\n    return $output;\n}\n\n// Write a phpthon function\n",
        "test_list": [
            "function candidate(...$args) {",
            "return reverse_Array_Upto_K(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort an array of arrays using the second value of each array.",
        "code": "<?php\nfunction subject_marks($subjectmarks) {\n    var $subjectmarks_array = $subjectmarks.split(',');\n    var $subjectmarks_array_length = $subjectmarks_array.length;\n    var $subjectmarks_array_index = 0;\n    var $subjectmarks_array_index_max = $subjectmarks_array_index;\n    var $subjectmarks_array_index_min = $subjectmarks_array_index;\n    var $subjectmarks_array_index_min_max = $subjectmarks_array_index_max;\n    var $subjectmarks_array_index_min_max_max = $subjectmarks_array_index_max;\n    var $subjectmarks_array_index_min_max_min = $subjectmarks_array_index_min;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_max;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_max;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_min;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_max;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_max;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_min;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_max;\n    var $subjectmarks_array_index_min_max_min_max = $subjectmarks_array_index_min_max_min;\n    var $subjectmarks_array_index_min_max_min\n",
        "test_list": [
            "function candidate(...$args) {",
            "return subject_marks(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"English\", 88), array(\"Science\", 90), array(\"Maths\", 97), array(\"Social sciences\", 82))) !== array(array(\"Social sciences\", 82), array(\"English\", 88), array(\"Science\", 90), array(\"Maths\", 97))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Telugu\", 49), array(\"Hindhi\", 54), array(\"Social\", 33))) !== array(array(\"Social\", 33), array(\"Telugu\", 49), array(\"Hindhi\", 54))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Physics\", 96), array(\"Chemistry\", 97), array(\"Biology\", 45))) !== array(array(\"Biology\", 45), array(\"Physics\", 96), array(\"Chemistry\", 97))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten an array and sum all of its elements.",
        "code": "<?php\nfunction recursive_list_sum($data_list) {\n    var $sum = 0;\n    for (var i = 0; i < $data_list.length; i++) {\n        $sum += $data_list[i];\n    }\n    return $sum;\n}\n\n// Write a function to flatten an array and sum all of its elements.\nfunction recursive_list_sum_array($data_list) {\n    var $sum = 0;\n    for (var i = 0; i < $data_list.length; i++) {\n        $sum += $data_list[i];\n    }\n    return $sum;\n}\n\n// Write a function to flatten an array and sum all of its elements.\nfunction recursive_list_sum_array_array($data_list) {\n    var $sum = 0;\n    for (var i = 0; i < $data_list.length; i++) {\n        $sum += $data_list[i];\n    }\n    return $sum;\n}\n\n// Write a function to flatten an array and sum all of its elements.\nfunction recursive_list_sum_array_array_array($data_list) {\n    var $sum = 0;\n    for (var i = 0; i < $data_list.length; i++) {\n        $sum += $data_list[i];\n    }\n    return $sum;\n}\n\n// Write a function to flatten an array and sum all of its elements.\nfunction recursive_list_sum_array_array_array_array($data_list) {\n    var $sum = 0;\n    for (var i = 0; i < $data_list.length; i++) {\n        $sum += $data_list[i];\n    }\n    return $sum;\n}\n\n// Write a function to flatten an array and sum all of its elements.\nfunction recursive_list_sum_array_array_array_array_array($data_list) {\n    var $sum = 0;\n    for (var i = 0; i < $data_list.length; i++) {\n        $sum += $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return recursive_list_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, array(3, 4), array(5, 6))) !== 21) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 10, array(15, 14), array(19, 41))) !== 106) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, array(30, 40), array(50, 60))) !== 210) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a phpthon function to count the number of positive numbers in an array.",
        "code": "<?php\nfunction pos_count($list) {\n\tvar count = 0;\n\tfor (var i = 0; i < $list.length; i++) {\n\t\tif ($list[i] > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Write a phpthon function to count the number of negative numbers in an array.\nfunction neg_count($list) {\n\tvar count = 0;\n\tfor (var i = 0; i < $list.length; i++) {\n\t\tif ($list[i] < 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Write a phpthon function to count the number of positive and negative numbers in an array.\nfunction pos_neg_count($list) {\n\tvar count = 0;\n\tfor (var i = 0; i < $list.length; i++) {\n\t\tif ($list[i] > 0 && $list[i] < 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Write a phpthon function to count the number of positive and negative numbers in an array.\nfunction neg_pos_neg_count($list) {\n\tvar count = 0;\n\tfor (var i = 0; i < $list.length; i++) {\n\t\tif ($list[i] > 0 && $list[i] < 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Write a phpthon function to count the number of positive and negative numbers in an array.\nfunction pos_neg_pos_neg_count($list) {\n\tvar count = 0;\n\tfor (var i = 0; i < $list.length; i++) {\n\t\tif ($list[i] > 0 && $list[i] < 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Write a phpthon function to count the number of positive and negative numbers in an array.\nfunction pos_neg_pos_neg_count($list) {\n\tvar count = 0;\n\tfor (var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return pos_count(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, -2, 3, -4)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 4, 5, -1)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "<?php\nfunction bell_number($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number_partition($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number_partition_partition($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number_partition_partition_partition($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number_partition_partition_partition($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number_partition_partition_partition($n) {\n    var n = $n;\n    var i = 0;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return bell_number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 115975) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(56) !== 6775685320645824322581483068371419745979053216268760300) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a phpthon function to check whether the given array is monotonic or not.",
        "code": "<?php\nfunction is_Monotonic($A) {\n    var $A_length = $A.length;\n    var $A_index = 0;\n    var $A_index_max = $A_length - 1;\n    var $A_index_min = 0;\n    var $A_index_min_max = $A_index_max;\n    var $A_index_min_max_index = 0;\n    var $A_index_min_max_index_max = $A_index_max;\n    var $A_index_min_max_index_min = 0;\n    var $A_index_min_max_index_min_max = $A_index_max;\n    var $A_index_min_max_index_min_max_index = 0;\n    var $A_index_min_max_index_min_max_index_max = $A_index_max;\n    var $A_index_min_max_index_min_max_index_min = 0;\n    var $A_index_min_max_index_min_max_index_min_max = $A_index_max;\n    var $A_index_min_max_index_min_max_index_min_max_index = 0;\n    var $A_index_min_max_index_min_max_index_min_max_index_max = $A_index_max;\n    var $A_index_min_max_index_min_max_index_min_max_index_max = $A_index_max;\n    var $A_index_min_max_index_min_max_index_min_max_index_max = $A_index_max;\n    var $A_index_min_max_index_min_max_index_min_max_index_max = $A_index_max;\n    var $A_index_min_max_index_min_max_index_min_max_index_max = $A_index_max;\n    var $A_index_min_max_index_min_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_Monotonic(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(6, 5, 4, 4)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 2, 3)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 3, 2)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether an array contains the given subarray or not.",
        "code": "<?php\nfunction is_sublist($l, $s) {\n    var $i = 0;\n    var $len = $l.length;\n    while ($i < $len) {\n        if ($l[$i] === $s) {\n            return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n// Write a function to check whether an array contains the given value or not.\nfunction is_value($v) {\n    var $i = 0;\n    var $len = $v.length;\n    while ($i < $len) {\n        if ($v[$i] === $i) {\n            return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n// Write a function to check whether an array contains the given value or not.\nfunction is_sublist_value($v, $s) {\n    var $i = 0;\n    var $len = $v.length;\n    while ($i < $len) {\n        if ($v[$i] === $s) {\n            return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n// Write a function to check whether an array contains the given value or not.\nfunction is_value_sublist($v, $s) {\n    var $i = 0;\n    var $len = $v.length;\n    while ($i < $len) {\n        if ($v[$i] === $s) {\n            return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n// Write a function to check whether an array contains the given value or not.\nfunction is_value_value($v) {\n    var $i = 0;\n    var $len = $v.length;\n    while ($i < $len) {\n        if ($v[$i] === $i) {\n            return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n// Write a function to check whether an array contains the given value or not.\nfunction is_value_sublist_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_sublist(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 4, 3, 5, 7), array(3, 7)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 3, 5, 7), array(4, 3)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 3, 5, 7), array(1, 6)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a phpthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "<?php\nfunction differ_At_One_Bit_Pos($a, $b) {\n    var $diff = 0;\n    $diff = $a ^ $b;\n    return $diff;\n}\n\n// Write a phpthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos_2($a, $b) {\n    var $diff = 0;\n    $diff = $a ^ $b;\n    return $diff;\n}\n\n// Write a phpthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos_3($a, $b) {\n    var $diff = 0;\n    $diff = $a ^ $b;\n    return $diff;\n}\n\n// Write a phpthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos_4($a, $b) {\n    var $diff = 0;\n    $diff = $a ^ $b;\n    return $diff;\n}\n\n// Write a phpthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos_5($a, $b) {\n    var $diff = 0;\n    $diff = $a ^ $b;\n    return $diff;\n}\n\n// Write a phpthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos_6($a, $b) {\n    var $diff = 0;\n    $diff = $a ^ $b;\n    return $diff;\n}\n\n// Write a phpthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos_7($a, $b) {\n    var $diff = 0;\n    $diff = $a ^ $b;\n    return $diff;\n}\n\n// Write a phpthon function to check whether the two numbers differ\n",
        "test_list": [
            "function candidate(...$args) {",
            "return differ_At_One_Bit_Pos(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(13, 9) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15, 8) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2, 4) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2, 3) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, 1) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1, 5) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given arrays have equal length or not.",
        "code": "<?php\nfunction get_equal($Input) {\n    var $Length = $Input.length;\n    var $Result = [];\n    for (var i = 0; i < $Length; i++) {\n        if ($Input[i]!= $Input[i]) {\n            $Result.push($Input[i]);\n        }\n    }\n    return $Result;\n}\n\n// Write a function to find the maximum value of all the given arrays.\nfunction get_max($Input) {\n    var $Length = $Input.length;\n    var $Result = [];\n    for (var i = 0; i < $Length; i++) {\n        if ($Input[i] > $Input[i]) {\n            $Result.push($Input[i]);\n        }\n    }\n    return $Result;\n}\n\n// Write a function to find the minimum value of all the given arrays.\nfunction get_min($Input) {\n    var $Length = $Input.length;\n    var $Result = [];\n    for (var i = 0; i < $Length; i++) {\n        if ($Input[i] < $Input[i]) {\n            $Result.push($Input[i]);\n        }\n    }\n    return $Result;\n}\n\n// Write a function to find the sum of all the given arrays.\nfunction get_sum($Input) {\n    var $Length = $Input.length;\n    var $Result = [];\n    for (var i = 0; i < $Length; i++) {\n        $Result.push($Input[i] + $Input[i]);\n    }\n    return $Result;\n}\n\n// Write a function to find the product of all the given arrays.\nfunction get_product($Input) {\n    var $Length = $Input.length;\n    var $Result = [];\n    for (var i = 0; i < $Length; i++) {\n        $Result.push($Input[i] * $Input[i]);\n    }\n    return $Result;\n}\n\n// Write a function to find the product of all the given arrays.\nfunction get_product_sum($Input) {\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_equal(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(11, 22, 33), array(44, 55, 66))) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2, 3), array(4, 5, 6, 7))) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2), array(3, 4))) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "<?php\nfunction comb_sort($nums) {\n    var $n = $nums.length;\n    var $i = 0;\n    var $j = $n - 1;\n    var $k = $n - 1;\n    var $l = $n - 1;\n    var $m = $n - 1;\n    var $n1 = $n - 1;\n    var $n2 = $n - 1;\n    var $n3 = $n - 1;\n    var $n4 = $n - 1;\n    var $n5 = $n - 1;\n    var $n6 = $n - 1;\n    var $n7 = $n - 1;\n    var $n8 = $n - 1;\n    var $n9 = $n - 1;\n    var $n10 = $n - 1;\n    var $n11 = $n - 1;\n    var $n12 = $n - 1;\n    var $n13 = $n - 1;\n    var $n14 = $n - 1;\n    var $n15 = $n - 1;\n    var $n16 = $n - 1;\n    var $n17 = $n - 1;\n    var $n18 = $n - 1;\n    var $n19 = $n - 1;\n    var $n20 = $n - 1;\n    var $n21 = $n - 1;\n    var $n22 = $n - 1;\n    var $n23 = $n - 1;\n    var $n24 = $n - 1;\n    var $n25 = $n - 1;\n    var $n26 = $n - 1;\n    var $n27 = $n - 1;\n    var $n28 = $n - 1;\n    var $n29 = $n - 1;\n    var $n30 = $n - 1;\n    var $n31 = $n - 1;\n    var $n32 = $n - 1;\n    var $n33 = $n - 1;\n    var $n34 = $n - 1;\n    var $n35 = $n - 1;\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return comb_sort(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add an array to the array. The output should be an array.",
        "code": "<?php\nfunction add_dict_to_tuple($test_tup, $test_dict) {\n    $test_tup.push($test_dict);\n}\n\n// Write a function to add an array to the array. The output should be an array.\nfunction add_array_to_tuple($test_tup, $test_array) {\n    $test_tup.push($test_array);\n}\n\n// Write a function to add an array to the array. The output should be an array.\nfunction add_array_to_tuple_with_index($test_tup, $test_array, $test_index) {\n    $test_tup.push($test_array[$test_index]);\n}\n\n// Write a function to add an array to the array. The output should be an array.\nfunction add_array_to_tuple_with_index_with_index($test_tup, $test_array, $test_index, $test_index2) {\n    $test_tup.push($test_array[$test_index]);\n    $test_tup.push($test_array[$test_index2]);\n}\n\n// Write a function to add an array to the array. The output should be an array.\nfunction add_array_to_tuple_with_index_with_index_with_index($test_tup, $test_array, $test_index, $test_index2, $test_index3) {\n    $test_tup.push($test_array[$test_index]);\n    $test_tup.push($test_array[$test_index2]);\n    $test_tup.push($test_array[$test_index3]);\n}\n\n// Write a function to add an array to the array. The output should be an array.\nfunction add_array_to_tuple_with_index_with_index_with_index_with_index($test_tup, $test_array, $test_index, $test_index2, $test_index3, $test_index4) {\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return add_dict_to_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(4, 5, 6), array(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3)) !== array(4, 5, 6, array(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3), array(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4)) !== array(1, 2, 3, array(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(8, 9, 10), array(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5)) !== array(8, 9, 10, array(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "<?php\nfunction maxAverageOfPath($cost) {\n    var max = 0;\n    var maxIndex = 0;\n    var maxCost = 0;\n    var maxIndexCost = 0;\n    var maxCostIndex = 0;\n    var maxIndexCostIndex = 0;\n    var maxIndexCostIndexCost = 0;\n    var maxIndexCostIndexCost = 0;\n    var maxIndexCostIndexCostCost = 0;\n    var maxIndexCostIndexCostCost = 0;\n    var maxIndexCostIndexCostCost = 0;\n    var maxIndexCostIndexCostCost = 0;\n    var maxIndexCostIndexCostCostCost = 0;\n    var maxIndexCostIndexCostCostCost = 0;\n    var maxIndexCostIndexCostCostCost = 0;\n    var maxIndexCostIndexCostCostCost = 0;\n    var maxIndexCostIndexCostCostCost = 0;\n    var maxIndexCostIndexCostCostCost = 0;\n    var maxIndexCostIndexCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCostCost = 0;\n    var maxIndexCostIndexCostCostCostCostCostCostCost = 0;\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return maxAverageOfPath(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - an array with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "<?php\nfunction filter_data($students, $h, $w) {\n    $students = $students.filter(function(student) {\n        return student.height > $h || student.weight > $w;\n    });\n    return $students;\n}\n\n// The input is given as - an array with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight below the minimum.\nfunction filter_data_min($students, $h, $w) {\n    $students = $students.filter(function(student) {\n        return student.height < $h || student.weight < $w;\n    });\n    return $students;\n}\n\n// The input is given as - an array with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data_max($students, $h, $w) {\n    $students = $students.filter(function(student) {\n        return student.height > $h || student.weight > $w;\n    });\n    return $students;\n}\n\n// The input is given as - an array with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight below the minimum.\nfunction filter_data_min_max($students, $h, $w) {\n    $students = $students.filter(function(student) {\n        return student.height < $h || student.weight < $w;\n    });\n    return $students;\n}\n\n// The input is given as - an array with a student name as a key and\n",
        "test_list": [
            "function candidate(...$args) {",
            "return filter_data(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66)), 6.0, 70) !== array(\"Cierra Vega\" => array(6.2, 70))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66)), 5.9, 67) !== array(\"Cierra Vega\" => array(6.2, 70), \"Kierra Gentry\" => array(6.0, 68))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66)), 5.7, 64) !== array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.",
        "code": "<?php\nfunction count_same_pair($nums1, $nums2) {\n    var $i = 0;\n    var $j = 0;\n    while ($i < $nums1.length && $j < $nums2.length) {\n        if ($nums1[$i] == $nums2[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n    }\n    return $i;\n}\n\n// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have different values.\nfunction count_different_pair($nums1, $nums2) {\n    var $i = 0;\n    var $j = 0;\n    while ($i < $nums1.length && $j < $nums2.length) {\n        if ($nums1[$i]!= $nums2[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n    }\n    return $i;\n}\n\n// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunction count_same_pair_diff($nums1, $nums2) {\n    var $i = 0;\n    var $j = 0;\n    while ($i < $nums1.length && $j < $nums2.length) {\n        if ($nums1[$i]!= $nums2[$j]) {\n            $i++;\n            $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n    }\n    return $i;\n}\n\n// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have different values.\nfunction count_different_pair_diff($nums1, $nums2) {\n    var $i = 0;\n    var $j = 0;\n    while ($i\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_same_pair(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 9)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8), array(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)) !== 11) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, -6, -9, 11, -12, 14, -5, 17), array(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 1, 1, 2), array(0, 1, 2, 2)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "<?php\nfunction power_base_sum($base, $power) {\n    var sum = 0;\n    for (var i = 0; i < $base.length; i++) {\n        sum += $base[i] * $power;\n    }\n    return sum;\n}\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_with_power($base, $power) {\n    var sum = 0;\n    for (var i = 0; i < $base.length; i++) {\n        sum += $base[i] * $power;\n    }\n    return sum;\n}\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_with_power_2($base, $power) {\n    var sum = 0;\n    for (var i = 0; i < $base.length; i++) {\n        sum += $base[i] * $power;\n    }\n    return sum;\n}\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_with_power_3($base, $power) {\n    var sum = 0;\n    for (var i = 0; i < $base.length; i++) {\n        sum += $base[i] * $power;\n    }\n    return sum;\n}\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_with_power_4($base, $power) {\n    var sum = 0;\n    for (var i = 0; i < $base.length; i++) {\n        sum += $base[i] * $power;\n    }\n    return sum;\n}\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return power_base_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2, 100) !== 115) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(8, 10) !== 37) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(8, 15) !== 62) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3, 3) !== 9) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "<?php\nfunction extract_quotation($text1) {\n    var $text2 = $text1.substr(1, $text1.length - 2);\n    return $text2.substr(0, $text2.length - 1);\n}\n\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation_2($text1) {\n    var $text2 = $text1.substr(1, $text1.length - 2);\n    return $text2.substr(0, $text2.length - 1);\n}\n\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation_3($text1) {\n    var $text2 = $text1.substr(1, $text1.length - 2);\n    return $text2.substr(0, $text2.length - 1);\n}\n\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation_4($text1) {\n    var $text2 = $text1.substr(1, $text1.length - 2);\n    return $text2.substr(0, $text2.length - 1);\n}\n\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation_5($text1) {\n    var $text2 = $text1.substr(1, $text1.length - 2);\n    return $text2.substr(0, $text2.length - 1);\n}\n\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation_6($text1) {\n    var $text2 = $text1.substr(1, $text1.length - 2);\n    return $text2.substr(0, $text2.length - 1);\n}\n\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation_7($text1) {\n    var $text2 = $text1.substr\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_quotation(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\") !== array(\"A53\", \"multi\", \"Processor\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\") !== array(\"favorite\", \"apps\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\") !== array(\"4k Ultra HD\", \"HDR 10\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") !== array()) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1}.",
        "code": "<?php\nfunction multiply_elements($test_tup) {\n    var $result = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $result.push($test_tup[i] * $test_tup[i + 1]);\n    }\n    return $result;\n}\n\n// Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1} + t_2 * t_{i+2}.\nfunction add_elements($test_tup) {\n    var $result = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $result.push($test_tup[i] + $test_tup[i + 1]);\n    }\n    return $result;\n}\n\n// Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1} + t_2 * t_{i+2} + t_3 * t_{i+3}.\nfunction subtract_elements($test_tup) {\n    var $result = [];\n    for (var i = 0; i < $test_tup.length; i++) {\n        $result.push($test_tup[i] - $test_tup[i + 1]);\n    }\n    return $result;\n}\n\n// Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1} + t_2 * t_{i+2} + t_3 * t_{i+3} + t\n",
        "test_list": [
            "function candidate(...$args) {",
            "return multiply_elements(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 5, 7, 8, 10)) !== array(5, 35, 56, 80)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 5, 6, 7)) !== array(8, 20, 30, 42)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 13, 14, 9, 15)) !== array(156, 182, 126, 135)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12)) !== array()) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "<?php\nfunction sum_list($lst1, $lst2) {\n  var $sum = 0;\n  for (var i = 0; i < $lst1.length; i++) {\n    $sum += $lst1[i];\n  }\n  for (var i = 0; i < $lst2.length; i++) {\n    $sum += $lst2[i];\n  }\n  return $sum;\n}\n\n// Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunction sum_list_with_index($lst1, $lst2, $index) {\n  var $sum = 0;\n  for (var i = 0; i < $lst1.length; i++) {\n    $sum += $lst1[i];\n  }\n  for (var i = 0; i < $lst2.length; i++) {\n    $sum += $lst2[i];\n  }\n  return $sum;\n}\n\n// Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunction sum_list_with_index_with_index($lst1, $lst2, $index) {\n  var $sum = 0;\n  for (var i = 0; i < $lst1.length; i++) {\n    $sum += $lst1[i];\n  }\n  for (var i = 0; i < $lst2.length; i++) {\n    $sum += $lst2[i];\n  }\n  return $sum;\n}\n\n// Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 20, 30), array(15, 25, 35)) !== array(25, 45, 65)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3), array(5, 6, 7)) !== array(6, 8, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(15, 20, 30), array(15, 45, 75)) !== array(30, 65, 105)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a phpthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "<?php\nfunction dif_Square($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two integers.\nfunction dif_Int($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two strings.\nfunction dif_Str($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two booleans.\nfunction dif_Bool($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two floats.\nfunction dif_Float($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two doubles.\nfunction dif_Double($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two doubles.\nfunction dif_Double_Int($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two doubles.\nfunction dif_Double_Str($n) {\n    return $n % 2 == 0? $n : $n - $n;\n}\n\n// Write a phpthon function to check whether the given number can be represented as the difference of two booleans.\nfunction dif_Bool_Int($n) {\n    return $n % 2 == 0? $n : $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return dif_Square(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given array.",
        "code": "<?php\nfunction consecutive_duplicates($nums) {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = $nums.length;\n    var result = [];\n    while (i < n) {\n        if ($nums[i] === $nums[j]) {\n            result.push($nums[i]);\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n\n// Write a function to remove consecutive duplicates of a given array.\nfunction consecutive_duplicates_from_array($nums) {\n    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = $nums.length;\n    while (i < n) {\n        if ($nums[i] === $nums[j]) {\n            result.push($nums[i]);\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n\n// Write a function to remove consecutive duplicates of a given array.\nfunction consecutive_duplicates_from_array_from_array($nums) {\n    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = $nums.length;\n    while (i < n) {\n        if ($nums[i] === $nums[j]) {\n            result.push($nums[i]);\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n\n// Write a function to remove consecutive duplicates of a given array.\nfunction consecutive_duplicates_from_array_from_array_from_array($nums) {\n    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = $nums.length;\n    while (i < n) {\n        if ($nums[i] === $nums[j]) {\n            result.push($nums\n",
        "test_list": [
            "function candidate(...$args) {",
            "return consecutive_duplicates(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(10, 15, 19, 18, 17, 26, 17, 18, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(\"a\", \"b\", \"c\", \"d\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\")) !== array(\"a\", \"b\", \"c\", \"d\", \"a\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "<?php\nfunction lateralsurface_cone($r, $h) {\n    var r = $r;\n    var h = $h;\n    var r2 = r * r;\n    var h2 = h * h;\n    var r3 = r2 * r;\n    var h3 = h2 * h;\n    var r4 = r3 * r;\n    var h4 = h3 * h;\n    var r5 = r4 * r;\n    var h5 = h4 * h;\n    var r6 = r5 * r;\n    var h6 = h5 * h;\n    var r7 = r6 * r;\n    var h7 = h6 * h;\n    var r8 = r7 * r;\n    var h8 = h7 * h;\n    var r9 = r8 * r;\n    var h9 = h8 * h;\n    var r10 = r9 * r;\n    var h10 = h9 * h;\n    var r11 = r10 * r;\n    var h11 = h10 * h;\n    var r12 = r11 * r;\n    var h12 = h11 * h;\n    var r13 = r12 * r;\n    var h13 = h12 * h;\n    var r14 = r13 * r;\n    var h14 = h13 * h;\n    var r15 = r14 * r;\n    var h15 = h14 * h;\n    var r16 = r15 * r;\n    var h16 = h15 * h;\n    var r17 = r16 * r;\n    var h17 = h16 * h;\n    var r18 = r17 * r;\n    var h18 = h17 * h;\n    var r19 = r18 * r;\n    var h19 = h18 * h;\n    var r20 = r19 * r;\n    var h20 = h19 * h;\n    var r21 = r20 * r;\n    var h21 = h20 * h;\n    var r22 = r21 * r;\n    var h22 = h21\n",
        "test_list": [
            "function candidate(...$args) {",
            "return lateralsurface_cone(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5, 12) !== 204.20352248333654) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10, 15) !== 566.3586699569488) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(19, 17) !== 1521.8090132193388) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "<?php\nfunction replace_specialchar($text) {\n    var $text_array = $text.split(/\\s+/);\n    var $text_array_length = $text_array.length;\n    var $text_array_index = 0;\n    var $text_array_index_end = 0;\n    var $text_array_index_start = 0;\n    var $text_array_index_end_end = 0;\n    var $text_array_index_start_end = 0;\n    var $text_array_index_start_end_end = 0;\n    var $text_array_index_start_end_end_end = 0;\n    var $text_array_index_start_end_end_end_end = 0;\n    var $text_array_index_start_end_end_end_end_end = 0;\n    var $text_array_index_start_end_end_end_end_end_end_end = 0;\n    var $text_array_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n",
        "test_list": [
            "function candidate(...$args) {",
            "return replace_specialchar(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Python language, Programming language.\") !== \"Python:language::Programming:language:\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"a b c,d e f\") !== \"a:b:c:d:e:f\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"ram reshma,ram rahim\") !== \"ram:reshma:ram:rahim\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "<?php\nfunction find_first_occurrence($A, $x) {\n    var $i = 0;\n    var $j = $A.length;\n    while ($i < $j) {\n        if ($A[$i] == $x) {\n            return $i;\n        }\n        $i++;\n    }\n    return -1;\n}\n\n// Write a function to find the index of the last occurrence of a given number in a sorted array.\nfunction find_last_occurrence($A, $x) {\n    var $i = $A.length - 1;\n    var $j = $A.length;\n    while ($i >= 0) {\n        if ($A[$i] == $x) {\n            return $i;\n        }\n        $i--;\n    }\n    return -1;\n}\n\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence_of_number($A, $x) {\n    var $i = 0;\n    var $j = $A.length;\n    while ($i < $j) {\n        if ($A[$i] == $x) {\n            return $i;\n        }\n        $i++;\n    }\n    return -1;\n}\n\n// Write a function to find the index of the last occurrence of a given number in a sorted array.\nfunction find_last_occurrence_of_number($A, $x) {\n    var $i = $A.length - 1;\n    var $j = $A.length;\n    while ($i >= 0) {\n        if ($A[$i] == $x) {\n            return $i;\n        }\n        $i--;\n    }\n    return -1;\n}\n\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence_of_number_of_numbers($A, $x) {\n    var $i = 0;\n    var $j = $A.length;\n    while\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_first_occurrence(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a phpthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "<?php\nfunction sum_Of_Subarray_Prod($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    sum += $arr[i];\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of products of all possible subarrays of a given array.\nfunction sum_Of_Subarray_Prod_2($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    sum += $arr[i];\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of products of all possible subarrays of a given array.\nfunction sum_Of_Subarray_Prod_3($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    sum += $arr[i];\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of products of all possible subarrays of a given array.\nfunction sum_Of_Subarray_Prod_4($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    sum += $arr[i];\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of products of all possible subarrays of a given array.\nfunction sum_Of_Subarray_Prod_5($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    sum += $arr[i];\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of products of all possible subarrays of a given array.\nfunction sum_Of_Subarray_Prod_6($arr) {\n  var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_Of_Subarray_Prod(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== 20) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2)) !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4)) !== 84) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a phpthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "<?php\nfunction toggle_middle_bits($n) {\n    var $middle_bits = $n.slice(0, $n.length - 1);\n    var $last_bit = $n.slice(-1);\n    var $first_bit = $n.slice(0, $n.length - 1);\n    var $middle_bits_length = $middle_bits.length;\n    var $last_bit_length = $last_bit.length;\n    var $first_bit_length = $first_bit.length;\n    var $middle_bits_length_diff = $middle_bits_length - $first_bit_length;\n    var $last_bit_length_diff = $last_bit_length - $first_bit_length;\n    var $middle_bits_diff = $middle_bits_length_diff - $last_bit_length_diff;\n    var $last_bit_diff = $last_bit_length_diff - $first_bit_length_diff;\n    var $middle_bits_diff_length = $middle_bits_diff.length;\n    var $last_bit_diff_length = $last_bit_diff.length;\n    var $middle_bits_diff_length_diff = $middle_bits_diff_length - $last_bit_diff_length;\n    var $last_bit_diff_length_diff = $last_bit_diff_length - $first_bit_diff_length_diff;\n    var $middle_bits_diff_length_diff_length = $middle_bits_diff_length_diff.length;\n    var $last_bit_diff_length_diff_length = $last_bit_diff_length_diff.length;\n    var $middle_bits_diff_length_diff_length_diff = $middle_bits_diff_length_diff_length.length;\n    var $last_bit_diff_length_diff_length_diff = $last_bit_diff_length_diff_length.length;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return toggle_middle_bits(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(9) !== 15) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(11) !== 13) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(65) !== 127) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(77) !== 115) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php",
        "code": "<?php\nfunction left_insertion($a, $x) {\n    var $i = $a.length - 1;\n    var $j = $x.length - 1;\n    while ($i >= 0 && $j >= 0) {\n        if ($a[$i] < $x[$j]) {\n            $i--;\n        } else if ($a[$i] > $x[$j]) {\n            $j--;\n        } else {\n            return $i;\n        }\n    }\n    return $i;\n}\n\n// Write a function to find the right insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction right_insertion($a, $x) {\n    var $i = $a.length - 1;\n    var $j = $x.length - 1;\n    while ($i >= 0 && $j >= 0) {\n        if ($a[$i] > $x[$j]) {\n            $i--;\n        } else if ($a[$i] < $x[$j]) {\n            $j--;\n        } else {\n            return $i;\n        }\n    }\n    return $i;\n}\n\n// Write a function to find the left insertion point for a specified value in sorted order. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-data-structure-exercise-24.php\nfunction left_insertion_range($a, $x) {\n    var $i = $a.length - 1;\n    var $j = $x.length - 1;\n    while ($i >= 0 && $j >= 0) {\n        if ($a[$i] < $x\n",
        "test_list": [
            "function candidate(...$args) {",
            "return left_insertion(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "<?php\nfunction check_str($string) {\n    var vowels = /[aeiou]/;\n    var regex = new RegExp(vowels, 'i');\n    return regex.test($string);\n}\n\n// Write a function to check whether the given string is ending with a vowel or not using regex.\nfunction check_str_end($string) {\n    var regex = new RegExp(/[aeiou]/, 'i');\n    return regex.test($string);\n}\n\n// Write a function to check whether the given string is ending with a consonant or not using regex.\nfunction check_str_end_end($string) {\n    var regex = new RegExp(/[aeiou]/, 'i');\n    return regex.test($string);\n}\n\n// Write a function to check whether the given string is ending with a consonant or not using regex.\nfunction check_str_end_end_end($string) {\n    var regex = new RegExp(/[aeiou]/, 'i');\n    return regex.test($string);\n}\n\n// Write a function to check whether the given string is ending with a vowel or not using regex.\nfunction check_str_end_end_end($string) {\n    var regex = new RegExp(/[aeiou]/, 'i');\n    return regex.test($string);\n}\n\n// Write a function to check whether the given string is ending with a consonant or not using regex.\nfunction check_str_end_end_end($string) {\n    var regex = new RegExp(/[aeiou]/, 'i');\n    return regex.test($string);\n}\n\n// Write a function to check whether the given string is ending with a vowel or not using regex.\nfunction check_str_end_end_end($string) {\n    var regex = new RegExp(/[aeiou]/, 'i');\n    return regex.test($string);\n}\n\n// Write a function to check whether the given string is ending with a consonant or not using regex.\nfunction check_str_end_end_end($string) {\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_str(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"annie\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"dawood\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Else\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-recursion-exercise-9.php",
        "code": "<?php\nfunction geometric_sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    return sum;\n}\n\n// Write a function to calculate the geometric mean of n-1. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-recursion-exercise-9.php\nfunction geometric_mean($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    return sum / $n;\n}\n\n// Write a function to calculate the geometric variance of n-1. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-recursion-exercise-9.php\nfunction geometric_variance($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    return sum / $n;\n}\n\n// Write a function to calculate the geometric standard deviation of n-1. https://www.w3resource.com/phpthon-exercises/data-structures-and-algorithms/phpthon-recursion-exercise-9.php\nfunction geometric_std_dev($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    return Math.sqrt(sum / $n);\n}\n\n// Write a function to calculate the geometric standard deviation of n-1. https://www.w3resource.com/phpthon-exercises/data-\n",
        "test_list": [
            "function candidate(...$args) {",
            "return geometric_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(7) !== 1.9921875) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 1.9375) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(8) !== 1.99609375) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a phpthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "<?php\nfunction find_Index($n) {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Index(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 14) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 45) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given array to a key-value array using adjacent elements. https://www.geeksforgeeks.org/phpthon-convert-array-to-adjacent-pair-array/",
        "code": "<?php\nfunction tuple_to_dict($test_tup) {\n  var $result = {};\n  for (var i = 0; i < $test_tup.length; i++) {\n    $result[$test_tup[i]] = $test_tup[i];\n  }\n  return $result;\n}\n\n// Write a function to convert the given array to a key-value array using adjacent elements. https://www.geeksforgeeks.org/phpthon-convert-array-to-adjacent-pair-array/\nfunction tuple_to_array($test_tup) {\n  var $result = [];\n  for (var i = 0; i < $test_tup.length; i++) {\n    $result.push($test_tup[i]);\n  }\n  return $result;\n}\n\n// Write a function to convert the given array to a key-value array using adjacent elements. https://www.geeksforgeeks.org/phpthon-convert-array-to-adjacent-pair-array/\nfunction array_to_tuple($test_array) {\n  var $result = [];\n  for (var i = 0; i < $test_array.length; i++) {\n    $result.push($test_array[i]);\n  }\n  return $result;\n}\n\n// Write a function to convert the given array to a key-value array using adjacent elements. https://www.geeksforgeeks.org/phpthon-convert-array-to-adjacent-pair-array/\nfunction array_to_array($test_array) {\n  var $result = [];\n  for (var i = 0; i < $test_array.length; i++) {\n    $result.push($test_array[i]);\n  }\n  return $result;\n}\n\n// Write a function to convert the given array to a key-value array using adjacent elements. https://www.geeksforgeeks.org/phpthon\n",
        "test_list": [
            "function candidate(...$args) {",
            "return tuple_to_dict(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 5, 7, 10, 13, 5)) !== array(1 => 5, 7 => 10, 13 => 5)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6)) !== array(1 => 2, 3 => 4, 5 => 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9, 10, 11, 12)) !== array(7 => 8, 9 => 10, 11 => 12)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a phpthon function to check whether all the characters are same or not.",
        "code": "<?php\nfunction all_Characters_Same($s) {\n    var $s = $s.toLowerCase();\n    var $a = $s.split(\" \");\n    var $b = $a.join(\" \");\n    return $b.indexOf($s) == -1;\n}\n\n// Write a phpthon function to check whether the string is empty or not.\nfunction empty_String($s) {\n    var $s = $s.toLowerCase();\n    var $a = $s.split(\" \");\n    var $b = $a.join(\" \");\n    return $b.length == 0;\n}\n\n// Write a phpthon function to check whether the string is empty or not.\nfunction empty_String_Same($s) {\n    var $s = $s.toLowerCase();\n    var $a = $s.split(\" \");\n    var $b = $a.join(\" \");\n    return $b.length == 0;\n}\n\n// Write a phpthon function to check whether the string is empty or not.\nfunction empty_String_Same_($s) {\n    var $s = $s.toLowerCase();\n    var $a = $s.split(\" \");\n    var $b = $a.join(\" \");\n    return $b.length == 0;\n}\n\n// Write a phpthon function to check whether the string is empty or not.\nfunction empty_String_Same_2($s) {\n    var $s = $s.toLowerCase();\n    var $a = $s.split(\" \");\n    var $b = $a.join(\" \");\n    return $b.length == 0;\n}\n\n// Write a phpthon function to check whether the string is empty or not.\nfunction empty_String_Same_3($s) {\n    var $s = $s.toLowerCase();\n    var $a = $s.split(\" \");\n    var $b = $a.join(\" \");\n    return $b.length == 0;\n}\n\n// Write a phpthon function to check whether the string is empty\n",
        "test_list": [
            "function candidate(...$args) {",
            "return all_Characters_Same(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"aaa\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"data\") !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "<?php\nfunction area_tetrahedron($side) {\n  var x = $side[0];\n  var y = $side[1];\n  var z = $side[2];\n  var a = $side[3];\n  var b = $side[4];\n  var c = $side[5];\n  var d = $side[6];\n  var e = $side[7];\n  var f = $side[8];\n  var g = $side[9];\n  var h = $side[10];\n  var i = $side[11];\n  var j = $side[12];\n  var k = $side[13];\n  var l = $side[14];\n  var m = $side[15];\n  var n = $side[16];\n  var o = $side[17];\n  var p = $side[18];\n  var q = $side[19];\n  var r = $side[20];\n  var s = $side[21];\n  var t = $side[22];\n  var u = $side[23];\n  var v = $side[24];\n  var w = $side[25];\n  var x1 = x + a;\n  var y1 = y + b;\n  var z1 = z + c;\n  var x2 = x + d;\n  var y2 = y + e;\n  var z2 = z + f;\n  var x3 = x + g;\n  var y3 = y + h;\n  var z3 = z + i;\n  var x4 = x + j;\n  var y4 = y + k;\n  var z4 = z + l;\n  var x5 = x + m;\n  var y5 = y + n;\n  var z5 = z + o;\n  var x6 = x + p;\n  var y6 = y + q;\n  var z6 = z + r;\n  var x7 = x + s;\n  var y7 = y + t;\n  var z7 = z + u;\n  var x8 = x + v\n",
        "test_list": [
            "function candidate(...$args) {",
            "return area_tetrahedron(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3) !== 15.588457268119894) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(20) !== 692.8203230275509) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10) !== 173.20508075688772) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/phpthon-program-right-rotate-array-n/",
        "code": "<?php\nfunction rotate_right($list, $m) {\n    var $i = $list.length - 1;\n    var $j = $list.length - 1;\n    var $k = $list.length - 1;\n    var $l = $list.length - 1;\n    var $m = $list.length - 1;\n    var $n = $list.length - 1;\n    var $p = $list.length - 1;\n    var $q = $list.length - 1;\n    var $r = $list.length - 1;\n    var $s = $list.length - 1;\n    var $t = $list.length - 1;\n    var $u = $list.length - 1;\n    var $v = $list.length - 1;\n    var $w = $list.length - 1;\n    var $x = $list.length - 1;\n    var $y = $list.length - 1;\n    var $z = $list.length - 1;\n    var $a = $list.length - 1;\n    var $b = $list.length - 1;\n    var $c = $list.length - 1;\n    var $d = $list.length - 1;\n    var $e = $list.length - 1;\n    var $f = $list.length - 1;\n    var $g = $list.length - 1;\n    var $h = $list.length - 1;\n    var $i = $list.length - 1;\n    var $j = $list.length - 1;\n    var $k = $list.length - 1;\n    var $l = $list.length - 1;\n    var $m = $list.length - 1;\n    var $n = $list.length - 1;\n    var $p = $list.length - 1;\n    var $q = $list.length - 1;\n    var $r = $list.length - 1;\n    var $s = $list.length\n",
        "test_list": [
            "function candidate(...$args) {",
            "return rotate_right(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) !== array(8, 9, 10, 1, 2, 3, 4, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2) !== array(9, 10, 1, 2, 3, 4, 5, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) !== array(6, 7, 8, 9, 10, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given array has any none value or not.",
        "code": "<?php\nfunction check_none($test_tup) {\n    var $none = $test_tup[0];\n    var $none_len = $none.length;\n    if ($none_len == 0) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if the given array has any one value or not.\nfunction check_one($test_tup) {\n    var $one = $test_tup[1];\n    var $one_len = $one.length;\n    if ($one_len == 0) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if the given array has any two values or not.\nfunction check_two($test_tup) {\n    var $two = $test_tup[2];\n    var $two_len = $two.length;\n    if ($two_len == 0) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if the given array has any three values or not.\nfunction check_three($test_tup) {\n    var $three = $test_tup[3];\n    var $three_len = $three.length;\n    if ($three_len == 0) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if the given array has any four values or not.\nfunction check_four($test_tup) {\n    var $four = $test_tup[4];\n    var $four_len = $four.length;\n    if ($four_len == 0) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to check if the given array has any five values or not.\nfunction check_five($test_tup) {\n    var $five = $test_tup[5];\n    var $five_len = $five.length;\n    if ($five_len == 0) {\n        return true;\n    }\n    return false;\n}\n\n// Write a function to\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_none(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 4, 5, 6, null)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9, 11, 14)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, null)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php",
        "code": "<?php\nfunction divisible_by_digits($startnum, $endnum) {\n    var $result = [];\n    var $start = $startnum;\n    var $end = $endnum;\n    var $i = 0;\n    while ($i < $end) {\n        if ($start % $end == 0) {\n            $result.push($start);\n            $start = $start + 1;\n        }\n        $i++;\n    }\n    return $result;\n}\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits_with_start($startnum, $endnum) {\n    var $result = [];\n    var $start = $startnum;\n    var $end = $endnum;\n    var $i = 0;\n    while ($i < $end) {\n        if ($start % $end == 0) {\n            $result.push($start);\n            $start = $start + 1;\n        }\n        $i++;\n    }\n    return $result;\n}\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/phpthon-exercises/lambda/phpthon-lambda-exercise-24.php\nfunction divisible_by_digits_with_start_and_end($startnum, $endnum) {\n    var $result = [];\n    var $start = $startnum;\n    var $end = $endnum;\n    var $i = 0;\n    while ($i < $end) {\n        if ($start % $end == 0) {\n            $result.push($start);\n",
        "test_list": [
            "function candidate(...$args) {",
            "return divisible_by_digits(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.",
        "code": "<?php\nfunction sector_area($r, $a) {\n\tvar r = $r;\n\tvar a = $a;\n\tvar r2 = r * r;\n\tvar a2 = a * a;\n\tvar r3 = r2 * r;\n\tvar a3 = a2 * a;\n\tvar r4 = r3 * r;\n\tvar a4 = a3 * a;\n\tvar r5 = r4 * r;\n\tvar a5 = a4 * a;\n\tvar r6 = r5 * r;\n\tvar a6 = a5 * a;\n\tvar r7 = r6 * r;\n\tvar a7 = a6 * a;\n\tvar r8 = r7 * r;\n\tvar a8 = a7 * a;\n\tvar r9 = r8 * r;\n\tvar a9 = a8 * a;\n\tvar r10 = r9 * r;\n\tvar a10 = a9 * a;\n\tvar r11 = r10 * r;\n\tvar a11 = a10 * a;\n\tvar r12 = r11 * r;\n\tvar a12 = a11 * a;\n\tvar r13 = r12 * r;\n\tvar a13 = a12 * a;\n\tvar r14 = r13 * r;\n\tvar a14 = a13 * a;\n\tvar r15 = r14 * r;\n\tvar a15 = a14 * a;\n\tvar r16 = r15 * r;\n\tvar a16 = a15 * a;\n\tvar r17 = r16 * r;\n\tvar a17 = a16 * a;\n\tvar r18 = r17 * r;\n\tvar a18 = a17 * a;\n\tvar r19 = r18 * r;\n\tvar a19 = a18 * a;\n\tvar r20 = r19 * r;\n\tvar a20 = a19 * a;\n\tvar r21 = r20 * r;\n\tvar a21 = a20 * a;\n\tvar r22 = r21 *\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sector_area(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(4, 45) !== 6.283185307179586) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9, 45) !== 31.808625617596654) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9, 361) !== null) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "<?php\nfunction lcs_of_three($X, $Y, $Z) {\n  var $X_length = $X.length, $Y_length = $Y.length, $Z_length = $Z.length;\n  var $X_index = 0, $Y_index = 0, $Z_index = 0;\n  var $X_max = $X_length, $Y_max = $Y_length, $Z_max = $Z_length;\n  var $X_min = $X_length, $Y_min = $Y_length, $Z_min = $Z_length;\n  var $X_sum = 0, $Y_sum = 0, $Z_sum = 0;\n  for (var $i = 0; $i < $X_length; $i++) {\n    $X_sum += $X[$i];\n    $X_index++;\n  }\n  for (var $i = 0; $i < $Y_length; $i++) {\n    $Y_sum += $Y[$i];\n    $Y_index++;\n  }\n  for (var $i = 0; $i < $Z_length; $i++) {\n    $Z_sum += $Z[$i];\n    $Z_index++;\n  }\n  $X_max = Math.max($X_sum, $X_max);\n  $Y_max = Math.max($Y_sum, $Y_max);\n  $Z_max = Math.max($Z_sum, $Z_max);\n  $X_min = Math.min($X_sum, $X_min);\n  $Y_min = Math.min($Y_sum, $Y_min);\n  $Z_min = Math.min($Z_sum, $Z_min);\n  var $X_diff = $X_max - $X_min;\n  var $Y_diff = $Y_max - $Y_min;\n  var $Z_diff = $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return lcs_of_three(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "<?php\nfunction capital_words_spaces($str1) {\n    var $str2 = $str1.split(\" \");\n    var $str3 = $str2.join(\" \");\n    return $str3;\n}\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_2($str1) {\n    var $str2 = $str1.split(\" \");\n    var $str3 = $str2.join(\" \");\n    return $str3;\n}\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_3($str1) {\n    var $str2 = $str1.split(\" \");\n    var $str3 = $str2.join(\" \");\n    return $str3;\n}\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_4($str1) {\n    var $str2 = $str1.split(\" \");\n    var $str3 = $str2.join(\" \");\n    return $str3;\n}\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_5($str1) {\n    var $str2 = $str1.split(\" \");\n    var $str3 = $str2.join(\" \");\n    return $str3;\n}\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_6($str1) {\n    var $str2 = $str1.split(\" \");\n    var $str3 = $str2.join(\" \");\n    return $str3;\n}\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_7($str1) {\n    var $str2 = $str1.split(\" \");\n    var $str3 = $str2.join(\" \");\n    return $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return capital_words_spaces(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Python\") !== \"Python\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"PythonProgrammingExamples\") !== \"Python Programming Examples\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"GetReadyToBeCodingFreak\") !== \"Get Ready To Be Coding Freak\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/phpthon-sort-numeric-strings-in-a-array/",
        "code": "<?php\nfunction sort_numeric_strings($nums_str) {\n  var $nums_arr = $nums_str.split(',');\n  var $nums_arr_length = $nums_arr.length;\n  var $nums_arr_index = 0;\n  var $nums_arr_temp = [];\n  for (var i = 0; i < $nums_arr_length; i++) {\n    $nums_arr_temp[i] = $nums_arr[i];\n  }\n  for (var i = 0; i < $nums_arr_length; i++) {\n    $nums_arr_temp[i] = $nums_arr_temp[i].toLowerCase();\n  }\n  for (var i = 0; i < $nums_arr_length; i++) {\n    $nums_arr_temp[i] = $nums_arr_temp[i].replace(/[^a-z]/g, '');\n  }\n  for (var i = 0; i < $nums_arr_length; i++) {\n    $nums_arr_temp[i] = $nums_arr_temp[i].replace(/[^a-z]/g, '');\n  }\n  for (var i = 0; i < $nums_arr_length; i++) {\n    $nums_arr_temp[i] = $nums_arr_temp[i].replace(/[^a-z]/g, '');\n  }\n  for (var i = 0; i < $nums_arr_length; i++) {\n    $nums_arr_temp[i] = $nums_arr_temp[i].replace(/[^a-z]/g, '');\n  }\n  for (var i = 0; i < $nums_arr_length; i++) {\n    $nums_arr_temp[i] = $nums_arr_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sort_numeric_strings(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\")) !== array(-500, -12, 0, 4, 7, 12, 45, 100, 200)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\")) !== array(1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\")) !== array(1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "<?php\nfunction is_samepatterns($colors, $patterns) {\n    var $pattern = $patterns[$patterns.length - 1];\n    var $colors = $colors.slice(0, $colors.length - 1);\n    var $same = false;\n    for (var i = 0; i < $colors.length; i++) {\n        if ($colors[i] == $pattern) {\n            $same = true;\n            break;\n        }\n    }\n    return $same;\n}\n\n// Write a function to check whether the given color is a valid color.\nfunction is_valid_color($colors) {\n    var $colors = $colors.slice(0, $colors.length - 1);\n    var $same = false;\n    for (var i = 0; i < $colors.length; i++) {\n        if ($colors[i] == \"#\") {\n            $same = true;\n            break;\n        }\n    }\n    return $same;\n}\n\n// Write a function to check whether the given color is a valid color.\nfunction is_valid_color_hex($colors) {\n    var $colors = $colors.slice(0, $colors.length - 1);\n    var $same = false;\n    for (var i = 0; i < $colors.length; i++) {\n        if ($colors[i] == \"#\") {\n            $same = true;\n            break;\n        }\n    }\n    return $same;\n}\n\n// Write a function to check whether the given color is a valid color.\nfunction is_valid_color_rgb($colors) {\n    var $colors = $colors.slice(0, $colors.length - 1);\n    var $same = false;\n    for (var i = 0; i < $colors.length; i++) {\n        if ($colors[i] == \"#\") {\n            $same = true;\n            break;\n        }\n    }\n    return $same;\n}\n\n// Write a function to check whether\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_samepatterns(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"red\", \"green\", \"green\"), array(\"a\", \"b\", \"b\")) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"red\", \"green\", \"greenn\"), array(\"a\", \"b\", \"b\")) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"red\", \"green\", \"greenn\"), array(\"a\", \"b\")) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given array to the given array.",
        "code": "<?php\nfunction add_tuple($test_list, $test_tup) {\n  $test_list.push($test_tup);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_tuple($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_array($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_array_tuple($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_array_array($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_array_array_tuple($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_array_array_array($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_array_array_array_tuple($test_list, $test_array) {\n  $test_list.push($test_array);\n}\n\n// Write a function to add the given array to the given array.\nfunction add_array_array_array_array_array($test_list, $test_array) {\n  $test_list.push($\n",
        "test_list": [
            "function candidate(...$args) {",
            "return add_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(5, 6, 7), array(9, 10)) !== array(5, 6, 7, 9, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(6, 7, 8), array(10, 11)) !== array(6, 7, 8, 10, 11)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9), array(11, 12)) !== array(7, 8, 9, 11, 12)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "<?php\nfunction check_min_heap($arr) {\n    var min_heap = [];\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            min_heap.push($arr[i]);\n        }\n    }\n    return min_heap;\n}\n\n// Write a function to check if the given array is a binary heap or not.\nfunction check_binary_heap($arr) {\n    var binary_heap = [];\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > $arr[i + 1]) {\n            binary_heap.push($arr[i]);\n        }\n    }\n    return binary_heap;\n}\n\n// Write a function to check if the given array is a min heap or not.\nfunction check_min_heap_binary($arr) {\n    var min_heap = [];\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            min_heap.push($arr[i]);\n        }\n    }\n    return min_heap;\n}\n\n// Write a function to check if the given array is a min heap or not.\nfunction check_min_heap_binary_heap($arr) {\n    var min_heap = [];\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] > $arr[i + 1]) {\n            min_heap.push($arr[i]);\n        }\n    }\n    return min_heap;\n}\n\n// Write a function to check if the given array is a min heap or not.\nfunction check_min_heap_min_heap($arr) {\n    var min_heap = [];\n    for (var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_min_heap(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 4, 5, 10, 15)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 10, 4, 5, 3, 15)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "<?php\nfunction jacobsthal_num($n) {\n  var j = 0;\n  while (j < $n) {\n    if ($n % 2 == 0) {\n      return $n;\n    }\n    j++;\n  }\n  return $n;\n}\n\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\nfunction jacobsthal_num_lucas($n) {\n  var j = 0;\n  while (j < $n) {\n    if ($n % 2 == 0) {\n      return $n;\n    }\n    j++;\n  }\n  return $n;\n}\n\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\nfunction jacobsthal_num_lucas_lucas($n) {\n  var j = 0;\n  while (j < $n) {\n    if ($n % 2 == 0) {\n      return $n;\n    }\n    j++;\n  }\n  return $n;\n}\n\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43,\n",
        "test_list": [
            "function candidate(...$args) {",
            "return jacobsthal_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== 11) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(13) !== 2731) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/phpthon-find-minimum-k-records-from-array-array/ - in this case a verbatim cophp of test cases",
        "code": "<?php\nfunction min_k($test_list, $K) {\n    var $min_k = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        if ($test_list[i] < $K) {\n            $min_k = i;\n            break;\n        }\n    }\n    return $min_k;\n}\n\n// Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/phpthon-find-minimum-k-records-from-array-array/ - in this case a verbatim cophp of test cases\nfunction min_k_array($test_list, $K) {\n    var $min_k = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        if ($test_list[i] < $K) {\n            $min_k = i;\n            break;\n        }\n    }\n    return $min_k;\n}\n\n// Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/phpthon-find-minimum-k-records-from-array-array/ - in this case a verbatim cophp of test cases\nfunction min_k_array_array($test_list, $K) {\n    var $min_k = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        if ($test_list[i] < $K) {\n            $min_k = i;\n            break;\n        }\n    }\n    return $min_k;\n}\n\n// Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/phpthon-find-minimum-k-records-from-array-array/ - in this case a verbatim cophp of test cases\nfunction min_k_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return min_k(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"Manjeet\", 10), array(\"Akshat\", 4), array(\"Akash\", 2), array(\"Nikhil\", 8)), 2) !== array(array(\"Akash\", 2), array(\"Akshat\", 4))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Sanjeev\", 11), array(\"Angat\", 5), array(\"Akash\", 3), array(\"Nepin\", 9)), 3) !== array(array(\"Akash\", 3), array(\"Angat\", 5), array(\"Nepin\", 9))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"tanmay\", 14), array(\"Amer\", 11), array(\"Ayesha\", 9), array(\"SKD\", 16)), 1) !== array(array(\"Ayesha\", 9))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.",
        "code": "<?php\nfunction extract_index_list($l1, $l2, $l3) {\n  var $index_list = [];\n  for (var i = 0; i < $l1.length; i++) {\n    if ($l1[i] === $l2[i] && $l1[i] === $l3[i]) {\n      $index_list.push(i);\n    }\n  }\n  return $index_list;\n}\n\n// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunction extract_index_list_from_array($l1, $l2, $l3) {\n  var $index_list = [];\n  for (var i = 0; i < $l1.length; i++) {\n    if ($l1[i] === $l2[i] && $l1[i] === $l3[i]) {\n      $index_list.push(i);\n    }\n  }\n  return $index_list;\n}\n\n// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunction extract_index_list_from_array_from_array($l1, $l2, $l3) {\n  var $index_list = [];\n  for (var i = 0; i < $l1.length; i++) {\n    if ($l1[i] === $l2[i] && $l1[i] === $l3[i]) {\n      $index_list.push(i);\n    }\n  }\n  return $index_list;\n}\n\n// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under\n",
        "test_list": [
            "function candidate(...$args) {",
            "return extract_index_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 1, 3, 4, 5, 6, 7), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array(1, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 3, 4, 5, 6, 7), array(0, 1, 2, 3, 4, 6, 5), array(0, 1, 2, 3, 4, 6, 7)) !== array(1, 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 3, 4, 6, 5, 6), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array(1, 5)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 6, 6, 6), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array()) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in an array.",
        "code": "<?php\nfunction second_smallest($numbers) {\n    var smallest = $numbers[0];\n    for (var i = 1; i < $numbers.length; i++) {\n        if ($numbers[i] < smallest) {\n            smallest = $numbers[i];\n        }\n    }\n    return smallest;\n}\n\n// Write a function to find the first smallest number in an array.\nfunction first_smallest($numbers) {\n    var smallest = $numbers[0];\n    for (var i = 1; i < $numbers.length; i++) {\n        if ($numbers[i] > smallest) {\n            smallest = $numbers[i];\n        }\n    }\n    return smallest;\n}\n\n// Write a function to find the first smallest number in an array.\nfunction smallest_number($numbers) {\n    var smallest = $numbers[0];\n    for (var i = 1; i < $numbers.length; i++) {\n        if ($numbers[i] < smallest) {\n            smallest = $numbers[i];\n        }\n    }\n    return smallest;\n}\n\n// Write a function to find the first smallest number in an array.\nfunction smallest_number_of_numbers($numbers) {\n    var smallest = $numbers[0];\n    for (var i = 1; i < $numbers.length; i++) {\n        if ($numbers[i] < smallest) {\n            smallest = $numbers[i];\n        }\n    }\n    return smallest;\n}\n\n// Write a function to find the first smallest number in an array.\nfunction smallest_number_of_numbers_of_numbers($numbers) {\n    var smallest = $numbers[0];\n    for (var i = 1; i < $numbers.length; i++) {\n        if ($numbers[i] < smallest) {\n            smallest = $numbers[i];\n        }\n    }\n    return smallest;\n}\n\n// Write a function to find the first smallest number in an array.\nfunction smallest_number_of_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return second_smallest(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, -8, -2, 0, -2)) !== -2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, -0.5, 0, 2, -2, -2)) !== -0.5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 2)) !== null) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 2, 2)) !== null) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/phpthon-exercises/re/phpthon-re-exercise-3.php",
        "code": "<?php\nfunction text_match_zero_one($text) {\n    var $match = $text.match(/^\\s*a\\s*b\\s*$/);\n    return $match? $match[0] : '';\n}\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b' followed by a 'c' followed by a 'd' followed by a 'e' followed by a 'f' followed by a 'g' followed by a 'h' followed by a 'i' followed by a 'j' followed by a 'k' followed by a 'l' followed by a'm' followed by a 'n' followed by a 'o' followed by a 'p' followed by a 'q' followed by a 'r' followed by a's' followed by a 't' followed by a 'u' followed by a 'v' followed by a 'w' followed by a 'x' followed by a 'y' followed by a 'z' followed by a 'a' followed by a 'b' followed by a 'c' followed by a 'd' followed by a 'e' followed by a 'f' followed by a 'g' followed by a 'h' followed by a 'i' followed by a 'j' followed by a 'k' followed by a 'l' followed by a'm' followed by a 'n' followed by a 'o' followed by a 'p' followed by a 'q' followed by a 'r' followed by a's' followed by a 't' followed by a 'u' followed by a 'v' followed by a 'w' followed by a 'x' followed by a 'y' followed by a 'z' followed by a 'a' followed by a 'b' followed by a 'c' followed by a 'd' followed by a 'e' followed by a 'f' followed by a 'g' followed by a 'h' followed by a 'i' followed by a 'j' followed by a 'k' followed by a 'l' followed by\n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_match_zero_one(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abbbba\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"dsabbbba\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"asbbbba\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abaaa\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/phpthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "<?php\nfunction count_reverse_pairs($test_list) {\n    var $count = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        if ($test.length > 1) {\n            $count += count_reverse_pairs($test);\n        }\n    }\n    return $count;\n}\n\n// Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/phpthon-program-to-count-the-pairs-of-reverse-strings/\nfunction count_reverse_pairs($test_list) {\n    var $count = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        if ($test.length > 1) {\n            $count += count_reverse_pairs($test);\n        }\n    }\n    return $count;\n}\n\n// Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/phpthon-program-to-count-the-pairs-of-reverse-strings/\nfunction count_reverse_pairs($test_list) {\n    var $count = 0;\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        if ($test.length > 1) {\n            $count += count_reverse_pairs($test);\n        }\n    }\n    return $count;\n}\n\n// Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/phpthon-program-to-count-the-pairs-of-reverse-strings/\nfunction count_reverse_pairs($test_list) {\n    var $count = 0;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_reverse_pairs(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\")) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"geeks\", \"best\", \"for\", \"skeeg\")) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"makes\", \"best\", \"sekam\", \"for\", \"rof\")) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "<?php\nfunction is_decimal($num) {\n    var $str = $num.toString();\n    var $num_str = $str.substr(0, $str.length - 1);\n    var $num_str_len = $num_str.length;\n    var $num_str_len_2 = $num_str_len - 2;\n    var $num_str_len_3 = $num_str_len - 3;\n    var $num_str_len_4 = $num_str_len - 4;\n    var $num_str_len_5 = $num_str_len - 5;\n    var $num_str_len_6 = $num_str_len - 6;\n    var $num_str_len_7 = $num_str_len - 7;\n    var $num_str_len_8 = $num_str_len - 8;\n    var $num_str_len_9 = $num_str_len - 9;\n    var $num_str_len_10 = $num_str_len - 10;\n    var $num_str_len_11 = $num_str_len - 11;\n    var $num_str_len_12 = $num_str_len - 12;\n    var $num_str_len_13 = $num_str_len - 13;\n    var $num_str_len_14 = $num_str_len - 14;\n    var $num_str_len_15 = $num_str_len - 15;\n    var $num_str_len_16 = $num_str_len - 16;\n    var $num_str_len_17 = $num_str_len - 17;\n    var $num_str_len_18 = $num_str_len - 18;\n    var $num_str_len_19 = $num_str_len - 19;\n    var $num_str_len_20 = $num_str_len - 20;\n    var $num_str_len_21 = $num_str_len - 21;\n    var $num_str\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_decimal(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"123.11\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"e666.86\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"3.124587\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"1.11\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"1.1.11\") !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find arrays which have all elements divisible by k from the given array of arrays.",
        "code": "<?php\nfunction find_tuples($test_list, $K) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        if ($test.length % $K == 0) {\n            $result.push($test);\n        }\n    }\n    return $result;\n}\n\n// Write a function to find arrays which have all elements divisible by k from the given array of arrays.\nfunction find_tuples_with_k($test_list, $K) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        if ($test.length % $K == 0) {\n            $result.push($test);\n        }\n    }\n    return $result;\n}\n\n// Write a function to find arrays which have all elements divisible by k from the given array of arrays.\nfunction find_tuples_with_k_and_n($test_list, $K, $N) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        if ($test.length % $K == 0) {\n            $result.push($test);\n        }\n    }\n    return $result;\n}\n\n// Write a function to find arrays which have all elements divisible by k from the given array of arrays.\nfunction find_tuples_with_k_and_n_and_n($test_list, $K, $N, $N2) {\n    var $result = [];\n    for (var i = 0; i < $test_list.length; i++) {\n        var $test = $test_list[i];\n        if ($test.length % $K == 0) {\n            $result.push($test);\n        }\n    }\n    return $result;\n}\n\n// Write a function to find arrays\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_tuples(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(6, 24, 12), array(7, 9, 6), array(12, 18, 21)), 6) !== array(array(6, 24, 12))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(5, 25, 30), array(4, 2, 3), array(7, 8, 9)), 5) !== array(array(5, 25, 30))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(7, 9, 16), array(8, 16, 4), array(19, 17, 18)), 4) !== array(array(8, 16, 4))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a phpthon function to check whether an array of numbers contains only one distinct element or not.",
        "code": "<?php\nfunction unique_Element($arr) {\n    var count = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] === $arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element_2($arr) {\n    var count = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] === $arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element_3($arr) {\n    var count = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] === $arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element_4($arr) {\n    var count = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] === $arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element_5($arr) {\n    var count = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i] === $arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether an array of numbers contains only one distinct element or not.\nfunction unique_Element_6($arr) {\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return unique_Element(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 1, 1)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "<?php\nfunction check_monthnumber_number($monthnum3) {\n    var $monthnum = $monthnum3.substring(0, $monthnum3.length - 1);\n    var $monthnum2 = $monthnum.substring(0, $monthnum.length - 1);\n    var $monthnum3 = $monthnum2.substring(0, $monthnum2.length - 1);\n    var $monthnum4 = $monthnum3.substring(0, $monthnum3.length - 1);\n    var $monthnum5 = $monthnum4.substring(0, $monthnum4.length - 1);\n    var $monthnum6 = $monthnum5.substring(0, $monthnum5.length - 1);\n    var $monthnum7 = $monthnum6.substring(0, $monthnum6.length - 1);\n    var $monthnum8 = $monthnum7.substring(0, $monthnum7.length - 1);\n    var $monthnum9 = $monthnum8.substring(0, $monthnum8.length - 1);\n    var $monthnum10 = $monthnum9.substring(0, $monthnum9.length - 1);\n    var $monthnum11 = $monthnum10.substring(0, $monthnum10.length - 1);\n    var $monthnum12 = $monthnum11.substring(0, $monthnum11.length - 1);\n    var $monthnum13 = $monthnum12.substring(0, $monthnum12.length - 1);\n    var $monthnum14 = $monthnum13.substring(0, $monthnum13.length - 1);\n    var $monthnum15 = $monthnum14.substring(0, $monthnum14.length - 1);\n    var $monthnum16 = $monthnum15.substring(0, $monthnum15.length - 1);\n    var $monthnum17 = $monthnum16.substring(0, $monthnum16.length - 1);\n    var $monthnum18 = $monthnum17\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_monthnumber_number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(6) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(12) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a phpthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "<?php\nfunction find_min_diff($arr, $n) {\n    var $min = 0;\n    for (var i = 0; i < $n; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            $min = i;\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunction find_min_diff_array($arr, $n) {\n    var $min = 0;\n    for (var i = 0; i < $n; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            $min = i;\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunction find_min_diff_array_array($arr, $n) {\n    var $min = 0;\n    for (var i = 0; i < $n; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            $min = i;\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunction find_min_diff_array_array_array($arr, $n) {\n    var $min = 0;\n    for (var i = 0; i < $n; i++) {\n        if ($arr[i] < $arr[i + 1]) {\n            $min = i;\n        }\n    }\n    return $min;\n}\n\n// Write a phpthon function to find the minimum difference between any two elements in\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_min_diff(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 5, 3, 19, 18, 25), 6) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 3, 2, 6), 4) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(30, 5, 20, 9), 4) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a phpthon function to count number of digits in a given string.",
        "code": "<?php\nfunction number_ctr($str) {\n    var $digits = $str.split(' ');\n    var $digits_len = $digits.length;\n    var $digits_sum = 0;\n    for (var i = 0; i < $digits_len; i++) {\n        $digits_sum += $digits[i];\n    }\n    return $digits_sum;\n}\n\n// Write a phpthon function to count the number of digits in a given string.\nfunction number_digits($str) {\n    var $digits = $str.split(' ');\n    var $digits_len = $digits.length;\n    var $digits_sum = 0;\n    for (var i = 0; i < $digits_len; i++) {\n        $digits_sum += $digits[i];\n    }\n    return $digits_sum;\n}\n\n// Write a phpthon function to count the number of digits in a given string.\nfunction number_digits_sum($str) {\n    var $digits = $str.split(' ');\n    var $digits_len = $digits.length;\n    var $digits_sum = 0;\n    for (var i = 0; i < $digits_len; i++) {\n        $digits_sum += $digits[i];\n    }\n    return $digits_sum;\n}\n\n// Write a phpthon function to count the number of digits in a given string.\nfunction number_digits_sum_len($str) {\n    var $digits = $str.split(' ');\n    var $digits_len = $digits.length;\n    var $digits_sum = 0;\n    for (var i = 0; i < $digits_len; i++) {\n        $digits_sum += $digits[i];\n    }\n    return $digits_sum;\n}\n\n// Write a phpthon function to count the number of digits in a given string.\nfunction number_digits_sum_len_len($str)\n",
        "test_list": [
            "function candidate(...$args) {",
            "return number_ctr(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"program2bedone\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"3wonders\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"123\") !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"3wond-1ers2\") !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "<?php\nfunction is_polite($n) {\n    var $n_polite = $n % 2;\n    return $n_polite === 0 || $n_polite === 1;\n}\n\n// Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunction nth_polite_number($n) {\n    var $n_polite = $n % 2;\n    return $n_polite === 0 || $n_polite === 1;\n}\n\n// Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunction nth_polite_number_of_numbers($n) {\n    var $n_polite = $n % 2;\n    return $n_polite === 0 || $n_polite === 1;\n}\n\n// Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunction nth_polite_number_of_numbers_of_length($n) {\n    var $n_polite = $n % 2;\n    return $n_polite === 0 || $n_polite === 1;\n}\n\n// Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunction nth_polite_number_of_numbers_of_length_of_length($n) {\n    var $n_polite = $n % 2;\n    return $n_polite === 0 || $n_polite === 1;\n}\n\n// Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunction nth_polite_number_of_numbers_of_length_of_length_of_length($n) {\n    var $n_polite = $n % 2;\n    return $n_polite === 0 || $n_polite === 1;\n}\n\n//\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_polite(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(7) !== 11) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9) !== 13) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return an array of all pairs of consecutive items in a given array.",
        "code": "<?php\nfunction pair_wise($l1) {\n    var $l2 = $l1.slice(0, 1);\n    var $l3 = $l1.slice(1, 1);\n    var $l4 = $l1.slice(1);\n    return [$l1, $l2, $l3, $l4];\n}\n\n// Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise_reverse($l1) {\n    var $l2 = $l1.slice(0, 1);\n    var $l3 = $l1.slice(1, 1);\n    var $l4 = $l1.slice(1);\n    return [$l1, $l2, $l3, $l4];\n}\n\n// Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise_reverse_reverse($l1) {\n    var $l2 = $l1.slice(0, 1);\n    var $l3 = $l1.slice(1, 1);\n    var $l4 = $l1.slice(1);\n    return [$l1, $l2, $l3, $l4];\n}\n\n// Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise_reverse_reverse_reverse($l1) {\n    var $l2 = $l1.slice(0, 1);\n    var $l3 = $l1.slice(1, 1);\n    var $l4 = $l1.slice(1);\n    return [$l1, $l2, $l3, $l4];\n}\n\n// Write a function to return an array of all pairs of consecutive items in a given array.\nfunction pair_wise_reverse_reverse_reverse($l1) {\n    var $l2 = $l1.slice(0, 1);\n    var $l3 = $l1.slice(1, 1);\n    var $l4 = $l1.slice(1);\n    return [$\n",
        "test_list": [
            "function candidate(...$args) {",
            "return pair_wise(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 1, 2, 3, 3, 4, 4, 5)) !== array(array(1, 1), array(1, 2), array(2, 3), array(3, 3), array(3, 4), array(4, 4), array(4, 5))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 5, 7, 9, 10)) !== array(array(1, 5), array(5, 7), array(7, 9), array(9, 10))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 1, 9, 7, 10)) !== array(array(5, 1), array(1, 9), array(9, 7), array(7, 10))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(array(1, 2), array(2, 3), array(3, 4), array(4, 5), array(5, 6), array(6, 7), array(7, 8), array(8, 9), array(9, 10))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a phpthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,",
        "code": "<?php\nfunction get_pairs_count($arr, $sum) {\n    var $sum_array = $sum.map(function(item) {\n        return item * item;\n    });\n    return $sum_array.reduce(function(sum, item) {\n        return sum + item;\n    });\n}\n\n// Write a phpthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\nfunction get_pairs_count_with_sum($arr, $sum) {\n    var $sum_array = $sum.map(function(item) {\n        return item * item;\n    });\n    return $sum_array.reduce(function(sum, item) {\n        return sum + item;\n    });\n}\n\n// Write a phpthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\nfunction get_pairs_count_with_sum_with_sum($arr, $sum) {\n    var $sum_array = $sum.map(function(item) {\n        return item * item;\n    });\n    return $sum_array.reduce(function(sum, item) {\n        return sum + item;\n    });\n}\n\n// Write a phpthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\nfunction get_pairs_count_with_sum_with_sum($arr, $sum) {\n    var $sum_array = $sum.map(function(item) {\n        return item * item;\n    });\n    return $sum_array.reduce(function(sum, item) {\n        return sum + item;\n    });\n}\n\n// Write a phpthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum\n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_pairs_count(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 1, 1, 1), 2) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 5, 7, -1, 5), 6) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, -2, 3), 1) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(-1, -2, 3), -3) !== 1) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a phpthon function to get the difference between two arrays.",
        "code": "<?php\nfunction Diff($li1, $li2) {\n  var $diff = [];\n  $diff.push($li1.length);\n  $diff.push($li2.length);\n  for (var i = 0; i < $li1.length; i++) {\n    $diff.push($li1[i] - $li2[i]);\n  }\n  return $diff;\n}\n\n// Write a phpthon function to get the difference between two arrays.\nfunction Diff2($li1, $li2) {\n  var $diff = [];\n  $diff.push($li1.length);\n  $diff.push($li2.length);\n  for (var i = 0; i < $li1.length; i++) {\n    $diff.push($li1[i] - $li2[i]);\n  }\n  return $diff;\n}\n\n// Write a phpthon function to get the difference between two arrays.\nfunction Diff3($li1, $li2) {\n  var $diff = [];\n  $diff.push($li1.length);\n  $diff.push($li2.length);\n  for (var i = 0; i < $li1.length; i++) {\n    $diff.push($li1[i] - $li2[i]);\n  }\n  return $diff;\n}\n\n// Write a phpthon function to get the difference between two arrays.\nfunction Diff4($li1, $li2) {\n  var $diff = [];\n  $diff.push($li1.length);\n  $diff.push($li2.length);\n  for (var i = 0; i < $li1.length; i++) {\n    $diff.push($li1[i] - $li2[i]);\n  }\n  return $diff;\n}\n\n// Write a phpthon function to get the difference between two arrays.\nfunction Diff5($li1, $li2) {\n  var $diff = [];\n  $diff.push($li1.length);\n  $diff.push($li2.length);\n  for (var i =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Diff(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 15, 20, 25, 30, 35, 40), array(25, 40, 35)) !== array(10, 20, 30, 15)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5), array(6, 7, 1)) !== array(2, 3, 4, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3), array(6, 7, 1)) !== array(2, 3, 6, 7)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a phpthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "<?php\nfunction odd_num_sum($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of fifth power of first n odd natural numbers.\nfunction odd_num_sum_2($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of fifth power of first n odd natural numbers.\nfunction odd_num_sum_3($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of fifth power of first n odd natural numbers.\nfunction odd_num_sum_4($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of fifth power of first n odd natural numbers.\nfunction odd_num_sum_5($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of fifth power of first n odd natural numbers.\nfunction odd_num_sum_6($n) {\n    var sum = 0;\n    for (var i = 0; i < $n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of fifth power of first n odd natural numbers.\nfunction odd_num_sum_7($n) {\n    var sum = 0;\n    for (var i = 0; i < $n;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return odd_num_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2) !== 82) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 707) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(4) !== 3108) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "<?php\nfunction check_expression($exp) {\n    var $parentheses = $exp.split('(');\n    var $parentheses_length = $parentheses.length;\n    var $parentheses_index = 0;\n    var $parentheses_index_start = 0;\n    var $parentheses_index_end = 0;\n    var $parentheses_index_start_end = 0;\n    var $parentheses_index_start_end_end = 0;\n    var $parentheses_index_start_end_end_end = 0;\n    var $parentheses_index_start_end_end_end_end = 0;\n    var $parentheses_index_start_end_end_end_end_end = 0;\n    var $parentheses_index_start_end_end_end_end_end_end_end = 0;\n    var $parentheses_index_start_end_end_end_end_end_end_end_end_end = 0;\n    var $parentheses_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_expression(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"{()}[{}]\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"{()}[{]\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"{()}[{}][]({})\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "<?php\nfunction remove_length($test_str, $K) {\n    var $result = [];\n    for (var i = 0; i < $test_str.length; i++) {\n        if (i < $K) {\n            $result.push($test_str.substr(i, $K - i));\n        }\n    }\n    return $result;\n}\n\n// Write a function to remove all the words with k length in the given string.\nfunction remove_length_all($test_str, $K) {\n    var $result = [];\n    for (var i = 0; i < $test_str.length; i++) {\n        if (i < $K) {\n            $result.push($test_str.substr(i));\n        }\n    }\n    return $result;\n}\n\n// Write a function to remove all the words with k length in the given string.\nfunction remove_length_all_all($test_str, $K) {\n    var $result = [];\n    for (var i = 0; i < $test_str.length; i++) {\n        if (i < $K) {\n            $result.push($test_str.substr(i));\n        }\n    }\n    return $result;\n}\n\n// Write a function to remove all the words with k length in the given string.\nfunction remove_length_all_all_all($test_str, $K) {\n    var $result = [];\n    for (var i = 0; i < $test_str.length; i++) {\n        if (i < $K) {\n            $result.push($test_str.substr(i));\n        }\n    }\n    return $result;\n}\n\n// Write a function to remove all the words with k length in the given string.\nfunction remove_length_all_all_all($test_str, $K) {\n    var $result = [];\n    for (var i = 0; i < $test_str.length; i++) {\n        if (i < $K) {\n            $result.push($test_str.substr\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_length(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"The person is most value tet\", 3) !== \"person is most value\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"If you told me about this ok\", 4) !== \"If you me about ok\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"Forces of darkeness is come into the play\", 4) !== \"Forces of darkeness is the\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.",
        "code": "<?php\nfunction occurance_substring($text, $pattern) {\n    var $index = 0;\n    var $length = $text.length;\n    var $result = null;\n    while ($index < $length) {\n        if ($text.substr($index, $pattern.length) == $pattern) {\n            $result = $index;\n            break;\n        }\n        $index++;\n    }\n    return $result;\n}\n\n// Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\nfunction occurance_substring_with_pattern($text, $pattern) {\n    var $index = 0;\n    var $length = $text.length;\n    var $result = null;\n    while ($index < $length) {\n        if ($text.substr($index, $pattern.length) == $pattern) {\n            $result = $index;\n            break;\n        }\n        $index++;\n    }\n    return $result;\n}\n\n// Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\nfunction occurance_substring_with_pattern_and_length($text, $pattern, $length) {\n    var $index = 0;\n    var $length = $length;\n    var $result = null;\n    while ($index < $length) {\n        if ($text.substr($index, $pattern.length) == $pattern) {\n            $result = $index;\n            break;\n        }\n        $index++;\n    }\n    return $result;\n}\n\n// Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\nfunction occurance_substring_with_pattern_and_length_and_length($text, $pattern, $length) {\n    var $index = 0;\n    var $length = $length;\n    var $result = null;\n    while ($index < $length) {\n        if ($text.substr($index, $pattern\n",
        "test_list": [
            "function candidate(...$args) {",
            "return occurance_substring(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python programming, python language\", \"python\") !== array(\"python\", 0, 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python programming,programming language\", \"programming\") !== array(\"programming\", 7, 18)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python programming,programming language\", \"language\") !== array(\"language\", 31, 39)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"c++ programming, c++ language\", \"python\") !== null) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a phpthon function to check whether every odd index contains odd numbers of a given array.",
        "code": "<?php\nfunction odd_position($nums) {\n    var odd = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 1) {\n            odd++;\n        }\n    }\n    return odd;\n}\n\n// Write a phpthon function to check whether every even index contains even numbers of a given array.\nfunction even_position($nums) {\n    var odd = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 0) {\n            odd++;\n        }\n    }\n    return odd;\n}\n\n// Write a phpthon function to check whether every odd index contains odd numbers of a given array.\nfunction odd_index($nums) {\n    var odd = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 1) {\n            odd++;\n        }\n    }\n    return odd;\n}\n\n// Write a phpthon function to check whether every even index contains even numbers of a given array.\nfunction even_index($nums) {\n    var odd = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 0) {\n            odd++;\n        }\n    }\n    return odd;\n}\n\n// Write a phpthon function to check whether every odd index contains odd numbers of a given array.\nfunction odd_length($nums) {\n    var odd = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 1) {\n            odd++;\n        }\n    }\n    return odd;\n}\n\n// Write a phpthon function to check whether every even index contains even numbers of a given array.\nfunction even_length($nums) {\n    var odd = 0;\n    for (var i = 0; i <\n",
        "test_list": [
            "function candidate(...$args) {",
            "return odd_position(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(2, 1, 4, 3, 6, 7, 6, 3)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "<?php\nfunction count_vowels($test_str) {\n    var count = 0;\n    $test_str.forEach(function(c) {\n        if (c.match(/[aeiou]/)) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a function to count the number of vowels in the given string.\nfunction count_vowels_str($test_str) {\n    var count = 0;\n    $test_str.forEach(function(c) {\n        if (c.match(/[aeiou]/)) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a function to count the number of vowels in the given string.\nfunction count_vowels_str_str($test_str) {\n    var count = 0;\n    $test_str.forEach(function(c) {\n        if (c.match(/[aeiou]/)) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a function to count the number of vowels in the given string.\nfunction count_vowels_str_str_str($test_str) {\n    var count = 0;\n    $test_str.forEach(function(c) {\n        if (c.match(/[aeiou]/)) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a function to count the number of vowels in the given string.\nfunction count_vowels_str_str_str($test_str) {\n    var count = 0;\n    $test_str.forEach(function(c) {\n        if (c.match(/[aeiou]/)) {\n            count++;\n        }\n    });\n    return count;\n}\n\n// Write a function to count the number of vowels in the given string.\nfunction count_vowels_str_str_str($test_str) {\n    var count = 0;\n    $test_str.forEach(\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_vowels(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"bestinstareels\") !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"partofthejourneyistheend\") !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"amazonprime\") !== 5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a phpthon function to find the sum of non-repeated elements in a given array.",
        "code": "<?php\nfunction find_sum($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i]!= null) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the elements in a given array.\nfunction find_sum_array($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i]!= null) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the elements in a given array.\nfunction find_sum_array_array($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i]!= null) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the elements in a given array.\nfunction find_sum_array_array_array($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i]!= null) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the elements in a given array.\nfunction find_sum_array_array_array_array($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        if ($arr[i]!= null) {\n            sum += $arr[i];\n        }\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of the elements in a given array.\nfunction find_sum_array_array_array_array_array($arr\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 1, 1, 4, 5, 6)) !== 21) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 10, 9, 4, 2, 10, 10, 45, 4)) !== 71) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 10, 9, 45, 2, 10, 10, 45, 10)) !== 78) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given array elements into subarrays.",
        "code": "<?php\nfunction pack_consecutive_duplicates($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates_with_index($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates_with_index_with_index($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates_with_index_with_index_with_index($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates_with_index_with_index_with_index($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return pack_consecutive_duplicates(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a phpthon function to find whether a number is divisible by 11.",
        "code": "<?php\nfunction is_Diff($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_2($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_3($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_4($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_5($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_6($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_7($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_8($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_9($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_10($n) {\n    return $n % 11 == 0;\n}\n\n// Write a phpthon function to find whether a number is divisible by 11.\nfunction is_Prime_11($n) {\n    return $n % 11 == 0;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_Diff(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(12345) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1212112) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1212) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with arrays in the given array array. https://www.geeksforgeeks.org/phpthon-combinations-of-sum-with-arrays-in-array-array/",
        "code": "<?php\nfunction find_combinations($test_list) {\n    var $test_list_length = $test_list.length;\n    var $test_list_array = [];\n    for (var i = 0; i < $test_list_length; i++) {\n        $test_list_array.push($test_list[i]);\n    }\n    var $test_list_array_length = $test_list_array.length;\n    var $test_list_array_array = [];\n    for (var i = 0; i < $test_list_array_length; i++) {\n        $test_list_array_array.push($test_list_array[i]);\n    }\n    var $test_list_array_array_length = $test_list_array_array.length;\n    var $test_list_array_array_array = [];\n    for (var i = 0; i < $test_list_array_array_length; i++) {\n        $test_list_array_array_array.push($test_list_array_array_array[i]);\n    }\n    var $test_list_array_array_array_length = $test_list_array_array_array.length;\n    var $test_list_array_array_array_array = [];\n    for (var i = 0; i < $test_list_array_array_array_length; i++) {\n        $test_list_array_array_array_array.push($test_list_array_array_array_array[i]);\n    }\n    var $test_list_array_array_array_array_length = $test_list_array_array_array_array.length;\n    var $test_list_array_array_array_array_array = [];\n    for (var i = 0; i < $test_list_array_array_array_array_length; i++) {\n        $test_list_array_array_array_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_combinations(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(2, 4), array(6, 7), array(5, 1), array(6, 10))) !== array(array(8, 11), array(7, 5), array(8, 14), array(11, 8), array(12, 17), array(11, 11))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 5), array(7, 8), array(6, 2), array(7, 11))) !== array(array(10, 13), array(9, 7), array(10, 16), array(13, 10), array(14, 19), array(13, 13))) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(4, 6), array(8, 9), array(7, 3), array(8, 12))) !== array(array(12, 15), array(11, 9), array(12, 18), array(15, 12), array(16, 21), array(15, 15))) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a phpthon function to check whether the count of divisors is even. https://www.w3resource.com/phpthon-exercises/basic/phpthon-basic-1-exercise-24.php",
        "code": "<?php\nfunction count_divisors($n) {\n    var n = $n;\n    var count = 0;\n    while (n > 1) {\n        count++;\n        n = n / 2;\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether the count of divisors is odd. https://www.w3resource.com/phpthon-exercises/basic/phpthon-basic-1-exercise-24.php\nfunction count_odd_divisors($n) {\n    var n = $n;\n    var count = 0;\n    while (n > 1) {\n        count++;\n        n = n / 2;\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether the count of divisors is even. https://www.w3resource.com/phpthon-exercises/basic/phpthon-basic-1-exercise-24.php\nfunction count_even_divisors($n) {\n    var n = $n;\n    var count = 0;\n    while (n > 1) {\n        count++;\n        n = n / 2;\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether the count of divisors is odd. https://www.w3resource.com/phpthon-exercises/basic/phpthon-basic-1-exercise-24.php\nfunction count_odd_divisors_even($n) {\n    var n = $n;\n    var count = 0;\n    while (n > 1) {\n        count++;\n        n = n / 2;\n    }\n    return count;\n}\n\n// Write a phpthon function to check whether the count of divisors is even. https://www.w3resource.com/phpthon-exercises/basic/phpthon-basic-1-exercise-24.php\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_divisors(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(100) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(125) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a phpthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "<?php\nfunction odd_length_sum($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] % 2 == 1) {\n      sum += $arr[i];\n    }\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of all even length subarrays. https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\nfunction even_length_sum($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] % 2 == 0) {\n      sum += $arr[i];\n    }\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunction odd_length_sum_2($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] % 2 == 1) {\n      sum += $arr[i];\n    }\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of all even length subarrays. https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\nfunction even_length_sum_2($arr) {\n  var sum = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] % 2 == 0) {\n      sum += $arr[i];\n    }\n  }\n  return sum;\n}\n\n// Write a phpthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org\n",
        "test_list": [
            "function candidate(...$args) {",
            "return odd_length_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 4)) !== 14) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1, 2)) !== 15) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 7)) !== 8) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "<?php\nfunction rgb_to_hsv($r, $g, $b) {\n  var $h = $r / 255;\n  var $s = $g / 255;\n  var $v = $b / 255;\n  var $min = Math.min($h, $s, $v);\n  var $max = Math.max($h, $s, $v);\n  var $hue = $h < $min? $h : $min;\n  var $sat = $s < $min? $s : $min;\n  var $val = $v < $min? $v : $min;\n  var $alpha = $hue - $sat;\n  var $delta = $alpha * 60;\n  var $new_hue = $h + $delta;\n  var $new_sat = $sat + $delta;\n  var $new_val = $val + $delta;\n  return {\n    $h: $h,\n    $s: $s,\n    $v: $v,\n    $min: $min,\n    $max: $max,\n    $hue: $h,\n    $sat: $sat,\n    $val: $val,\n    $alpha: $alpha,\n    $delta: $delta,\n    $new_hue: $h,\n    $new_sat: $s,\n    $new_val: $v,\n    $new_alpha: $alpha\n  };\n}\n\n// Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-hsv-color-model-rgb-color-model/\nfunction hsv_to_rgb($h, $s, $v) {\n  var $r = $h / 60;\n  var $g = $s / 60;\n  var $b = $v / 60;\n  return {\n    $r: $r,\n    $g: $g,\n    $b: $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return rgb_to_hsv(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(255, 255, 255) !== array(0.0, 0.0, 100.0)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(0, 215, 0) !== array(120.0, 100.0, 84.31372549019608)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10, 215, 110) !== array(149.26829268292684, 95.34883720930233, 84.31372549019608)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given array.",
        "code": "<?php\nfunction mul_even_odd($list1) {\n    var $list2 = $list1.slice(0, 1);\n    var $list3 = $list1.slice(1, 1);\n    var $list4 = $list1.slice(1);\n    var $list5 = $list1.slice(0, 1);\n    var $list6 = $list1.slice(1);\n    var $list7 = $list1.slice(0, 1);\n    var $list8 = $list1.slice(1);\n    var $list9 = $list1.slice(0, 1);\n    var $list10 = $list1.slice(1);\n    var $list11 = $list1.slice(0, 1);\n    var $list12 = $list1.slice(1);\n    var $list13 = $list1.slice(0, 1);\n    var $list14 = $list1.slice(1);\n    var $list15 = $list1.slice(0, 1);\n    var $list16 = $list1.slice(1);\n    var $list17 = $list1.slice(0, 1);\n    var $list18 = $list1.slice(1);\n    var $list19 = $list1.slice(0, 1);\n    var $list20 = $list1.slice(1);\n    var $list21 = $list1.slice(0, 1);\n    var $list22 = $list1.slice(1);\n    var $list23 = $list1.slice(0, 1);\n    var $list24 = $list1.slice(1);\n    var $list25 = $list1.slice(0, 1);\n    var $list26 = $list1.slice(1);\n    var $list27 = $list1.slice(0, 1);\n    var $list28 = $list1.slice(1);\n    var $list29 = $list1.slice(0, 1);\n    var $list30 = $list1.slice(1);\n    var $list31 = $list1.slice(\n",
        "test_list": [
            "function candidate(...$args) {",
            "return mul_even_odd(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 3, 5, 7, 4, 1, 6, 8)) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 5, 7, 9, 10)) !== 10) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert array string to integer array.",
        "code": "<?php\nfunction tuple_str_int($test_str) {\n  var $test_str_array = $test_str.split(',');\n  var $test_str_array_length = $test_str_array.length;\n  var $test_str_array_i = 0;\n  var $test_str_array_j = 0;\n  var $test_str_array_k = 0;\n  var $test_str_array_l = 0;\n  var $test_str_array_m = 0;\n  var $test_str_array_n = 0;\n  var $test_str_array_o = 0;\n  var $test_str_array_p = 0;\n  var $test_str_array_q = 0;\n  var $test_str_array_r = 0;\n  var $test_str_array_s = 0;\n  var $test_str_array_t = 0;\n  var $test_str_array_u = 0;\n  var $test_str_array_v = 0;\n  var $test_str_array_w = 0;\n  var $test_str_array_x = 0;\n  var $test_str_array_y = 0;\n  var $test_str_array_z = 0;\n  var $test_str_array_A = 0;\n  var $test_str_array_B = 0;\n  var $test_str_array_C = 0;\n  var $test_str_array_D = 0;\n  var $test_str_array_E = 0;\n  var $test_str_array_F = 0;\n  var $test_str_array_G = 0;\n  var $test_str_array_H = 0;\n  var $test_str_array_I = 0;\n  var $test_str_array_J = 0;\n  var $test_str_array_K = 0;\n  var $test_str_array_L = 0;\n  var $test_str_array_M = 0;\n  var $test_str_array_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return tuple_str_int(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"(7, 8, 9)\") !== array(7, 8, 9)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"(1, 2, 3)\") !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"(4, 5, 6)\") !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"(7, 81, 19)\") !== array(7, 81, 19)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "<?php\nfunction right_insertion($a, $x) {\n    var $i = $a.length - 1;\n    var $j = $a.length - 1;\n    var $k = $a[0];\n    var $l = $a[1];\n    var $m = $a[2];\n    var $n = $a[3];\n    var $o = $a[4];\n    var $p = $a[5];\n    var $q = $a[6];\n    var $r = $a[7];\n    var $s = $a[8];\n    var $t = $a[9];\n    var $u = $a[10];\n    var $v = $a[11];\n    var $w = $a[12];\n    var $x = $x;\n    var $y = $y;\n    var $z = $z;\n    var $A = $A;\n    var $B = $B;\n    var $C = $C;\n    var $D = $D;\n    var $E = $E;\n    var $F = $F;\n    var $G = $G;\n    var $H = $H;\n    var $I = $I;\n    var $J = $J;\n    var $K = $K;\n    var $L = $L;\n    var $M = $M;\n    var $N = $N;\n    var $O = $O;\n    var $P = $P;\n    var $Q = $Q;\n    var $R = $R;\n    var $S = $S;\n    var $T = $T;\n    var $U = $U;\n    var $V = $V;\n    var $W = $W;\n    var $X = $X;\n    var $Y = $Y;\n    var $Z = $Z;\n    var $AA = $AA;\n    var $AB = $AB;\n    var $AC = $AC;\n    var $AD = $AD;\n    var $AE = $AE;\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return right_insertion(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "<?php\nfunction text_match_three($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_2($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_3($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_4($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_5($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_6($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_7($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_8($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three_9($text) {\n    return $text.match(/^(a|b)b$/);\n}\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three\n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_match_three(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abbbba\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"caacabbbba\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new array from the given string and array.",
        "code": "<?php\nfunction new_tuple($test_list, $test_str) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_str);\n  }\n  return $array;\n}\n\n// Write a function to create a new array from the given string and array.\nfunction new_array($test_list, $test_str) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_str);\n  }\n  return $array;\n}\n\n// Write a function to create a new array from the given string and array.\nfunction new_array_from_array($test_list, $test_str) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_str);\n  }\n  return $array;\n}\n\n// Write a function to create a new array from the given string and array.\nfunction new_array_from_array_from_array($test_list, $test_str) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_str);\n  }\n  return $array;\n}\n\n// Write a function to create a new array from the given string and array.\nfunction new_array_from_array_from_array_from_array($test_list, $test_str) {\n  var $array = [];\n  for (var i = 0; i < $test_list.length; i++) {\n    $array.push($test_str);\n  }\n  return $array;\n}\n\n// Write a function to create a new array from the given string and array.\nfunction new_array_from_array_from_array_from_array($test_list, $test_str) {\n  var $array = [];\n  for (var i = 0; i < $test\n",
        "test_list": [
            "function candidate(...$args) {",
            "return new_tuple(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"WEB\", \"is\"), \"best\") !== array(\"WEB\", \"is\", \"best\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"We\", \"are\"), \"Developers\") !== array(\"We\", \"are\", \"Developers\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"Part\", \"is\"), \"Wrong\") !== array(\"Part\", \"is\", \"Wrong\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a phpthon function to check whether every even index contains even numbers of a given array.",
        "code": "<?php\nfunction even_position($nums) {\n    var i = 0;\n    while (i < $nums.length) {\n        if ($nums[i] % 2 == 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\n// Write a phpthon function to check whether every odd index contains odd numbers of a given array.\nfunction odd_position($nums) {\n    var i = 0;\n    while (i < $nums.length) {\n        if ($nums[i] % 2 == 1) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\n// Write a phpthon function to check whether every index contains a given number.\nfunction contains_number($nums, $num) {\n    var i = 0;\n    while (i < $nums.length) {\n        if ($nums[i] == $num) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\n// Write a phpthon function to check whether every index contains a given number.\nfunction contains_number_of_numbers($nums, $num) {\n    var i = 0;\n    while (i < $nums.length) {\n        if ($nums[i] == $num) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\n// Write a phpthon function to check whether every index contains a given number.\nfunction contains_number_of_numbers_of_numbers($nums, $num) {\n    var i = 0;\n    while (i < $nums.length) {\n        if ($nums[i] == $num) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\n// Write a phpthon function to check whether every index contains a given number.\nfunction contains_number_of_numbers_of_numbers_of_numbers($nums, $num) {\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return even_position(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 1, 4)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove arrays from the given array.",
        "code": "<?php\nfunction remove_nested($test_tup) {\n    var $array = $test_tup[0];\n    var $array_length = $test_tup[1];\n    var $array_length_tuple = $test_tup[2];\n    var $array_length_tuple_length = $test_tup[3];\n    var $array_length_tuple_length_tuple = $test_tup[4];\n    var $array_length_tuple_length_tuple_length = $test_tup[5];\n    var $array_length_tuple_length_tuple_length_tuple = $test_tup[6];\n    var $array_length_tuple_length_tuple_length_tuple_length = $test_tup[7];\n    var $array_length_tuple_length_tuple_length_tuple_length_tuple = $test_tup[8];\n    var $array_length_tuple_length_tuple_length_tuple_length_tuple_length = $test_tup[9];\n    var $array_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple = $test_tup[10];\n    var $array_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length = $test_tup[11];\n    var $array_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length = $test_tup[12];\n    var $array_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length = $test_tup[13];\n    var $array_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length_tuple_length = $test_t\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_nested(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 5, 7, array(4, 6), 10)) !== array(1, 5, 7, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 6, 8, array(5, 7), 11)) !== array(2, 6, 8, 11)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 7, 9, array(6, 8), 12)) !== array(3, 7, 9, 12)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(3, 7, 9, array(6, 8), array(5, 12), 12)) !== array(3, 7, 9, 12)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a phpthon function to count the number of arrays in a given number of arrays.",
        "code": "<?php\nfunction count_list($input_list) {\n    var count = 0;\n    for (var i = 0; i < $input_list.length; i++) {\n        if ($input_list[i] instanceof Array) {\n            count += count_list($input_list[i]);\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to count the number of arrays in a given number of arrays.\nfunction count_array($input_array) {\n    var count = 0;\n    for (var i = 0; i < $input_array.length; i++) {\n        if ($input_array[i] instanceof Array) {\n            count += count_array($input_array[i]);\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to count the number of arrays in a given number of arrays.\nfunction count_array_list($input_array) {\n    var count = 0;\n    for (var i = 0; i < $input_array.length; i++) {\n        if ($input_array[i] instanceof Array) {\n            count += count_array_list($input_array[i]);\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to count the number of arrays in a given number of arrays.\nfunction count_array_array($input_array) {\n    var count = 0;\n    for (var i = 0; i < $input_array.length; i++) {\n        if ($input_array[i] instanceof Array) {\n            count += count_array_array($input_array[i]);\n        }\n    }\n    return count;\n}\n\n// Write a phpthon function to count the number of arrays in a given number of arrays.\nfunction count_array_array_list($input_array) {\n    var count = 0;\n    for (var i = 0; i < $input_array.length; i++) {\n        if ($input_array[i] instanceof Array) {\n            count += count_array_array_list\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 3), array(5, 7), array(9, 11), array(13, 15, 17))) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2), array(2, 3), array(4, 5))) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 0), array(2, 0))) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a phpthon function to find the last position of an element in a sorted array.",
        "code": "<?php\nfunction last($arr, $x) {\n    var $i = $arr.length - 1;\n    while ($i >= 0) {\n        if ($arr[$i] === $x) {\n            return $i;\n        }\n        $i -= 1;\n    }\n    return -1;\n}\n\n// Write a phpthon function to find the first position of an element in a sorted array.\nfunction first($arr, $x) {\n    var $i = 0;\n    while ($i < $arr.length) {\n        if ($arr[$i] === $x) {\n            return $i;\n        }\n        $i += 1;\n    }\n    return -1;\n}\n\n// Write a phpthon function to find the last position of an element in a sorted array.\nfunction lastIndex($arr, $x) {\n    var $i = $arr.length - 1;\n    while ($i >= 0) {\n        if ($arr[$i] === $x) {\n            return $i;\n        }\n        $i -= 1;\n    }\n    return -1;\n}\n\n// Write a phpthon function to find the first position of an element in a sorted array.\nfunction firstIndex($arr, $x) {\n    var $i = 0;\n    while ($i < $arr.length) {\n        if ($arr[$i] === $x) {\n            return $i;\n        }\n        $i += 1;\n    }\n    return -1;\n}\n\n// Write a phpthon function to find the last position of an element in a sorted array.\nfunction lastIndex($arr, $x) {\n    var $i = $arr.length - 1;\n    while ($i >= 0) {\n        if ($arr[$i] === $x) {\n            return $i;\n        }\n        $i -= 1;\n    }\n    return -1;\n}\n\n// Write a phpthon function to find the first position of an element in a sorted array.\nfunction firstIndex($arr, $x) {\n    var $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return last(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3), 1) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1, 1, 2, 3, 4), 1) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 3, 2, 3, 6, 8, 9), 3) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "<?php\nfunction text_starta_endb($text) {\n  var $a = $text.match(/^a/);\n  var $b = $text.match(/^b/);\n  if ($a && $b) {\n    return {\n      $a: $a,\n      $b: $b\n    };\n  }\n}\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunction text_starta_endb_endb($text) {\n  var $a = $text.match(/^a/);\n  var $b = $text.match(/^b/);\n  if ($a && $b) {\n    return {\n      $a: $a,\n      $b: $b\n    };\n  }\n}\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunction text_starta_endb_endb_endb($text) {\n  var $a = $text.match(/^a/);\n  var $b = $text.match(/^b/);\n  if ($a && $b) {\n    return {\n      $a: $a,\n      $b: $b\n    };\n  }\n}\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunction text_starta_endb_endb_endb($text) {\n  var $a = $text.match(/^a/);\n  var $b = $text.match(/^b/);\n  if ($a && $b) {\n    return {\n      $a: $a,\n      $b: $b\n    };\n  }\n}\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunction text_starta_endb_endb_endb($text) {\n  var $a = $text.match(/^a/);\n  var $b = $text\n",
        "test_list": [
            "function candidate(...$args) {",
            "return text_starta_endb(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"aabbbb\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"aabAbbbc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"accddbbjjj\") !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given array.",
        "code": "<?php\nfunction return_sum($dict) {\n    var sum = 0;\n    for (var i = 0; i < $dict.length; i++) {\n        sum += $dict[i];\n    }\n    return sum;\n}\n\n// Write function to find the maximum value of all items in the given array.\nfunction return_max($dict) {\n    var max = 0;\n    for (var i = 0; i < $dict.length; i++) {\n        if ($dict[i] > max) {\n            max = $dict[i];\n        }\n    }\n    return max;\n}\n\n// Write function to find the minimum value of all items in the given array.\nfunction return_min($dict) {\n    var min = 0;\n    for (var i = 0; i < $dict.length; i++) {\n        if ($dict[i] < min) {\n            min = $dict[i];\n        }\n    }\n    return min;\n}\n\n// Write function to find the sum of all items in the given array.\nfunction return_sum_of_items($dict) {\n    var sum = 0;\n    for (var i = 0; i < $dict.length; i++) {\n        sum += $dict[i];\n    }\n    return sum;\n}\n\n// Write function to find the maximum value of all items in the given array.\nfunction return_max_of_items($dict) {\n    var max = 0;\n    for (var i = 0; i < $dict.length; i++) {\n        if ($dict[i] > max) {\n            max = $dict[i];\n        }\n    }\n    return max;\n}\n\n// Write function to find the minimum value of all items in the given array.\nfunction return_min_of_items($dict) {\n    var min = 0;\n    for (var i = 0; i < $dict.length; i++) {\n        if ($dict[i] < min) {\n            min = $dict[i];\n        }\n    }\n    return min;\n}\n\n// Write function to find the sum\n",
        "test_list": [
            "function candidate(...$args) {",
            "return return_sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"a\" => 100, \"b\" => 200, \"c\" => 300)) !== 600) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\" => 25, \"b\" => 18, \"c\" => 45)) !== 88) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\" => 36, \"b\" => 39, \"c\" => 49)) !== 124) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a phpthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "<?php\nfunction sum_in_range($l, $r) {\n    var sum = 0;\n    for (var i = $l; i <= $r; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all even natural numbers within the range l and r.\nfunction sum_in_range_2($l, $r) {\n    var sum = 0;\n    for (var i = $l; i <= $r; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range_3($l, $r) {\n    var sum = 0;\n    for (var i = $l; i <= $r; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all even natural numbers within the range l and r.\nfunction sum_in_range_4($l, $r) {\n    var sum = 0;\n    for (var i = $l; i <= $r; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range_5($l, $r) {\n    var sum = 0;\n    for (var i = $l; i <= $r; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all even natural numbers within the range l and r.\nfunction sum_in_range_6($l, $r) {\n    var sum = 0;\n    for (var i = $l; i <= $r; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Write a phpthon function to find the sum of all odd natural numbers within the range\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sum_in_range(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(2, 5) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, 7) !== 12) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7, 13) !== 40) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a phpthon function to find the sum of an array.",
        "code": "<?php\nfunction _sum($arr) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $arr.length; i++) {\n\t\tsum += $arr[i];\n\t}\n\treturn sum;\n}\n\n// Write a phpthon function to find the sum of an array.\nfunction _sum2($arr) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $arr.length; i++) {\n\t\tsum += $arr[i];\n\t}\n\treturn sum;\n}\n\n// Write a phpthon function to find the sum of an array.\nfunction _sum3($arr) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $arr.length; i++) {\n\t\tsum += $arr[i];\n\t}\n\treturn sum;\n}\n\n// Write a phpthon function to find the sum of an array.\nfunction _sum4($arr) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $arr.length; i++) {\n\t\tsum += $arr[i];\n\t}\n\treturn sum;\n}\n\n// Write a phpthon function to find the sum of an array.\nfunction _sum5($arr) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $arr.length; i++) {\n\t\tsum += $arr[i];\n\t}\n\treturn sum;\n}\n\n// Write a phpthon function to find the sum of an array.\nfunction _sum6($arr) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $arr.length; i++) {\n\t\tsum += $arr[i];\n\t}\n\treturn sum;\n}\n\n// Write a phpthon function to find the sum of an array.\nfunction _sum7($arr) {\n\tvar sum = 0;\n\tfor (var i = 0; i < $arr.length; i++) {\n\t\tsum += $arr[i];\n\t}\n\treturn sum;\n}\n\n// Write a phpthon function to find the sum of an\n",
        "test_list": [
            "function candidate(...$args) {",
            "return _sum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(15, 12, 13, 10)) !== 50) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(0, 1, 2)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "<?php\nfunction left_rotate($n, $d) {\n    var $a = 0;\n    var $b = 0;\n    var $c = 0;\n    var $d = 0;\n    var $e = 0;\n    var $f = 0;\n    var $g = 0;\n    var $h = 0;\n    var $i = 0;\n    var $j = 0;\n    var $k = 0;\n    var $l = 0;\n    var $m = 0;\n    var $n = 0;\n    var $o = 0;\n    var $p = 0;\n    var $q = 0;\n    var $r = 0;\n    var $s = 0;\n    var $t = 0;\n    var $u = 0;\n    var $v = 0;\n    var $w = 0;\n    var $x = 0;\n    var $y = 0;\n    var $z = 0;\n    var $A = 0;\n    var $B = 0;\n    var $C = 0;\n    var $D = 0;\n    var $E = 0;\n    var $F = 0;\n    var $G = 0;\n    var $H = 0;\n    var $I = 0;\n    var $J = 0;\n    var $K = 0;\n    var $L = 0;\n    var $M = 0;\n    var $N = 0;\n    var $O = 0;\n    var $P = 0;\n    var $Q = 0;\n    var $R = 0;\n    var $S = 0;\n    var $T = 0;\n    var $U = 0;\n    var $V = 0;\n    var $W = 0;\n    var $X = 0;\n    var $Y = 0;\n    var $Z = 0;\n    var $AA = 0;\n    var $AB = 0;\n    var $AC = 0;\n    var $AD = 0;\n    var $AE = 0;\n    var $AF = 0;\n    var $AG = 0\n",
        "test_list": [
            "function candidate(...$args) {",
            "return left_rotate(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a phpthon function to check whether the length of the word is odd or not.",
        "code": "<?php\nfunction word_len($s) {\n    var $word = $s.substr($s.indexOf(' '));\n    return $word.length % 2;\n}\n\n// Write a phpthon function to check whether the word is a number.\nfunction word_is_number($s) {\n    return $s.substr($s.indexOf(' ')).match(/^\\d+$/);\n}\n\n// Write a phpthon function to check whether the word is a letter.\nfunction word_is_letter($s) {\n    return $s.substr($s.indexOf(' ')).match(/^[a-zA-Z]$/);\n}\n\n// Write a phpthon function to check whether the word is a word.\nfunction word_is_word($s) {\n    return $s.substr($s.indexOf(' ')).match(/^[a-zA-Z0-9]$/);\n}\n\n// Write a phpthon function to check whether the word is a capital letter.\nfunction word_is_capital_letter($s) {\n    return $s.substr($s.indexOf(' ')).match(/^[A-Z]$/);\n}\n\n// Write a phpthon function to check whether the word is a capital letter.\nfunction word_is_capital_letter_or_number($s) {\n    return $s.substr($s.indexOf(' ')).match(/^[A-Z0-9]$/);\n}\n\n// Write a phpthon function to check whether the word is a capital letter.\nfunction word_is_capital_letter_or_number_or_letter($s) {\n    return $s.substr($s.indexOf(' ')).match(/^[A-Z0-9]$/);\n}\n\n// Write a phpthon function to check whether the word is a capital letter.\nfunction word_is_capital_letter_or_number_or_letter_or_number($s) {\n    return $s.substr($s.indexOf(' ')).match\n",
        "test_list": [
            "function candidate(...$args) {",
            "return word_len(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"Hadoop\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"great\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"structure\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "<?php\nfunction remove_all_spaces($text) {\n    var $result = '';\n    $result = $text.replace(/\\s+/g, '');\n    return $result;\n}\n\n// Write a function to remove all whitespaces from a string.\nfunction remove_all_spaces_from_string($text) {\n    var $result = '';\n    $result = $text.replace(/\\s+/g, '');\n    return $result;\n}\n\n// Write a function to remove all whitespaces from a string.\nfunction remove_all_spaces_from_string_with_spaces($text) {\n    var $result = '';\n    $result = $text.replace(/\\s+/g, '');\n    return $result;\n}\n\n// Write a function to remove all whitespaces from a string.\nfunction remove_all_spaces_from_string_with_spaces_with_spaces($text) {\n    var $result = '';\n    $result = $text.replace(/\\s+/g, '');\n    return $result;\n}\n\n// Write a function to remove all whitespaces from a string.\nfunction remove_all_spaces_from_string_with_spaces_with_spaces_with_spaces($text) {\n    var $result = '';\n    $result = $text.replace(/\\s+/g, '');\n    return $result;\n}\n\n// Write a function to remove all whitespaces from a string.\nfunction remove_all_spaces_from_string_with_spaces_with_spaces_with_spaces_with_spaces($text) {\n    var $result = '';\n    $result = $text.replace(/\\s+/g, '');\n    return $result;\n}\n\n// Write a function to remove all whitespaces from a string.\nfunction remove_all_spaces_from_string_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces($text) {\n    var $result = '';\n    $result =\n",
        "test_list": [
            "function candidate(...$args) {",
            "return remove_all_spaces(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"python  program\") !== \"pythonprogram\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python   programming    language\") !== \"pythonprogramminglanguage\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"python                     program\") !== \"pythonprogram\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"   python                     program\") !== \"pythonprogram\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a phpthon function to count the number of equal numbers from three given integers.",
        "code": "<?php\nfunction test_three_equal($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_2($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_3($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_4($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_5($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_6($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_7($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_8($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal_9($x, $y, $z) {\n    return $x + $y + $z;\n}\n\n// Write a phpthon function to count the number of equal numbers from three given integers.\nfunction test_three_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return test_three_equal(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1, 1, 1) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(-1, -2, -3) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1, 2, 2) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a phpthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "<?php\nfunction count_rotation($arr) {\n  var count = 0;\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Write a phpthon function to sort the array by the number of rotations required to generate a sorted array.\nfunction sort_array($arr) {\n  var temp = [];\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] === 1) {\n      temp.push($arr[i]);\n    }\n  }\n  return temp;\n}\n\n// Write a phpthon function to sort the array by the number of rotations required to generate a sorted array.\nfunction sort_array_by_rotation($arr) {\n  var temp = [];\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] === 1) {\n      temp.push($arr[i]);\n    }\n  }\n  return temp;\n}\n\n// Write a phpthon function to sort the array by the number of rotations required to generate a sorted array.\nfunction sort_array_by_rotation_reverse($arr) {\n  var temp = [];\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] === 1) {\n      temp.push($arr[i]);\n    }\n  }\n  return temp;\n}\n\n// Write a phpthon function to sort the array by the number of rotations required to generate a sorted array.\nfunction sort_array_by_rotation_reverse_reverse($arr) {\n  var temp = [];\n  for (var i = 0; i < $arr.length; i++) {\n    if ($arr[i] === 1) {\n      temp.push($arr[i]);\n    }\n",
        "test_list": [
            "function candidate(...$args) {",
            "return count_rotation(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(3, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 1, 2, 3)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9, 1, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3)) !== 0) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 3, 2)) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "<?php\nfunction is_perfect_square($n) {\n    var x = $n;\n    var y = $n;\n    var z = $n;\n    var a = $n;\n    var b = $n;\n    var c = $n;\n    var d = $n;\n    var e = $n;\n    var f = $n;\n    var g = $n;\n    var h = $n;\n    var i = $n;\n    var j = $n;\n    var k = $n;\n    var l = $n;\n    var m = $n;\n    var n = $n;\n    var o = $n;\n    var p = $n;\n    var q = $n;\n    var r = $n;\n    var s = $n;\n    var t = $n;\n    var u = $n;\n    var v = $n;\n    var w = $n;\n    var x1 = $n;\n    var y1 = $n;\n    var z1 = $n;\n    var a1 = $n;\n    var b1 = $n;\n    var c1 = $n;\n    var d1 = $n;\n    var e1 = $n;\n    var f1 = $n;\n    var g1 = $n;\n    var h1 = $n;\n    var i1 = $n;\n    var j1 = $n;\n    var k1 = $n;\n    var l1 = $n;\n    var m1 = $n;\n    var n1 = $n;\n    var o1 = $n;\n    var p1 = $n;\n    var q1 = $n;\n    var r1 = $n;\n    var s1 = $n;\n    var t1 = $n;\n    var u1 = $n;\n    var v1 = $n;\n    var w1 = $n;\n    var x2 = $n;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_perfect_square(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(36) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(14) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(196) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(125) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(15625) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in an array is even or not.",
        "code": "<?php\nfunction is_product_even($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        sum += $arr[i];\n    }\n    return sum % 2 == 0;\n}\n\n// Write a function to check whether the product of numbers in an array is odd or not.\nfunction is_product_odd($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        sum += $arr[i];\n    }\n    return sum % 2 == 1;\n}\n\n// Write a function to check whether the product of numbers in an array is even or not.\nfunction is_product_even_odd($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        sum += $arr[i];\n    }\n    return sum % 2 == 0 || sum % 2 == 1;\n}\n\n// Write a function to check whether the product of numbers in an array is even or not.\nfunction is_product_odd_even($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        sum += $arr[i];\n    }\n    return sum % 2 == 1 || sum % 2 == 0;\n}\n\n// Write a function to check whether the product of numbers in an array is even or not.\nfunction is_product_even_odd_even($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        sum += $arr[i];\n    }\n    return sum % 2 == 0 || sum % 2 == 1 || sum % 2 == 0 || sum % 2 == 1;\n}\n\n// Write a function to check whether the product of numbers in an array is even or not.\nfunction is_product_odd_even_odd($arr) {\n    var sum = 0;\n    for (var i = 0; i < $arr.length; i++) {\n        sum += $arr\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_product_even(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 1, 4)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 1)) !== false) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the array in an array of arrays whose sum of elements is the highest.",
        "code": "<?php\nfunction max_sum_list($lists) {\n    var max_sum = 0;\n    for (var i = 0; i < $lists.length; i++) {\n        var sum = 0;\n        for (var j = 0; j < $lists[i].length; j++) {\n            sum += $lists[i][j];\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return [max_sum];\n}\n\n// Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nfunction max_sum_array($arrays) {\n    var max_sum = 0;\n    for (var i = 0; i < $arrays.length; i++) {\n        var sum = 0;\n        for (var j = 0; j < $arrays[i].length; j++) {\n            sum += $arrays[i][j];\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return [max_sum];\n}\n\n// Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nfunction max_sum_array_of_lists($lists) {\n    var max_sum = 0;\n    for (var i = 0; i < $lists.length; i++) {\n        var sum = 0;\n        for (var j = 0; j < $lists[i].length; j++) {\n            sum += $lists[i][j];\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return [max_sum];\n}\n\n// Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nfunction max_sum_array_of_arrays($arrays) {\n    var max_sum = 0;\n    for (var i = 0; i < $arrays.length; i++) {\n        var sum = 0;\n        for (var j = 0; j\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_sum_list(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(10, 11, 12)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 2, 1), array(6, 5, 4), array(12, 11, 10))) !== array(12, 11, 10)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(2, 3, 1))) !== array(2, 3, 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "<?php\nfunction max_run_uppercase($test_str) {\n    var max_run = 0;\n    for (var i = 0; i < $test_str.length; i++) {\n        if ($test_str[i] === 'u') {\n            max_run = i;\n        }\n    }\n    return max_run;\n}\n\n// Write a function to find maximum run of lowercase characters in the given string.\nfunction max_run_lowercase($test_str) {\n    var max_run = 0;\n    for (var i = 0; i < $test_str.length; i++) {\n        if ($test_str[i] === 'l') {\n            max_run = i;\n        }\n    }\n    return max_run;\n}\n\n// Write a function to find maximum run of digits in the given string.\nfunction max_run_digits($test_str) {\n    var max_run = 0;\n    for (var i = 0; i < $test_str.length; i++) {\n        if ($test_str[i] === 'd') {\n            max_run = i;\n        }\n    }\n    return max_run;\n}\n\n// Write a function to find maximum run of letters in the given string.\nfunction max_run_letters($test_str) {\n    var max_run = 0;\n    for (var i = 0; i < $test_str.length; i++) {\n        if ($test_str[i] === 'l') {\n            max_run = i;\n        }\n    }\n    return max_run;\n}\n\n// Write a function to find maximum run of numbers in the given string.\nfunction max_run_numbers($test_str) {\n    var max_run = 0;\n    for (var i = 0; i < $test_str.length; i++) {\n        if ($test_str[i] === 'n') {\n            max_run = i;\n        }\n    }\n    return max_run;\n}\n\n// Write a function to find maximum run of\n",
        "test_list": [
            "function candidate(...$args) {",
            "return max_run_uppercase(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"GeMKSForGERksISBESt\") !== 5) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"PrECIOusMOVemENTSYT\") !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"GooGLEFluTTER\") !== 4) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a phpthon function to find the first odd number in a given array of numbers.",
        "code": "<?php\nfunction first_odd($nums) {\n    var odd = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 1) {\n            odd = i;\n            break;\n        }\n    }\n    return odd;\n}\n\n// Write a phpthon function to find the first even number in a given array of numbers.\nfunction first_even($nums) {\n    var odd = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 0) {\n            odd = i;\n            break;\n        }\n    }\n    return odd;\n}\n\n// Write a phpthon function to find the first number in a given array of numbers.\nfunction first_number($nums) {\n    var num = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] == 0) {\n            num = i;\n            break;\n        }\n    }\n    return num;\n}\n\n// Write a phpthon function to find the first number in a given array of numbers.\nfunction first_number_odd($nums) {\n    var num = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 0) {\n            num = i;\n            break;\n        }\n    }\n    return num;\n}\n\n// Write a phpthon function to find the first number in a given array of numbers.\nfunction first_number_even($nums) {\n    var num = 0;\n    for (var i = 0; i < $nums.length; i++) {\n        if ($nums[i] % 2 == 1) {\n            num = i;\n            break;\n        }\n    }\n    return num;\n}\n\n// Write a phpthon function to find the first number in a given array of numbers.\nfunction first_number_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return first_odd(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 3, 5)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(2, 4, 1, 3)) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(8, 9, 1)) !== 9) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given arrays contain the k or not.",
        "code": "<?php\nfunction check_K($test_tup, $K) {\n  if ($test_tup.length == $K.length) {\n    return true;\n  }\n  return false;\n}\n\n// Write a function to check if the given arrays contain the l or not.\nfunction check_L($test_tup, $L) {\n  if ($test_tup.length == $L.length) {\n    return true;\n  }\n  return false;\n}\n\n// Write a function to check if the given arrays contain the m or not.\nfunction check_M($test_tup, $M) {\n  if ($test_tup.length == $M.length) {\n    return true;\n  }\n  return false;\n}\n\n// Write a function to check if the given arrays contain the n or not.\nfunction check_N($test_tup, $N) {\n  if ($test_tup.length == $N.length) {\n    return true;\n  }\n  return false;\n}\n\n// Write a function to check if the given arrays contain the o or not.\nfunction check_O($test_tup, $O) {\n  if ($test_tup.length == $O.length) {\n    return true;\n  }\n  return false;\n}\n\n// Write a function to check if the given arrays contain the p or not.\nfunction check_P($test_tup, $P) {\n  if ($test_tup.length == $P.length) {\n    return true;\n  }\n  return false;\n}\n\n// Write a function to check if the given arrays contain the q or not.\nfunction check_Q($test_tup, $Q) {\n  if ($test_tup.length == $Q.length) {\n    return true;\n  }\n  return false;\n}\n\n// Write a function to check if the given arrays contain the r or not.\nfunction check_R($test_tup, $R) {\n  if ($test_tup.length == $R.length) {\n    return true;\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_K(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 4, 5, 6, 8), 6) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 5, 6), 7) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(7, 8, 9, 44, 11, 12), 11) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second array is smaller than its corresponding element in the first array.",
        "code": "<?php\nfunction check_smaller($test_tup1, $test_tup2) {\n    var $smaller = $test_tup1.length < $test_tup2.length;\n    return $smaller;\n}\n\n// Write a function to check if each element of second array is larger than its corresponding element in the first array.\nfunction check_larger($test_tup1, $test_tup2) {\n    var $larger = $test_tup1.length > $test_tup2.length;\n    return $larger;\n}\n\n// Write a function to check if each element of second array is equal to its corresponding element in the first array.\nfunction check_equal($test_tup1, $test_tup2) {\n    var $equal = $test_tup1.length == $test_tup2.length;\n    return $equal;\n}\n\n// Write a function to check if each element of second array is not equal to its corresponding element in the first array.\nfunction check_not_equal($test_tup1, $test_tup2) {\n    var $not_equal = $test_tup1.length!= $test_tup2.length;\n    return $not_equal;\n}\n\n// Write a function to check if each element of second array is greater than its corresponding element in the first array.\nfunction check_greater($test_tup1, $test_tup2) {\n    var $greater = $test_tup1.length > $test_tup2.length;\n    return $greater;\n}\n\n// Write a function to check if each element of second array is greater than its corresponding element in the first array.\nfunction check_greater_or_equal($test_tup1, $test_tup2) {\n    var $greater_or_equal = $test_tup1.length > $test_tup2.length;\n    return $greater_or_equal;\n}\n\n// Write a function to check if each element of second array is smaller than its\n",
        "test_list": [
            "function candidate(...$args) {",
            "return check_smaller(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3), array(2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(4, 5, 6), array(3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(11, 12, 13), array(10, 11, 12)) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "<?php\nfunction tetrahedral_number($n) {\n    var $n_tetrahedra = [];\n    for (var i = 0; i < $n; i++) {\n        $n_tetrahedra.push($n_tetrahedra.length);\n    }\n    return $n_tetrahedra[$n];\n}\n\n// Write a function to find the nth tetrahedral number.\nfunction tetrahedral_number_of_n($n) {\n    var $n_tetrahedra = [];\n    for (var i = 0; i < $n; i++) {\n        $n_tetrahedra.push($n_tetrahedra.length);\n    }\n    return $n_tetrahedra.length;\n}\n\n// Write a function to find the nth tetrahedral number.\nfunction tetrahedral_number_of_n_tetrahedra($n) {\n    var $n_tetrahedra = [];\n    for (var i = 0; i < $n; i++) {\n        $n_tetrahedra.push($n_tetrahedra.length);\n    }\n    return $n_tetrahedra.length;\n}\n\n// Write a function to find the nth tetrahedral number.\nfunction tetrahedral_number_of_n_tetrahedra_of_n($n) {\n    var $n_tetrahedra = [];\n    for (var i = 0; i < $n; i++) {\n        $n_tetrahedra.push($n_tetrahedra.length);\n    }\n    return $n_tetrahedra.length;\n}\n\n// Write a function to find the nth tetrahedral number.\nfunction tetrahedral_number_of_n_tetrahedra_of_n_tetrahedra($n) {\n    var $n_tetrahedra = [];\n    for (var i = 0; i < $n; i++) {\n        $n_tetrahed\n",
        "test_list": [
            "function candidate(...$args) {",
            "return tetrahedral_number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(5) !== 35) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(6) !== 56) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== 84) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a phpthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "<?php\nfunction get_Char($strr) {\n    var $char = 0;\n    for (var i = 0; i < $strr.length; i++) {\n        $char = $char * 26 + $strr.charCodeAt(i);\n    }\n    return $char;\n}\n\n// Write a phpthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char_From_String($strr) {\n    var $char = 0;\n    for (var i = 0; i < $strr.length; i++) {\n        $char = $char * 26 + $strr.charCodeAt(i);\n    }\n    return $char;\n}\n\n// Write a phpthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char_From_String_From_Index($strr) {\n    var $char = 0;\n    for (var i = 0; i < $strr.length; i++) {\n        $char = $char * 26 + $strr.charCodeAt(i);\n    }\n    return $char;\n}\n\n// Write a phpthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char_From_String_From_Index_From_Index($strr) {\n    var $char = 0;\n    for (var i = 0; i < $strr.length; i++) {\n        $char = $char * 26 + $strr.charCodeAt(i);\n    }\n    return $char;\n}\n\n// Write a phpthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char_From_String_From_Index_From_Index_From_Index($strr) {\n    var $char = 0;\n    for (var i = 0; i < $strr.length; i++) {\n        \n",
        "test_list": [
            "function candidate(...$args) {",
            "return get_Char(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"abc\") !== \"f\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"gfg\") !== \"t\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"ab\") !== \"c\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "<?php\nfunction sequence($n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        $i++;\n        $j--;\n    }\n    return $i;\n}\n\n// Write a function to find the nth number in the newman conway sequence.\nfunction sequence2($n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        $i++;\n        $j--;\n    }\n    return $i;\n}\n\n// Write a function to find the nth number in the newman conway sequence.\nfunction sequence3($n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        $i++;\n        $j--;\n    }\n    return $i;\n}\n\n// Write a function to find the nth number in the newman conway sequence.\nfunction sequence4($n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        $i++;\n        $j--;\n    }\n    return $i;\n}\n\n// Write a function to find the nth number in the newman conway sequence.\nfunction sequence5($n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        $i++;\n        $j--;\n    }\n    return $i;\n}\n\n// Write a function to find the nth number in the newman conway sequence.\nfunction sequence6($n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i < $j) {\n        $i++;\n        $j--;\n    }\n    return $i;\n}\n\n// Write a function to find the nth number in the newman conway sequence.\nfunction sequence7($n) {\n    var $i = 0;\n    var $j = $n;\n    while ($i\n",
        "test_list": [
            "function candidate(...$args) {",
            "return sequence(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(3) !== 2) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "<?php\nfunction centered_hexagonal_number($n) {\n    var n = $n;\n    var x = Math.floor(n / 2);\n    var y = Math.floor(n % 2);\n    return x + y;\n}\n\n// Write a function to find the number of hexagonal numbers.\nfunction hexagonal_number($n) {\n    var n = $n;\n    var x = Math.floor(n / 2);\n    var y = Math.floor(n % 2);\n    return x + y;\n}\n\n// Write a function to find the number of hexagonal numbers.\nfunction hexagonal_number_of_numbers($n) {\n    var n = $n;\n    var x = Math.floor(n / 2);\n    var y = Math.floor(n % 2);\n    return x + y;\n}\n\n// Write a function to find the number of hexagonal numbers.\nfunction hexagonal_number_of_numbers_of_numbers($n) {\n    var n = $n;\n    var x = Math.floor(n / 2);\n    var y = Math.floor(n % 2);\n    return x + y;\n}\n\n// Write a function to find the number of hexagonal numbers.\nfunction hexagonal_number_of_numbers_of_numbers($n) {\n    var n = $n;\n    var x = Math.floor(n / 2);\n    var y = Math.floor(n % 2);\n    return x + y;\n}\n\n// Write a function to find the number of hexagonal numbers.\nfunction hexagonal_number_of_numbers_of_numbers($n) {\n    var n = $n;\n    var x = Math.floor(n / 2);\n    var y = Math.floor(n % 2);\n    return x + y;\n}\n\n// Write a function to find the number of hexagonal numbers.\nfunction hexagonal_number_of_numbers_of_numbers($n) {\n    var n = $n;\n    var x = Math.floor(n / 2);\n    var y = Math.floor(n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return centered_hexagonal_number(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(10) !== 271) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9) !== 217) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single array.",
        "code": "<?php\nfunction merge_dictionaries_three($dict1, $dict2, $dict3) {\n  var $result = [];\n  $result.push($dict1);\n  $result.push($dict2);\n  $result.push($dict3);\n  return $result;\n}\n\n// Write a function to merge two dictionaries into a single array.\nfunction merge_dictionaries_two($dict1, $dict2) {\n  var $result = [];\n  $result.push($dict1);\n  $result.push($dict2);\n  return $result;\n}\n\n// Write a function to merge two dictionaries into a single array.\nfunction merge_dictionaries_one($dict1, $dict2) {\n  var $result = [];\n  $result.push($dict1);\n  $result.push($dict2);\n  return $result;\n}\n\n// Write a function to merge two dictionaries into a single array.\nfunction merge_dictionaries_one_two($dict1, $dict2) {\n  var $result = [];\n  $result.push($dict1);\n  $result.push($dict2);\n  return $result;\n}\n\n// Write a function to merge two dictionaries into a single array.\nfunction merge_dictionaries_one_three($dict1, $dict2) {\n  var $result = [];\n  $result.push($dict1);\n  $result.push($dict2);\n  return $result;\n}\n\n// Write a function to merge two dictionaries into a single array.\nfunction merge_dictionaries_one_two_three($dict1, $dict2) {\n  var $result = [];\n  $result.push($dict1);\n  $result.push($dict2);\n  return $result;\n}\n\n// Write a function to merge two dictionaries into a single array.\nfunction merge_dictionaries_one_two_one($dict1, $dict2) {\n  var $result = [];\n  $result.push($dict1);\n  $result.push($dict2);\n  return $result;\n}\n\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return merge_dictionaries_three(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), array(\"G\" => \"Green\", \"W\" => \"White\"), array(\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\")) !== array(\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), array(\"G\" => \"Green\", \"W\" => \"White\"), array(\"L\" => \"lavender\", \"B\" => \"Blue\")) !== array(\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\")) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), array(\"L\" => \"lavender\", \"B\" => \"Blue\"), array(\"G\" => \"Green\", \"W\" => \"White\")) !== array(\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\")) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in an array, returned as an array.",
        "code": "<?php\nfunction freq_count($list1) {\n    var $count = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $count += 1;\n    }\n    return $count;\n}\n\n// Write a function to get the frequency of all the elements in an array, returned as an array.\nfunction freq_sum($list1) {\n    var $sum = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $sum += $list1[i];\n    }\n    return $sum;\n}\n\n// Write a function to get the frequency of all the elements in an array, returned as an array.\nfunction freq_min($list1) {\n    var $min = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] < $min) {\n            $min = $list1[i];\n        }\n    }\n    return $min;\n}\n\n// Write a function to get the frequency of all the elements in an array, returned as an array.\nfunction freq_max($list1) {\n    var $max = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        if ($list1[i] > $max) {\n            $max = $list1[i];\n        }\n    }\n    return $max;\n}\n\n// Write a function to get the frequency of all the elements in an array, returned as an array.\nfunction freq_avg($list1) {\n    var $avg = 0;\n    for (var i = 0; i < $list1.length; i++) {\n        $avg += $list1[i];\n    }\n    return $avg;\n}\n\n// Write a function to get the frequency of all the elements in an array, returned as an array.\nfunction freq_sum_avg($list1) {\n    var $sum = 0;\n    for (var i = 0; i < $\n",
        "test_list": [
            "function candidate(...$args) {",
            "return freq_count(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30)) !== array(10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4)) !== array(1 => 3, 2 => 2, 3 => 3, 4 => 3)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5)) !== array(10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "<?php\nfunction closest_num($N) {\n    var min = $N;\n    var max = $N;\n    for (var i = 0; i < $N.length; i++) {\n        if ($N[i] < min) {\n            min = $N[i];\n        }\n        if ($N[i] > max) {\n            max = $N[i];\n        }\n    }\n    return min;\n}\n\n// Write a function to find the closest number between n and m.\nfunction closest_num_m(n, m) {\n    var min = n;\n    var max = n;\n    for (var i = 0; i < m.length; i++) {\n        if (n < m[i]) {\n            min = m[i];\n        }\n        if (n > m[i]) {\n            max = m[i];\n        }\n    }\n    return min;\n}\n\n// Write a function to find the closest number between n and m.\nfunction closest_num_n(n, m) {\n    var min = n;\n    var max = n;\n    for (var i = 0; i < m.length; i++) {\n        if (n < m[i]) {\n            min = m[i];\n        }\n        if (n > m[i]) {\n            max = m[i];\n        }\n    }\n    return min;\n}\n\n// Write a function to find the closest number between n and m.\nfunction closest_num_m_n(n, m) {\n    var min = n;\n    var max = n;\n    for (var i = 0; i < m.length; i++) {\n        if (n < m[i]) {\n            min = m[i];\n        }\n        if (n > m[i]) {\n            max = m[i];\n        }\n    }\n    return min;\n}\n\n// Write a function to find the closest number between n and m.\nfunction closest_num_m_n_m(n, m, n_m) {\n    var min = n;\n    var\n",
        "test_list": [
            "function candidate(...$args) {",
            "return closest_num(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(11) !== 10) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(12) !== 11) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in an array.",
        "code": "<?php\nfunction square_nums($nums) {\n  var $sum = 0;\n  for (var i = 0; i < $nums.length; i++) {\n    $sum += $nums[i];\n  }\n  return $sum;\n}\n\n// Write a function to find the sum of the squares of the elements in an array.\nfunction sum_squares($nums) {\n  var $sum = 0;\n  for (var i = 0; i < $nums.length; i++) {\n    $sum += $nums[i];\n  }\n  return $sum;\n}\n\n// Write a function to find the sum of the squares of the elements in an array.\nfunction sum_squares_nums($nums) {\n  var $sum = 0;\n  for (var i = 0; i < $nums.length; i++) {\n    $sum += $nums[i];\n  }\n  return $sum;\n}\n\n// Write a function to find the sum of the squares of the elements in an array.\nfunction sum_squares_nums_nums($nums) {\n  var $sum = 0;\n  for (var i = 0; i < $nums.length; i++) {\n    $sum += $nums[i];\n  }\n  return $sum;\n}\n\n// Write a function to find the sum of the squares of the elements in an array.\nfunction sum_squares_nums_nums_nums($nums) {\n  var $sum = 0;\n  for (var i = 0; i < $nums.length; i++) {\n    $sum += $nums[i];\n  }\n  return $sum;\n}\n\n// Write a function to find the sum of the squares of the elements in an array.\nfunction sum_squares_nums_nums_nums($nums) {\n  var $sum = 0;\n  for (var i = 0; i < $nums.length; i++) {\n    $sum += $nums[i];\n  }\n  return $sum;\n}\n\n\n",
        "test_list": [
            "function candidate(...$args) {",
            "return square_nums(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(10, 20, 30)) !== array(100, 400, 900)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(12, 15)) !== array(144, 225)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a phpthon function to find the length of the longest word.",
        "code": "<?php\nfunction len_log($list1) {\n  var $list2 = $list1.split(' ');\n  var $len = 0;\n  for (var i = 0; i < $list2.length; i++) {\n    if ($list2[i] == '*') {\n      $len = $len + 1;\n    }\n  }\n  return $len;\n}\n\n// Write a phpthon function to find the longest word in a list.\nfunction longest_word($list1) {\n  var $list2 = $list1.split(' ');\n  var $len = 0;\n  for (var i = 0; i < $list2.length; i++) {\n    if ($list2[i] == '*') {\n      $len = $len + 1;\n    }\n  }\n  return $len;\n}\n\n// Write a phpthon function to find the longest word in a list.\nfunction longest_word_in_list($list1) {\n  var $list2 = $list1.split(' ');\n  var $len = 0;\n  for (var i = 0; i < $list2.length; i++) {\n    if ($list2[i] == '*') {\n      $len = $len + 1;\n    }\n  }\n  return $len;\n}\n\n// Write a phpthon function to find the longest word in a list.\nfunction longest_word_in_list_in_list($list1) {\n  var $list2 = $list1.split(' ');\n  var $len = 0;\n  for (var i = 0; i < $list2.length; i++) {\n    if ($list2[i] == '*') {\n      $len = $len + 1;\n    }\n  }\n  return $len;\n}\n\n// Write a phpthon function to find the longest word in a list.\nfunction longest_word_in_list_in_list_in_list($list1) {\n  var $list2 = $list1.split(' ');\n  var $len = 0;\n",
        "test_list": [
            "function candidate(...$args) {",
            "return len_log(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"python\", \"PHP\", \"bigdata\")) !== 7) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"a\", \"ab\", \"abc\")) !== 3) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"small\", \"big\", \"tall\")) !== 5) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given array of string values.",
        "code": "<?php\nfunction find_substring($str1, $sub_str) {\n    var $sub_str_len = $sub_str.length;\n    var $sub_str_pos = 0;\n    var $sub_str_pos_end = $sub_str_len;\n    while ($sub_str_pos < $sub_str_len) {\n        if ($sub_str[$sub_str_pos] == $sub_str[$sub_str_pos + 1]) {\n            $sub_str_pos += 2;\n            $sub_str_pos_end = $sub_str_pos;\n        } else {\n            $sub_str_pos += 1;\n        }\n    }\n    return $sub_str_pos;\n}\n\n// Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring_in_array($str1, $sub_str) {\n    var $sub_str_len = $sub_str.length;\n    var $sub_str_pos = 0;\n    var $sub_str_pos_end = $sub_str_len;\n    while ($sub_str_pos < $sub_str_len) {\n        if ($sub_str[$sub_str_pos] == $sub_str[$sub_str_pos + 1]) {\n            $sub_str_pos += 2;\n            $sub_str_pos_end = $sub_str_pos;\n        } else {\n            $sub_str_pos += 1;\n        }\n    }\n    return $sub_str_pos;\n}\n\n// Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring_in_array_in_range($str1, $sub_str, $start, $end) {\n    var $sub_str_len = $sub_str.length;\n    var $sub_str_pos = 0;\n    var $sub_str_pos_end = $sub_str_len;\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_substring(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"ack\") !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"abc\") !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"ange\") !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "<?php\nfunction is_undulating($n) {\n    return $n % 2 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_2($n) {\n    return $n % 2 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_3($n) {\n    return $n % 3 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_4($n) {\n    return $n % 4 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_5($n) {\n    return $n % 5 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_6($n) {\n    return $n % 6 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_7($n) {\n    return $n % 7 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_8($n) {\n    return $n % 8 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_9($n) {\n    return $n % 9 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_10($n) {\n    return $n % 10 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_11($n) {\n    return $n % 11 === 0;\n}\n\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating_12($n) {\n    return $n % 12 === 0;\n}\n\n// Write a function to check whether\n",
        "test_list": [
            "function candidate(...$args) {",
            "return is_undulating(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "<?php\nfunction power($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power2($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power3($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power4($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power5($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power6($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power7($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power8($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power9($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power10($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power11($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power12($a, $b) {\n  return $a * $b;\n}\n\n// Write a function to calculate\n",
        "test_list": [
            "function candidate(...$args) {",
            "return power(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(3, 4) !== 81) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(2, 3) !== 8) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(5, 5) !== 3125) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given an array of arrays, write a function that returns the first value of the array with the smallest second value.",
        "code": "<?php\nfunction index_minimum($test_list) {\n    var $first = $test_list[0];\n    var $second = $test_list[1];\n    var $third = $test_list[2];\n    var $fourth = $test_list[3];\n    var $fifth = $test_list[4];\n    var $sixth = $test_list[5];\n    var $seventh = $test_list[6];\n    var $eighth = $test_list[7];\n    var $ninth = $test_list[8];\n    var $tenth = $test_list[9];\n    var $eleventh = $test_list[10];\n    var $twelfth = $test_list[11];\n    var $thirteenth = $test_list[12];\n    var $fourteenth = $test_list[13];\n    var $fifteenth = $test_list[14];\n    var $sixteenth = $test_list[15];\n    var $seventeenth = $test_list[16];\n    var $eighteenth = $test_list[17];\n    var $nineteenth = $test_list[18];\n    var $twentieth = $test_list[19];\n    var $thirteenth = $test_list[20];\n    var $fourteenth = $test_list[21];\n    var $fifteenth = $test_list[22];\n    var $sixteenth = $test_list[23];\n    var $seventeenth = $test_list[24];\n    var $eighteenth = $test_list[25];\n    var $nineteenth = $test_list[26];\n    var $twentieth = $test_list[27];\n    var $thirteenth = $test_list[28];\n    var $fourteenth = $test_list[29];\n    var $fifteenth = $test_list[30];\n    var $sixteenth = $test_list[31];\n    var $seventeenth = $test_list[32];\n    var $eighteenth = $test\n",
        "test_list": [
            "function candidate(...$args) {",
            "return index_minimum(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(\"Rash\", 143), array(\"Manjeet\", 200), array(\"Varsha\", 100))) !== \"Varsha\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Yash\", 185), array(\"Dawood\", 125), array(\"Sanya\", 175))) !== \"Dawood\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(\"Sai\", 345), array(\"Salman\", 145), array(\"Ayesha\", 96))) !== \"Ayesha\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a phpthon function to find the length of the smallest array in an array of arrays.",
        "code": "<?php\nfunction Find_Min_Length($lst) {\n    var $lst_len = $lst.length;\n    var $lst_min = $lst_len;\n    for (var i = 0; i < $lst_len; i++) {\n        if ($lst_len - i < $lst_min) {\n            $lst_min = $lst_len - i;\n        }\n    }\n    return $lst_min;\n}\n\n// Write a phpthon function to find the length of the smallest array in an array of arrays.\nfunction Find_Min_Length_Array($lst) {\n    var $lst_len = $lst.length;\n    var $lst_min = $lst_len;\n    for (var i = 0; i < $lst_len; i++) {\n        if ($lst_len - i < $lst_min) {\n            $lst_min = $lst_len - i;\n        }\n    }\n    return $lst_min;\n}\n\n// Write a phpthon function to find the length of the smallest array in an array of arrays.\nfunction Find_Min_Length_Array_Array($lst) {\n    var $lst_len = $lst.length;\n    var $lst_min = $lst_len;\n    for (var i = 0; i < $lst_len; i++) {\n        if ($lst_len - i < $lst_min) {\n            $lst_min = $lst_len - i;\n        }\n    }\n    return $lst_min;\n}\n\n// Write a phpthon function to find the length of the smallest array in an array of arrays.\nfunction Find_Min_Length_Array_Array_Array($lst) {\n    var $lst_len = $lst.length;\n    var $lst_min = $lst_len;\n    for (var i = 0; i < $lst_len; i++) {\n        if ($lst\n",
        "test_list": [
            "function candidate(...$args) {",
            "return Find_Min_Length(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1), array(1, 2))) !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2), array(1, 2, 3), array(1, 2, 3, 4))) !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(3, 3, 3), array(4, 4, 4, 4))) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a phpthon function to find the number of divisors of a given integer.",
        "code": "<?php\nfunction divisor($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a phpthon function to find the number of divisors of a given integer.\nfunction divisor_2($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a phpthon function to find the number of divisors of a given integer.\nfunction divisor_3($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a phpthon function to find the number of divisors of a given integer.\nfunction divisor_4($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a phpthon function to find the number of divisors of a given integer.\nfunction divisor_5($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\n// Write a phpthon function to find the number of divisors of a given integer.\nfunction divisor_6($n) {\n    var n = $n;\n    var i = 0;\n    while (i < n) {\n        if (n %\n",
        "test_list": [
            "function candidate(...$args) {",
            "return divisor(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(15) !== 4) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(12) !== 6) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(9) !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened array of arrays, returned in an array.",
        "code": "<?php\nfunction frequency_lists($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to find the sum of the elements in a flattened array of arrays, returned in an array.\nfunction sum_of_arrays($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to find the sum of the elements in a flattened array of arrays, returned in an array.\nfunction sum_of_arrays_of_lists($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to find the sum of the elements in a flattened array of arrays, returned in an array.\nfunction sum_of_arrays_of_lists_of_lists($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to find the sum of the elements in a flattened array of arrays, returned in an array.\nfunction sum_of_arrays_of_lists_of_lists_of_lists($list1) {\n    var $list2 = [];\n    for (var i = 0; i < $list1.length; i++) {\n        $list2.push($list1[i]);\n    }\n    return $list2;\n}\n\n// Write a function to find the sum of the elements in a flattened array of arrays, returned in an array.\nfunction sum_of_arrays_of_\n",
        "test_list": [
            "function candidate(...$args) {",
            "return frequency_lists(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(array(array(1, 2, 3, 2), array(4, 5, 6, 2), array(7, 8, 9, 5))) !== array(1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12))) !== array(1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1)) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(array(array(20, 30, 40, 17), array(18, 16, 14, 13), array(10, 20, 30, 40))) !== array(20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1)) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "<?php\nfunction decimal_to_binary($n) {\n\tvar result = '';\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar l = 0;\n\tvar m = 0;\n\tvar n = 0;\n\tvar p = 0;\n\tvar q = 0;\n\tvar r = 0;\n\tvar s = 0;\n\tvar t = 0;\n\tvar u = 0;\n\tvar v = 0;\n\tvar w = 0;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\tvar d = 0;\n\tvar e = 0;\n\tvar f = 0;\n\tvar g = 0;\n\tvar h = 0;\n\tvar i1 = 0;\n\tvar i2 = 0;\n\tvar i3 = 0;\n\tvar i4 = 0;\n\tvar i5 = 0;\n\tvar i6 = 0;\n\tvar i7 = 0;\n\tvar i8 = 0;\n\tvar i9 = 0;\n\tvar i10 = 0;\n\tvar i11 = 0;\n\tvar i12 = 0;\n\tvar i13 = 0;\n\tvar i14 = 0;\n\tvar i15 = 0;\n\tvar i16 = 0;\n\tvar i17 = 0;\n\tvar i18 = 0;\n\tvar i19 = 0;\n\tvar i20 = 0;\n\tvar i21 = 0;\n\tvar i22 = 0;\n\tvar i23 = 0;\n\tvar i24 = 0;\n\tvar i25 = 0;\n\tvar i26 = 0;\n\tvar i27 = 0;\n\tvar i28 = 0;\n\tvar i29 = 0;\n\tvar i30 = 0;\n\tvar i31 = 0;\n\tvar i32 = 0;\n\tvar i33 = 0;\n\tvar i34 = 0;\n\tvar i35 = 0;\n\tvar i36 = 0;\n\tvar\n",
        "test_list": [
            "function candidate(...$args) {",
            "return decimal_to_binary(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(8) !== \"1000\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(18) !== \"10010\") { throw new Exception(\"Test failed!\"); }",
            "if (candidate(7) !== \"111\") { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a phpthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "<?php\nfunction find_Rotations($str) {\n    var rotations = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    \n",
        "test_list": [
            "function candidate(...$args) {",
            "return find_Rotations(...$args);",
            "}",
            "function test(): void {",
            "if (candidate(\"aaaa\") !== 1) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"ab\") !== 2) { throw new Exception(\"Test failed!\"); }",
            "if (candidate(\"abc\") !== 3) { throw new Exception(\"Test failed!\"); }",
            "}",
            "test();"
        ]
    }
]