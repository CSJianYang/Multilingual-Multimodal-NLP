[
    {
        "title": "Interleaving String",
        "question_content": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n\n\ts = s1 + s2 + ... + sn\n\tt = t1 + t2 + ... + tm\n\t|n - m| <= 1\n\tThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\n\nNote: a + b is the concatenation of strings a and b.\n&nbsp;\nExample 1:\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n\nExample 2:\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n\nExample 3:\n\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true\n\n&nbsp;\nConstraints:\n\n\t0 <= s1.length, s2.length <= 100\n\t0 <= s3.length <= 200\n\ts1, s2, and s3 consist of lowercase English letters.\n\n&nbsp;\nFollow up: Could you solve it using only O(s2.length) additional memory space?",
        "solutions": [
            {
                "id": 31879,
                "title": "my-dp-solution-in-c",
                "content": " \\n\\n     bool isInterleave(string s1, string s2, string s3) {\\n        \\n        if(s3.length() != s1.length() + s2.length())\\n            return false;\\n        \\n        bool table[s1.length()+1][s2.length()+1];\\n        \\n        for(int i=0; i<s1.length()+1; i++)\\n            for(int j=0; j< s2.length()+1; j++){\\n                if(i==0 && j==0)\\n                    table[i][j] = true;\\n                else if(i == 0)\\n                    table[i][j] = ( table[i][j-1] && s2[j-1] == s3[i+j-1]);\\n                else if(j == 0)\\n                    table[i][j] = ( table[i-1][j] && s1[i-1] == s3[i+j-1]);\\n                else\\n                    table[i][j] = (table[i-1][j] && s1[i-1] == s3[i+j-1] ) || (table[i][j-1] && s2[j-1] == s3[i+j-1] );\\n            }\\n            \\n        return table[s1.length()][s2.length()];\\n    }\\n    \\n\\n\\nHere is some explanation:\\n\\nDP table represents if s3 is interleaving at (i+j)th position when s1 is at ith position, and s2 is at jth position. 0th position means empty string.\\n\\nSo if both s1 and s2 is currently empty, s3 is empty too, and it is considered interleaving. If only s1 is empty, then if previous s2 position is interleaving and current s2 position char is equal to s3 current position char, it is considered interleaving. similar idea applies to when s2 is empty. when both s1 and s2 is not empty, then if we arrive i, j from i-1, j, then if i-1,j is already interleaving and i and current s3 position equal, it s interleaving. If we arrive i,j from i, j-1, then if i, j-1 is already interleaving and j and current s3 position equal. it is interleaving.",
                "solutionTags": [],
                "code": " \\n\\n     bool isInterleave(string s1, string s2, string s3) {\\n        \\n        if(s3.length() != s1.length() + s2.length())\\n            return false;\\n        \\n        bool table[s1.length()+1][s2.length()+1];\\n        \\n        for(int i=0; i<s1.length()+1; i++)\\n            for(int j=0; j< s2.length()+1; j++){\\n                if(i==0 && j==0)\\n                    table[i][j] = true;\\n                else if(i == 0)\\n                    table[i][j] = ( table[i][j-1] && s2[j-1] == s3[i+j-1]);\\n                else if(j == 0)\\n                    table[i][j] = ( table[i-1][j] && s1[i-1] == s3[i+j-1]);\\n                else\\n                    table[i][j] = (table[i-1][j] && s1[i-1] == s3[i+j-1] ) || (table[i][j-1] && s2[j-1] == s3[i+j-1] );\\n            }\\n            \\n        return table[s1.length()][s2.length()];\\n    }\\n    \\n\\n\\nHere is some explanation:\\n\\nDP table represents if s3 is interleaving at (i+j)th position when s1 is at ith position, and s2 is at jth position. 0th position means empty string.\\n\\nSo if both s1 and s2 is currently empty, s3 is empty too, and it is considered interleaving. If only s1 is empty, then if previous s2 position is interleaving and current s2 position char is equal to s3 current position char, it is considered interleaving. similar idea applies to when s2 is empty. when both s1 and s2 is not empty, then if we arrive i, j from i-1, j, then if i-1,j is already interleaving and i and current s3 position equal, it s interleaving. If we arrive i,j from i, j-1, then if i, j-1 is already interleaving and j and current s3 position equal. it is interleaving.",
                "codeTag": "Unknown"
            },
            {
                "id": 31948,
                "title": "8ms-c-solution-using-bfs-with-explanation",
                "content": "If we expand the two strings s1 and s2 into a chessboard, then this problem can be transferred into a path seeking problem from the top-left corner to the bottom-right corner. The key is, each cell (y, x) in the board corresponds to an interval between y-th character in s1 and x-th character in s2. And adjacent cells are connected with like a grid. A BFS can then be efficiently performed to find the path.\\n\\nBetter to illustrate with an example here:\\n\\nSay s1 = \"aab\" and s2 = \"abc\". s3 = \"aaabcb\". Then the board looks like\\n\\n    o--a--o--b--o--c--o\\n    |     |     |     |\\n    a     a     a     a\\n    |     |     |     |\\n    o--a--o--b--o--c--o\\n    |     |     |     |\\n    a     a     a     a\\n    |     |     |     |\\n    o--a--o--b--o--c--o\\n    |     |     |     |\\n    b     b     b     b\\n    |     |     |     |\\n    o--a--o--b--o--c--o\\n\\nEach \"o\" is a cell in the board. We start from the top-left corner, and try to move right or down. If the next char in s3 matches the edge connecting the next cell, then we're able to move. When we hit the bottom-right corner, this means s3 can be represented by interleaving s1 and s2. One possible path for this example is indicated with \"x\"es below:\\n\\n    x--a--x--b--o--c--o\\n    |     |     |     |\\n    a     a     a     a\\n    |     |     |     |\\n    o--a--x--b--o--c--o\\n    |     |     |     |\\n    a     a     a     a\\n    |     |     |     |\\n    o--a--x--b--x--c--x\\n    |     |     |     |\\n    b     b     b     b\\n    |     |     |     |\\n    o--a--o--b--o--c--x\\n\\nNote if we concatenate the chars on the edges we went along, it's exactly s3. And we went through all the chars in s1 and s2, in order, exactly once.\\n\\nTherefore if we view this board as a graph, such path finding problem is trivial with BFS. I use an `unordered_map` to store the visited nodes, which makes the code look a bit complicated. But a `vector` should be enough to do the job. \\n\\nAlthough the worse case timeis also O(mn), typically it doesn't require us to go through every node to find a path. Therefore it's faster than regular DP than average.\\n\\n    struct MyPoint {\\n        int y, x; \\n        bool operator==(const MyPoint &p) const {\\n            return p.y == y && p.x == x;\\n        }\\n    };\\n    namespace std {\\n        template <>\\n        struct hash<MyPoint> {\\n            size_t operator () (const MyPoint &f) const {\\n                return (std::hash<int>()(f.x) << 1) ^ std::hash<int>()(f.y);\\n            }\\n        };\\n    }\\n    \\n    class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            if (s1.size() + s2.size() != s3.size()) return false;\\n\\n            queue<MyPoint> q;\\n            unordered_set<MyPoint> visited;\\n            bool isSuccessful = false;\\n            int i = 0;\\n    \\n            q.push(MyPoint { 0, 0 });\\n            q.push(MyPoint { -1, -1 });\\n            while (!(1 == q.size() && -1 == q.front().x)) {\\n                auto p = q.front();\\n                q.pop();\\n                if (p.y == s1.size() && p.x == s2.size()) {\\n                    return true;\\n                }\\n                if (-1 == p.y) {\\n                    q.push(p);\\n                    i++;\\n                    continue;\\n                }\\n                if (visited.find(p) != visited.end()) { continue; }\\n                visited.insert(p);\\n    \\n                if (p.y < s1.size()) { // down\\n                    if (s1[p.y] == s3[i]) { q.push(MyPoint { p.y + 1, p.x }); }\\n                }\\n                if (p.x < s2.size()) { // right \\n                    if (s2[p.x] == s3[i]) { q.push(MyPoint { p.y, p.x + 1 }); }\\n                }\\n            }\\n            return false;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            if (s1.size() + s2.size() != s3.size()) return false;\\n\\n            queue<MyPoint> q;\\n            unordered_set<MyPoint> visited;\\n            bool isSuccessful = false;\\n            int i = 0;\\n    \\n            q.push(MyPoint { 0, 0 }",
                "codeTag": "Java"
            },
            {
                "id": 31885,
                "title": "python-dp-solutions-o-m-n-o-n-space-bfs-dfs",
                "content": "    \\n    # O(m*n) space\\n    def isInterleave1(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        dp = [[True for _ in xrange(c+1)] for _ in xrange(r+1)]\\n        for i in xrange(1, r+1):\\n            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\\n        for j in xrange(1, c+1):\\n            dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]\\n        for i in xrange(1, r+1):\\n            for j in xrange(1, c+1):\\n                dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i-1+j]) or \\\\\\n                   (dp[i][j-1] and s2[j-1] == s3[i-1+j])\\n        return dp[-1][-1]\\n\\n    # O(2*n) space\\n    def isInterleave2(self, s1, s2, s3):\\n        l1, l2, l3 = len(s1)+1, len(s2)+1, len(s3)+1\\n        if l1+l2 != l3+1:\\n            return False\\n        pre = [True for _ in xrange(l2)]\\n        for j in xrange(1, l2):\\n            pre[j] = pre[j-1] and s2[j-1] == s3[j-1]\\n        for i in xrange(1, l1):\\n            cur = [pre[0] and s1[i-1] == s3[i-1]] * l2\\n            for j in xrange(1, l2):\\n                cur[j] = (cur[j-1] and s2[j-1] == s3[i+j-1]) or \\\\\\n                         (pre[j] and s1[i-1] == s3[i+j-1])\\n            pre = cur[:]\\n        return pre[-1]\\n    \\n    # O(n) space\\n    def isInterleave3(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        dp = [True for _ in xrange(c+1)] \\n        for j in xrange(1, c+1):\\n            dp[j] = dp[j-1] and s2[j-1] == s3[j-1]\\n        for i in xrange(1, r+1):\\n            dp[0] = (dp[0] and s1[i-1] == s3[i-1])\\n            for j in xrange(1, c+1):\\n                dp[j] = (dp[j] and s1[i-1] == s3[i-1+j]) or (dp[j-1] and s2[j-1] == s3[i-1+j])\\n        return dp[-1]\\n        \\n    # DFS \\n    def isInterleave4(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        stack, visited = [(0, 0)], set((0, 0))\\n        while stack:\\n            x, y = stack.pop()\\n            if x+y == l:\\n                return True\\n            if x+1 <= r and s1[x] == s3[x+y] and (x+1, y) not in visited:\\n                stack.append((x+1, y)); visited.add((x+1, y))\\n            if y+1 <= c and s2[y] == s3[x+y] and (x, y+1) not in visited:\\n                stack.append((x, y+1)); visited.add((x, y+1))\\n        return False\\n                \\n    # BFS \\n    def isInterleave(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        queue, visited = [(0, 0)], set((0, 0))\\n        while queue:\\n            x, y = queue.pop(0)\\n            if x+y == l:\\n                return True\\n            if x+1 <= r and s1[x] == s3[x+y] and (x+1, y) not in visited:\\n                queue.append((x+1, y)); visited.add((x+1, y))\\n            if y+1 <= c and s2[y] == s3[x+y] and (x, y+1) not in visited:\\n                queue.append((x, y+1)); visited.add((x, y+1))\\n        return False",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "    \\n    # O(m*n) space\\n    def isInterleave1(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        dp = [[True for _ in xrange(c+1)] for _ in xrange(r+1)]\\n        for i in xrange(1, r+1):\\n            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\\n        for j in xrange(1, c+1):\\n            dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]\\n        for i in xrange(1, r+1):\\n            for j in xrange(1, c+1):\\n                dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i-1+j]) or \\\\\\n                   (dp[i][j-1] and s2[j-1] == s3[i-1+j])\\n        return dp[-1][-1]\\n\\n    # O(2*n) space\\n    def isInterleave2(self, s1, s2, s3):\\n        l1, l2, l3 = len(s1)+1, len(s2)+1, len(s3)+1\\n        if l1+l2 != l3+1:\\n            return False\\n        pre = [True for _ in xrange(l2)]\\n        for j in xrange(1, l2):\\n            pre[j] = pre[j-1] and s2[j-1] == s3[j-1]\\n        for i in xrange(1, l1):\\n            cur = [pre[0] and s1[i-1] == s3[i-1]] * l2\\n            for j in xrange(1, l2):\\n                cur[j] = (cur[j-1] and s2[j-1] == s3[i+j-1]) or \\\\\\n                         (pre[j] and s1[i-1] == s3[i+j-1])\\n            pre = cur[:]\\n        return pre[-1]\\n    \\n    # O(n) space\\n    def isInterleave3(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        dp = [True for _ in xrange(c+1)] \\n        for j in xrange(1, c+1):\\n            dp[j] = dp[j-1] and s2[j-1] == s3[j-1]\\n        for i in xrange(1, r+1):\\n            dp[0] = (dp[0] and s1[i-1] == s3[i-1])\\n            for j in xrange(1, c+1):\\n                dp[j] = (dp[j] and s1[i-1] == s3[i-1+j]) or (dp[j-1] and s2[j-1] == s3[i-1+j])\\n        return dp[-1]\\n        \\n    # DFS \\n    def isInterleave4(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        stack, visited = [(0, 0)], set((0, 0))\\n        while stack:\\n            x, y = stack.pop()\\n            if x+y == l:\\n                return True\\n            if x+1 <= r and s1[x] == s3[x+y] and (x+1, y) not in visited:\\n                stack.append((x+1, y)); visited.add((x+1, y))\\n            if y+1 <= c and s2[y] == s3[x+y] and (x, y+1) not in visited:\\n                stack.append((x, y+1)); visited.add((x, y+1))\\n        return False\\n                \\n    # BFS \\n    def isInterleave(self, s1, s2, s3):\\n        r, c, l= len(s1), len(s2), len(s3)\\n        if r+c != l:\\n            return False\\n        queue, visited = [(0, 0)], set((0, 0))\\n        while queue:\\n            x, y = queue.pop(0)\\n            if x+y == l:\\n                return True\\n            if x+1 <= r and s1[x] == s3[x+y] and (x+1, y) not in visited:\\n                queue.append((x+1, y)); visited.add((x+1, y))\\n            if y+1 <= c and s2[y] == s3[x+y] and (x, y+1) not in visited:\\n                queue.append((x, y+1)); visited.add((x, y+1))\\n        return False",
                "codeTag": "Python3"
            },
            {
                "id": 31888,
                "title": "1ms-tiny-dfs-beats-94-57",
                "content": "To solve this problem, let's look at if `s1[0 ~ i]`  `s2[0 ~ j]` can be interleaved to `s3[0 ~ k]`.\\n\\n- Start from indices`0, 0, 0` and compare `s1[i] == s3[k]` or `s2[j] == s3[k]`\\n- Return valid only if either `i` or `j` match `k` and the remaining is also valid\\n- Caching is the key to performance. This is very similar to top down dp\\n- Only need to cache `invalid[i][j]` since most of the case `s1[0 ~ i]` and `s2[0 ~ j]` does not form `s3[0 ~ k]`. Also tested caching `valid[i][j]` the run time is also `1ms`\\n- Many guys use `substring` but it's duplicate code since `substring` itself is checking char by char. We are already doing so\\n\\n\\nHope it helps!\\n\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        char[] c1 = s1.toCharArray(), c2 = s2.toCharArray(), c3 = s3.toCharArray();\\n    \\tint m = s1.length(), n = s2.length();\\n    \\tif(m + n != s3.length()) return false;\\n    \\treturn dfs(c1, c2, c3, 0, 0, 0, new boolean[m + 1][n + 1]);\\n    }\\n    \\n    public boolean dfs(char[] c1, char[] c2, char[] c3, int i, int j, int k, boolean[][] invalid) {\\n    \\tif(invalid[i][j]) return false;\\n    \\tif(k == c3.length) return true;\\n    \\tboolean valid = \\n    \\t    i < c1.length && c1[i] == c3[k] && dfs(c1, c2, c3, i + 1, j, k + 1, invalid) || \\n            j < c2.length && c2[j] == c3[k] && dfs(c1, c2, c3, i, j + 1, k + 1, invalid);\\n    \\tif(!valid) invalid[i][j] = true;\\n        return valid;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "To solve this problem, let's look at if `s1[0 ~ i]`  `s2[0 ~ j]` can be interleaved to `s3[0 ~ k]`.\\n\\n- Start from indices`0, 0, 0` and compare `s1[i] == s3[k]` or `s2[j] == s3[k]`\\n- Return valid only if either `i` or `j` match `k` and the remaining is also valid\\n- Caching is the key to performance. This is very similar to top down dp\\n- Only need to cache `invalid[i][j]` since most of the case `s1[0 ~ i]` and `s2[0 ~ j]` does not form `s3[0 ~ k]`. Also tested caching `valid[i][j]` the run time is also `1ms`\\n- Many guys use `substring` but it's duplicate code since `substring` itself is checking char by char. We are already doing so\\n\\n\\nHope it helps!\\n\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        char[] c1 = s1.toCharArray(), c2 = s2.toCharArray(), c3 = s3.toCharArray();\\n    \\tint m = s1.length(), n = s2.length();\\n    \\tif(m + n != s3.length()) return false;\\n    \\treturn dfs(c1, c2, c3, 0, 0, 0, new boolean[m + 1][n + 1]);\\n    }\\n    \\n    public boolean dfs(char[] c1, char[] c2, char[] c3, int i, int j, int k, boolean[][] invalid) {\\n    \\tif(invalid[i][j]) return false;\\n    \\tif(k == c3.length) return true;\\n    \\tboolean valid = \\n    \\t    i < c1.length && c1[i] == c3[k] && dfs(c1, c2, c3, i + 1, j, k + 1, invalid) || \\n            j < c2.length && c2[j] == c3[k] && dfs(c1, c2, c3, i, j + 1, k + 1, invalid);\\n    \\tif(!valid) invalid[i][j] = true;\\n        return valid;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2249509,
                "title": "python-simple-solution-w-explanation-recursion-dp",
                "content": "Given three strings `s1`, `s2` and `s3`, we need to check if `s3` can be formed by an interleaving of `s1` and `s2`.\\n\\nAn **interleaving** of two strings, `s1` and `s2`, means that `s1` is divided into `x` and `s2` is divided into `y` contiguous substrings, respectively. Then those substrings are concatenated without changing the order of their occurrence in `s1` and `s2`.\\nNote that the condition `|x - y| <=1` always holds true.\\n<details>\\n<summary><strong>Proof:</strong></summary>\\n<br/>\\nLet\\'s say <code>s1 = \"abcde\"</code> and <code>s2 = \"fgh\"</code>. We divide <code>s1</code> into four parts and <code>s2</code> into two parts.\\nSo, <code>x - y = 2</code>.\\n<br/>\\n<code>s1 = \"ab\" + \"c\" + \"d\" + \"e\" and s2 = \"f\" + \"gh\"</code>.\\n<br/>\\n<code>s3 = \"ab\" + \"f\" + \"c\" + \"gh\" + \"d\" + \"e\"</code>.\\n<br/>\\nThe above can rewritten as <code>s3 = \"ab\" + \"f\" + \"c\" + \"gh\" + \"de\"</code>, which is basically\\ndividing <code>s1</code> into three parts and <code>s2</code> into two parts. And hence, the condition <code>|x - y| <=1</code> holds true.\\n\\nThere are stricter proofs, but I tried to provide an intuitive one.\\n</details>\\n\\n___\\n___\\n\\u274C **Solution I: Recursion [TLE]**\\n\\nWe don\\'t know the size of each substring or the number of substrings beforehand. So, we can take all possible substrings of `s1` and `s2` and check if `s3` can be formed by interleaving them. At each step, we have two options: choose a character from `s1` or `s2`. Let\\'s call our recursive function `dfs(i, j)`. Then the two choices can be represented as:\\n\\n1. `dfs(i + 1, j)`: Choose a character at `i`th index from `s1`\\n2. `dfs(i, j + 1)`: Choose a character at `j`th index from `s2`\\n\\nActually, we can make this choice more smartly. Instead of considering all possibilities, we can make either/both choice(s) only when it matches the character at the `i + j`th index of `s3`.\\n\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            choose_s1, choose_s2 = False, False\\n            if i < len(s1) and s1[i] == s3[i + j]:\\n                choose_s1 = dfs(i + 1, j)\\n            if j < len(s2) and s2[j] == s3[i + j]:\\n                choose_s2 = dfs(i, j + 1)\\n\\n            return choose_s1 or choose_s2\\n\\n        return dfs(0, 0)\\n```\\n\\nWhy have I named the inside function as `dfs`? Because if we trace our actions, we can observe that it forms a binary tree. **Don\\'t worry** if you are not familiar with this term. The following visualization will help you to understand what I mean.\\n\\n```text\\n                                        \\u250F\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n                  \\u256D\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2528 0, 0 \\u2520\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256E\\n                  \\u2502                     \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                      \\u2502\\n              \\u250F\\u2501\\u2501\\u2501\\u2537\\u2501\\u2501\\u2513                                             \\u250F\\u2501\\u2501\\u2537\\u2501\\u2501\\u2501\\u2513     \\n      \\u256D\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2528 1, 0 \\u2520\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256E                         \\u256D\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2528 0, 1 \\u2520\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256E                 \\n      \\u2502       \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B         \\u2502                         \\u2502         \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B         \\u2502 \\n  \\u250F\\u2501\\u2501\\u2501\\u2537\\u2501\\u2501\\u2513                  \\u250F\\u2501\\u2501\\u2537\\u2501\\u2501\\u2501\\u2513                 \\u250F\\u2501\\u2501\\u2501\\u2537\\u2501\\u2501\\u2513                    \\u250F\\u2501\\u2501\\u2537\\u2501\\u2501\\u2501\\u2513  \\n  \\u2503 2, 0 \\u2503                  \\u2503 1, 1 \\u2503                 \\u2503 1, 1 \\u2503                    \\u2503 0, 2 \\u2503 \\n  \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                  \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                 \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                    \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B   \\n     .                         .                        .                           .\\n     .                         .                        .                           .\\n     .                         .                        .                           .\\n\\n```\\n\\nIn dfs, we traverse all the paths one by one. So, here our paths will be:\\n\\n1. (0, 0) -> (1, 0) -> (2, 0) -> ...\\n2. (0, 0) -> (1, 0) -> (1, 1) -> ...\\n3. (0, 0) -> (0, 1) -> (1, 1) -> ...\\n4. (0, 0) -> (0, 1) -> (0, 2) -> ...\\n.\\n.\\n.\\n\\n- **Time Complexity:** <code>O(2<sup>m + n</sup>)</code>\\n  > At each step, we have two choices, so 2 * 2 * 2 ... (m + n) times.\\n- **Space Complexity:** `O(m + n)`\\n  > Recursion stack space.\\n\\n___\\n\\u2705 **Solution II: Dynamic Programming - Memoization [Accepted]**\\n\\nWe are doing a lot of repetitive work in the above recursive solution. How?\\nHave a look at the above example. The subtree with the head `[1, 1]` is repeated twice. Instead of computing it again, we store the result of that state and directly use it.\\nWe can use the decorator `@cache` in Python to achieve this.\\n\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        @cache\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            choose_s1, choose_s2 = False, False\\n            if i < len(s1) and s1[i] == s3[i + j]:\\n                choose_s1 = dfs(i + 1, j)\\n            if j < len(s2) and s2[j] == s3[i + j]:\\n                choose_s2 = dfs(i, j + 1)\\n\\n            return choose_s1 or choose_s2\\n\\n        return dfs(0, 0)\\n```\\n\\n- **Time Complexity:** `O(m * n)`\\n- **Space Complexity:** `O(m * n)`\\n\\n___\\n\\u2705 **Solution III(a): Dynamic Programming - Tabulation [Accepted]**\\n\\nRecursion is generally slower than its iterative counterpart. So, we can further optimize the above solution by using tabulation. Coming up with this solution is a bit difficult, and it requires practice. Try to find similarities with the memoization approach. The value `dp[i][j]` gives the information if we can form `s3[0...(i+j-1)]` from interleaving `s1[0...(i-1)]` and `s2[0...(j-1)]`. The first column represents interleving of `s1` and an empty string, and similarly, the first row represents interleaving of `s2` and and an empty string.\\n\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3):\\n            return False\\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[0][0] = True\\n        for i in range(1, m + 1):\\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\\n        for j in range(1, n + 1):\\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                choose_s1, choose_s2 = False, False\\n                if s1[i - 1] == s3[i + j - 1]:\\n                    choose_s1 = dp[i - 1][j]\\n                if s2[j - 1] == s3[i + j - 1]:\\n                    choose_s2 = dp[i][j - 1]\\n                dp[i][j] = choose_s1 or choose_s2\\n\\n        return dp[m][n]\\n\\n```\\n\\n- **Time Complexity:** `O(m * n)`\\n- **Space Complexity:** `O(m * n)`\\n\\n___\\n\\u2705 **Solution III(b): Dynamic Programming - Tabulation (Space Optimized) [Accepted]**\\n\\nNotice that we only require the information from the cells `dp[i - 1][j]` and `dp[i][j - 1]`, i.e. the cell above the current row and the cell to the left of the current column. So, no need to use a matrix. The code can be shortened, but for the sake of understandability, I decided to leave it as it is.\\n\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3):\\n            return False\\n        if n > m:\\n            m, n = n, m\\n            s1, s2 = s2, s1\\n        dp = [False] * (n + 1)\\n        dp[0] = True\\n        for j in range(1, n + 1):\\n            dp[j] = dp[j - 1] and s2[j - 1] == s3[j - 1]\\n        for i in range(1, m + 1):\\n            dp[0] = dp[0] and s1[i - 1] == s3[i - 1]\\n            for j in range(1, n + 1):\\n                choose_s1, choose_s2 = False, False\\n                if s1[i - 1] == s3[i + j - 1]:\\n                    choose_s1 = dp[j]\\n                if s2[j - 1] == s3[i + j - 1]:\\n                    choose_s2 = dp[j - 1]\\n                dp[j] = choose_s1 or choose_s2\\n\\n        return dp[-1]\\n```\\n\\n- **Time Complexity:** `O(m * n)`\\n- **Space Complexity:** `O(min(m, n))`\\n\\n___\\n___\\nIf you like the solution, please **upvote**! \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F\\n",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            choose_s1, choose_s2 = False, False\\n            if i < len(s1) and s1[i] == s3[i + j]:\\n                choose_s1 = dfs(i + 1, j)\\n            if j < len(s2) and s2[j] == s3[i + j]:\\n                choose_s2 = dfs(i, j + 1)\\n\\n            return choose_s1 or choose_s2\\n\\n        return dfs(0, 0)\\n```\n```text\\n                                        \\u250F\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n                  \\u256D\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2528 0, 0 \\u2520\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256E\\n                  \\u2502                     \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                      \\u2502\\n              \\u250F\\u2501\\u2501\\u2501\\u2537\\u2501\\u2501\\u2513                                             \\u250F\\u2501\\u2501\\u2537\\u2501\\u2501\\u2501\\u2513     \\n      \\u256D\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2528 1, 0 \\u2520\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256E                         \\u256D\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2528 0, 1 \\u2520\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256E                 \\n      \\u2502       \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B         \\u2502                         \\u2502         \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B         \\u2502 \\n  \\u250F\\u2501\\u2501\\u2501\\u2537\\u2501\\u2501\\u2513                  \\u250F\\u2501\\u2501\\u2537\\u2501\\u2501\\u2501\\u2513                 \\u250F\\u2501\\u2501\\u2501\\u2537\\u2501\\u2501\\u2513                    \\u250F\\u2501\\u2501\\u2537\\u2501\\u2501\\u2501\\u2513  \\n  \\u2503 2, 0 \\u2503                  \\u2503 1, 1 \\u2503                 \\u2503 1, 1 \\u2503                    \\u2503 0, 2 \\u2503 \\n  \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                  \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                 \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B                    \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251B   \\n     .                         .                        .                           .\\n     .                         .                        .                           .\\n     .                         .                        .                           .\\n\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        @cache\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            choose_s1, choose_s2 = False, False\\n            if i < len(s1) and s1[i] == s3[i + j]:\\n                choose_s1 = dfs(i + 1, j)\\n            if j < len(s2) and s2[j] == s3[i + j]:\\n                choose_s2 = dfs(i, j + 1)\\n\\n            return choose_s1 or choose_s2\\n\\n        return dfs(0, 0)\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3):\\n            return False\\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[0][0] = True\\n        for i in range(1, m + 1):\\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\\n        for j in range(1, n + 1):\\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                choose_s1, choose_s2 = False, False\\n                if s1[i - 1] == s3[i + j - 1]:\\n                    choose_s1 = dp[i - 1][j]\\n                if s2[j - 1] == s3[i + j - 1]:\\n                    choose_s2 = dp[i][j - 1]\\n                dp[i][j] = choose_s1 or choose_s2\\n\\n        return dp[m][n]\\n\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3):\\n            return False\\n        if n > m:\\n            m, n = n, m\\n            s1, s2 = s2, s1\\n        dp = [False] * (n + 1)\\n        dp[0] = True\\n        for j in range(1, n + 1):\\n            dp[j] = dp[j - 1] and s2[j - 1] == s3[j - 1]\\n        for i in range(1, m + 1):\\n            dp[0] = dp[0] and s1[i - 1] == s3[i - 1]\\n            for j in range(1, n + 1):\\n                choose_s1, choose_s2 = False, False\\n                if s1[i - 1] == s3[i + j - 1]:\\n                    choose_s1 = dp[j]\\n                if s2[j - 1] == s3[i + j - 1]:\\n                    choose_s2 = dp[j - 1]\\n                dp[j] = choose_s1 or choose_s2\\n\\n        return dp[-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956393,
                "title": "99-78-2-approaches-dp-recursion",
                "content": "# Interview Guide: \"Interleaving String\" Problem\\n\\n## Problem Understanding\\n\\nIn the \"Interleaving String\" problem, you are given three strings: `s1`, `s2`, and `s3`. Your task is to determine whether `s3` can be formed by interleaving `s1` and `s2`. For example, if `s1 = \"aabcc\"` and `s2 = \"dbbca\"`, then `s3 = \"aadbbcbcac\"` should return `true`, but `s3 = \"aadbbbaccc\"` should return `false`.\\n\\n## Key Points to Consider\\n\\n### 1. Understand the Constraints\\n\\nBefore diving into the solution, make sure you understand the problem\\'s constraints. The lengths of the strings will not be more than 100 for `s1` and `s2`, and not more than 200 for `s3`. This can help you gauge the time complexity you should aim for.\\n\\n### 2. Multiple Approaches\\n\\nThere are multiple ways to solve this problem, including:\\n\\n  - 2D Dynamic Programming\\n  - 1D Dynamic Programming\\n  - Recursion with Memoization\\n\\nEach method has its own time and space complexity, so choose based on the problem\\'s constraints.\\n\\n### 3. Space Optimization\\n\\nWhile 2D Dynamic Programming is the most intuitive approach, you can reduce the space complexity to \\\\(O(\\\\min(m, n))\\\\) by employing 1D Dynamic Programming. In an interview setting, discussing this optimization can impress your interviewer.\\n\\n### 4. Early Exit\\n\\nIf the sum of the lengths of `s1` and `s2` does not match the length of `s3`, you can immediately return `false`. This can save computation time and demonstrate that you\\'re mindful of edge cases.\\n\\n### 5. Explain Your Thought Process\\n\\nAlways explain your thought process and why you chose a particular approach. Discuss the trade-offs you\\'re making in terms of time and space complexity.\\n\\n## Conclusion\\n\\nThe \"Interleaving String\" problem is an excellent example of a problem that can be tackled through Dynamic Programming or Recursion. Knowing the trade-offs between different approaches and optimizing for space can give you an edge in interviews. By taking the time to understand the problem, choosing the appropriate data structures, and optimizing your approach, you\\'ll not only solve the problem but also demonstrate a well-rounded skill set.\\n\\n---\\n\\n# Live Coding & Explenation: 1D Dynamic Programming\\nhttps://youtu.be/iv_cTwwsRxs\\n\\n---\\n\\n# Approach: 2D Dynamic Programming \\n\\nTo solve the \"Interleaving String\" problem using 2D Dynamic Programming, we utilize a 2D array `dp[i][j]` to represent whether the substring `s3[:i+j]` can be formed by interleaving `s1[:i]` and `s2[:j]`.\\n\\n## Key Data Structures:\\n- **dp**: A 2D list to store the results of subproblems.\\n\\n## Enhanced Breakdown:\\n\\n1. **Initialization**:\\n   - Calculate lengths of `s1`, `s2`, and `s3`.\\n   - If the sum of lengths of `s1` and `s2` is not equal to the length of `s3`, return false.\\n   - Initialize the `dp` array with dimensions `(m+1) x (n+1)`, setting `dp[0][0] = True`.\\n  \\n2. **Base Cases**:\\n   - Fill in the first row of `dp` array, considering only the characters from `s1`.\\n   - Fill in the first column of `dp` array, considering only the characters from `s2`.\\n   \\n3. **DP Loop**:\\n   - Loop through each possible `(i, j)` combination, starting from `(1, 1)`.\\n   - Update `dp[i][j]` based on the transition `dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])`.\\n\\n4. **Wrap-up**:\\n   - Return the value stored in `dp[m][n]`, which indicates whether `s3` can be formed by interleaving `s1` and `s2`.\\n\\n# Complexity:\\n\\n**Time Complexity:** \\n- The solution iterates over each possible $$ (i, j) $$ combination, leading to a time complexity of $$ O(m \\\\times n) $$.\\n\\n**Space Complexity:** \\n- The space complexity is $$ O(m \\\\times n) $$ due to the 2D $$ dp $$ array.\\n\\n---\\n\\n# Approach: 1D Dynamic Programming \\n\\nThe optimization from 2D to 1D DP is based on the observation that the state of `dp[i][j]` in the 2D DP array depends only on `dp[i-1][j]` and `dp[i][j-1]`. Therefore, while iterating through the strings, the current state only depends on the states in the previous row of the 2D DP array, which means we can optimize our space complexity by just keeping track of one row (1D DP).\\n\\n## Key Data Structures:\\n\\n- **dp**: A 1D list that stores whether the substring `s3[:i+j]` can be formed by interleaving `s1[:i]` and `s2[:j]`. Initially, all values are set to `False` except `dp[0]`, which is set to `True`.\\n\\n## Enhanced Breakdown:\\n\\n1. **Initialization**:\\n   - First, calculate the lengths of `s1`, `s2`, and `s3`.\\n   - Check if the sum of the lengths of `s1` and `s2` equals the length of `s3`. If it doesn\\'t, return `False` as `s3` cannot be formed by interleaving `s1` and `s2`.\\n\\n2. **Optimization Check**:\\n   - If `m < n`, swap `s1` and `s2`. This is to ensure that `s1` is not longer than `s2`, which helps in optimizing the space complexity to `O(min(m, n))`.\\n\\n3. **Base Cases**:\\n   - Initialize a 1D array `dp` of length `n+1` with `False`.\\n   - Set `dp[0] = True` because an empty `s1` and `s2` can interleave to form an empty `s3`.\\n\\n4. **Single-Row DP Transition**:\\n   - Iterate through `s1` and `s2` to update the `dp` array.\\n   - For each character in `s1`, iterate through `s2` and update the `dp` array based on the transition rule: `dp[j] = (dp[j] and s1[i] == s3[i+j]) or (dp[j-1] and s2[j] == s3[i+j])`.\\n   - The transition rule checks if the current `s3[i+j]` can be matched by either `s1[i]` or `s2[j]`, relying solely on the previous values in the `dp` array.\\n\\n5. **Wrap-up**:\\n   - The final value in the `dp` array will indicate whether the entire `s3` can be formed by interleaving `s1` and `s2`.\\n   - Return `dp[n]`.\\n\\n\\n\\n# Complexity:\\n\\nThe primary advantage of this 1D DP approach is its space efficiency. While it maintains the same time complexity as the 2D DP approach $$O(m \\\\times n)$$, the space complexity is optimized to $$O(\\\\min(m, n))$$.\\n\\n**Time Complexity:** \\n- The solution iterates over each character of `s1` and `s2` once, leading to a complexity of $$O(m \\\\times n)$$.\\n\\n**Space Complexity:** \\n- The space complexity is optimized to $$O(\\\\min(m,n))$$ as we\\'re only using a single 1D array instead of a 2D matrix.\\n\\n---\\n\\n# Approach: Recursion with Memoization\\n\\nIn this approach, we recursively check whether the substring `s3[k:]` can be formed by interleaving `s1[i:]` and `s2[j:]`. We store the results of these sub-problems in a dictionary named `memo`.\\n\\n## Key Data Structures:\\n- **memo**: A dictionary to store the results of subproblems.\\n\\n## Enhanced Breakdown:\\n\\n1. **Initialization**:\\n   - Calculate lengths of `s1`, `s2`, and `s3`.\\n   - If the sum of lengths of `s1` and `s2` is not equal to the length of `s3`, return false.\\n   \\n2. **Recursive Function**:\\n   - Define a recursive function `helper` which takes indices `i`, `j`, and `k` as inputs.\\n   - The function checks whether the substring `s3[k:]` can be formed by interleaving `s1[i:]` and `s2[j:]`.\\n   - Store the result of each subproblem in the `memo` dictionary.\\n\\n3. **Wrap-up**:\\n   - Return the result of the recursive function for the initial values `i=0, j=0, k=0`.\\n\\n# Complexity:\\n\\n**Time Complexity:** \\n- Each combination of (i, j) is computed once and stored in the memo, leading to a time complexity of $$O(m \\\\times n)$$.\\n\\n**Space Complexity:** \\n- The space complexity is $$O(m \\\\times n)$$ for storing the memoization results.\\n\\n---\\n\\n# Performance\\n\\n| Language  | Runtime (ms) | Memory (MB) |\\n|-----------|--------------|-------------|\\n| Rust      | 0            | 2.1         |\\n| C++       | 0            | 6.4         |\\n| Go        | 1            | 1.9         |\\n| Java      | 3            | 40.5        |\\n| Python3 (1D DP) | 31     | 16.4        |\\n| Python3 (2D DP) | 34     | 16.5        |\\n| Python3 (Recursion) | 45 | 17.4        |\\n| C#        | 54           | 38.4        |\\n| JavaScript| 61           | 43.1        |\\n\\n![ir.png](https://assets.leetcode.com/users/images/6a85642f-8740-4891-a310-591b172bcee8_1692924054.2926686.png)\\n\\n# Code 1D Dynamic Programming \\n``` Python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n, l = len(s1), len(s2), len(s3)\\n        if m + n != l:\\n            return False\\n        \\n        if m < n:\\n            return self.isInterleave(s2, s1, s3)\\n        \\n        dp = [False] * (n + 1)\\n        dp[0] = True\\n        \\n        for j in range(1, n + 1):\\n            dp[j] = dp[j-1] and s2[j-1] == s3[j-1]\\n        \\n        for i in range(1, m + 1):\\n            dp[0] = dp[0] and s1[i-1] == s3[i-1]\\n            for j in range(1, n + 1):\\n                dp[j] = (dp[j] and s1[i-1] == s3[i+j-1]) or (dp[j-1] and s2[j-1] == s3[i+j-1])\\n        \\n        return dp[n]\\n```\\n``` C++ []\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.length(), n = s2.length(), l = s3.length();\\n        if (m + n != l) return false;\\n        \\n        if (m < n) return isInterleave(s2, s1, s3);\\n\\n        vector<bool> dp(n + 1, false);\\n        dp[0] = true;\\n\\n        for (int j = 1; j <= n; ++j) {\\n            dp[j] = dp[j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n\\n        for (int i = 1; i <= m; ++i) {\\n            dp[0] = dp[0] && s1[i - 1] == s3[i - 1];\\n            for (int j = 1; j <= n; ++j) {\\n                dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n};\\n```\\n``` Java []\\npublic class Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int m = s1.length(), n = s2.length(), l = s3.length();\\n        if (m + n != l) return false;\\n\\n        boolean[] dp = new boolean[n + 1];\\n        dp[0] = true;\\n\\n        for (int j = 1; j <= n; ++j) {\\n            dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\\n        }\\n\\n        for (int i = 1; i <= m; ++i) {\\n            dp[0] = dp[0] && s1.charAt(i - 1) == s3.charAt(i - 1);\\n            for (int j = 1; j <= n; ++j) {\\n                dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n}\\n```\\n``` Rust []\\nimpl Solution {\\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\\n        let (m, n, l) = (s1.len(), s2.len(), s3.len());\\n        if m + n != l { return false; }\\n\\n        let (s1, s2, s3) = (s1.as_bytes(), s2.as_bytes(), s3.as_bytes());\\n        let mut dp = vec![false; n + 1];\\n        dp[0] = true;\\n\\n        for j in 1..=n {\\n            dp[j] = dp[j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n\\n        for i in 1..=m {\\n            dp[0] = dp[0] && s1[i - 1] == s3[i - 1];\\n            for j in 1..=n {\\n                dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        dp[n]\\n    }\\n}\\n```\\n``` Go []\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n    m, n, l := len(s1), len(s2), len(s3)\\n    if m + n != l {\\n        return false\\n    }\\n\\n    dp := make([]bool, n+1)\\n    dp[0] = true\\n\\n    for j := 1; j <= n; j++ {\\n        dp[j] = dp[j-1] && s2[j-1] == s3[j-1]\\n    }\\n\\n    for i := 1; i <= m; i++ {\\n        dp[0] = dp[0] && s1[i-1] == s3[i-1]\\n        for j := 1; j <= n; j++ {\\n            dp[j] = (dp[j] && s1[i-1] == s3[i+j-1]) || (dp[j-1] && s2[j-1] == s3[i+j-1])\\n        }\\n    }\\n    \\n    return dp[n]\\n}\\n```\\n``` C# []\\npublic class Solution {\\n    public bool IsInterleave(string s1, string s2, string s3) {\\n        int m = s1.Length, n = s2.Length, l = s3.Length;\\n        if (m + n != l) return false;\\n\\n        bool[] dp = new bool[n + 1];\\n        dp[0] = true;\\n\\n        for (int j = 1; j <= n; ++j) {\\n            dp[j] = dp[j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n\\n        for (int i = 1; i <= m; ++i) {\\n            dp[0] = dp[0] && s1[i - 1] == s3[i - 1];\\n            for (int j = 1; j <= n; ++j) {\\n                dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n}\\n```\\n``` JavaScript []\\n/**\\n * @param {string} s1\\n * @param {string} s2\\n * @param {string} s3\\n * @return {boolean}\\n */\\nvar isInterleave = function(s1, s2, s3) {\\n    let m = s1.length, n = s2.length, l = s3.length;\\n    if (m + n !== l) return false;\\n\\n    let dp = new Array(n + 1).fill(false);\\n    dp[0] = true;\\n\\n    for (let j = 1; j <= n; ++j) {\\n        dp[j] = dp[j - 1] && s2[j - 1] === s3[j - 1];\\n    }\\n\\n    for (let i = 1; i <= m; ++i) {\\n        dp[0] = dp[0] && s1[i - 1] === s3[i - 1];\\n        for (let j = 1; j <= n; ++j) {\\n            dp[j] = (dp[j] && s1[i - 1] === s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] === s3[i + j - 1]);\\n        }\\n    }\\n    \\n    return dp[n];\\n};\\n```\\n\\n# Code 2D Dynamic Programming \\n``` Python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n, l = len(s1), len(s2), len(s3)\\n        if m + n != l:\\n            return False\\n        \\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[0][0] = True\\n        \\n        for i in range(1, m + 1):\\n            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\\n        \\n        for j in range(1, n + 1):\\n            dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]\\n        \\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])\\n        \\n        return dp[m][n]\\n\\n```\\n# Code Recursion with Memoization\\n``` Python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n, l = len(s1), len(s2), len(s3)\\n        if m + n != l:\\n            return False\\n        \\n        memo = {} \\n        \\n        def helper(i: int, j: int, k: int) -> bool:\\n            if k == l:\\n                return True\\n            \\n            if (i, j) in memo:\\n                return memo[(i, j)]\\n            \\n            ans = False\\n            if i < m and s1[i] == s3[k]:\\n                ans = ans or helper(i + 1, j, k + 1)\\n                \\n            if j < n and s2[j] == s3[k]:\\n                ans = ans or helper(i, j + 1, k + 1)\\n            \\n            memo[(i, j)] = ans\\n            return ans\\n        \\n        return helper(0, 0, 0)\\n```\\n\\nBoth the given approaches provide efficient ways to solve the problem, with the first approach focusing on optimizing space and the second leveraging the power of memoization to save time. Choosing between them depends on the specific constraints and requirements of the application. \\uD83D\\uDCA1\\uD83C\\uDF20\\uD83D\\uDC69\\u200D\\uD83D\\uDCBB\\uD83D\\uDC68\\u200D\\uD83D\\uDCBB",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "C#",
                    "JavaScript",
                    "Go",
                    "Rust",
                    "Dynamic Programming"
                ],
                "code": "``` Python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n, l = len(s1), len(s2), len(s3)\\n        if m + n != l:\\n            return False\\n        \\n        if m < n:\\n            return self.isInterleave(s2, s1, s3)\\n        \\n        dp = [False] * (n + 1)\\n        dp[0] = True\\n        \\n        for j in range(1, n + 1):\\n            dp[j] = dp[j-1] and s2[j-1] == s3[j-1]\\n        \\n        for i in range(1, m + 1):\\n            dp[0] = dp[0] and s1[i-1] == s3[i-1]\\n            for j in range(1, n + 1):\\n                dp[j] = (dp[j] and s1[i-1] == s3[i+j-1]) or (dp[j-1] and s2[j-1] == s3[i+j-1])\\n        \\n        return dp[n]\\n```\n``` C++ []\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.length(), n = s2.length(), l = s3.length();\\n        if (m + n != l) return false;\\n        \\n        if (m < n) return isInterleave(s2, s1, s3);\\n\\n        vector<bool> dp(n + 1, false);\\n        dp[0] = true;\\n\\n        for (int j = 1; j <= n; ++j) {\\n            dp[j] = dp[j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n\\n        for (int i = 1; i <= m; ++i) {\\n            dp[0] = dp[0] && s1[i - 1] == s3[i - 1];\\n            for (int j = 1; j <= n; ++j) {\\n                dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n};\\n```\n``` Java []\\npublic class Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int m = s1.length(), n = s2.length(), l = s3.length();\\n        if (m + n != l) return false;\\n\\n        boolean[] dp = new boolean[n + 1];\\n        dp[0] = true;\\n\\n        for (int j = 1; j <= n; ++j) {\\n            dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\\n        }\\n\\n        for (int i = 1; i <= m; ++i) {\\n            dp[0] = dp[0] && s1.charAt(i - 1) == s3.charAt(i - 1);\\n            for (int j = 1; j <= n; ++j) {\\n                dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n}\\n```\n``` Rust []\\nimpl Solution {\\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\\n        let (m, n, l) = (s1.len(), s2.len(), s3.len());\\n        if m + n != l { return false; }\\n\\n        let (s1, s2, s3) = (s1.as_bytes(), s2.as_bytes(), s3.as_bytes());\\n        let mut dp = vec![false; n + 1];\\n        dp[0] = true;\\n\\n        for j in 1..=n {\\n            dp[j] = dp[j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n\\n        for i in 1..=m {\\n            dp[0] = dp[0] && s1[i - 1] == s3[i - 1];\\n            for j in 1..=n {\\n                dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        dp[n]\\n    }\\n}\\n```\n``` Go []\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n    m, n, l := len(s1), len(s2), len(s3)\\n    if m + n != l {\\n        return false\\n    }\\n\\n    dp := make([]bool, n+1)\\n    dp[0] = true\\n\\n    for j := 1; j <= n; j++ {\\n        dp[j] = dp[j-1] && s2[j-1] == s3[j-1]\\n    }\\n\\n    for i := 1; i <= m; i++ {\\n        dp[0] = dp[0] && s1[i-1] == s3[i-1]\\n        for j := 1; j <= n; j++ {\\n            dp[j] = (dp[j] && s1[i-1] == s3[i+j-1]) || (dp[j-1] && s2[j-1] == s3[i+j-1])\\n        }\\n    }\\n    \\n    return dp[n]\\n}\\n```\n``` C# []\\npublic class Solution {\\n    public bool IsInterleave(string s1, string s2, string s3) {\\n        int m = s1.Length, n = s2.Length, l = s3.Length;\\n        if (m + n != l) return false;\\n\\n        bool[] dp = new bool[n + 1];\\n        dp[0] = true;\\n\\n        for (int j = 1; j <= n; ++j) {\\n            dp[j] = dp[j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n\\n        for (int i = 1; i <= m; ++i) {\\n            dp[0] = dp[0] && s1[i - 1] == s3[i - 1];\\n            for (int j = 1; j <= n; ++j) {\\n                dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n}\\n```\n``` JavaScript []\\n/**\\n * @param {string} s1\\n * @param {string} s2\\n * @param {string} s3\\n * @return {boolean}\\n */\\nvar isInterleave = function(s1, s2, s3) {\\n    let m = s1.length, n = s2.length, l = s3.length;\\n    if (m + n !== l) return false;\\n\\n    let dp = new Array(n + 1).fill(false);\\n    dp[0] = true;\\n\\n    for (let j = 1; j <= n; ++j) {\\n        dp[j] = dp[j - 1] && s2[j - 1] === s3[j - 1];\\n    }\\n\\n    for (let i = 1; i <= m; ++i) {\\n        dp[0] = dp[0] && s1[i - 1] === s3[i - 1];\\n        for (let j = 1; j <= n; ++j) {\\n            dp[j] = (dp[j] && s1[i - 1] === s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] === s3[i + j - 1]);\\n        }\\n    }\\n    \\n    return dp[n];\\n};\\n```\n``` Python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n, l = len(s1), len(s2), len(s3)\\n        if m + n != l:\\n            return False\\n        \\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[0][0] = True\\n        \\n        for i in range(1, m + 1):\\n            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\\n        \\n        for j in range(1, n + 1):\\n            dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]\\n        \\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])\\n        \\n        return dp[m][n]\\n\\n```\n``` Python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n, l = len(s1), len(s2), len(s3)\\n        if m + n != l:\\n            return False\\n        \\n        memo = {} \\n        \\n        def helper(i: int, j: int, k: int) -> bool:\\n            if k == l:\\n                return True\\n            \\n            if (i, j) in memo:\\n                return memo[(i, j)]\\n            \\n            ans = False\\n            if i < m and s1[i] == s3[k]:\\n                ans = ans or helper(i + 1, j, k + 1)\\n                \\n            if j < n and s2[j] == s3[k]:\\n                ans = ans or helper(i, j + 1, k + 1)\\n            \\n            memo[(i, j)] = ans\\n            return ans\\n        \\n        return helper(0, 0, 0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 32078,
                "title": "dp-solution-in-java",
                "content": "    public boolean isInterleave(String s1, String s2, String s3) {\\n\\n        if ((s1.length()+s2.length())!=s3.length()) return false;\\n\\n        boolean[][] matrix = new boolean[s2.length()+1][s1.length()+1];\\n\\n        matrix[0][0] = true;\\n\\n        for (int i = 1; i < matrix[0].length; i++){\\n            matrix[0][i] = matrix[0][i-1]&&(s1.charAt(i-1)==s3.charAt(i-1));\\n        }\\n\\n        for (int i = 1; i < matrix.length; i++){\\n            matrix[i][0] = matrix[i-1][0]&&(s2.charAt(i-1)==s3.charAt(i-1));\\n        }\\n\\n        for (int i = 1; i < matrix.length; i++){\\n            for (int j = 1; j < matrix[0].length; j++){\\n                matrix[i][j] = (matrix[i-1][j]&&(s2.charAt(i-1)==s3.charAt(i+j-1)))\\n                        || (matrix[i][j-1]&&(s1.charAt(j-1)==s3.charAt(i+j-1)));\\n            }\\n        }\\n\\n        return matrix[s2.length()][s1.length()];\\n\\n    }",
                "solutionTags": [],
                "code": "    public boolean isInterleave(String s1, String s2, String s3) {\\n\\n        if ((s1.length()+s2.length())!=s3.length()) return false;\\n\\n        boolean[][] matrix = new boolean[s2.length()+1][s1.length()+1];\\n\\n        matrix[0][0] = true;\\n\\n        for (int i = 1; i < matrix[0].length; i++){\\n            matrix[0][i] = matrix[0][i-1]&&(s1.charAt(i-1)==s3.charAt(i-1));\\n        }\\n\\n        for (int i = 1; i < matrix.length; i++){\\n            matrix[i][0] = matrix[i-1][0]&&(s2.charAt(i-1)==s3.charAt(i-1));\\n        }\\n\\n        for (int i = 1; i < matrix.length; i++){\\n            for (int j = 1; j < matrix[0].length; j++){\\n                matrix[i][j] = (matrix[i-1][j]&&(s2.charAt(i-1)==s3.charAt(i+j-1)))\\n                        || (matrix[i][j-1]&&(s1.charAt(j-1)==s3.charAt(i+j-1)));\\n            }\\n        }\\n\\n        return matrix[s2.length()][s1.length()];\\n\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2248553,
                "title": "c-recursive-memoization-code-with-explanation",
                "content": "### Recursive Solution:  (Gives TLE)\\nTraverse all the three strings from end.\\n**Base case**: When the lengths of all the strings become less than 0 (**Note**: Not less than or equal to 0, that will give a wrong answer in the case when s1=\"a\", s2=\" \", s3=\"c\" ) \\nThere are three cases:\\n- **Case 1**:  If both the last characters of s1 and s2 are equal to the last character of s3, then we have 2 choices, we can either pick last character of s1 or the last character of s2. \\n- **Case2**: If the last characters of s1 and s3 are equal, then We\\'ll simply reduce the length of s1 and s3 by 1(meaning, we\\'ll exclude both of the last characters and make the call for rest of the string)\\n- **Case3**:  If the last characters of s2 and s3 are equal, then We\\'ll simply reduce the length of s2 and s3 by 1(meaning, we\\'ll exclude both of the last characters and make the call for rest of the string).\\n\\nIf any of these cases does\\'t hold true, then return false (as none of the characters match).\\n\\n```\\nclass Solution {\\npublic:\\n    bool helper(string& s1, string& s2, string &s3, int l1, int l2, int l3) {\\n        if(l1<0 && l2<0 && l3<0) {\\n            return true;\\n        }\\n        if(l1>=0 && s1[l1]==s3[l3] && l2>=0 && s2[l2]==s3[l3] ) {\\n            return (helper(s1, s2, s3, l1-1, l2, l3-1) || helper(s1, s2, s3, l1, l2-1, l3-1));\\n        }\\n        else if(l1>=0 && s1[l1]==s3[l3])\\n            return helper(s1, s2, s3, l1-1, l2, l3-1);\\n        \\n        else if(l2>=0 &&s2[l2]==s3[l3])\\n            return helper(s1, s2, s3, l1, l2-1, l3-1);\\n        \\n        else return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size() != s1.size() + s2.size())\\n\\t\\t\\treturn false;\\n        return helper(s1, s2, s3,s1.size()-1, s2.size()-1, s3.size()-1);\\n    }\\n};\\n```\\n### Recusive solution to MEMOIZATION: (Accepted)\\n```\\nclass Solution {\\npublic:\\n    // int dp[102][102];\\n    bool helper(string& s1, string& s2, string &s3, int l1, int l2, int l3, vector<vector<int>>&dp) {\\n        if(l1<0 && l2<0 && l3<0) {\\n            return true;\\n        }\\n        if(l1>=0 && l2>=0 && dp[l1][l2]!=-1) {\\n            return dp[l1][l2];\\n        }\\n        if(l1>=0 && s1[l1]==s3[l3] && l2>=0 && s2[l2]==s3[l3] ) {\\n            return dp[l1][l2] = (helper(s1, s2, s3, l1-1, l2, l3-1, dp) || helper(s1, s2, s3, l1, l2-1, l3-1, dp));\\n        }\\n        else if(l1>=0 && s1[l1]==s3[l3])\\n            return helper(s1, s2, s3, l1-1, l2, l3-1, dp);\\n        \\n        else if(l2>=0 &&s2[l2]==s3[l3])\\n            return helper(s1, s2, s3, l1, l2-1, l3-1, dp);\\n        \\n        else return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size() != s1.size() + s2.size())\\n\\t\\t\\treturn false;\\n        vector<vector<int>>dp(s1.size()+1, (vector<int>(s2.size()+1, -1)));\\n        // memset(dp, -1, sizeof(dp));\\n        return helper(s1, s2, s3,s1.size()-1, s2.size()-1, s3.size()-1, dp);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool helper(string& s1, string& s2, string &s3, int l1, int l2, int l3) {\\n        if(l1<0 && l2<0 && l3<0) {\\n            return true;\\n        }\\n        if(l1>=0 && s1[l1]==s3[l3] && l2>=0 && s2[l2]==s3[l3] ) {\\n            return (helper(s1, s2, s3, l1-1, l2, l3-1) || helper(s1, s2, s3, l1, l2-1, l3-1));\\n        }\\n        else if(l1>=0 && s1[l1]==s3[l3])\\n            return helper(s1, s2, s3, l1-1, l2, l3-1);\\n        \\n        else if(l2>=0 &&s2[l2]==s3[l3])\\n            return helper(s1, s2, s3, l1, l2-1, l3-1);\\n        \\n        else return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size() != s1.size() + s2.size())\\n\\t\\t\\treturn false;\\n        return helper(s1, s2, s3,s1.size()-1, s2.size()-1, s3.size()-1);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    // int dp[102][102];\\n    bool helper(string& s1, string& s2, string &s3, int l1, int l2, int l3, vector<vector<int>>&dp) {\\n        if(l1<0 && l2<0 && l3<0) {\\n            return true;\\n        }\\n        if(l1>=0 && l2>=0 && dp[l1][l2]!=-1) {\\n            return dp[l1][l2];\\n        }\\n        if(l1>=0 && s1[l1]==s3[l3] && l2>=0 && s2[l2]==s3[l3] ) {\\n            return dp[l1][l2] = (helper(s1, s2, s3, l1-1, l2, l3-1, dp) || helper(s1, s2, s3, l1, l2-1, l3-1, dp));\\n        }\\n        else if(l1>=0 && s1[l1]==s3[l3])\\n            return helper(s1, s2, s3, l1-1, l2, l3-1, dp);\\n        \\n        else if(l2>=0 &&s2[l2]==s3[l3])\\n            return helper(s1, s2, s3, l1, l2-1, l3-1, dp);\\n        \\n        else return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size() != s1.size() + s2.size())\\n\\t\\t\\treturn false;\\n        vector<vector<int>>dp(s1.size()+1, (vector<int>(s2.size()+1, -1)));\\n        // memset(dp, -1, sizeof(dp));\\n        return helper(s1, s2, s3,s1.size()-1, s2.size()-1, s3.size()-1, dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247494,
                "title": "python-3-from-top-down-to-bottom-up-2d-to-1d-space",
                "content": "**\\u2714\\uFE0F Solution 1: Top-down DP**\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n        m, n = len(s1), len(s2)\\n        \\n        @lru_cache(None)\\n        def dp(i, j):\\n            if i == m and j == n: return True  # Found a valid match\\n            ans = False\\n            if i < m and s1[i] == s3[i+j]:  # Case match s1[i] with s3[i+j]\\n                ans |= dp(i + 1, j)\\n            if j < n and s2[j] == s3[i+j]:  # Case match s2[j] with s3[i+j]\\n                ans |= dp(i, j + 1)\\n            return ans\\n\\n        return dp(0, 0)\\n```\\nComplexity:\\n- Time: `O(m*n)`, where `m` is length of string `s1`, `n` is length of string `s2`\\n- Space: `O(m*n)`\\n---\\n\\n**\\u2714\\uFE0F Solution 2: Bottom-up DP**\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n\\n        m, n = len(s1), len(s2)\\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[m][n] = True\\n        for i in range(m, -1, -1):\\n            for j in range(n, -1, -1):\\n                if i < m and s1[i] == s3[i + j]:\\n                    dp[i][j] |= dp[i + 1][j]\\n                if j < n and s2[j] == s3[i + j]:\\n                    dp[i][j] |= dp[i][j + 1]\\n        return dp[0][0]\\n```\\nComplexity:\\n- Time: `O(m*n)`, where `m` is length of string `s1`, `n` is length of string `s2`\\n- Space: `O(m*n)`\\n\\n---\\n**\\u2714\\uFE0F Solution 3: Bottom-up DP (Space Optimized)**\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n\\n        m, n = len(s1), len(s2)\\n        dp, dpPrev = [False] * (n + 1), [False] * (n + 1)\\n        for i in range(m, -1, -1):\\n            for j in range(n, -1, -1):\\n                dp[j] = False\\n                if i == m and j == n:\\n                    dp[n] = True\\n                if i < m and s1[i] == s3[i + j]:\\n                    dp[j] |= dpPrev[j]\\n                if j < n and s2[j] == s3[i + j]:\\n                    dp[j] |= dp[j + 1]\\n            dp, dpPrev = dpPrev, dp\\n        return dpPrev[0]\\n```\\nComplexity:\\n- Time: `O(m*n)`, where `m` is length of string `s1`, `n` is length of string `s2`\\n- Space: `O(n)`",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n        m, n = len(s1), len(s2)\\n        \\n        @lru_cache(None)\\n        def dp(i, j):\\n            if i == m and j == n: return True  # Found a valid match\\n            ans = False\\n            if i < m and s1[i] == s3[i+j]:  # Case match s1[i] with s3[i+j]\\n                ans |= dp(i + 1, j)\\n            if j < n and s2[j] == s3[i+j]:  # Case match s2[j] with s3[i+j]\\n                ans |= dp(i, j + 1)\\n            return ans\\n\\n        return dp(0, 0)\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n\\n        m, n = len(s1), len(s2)\\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[m][n] = True\\n        for i in range(m, -1, -1):\\n            for j in range(n, -1, -1):\\n                if i < m and s1[i] == s3[i + j]:\\n                    dp[i][j] |= dp[i + 1][j]\\n                if j < n and s2[j] == s3[i + j]:\\n                    dp[i][j] |= dp[i][j + 1]\\n        return dp[0][0]\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n\\n        m, n = len(s1), len(s2)\\n        dp, dpPrev = [False] * (n + 1), [False] * (n + 1)\\n        for i in range(m, -1, -1):\\n            for j in range(n, -1, -1):\\n                dp[j] = False\\n                if i == m and j == n:\\n                    dp[n] = True\\n                if i < m and s1[i] == s3[i + j]:\\n                    dp[j] |= dpPrev[j]\\n                if j < n and s2[j] == s3[i + j]:\\n                    dp[j] |= dp[j + 1]\\n            dp, dpPrev = dpPrev, dp\\n        return dpPrev[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247165,
                "title": "c-memoizn-3-variables-memoizn-without-3rd-var-dp-m-n-dp-n",
                "content": "```\\n//Approach-1 (Recursion + Memoization (i, j, k))\\nclass Solution {\\npublic:\\n    int m, n, N;\\n    int t[101][101][201];\\n    bool check(string s1, string s2, string s3, int i, int j, int k) {\\n        if(i >= m && j >= n && k >= N) //solution\\n            return true;\\n        \\n        if(k >= N) //other string didn\\'t get consumed whole\\n            return false;\\n            \\n        if(t[i][j][k] != -1)\\n            return t[i][j][k];\\n        \\n        return t[i][j][k] = ((s1[i]==s3[k] && check(s1, s2, s3, i+1, j, k+1)) || (s2[j]==s3[k] && check(s1, s2, s3, i, j+1, k+1)));\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        memset(t, -1, sizeof(t));\\n        m = s1.length();\\n        n = s2.length();\\n        N = s3.length();\\n        \\n        return check(s1, s2, s3, 0, 0, 0);\\n    }\\n};\\n```\\n\\n```\\n//Approach-2 (Recursion + Memoization (i, j))\\nclass Solution {\\npublic:\\n    int m, n, N;\\n    int t[101][101];\\n    \\n    bool check(string s1, string s2, string s3, int i, int j) {\\n        if(i >= m && j >= n && i+j >= N) //solution\\n            return true;\\n        \\n        if(i+j >= N) //other string didn\\'t get consumed whole\\n            return false;\\n            \\n        if(t[i][j] != -1)\\n            return t[i][j];\\n        \\n        //Note that, k is same for both calls because it increases in both cases\\n        //Also, at any time k = i + j;\\n        return t[i][j] = ((s1[i]==s3[i+j] && check(s1, s2, s3, i+1, j)) || (s2[j]==s3[i+j] && check(s1, s2, s3, i, j+1)));\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        memset(t, -1, sizeof(t));\\n        m = s1.length();\\n        n = s2.length();\\n        N = s3.length();\\n        \\n        if(m + n != N)\\n            return false;\\n        \\n        return check(s1, s2, s3, 0, 0);\\n    }\\n};\\n```\\n\\n```\\n//Approach - 3 (Bottom Up : Time and Space : O(m*n))\\nclass Solution {\\npublic:   \\n    bool check(string& s1, string& s2, string& s3) {\\n        int m = s1.length();\\n        int n = s2.length();\\n        int N = s3.length();\\n        if(m + n != N)\\n            return false;\\n        \\n        int t[m+1][n+1];\\n        //t[i][j] = true; //means, s1[0..i] and s2[0...j] interleaves with s3 till (i+j)\\n        \\n        //length of s1 = 0, s2 = 0 and s3 = 0 + 0, i.e. 0 . So obviously it\\'s interleaved :-)\\n        t[0][0] = true;\\n        \\n        //When s1 is of 0 length, we can interleave only when s2 forms s3\\n        for(int j = 1; j<n+1; j++) {\\n            t[0][j] = t[0][j-1] && s2[j-1]==s3[j-1];\\n        }\\n        \\n        //When s2 is of 0 length, we can interleave only if s1 forms s3\\n        for(int i = 1; i<m+1; i++) {\\n            t[i][0] = t[i-1][0] && s1[i-1]==s3[i-1];\\n        }\\n        \\n        \\n        for(int i = 1; i<m+1; i++) {\\n            for(int j = 1; j<n+1; j++) {\\n                int k = i + j - 1;\\n                \\n                bool s1_equals_s3  = t[i-1][j] && s1[i-1] == s3[k]; //Try with s1\\n                \\n                bool s2_equals_s3  = t[i][j-1] && s2[j-1] == s3[k]; //Try with s2\\n                \\n                t[i][j] = s1_equals_s3 || s2_equals_s3 ;\\n            }\\n        }\\n        \\n        return t[m][n];\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        return check(s1, s2, s3);\\n    }\\n};\\n```\\n\\n```\\n//Approach - 4 (Bottom Up : Space O(n), Time O(m*n) : Converting Approach-3 to O(n) space approach)\\nclass Solution {\\npublic:   \\n    bool check(string& s1, string& s2, string& s3) {\\n        int m = s1.length();\\n        int n = s2.length();\\n        int N = s3.length();\\n        if(m + n != N)\\n            return false;\\n        \\n        bool t[n+1];\\n        \\n        \\n        for(int i = 0; i<m+1; i++) {\\n            for(int j = 0; j<n+1; j++) {\\n                if(i == 0 && j == 0) {\\n                    t[j] = true;\\n                } else if(i == 0) {\\n                    t[j] = t[j-1] && s2[j-1]==s3[i+j-1];\\n                } else if (j == 0) {\\n                    t[j] = t[j] && s1[i-1]==s3[i+j-1];\\n                } else {\\n                    t[j] = (t[j-1] && s2[j-1]==s3[i+j-1]) || (t[j] && s1[i-1]==s3[i+j-1]);\\n                }\\n            }\\n        }\\n        \\n        return t[n];\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        return check(s1, s2, s3);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n//Approach-1 (Recursion + Memoization (i, j, k))\\nclass Solution {\\npublic:\\n    int m, n, N;\\n    int t[101][101][201];\\n    bool check(string s1, string s2, string s3, int i, int j, int k) {\\n        if(i >= m && j >= n && k >= N) //solution\\n            return true;\\n        \\n        if(k >= N) //other string didn\\'t get consumed whole\\n            return false;\\n            \\n        if(t[i][j][k] != -1)\\n            return t[i][j][k];\\n        \\n        return t[i][j][k] = ((s1[i]==s3[k] && check(s1, s2, s3, i+1, j, k+1)) || (s2[j]==s3[k] && check(s1, s2, s3, i, j+1, k+1)));\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        memset(t, -1, sizeof(t));\\n        m = s1.length();\\n        n = s2.length();\\n        N = s3.length();\\n        \\n        return check(s1, s2, s3, 0, 0, 0);\\n    }\\n};\\n```\n```\\n//Approach-2 (Recursion + Memoization (i, j))\\nclass Solution {\\npublic:\\n    int m, n, N;\\n    int t[101][101];\\n    \\n    bool check(string s1, string s2, string s3, int i, int j) {\\n        if(i >= m && j >= n && i+j >= N) //solution\\n            return true;\\n        \\n        if(i+j >= N) //other string didn\\'t get consumed whole\\n            return false;\\n            \\n        if(t[i][j] != -1)\\n            return t[i][j];\\n        \\n        //Note that, k is same for both calls because it increases in both cases\\n        //Also, at any time k = i + j;\\n        return t[i][j] = ((s1[i]==s3[i+j] && check(s1, s2, s3, i+1, j)) || (s2[j]==s3[i+j] && check(s1, s2, s3, i, j+1)));\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        memset(t, -1, sizeof(t));\\n        m = s1.length();\\n        n = s2.length();\\n        N = s3.length();\\n        \\n        if(m + n != N)\\n            return false;\\n        \\n        return check(s1, s2, s3, 0, 0);\\n    }\\n};\\n```\n```\\n//Approach - 3 (Bottom Up : Time and Space : O(m*n))\\nclass Solution {\\npublic:   \\n    bool check(string& s1, string& s2, string& s3) {\\n        int m = s1.length();\\n        int n = s2.length();\\n        int N = s3.length();\\n        if(m + n != N)\\n            return false;\\n        \\n        int t[m+1][n+1];\\n        //t[i][j] = true; //means, s1[0..i] and s2[0...j] interleaves with s3 till (i+j)\\n        \\n        //length of s1 = 0, s2 = 0 and s3 = 0 + 0, i.e. 0 . So obviously it\\'s interleaved :-)\\n        t[0][0] = true;\\n        \\n        //When s1 is of 0 length, we can interleave only when s2 forms s3\\n        for(int j = 1; j<n+1; j++) {\\n            t[0][j] = t[0][j-1] && s2[j-1]==s3[j-1];\\n        }\\n        \\n        //When s2 is of 0 length, we can interleave only if s1 forms s3\\n        for(int i = 1; i<m+1; i++) {\\n            t[i][0] = t[i-1][0] && s1[i-1]==s3[i-1];\\n        }\\n        \\n        \\n        for(int i = 1; i<m+1; i++) {\\n            for(int j = 1; j<n+1; j++) {\\n                int k = i + j - 1;\\n                \\n                bool s1_equals_s3  = t[i-1][j] && s1[i-1] == s3[k]; //Try with s1\\n                \\n                bool s2_equals_s3  = t[i][j-1] && s2[j-1] == s3[k]; //Try with s2\\n                \\n                t[i][j] = s1_equals_s3 || s2_equals_s3 ;\\n            }\\n        }\\n        \\n        return t[m][n];\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        return check(s1, s2, s3);\\n    }\\n};\\n```\n```\\n//Approach - 4 (Bottom Up : Space O(n), Time O(m*n) : Converting Approach-3 to O(n) space approach)\\nclass Solution {\\npublic:   \\n    bool check(string& s1, string& s2, string& s3) {\\n        int m = s1.length();\\n        int n = s2.length();\\n        int N = s3.length();\\n        if(m + n != N)\\n            return false;\\n        \\n        bool t[n+1];\\n        \\n        \\n        for(int i = 0; i<m+1; i++) {\\n            for(int j = 0; j<n+1; j++) {\\n                if(i == 0 && j == 0) {\\n                    t[j] = true;\\n                } else if(i == 0) {\\n                    t[j] = t[j-1] && s2[j-1]==s3[i+j-1];\\n                } else if (j == 0) {\\n                    t[j] = t[j] && s1[i-1]==s3[i+j-1];\\n                } else {\\n                    t[j] = (t[j-1] && s2[j-1]==s3[i+j-1]) || (t[j] && s1[i-1]==s3[i+j-1]);\\n                }\\n            }\\n        }\\n        \\n        return t[n];\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        return check(s1, s2, s3);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1246649,
                "title": "python-3-lines-dp-explained",
                "content": "In `dp(i, j)` we keep `1` if it is possible to form string `s3` upto `i+j` symbol from first `i` elements of `s1` and first `j` elements of `s2`. Every moment we need to check two at most two neighbors: `dp(i, j - 1)` and `dp(i - 1, j)`: we need to check if symbol `s[i+j+1]` is equal to `s2[j]` and answer is true for `dp(i, j-1)` and `j >= 0`, or similar condition for another string.\\n\\n#### Complexity\\nTime complexity is `O(mn)`, because we have `mn` states and two transactions from one state to others. Space complexity is `O(mn)` as well, which can be reduced to `O(m + n)`.\\n\\n#### Code\\n```python\\nclass Solution:\\n    def isInterleave(self, s1, s2, s3):\\n        @lru_cache(None)\\n        def dp(i, j):\\n            if i == -1 and j == -1: return True\\n            return (j >= 0 and s2[j] == s3[i+j+1] and dp(i, j-1)) or (i >= 0 and s1[i] == s3[i+j+1] and dp(i-1,j))\\n        \\n        return len(s1) + len(s2) == len(s3) and dp(len(s1) - 1, len(s2) - 1)\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```python\\nclass Solution:\\n    def isInterleave(self, s1, s2, s3):\\n        @lru_cache(None)\\n        def dp(i, j):\\n            if i == -1 and j == -1: return True\\n            return (j >= 0 and s2[j] == s3[i+j+1] and dp(i, j-1)) or (i >= 0 and s1[i] == s3[i+j+1] and dp(i-1,j))\\n        \\n        return len(s1) + len(s2) == len(s3) and dp(len(s1) - 1, len(s2) - 1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31901,
                "title": "c-dp-solution-with-explanation",
                "content": "First tried brute force backtracking, it's obvious will not be accepted.\\n\\n    class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int n1 = s1.size(), n2 = s2.size(), n3 = s3.size();\\n            if(n1 + n2 != n3) return false;\\n            return isInterleaveHelper(s1, 0, n1, s2, 0, n2, s3, 0, n3);\\n        }\\n        \\n        bool isInterleaveHelper(string &s1, int i1, int n1, string &s2, int i2, int n2, string &s3, int i3, int n3){\\n            if(i1 == n1 && i2 == n2 && i3 == n3) return true; \\n            if(i1 < n1 && s1[i1] == s3[i3] && isInterleaveHelper(s1, i1 + 1, n1, s2, i2, n2, s3, i3 + 1, n3)) return true;\\n            if(i2 < n2 && s2[i2] == s3[i3] && isInterleaveHelper(s1, i1, n1, s2, i2 + 1, n2, s3, i3 + 1, n3)) return true;\\n            else return false;\\n        }\\n    };\\n\\n\\nThen it comes to dp solution. I first built a two dimension dp table, with drawing the path displayed below. Because it's interleaving, so certain order still needs to maintain, so that's why for a valid path, it can only go right or down, so that's why `dp[i1][i2]` is depending on `dp[i1 - 1][i2]` and `dp[i1][i2 - 1]`. After discovering the transition rule to get `dp[i1][i2]`, we just need to record true or false in the dp table. `dp[i1][i2]` means if `s3.substr(0, i1 + i2)` can be formed by `s1.substr(0, i1)` interleaving `s2.substr(0, i2)`;\\n\\n    s3 = \\u201caadbbcbcac\\u201d\\n                     a\\t    a\\t    b\\t    c\\t   c\\n    \\t\\t    0\\t 1\\t    2\\t    3\\t    4\\t   5\\n    \\n         \\t0\\t\\u201c\\u201d\\u2192\\t a  \\u2192   aa\\t\\n    \\t\\t\\t\\t        \\u2193\\n       d\\t1\\t\\t\\t    aad  \\u2192  aadb\\n    \\t\\t\\t\\t        \\u2193\\t    \\u2193\\n       b\\t2\\t\\t\\t    aadb \\u2192  aadbb \\u2192 aadbbc\\n    \\t\\t\\t\\t        \\u2193\\t\\t\\u2193\\n       b\\t3\\t\\t\\t    aadbb\\taadbbcb\\n    \\t\\t\\t\\t        \\u2193\\n       c\\t4\\t\\t\\t    aadbbc\\u2192 aadbbcb\\n    \\n       a\\t5\\n\\n\\ncode, O(n1n2) space, and O(n1n2)time, it's much better than the brute force now. \\n\\n    class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int n1 = (int)s1.size(), n2 = (int)s2.size(), n3 = (int)s3.size(); \\n            if(n1 + n2 != n3) return false;\\n            \\n            vector<vector<bool>> dp(n1 + 1, vector<bool>(n2 + 1, false));\\n            dp[0][0] = true;\\n            \\n            for(int i2 = 1; i2 <= n2; i2++) dp[0][i2] = dp[0][i2 - 1] && s2[i2 - 1] == s3[i2 - 1];\\n            for(int i1 = 1; i1 <= n1; i1++) dp[i1][0] = dp[i1 - 1][0] && s1[i1 - 1] == s3[i1 - 1];\\n    \\n            for(int i1 = 1; i1 <= n1; i1++){\\n                for(int i2 = 1; i2 <= n2; i2++){\\n                    dp[i1][i2] = (dp[i1 - 1][i2] && s1[i1 - 1] == s3[i1 + i2 - 1]) || (dp[i1][i2 - 1] && s2[i2 - 1] == s3[i1 + i2 - 1]);\\n                }\\n            }\\n            \\n            return dp[n1][n2];  \\n        }\\n    };",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int n1 = s1.size(), n2 = s2.size(), n3 = s3.size();\\n            if(n1 + n2 != n3) return false;\\n            return isInterleaveHelper(s1, 0, n1, s2, 0, n2, s3, 0, n3);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 31904,
                "title": "summary-of-solutions-bfs-dfs-dp",
                "content": "## BFS solution (6ms)\\n\\nImagine a grid, which x-axis and y-axis are s1 and s2, matching s3 is the same as\\nfinding a path from (0,0) to (len1, len2). It actually becomes a\\nBFS on grid. Since we don't need exact paths, a HashSet of\\ncoordinates is used to eliminate duplicated paths.\\n\\n    public class Solution {\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            int len1 = s1.length(),\\n                len2 = s2.length(),\\n                len3 = s3.length();\\n            if (len1 + len2 != len3) return false;\\n            Deque<Integer> queue = new LinkedList<>();\\n            int matched = 0;\\n            queue.offer(0);\\n            Set<Integer> set = new HashSet<>();\\n            while (queue.size() > 0 && matched < len3) {\\n                int size = queue.size();\\n                for (int i = 0; i < size; i++) {\\n                    int p1 = queue.peek() / len3,\\n                        p2 = queue.peek() % len3;\\n                    queue.poll();\\n                    if (p1 < len1 && s1.charAt(p1) == s3.charAt(matched)) {\\n                        int key = (p1 + 1) * len3 + p2;\\n                        if (!set.contains(key)) {\\n                            set.add(key);\\n                            queue.offer(key);\\n                        }\\n                    }\\n                    if (p2 < len2 && s2.charAt(p2) == s3.charAt(matched)) {\\n                        int key = p1 * len3 + (p2 + 1);\\n                        if (!set.contains(key)) {\\n                            set.add(key);\\n                            queue.offer(key);\\n                        }\\n                    }\\n                }\\n                matched++;\\n            }\\n            return queue.size() > 0 && matched == len3;\\n        }\\n    }\\n\\n## DFS solution with memorization (2ms)\\n\\nThis looks slow but is actually faster than BFS! Think about it carefully, in this\\nparticular problem, search always ends at the same depth. DFS with memorization\\nsearches about the same amount of paths with the same length as BFS, if it is doesn't\\nterminate on the first path found. Without the queue operations, the overall cost\\nis only smaller if we don't count call stack. The most significant runtime reducer is\\nprobably the early termination\\n\\n    public class Solution {\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            if (s1.length() + s2.length() != s3.length()) return false;\\n            HashSet<Integer> cache = new HashSet<Integer>();\\n            return isInterleave0(s1, s2, s3, 0, 0, cache);\\n        }\\n\\n        private boolean isInterleave0(String s1, String s2, String s3, int p1, int p2, HashSet<Integer> cache) {\\n            if (p1 + p2 == s3.length())\\n                return true;\\n            if (cache.contains(p1 * s3.length() + p2))\\n                return false;\\n            // no need to store actual result.\\n            // if we found the path, we have already terminated.\\n            cache.add(p1 * s3.length() + p2);\\n            boolean match1 = p1 < s1.length() && s3.charAt(p1 + p2) == s1.charAt(p1);\\n            boolean match2 = p2 < s2.length() && s3.charAt(p1 + p2) == s2.charAt(p2);\\n            if (match1 && match2)\\n                return isInterleave0(s1, s2, s3, p1 + 1, p2, cache) ||\\n                       isInterleave0(s1, s2, s3, p1, p2 + 1, cache);\\n            else if (match1)\\n                return isInterleave0(s1, s2, s3, p1 + 1, p2, cache);\\n            else if (match2)\\n                return isInterleave0(s1, s2, s3, p1, p2 + 1, cache);\\n            else\\n                return false;\\n        }\\n    }\\n\\n## 2d DP solution (6ms)\\n\\nIt's an interesting practice. There are further optimization could be done to\\nreduce cache matrix to 1d. However doing DP for this problem is tedious and not\\nseem to worth the trouble.\\n\\n    public class Solution {\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            int len1 = s1.length(),\\n                len2 = s2.length(),\\n                len3 = s3.length();\\n            if (len1 + len2 != len3) return false;\\n            // cache[i][j] == true means first i + j chars are matched by\\n            // first j chars from s1 and first i chars from s2\\n            boolean[][] cache = new boolean[len2 + 1][len1 + 1];\\n            cache[0][0] = true; // empty and empty matches empty\\n            int m3 = 1; // matched length, m1 and m2 are similar\\n            while (m3 <= len3) {\\n                // this loop fill in cache matrix from left-top to right-bottom, diagonally.\\n                // note that loop conditions are pretty tricky here.\\n                for (int m1 = Math.max(m3 - len2, 0); m1 <= len1 && m1 <= m3; m1++) {\\n                    int m2 = m3 - m1;\\n                    cache[m2][m1] =\\n                        m1 > 0 && cache[m2][m1 - 1] && s3.charAt(m3 - 1) == s1.charAt(m1 - 1) ||\\n                        m2 > 0 && cache[m2 - 1][m1] && s3.charAt(m3 - 1) == s2.charAt(m2 - 1);\\n                }\\n                m3++;\\n            }\\n            return cache[len2][len1];\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Depth-First Search",
                    "Breadth-First Search"
                ],
                "code": "class Solution {\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            int len1 = s1.length(),\\n                len2 = s2.length(),\\n                len3 = s3.length();\\n            if (len1 + len2 != len3) return false;\\n            Deque<Integer> queue = new LinkedList<>();\\n            int matched = 0;\\n            queue.offer(0);\\n            Set<Integer> set = new HashSet<>();\\n            while (queue.size() > 0 && matched < len3) {\\n                int size = queue.size();\\n                for (int i = 0; i < size; i++) {\\n                    int p1 = queue.peek() / len3,\\n                        p2 = queue.peek() % len3;\\n                    queue.poll();\\n                    if (p1 < len1 && s1.charAt(p1) == s3.charAt(matched)) {\\n                        int key = (p1 + 1) * len3 + p2;\\n                        if (!set.contains(key)) {\\n                            set.add(key);\\n                            queue.offer(key);\\n                        }",
                "codeTag": "Java"
            },
            {
                "id": 31907,
                "title": "my-accepted-java-recursive-solution-for-interleaving-string",
                "content": "    public class Solution {\\n      \\tprivate static Set<Integer> visited; // The combination of i1, i2 has been visited and return false\\n    \\tpublic static boolean isInterleave(String s1, String s2, String s3) {\\n    \\t\\tif(s3.length() != s1.length() + s2.length())\\n    \\t\\t\\treturn false;\\n    \\t\\tvisited = new HashSet<Integer>();\\n    \\t\\treturn isInterleave(s1, 0, s2, 0, s3, 0);\\n    \\t}\\n    \\t\\n    \\tprivate static boolean isInterleave(String s1, int i1, String s2, int i2, String s3, int i3)\\n    \\t{\\t\\n    \\t\\tint hash = i1 * s3.length() + i2;\\n    \\t\\tif(visited.contains(hash))\\n    \\t\\t\\treturn false;\\n    \\t\\t\\n    \\t\\tif(i1 == s1.length())\\n    \\t\\t\\treturn s2.substring(i2).equals(s3.substring(i3));\\n    \\t\\tif(i2 == s2.length())\\n    \\t\\t\\treturn s1.substring(i1).equals(s3.substring(i3));\\n    \\t\\t\\n    \\t\\tif(s3.charAt(i3) == s1.charAt(i1) && isInterleave(s1, i1+1, s2, i2, s3, i3+1) ||\\n    \\t\\t   s3.charAt(i3) == s2.charAt(i2) && isInterleave(s1, i1, s2, i2+1, s3, i3+1))\\n    \\t\\t\\treturn true;\\n    \\t\\t\\n    \\t\\tvisited.add(hash);\\n    \\t\\treturn false;\\n    \\t}\\n    }\\n\\nThe private method isInterleave is the recursive method. it takes additional i1, i2, i3 as the start indexes of s1, s2, s3, so it solves the substring of s1, s2, s3 with those start indexes. \\n\\nThe recursion starting condition is i1, i2, i3 are set to 0, means it solves the whole string. \\n\\nin each recursion, it will just check the first character in s3 with s2 and s1, if it equals s1, it will increase i3 and i1 to solve remain, if remain return true, this recursion will also return true. Same logic for s2.\\n\\nThe end condition is when remain of either s1 or s2 is empty, then just compare remain of s3 with remain of s1 or s2, if they are equal, it will return true.\\n\\nA pure recursive solution will cause time limit exceed. We can optimize it by caching the false visited solutions in the visited set. That will short circuit many repeated search path.",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "class Solution {\\n      \\tprivate static Set<Integer> visited; // The combination of i1, i2 has been visited and return false\\n    \\tpublic static boolean isInterleave(String s1, String s2, String s3) {\\n    \\t\\tif(s3.length() != s1.length() + s2.length())\\n    \\t\\t\\treturn false;\\n    \\t\\tvisited = new HashSet<Integer>();\\n    \\t\\treturn isInterleave(s1, 0, s2, 0, s3, 0);\\n    \\t}",
                "codeTag": "Java"
            },
            {
                "id": 3956666,
                "title": "beats-100-dp-very-easy-code-c-java-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\njust explore all the option  -> take if current character is same with any of the string current character string 1 and string 2.\\n\\n[ Video in Hindi click here](https://youtube.com/@LetsCodeTogether72/videos)\\n\\nor link in my profile.Here,you can find any solution in playlists monthwise from june 2023 with detailed explanation.i upload daily leetcode solution video with short and precise explanation.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The `solve` function is a recursive helper function that takes the current indices `ind1` and `ind2` for strings `s1` and `s2` respectively, along with a memoization table `dp`. The purpose of this function is to check if it\\'s possible to create the remaining part of `s3` (starting from `ind1+ind2` position) using the remaining parts of `s1` (starting from `ind1` position) and `s2` (starting from `ind2` position).\\n\\n2. The base case for the recursion is when the sum of `ind1` and `ind2` equals the length of `s3`, meaning all characters of `s3` have been matched successfully. In this case, the function returns `true`.\\n\\n3. Before proceeding with the actual computation, the function checks if the result for the current `ind1` and `ind2` indices has already been computed and stored in the memoization table `dp`. If so, it returns the precomputed result.\\n\\n4. The function initializes a boolean variable `ans` to `false`. It then checks two conditions:\\n   - If `ind1` is within bounds of `s1` and the character at `s1[ind1]` matches the character at `s3[ind1+ind2]`, it recursively calls `solve` by moving the index `ind1` of `s1` one step forward.\\n   - If `ind2` is within bounds of `s2` and the character at `s2[ind2]` matches the character at `s3[ind1+ind2]`, it recursively calls `solve` by moving the index `ind2` of `s2` one step forward.\\n   \\n   The `ans` is updated using the bitwise OR operation (`|`) to retain any previous `true` value and to combine the results of the two recursive calls.\\n\\n5. Finally, the function stores the computed `ans` in the memoization table `dp` for the current `ind1` and `ind2` indices and returns this result.\\n\\n6. The `isInterleave` function is the main function that\\'s called to determine whether `s3` can be formed by interleaving characters from `s1` and `s2`. It first checks if the total length of `s1` and `s2` matches the length of `s3`. If not, it returns `false` as it\\'s impossible to form `s3`.\\n\\n7. It initializes a 2D vector `dp` to store the memoization table. The dimensions of this table are `(s1.size() + 1)` rows and `(s2.size() + 1)` columns, with all values initialized to `-1`.\\n\\n8. It then calls the `solve` function with initial indices `ind1` and `ind2` set to `0`, along with the memoization table `dp`. The result of this call indicates whether it\\'s possible to form `s3` by interleaving `s1` and `s2`.\\n\\n9. The `isInterleave` function returns the result obtained from the `solve` function.\\n\\n# Complexity\\n- Time complexity:$$O(n*m)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n*m)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n![Screenshot (313).png](https://assets.leetcode.com/users/images/e026a7e6-6e21-4d8c-a989-f527ccd022fa_1692933422.857026.png)\\n\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    bool solve(string &s1, string &s2, string &s3,int ind1,int ind2,vector<vector<int>>&dp)\\n{\\n    if(ind1+ind2==s3.size()) return 1;\\n    if(dp[ind1][ind2]!=-1) return dp[ind1][ind2];\\n    bool ans=0;        \\n    if(ind1<s1.size() && s1[ind1]==s3[ind1+ind2]) \\n    ans=(ans | solve(s1,s2,s3,ind1+1,ind2,dp));\\n    if(ind2<s2.size() && s2[ind2]==s3[ind1+ind2])\\n    ans=(ans | solve(s1,s2,s3,ind1,ind2+1,dp));\\n    return dp[ind1][ind2]=ans;\\n}\\n    bool isInterleave(string s1, string s2, string s3) {\\n         if(s1.size()+s2.size()!=s3.size()) return false;\\n    vector<vector<int>>dp(s1.size()+1,vector<int>(s2.size()+1,-1));\\n    return solve(s1,s2,s3,0,0,dp);\\n    }\\n};\\n```\\n```java []\\nclass Solution {\\n    public boolean solve(String s1, String s2, String s3, int ind1, int ind2, int[][] dp) {\\n        if (ind1 + ind2 == s3.length()) return true;\\n        if (dp[ind1][ind2] != -1) return dp[ind1][ind2] == 1;\\n        boolean ans = false;\\n        \\n        if (ind1 < s1.length() && s1.charAt(ind1) == s3.charAt(ind1 + ind2)) {\\n            ans |= solve(s1, s2, s3, ind1 + 1, ind2, dp);\\n        }\\n        \\n        if (ind2 < s2.length() && s2.charAt(ind2) == s3.charAt(ind1 + ind2)) {\\n            ans |= solve(s1, s2, s3, ind1, ind2 + 1, dp);\\n        }\\n        \\n        dp[ind1][ind2] = ans ? 1 : 0;\\n        return ans;\\n    }\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\\n        for (int i = 0; i <= s1.length(); i++) {\\n            Arrays.fill(dp[i], -1);\\n        }\\n        \\n        return solve(s1, s2, s3, 0, 0, dp);\\n    }\\n}\\n\\n```\\n```python []\\nclass Solution:\\n    def solve(self, s1: str, s2: str, s3: str, ind1: int, ind2: int, dp: List[List[int]]) -> bool:\\n        if ind1 + ind2 == len(s3):\\n            return True\\n        if dp[ind1][ind2] != -1:\\n            return dp[ind1][ind2] == 1\\n        ans = False\\n        \\n        if ind1 < len(s1) and s1[ind1] == s3[ind1 + ind2]:\\n            ans |= self.solve(s1, s2, s3, ind1 + 1, ind2, dp)\\n        \\n        if ind2 < len(s2) and s2[ind2] == s3[ind1 + ind2]:\\n            ans |= self.solve(s1, s2, s3, ind1, ind2 + 1, dp)\\n        \\n        dp[ind1][ind2] = 1 if ans else 0\\n        return ans\\n    \\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        \\n        dp = [[-1] * (len(s2) + 1) for _ in range(len(s1) + 1)]\\n        return self.solve(s1, s2, s3, 0, 0, dp)\\n\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    bool solve(string &s1, string &s2, string &s3,int ind1,int ind2,vector<vector<int>>&dp)\\n{\\n    if(ind1+ind2==s3.size()) return 1;\\n    if(dp[ind1][ind2]!=-1) return dp[ind1][ind2];\\n    bool ans=0;        \\n    if(ind1<s1.size() && s1[ind1]==s3[ind1+ind2]) \\n    ans=(ans | solve(s1,s2,s3,ind1+1,ind2,dp));\\n    if(ind2<s2.size() && s2[ind2]==s3[ind1+ind2])\\n    ans=(ans | solve(s1,s2,s3,ind1,ind2+1,dp));\\n    return dp[ind1][ind2]=ans;\\n}\\n    bool isInterleave(string s1, string s2, string s3) {\\n         if(s1.size()+s2.size()!=s3.size()) return false;\\n    vector<vector<int>>dp(s1.size()+1,vector<int>(s2.size()+1,-1));\\n    return solve(s1,s2,s3,0,0,dp);\\n    }\\n};\\n```\n```java []\\nclass Solution {\\n    public boolean solve(String s1, String s2, String s3, int ind1, int ind2, int[][] dp) {\\n        if (ind1 + ind2 == s3.length()) return true;\\n        if (dp[ind1][ind2] != -1) return dp[ind1][ind2] == 1;\\n        boolean ans = false;\\n        \\n        if (ind1 < s1.length() && s1.charAt(ind1) == s3.charAt(ind1 + ind2)) {\\n            ans |= solve(s1, s2, s3, ind1 + 1, ind2, dp);\\n        }\\n        \\n        if (ind2 < s2.length() && s2.charAt(ind2) == s3.charAt(ind1 + ind2)) {\\n            ans |= solve(s1, s2, s3, ind1, ind2 + 1, dp);\\n        }\\n        \\n        dp[ind1][ind2] = ans ? 1 : 0;\\n        return ans;\\n    }\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\\n        for (int i = 0; i <= s1.length(); i++) {\\n            Arrays.fill(dp[i], -1);\\n        }\\n        \\n        return solve(s1, s2, s3, 0, 0, dp);\\n    }\\n}\\n\\n```\n```python []\\nclass Solution:\\n    def solve(self, s1: str, s2: str, s3: str, ind1: int, ind2: int, dp: List[List[int]]) -> bool:\\n        if ind1 + ind2 == len(s3):\\n            return True\\n        if dp[ind1][ind2] != -1:\\n            return dp[ind1][ind2] == 1\\n        ans = False\\n        \\n        if ind1 < len(s1) and s1[ind1] == s3[ind1 + ind2]:\\n            ans |= self.solve(s1, s2, s3, ind1 + 1, ind2, dp)\\n        \\n        if ind2 < len(s2) and s2[ind2] == s3[ind1 + ind2]:\\n            ans |= self.solve(s1, s2, s3, ind1, ind2 + 1, dp)\\n        \\n        dp[ind1][ind2] = 1 if ans else 0\\n        return ans\\n    \\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        \\n        dp = [[-1] * (len(s2) + 1) for _ in range(len(s1) + 1)]\\n        return self.solve(s1, s2, s3, 0, 0, dp)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247459,
                "title": "easy-understanding-recursion-and-memoization-iterative",
                "content": "**Recursive Solution that gives TLE**\\n```\\nclass Solution {\\npublic:\\n    bool solve(string s1,string s2,string s3,int l1,int l2,int n)\\n    {\\n        if(l1<0&&l2<0&&n<0)\\n        {\\n            return true;\\n        }\\n        if(l1>=0&&s1[l1]==s3[n]&&l2>=0&&s2[l2]==s3[n])\\n        {\\n            return (solve(s1,s2,s3,l1-1,l2,n-1) || solve(s1,s2,s3,l1,l2-1,n-1));\\n        }\\n        else if(l1>=0&&s1[l1]==s3[n])\\n        {\\n            return solve(s1,s2,s3,l1-1,l2,n-1);\\n        }\\n        else if(l2>=0&&s2[l2]==s3[n])\\n        {\\n           return solve(s1,s2,s3,l1,l2-1,n-1);\\n        }\\n        return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size()!=s1.size()+s2.size())return false;\\n        return solve(s1,s2,s3,s1.size()-1,s2.size()-1,s3.length()-1);\\n        \\n    }\\n};\\n```\\n\\n**Memoization of the recusive solution: ACCEPTED**\\n\\n```\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    bool solve(string s1,string s2,string s3,int l1,int l2,int n)\\n    {\\n        if(l1>=0&&l2>=0 &&dp[l1][l2]!=-1)return dp[l1][l2];\\n        if(l1<0&&l2<0&&n<0)\\n        {\\n            return true;\\n        }\\n        \\n        if(l1>=0&&n>=0&&s1[l1]==s3[n]&&l2>=0&&s2[l2]==s3[n])\\n        {\\n            return dp[l1][l2]=(solve(s1,s2,s3,l1-1,l2,n-1) || solve(s1,s2,s3,l1,l2-1,n-1));\\n        }\\n        else if(l1>=0&&n>=0&&s1[l1]==s3[n])\\n        {\\n            return solve(s1,s2,s3,l1-1,l2,n-1);\\n        }\\n        else if(l2>=0&&n>=0&&s2[l2]==s3[n])\\n        {\\n           return solve(s1,s2,s3,l1,l2-1,n-1);\\n        }\\n        return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        memset(dp,-1,sizeof(dp));\\n        return solve(s1,s2,s3,s1.size()-1,s2.size()-1,s3.length()-1);\\n        \\n    }\\n};\\n\\n```\\n**Iterative Using Dp:**\\n\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n=s1.length();\\n        int m=s2.length();\\n        if(n+m!=s3.length())\\n            return 0;\\n        bool dp[n+1][m+1];\\n        memset(dp,0,sizeof(dp));\\n        \\n        for(int i=0;i<=n;i++)\\n        {\\n            for(int j=0;j<=m;j++)\\n            {\\n                if(i==0&&j==0)\\n                    dp[i][j]=true;\\n                else if(i==0)\\n                {\\n                    if(s2[j-1]==s3[j-1])\\n                        dp[i][j]=dp[i][j-1];\\n                }\\n                else if(j==0)\\n                {\\n                    if(s1[i-1]==s3[i-1])\\n                        dp[i][j]=dp[i-1][j];\\n                }\\n                else if(s1[i-1]==s3[i+j-1]&&s2[j-1]!=s3[i+j-1])\\n                    dp[i][j]=dp[i-1][j];\\n                \\n                else if(s1[i-1]!=s3[i+j-1]&&s2[j-1]==s3[i+j-1])\\n                    dp[i][j]=dp[i][j-1];\\n                \\n                else if(s1[i-1]==s3[i+j-1]&&s2[j-1]==s3[i+j-1])\\n                    dp[i][j]=(dp[i-1][j] || dp[i][j-1]);\\n            }\\n        }\\n        return dp[n][m];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool solve(string s1,string s2,string s3,int l1,int l2,int n)\\n    {\\n        if(l1<0&&l2<0&&n<0)\\n        {\\n            return true;\\n        }\\n        if(l1>=0&&s1[l1]==s3[n]&&l2>=0&&s2[l2]==s3[n])\\n        {\\n            return (solve(s1,s2,s3,l1-1,l2,n-1) || solve(s1,s2,s3,l1,l2-1,n-1));\\n        }\\n        else if(l1>=0&&s1[l1]==s3[n])\\n        {\\n            return solve(s1,s2,s3,l1-1,l2,n-1);\\n        }\\n        else if(l2>=0&&s2[l2]==s3[n])\\n        {\\n           return solve(s1,s2,s3,l1,l2-1,n-1);\\n        }\\n        return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size()!=s1.size()+s2.size())return false;\\n        return solve(s1,s2,s3,s1.size()-1,s2.size()-1,s3.length()-1);\\n        \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    bool solve(string s1,string s2,string s3,int l1,int l2,int n)\\n    {\\n        if(l1>=0&&l2>=0 &&dp[l1][l2]!=-1)return dp[l1][l2];\\n        if(l1<0&&l2<0&&n<0)\\n        {\\n            return true;\\n        }\\n        \\n        if(l1>=0&&n>=0&&s1[l1]==s3[n]&&l2>=0&&s2[l2]==s3[n])\\n        {\\n            return dp[l1][l2]=(solve(s1,s2,s3,l1-1,l2,n-1) || solve(s1,s2,s3,l1,l2-1,n-1));\\n        }\\n        else if(l1>=0&&n>=0&&s1[l1]==s3[n])\\n        {\\n            return solve(s1,s2,s3,l1-1,l2,n-1);\\n        }\\n        else if(l2>=0&&n>=0&&s2[l2]==s3[n])\\n        {\\n           return solve(s1,s2,s3,l1,l2-1,n-1);\\n        }\\n        return false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        memset(dp,-1,sizeof(dp));\\n        return solve(s1,s2,s3,s1.size()-1,s2.size()-1,s3.length()-1);\\n        \\n    }\\n};\\n\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n=s1.length();\\n        int m=s2.length();\\n        if(n+m!=s3.length())\\n            return 0;\\n        bool dp[n+1][m+1];\\n        memset(dp,0,sizeof(dp));\\n        \\n        for(int i=0;i<=n;i++)\\n        {\\n            for(int j=0;j<=m;j++)\\n            {\\n                if(i==0&&j==0)\\n                    dp[i][j]=true;\\n                else if(i==0)\\n                {\\n                    if(s2[j-1]==s3[j-1])\\n                        dp[i][j]=dp[i][j-1];\\n                }\\n                else if(j==0)\\n                {\\n                    if(s1[i-1]==s3[i-1])\\n                        dp[i][j]=dp[i-1][j];\\n                }\\n                else if(s1[i-1]==s3[i+j-1]&&s2[j-1]!=s3[i+j-1])\\n                    dp[i][j]=dp[i-1][j];\\n                \\n                else if(s1[i-1]!=s3[i+j-1]&&s2[j-1]==s3[i+j-1])\\n                    dp[i][j]=dp[i][j-1];\\n                \\n                else if(s1[i-1]==s3[i+j-1]&&s2[j-1]==s3[i+j-1])\\n                    dp[i][j]=(dp[i-1][j] || dp[i][j-1]);\\n            }\\n        }\\n        return dp[n][m];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247753,
                "title": "java-dfs-with-stack-and-memoization",
                "content": "**Here\\'s the overall gist:**\\n* The stack will be used in a similar fashion to a depth-first search. It\\'ll store a series of coordinates corresponding to the indexes of characters in `s1` and `s2`, and traversal will be based on comparison with `s3`.\\n* But wait. These searches often involve graphs, nodes, and edges. How does that apply here?\\n\\n**Here\\'s an illustration of the graph we\\'re traversing:**\\nI\\'ve used example 1 from the problem description here. The solution provided by the example is in bold.\\n![image](https://assets.leetcode.com/users/images/9c0f265e-7eab-44ad-b130-70e13cac1743_1622658517.0783722.png)\\nWith this graph, we can only traverse down and right. A traversal is essentially \"building\" `s3` from `s1` and `s2`: going right corresponds to adding a character from `s1`, and going down adds a character from `s2`. You can think of a coordinate (i, j) representing the ith character in `s1`, and the jth character in `s2`.\\n\\nHow do we know which way to go? We check the next character of `s3`. If it matches the current character at `s1`, we can go right. And if it matches the current character at `s2`, we can go down. We keep going until we can reach the end states for both `s1` and `s2`, or the bottom-rightmost node in our grid, or until we get stuck somewhere.\\n\\nNotice how there are multiple paths we can go in. This is because of the fact that it\\'s sometimes possible that we can pick a valid character from both `s1` and `s2`. This is why we need to perform a search on the entire graph, and this can be done by either using recursion (which is what a lot of the other solutions use), or a stack.\\n\\n**Our overall algorithm:**\\nHere\\'s a brief recap of our algorithm. At a worst case scenario, we end up visiting every node. This gives us a time complexity of **O(m * n)**, where m and n are the lengths of each string.\\n* Add (0, 0) to our stack.\\n* Perform a DFS on the graph. With a stack, this is what it looks like:\\n\\t* Pop the topmost coordinates (i, j) off the stack and record it in our `visited` boolean matrix.\\n\\t* Check if our coordinates are at the bottom right, and return `true` if so.\\n\\t* Otherwise, check if we can traverse further.\\n\\t\\t* If the ith character in `s1` matches the next character in `s3` and if (i + 1, j) hasn\\'t been visited, push that onto the stack.\\n\\t\\t* If the jth character in `s2` matches the next character in `s3` and if (i, j + 1) hasn\\'t been visited, push that onto the stack.\\n\\t* Rinse and repeat. If we empty out the stack, our search is unsuccessful so we return `false`.\\n\\nHere\\'s a commented version of my code in Java. I encourage you to give it a shot first :)\\n```\\nimport java.util.Stack;\\n\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length())\\n            return false;\\n        \\n        // coordinates are of the form [i, j], corresponding to the indexes in s1, s2\\n        Stack<int[]> stack = new Stack<int[]>();\\n        stack.push(new int[] {0, 0});\\n\\t\\t\\n        boolean[][] visited = new boolean[s1.length() + 1][s2.length() + 1];\\n        \\n        while (!stack.empty()) {\\n            int[] indexes = stack.pop();\\n            int i = indexes[0], j = indexes[1];\\n            visited[i][j] = true;\\n\\t\\t\\t\\n\\t\\t\\t// we\\'re at the bottom-rightmost coordinate; we\\'re done!\\n            if (i == s1.length() && j == s2.length())\\n                return true;\\n            \\n\\t\\t\\t// check if we can increment i (traveling right on the graph)\\n            if (i < s1.length() && !visited[i + 1][j] && s1.charAt(i) == s3.charAt(i + j))\\n                stack.push(new int[] {i + 1, j});\\n            \\n\\t\\t\\t// check if we can increment j (traveling down on the graph)\\n            if (j < s2.length() && !visited[i][j + 1] && s2.charAt(j) == s3.charAt(i + j))\\n                stack.push(new int[] {i, j + 1});\\n        }\\n        \\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack",
                    "Depth-First Search"
                ],
                "code": "```\\nimport java.util.Stack;\\n\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length())\\n            return false;\\n        \\n        // coordinates are of the form [i, j], corresponding to the indexes in s1, s2\\n        Stack<int[]> stack = new Stack<int[]>();\\n        stack.push(new int[] {0, 0});\\n\\t\\t\\n        boolean[][] visited = new boolean[s1.length() + 1][s2.length() + 1];\\n        \\n        while (!stack.empty()) {\\n            int[] indexes = stack.pop();\\n            int i = indexes[0], j = indexes[1];\\n            visited[i][j] = true;\\n\\t\\t\\t\\n\\t\\t\\t// we\\'re at the bottom-rightmost coordinate; we\\'re done!\\n            if (i == s1.length() && j == s2.length())\\n                return true;\\n            \\n\\t\\t\\t// check if we can increment i (traveling right on the graph)\\n            if (i < s1.length() && !visited[i + 1][j] && s1.charAt(i) == s3.charAt(i + j))\\n                stack.push(new int[] {i + 1, j});\\n            \\n\\t\\t\\t// check if we can increment j (traveling down on the graph)\\n            if (j < s2.length() && !visited[i][j + 1] && s2.charAt(j) == s3.charAt(i + j))\\n                stack.push(new int[] {i, j + 1});\\n        }\\n        \\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2250195,
                "title": "java-4-solutions-recursion-memoization-dp",
                "content": "\\n**Solution 1: Brute Force (Recursion) - Time Limit Exceeded**\\n\\n```\\n// Time complexity: O(2^(m+n))\\n// Space complexity: O(m+n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\t\\n\\treturn helper(s1, s2, s3, 0, 0);\\n}\\n\\npublic boolean helper(String s1, String s2, String s3, int i, int j) {\\n\\tif(i+j == s3.length())\\n\\t\\treturn true;\\n\\t\\n\\tif(i < s1.length() && s3.charAt(i+j) == s1.charAt(i)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i+1, j);\\n\\t\\tif(flag)\\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\tif(j < s2.length() && s3.charAt(i+j) == s2.charAt(j)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i, j+1);\\n\\t\\tif(flag)\\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n```\\n\\n**Solution 2: Top Down DP (Recursion + Memoization)**\\n\\n```\\n// Time complexity: O(m*n)\\n// Space complexity: O(m*n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tBoolean[][] memo = new Boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\treturn helper(s1, s2, s3, 0, 0, memo);\\n}\\n\\npublic boolean helper(String s1, String s2, String s3, int i, int j, Boolean[][] memo) {\\n\\tif(i+j == s3.length())\\n\\t\\treturn true;\\n\\n\\tif(memo[i][j] != null)\\n\\t\\treturn memo[i][j];\\n\\n\\t if(i < s1.length() && s3.charAt(i+j) == s1.charAt(i)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i+1, j, memo);\\n\\t\\tmemo[i][j] = flag;\\n\\t\\tif(flag) \\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\tif(j < s2.length() && s3.charAt(i+j) == s2.charAt(j)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i, j+1, memo);\\n\\t\\tmemo[i][j] = flag;\\n\\t\\tif(flag) \\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\tmemo[i][j] = false;\\n\\treturn false;\\n}\\n```\\n\\n**Solution 3: Bottom UP DP (2D)**\\n\\n```\\n// Time complexity: O(m*n)\\n// Space complexity: O(m*n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[][] = new boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[i][j] = true;\\n\\t\\t\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t\\t|| (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s1.length()][s2.length()];\\n}\\n```\\n\\n**Solution 4: Bottom UP DP (1D)**\\n\\n```\\n// Time complexity: O(m*n)\\n// Space complexity: O(n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[] = new boolean[s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[j] = true;\\n\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t|| (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s2.length()];\\n}\\n```\\n\\nPlease upvote if you find it useful.",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\n// Time complexity: O(2^(m+n))\\n// Space complexity: O(m+n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\t\\n\\treturn helper(s1, s2, s3, 0, 0);\\n}\\n\\npublic boolean helper(String s1, String s2, String s3, int i, int j) {\\n\\tif(i+j == s3.length())\\n\\t\\treturn true;\\n\\t\\n\\tif(i < s1.length() && s3.charAt(i+j) == s1.charAt(i)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i+1, j);\\n\\t\\tif(flag)\\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\tif(j < s2.length() && s3.charAt(i+j) == s2.charAt(j)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i, j+1);\\n\\t\\tif(flag)\\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n```\n```\\n// Time complexity: O(m*n)\\n// Space complexity: O(m*n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tBoolean[][] memo = new Boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\treturn helper(s1, s2, s3, 0, 0, memo);\\n}\\n\\npublic boolean helper(String s1, String s2, String s3, int i, int j, Boolean[][] memo) {\\n\\tif(i+j == s3.length())\\n\\t\\treturn true;\\n\\n\\tif(memo[i][j] != null)\\n\\t\\treturn memo[i][j];\\n\\n\\t if(i < s1.length() && s3.charAt(i+j) == s1.charAt(i)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i+1, j, memo);\\n\\t\\tmemo[i][j] = flag;\\n\\t\\tif(flag) \\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\tif(j < s2.length() && s3.charAt(i+j) == s2.charAt(j)) {\\n\\t\\tboolean flag = helper(s1, s2, s3, i, j+1, memo);\\n\\t\\tmemo[i][j] = flag;\\n\\t\\tif(flag) \\n\\t\\t\\treturn true;\\n\\t}\\n\\n\\tmemo[i][j] = false;\\n\\treturn false;\\n}\\n```\n```\\n// Time complexity: O(m*n)\\n// Space complexity: O(m*n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[][] = new boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[i][j] = true;\\n\\t\\t\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t\\t|| (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s1.length()][s2.length()];\\n}\\n```\n```\\n// Time complexity: O(m*n)\\n// Space complexity: O(n)\\n\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[] = new boolean[s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[j] = true;\\n\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t|| (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s2.length()];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 32076,
                "title": "simple-python-dp-solution",
                "content": "Keep two points on `s1` and `s2` and traverse `s3`, the current char in `s3` is either from `s1` or `s2` or both. Use a **set** to record all possibility and dp on.\\n\\nThe key here is to use a set to record the pointers, because duplicates are possible, using a list cause TLE.\\n     \\n    def isInterleave(self, s1, s2, s3):\\n        l1, l2 = len(s1), len(s2)\\n        if l1 + l2 != len(s3):\\n            return False\\n        \\n        last = set([(0, 0)])\\n        for char in s3:\\n            current = set()\\n            for i, j in last:\\n                if i < l1 and s1[i] == char:\\n                    current.add((i + 1, j))\\n                if j < l2 and s2[j] == char:\\n                    current.add((i, j + 1))\\n            if not current:\\n                return False\\n            last = current\\n        return True",
                "solutionTags": [
                    "Python"
                ],
                "code": "Keep two points on `s1` and `s2` and traverse `s3`, the current char in `s3` is either from `s1` or `s2` or both. Use a **set** to record all possibility and dp on.\\n\\nThe key here is to use a set to record the pointers, because duplicates are possible, using a list cause TLE.\\n     \\n    def isInterleave(self, s1, s2, s3):\\n        l1, l2 = len(s1), len(s2)\\n        if l1 + l2 != len(s3):\\n            return False\\n        \\n        last = set([(0, 0)])\\n        for char in s3:\\n            current = set()\\n            for i, j in last:\\n                if i < l1 and s1[i] == char:\\n                    current.add((i + 1, j))\\n                if j < l2 and s2[j] == char:\\n                    current.add((i, j + 1))\\n            if not current:\\n                return False\\n            last = current\\n        return True",
                "codeTag": "Python3"
            },
            {
                "id": 31989,
                "title": "share-my-analysis-of-this-problem-from-recursion-to-dp-java",
                "content": "public class Solution {\\n\\nFor this problem, we are trying to see if we can obtain s3 by interleaving s1 and s2. In other words, we need to figure out where each char of s3 comes from, s1 or s2 or nowhere. If we can find a way that all of the chars of s3 comes from s1 or s2, then we can form s3 by interleaving s1 and s2, and thus return true; otherwise we return false. For example, if s1 = abc, s2 = bcd, s3 = abbccd, then s3 can be formed by \"001011\" or \"010101\". (0 represents char comes from s1, and 1 represents char comes from s2). \\n\\nIt is easy to come up with a solution using recursion.\\n\\npublic class Solution {\\n\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1 == null || s1.length() == 0) {return s2.equals(s3);}\\n        if(s2 == null || s2.length() == 0) {return s1.equals(s3);}\\n        if(s3.charAt(0) == s1.charAt(0) && s3.charAt(0) == s2.charAt(0)){\\n            return isInterleave(s1.substring(1), s2, s3.substring(1)) || isInterleave(s1, s2.substring(1), s3.substring(1));\\n        }\\n        else if(s3.charAt(0) == s1.charAt(0)){\\n            return isInterleave(s1.substring(1), s2, s3.substring(1));\\n        }\\n        else if(s3.charAt(0) == s2.charAt(0)){\\n            return isInterleave(s1, s2.substring(1), s3.substring(1));\\n        }\\n        return false;\\n    }\\n\\n}\\n\\nBut this solution takes exponential time, because each position have two choices, a length of n of s3 would have 2^n choices need to check. Thus, we think of  DP, because it can reduce exponential time to polynomial time, and it applies to the problem that have many subproblems. \\n\\nWe create a boolean table called pathTable, and each cell of pathTable[i][j] represents whether we can form s3.substring(0, i+j) using the first s1.substring(0, i) and s2.substring(0, j). Thus, if pathTable[pathTable.length - 1][pathTable[0].length - 1] is true, it means there is a path from pathTable[0][0] to it. In other words, s3 can be formed by s1 and s2. \\n\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if((s1 == null || s1.length() == 0) && (s2 == null || s2.length() == 0)){ \\n            return s3 == null || s3.length() == 0;\\n        }\\n        if(s1 == null || s1.length() == 0){ return s2.equals(s3);}\\n        if(s2 == null || s2.length() == 0){ return s1.equals(s3);}\\n        if(s1.length() + s2.length() != s3.length()){ return false;}\\n        \\n        boolean pathTable[][] = new boolean[s1.length() + 1][s2.length() + 1];// would be false by default.\\n        pathTable[0][0] = true;\\n        \\n        for(int i = 1; i < pathTable.length; i++){\\n            if(pathTable[i-1][0] && s1.charAt(i-1) == s3.charAt(i-1)){\\n                pathTable[i][0] = true;\\n            }\\n        }\\n        for(int j = 1; j < pathTable[0].length; j++){\\n            if(pathTable[0][j-1] && s2.charAt(j-1) == s3.charAt(j-1)){\\n                pathTable[0][j] = true;\\n            }\\n        }\\n        for(int i = 1; i < pathTable.length; i++){\\n            for(int j = 1; j < pathTable[0].length; j++){\\n                if(pathTable[i-1][j] && s1.charAt(i-1) == s3.charAt(i+j-1)){\\n                    pathTable[i][j] = true;\\n                }\\n                else if(pathTable[i][j-1] && s2.charAt(j-1) == s3.charAt(i+j-1)){\\n                    pathTable[i][j] = true;\\n                }\\n            }\\n        }\\n        return pathTable[pathTable.length - 1][pathTable[0].length - 1];\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\n\\nFor this problem, we are trying to see if we can obtain s3 by interleaving s1 and s2. In other words, we need to figure out where each char of s3 comes from, s1 or s2 or nowhere. If we can find a way that all of the chars of s3 comes from s1 or s2, then we can form s3 by interleaving s1 and s2, and thus return true; otherwise we return false. For example, if s1 = abc, s2 = bcd, s3 = abbccd, then s3 can be formed by \"001011\" or \"010101\". (0 represents char comes from s1, and 1 represents char comes from s2). \\n\\nIt is easy to come up with a solution using recursion.\\n\\npublic class Solution {\\n\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1 == null || s1.length() == 0) {return s2.equals(s3);}",
                "codeTag": "Java"
            },
            {
                "id": 2248599,
                "title": "memoization-tabulation-space-optimization-c-dp-all-three-approach",
                "content": "# **C++ DP All Three Approach**\\n# 1. **C++ Memoization Solution**\\n```\\nclass Solution {\\npublic:\\n    bool rec(string s1,string s2,string s3,int i,int j,int k,vector<vector<int>>&dp){\\n        if(k==s3.size()&&i==s1.size()&&j==s2.size())return true;\\n        if(i>s1.size()||j>s2.size())return false;\\n        if(dp[i][j]!=-1)return dp[i][j];\\n        if(s3[k]==s2[j]&&s3[k]==s1[i]){\\n            return dp[i][j]= rec(s1,s2,s3,i+1,j,k+1,dp)||rec(s1,s2,s3,i,j+1,k+1,dp);\\n        }\\n        else if(s1[i]==s3[k]){\\n            return dp[i][j]= rec(s1,s2,s3,i+1,j,k+1,dp);\\n        }\\n        else if(s3[k]==s2[j]){\\n            return dp[i][j]= rec(s1,s2,s3,i,j+1,k+1,dp);\\n        }\\n        else{\\n            return dp[i][j]= false;\\n        }\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<vector<int>>dp(s1.size()+1,(vector<int>(s2.size()+1,-1)));\\n        return rec(s1,s2,s3,0,0,0,dp);\\n    }\\n};\\n```\\n# 2. **C++ Solution of DP Tabulation**\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<vector<int>>dp(s1.size()+1,(vector<int>(s2.size()+1,0)));\\n        if(s3.size()!=s1.size()+s2.size()){\\n            return false;\\n        }\\n        for(int i=s1.size();i>=0;i--){\\n            for(int j=s2.size();j>=0;j--){\\n                int k=i+j;\\n                if(i==s1.size()&&j==s2.size()){\\n                    dp[i][j]=1;\\n                }\\n                else if(s3[k]==s2[j]&&s3[k]==s1[i]){\\n                    dp[i][j]= dp[i+1][j]||dp[i][j+1];\\n                }\\n                else if(s1[i]==s3[k]){\\n                    dp[i][j]= dp[i+1][j];\\n                }\\n                else if(s3[k]==s2[j]){\\n                    dp[i][j]= dp[i][j+1];\\n                }\\n                else{\\n                    dp[i][j]= false;\\n                }  \\n            }\\n        }\\n        return dp[0][0];\\n    }\\n};\\n```\\n# 3. **C++ Solution of Space Optimization**\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<int>cur(s2.size()+1,0),prev(s2.size()+1,0);\\n        if(s3.size()!=s1.size()+s2.size()){\\n            return false;\\n        }\\n        for(int i=s1.size();i>=0;i--){\\n            for(int j=s2.size();j>=0;j--){\\n                int k=i+j;\\n                if(i==s1.size()&&j==s2.size()){\\n                    cur[j]=1;\\n                }\\n                else if(s3[k]==s2[j]&&s3[k]==s1[i]){\\n                    cur[j]= prev[j]||cur[j+1];\\n                }\\n                else if(s1[i]==s3[k]){\\n                    cur[j]= prev[j];\\n                }\\n                else if(s3[k]==s2[j]){\\n                    cur[j]= cur[j+1];\\n                }\\n                else{\\n                    cur[j]= false;\\n                }  \\n            }\\n            prev=cur;\\n        }\\n        return cur[0];\\n    }\\n};\\n```\\n# **Please Share and Upvote**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool rec(string s1,string s2,string s3,int i,int j,int k,vector<vector<int>>&dp){\\n        if(k==s3.size()&&i==s1.size()&&j==s2.size())return true;\\n        if(i>s1.size()||j>s2.size())return false;\\n        if(dp[i][j]!=-1)return dp[i][j];\\n        if(s3[k]==s2[j]&&s3[k]==s1[i]){\\n            return dp[i][j]= rec(s1,s2,s3,i+1,j,k+1,dp)||rec(s1,s2,s3,i,j+1,k+1,dp);\\n        }\\n        else if(s1[i]==s3[k]){\\n            return dp[i][j]= rec(s1,s2,s3,i+1,j,k+1,dp);\\n        }\\n        else if(s3[k]==s2[j]){\\n            return dp[i][j]= rec(s1,s2,s3,i,j+1,k+1,dp);\\n        }\\n        else{\\n            return dp[i][j]= false;\\n        }\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<vector<int>>dp(s1.size()+1,(vector<int>(s2.size()+1,-1)));\\n        return rec(s1,s2,s3,0,0,0,dp);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<vector<int>>dp(s1.size()+1,(vector<int>(s2.size()+1,0)));\\n        if(s3.size()!=s1.size()+s2.size()){\\n            return false;\\n        }\\n        for(int i=s1.size();i>=0;i--){\\n            for(int j=s2.size();j>=0;j--){\\n                int k=i+j;\\n                if(i==s1.size()&&j==s2.size()){\\n                    dp[i][j]=1;\\n                }\\n                else if(s3[k]==s2[j]&&s3[k]==s1[i]){\\n                    dp[i][j]= dp[i+1][j]||dp[i][j+1];\\n                }\\n                else if(s1[i]==s3[k]){\\n                    dp[i][j]= dp[i+1][j];\\n                }\\n                else if(s3[k]==s2[j]){\\n                    dp[i][j]= dp[i][j+1];\\n                }\\n                else{\\n                    dp[i][j]= false;\\n                }  \\n            }\\n        }\\n        return dp[0][0];\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<int>cur(s2.size()+1,0),prev(s2.size()+1,0);\\n        if(s3.size()!=s1.size()+s2.size()){\\n            return false;\\n        }\\n        for(int i=s1.size();i>=0;i--){\\n            for(int j=s2.size();j>=0;j--){\\n                int k=i+j;\\n                if(i==s1.size()&&j==s2.size()){\\n                    cur[j]=1;\\n                }\\n                else if(s3[k]==s2[j]&&s3[k]==s1[i]){\\n                    cur[j]= prev[j]||cur[j+1];\\n                }\\n                else if(s1[i]==s3[k]){\\n                    cur[j]= prev[j];\\n                }\\n                else if(s3[k]==s2[j]){\\n                    cur[j]= cur[j+1];\\n                }\\n                else{\\n                    cur[j]= false;\\n                }  \\n            }\\n            prev=cur;\\n        }\\n        return cur[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1248268,
                "title": "js-python-java-c-easy-dp-solution-w-explanation",
                "content": "*(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful,* ***please upvote*** *this post.)*\\n\\n---\\n\\n#### ***Idea:***\\n\\nIf we consider a matrix with indices (**i**) for **s1** on one axis and indices (**j**) for **s2** on the other, then a successful **s3** can be considered a path moving from the top left to the bottom right. At each point, we either move downward (**i++**) by choosing the next letter from **s1** or rightward (**j++**) by choosing the next letter from **s2**.\\n\\nAll that remains, then, is to see which vertices are possible given **s3**, and which ones are not. To do that, we can use a **dynamic programming** (**DP**) approach. Normally, we would establish a matrix as described above, along with a buffer row/column at the start of the matrix to provide space for previous row/column validation checks for the leading edges of our iteration. An additional row/column at the end of the matrix is also needed, since our final checks will occur only _after_ the strings are completed.\\n\\nWe can reduce the **space complexity** of this solution from **O(N * M)** to just **O(M)**, however, if rather than building a full DP matrix, we instead only keep the current row of the matrix (**dp**) in memory, reiterating through it for each row. The **left** value (**dp[j-1]**) will already have been calculated, and the **up** value (**dp[j]**) will not yet have been overwritten in the current cell, so it will still represent the value of the cell from the previous row.\\n\\nWe should also remember to fill **dp[1]** with a **true** (or **1**) value, representing a valid vertex at the starting position of our iteration path.\\n\\nFrom there, we can iterate through the rows, building upon previously completed entries to check the validity of the current cell. If the cell \"above\" (the not-yet-overwritten **dp[i]** represents the same index from the row above) is valid (**true** or **1**) and the corresponding characters of **s1** and **s3** match, then the current cell is valid. Similarly, if the cell to the left is valid and the corresponding characters of **s2** and **s3** match, then the current cell is valid.\\n\\nOnce we\\'ve finished iterating through **i** and **j**, a valid value in the last cell of **dp** will indicate that a valid path exists that matches **s3**, so we can just **return** the contents of that cell.\\n\\n - _**Time Complexity: O(N * M)** where **N** is the length of **s1** and **M** is the length of **s2**_\\n - _**Space Complexity: O(M)** for **dp**_\\n\\n---\\n\\n#### ***Javascript Code:***\\n\\nThe best result for the code below is **72ms / 38.7MB** (beats 99% / 93%).\\n```javascript\\nvar isInterleave = function(s1, s2, s3) {\\n    let n = s1.length + 2, m = s2.length + 2\\n    if (n + m - 4 !== s3.length) return false\\n    let dp = new Uint8Array(m)\\n    dp[1] = 1\\n    for (let i = 1; i < n; i++)\\n        for (let j = 1; j < m; j++) {\\n            let up = dp[j] && s1[i-2] === s3[j+i-3],\\n                left = dp[j-1] && s2[j-2] === s3[j+i-3]\\n            dp[j] = up || left\\n        }\\n    return dp[m-1]\\n};\\n```\\n\\n---\\n\\n#### ***Python Code:***\\n\\nThe best result for the code below is **36ms / 14.2MB** (beats 61% / 96%).\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        n, m = len(s1) + 2, len(s2) + 2\\n        if n + m - 4 != len(s3): return False\\n        dp = [0] * m\\n        dp[1] = 1\\n        for i in range(1, n):\\n            for j in range(1, m):\\n                up = dp[j] and (i < 2 or s1[i-2] == s3[j+i-3])\\n                left = dp[j-1] and (j < 2 or s2[j-2] == s3[j+i-3])\\n                dp[j] = up or left\\n        return dp[-1]\\n```\\n\\n---\\n\\n#### ***Java Code:***\\n\\nThe best result for the code below is **2ms / 36.7MB** (beats 80% / 98%).\\n```java\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        char[] sc1 = s1.toCharArray(), sc2 = s2.toCharArray(), sc3 = s3.toCharArray();\\n        if (n + m - 4 != s3.length()) return false;\\n        boolean[] dp = new boolean[m];\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                boolean up = dp[j] && (i < 2 || sc1[i-2] == sc3[j+i-3]),\\n                    left =dp[j-1] && (j < 2 || sc2[j-2] == sc3[j+i-3]);\\n                dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n}\\n```\\n\\n---\\n\\n#### ***C++ Code:***\\n\\nThe best result for the code below is **0ms / 6.6MB** (beats 100% / 61%).\\n```c++\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        if (n + m - 4 != s3.length()) return false;\\n        vector<bool> dp(m);\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                bool up = dp[j] && (i < 2 || s1[i-2] == s3[j+i-3]),\\n                    left = dp[j-1] && (j < 2 || s2[j-2] == s3[j+i-3]);\\n               dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "JavaScript"
                ],
                "code": "```javascript\\nvar isInterleave = function(s1, s2, s3) {\\n    let n = s1.length + 2, m = s2.length + 2\\n    if (n + m - 4 !== s3.length) return false\\n    let dp = new Uint8Array(m)\\n    dp[1] = 1\\n    for (let i = 1; i < n; i++)\\n        for (let j = 1; j < m; j++) {\\n            let up = dp[j] && s1[i-2] === s3[j+i-3],\\n                left = dp[j-1] && s2[j-2] === s3[j+i-3]\\n            dp[j] = up || left\\n        }\\n    return dp[m-1]\\n};\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        n, m = len(s1) + 2, len(s2) + 2\\n        if n + m - 4 != len(s3): return False\\n        dp = [0] * m\\n        dp[1] = 1\\n        for i in range(1, n):\\n            for j in range(1, m):\\n                up = dp[j] and (i < 2 or s1[i-2] == s3[j+i-3])\\n                left = dp[j-1] and (j < 2 or s2[j-2] == s3[j+i-3])\\n                dp[j] = up or left\\n        return dp[-1]\\n```\n```java\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        char[] sc1 = s1.toCharArray(), sc2 = s2.toCharArray(), sc3 = s3.toCharArray();\\n        if (n + m - 4 != s3.length()) return false;\\n        boolean[] dp = new boolean[m];\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                boolean up = dp[j] && (i < 2 || sc1[i-2] == sc3[j+i-3]),\\n                    left =dp[j-1] && (j < 2 || sc2[j-2] == sc3[j+i-3]);\\n                dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n}\\n```\n```c++\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        if (n + m - 4 != s3.length()) return false;\\n        vector<bool> dp(m);\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                bool up = dp[j] && (i < 2 || s1[i-2] == s3[j+i-3]),\\n                    left = dp[j-1] && (j < 2 || s2[j-2] == s3[j+i-3]);\\n               dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2249641,
                "title": "c-based-on-aditya-verma-concept-recursion-memoization",
                "content": "**Plz Upvote!**! You will loose nothing ):):\\n\\n```\\nclass Solution {\\n  public:\\n    int dp[102][102];\\n  bool solve(string s1, string s2, string s3, int x, int y, int z) {\\n    if (x < 0 and y < 0 and z < 0) return true;\\n    if (x >= 0 and y >= 0 and dp[x][y] != -1) return dp[x][y];\\n    if (x >= 0 and s1[x] == s3[z] and y >= 0 and s2[y] == s3[z])\\n      return dp[x][y] = solve(s1, s2, s3, x - 1, y, z - 1) or solve(s1, s2, s3, x, y - 1, z - 1);\\n    else if (x >= 0 and s1[x] == s3[z])\\n      return solve(s1, s2, s3, x - 1, y, z - 1);\\n    else if (y >= 0 and s2[y] == s3[z])\\n      return solve(s1, s2, s3, x, y - 1, z - 1);\\n    else\\n      return false;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n    memset(dp, -1, sizeof(dp));\\n    int x = s1.size(), y = s2.size(), z = s3.size();\\n    if (x + y != z) return false;\\n    return solve(s1, s2, s3, x - 1, y - 1, z - 1);\\n  }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "class Solution {\\n  public:\\n    int dp[102][102];\\n  bool solve(string s1, string s2, string s3, int x, int y, int z) {\\n    if (x < 0 and y < 0 and z < 0) return true;\\n    if (x >= 0 and y >= 0 and dp[x][y] != -1) return dp[x][y];\\n    if (x >= 0 and s1[x] == s3[z] and y >= 0 and s2[y] == s3[z])\\n      return dp[x][y] = solve(s1, s2, s3, x - 1, y, z - 1) or solve(s1, s2, s3, x, y - 1, z - 1);\\n    else if (x >= 0 and s1[x] == s3[z])\\n      return solve(s1, s2, s3, x - 1, y, z - 1);\\n    else if (y >= 0 and s2[y] == s3[z])\\n      return solve(s1, s2, s3, x, y - 1, z - 1);\\n    else\\n      return false;\\n  }",
                "codeTag": "Java"
            },
            {
                "id": 1246668,
                "title": "c-super-short-and-easy-dp-clean-solutions-1d-2d",
                "content": "**Solution I - Using 2D Dynamic Programming Array**\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        #define S1 (dp[i-1][j] && s1[i-1] == s3[i+j-1])\\n        #define S2 (dp[i][j-1] && s2[j-1] == s3[i+j-1])\\n        \\n        int n = s1.size(), m = s2.size(), k = s3.size();\\n        if (n + m != k) return false;\\n        vector<vector<bool>> dp(n+1, vector<bool>(m+1, 0));\\n        \\n        for (int i = 0; i <= n; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                dp[i][j] = (i==0 && j==0) ? true : i==0 ? S2 : j==0 ? S1 : S1 || S2;\\n            }\\n        }\\n\\n        return dp[n][m];\\n    }\\n};\\n```\\n****\\n**Solution II - Using 1D Array**\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        #define S1 (dp[j] && s1[i-1] == s3[i+j-1])\\n        #define S2 (dp[j-1] && s2[j-1] == s3[i+j-1])\\n        \\n        int n = s1.size(), m = s2.size(), k = s3.size();\\n        if (n + m != k) return false;\\n        vector<bool> dp(m+1, 0);\\n        \\n        for (int i = 0; i <= n; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                dp[j] = (i==0 && j==0) ? true : i==0 ? S2 : j==0 ? S1 : S1 || S2;\\n            }\\n        }\\n\\n        return dp[m];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        #define S1 (dp[i-1][j] && s1[i-1] == s3[i+j-1])\\n        #define S2 (dp[i][j-1] && s2[j-1] == s3[i+j-1])\\n        \\n        int n = s1.size(), m = s2.size(), k = s3.size();\\n        if (n + m != k) return false;\\n        vector<vector<bool>> dp(n+1, vector<bool>(m+1, 0));\\n        \\n        for (int i = 0; i <= n; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                dp[i][j] = (i==0 && j==0) ? true : i==0 ? S2 : j==0 ? S1 : S1 || S2;\\n            }\\n        }\\n\\n        return dp[n][m];\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        #define S1 (dp[j] && s1[i-1] == s3[i+j-1])\\n        #define S2 (dp[j-1] && s2[j-1] == s3[i+j-1])\\n        \\n        int n = s1.size(), m = s2.size(), k = s3.size();\\n        if (n + m != k) return false;\\n        vector<bool> dp(m+1, 0);\\n        \\n        for (int i = 0; i <= n; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                dp[j] = (i==0 && j==0) ? true : i==0 ? S2 : j==0 ? S1 : S1 || S2;\\n            }\\n        }\\n\\n        return dp[m];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2249302,
                "title": "c-3-approaches-dynamic-programming-easy-explaination",
                "content": "**Interleaving String**\\n<img src=\"https://assets.leetcode.com/users/images/c226f83a-6580-4772-87e7-bda924c43e8e_1657173986.7404857.png?raw=true\" width=\"800px\" height=\"400px\" alt=\"R8_gcn_test\" align=center />\\n\\n\\n\\n\\nAs problem name suggest we need to check interleaving of strings in another string and if it\\'s not the case then return false. \\n\\nWe can try on 3 approaches : 1. Bruteforce 2. Iterative / Recursive 3. Dynamic programming\\n\\n**Bruteforce approach 1** :   TLE \\uD83D\\uDE36\\n\\nC++ || PYTHON\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size(), n = s2.size(), k = s3.size();\\n        if (m + n != k) return false;\\n            while(m > 0 && n > 0 && s1[m-1] == s2[n-1] && s1[m-1] == s3[k-1]) {\\n                m--;\\n                n--;\\n                k--;\\n            }\\n            while(m > 0 && s1[m-1] == s3[k-1]) {\\n                m--;\\n                k--;\\n            }\\n            while(n > 0 && s2[n-1] == s3[k-1]) {\\n                n--;\\n                k--;\\n            }\\n            if (m == 0 && n == 0) return true;\\n            if (m == 0) return s2.substr(0, n) == s3.substr(0, n);\\n            if (n == 0) return s1.substr(0, m) == s3.substr(0, m);\\n            return s1.substr(0, m) == s3.substr(0, m) && s2.substr(0, n) == s3.substr(m, n);     \\n    }\\n};\\n```\\n\\n\\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        f1 = list(s1)\\n        f2 = list(s2)\\n        f3 = list(s3)\\n\\n        if len(f1) + len(f2) != len(f3):\\n            return False\\n\\n        if len(f1) == 0:\\n            return f2 == f3\\n\\n        if len(f2) == 0:\\n            return f1 == f3\\n\\n        if len(f1) == 1:\\n            return f1[0] == f3[0] and f2 == f3[1:]\\n\\n        if len(f2) == 1:\\n            return f1 == f3[0:] and f2[0] == f3[-1]\\n\\n\\n        for i in range(len(f1)):\\n            if f1[i] not in f3:\\n                return False\\n\\n        for i in range(len(f2)):\\n            if f2[i] not in f3:\\n                return False\\n        \\n        i =0\\n\\n        while(i != len(s3)):\\n            if s1[i] == s3[i]:\\n                i += 1\\n            if s2[i] == s3[i]:\\n                i += 1\\n            \\n            if s1[i] != s3[i] or s2[i] != s3[i]:\\n                return False\\n        \\n        return True \\n```\\n\\n**Approach 2 Iterative** \\n\\nFor recursive approach we will use same manner as we did in bruteforce but here the stopping condition will work for us :\\n\\nWe will call the function by comparing between the string s1 and s2 whether they are folowing the order or not. \\n\\n**Time complexity** : O(2^m+n) where m & n are size of both strings \\n\\nexponential of 2 as each character in s3 has 2 option everytime it is moving. \\n\\n C++ || Python\\n \\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size(), n = s2.size(), k = s3.size();\\n        if (m + n != k) return false;\\n        while(m > 0 && n > 0 && s1[m-1] == s2[n-1] && s1[m-1] == s3[k-1]) {\\n            m--;\\n            n--;\\n            k--;\\n        }\\n        if (m == 0 && n == 0) return true;\\n        if (m == 0) return s2.substr(0, n) == s3.substr(0, n);\\n        if (n == 0) return s1.substr(0, m) == s3.substr(0, m);\\n        if (s1[m-1] == s3[k-1]) return isInterleave(s1.substr(0, m-1), s2, s3.substr(0, k-1));\\n\\n        if (s2[n-1] == s3[k-1]) return isInterleave(s1, s2.substr(0, n-1), s3.substr(0, k-1));\\n        return false;\\n    }\\n};\\n```\\n\\n \\n \\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        if len(s1) + len(s2) !=len(s3):\\n            return False\\n\\n        if len(s1) == 0:\\n            return s2 == s3\\n        if len(s2) == 0:\\n            return s1 == s3\\n\\n        if s1[0] == s2[0] and s1[0] == s3[0]:\\n            return self.isInterleave(s1[1:], s2, s3[1:]) or self.isInterleave(s1, s2[1:], s3[1:])\\n        elif s1[0] == s3[0]:\\n            return self.isInterleave(s1[1:], s2, s3[1:])\\n        elif s2[0] == s3[0]:\\n            return self.isInterleave(s1, s2[1:], s3[1:])\\n        else:\\n            return False\\n```\\n\\n**Dynamic programming** \\n\\nThe DP approach(Momoisation) is easy here as we only need to store the order and if order change we will change the subsequence that we are following and move to next subsequence.\\n\\n**Time complexity** : O(m.n) \\n\\nThe image showing if we use to traverse all the branches in the tree and not storing the information from each levels in the worst case we might need to traverse all the paths when no element is matching or interleaving in the next string.\\n\\n**IF WE DO NOT STORE IN ANY COLLECTION** : Each level in tree showing the char positions in s3 and total number of level are equal to the length of the string s3. For example root level 1st char and 2nd level 2nd char and so on. When ever we have a match we start it as either in s1 or s2 if match in s1 we will start that path if match in s2 we will take that path and traverse untill mismatch occur. In this order we need to parse every path. \\n\\n\\n\\n<img src=\"https://assets.leetcode.com/users/images/d6aab695-2ad1-4810-b12b-1881f76dbf50_1657175724.992637.png \" width=\"800px\" height=\"800px\" alt=\"R8_gcn_test\" align=center />\\n\\nC++ || PYTHON \\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size(), n = s2.size(), k = s3.size();\\n        if (m + n != k) return false;\\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\\n        for (int i = 0; i <= m; i++) {\\n            for (int j = 0; j <= n; j++) {\\n                if (i == 0 && j == 0) dp[i][j] = true;\\n                else if (i == 0) dp[i][j] = dp[i][j - 1] && s2[j - 1] == s3[i + j - 1];\\n                else if (j == 0) dp[i][j] = dp[i - 1][j] && s1[i - 1] == s3[i + j - 1];\\n                else dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) || (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        return dp[m][n];\\n    }\\n};\\n```\\n\\n\\n\\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\\n        for i in range(len(s1) + 1):\\n            for j in range(len(s2) + 1):\\n                if i == 0 and j == 0:\\n                    dp[i][j] = True\\n                elif i == 0:\\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[i + j - 1]\\n                elif j == 0:\\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]\\n                else:\\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\\n        return dp[len(s1)][len(s2)]\\n```\\n \\n**Consider upvote if you find it useful\\uD83D\\uDE03** \\n\\n**Thanks in advance \\u2764\\uFE0F\\u2764\\uFE0F\\u2764\\uFE0F**\\n\\n",
                "solutionTags": [
                    "Python",
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size(), n = s2.size(), k = s3.size();\\n        if (m + n != k) return false;\\n            while(m > 0 && n > 0 && s1[m-1] == s2[n-1] && s1[m-1] == s3[k-1]) {\\n                m--;\\n                n--;\\n                k--;\\n            }\\n            while(m > 0 && s1[m-1] == s3[k-1]) {\\n                m--;\\n                k--;\\n            }\\n            while(n > 0 && s2[n-1] == s3[k-1]) {\\n                n--;\\n                k--;\\n            }\\n            if (m == 0 && n == 0) return true;\\n            if (m == 0) return s2.substr(0, n) == s3.substr(0, n);\\n            if (n == 0) return s1.substr(0, m) == s3.substr(0, m);\\n            return s1.substr(0, m) == s3.substr(0, m) && s2.substr(0, n) == s3.substr(m, n);     \\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        f1 = list(s1)\\n        f2 = list(s2)\\n        f3 = list(s3)\\n\\n        if len(f1) + len(f2) != len(f3):\\n            return False\\n\\n        if len(f1) == 0:\\n            return f2 == f3\\n\\n        if len(f2) == 0:\\n            return f1 == f3\\n\\n        if len(f1) == 1:\\n            return f1[0] == f3[0] and f2 == f3[1:]\\n\\n        if len(f2) == 1:\\n            return f1 == f3[0:] and f2[0] == f3[-1]\\n\\n\\n        for i in range(len(f1)):\\n            if f1[i] not in f3:\\n                return False\\n\\n        for i in range(len(f2)):\\n            if f2[i] not in f3:\\n                return False\\n        \\n        i =0\\n\\n        while(i != len(s3)):\\n            if s1[i] == s3[i]:\\n                i += 1\\n            if s2[i] == s3[i]:\\n                i += 1\\n            \\n            if s1[i] != s3[i] or s2[i] != s3[i]:\\n                return False\\n        \\n        return True \\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size(), n = s2.size(), k = s3.size();\\n        if (m + n != k) return false;\\n        while(m > 0 && n > 0 && s1[m-1] == s2[n-1] && s1[m-1] == s3[k-1]) {\\n            m--;\\n            n--;\\n            k--;\\n        }\\n        if (m == 0 && n == 0) return true;\\n        if (m == 0) return s2.substr(0, n) == s3.substr(0, n);\\n        if (n == 0) return s1.substr(0, m) == s3.substr(0, m);\\n        if (s1[m-1] == s3[k-1]) return isInterleave(s1.substr(0, m-1), s2, s3.substr(0, k-1));\\n\\n        if (s2[n-1] == s3[k-1]) return isInterleave(s1, s2.substr(0, n-1), s3.substr(0, k-1));\\n        return false;\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        if len(s1) + len(s2) !=len(s3):\\n            return False\\n\\n        if len(s1) == 0:\\n            return s2 == s3\\n        if len(s2) == 0:\\n            return s1 == s3\\n\\n        if s1[0] == s2[0] and s1[0] == s3[0]:\\n            return self.isInterleave(s1[1:], s2, s3[1:]) or self.isInterleave(s1, s2[1:], s3[1:])\\n        elif s1[0] == s3[0]:\\n            return self.isInterleave(s1[1:], s2, s3[1:])\\n        elif s2[0] == s3[0]:\\n            return self.isInterleave(s1, s2[1:], s3[1:])\\n        else:\\n            return False\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size(), n = s2.size(), k = s3.size();\\n        if (m + n != k) return false;\\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\\n        for (int i = 0; i <= m; i++) {\\n            for (int j = 0; j <= n; j++) {\\n                if (i == 0 && j == 0) dp[i][j] = true;\\n                else if (i == 0) dp[i][j] = dp[i][j - 1] && s2[j - 1] == s3[i + j - 1];\\n                else if (j == 0) dp[i][j] = dp[i - 1][j] && s1[i - 1] == s3[i + j - 1];\\n                else dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) || (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        return dp[m][n];\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\\n        for i in range(len(s1) + 1):\\n            for j in range(len(s2) + 1):\\n                if i == 0 and j == 0:\\n                    dp[i][j] = True\\n                elif i == 0:\\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[i + j - 1]\\n                elif j == 0:\\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]\\n                else:\\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\\n        return dp[len(s1)][len(s2)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2248648,
                "title": "o-mn-dp-using-one-array-of-size-s2-length-python-c",
                "content": "**Upvote** if you like efficient solution code!\\n\\n**Join our discord** to meet other people preparing for interviews!\\n**https://discord.gg/7wpQQFYC**\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n\\t\\tif (s1.length() + s2.length() != s3.length()) return false;\\n\\t\\tif (s1.length() < s2.length()) swap(s1, s2);\\n\\t\\tint m = s1.length(), n = s2.length();\\n\\t\\t\\t\\n        vector<bool> dp(n + 1, false);\\n        dp[0] = true;\\n        for (int j = 1; j <= n; j++) {\\n            dp[j] = s3[j - 1] == s2[j - 1] && dp[j - 1];\\n        }\\n\\n        for (int i = 1; i <= m; i++) {\\n            dp[0] = s3[i - 1] == s1[i - 1] && dp[0];\\n            for (int j = 1; j <= n; j++) {\\n                dp[j] = (s3[i + j - 1] == s1[i - 1] && dp[j]);\\n                dp[j] = dp[j] || (s3[i + j - 1] == s2[j - 1] && dp[j - 1]);\\n            }\\n        }\\n        return dp.back();\\n    }\\n};\\n```\\n\\n**Python3**\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        if len(s1) < len(s2):\\n            s1, s2 = s2, s1\\n        m, n = len(s1), len(s2)\\n        \\n        dp = [True] + [False] * n\\n        for j in range(1, n + 1):\\n            dp[j] = s2[j - 1] == s3[j - 1] and dp[j - 1]\\n\\n        for i in range(1, m + 1):\\n            dp[0] = s1[i - 1] == s3[i - 1] and dp[0]\\n            for j in range(1, n + 1):\\n                dp[j] = (s1[i - 1] == s3[i + j - 1] and dp[j])\\n                dp[j] = dp[j] or (s2[j - 1] == s3[i + j - 1] and dp[j - 1])\\n        return dp[-1]\\n```\\n\\n**Time Complexity** O(mn) - A for-loop running `m` iterations with another for-loop running `n` iterations nested inside.\\n**Space Complexity** O(n) - A single array of size `n`.",
                "solutionTags": [
                    "C++",
                    "Python"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n\\t\\tif (s1.length() + s2.length() != s3.length()) return false;\\n\\t\\tif (s1.length() < s2.length()) swap(s1, s2);\\n\\t\\tint m = s1.length(), n = s2.length();\\n\\t\\t\\t\\n        vector<bool> dp(n + 1, false);\\n        dp[0] = true;\\n        for (int j = 1; j <= n; j++) {\\n            dp[j] = s3[j - 1] == s2[j - 1] && dp[j - 1];\\n        }\\n\\n        for (int i = 1; i <= m; i++) {\\n            dp[0] = s3[i - 1] == s1[i - 1] && dp[0];\\n            for (int j = 1; j <= n; j++) {\\n                dp[j] = (s3[i + j - 1] == s1[i - 1] && dp[j]);\\n                dp[j] = dp[j] || (s3[i + j - 1] == s2[j - 1] && dp[j - 1]);\\n            }\\n        }\\n        return dp.back();\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        if len(s1) < len(s2):\\n            s1, s2 = s2, s1\\n        m, n = len(s1), len(s2)\\n        \\n        dp = [True] + [False] * n\\n        for j in range(1, n + 1):\\n            dp[j] = s2[j - 1] == s3[j - 1] and dp[j - 1]\\n\\n        for i in range(1, m + 1):\\n            dp[0] = s1[i - 1] == s3[i - 1] and dp[0]\\n            for j in range(1, n + 1):\\n                dp[j] = (s1[i - 1] == s3[i + j - 1] and dp[j])\\n                dp[j] = dp[j] or (s2[j - 1] == s3[i + j - 1] and dp[j - 1])\\n        return dp[-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2248511,
                "title": "java-dp-based-solution-w-video-explanation-1ms",
                "content": "*Please **upvote** if you find this helpful*\\n\\n**Video Explanation**\\n\\n[Interleaving String | YouTube](https://www.youtube.com/watch?v=kbuYSSW54tk&feature=youtu.be)\\n\\n**Java Solution**\\n\\n```\\n//1ms\\nclass Solution {\\n    private boolean[][] invalid;\\n    private char[] c1;\\n    private char[] c2;\\n    private char[] c3;\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        c1 = s1.toCharArray();\\n        c2 = s2.toCharArray();\\n        c3 = s3.toCharArray();\\n        \\n        int m = s1.length(),n=s2.length();\\n        \\n        if(m+n != s3.length())\\n            return false;\\n        \\n        invalid = new boolean[m+1][n+1];\\n        \\n        return dfs(0,0,0);\\n    }\\n    \\n    public boolean dfs(int i, int j, int k){\\n        if(invalid[i][j])\\n            return false;\\n        \\n        if(k == c3.length)\\n            return true;\\n        \\n        boolean valid = \\n            i<c1.length && c1[i] == c3[k] && dfs(i+1,j,k+1) || \\n            j<c2.length && c2[j] == c3[k] && dfs(i,j+1,k+1);\\n        \\n        if(!valid)\\n            invalid[i][j] = true;\\n        \\n        return valid;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\n//1ms\\nclass Solution {\\n    private boolean[][] invalid;\\n    private char[] c1;\\n    private char[] c2;\\n    private char[] c3;\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        c1 = s1.toCharArray();\\n        c2 = s2.toCharArray();\\n        c3 = s3.toCharArray();\\n        \\n        int m = s1.length(),n=s2.length();\\n        \\n        if(m+n != s3.length())\\n            return false;\\n        \\n        invalid = new boolean[m+1][n+1];\\n        \\n        return dfs(0,0,0);\\n    }\\n    \\n    public boolean dfs(int i, int j, int k){\\n        if(invalid[i][j])\\n            return false;\\n        \\n        if(k == c3.length)\\n            return true;\\n        \\n        boolean valid = \\n            i<c1.length && c1[i] == c3[k] && dfs(i+1,j,k+1) || \\n            j<c2.length && c2[j] == c3[k] && dfs(i,j+1,k+1);\\n        \\n        if(!valid)\\n            invalid[i][j] = true;\\n        \\n        return valid;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31910,
                "title": "4ms-recursive-java",
                "content": "    public class Solution {\\n        Set<String> mem = new HashSet<String>();\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            if(s1.length() == 0 && s2.length() == 0 && s3.length() == 0)\\n                return true;\\n            if(mem.contains(s1+\"#\"+s2)) \\n                return false;\\n            if(s3.length() > 0){\\n                if(s1.length() > 0 &&  s1.charAt(0) == s3.charAt(0))\\n                    if(isInterleave(s1.substring(1),s2,s3.substring(1))) return true;\\n                if(s2.length() > 0 && s2.charAt(0) == s3.charAt(0))\\n                    if(isInterleave(s1,s2.substring(1),s3.substring(1))) return true;\\n            }\\n            mem.add(s1+\"#\"+s2);\\n            return false;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        Set<String> mem = new HashSet<String>();\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            if(s1.length() == 0 && s2.length() == 0 && s3.length() == 0)\\n                return true;\\n            if(mem.contains(s1+\"#\"+s2)) \\n                return false;\\n            if(s3.length() > 0){\\n                if(s1.length() > 0 &&  s1.charAt(0) == s3.charAt(0))\\n                    if(isInterleave(s1.substring(1),s2,s3.substring(1))) return true;\\n                if(s2.length() > 0 && s2.charAt(0) == s3.charAt(0))\\n                    if(isInterleave(s1,s2.substring(1),s3.substring(1))) return true;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3956989,
                "title": "dp-easy-best-approach",
                "content": "# Intuition\\nEasy Best Approach!!!\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nDynamic Programming Approach:\\n\\nThe key insight in this problem is to use dynamic programming to check if a certain interleaving of s1 and s2 can form s3. The DP array will be used to keep track of whether a certain prefix of s3 can be formed by interleaving a prefix of s1 and a prefix of s2.\\n\\nHere\\'s how the dynamic programming approach works:\\n\\nInitialization: Create a DP array dp of dimensions (len_s1 + 1) \\xD7 (len_s2 + 1). dp[i][j] will be True if the first i characters of s1 and the first j characters of s2 can interleave to form the first i + j characters of s3. Initialize dp[0][0] to True since two empty strings can form an empty string.\\n\\nBase Cases: Initialize the first row and the first column of the DP array. dp[0][j] is True if dp[0][j-1] is True and s2[j-1] matches s3[j-1]. Similarly, dp[i][0] is True if dp[i-1][0] is True and s1[i-1] matches s3[i-1].\\n\\nFilling the DP Array: Loop through the remaining cells of the DP array (starting from i = 1 and j = 1). The idea is to check if the current character in s3, which is s3[i+j-1], can be formed by either appending a character from s1 or a character from s2 to the previously formed interleaved strings.\\n\\nIf s1[i-1] matches s3[i+j-1] and dp[i-1][j] is True, then dp[i][j] is True.\\nIf s2[j-1] matches s3[i+j-1] and dp[i][j-1] is True, then dp[i][j] is True.\\nFinal Result: After filling the DP array, the value of dp[len_s1][len_s2] will indicate whether the entire strings s1 and s2 can interleave to form the entire string s3.\\n\\nThis approach ensures that you\\'re considering all possible interleavings and checking if each character in s3 can be formed by interweaving characters from s1 and s2 in a valid manner.\\n\\nRemember, this is just one way to approach the problem using dynamic programming. There might be other creative ways to solve this problem as well.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(len_s1 * len_s2)\\n- $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(len_s1 * len_s2)\\n- $$O(n^2)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        len_s1, len_s2, len_s3 = len(s1), len(s2), len(s3)\\n        \\n        # If the total length of s1 and s2 is not equal to s3, it\\'s impossible\\n        if len_s1 + len_s2 != len_s3:\\n            return False\\n        \\n        # Create a 2D DP array to store intermediate results\\n        dp = [[False] * (len_s2 + 1) for _ in range(len_s1 + 1)]\\n        \\n        # Base case: empty strings can always interleave to form an empty string\\n        dp[0][0] = True\\n        \\n        # Fill the first row\\n        for j in range(1, len_s2 + 1):\\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\\n        \\n        # Fill the first column\\n        for i in range(1, len_s1 + 1):\\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\\n        \\n        # Fill the DP array\\n        for i in range(1, len_s1 + 1):\\n            for j in range(1, len_s2 + 1):\\n                # Check if the current position in s3 can be formed by interleaving\\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or \\\\\\n                           (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\\n        \\n        return dp[len_s1][len_s2]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        len_s1, len_s2, len_s3 = len(s1), len(s2), len(s3)\\n        \\n        # If the total length of s1 and s2 is not equal to s3, it\\'s impossible\\n        if len_s1 + len_s2 != len_s3:\\n            return False\\n        \\n        # Create a 2D DP array to store intermediate results\\n        dp = [[False] * (len_s2 + 1) for _ in range(len_s1 + 1)]\\n        \\n        # Base case: empty strings can always interleave to form an empty string\\n        dp[0][0] = True\\n        \\n        # Fill the first row\\n        for j in range(1, len_s2 + 1):\\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\\n        \\n        # Fill the first column\\n        for i in range(1, len_s1 + 1):\\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\\n        \\n        # Fill the DP array\\n        for i in range(1, len_s1 + 1):\\n            for j in range(1, len_s2 + 1):\\n                # Check if the current position in s3 can be formed by interleaving\\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or \\\\\\n                           (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\\n        \\n        return dp[len_s1][len_s2]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 32083,
                "title": "my-solution-in-java-using-dp-time-o-n-m-and-space-o-m",
                "content": "Using dp to tracking select i-th seq and j-th seq in s1 and s2 could match i+j+2 th seq in s3\\n\\n 1. init optimal[0][*] by check no select from s1\\n 2. init optimal[*][0] by check no select from s2\\n 3. do search for every i-th and j-th, could match when meet one of the following two cases:\\n1. if i-th char in s2 equals to the (i+j+1)th char in s3, and previous j-th in s2 is matched without i-th char\\n2. if j-th char in s1 equals to the (i+j+1)th char in s3, and previous j-1th in s2 is matched with i-th char\\n 4. a straight-forward solution should be Time: O(n*m), and Space: O(n*m). And space could optimize since optimal[i+1][*] only depends on optimal[i][*], so could use Space O(m)\\n\\n\\n----------\\nJava code as following:\\n\\n    public static boolean isInterleaveOptz(String s1, String s2, String s3) {\\n        if (s3.length() != s1.length() + s2.length()) return false;\\n\\n        boolean[] optimal = new boolean[s2.length() + 1];    //dp optimal\\n        optimal[0] = true;\\n        for (int j = 0; j < s2.length(); j++) { //check no s1 char is selected, if s2 could equals to s3\\n            if (optimal[j] && s2.charAt(j) == s3.charAt(j)) optimal[j + 1] = true;\\n        }\\n\\n        for (int i = 0; i < s1.length(); i++) { //check select i-th char in s1\\n            if (optimal[0] && s1.charAt(i) == s3.charAt(i)) optimal[0] = true;    //no char in s2 is selected\\n            else optimal[0] = false;\\n            for (int j = 0; j < s2.length(); j++) {  //select j-th char\\n                if ((s1.charAt(i) == s3.charAt(i + j + 1) && optimal[j + 1]) ||\\n                        s2.charAt(j) == s3.charAt(i + j + 1) && optimal[j]) {\\n                    optimal[j + 1] = true;\\n                } else optimal[j + 1] = false;\\n            }\\n        }\\n        return optimal[s2.length()];\\n    }",
                "solutionTags": [],
                "code": "Using dp to tracking select i-th seq and j-th seq in s1 and s2 could match i+j+2 th seq in s3\\n\\n 1. init optimal[0][*] by check no select from s1\\n 2. init optimal[*][0] by check no select from s2\\n 3. do search for every i-th and j-th, could match when meet one of the following two cases:\\n1. if i-th char in s2 equals to the (i+j+1)th char in s3, and previous j-th in s2 is matched without i-th char\\n2. if j-th char in s1 equals to the (i+j+1)th char in s3, and previous j-1th in s2 is matched with i-th char\\n 4. a straight-forward solution should be Time: O(n*m), and Space: O(n*m). And space could optimize since optimal[i+1][*] only depends on optimal[i][*], so could use Space O(m)\\n\\n\\n----------\\nJava code as following:\\n\\n    public static boolean isInterleaveOptz(String s1, String s2, String s3) {\\n        if (s3.length() != s1.length() + s2.length()) return false;\\n\\n        boolean[] optimal = new boolean[s2.length() + 1];    //dp optimal\\n        optimal[0] = true;\\n        for (int j = 0; j < s2.length(); j++) { //check no s1 char is selected, if s2 could equals to s3\\n            if (optimal[j] && s2.charAt(j) == s3.charAt(j)) optimal[j + 1] = true;\\n        }\\n\\n        for (int i = 0; i < s1.length(); i++) { //check select i-th char in s1\\n            if (optimal[0] && s1.charAt(i) == s3.charAt(i)) optimal[0] = true;    //no char in s2 is selected\\n            else optimal[0] = false;\\n            for (int j = 0; j < s2.length(); j++) {  //select j-th char\\n                if ((s1.charAt(i) == s3.charAt(i + j + 1) && optimal[j + 1]) ||\\n                        s2.charAt(j) == s3.charAt(i + j + 1) && optimal[j]) {\\n                    optimal[j + 1] = true;\\n                } else optimal[j + 1] = false;\\n            }\\n        }\\n        return optimal[s2.length()];\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3956731,
                "title": "easy-solution-python3-c-c-java-using-dfs-with-image",
                "content": "```Python3 []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n\\n        dp = [ [False] * (len(s2) + 1) for i in range(len(s1) + 1)]\\n        dp[len(s1)][len(s2)] = True\\n\\n        for i in range(len(s1), -1, -1):\\n            for j in range(len(s2), -1, -1):\\n                if i < len(s1) and s1[i] == s3[i +j] and dp[i + 1][j]:\\n                    dp[i][j] = True\\n                if j < len(s2) and s2[j] == s3[i + j] and dp[i][j + 1]:\\n                    dp[i][j] = True\\n        return dp[0][0]\\n\\n\\n\\n        dp = {}\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            if (i, j) in dp:\\n                return dp[(i, j)]\\n\\n            if i < len(s1) and s1[i] == s3[i+j] and dfs(i + 1, j):\\n                return True\\n            \\n            if j < len(s2) and s2[j] == s3[i + j] and dfs(i, j + 1):\\n                return True\\n            \\n            dp[(i, j)] = False\\n            return False\\n        return dfs(0, 0)\\n```\\n```python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n\\n        dp = [ [False] * (len(s2) + 1) for i in range(len(s1) + 1)]\\n        dp[len(s1)][len(s2)] = True\\n\\n        for i in range(len(s1), -1, -1):\\n            for j in range(len(s2), -1, -1):\\n                if i < len(s1) and s1[i] == s3[i +j] and dp[i + 1][j]:\\n                    dp[i][j] = True\\n                if j < len(s2) and s2[j] == s3[i + j] and dp[i][j + 1]:\\n                    dp[i][j] = True\\n        return dp[0][0]\\n\\n\\n\\n        dp = {}\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            if (i, j) in dp:\\n                return dp[(i, j)]\\n\\n            if i < len(s1) and s1[i] == s3[i+j] and dfs(i + 1, j):\\n                return True\\n            \\n            if j < len(s2) and s2[j] == s3[i + j] and dfs(i, j + 1):\\n                return True\\n            \\n            dp[(i, j)] = False\\n            return False\\n        return dfs(0, 0)\\n```\\n```C# []\\npublic class Solution {\\n    public bool IsInterleave(string s1, string s2, string s3) {\\n        if (s1.Length + s2.Length != s3.Length) {\\n            return false;\\n        }\\n\\n        bool[,] dp = new bool[s1.Length + 1, s2.Length + 1];\\n        dp[s1.Length, s2.Length] = true;\\n\\n        for (int i = s1.Length; i >= 0; i--) {\\n            for (int j = s2.Length; j >= 0; j--) {\\n                if (i < s1.Length && s1[i] == s3[i + j] && dp[i + 1, j]) {\\n                    dp[i, j] = true;\\n                }\\n                if (j < s2.Length && s2[j] == s3[i + j] && dp[i, j + 1]) {\\n                    dp[i, j] = true;\\n                }\\n            }\\n        }\\n        return dp[0, 0];\\n    }\\n\\n    private Dictionary<(int, int), bool> dp = new Dictionary<(int, int), bool>();\\n    private bool DFS(int i, int j, string s1, string s2, string s3) {\\n        if (i == s1.Length && j == s2.Length) {\\n            return true;\\n        }\\n        if (dp.ContainsKey((i, j))) {\\n            return dp[(i, j)];\\n        }\\n\\n        bool result = false;\\n        if (i < s1.Length && s1[i] == s3[i + j] && DFS(i + 1, j, s1, s2, s3)) {\\n            result = true;\\n        }\\n        if (j < s2.Length && s2[j] == s3[i + j] && DFS(i, j + 1, s1, s2, s3)) {\\n            result = true;\\n        }\\n\\n        dp[(i, j)] = result;\\n        return result;\\n    }\\n}\\n```\\n```C++ []\\n#include <unordered_map>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n\\n        vector<vector<bool>> dp(s1.length() + 1, vector<bool>(s2.length() + 1, false));\\n        dp[s1.length()][s2.length()] = true;\\n\\n        for (int i = s1.length(); i >= 0; i--) {\\n            for (int j = s2.length(); j >= 0; j--) {\\n                if (i < s1.length() && s1[i] == s3[i + j] && dp[i + 1][j]) {\\n                    dp[i][j] = true;\\n                }\\n                if (j < s2.length() && s2[j] == s3[i + j] && dp[i][j + 1]) {\\n                    dp[i][j] = true;\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n\\nprivate:\\n    struct PairHash {\\n        template <class T1, class T2>\\n        size_t operator() (const pair<T1, T2>& p) const {\\n            auto h1 = hash<T1>{}(p.first);\\n            auto h2 = hash<T2>{}(p.second);\\n            return h1 ^ (h2 << 1);\\n        }\\n    };\\n    \\n    unordered_map<pair<int, int>, bool, PairHash> dp;\\n    bool dfs(int i, int j, string& s1, string& s2, string& s3) {\\n        if (i == s1.length() && j == s2.length()) {\\n            return true;\\n        }\\n        if (dp.find({i, j}) != dp.end()) {\\n            return dp[{i, j}];\\n        }\\n\\n        bool result = false;\\n        if (i < s1.length() && s1[i] == s3[i + j] && dfs(i + 1, j, s1, s2, s3)) {\\n            result = true;\\n        }\\n        if (j < s2.length() && s2[j] == s3[i + j] && dfs(i, j + 1, s1, s2, s3)) {\\n            result = true;\\n        }\\n\\n        dp[{i, j}] = result;\\n        return result;\\n    }\\n};\\n```\\n```Java []\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n\\n        boolean[][] dp = new boolean[s1.length() + 1][s2.length() + 1];\\n        dp[s1.length()][s2.length()] = true;\\n\\n        for (int i = s1.length(); i >= 0; i--) {\\n            for (int j = s2.length(); j >= 0; j--) {\\n                if (i < s1.length() && s1.charAt(i) == s3.charAt(i + j) && dp[i + 1][j]) {\\n                    dp[i][j] = true;\\n                }\\n                if (j < s2.length() && s2.charAt(j) == s3.charAt(i + j) && dp[i][j + 1]) {\\n                    dp[i][j] = true;\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n\\n    private Map<Pair, Boolean> dp = new HashMap<>();\\n    private boolean dfs(int i, int j, String s1, String s2, String s3) {\\n        if (i == s1.length() && j == s2.length()) {\\n            return true;\\n        }\\n        Pair pair = new Pair(i, j);\\n        if (dp.containsKey(pair)) {\\n            return dp.get(pair);\\n        }\\n\\n        boolean result = false;\\n        if (i < s1.length() && s1.charAt(i) == s3.charAt(i + j) && dfs(i + 1, j, s1, s2, s3)) {\\n            result = true;\\n        }\\n        if (j < s2.length() && s2.charAt(j) == s3.charAt(i + j) && dfs(i, j + 1, s1, s2, s3)) {\\n            result = true;\\n        }\\n\\n        dp.put(pair, result);\\n        return result;\\n    }\\n\\n    private class Pair {\\n        int first;\\n        int second;\\n\\n        Pair(int first, int second) {\\n            this.first = first;\\n            this.second = second;\\n        }\\n\\n        @Override\\n        public int hashCode() {\\n            return first * 31 + second;\\n        }\\n\\n        @Override\\n        public boolean equals(Object obj) {\\n            if (this == obj) return true;\\n            if (obj == null || getClass() != obj.getClass()) return false;\\n            Pair other = (Pair) obj;\\n            return first == other.first && second == other.second;\\n        }\\n    }\\n}\\n```\\n![Screenshot 2023-08-20 065922.png](https://assets.leetcode.com/users/images/87160051-906d-467d-bc82-cdf1b787371b_1692934261.5322077.png)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "C#"
                ],
                "code": "```Python3 []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n\\n        dp = [ [False] * (len(s2) + 1) for i in range(len(s1) + 1)]\\n        dp[len(s1)][len(s2)] = True\\n\\n        for i in range(len(s1), -1, -1):\\n            for j in range(len(s2), -1, -1):\\n                if i < len(s1) and s1[i] == s3[i +j] and dp[i + 1][j]:\\n                    dp[i][j] = True\\n                if j < len(s2) and s2[j] == s3[i + j] and dp[i][j + 1]:\\n                    dp[i][j] = True\\n        return dp[0][0]\\n\\n\\n\\n        dp = {}\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            if (i, j) in dp:\\n                return dp[(i, j)]\\n\\n            if i < len(s1) and s1[i] == s3[i+j] and dfs(i + 1, j):\\n                return True\\n            \\n            if j < len(s2) and s2[j] == s3[i + j] and dfs(i, j + 1):\\n                return True\\n            \\n            dp[(i, j)] = False\\n            return False\\n        return dfs(0, 0)\\n```\n```python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n\\n        dp = [ [False] * (len(s2) + 1) for i in range(len(s1) + 1)]\\n        dp[len(s1)][len(s2)] = True\\n\\n        for i in range(len(s1), -1, -1):\\n            for j in range(len(s2), -1, -1):\\n                if i < len(s1) and s1[i] == s3[i +j] and dp[i + 1][j]:\\n                    dp[i][j] = True\\n                if j < len(s2) and s2[j] == s3[i + j] and dp[i][j + 1]:\\n                    dp[i][j] = True\\n        return dp[0][0]\\n\\n\\n\\n        dp = {}\\n        def dfs(i, j):\\n            if i == len(s1) and j == len(s2):\\n                return True\\n            if (i, j) in dp:\\n                return dp[(i, j)]\\n\\n            if i < len(s1) and s1[i] == s3[i+j] and dfs(i + 1, j):\\n                return True\\n            \\n            if j < len(s2) and s2[j] == s3[i + j] and dfs(i, j + 1):\\n                return True\\n            \\n            dp[(i, j)] = False\\n            return False\\n        return dfs(0, 0)\\n```\n```C# []\\npublic class Solution {\\n    public bool IsInterleave(string s1, string s2, string s3) {\\n        if (s1.Length + s2.Length != s3.Length) {\\n            return false;\\n        }\\n\\n        bool[,] dp = new bool[s1.Length + 1, s2.Length + 1];\\n        dp[s1.Length, s2.Length] = true;\\n\\n        for (int i = s1.Length; i >= 0; i--) {\\n            for (int j = s2.Length; j >= 0; j--) {\\n                if (i < s1.Length && s1[i] == s3[i + j] && dp[i + 1, j]) {\\n                    dp[i, j] = true;\\n                }\\n                if (j < s2.Length && s2[j] == s3[i + j] && dp[i, j + 1]) {\\n                    dp[i, j] = true;\\n                }\\n            }\\n        }\\n        return dp[0, 0];\\n    }\\n\\n    private Dictionary<(int, int), bool> dp = new Dictionary<(int, int), bool>();\\n    private bool DFS(int i, int j, string s1, string s2, string s3) {\\n        if (i == s1.Length && j == s2.Length) {\\n            return true;\\n        }\\n        if (dp.ContainsKey((i, j))) {\\n            return dp[(i, j)];\\n        }\\n\\n        bool result = false;\\n        if (i < s1.Length && s1[i] == s3[i + j] && DFS(i + 1, j, s1, s2, s3)) {\\n            result = true;\\n        }\\n        if (j < s2.Length && s2[j] == s3[i + j] && DFS(i, j + 1, s1, s2, s3)) {\\n            result = true;\\n        }\\n\\n        dp[(i, j)] = result;\\n        return result;\\n    }\\n}\\n```\n```C++ []\\n#include <unordered_map>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n\\n        vector<vector<bool>> dp(s1.length() + 1, vector<bool>(s2.length() + 1, false));\\n        dp[s1.length()][s2.length()] = true;\\n\\n        for (int i = s1.length(); i >= 0; i--) {\\n            for (int j = s2.length(); j >= 0; j--) {\\n                if (i < s1.length() && s1[i] == s3[i + j] && dp[i + 1][j]) {\\n                    dp[i][j] = true;\\n                }\\n                if (j < s2.length() && s2[j] == s3[i + j] && dp[i][j + 1]) {\\n                    dp[i][j] = true;\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n\\nprivate:\\n    struct PairHash {\\n        template <class T1, class T2>\\n        size_t operator() (const pair<T1, T2>& p) const {\\n            auto h1 = hash<T1>{}(p.first);\\n            auto h2 = hash<T2>{}(p.second);\\n            return h1 ^ (h2 << 1);\\n        }\\n    };\\n    \\n    unordered_map<pair<int, int>, bool, PairHash> dp;\\n    bool dfs(int i, int j, string& s1, string& s2, string& s3) {\\n        if (i == s1.length() && j == s2.length()) {\\n            return true;\\n        }\\n        if (dp.find({i, j}) != dp.end()) {\\n            return dp[{i, j}];\\n        }\\n\\n        bool result = false;\\n        if (i < s1.length() && s1[i] == s3[i + j] && dfs(i + 1, j, s1, s2, s3)) {\\n            result = true;\\n        }\\n        if (j < s2.length() && s2[j] == s3[i + j] && dfs(i, j + 1, s1, s2, s3)) {\\n            result = true;\\n        }\\n\\n        dp[{i, j}] = result;\\n        return result;\\n    }\\n};\\n```\n```Java []\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n\\n        boolean[][] dp = new boolean[s1.length() + 1][s2.length() + 1];\\n        dp[s1.length()][s2.length()] = true;\\n\\n        for (int i = s1.length(); i >= 0; i--) {\\n            for (int j = s2.length(); j >= 0; j--) {\\n                if (i < s1.length() && s1.charAt(i) == s3.charAt(i + j) && dp[i + 1][j]) {\\n                    dp[i][j] = true;\\n                }\\n                if (j < s2.length() && s2.charAt(j) == s3.charAt(i + j) && dp[i][j + 1]) {\\n                    dp[i][j] = true;\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n\\n    private Map<Pair, Boolean> dp = new HashMap<>();\\n    private boolean dfs(int i, int j, String s1, String s2, String s3) {\\n        if (i == s1.length() && j == s2.length()) {\\n            return true;\\n        }\\n        Pair pair = new Pair(i, j);\\n        if (dp.containsKey(pair)) {\\n            return dp.get(pair);\\n        }\\n\\n        boolean result = false;\\n        if (i < s1.length() && s1.charAt(i) == s3.charAt(i + j) && dfs(i + 1, j, s1, s2, s3)) {\\n            result = true;\\n        }\\n        if (j < s2.length() && s2.charAt(j) == s3.charAt(i + j) && dfs(i, j + 1, s1, s2, s3)) {\\n            result = true;\\n        }\\n\\n        dp.put(pair, result);\\n        return result;\\n    }\\n\\n    private class Pair {\\n        int first;\\n        int second;\\n\\n        Pair(int first, int second) {\\n            this.first = first;\\n            this.second = second;\\n        }\\n\\n        @Override\\n        public int hashCode() {\\n            return first * 31 + second;\\n        }\\n\\n        @Override\\n        public boolean equals(Object obj) {\\n            if (this == obj) return true;\\n            if (obj == null || getClass() != obj.getClass()) return false;\\n            Pair other = (Pair) obj;\\n            return first == other.first && second == other.second;\\n        }\\n    }\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1347089,
                "title": "basic-recursion-in-java-for-understanding",
                "content": "*This solution will help you for the top down and bottom up approach and how the solution will be formed.\\nThis solution will not get accepted due to high time complexity. This is only to help beginners understand the recursive part as it is the most important part for dp.*\\n\\n```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1.length()+s2.length()!=s3.length())\\n        {\\n            return false;\\n        }\\n        return check(s1,s2,s3,0,0,0);\\n    }\\n    \\n    public boolean check(String s1,String s2,String s3,int i,int j,int n)\\n    {\\n        if(n==s3.length() && i==s1.length() && j==s2.length())\\n        {\\n            return true;\\n        }\\n        boolean res=false;\\n        \\n        if(i<s1.length() && j<s2.length() && s1.charAt(i)==s3.charAt(n) && s2.charAt(j)==s3.charAt(n))\\n        {\\n            res = res ||  check(s1,s2,s3,i+1,j,n+1) || check(s1,s2,s3,i,j+1,n+1); \\n        }\\n        else if(i<s1.length() && s1.charAt(i)==s3.charAt(n))\\n        {\\n            res = res || check(s1,s2,s3,i+1,j,n+1);\\n        }\\n        else if(j<s2.length() && s2.charAt(j)==s3.charAt(n))\\n        {\\n            res = res || check(s1,s2,s3,i,j+1,n+1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1.length()+s2.length()!=s3.length())\\n        {\\n            return false;\\n        }\\n        return check(s1,s2,s3,0,0,0);\\n    }\\n    \\n    public boolean check(String s1,String s2,String s3,int i,int j,int n)\\n    {\\n        if(n==s3.length() && i==s1.length() && j==s2.length())\\n        {\\n            return true;\\n        }\\n        boolean res=false;\\n        \\n        if(i<s1.length() && j<s2.length() && s1.charAt(i)==s3.charAt(n) && s2.charAt(j)==s3.charAt(n))\\n        {\\n            res = res ||  check(s1,s2,s3,i+1,j,n+1) || check(s1,s2,s3,i,j+1,n+1); \\n        }\\n        else if(i<s1.length() && s1.charAt(i)==s3.charAt(n))\\n        {\\n            res = res || check(s1,s2,s3,i+1,j,n+1);\\n        }\\n        else if(j<s2.length() && s2.charAt(j)==s3.charAt(n))\\n        {\\n            res = res || check(s1,s2,s3,i,j+1,n+1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 772696,
                "title": "c-0ms-beats-100",
                "content": "```c++\\nclass Solution {\\npublic:\\n    bool check(string &s1,string &s2,string &s3,int i,int j,int k,vector<vector<int>>&dp){\\n        if(dp[i][j]!=-1)return dp[i][j];\\n        if(i==s1.length() and j==s2.length() and k==s3.length())\\n            return true;\\n        bool res=false;\\n        \\n        if(i!=s1.length())\\n            if(s1[i]==s3[k])\\n            res|=check(s1,s2,s3,i+1,j,k+1,dp);\\n        if(j!=s2.length())\\n            if(s2[j]==s3[k])\\n            res|=check(s1,s2,s3,i,j+1,k+1,dp);\\n        return dp[i][j]=res;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n=s1.length(),m=s2.length();\\n        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));\\n        bool ans=check(s1,s2,s3,0,0,0,dp);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Memoization"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    bool check(string &s1,string &s2,string &s3,int i,int j,int k,vector<vector<int>>&dp){\\n        if(dp[i][j]!=-1)return dp[i][j];\\n        if(i==s1.length() and j==s2.length() and k==s3.length())\\n            return true;\\n        bool res=false;\\n        \\n        if(i!=s1.length())\\n            if(s1[i]==s3[k])\\n            res|=check(s1,s2,s3,i+1,j,k+1,dp);\\n        if(j!=s2.length())\\n            if(s2[j]==s3[k])\\n            res|=check(s1,s2,s3,i,j+1,k+1,dp);\\n        return dp[i][j]=res;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n=s1.length(),m=s2.length();\\n        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));\\n        bool ans=check(s1,s2,s3,0,0,0,dp);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2250282,
                "title": "simple-top-down-memoization-with-explanation",
                "content": "3 pointers , p1 points character of s1, p2 points character of s2, p3 points character of s3\\nif all pointers reached end means we successfully formed s3 from s1 and s2..\\n**if char at p1 matches with char at p3.. that means subproblem becomes dfs(p1+1,p2,p3+1)\\nif char at p2 matches with char at p3.. that means subproblem becomes dfs(p1,p2+1,p3+1)**\\nif none of the case satisfies that means neither char at p1 matches with p3 nor p2 char matches with p1 char.. or none of the ways formed the s3 then return false\\n\\nRUNTIME : 90% faster than other python users\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n        @lru_cache(maxsize = None)\\n        def dfs(p1,p2,p3):\\n            if p1 == len(s1) and p2 == len(s2) and p3 == len(s3): return True\\n            if p1 < len(s1) and s1[p1] == s3[p3] and dfs(p1+1,p2,p3+1): return True\\n            if p2 < len(s2) and s2[p2] == s3[p3] and dfs(p1,p2+1,p3+1): return True\\n            return False\\n        return dfs(0,0,0)\\n```\\n\\n**PLEASE UPVOTE IT**.. FEEL FREE TO ASK ANY QUERIES..",
                "solutionTags": [
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False\\n        @lru_cache(maxsize = None)\\n        def dfs(p1,p2,p3):\\n            if p1 == len(s1) and p2 == len(s2) and p3 == len(s3): return True\\n            if p1 < len(s1) and s1[p1] == s3[p3] and dfs(p1+1,p2,p3+1): return True\\n            if p2 < len(s2) and s2[p2] == s3[p3] and dfs(p1,p2+1,p3+1): return True\\n            return False\\n        return dfs(0,0,0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247101,
                "title": "dp-top-down-memoization-comments-added-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        \\n        if(n3 == 0) return true;\\n        \\n        if(n1+n2 != n3) return false; \\n        \\n        int dp[n1+1][n2+1];\\n        memset(dp, 0, sizeof(dp));\\n        \\n        for(int i=0; i<=n1; i++){\\n            for(int j=0; j<=n2; j++){\\n                if(i == 0 && j == 0) //both strings are empty so it is interleaving\\n                    dp[i][j] = 1;\\n                \\n                else if(i == 0){ //s1 is empty\\n                    if(s2[j-1] == s3[j-1])\\n                        dp[i][j] = dp[i][j-1];\\n                }\\n                \\n                else if(j == 0){ // s2 is empty\\n                    if(s1[i-1] == s3[i-1])\\n                        dp[i][j] = dp[i-1][j];\\n                }\\n                \\n                else if(s1[i-1] != s3[i+j-1] && s2[j-1] == s3[i+j-1]) //if not match with s1\\n                    dp[i][j] = dp[i][j-1];\\n                \\n                else if(s1[i-1] == s3[i+j-1] && s2[j-1] != s3[i+j-1])   //if not match with s2\\n                    dp[i][j] = dp[i-1][j];\\n                \\n                else if(s1[i-1] == s3[i+j-1] && s2[j-1] == s3[i+j-1])  // If match with both s1 and s2\\n                    dp[i][j] = dp[i-1][j] || dp[i][j-1];\\n            }\\n        }      \\n        return dp[n1][n2];\\n    }\\n};\\n\\n**Please do upvote**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        \\n        if(n3 == 0) return true;\\n        \\n        if(n1+n2 != n3) return false; \\n        \\n        int dp[n1+1][n2+1];\\n        memset(dp, 0, sizeof(dp));\\n        \\n        for(int i=0; i<=n1; i++){\\n            for(int j=0; j<=n2; j++){\\n                if(i == 0 && j == 0) //both strings are empty so it is interleaving\\n                    dp[i][j] = 1;\\n                \\n                else if(i == 0){ //s1 is empty\\n                    if(s2[j-1] == s3[j-1])\\n                        dp[i][j] = dp[i][j-1];\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 31952,
                "title": "no-loops-quick-n-easy-5-liner-in-python-beats-99",
                "content": "Pure recursion without loops. Useful for interviews when we need to code things fast without much bullcrap. Shortest in Python I've seen so far for this problem, but may be wrong.\\n\\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3, memo={}):\\n        if len(s1) + len(s2) != len(s3): return False\\n        if not s1 and not s2 and not s3: return True\\n        if (s1, s2, s3) in memo:         return memo[s1, s2, s3]\\n        memo[s1,s2,s3] =\\\\\\n               (len(s1) > 0 and len(s3) > 0 and s1[0] == s3[0] and self.isInterleave(s1[1:], s2, s3[1:], memo)) or\\\\\\n               (len(s2) > 0 and len(s3) > 0 and s2[0] == s3[0] and self.isInterleave(s1, s2[1:], s3[1:], memo))\\n        return memo[s1,s2,s3]\\n                \\n\\n# 101 / 101 test cases passed.\\n# Status: Accepted\\n# Runtime: 44 ms\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3, memo={}):\\n        if len(s1) + len(s2) != len(s3): return False\\n        if not s1 and not s2 and not s3: return True\\n        if (s1, s2, s3) in memo:         return memo[s1, s2, s3]\\n        memo[s1,s2,s3] =\\\\\\n               (len(s1) > 0 and len(s3) > 0 and s1[0] == s3[0] and self.isInterleave(s1[1:], s2, s3[1:], memo)) or\\\\\\n               (len(s2) > 0 and len(s3) > 0 and s2[0] == s3[0] and self.isInterleave(s1, s2[1:], s3[1:], memo))\\n        return memo[s1,s2,s3]\\n                \\n\\n# 101 / 101 test cases passed.\\n# Status: Accepted\\n# Runtime: 44 ms\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247315,
                "title": "interleaving-string-easy-dp-solution-with-explanation",
                "content": "\\t\\n\\tConsider the given example:  s1= aabcc  s2 = dbbca  s3=  aa dbbc bc a c\\n\\t\\n\\tWe start with an empty s3, adding characters one by one and finding if we can use some substring of s1 and s2  to construct this s3.\\n\\tUsing a 2D vector to store the answers along the way.\\n\\tdp[i][j] = true if it is possible to construct the string s3[0....i+j-1] using substrings s1[0...i-1]  and s2[0...j-1]\\n\\n\\t\\n1.  Base case : dp[0][0] = true\\n\\t Since we can make an empty string s3  from 2 empty strings s1 and s2.\\n\\t\\n2.\\t When one of the strings is empty\\n\\t\\t\\n\\t\\tWhen s2 is empty\\n\\t\\tAdd characters one by one to s3 and s1 while keeping s2 empty.\\t\\t\\n\\t\\teg.             s1 = \"a\"  s2 = \" \"    s3 = \"a\".    We can make s3 using this s1 and s2. \\n\\t\\t   Therefore, dp[1][0] = true  since s3[0] = s2[0] \\n\\n\\t\\tTo find dp[i][0],\\n\\t\\twe just check whether the last charcter of s3 is same as last char of s1 , s3[i-1] == s1[i-1] and\\n\\t\\tif it is possible to construct the string, s3 minus current character\\n\\t\\ti.e.  dp[i-1][0] is true.\\n\\t\\t\\tThis way we have filled the first column of our dp. \\n\\t\\t\\t\\t\\n\\t\\t\\t\\tdp[i][0] = dp[i-1][0]  and (s3[i-1] == s1[i-1])\\n\\t\\tSimilarly  we can fill the first row when s1 is empty and s2 is not.\\n\\t\\t\\t\\n\\t\\t\\tdp[0][j] = (s3[j-1] == s2[j-1] ) and dp[0][j-1]\\n\\n\\n3.\\tNow consider the case when both strings are not empty.\\n\\t \\n\\t eg. to find dp[1][1]\\n\\t\\t s1 = \"a\"  s2 = \"d\"    s3 = \"aa\"\\n  \\n\\t  \\n\\t  We need to check 2 conditions : \\n\\ta. whether the last character of s3 is same as last characters of either s1 or s2. \\n\\t\\tIf  not same then its not possible to make s3.\\n\\n\\tb. whether it\\'s possible to construct the string s3 minus current character.\\n\\t\\t\\ti.e  when s3 has a single character. Those are dp[0][1] and dp[1][0] .\\n\\n\\n\\tIf the last character of s3 comes from s1, \\n\\tthen check whether it is possible to construct the string s3 minus current character using   substring s2 and substring s1 minus last character.\\n`bool t1 = (s3[i+j-1] == s1[i-1] ) and dp[i-1][j];`\\n\\n\\tSimilarly if the last character of s3 comes from s2,\\n\\t\\t`bool t2 = (s3[i+j-1] == s2[j-1]) and dp[i][j-1];`\\n\\n\\n\\n If either of t1 or t2 is true then we can make s3 with current substrings s1 and s2.\\n\\t\\n\\n\\n\\n\\n```\\nbool isInterleave(string s1, string s2, string s3) {\\n        int m= s1.length(), n= s2.length();\\n        if(s3.length() != m+n) return false;\\n        vector<vector<bool>> dp(m+1,vector<bool>(n+1,false));\\n        \\n        dp[0][0]  = 1;\\n        \\n        for(int i=1; i<=m;i++)\\n            dp[i][0] = (s3[i-1] == s1[i-1]) and dp[i-1][0];\\n        \\n        for(int j=1;j<=n; j++)\\n            dp[0][j] = (s3[j-1] == s2[j-1]) and dp[0][j-1];\\n        \\n        for(int i=1;i<=m;i++){\\n            for(int j=1;j<=n;j++){\\n                bool t1 = (s3[i+j-1] == s1[i-1] ) and dp[i-1][j];\\n                bool t2 = (s3[i+j-1] == s2[j-1]) and dp[i][j-1];\\n                dp[i][j] = t1 or t2;\\n            }\\n        }\\n        \\n        return dp[m][n];\\n        \\n        \\n    }\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nbool isInterleave(string s1, string s2, string s3) {\\n        int m= s1.length(), n= s2.length();\\n        if(s3.length() != m+n) return false;\\n        vector<vector<bool>> dp(m+1,vector<bool>(n+1,false));\\n        \\n        dp[0][0]  = 1;\\n        \\n        for(int i=1; i<=m;i++)\\n            dp[i][0] = (s3[i-1] == s1[i-1]) and dp[i-1][0];\\n        \\n        for(int j=1;j<=n; j++)\\n            dp[0][j] = (s3[j-1] == s2[j-1]) and dp[0][j-1];\\n        \\n        for(int i=1;i<=m;i++){\\n            for(int j=1;j<=n;j++){\\n                bool t1 = (s3[i+j-1] == s1[i-1] ) and dp[i-1][j];\\n                bool t2 = (s3[i+j-1] == s2[j-1]) and dp[i][j-1];\\n                dp[i][j] = t1 or t2;\\n            }\\n        }\\n        \\n        return dp[m][n];\\n        \\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957005,
                "title": "c-dp-recursion-memoization-day-25",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool c(int i1,int i2,int i3,string &s1,string &s2,string &s3,\\n    vector<vector<vector<int>>>&dp){\\n        if(i3==s3.size()){\\n            if(i2==s2.size() && i1==s1.size())return true;\\n            else return false;\\n        }\\n        char c1=\\'*\\',c2=\\'*\\';\\n        if(dp[i1][i2][i3]!=-1)return dp[i1][i2][i3];\\n        if(i1<s1.size())c1=s1[i1];\\n        if(i2<s2.size())c2=s2[i2];\\n        bool ans=false;\\n        if(c1==s3[i3])ans |= c(i1+1,i2,i3+1,s1,s2,s3,dp);\\n        if(c2==s3[i3])ans |= c(i1,i2+1,i3+1,s1,s2,s3,dp);\\n        return dp[i1][i2][i3]=ans;\\n        }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<vector<vector<int>>>dp(s1.size()+1,vector<vector<int>>(s2.size()+1,vector<int>(s3.size(),-1)));\\n        return c(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```\\n![upvote (2).jpg](https://assets.leetcode.com/users/images/79429923-2114-4af9-9725-1f43b586a234_1692940270.5239363.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool c(int i1,int i2,int i3,string &s1,string &s2,string &s3,\\n    vector<vector<vector<int>>>&dp){\\n        if(i3==s3.size()){\\n            if(i2==s2.size() && i1==s1.size())return true;\\n            else return false;\\n        }\\n        char c1=\\'*\\',c2=\\'*\\';\\n        if(dp[i1][i2][i3]!=-1)return dp[i1][i2][i3];\\n        if(i1<s1.size())c1=s1[i1];\\n        if(i2<s2.size())c2=s2[i2];\\n        bool ans=false;\\n        if(c1==s3[i3])ans |= c(i1+1,i2,i3+1,s1,s2,s3,dp);\\n        if(c2==s3[i3])ans |= c(i1,i2+1,i3+1,s1,s2,s3,dp);\\n        return dp[i1][i2][i3]=ans;\\n        }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        vector<vector<vector<int>>>dp(s1.size()+1,vector<vector<int>>(s2.size()+1,vector<int>(s3.size(),-1)));\\n        return c(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1104260,
                "title": "java-dfs-faster-than-100-solution-pictorial-explanation",
                "content": "Consider the examples in the picture below to understand how we can DFS over the strings.\\n\\n![image](https://assets.leetcode.com/users/images/a3cb6432-f974-487b-b16c-b488f06f5596_1615451866.8777242.png)\\n![image](https://assets.leetcode.com/users/images/63847cfb-0c44-4271-8e55-2d6128edaa02_1615451906.4169378.png)\\n\\nCode : \\n```\\nclass Solution {\\n    \\n    private boolean dfs(String s1, String s2, String s3, int i, int j, int k, boolean[][] visited){\\n        if(i == s1.length() && j == s2.length()) return true;\\n        if(i > s1.length() || j > s2.length()) return false;\\n        if(visited[i][j]) return false;\\n        visited[i][j] = true;\\n        boolean a = false, b = false;\\n        if(i < s1.length() && s1.charAt(i) == s3.charAt(k)){\\n            a = dfs(s1, s2, s3, i+1, j, k+1, visited);\\n        }\\n        if(j < s2.length() && s2.charAt(j) == s3.charAt(k)){\\n            b = dfs(s1, s2, s3, i, j+1, k+1, visited); \\n        }   \\n        return a || b;\\n    }\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s3.length() < (s1.length() + s2.length()) || s3.length() > (s1.length() + s2.length())) return false;\\n        boolean[][] visited = new boolean[s1.length()+1][s2.length()+1];\\n        return dfs(s1, s2, s3, 0, 0, 0, visited);\\n    }\\n}\\n```\\n\\nRuntime: 0 ms, faster than 100.00% of Java online submissions for Interleaving String.\\nMemory Usage: 36.9 MB, less than 94.19% of Java online submissions for Interleaving String.\\n\\nHope this helps !\\n\\n",
                "solutionTags": [
                    "Java",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution {\\n    \\n    private boolean dfs(String s1, String s2, String s3, int i, int j, int k, boolean[][] visited){\\n        if(i == s1.length() && j == s2.length()) return true;\\n        if(i > s1.length() || j > s2.length()) return false;\\n        if(visited[i][j]) return false;\\n        visited[i][j] = true;\\n        boolean a = false, b = false;\\n        if(i < s1.length() && s1.charAt(i) == s3.charAt(k)){\\n            a = dfs(s1, s2, s3, i+1, j, k+1, visited);\\n        }\\n        if(j < s2.length() && s2.charAt(j) == s3.charAt(k)){\\n            b = dfs(s1, s2, s3, i, j+1, k+1, visited); \\n        }   \\n        return a || b;\\n    }\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s3.length() < (s1.length() + s2.length()) || s3.length() > (s1.length() + s2.length())) return false;\\n        boolean[][] visited = new boolean[s1.length()+1][s2.length()+1];\\n        return dfs(s1, s2, s3, 0, 0, 0, visited);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 505067,
                "title": "7-line-20-ms-small-code-top-down-dp",
                "content": "```python\\nfrom functools import lru_cache\\nclass Solution:    \\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:        \\n        if len(s3) != len(s1) + len(s2): return False\\n        \\n        @lru_cache(None)\\n        def helper(s1,s2,s3):\\n            if not s1: return s2 == s3\\n            if not s2: return s1 == s3    \\n            return (s1[0] == s3[0] and helper(s1[1:],s2,s3[1:])) or (s2[0] == s3[0] and helper(s1, s2[1:],s3[1:]))                    \\n        return helper(s1,s2,s3)\\n```",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "```python\\nfrom functools import lru_cache\\nclass Solution:    \\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:        \\n        if len(s3) != len(s1) + len(s2): return False\\n        \\n        @lru_cache(None)\\n        def helper(s1,s2,s3):\\n            if not s1: return s2 == s3\\n            if not s2: return s1 == s3    \\n            return (s1[0] == s3[0] and helper(s1[1:],s2,s3[1:])) or (s2[0] == s3[0] and helper(s1, s2[1:],s3[1:]))                    \\n        return helper(s1,s2,s3)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 32051,
                "title": "my-dp-c-solution-is-only-10-lines-with-o-n-space",
                "content": "\\n\\n    class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int m = s1.size(), n = s2.size();\\n            if(m+n != s3.size())  return false;\\n            bool c[n+1] = {true};\\n            int i, j = 0;\\n            while(j < n && s2[j] == s3[j]) c[++j] = true;\\n            for(i = 0; i < m; ++i) {\\n                c[0] = c[0] & (s1[i] == s3[i]);\\n                for(j = 1; j <= n; ++j)\\n                    c[j] = ((s1[i] == s3[i+j]) & c[j]) | ((s2[j-1] == s3[i+j]) & c[j-1]);\\n            }\\n            return c[n];\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int m = s1.size(), n = s2.size();\\n            if(m+n != s3.size())  return false;\\n            bool c[n+1] = {true}",
                "codeTag": "Java"
            },
            {
                "id": 32082,
                "title": "c-sharing-my-recursive-tle-and-dp-solution-30ms-easy-to-understand",
                "content": "First, I'm a big recursion person. Here's my first attempt which is purely recursive. At an intermediate stage, we can either match one char from s1 to one char from s3 and advance one pointer at s1 and s3. Or we can do the same with s2 and s3. I'm open to suggestions to my recursive code. One improvement could come from not having to call the strcmp function?\\n\\n\\n    class Solution {\\n    public:\\n        bool isInterleave(char* s1, char* s2, char* s3) {\\n            \\n            if (*s1=='\\\\0' && *s2=='\\\\0')\\n                return *s3=='\\\\0'? true : false;\\n            else if (*s1=='\\\\0'){\\n                return strcmp(s2,s3)==0 ? true : false;\\n            } else if (*s2=='\\\\0'){\\n                return strcmp(s1,s3)==0 ? true : false;\\n            }\\n            \\n            return (*s1==*s3 && isInterleave(s1+1,s2,s3+1)) | (*s2==*s3 && isInterleave(s1,s2+1,s3+1));\\n        }\\n    };\\n\\n\\nHere's the DP version (30ms) as well. Unsurprisingly the DP solution passed the judge and it's pretty efficient. The logic straightforward if you understood the recursive version since there's 1:1 correspondence between the two code. I think it's elegant since it doesn't have any ugly if, else if shenanigans.\\n\\n    class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3){\\n            int n1 = s1.length(), n2 = s2.length(), n3 = s3.length();\\n            if (n1+n2 != n3) return false;\\n            \\n            vector<vector<bool>> V(n1+1, vector<bool>(n2+1, false));\\n            \\n            V[n1][n2] = (s3[n1+n2]=='\\\\0');\\n            \\n            // fill bottom\\n            for (int j=n2-1; j>=0; j--) V[n1][j]  = (s2[j]==s3[n1+j] && V[n1][j+1]);\\n            \\n            // fill right\\n            for (int i=n1-1; i>=0; i--) V[i][n2] = (s1[i]==s3[n2+i] && V[i+1][n2]);\\n            \\n            // fill DP table from bottom right\\n            for (int j=n2-1; j>=0; j--){\\n                for (int i=n1-1; i>=0; i--){\\n                    V[i][j] = (s1[i]==s3[i+j] && V[i+1][j]) | (s2[j]==s3[i+j] && V[i][j+1]);\\n                }\\n            }\\n            return V[0][0];\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isInterleave(char* s1, char* s2, char* s3) {\\n            \\n            if (*s1=='\\\\0' && *s2=='\\\\0')\\n                return *s3=='\\\\0'? true : false;\\n            else if (*s1=='\\\\0'){\\n                return strcmp(s2,s3)==0 ? true : false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3187750,
                "title": "interleaving-string-python3-with-comments-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nOne way to form s3 from s1 and s2 is to take one character from s1 or s2 at a time and append it to s3. We can keep track of the index of the last character from s1 and s2 that was appended to s3. If at any point, we cannot append a character to s3, we backtrack and try a different path.\\n\\nTo optimize this approach, we can use dynamic programming. We can define a 2D boolean array dp, where dp[i][j] is true if s3[0:i+j] can be formed by an interleaving of s1[0:i] and s2[0:j].\\n\\nThe base case is when i = j = 0, and dp[0][0] is true. If either i or j is zero, then dp[i][j] is true if s3[0:i+j] is equal to either s1[0:i] or s2[0:j].\\n\\nFor the general case, if the last character of s1 matches the last character of s3, then we can append it to s3 and check if dp[i-1][j] is true. Similarly, if the last character of s2 matches the last character of s3, then we can append it to s3 and check if dp[i][j-1] is true.\\n\\nThe final answer is dp[m][n], where m is the length of s1 and n is the length of s2.\\n\\nTime complexity: O(mn), where m is the length of s1 and n is the length of s2.\\nSpace complexity: O(mn), where m is the length of s1 and n is the length of s2.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n  def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n    m, n = len(s1), len(s2)\\n    if m + n != len(s3):\\n        return False\\n    \\n    dp = [[False] * (n+1) for _ in range(m+1)]\\n    dp[0][0] = True\\n    \\n    for i in range(m+1):\\n        for j in range(n+1):\\n            if i > 0 and s1[i-1] == s3[i+j-1]:\\n                dp[i][j] = dp[i][j] or dp[i-1][j]\\n            if j > 0 and s2[j-1] == s3[i+j-1]:\\n                dp[i][j] = dp[i][j] or dp[i][j-1]\\n                \\n    return dp[m][n]\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n  def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n    m, n = len(s1), len(s2)\\n    if m + n != len(s3):\\n        return False\\n    \\n    dp = [[False] * (n+1) for _ in range(m+1)]\\n    dp[0][0] = True\\n    \\n    for i in range(m+1):\\n        for j in range(n+1):\\n            if i > 0 and s1[i-1] == s3[i+j-1]:\\n                dp[i][j] = dp[i][j] or dp[i-1][j]\\n            if j > 0 and s2[j-1] == s3[i+j-1]:\\n                dp[i][j] = dp[i][j] or dp[i][j-1]\\n                \\n    return dp[m][n]\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1248271,
                "title": "interleaving-string-js-python-java-c-easy-dp-solution-w-explanation",
                "content": "*(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful,* ***please upvote*** *this post.)*\\n\\n---\\n\\n#### ***Idea:***\\n\\nIf we consider a matrix with indices (**i**) for **s1** on one axis and indices (**j**) for **s2** on the other, then a successful **s3** can be considered a path moving from the top left to the bottom right. At each point, we either move downward (**i++**) by choosing the next letter from **s1** or rightward (**j++**) by choosing the next letter from **s2**.\\n\\nAll that remains, then, is to see which vertices are possible given **s3**, and which ones are not. To do that, we can use a **dynamic programming** (**DP**) approach. Normally, we would establish a matrix as described above, along with a buffer row/column at the start of the matrix to provide space for previous row/column validation checks for the leading edges of our iteration. An additional row/column at the end of the matrix is also needed, since our final checks will occur only _after_ the strings are completed.\\n\\nWe can reduce the **space complexity** of this solution from **O(N * M)** to just **O(M)**, however, if rather than building a full DP matrix, we instead only keep the current row of the matrix (**dp**) in memory, reiterating through it for each row. The **left** value (**dp[j-1]**) will already have been calculated, and the **up** value (**dp[j]**) will not yet have been overwritten in the current cell, so it will still represent the value of the cell from the previous row.\\n\\nWe should also remember to fill **dp[1]** with a **true** (or **1**) value, representing a valid vertex at the starting position of our iteration path.\\n\\nFrom there, we can iterate through the rows, building upon previously completed entries to check the validity of the current cell. If the cell \"above\" (the not-yet-overwritten **dp[i]** represents the same index from the row above) is valid (**true** or **1**) and the corresponding characters of **s1** and **s3** match, then the current cell is valid. Similarly, if the cell to the left is valid and the corresponding characters of **s2** and **s3** match, then the current cell is valid.\\n\\nOnce we\\'ve finished iterating through **i** and **j**, a valid value in the last cell of **dp** will indicate that a valid path exists that matches **s3**, so we can just **return** the contents of that cell.\\n\\n - _**Time Complexity: O(N * M)** where **N** is the length of **s1** and **M** is the length of **s2**_\\n - _**Space Complexity: O(M)** for **dp**_\\n\\n---\\n\\n#### ***Javascript Code:***\\n\\nThe best result for the code below is **72ms / 38.7MB** (beats 99% / 93%).\\n```javascript\\nvar isInterleave = function(s1, s2, s3) {\\n    let n = s1.length + 2, m = s2.length + 2\\n    if (n + m - 4 !== s3.length) return false\\n    let dp = new Uint8Array(m)\\n    dp[1] = 1\\n    for (let i = 1; i < n; i++)\\n        for (let j = 1; j < m; j++) {\\n            let up = dp[j] && s1[i-2] === s3[j+i-3],\\n                left = dp[j-1] && s2[j-2] === s3[j+i-3]\\n            dp[j] = up || left\\n        }\\n    return dp[m-1]\\n};\\n```\\n\\n---\\n\\n#### ***Python Code:***\\n\\nThe best result for the code below is **36ms / 14.2MB** (beats 61% / 96%).\\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        n, m = len(s1) + 2, len(s2) + 2\\n        if n + m - 4 != len(s3): return False\\n        dp = [0] * m\\n        dp[1] = 1\\n        for i in range(1, n):\\n            for j in range(1, m):\\n                up = dp[j] and (i < 2 or s1[i-2] == s3[j+i-3])\\n                left = dp[j-1] and (j < 2 or s2[j-2] == s3[j+i-3])\\n                dp[j] = up or left\\n        return dp[-1]\\n```\\n\\n---\\n\\n#### ***Java Code:***\\n\\nThe best result for the code below is **2ms / 36.7MB** (beats 80% / 98%).\\n```java\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        char[] sc1 = s1.toCharArray(), sc2 = s2.toCharArray(), sc3 = s3.toCharArray();\\n        if (n + m - 4 != s3.length()) return false;\\n        boolean[] dp = new boolean[m];\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                boolean up = dp[j] && (i < 2 || sc1[i-2] == sc3[j+i-3]),\\n                    left =dp[j-1] && (j < 2 || sc2[j-2] == sc3[j+i-3]);\\n                dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n}\\n```\\n\\n---\\n\\n#### ***C++ Code:***\\n\\nThe best result for the code below is **0ms / 6.6MB** (beats 100% / 61%).\\n```c++\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        if (n + m - 4 != s3.length()) return false;\\n        vector<bool> dp(m);\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                bool up = dp[j] && (i < 2 || s1[i-2] == s3[j+i-3]),\\n                    left = dp[j-1] && (j < 2 || s2[j-2] == s3[j+i-3]);\\n               dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\nvar isInterleave = function(s1, s2, s3) {\\n    let n = s1.length + 2, m = s2.length + 2\\n    if (n + m - 4 !== s3.length) return false\\n    let dp = new Uint8Array(m)\\n    dp[1] = 1\\n    for (let i = 1; i < n; i++)\\n        for (let j = 1; j < m; j++) {\\n            let up = dp[j] && s1[i-2] === s3[j+i-3],\\n                left = dp[j-1] && s2[j-2] === s3[j+i-3]\\n            dp[j] = up || left\\n        }\\n    return dp[m-1]\\n};\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        n, m = len(s1) + 2, len(s2) + 2\\n        if n + m - 4 != len(s3): return False\\n        dp = [0] * m\\n        dp[1] = 1\\n        for i in range(1, n):\\n            for j in range(1, m):\\n                up = dp[j] and (i < 2 or s1[i-2] == s3[j+i-3])\\n                left = dp[j-1] and (j < 2 or s2[j-2] == s3[j+i-3])\\n                dp[j] = up or left\\n        return dp[-1]\\n```\n```java\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        char[] sc1 = s1.toCharArray(), sc2 = s2.toCharArray(), sc3 = s3.toCharArray();\\n        if (n + m - 4 != s3.length()) return false;\\n        boolean[] dp = new boolean[m];\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                boolean up = dp[j] && (i < 2 || sc1[i-2] == sc3[j+i-3]),\\n                    left =dp[j-1] && (j < 2 || sc2[j-2] == sc3[j+i-3]);\\n                dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n}\\n```\n```c++\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.length() + 2, m = s2.length() + 2;\\n        if (n + m - 4 != s3.length()) return false;\\n        vector<bool> dp(m);\\n        dp[1] = true;\\n        for (int i = 1; i < n; i++)\\n            for (int j = 1; j < m; j++) {\\n                bool up = dp[j] && (i < 2 || s1[i-2] == s3[j+i-3]),\\n                    left = dp[j-1] && (j < 2 || s2[j-2] == s3[j+i-3]);\\n               dp[j] = up || left;\\n            }\\n        return dp[m-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247663,
                "title": "interleaving-string-dp-o-s2-length-java",
                "content": "```java\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length())\\n            return false;\\n        int m = s1.length(), n = s2.length();\\n        \\n        boolean[] dp = new boolean[n+1];\\n        dp[0] = true;\\n        for (int i = 1; i <= n; ++i) {\\n            dp[i] = dp[i-1] && s3.charAt(i-1) == s2.charAt(i-1);\\n        }\\n        \\n        for (int i = 1; i <= m; ++i) {\\n            for (int j = 0; j <= n; ++j) {\\n                if (j == 0)\\n                    dp[j] = dp[j] && s3.charAt(i-1) == s1.charAt(i-1);\\n                else\\n                    dp[j] = (dp[j] && s3.charAt(i+j-1) == s1.charAt(i-1)) || (dp[j-1] && s3.charAt(i+j-1) == s2.charAt(j-1));\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n```",
                "solutionTags": [],
                "code": "```java\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length())\\n            return false;\\n        int m = s1.length(), n = s2.length();\\n        \\n        boolean[] dp = new boolean[n+1];\\n        dp[0] = true;\\n        for (int i = 1; i <= n; ++i) {\\n            dp[i] = dp[i-1] && s3.charAt(i-1) == s2.charAt(i-1);\\n        }\\n        \\n        for (int i = 1; i <= m; ++i) {\\n            for (int j = 0; j <= n; ++j) {\\n                if (j == 0)\\n                    dp[j] = dp[j] && s3.charAt(i-1) == s1.charAt(i-1);\\n                else\\n                    dp[j] = (dp[j] && s3.charAt(i+j-1) == s1.charAt(i-1)) || (dp[j-1] && s3.charAt(i+j-1) == s2.charAt(j-1));\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 602726,
                "title": "python-recursive-solution-with-memoization-and-explanation",
                "content": "The recursive function takes in the 2 given strings and the target string, shortening either s1 or s2, and s3 by 1 character for each successful recursive stack.\\n\\nLet\\'s take a simple example where memoization will be useful:\\n* \\ts1: \\'abc\\'\\n* \\ts2: \\'ade\\'\\n* \\ts3: \\'aabdce\\'\\n\\nThe recursive stack tree visualization would look like this:\\n```\\n                          [\\'abc\\'][\\'ade\\'][\\'aabdce\\']\\n                       /                            \\\\\\n           a[\\'bc\\'][\\'ade\\'][\\'abdce\\']            a[\\'de\\'][\\'abc\\'][\\'abdce\\']\\n              /          \\\\                               \\\\\\n           aa[\\'bc\\'][\\'de\\'][\\'bdce\\']           aa[\\'de\\'][\\'abc\\'][\\'bdce\\'] (already seen, so prune here)\\n\\t         /             \\\\\\n\\taab[\\'c\\'][\\'de\\'][\\'dce\\']   aad[\\'bc\\'][\\'e\\'][\\'bdce\\'] (\\'d\\' does not match \\'b\\', so stop here)\\n\\t            \\\\\\n\\taabd[\\'c\\'][\\'e\\'][\\'ce\\']\\n\\t           /\\n\\taabdc[\\'\\'][\\'e\\'][\\'e\\']\\n\\t           \\\\\\n\\taabdce[\\'\\'][\\'\\'][\\'\\'] (return True)\\n```\\nWhere the first word is the current string, followed by s1, s2 and s3.\\nEach left branch indicates popping the first letter of s1 if it matches the first letter of s3.\\nRight branch for s2 under the same condition.\\n\\n**Base case**\\nWe return True if all s1, s2 and s3 are empty.\\nThis means that we have exhaustively used all s1 and s2 to generate s3.\\n\\n**Recursive call**\\nIn each recursive stack, we have 2 options, to check s1 or s2.\\nWe do this for either s1, s2 (or both) if their first letter matches the remaining first letter of s3.\\n\\n**Memoization**\\nWe keep track of the combinations we have seen so far by keeping a record of the remaining s1 + s2 or s2 + s1.\\nThe order does not matter since the recursion will perform the algorithm on both strings anyway.\\nSo after we have done each recursive call, we need to add this to the set, and only continue if we haven\\'t seen that combination in the set yet.\\n\\n**Return value**\\nWe return True if any of the branches returns True.\\nSo we use the \\'or\\' operation with False as the default answer.\\n```\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        \\n        seen = set()\\n        \\n        def recursive(s, t, remaining):\\n            if len(s) == len(t) == len(remaining) == 0:\\n                return True\\n            \\n            ans = False\\n            \\n            if len(s) > 0 and len(remaining) > 0 and s[0] == remaining[0] and (s[1:]+\\'.\\'+t not in seen or t[1:]+\\'.\\'+s not in seen):\\n                seen.add(s[1:]+\\'.\\'+t)\\n                ans = recursive(s[1:],t,remaining[1:])\\n            if len(t) > 0 and len(remaining) > 0 and t[0] == remaining[0] and (s[1:]+\\'.\\'+t not in seen or t[1:]+\\'.\\'+s not in seen):\\n\\t\\t\\t    seen.add(t[1:]+\\'.\\'+s)\\n                ans = ans or recursive(s, t[1:], remaining[1:])\\n\\n            return ans\\n        \\n        return recursive(s1, s2, s3)\\n```",
                "solutionTags": [
                    "Python3",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\n                          [\\'abc\\'][\\'ade\\'][\\'aabdce\\']\\n                       /                            \\\\\\n           a[\\'bc\\'][\\'ade\\'][\\'abdce\\']            a[\\'de\\'][\\'abc\\'][\\'abdce\\']\\n              /          \\\\                               \\\\\\n           aa[\\'bc\\'][\\'de\\'][\\'bdce\\']           aa[\\'de\\'][\\'abc\\'][\\'bdce\\'] (already seen, so prune here)\\n\\t         /             \\\\\\n\\taab[\\'c\\'][\\'de\\'][\\'dce\\']   aad[\\'bc\\'][\\'e\\'][\\'bdce\\'] (\\'d\\' does not match \\'b\\', so stop here)\\n\\t            \\\\\\n\\taabd[\\'c\\'][\\'e\\'][\\'ce\\']\\n\\t           /\\n\\taabdc[\\'\\'][\\'e\\'][\\'e\\']\\n\\t           \\\\\\n\\taabdce[\\'\\'][\\'\\'][\\'\\'] (return True)\\n```\n```\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        \\n        seen = set()\\n        \\n        def recursive(s, t, remaining):\\n            if len(s) == len(t) == len(remaining) == 0:\\n                return True\\n            \\n            ans = False\\n            \\n            if len(s) > 0 and len(remaining) > 0 and s[0] == remaining[0] and (s[1:]+\\'.\\'+t not in seen or t[1:]+\\'.\\'+s not in seen):\\n                seen.add(s[1:]+\\'.\\'+t)\\n                ans = recursive(s[1:],t,remaining[1:])\\n            if len(t) > 0 and len(remaining) > 0 and t[0] == remaining[0] and (s[1:]+\\'.\\'+t not in seen or t[1:]+\\'.\\'+s not in seen):\\n\\t\\t\\t    seen.add(t[1:]+\\'.\\'+s)\\n                ans = ans or recursive(s, t[1:], remaining[1:])\\n\\n            return ans\\n        \\n        return recursive(s1, s2, s3)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 200455,
                "title": "from-brute-force-to-dp",
                "content": "### Brute Force\\nTry matching s1 and s2 with s3 one letter at a time.\\n```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        return isInterleaveFrom(s1, s2, s3, 0, 0, 0);\\n    }\\n    \\n    private boolean isInterleaveFrom(\\n        String m, String n, String p,\\n        int mIndex, int nIndex, int pIndex) {\\n        if (pIndex == p.length())\\n            return mIndex == m.length() && nIndex == n.length();\\n        \\n        if (mIndex < m.length() && m.charAt(mIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex + 1, nIndex, pIndex + 1))\\n                return true;\\n        }\\n        if (nIndex < n.length() && n.charAt(nIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex, nIndex + 1, pIndex + 1))\\n                return true;\\n        }\\n        \\n        return false;\\n    }\\n}\\n```\\n### Top-down DP\\n```\\nclass Solution {\\n    private Map<String, Boolean> dp;\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        dp = new HashMap<>();\\n        return isInterleaveFrom(s1, s2, s3, 0, 0, 0);\\n    }\\n    \\n    private boolean isInterleaveFrom(\\n        String m, String n, String p,\\n        int mIndex, int nIndex, int pIndex) {\\n        if (pIndex == p.length())\\n            return mIndex == m.length() && nIndex == n.length();\\n        \\n        String key = mIndex + \"|\" + nIndex + \"|\" + pIndex;\\n        if (dp.containsKey(key))\\n            return dp.get(key);\\n        \\n        if (mIndex < m.length() && m.charAt(mIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex + 1, nIndex, pIndex + 1)) {\\n                dp.put(key, true);\\n                return true;\\n            }\\n        }\\n        if (nIndex < n.length() && n.charAt(nIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex, nIndex + 1, pIndex + 1)) {\\n                dp.put(key, true);\\n                return true;\\n            }\\n        }\\n        dp.put(key, false);\\n        return false;\\n    }\\n}\\n```\\n### Bottom-up DP\\n\\n```\\nclass Solution {\\n    public boolean isInterleave(String m, String n, String p) {\\n        boolean[][] dp = new boolean[m.length() + 1][n.length() + 1];\\n\\n        if (m.length() + n.length() != p.length())\\n            return false;\\n\\n        for (int mIndex = 0; mIndex <= m.length(); mIndex++) {\\n            for (int nIndex = 0; nIndex <= n.length(); nIndex++) {\\n                if (mIndex == 0 && nIndex == 0) {\\n                    dp[mIndex][nIndex] = true;\\n                } else {\\n                    if (mIndex > 0 && m.charAt(mIndex - 1) == p.charAt(mIndex + nIndex - 1))\\n                        dp[mIndex][nIndex] = dp[mIndex - 1][nIndex];\\n                    \\n                    if (nIndex > 0 && n.charAt(nIndex - 1) == p.charAt(mIndex + nIndex - 1))\\n                        dp[mIndex][nIndex] |= dp[mIndex][nIndex - 1];\\n                }\\n            }\\n        }\\n        \\n        return dp[m.length()][n.length()];\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        return isInterleaveFrom(s1, s2, s3, 0, 0, 0);\\n    }\\n    \\n    private boolean isInterleaveFrom(\\n        String m, String n, String p,\\n        int mIndex, int nIndex, int pIndex) {\\n        if (pIndex == p.length())\\n            return mIndex == m.length() && nIndex == n.length();\\n        \\n        if (mIndex < m.length() && m.charAt(mIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex + 1, nIndex, pIndex + 1))\\n                return true;\\n        }\\n        if (nIndex < n.length() && n.charAt(nIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex, nIndex + 1, pIndex + 1))\\n                return true;\\n        }\\n        \\n        return false;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    private Map<String, Boolean> dp;\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        dp = new HashMap<>();\\n        return isInterleaveFrom(s1, s2, s3, 0, 0, 0);\\n    }\\n    \\n    private boolean isInterleaveFrom(\\n        String m, String n, String p,\\n        int mIndex, int nIndex, int pIndex) {\\n        if (pIndex == p.length())\\n            return mIndex == m.length() && nIndex == n.length();\\n        \\n        String key = mIndex + \"|\" + nIndex + \"|\" + pIndex;\\n        if (dp.containsKey(key))\\n            return dp.get(key);\\n        \\n        if (mIndex < m.length() && m.charAt(mIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex + 1, nIndex, pIndex + 1)) {\\n                dp.put(key, true);\\n                return true;\\n            }\\n        }\\n        if (nIndex < n.length() && n.charAt(nIndex) == p.charAt(pIndex)) {\\n            if (isInterleaveFrom(m, n, p, mIndex, nIndex + 1, pIndex + 1)) {\\n                dp.put(key, true);\\n                return true;\\n            }\\n        }\\n        dp.put(key, false);\\n        return false;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean isInterleave(String m, String n, String p) {\\n        boolean[][] dp = new boolean[m.length() + 1][n.length() + 1];\\n\\n        if (m.length() + n.length() != p.length())\\n            return false;\\n\\n        for (int mIndex = 0; mIndex <= m.length(); mIndex++) {\\n            for (int nIndex = 0; nIndex <= n.length(); nIndex++) {\\n                if (mIndex == 0 && nIndex == 0) {\\n                    dp[mIndex][nIndex] = true;\\n                } else {\\n                    if (mIndex > 0 && m.charAt(mIndex - 1) == p.charAt(mIndex + nIndex - 1))\\n                        dp[mIndex][nIndex] = dp[mIndex - 1][nIndex];\\n                    \\n                    if (nIndex > 0 && n.charAt(nIndex - 1) == p.charAt(mIndex + nIndex - 1))\\n                        dp[mIndex][nIndex] |= dp[mIndex][nIndex - 1];\\n                }\\n            }\\n        }\\n        \\n        return dp[m.length()][n.length()];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 32041,
                "title": "share-my-dp-solution-in-java-o-mn-in-time-and-space",
                "content": "    public class Solution {\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            if(s1.length()+s2.length() != s3.length())\\n                return false;\\n            boolean[][] record = new boolean[s1.length()+1][s2.length()+1];\\n            for(int i = 0; i<=s1.length(); i++){\\n                if(s1.substring(0, i).equals(s3.substring(0, i))){\\n                    record[i][0] = true;\\n                }\\n            }\\n            for(int i = 0; i<=s2.length(); i++){\\n                if(s2.substring(0, i).equals(s3.substring(0, i))){\\n                    record[0][i] = true;\\n                }\\n            }\\n            for(int i = 1; i<=s1.length(); i++){\\n                for(int j = 1; j<=s2.length(); j++){\\n                    if(record[i][j-1]&&s2.charAt(j-1)==s3.charAt(i+j-1))\\n                        record[i][j]=true;\\n                    if(record[i-1][j]&&s1.charAt(i-1)==s3.charAt(i+j-1))\\n                        record[i][j]=true;\\n                }\\n            }\\n            return record[s1.length()][s2.length()];\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public boolean isInterleave(String s1, String s2, String s3) {\\n            if(s1.length()+s2.length() != s3.length())\\n                return false;\\n            boolean[][] record = new boolean[s1.length()+1][s2.length()+1];\\n            for(int i = 0; i<=s1.length(); i++){\\n                if(s1.substring(0, i).equals(s3.substring(0, i))){\\n                    record[i][0] = true;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3956432,
                "title": "c-2d-recursive-iterative-dp-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse 2D recursive DP(top-down) to solve.\\n2nd solution is just rewritting of the 1st one into iterative solution(Bottom-up).\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n_1 n_2)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n_1 n_2)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(), n2=s2.size(), n3=s3.size();\\n        if (n1+n2!=n3) return 0;\\n        vector<vector<int>> dp(n1+1 , vector<int>(n2+1, -1));\\n        function<int(int, int)> dfs=[&](int i, int j)->int\\n        {\\n            if (i==n1 && j==n2) return dp[i][j]=1;\\n            if (dp[i][j]!=-1) return dp[i][j];\\n            int ch_s1, ch_s2;\\n            if (i<n1 && s1[i]==s3[i+j]) ch_s1=dfs(i+1,j);\\n            if (j<n2 && s2[j]==s3[i+j]) ch_s2=dfs(i,j+1);\\n            return dp[i][j]=ch_s1||ch_s2;\\n        };\\n        return dfs(0, 0)!=0;\\n    }\\n};\\n```\\n# Code for 2D iterative DP\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1 = s1.size(), n2 = s2.size(), n3 = s3.size();\\n        if (n1+n2!=n3) return 0;\\n        \\n        vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));\\n        dp[n1][n2] = 1;\\n        \\n        for (int i=n1; i >= 0; i--) {\\n            for (int j=n2; j >= 0; j--) {\\n                if (i<n1 && s1[i]==s3[i+j]) \\n                    dp[i][j] = dp[i][j] || dp[i+1][j];\\n                if (j<n2 && s2[j]==s3[i+j]) \\n                    dp[i][j] = dp[i][j] || dp[i][j+1];\\n            }\\n        }  \\n        return dp[0][0] == 1;\\n    }\\n};\\n```\\n# Code with Explanation in comments\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(), n2=s2.size(), n3=s3.size();\\n        \\n        //Check if the total length of s1 and s2 is equal to the length of s3\\n        if (n1+n2!=n3) return 0;\\n        \\n        // Initialize a 2D DP array\\n        vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));\\n        \\n        // Set the base case: the last cell in the DP array is initialized as 1\\n        dp[n1][n2] = 1;\\n        \\n        //Iterate over the DP array from bottom-right to top-left\\n        for (int i=n1; i >= 0; i--) {\\n            for (int j=n2; j >= 0; j--) {\\n                //If there are characters left in s1 and the character matches s3\\n                if (i<n1 && s1[i]==s3[i+j]) \\n                    dp[i][j]=dp[i][j] || dp[i+1][j]; // Take value from the cell below\\n                \\n                //If there are characters left in s2 and the character matches s3\\n                if (j<n2 && s2[j]==s3[i+j]) \\n                    dp[i][j]=dp[i][j] || dp[i][j+1]; //Take value from the cell on the right\\n            }\\n        }  \\n\\n        // Return true if the top-left cell of the DP array is 1 \\n        return dp[0][0] == 1;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(), n2=s2.size(), n3=s3.size();\\n        if (n1+n2!=n3) return 0;\\n        vector<vector<int>> dp(n1+1 , vector<int>(n2+1, -1));\\n        function<int(int, int)> dfs=[&](int i, int j)->int\\n        {\\n            if (i==n1 && j==n2) return dp[i][j]=1;\\n            if (dp[i][j]!=-1) return dp[i][j];\\n            int ch_s1, ch_s2;\\n            if (i<n1 && s1[i]==s3[i+j]) ch_s1=dfs(i+1,j);\\n            if (j<n2 && s2[j]==s3[i+j]) ch_s2=dfs(i,j+1);\\n            return dp[i][j]=ch_s1||ch_s2;\\n        };\\n        return dfs(0, 0)!=0;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1 = s1.size(), n2 = s2.size(), n3 = s3.size();\\n        if (n1+n2!=n3) return 0;\\n        \\n        vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));\\n        dp[n1][n2] = 1;\\n        \\n        for (int i=n1; i >= 0; i--) {\\n            for (int j=n2; j >= 0; j--) {\\n                if (i<n1 && s1[i]==s3[i+j]) \\n                    dp[i][j] = dp[i][j] || dp[i+1][j];\\n                if (j<n2 && s2[j]==s3[i+j]) \\n                    dp[i][j] = dp[i][j] || dp[i][j+1];\\n            }\\n        }  \\n        return dp[0][0] == 1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(), n2=s2.size(), n3=s3.size();\\n        \\n        //Check if the total length of s1 and s2 is equal to the length of s3\\n        if (n1+n2!=n3) return 0;\\n        \\n        // Initialize a 2D DP array\\n        vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));\\n        \\n        // Set the base case: the last cell in the DP array is initialized as 1\\n        dp[n1][n2] = 1;\\n        \\n        //Iterate over the DP array from bottom-right to top-left\\n        for (int i=n1; i >= 0; i--) {\\n            for (int j=n2; j >= 0; j--) {\\n                //If there are characters left in s1 and the character matches s3\\n                if (i<n1 && s1[i]==s3[i+j]) \\n                    dp[i][j]=dp[i][j] || dp[i+1][j]; // Take value from the cell below\\n                \\n                //If there are characters left in s2 and the character matches s3\\n                if (j<n2 && s2[j]==s3[i+j]) \\n                    dp[i][j]=dp[i][j] || dp[i][j+1]; //Take value from the cell on the right\\n            }\\n        }  \\n\\n        // Return true if the top-left cell of the DP array is 1 \\n        return dp[0][0] == 1;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2252482,
                "title": "java-5-methods-explained",
                "content": "**Method 1:** Recursion. Gets TLE\\n* Follow binary tree approach in which we take a character from one string and check if it matches\\n* If yes, then repeat, else backtrack and try other possibilities\\n* Method 1 will have repeated sub-problems which can be optimized using memoization (method 2)\\n>**T/S:** O(2 ^ (m + n))/O(m + n), where m = size(s1), n = size(s2)\\n\\nExample:\\n![image](https://assets.leetcode.com/users/images/030aa1fc-934b-4124-824b-0bad2fe0ecee_1657227944.4161835.png)\\n\\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\treturn m + n == s3.length() && isInterleave(s1, s2, s3, m, n, 0, 0);\\n}\\n\\nprivate boolean isInterleave(String s1, String s2, String s3, int m, int n, int i, int j) {\\n\\treturn i == m && j == n // reached end of both strings, so interleaving\\n\\t\\t|| i < m && s1.charAt(i) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i + 1, j) // recurse over s1\\n\\t\\t|| j < n && s2.charAt(j) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i, j + 1); // recurse over s2\\n}\\n```\\n**Method 2:** Inject memoization in method 1. Top Down DP (Memoization)\\n>**T/S:** O(mn)/O(mn)\\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\treturn m + n == s3.length() \\n\\t\\t&& isInterleave(s1, s2, s3, m, n, 0, 0, new Boolean[m + 1][n + 1]);\\n}\\n\\nprivate boolean isInterleave(String s1, String s2, String s3, int m, int n, int i, int j, Boolean[][] memo) {\\n\\tif (i == m && j == n)\\n\\t\\treturn true;\\n\\tif (memo[i][j] != null)\\n\\t\\treturn memo[i][j];\\n\\t\\t\\n\\treturn memo[i][j] = i < m && s1.charAt(i) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i + 1, j, memo) \\n\\t\\t\\t\\t\\t || j < n && s2.charAt(j) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i, j + 1, memo);\\n}\\n```\\n**Method 3:** Top Down Tabulation version of method 2\\n* Same idea, just iterative\\n>**T/S:** O(mn)/O(mn)\\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\tif (m + n != s3.length())\\n\\t\\treturn false;\\n\\n\\tvar dp = new boolean[m + 1][n + 1];\\n\\tdp[m][n] = true;\\n\\n\\tfor (var i = m; i >= 0; i--)\\n\\t\\tfor (var j = n; j >= 0; j--)\\n\\t\\t\\tif (i < m && s1.charAt(i) == s3.charAt(i + j) && dp[i + 1][j] \\n\\t\\t\\t || j < n && s2.charAt(j) == s3.charAt(i + j) && dp[i][j + 1])\\t\\t\\t\\t\\n\\t\\t\\t\\tdp[i][j] = true;\\n\\n\\treturn dp[0][0];\\n}\\n```\\n**Method 4:** Bottom Up DP (Tabulation)\\n* For each cell consider only the strings upto that point\\n* For the top left corner, both strings are empty and interleave to empty portion of s2, so `isInterleave = true`\\n* For the first column s2 is considered empty and for first row s1 is considered empty. Now fill out if the corresponding letter of s1 and s3 match. Repeat for s2 and s3. E.g.\\n\\t* s1 = aabcc, s3 = aadbbcbcac, matches occur for first 2 letters so the value is true, rest are false\\n* For cell (2, 2), consider the strings s1 = aa, s2 = db, s3 = aadb\\n\\t* Check top neighbor (remove 1 char from s1), i.e. s1 = a, s2 = db. Its false, so do nothing. False is expected since a and db can\\'t be interleaved in any way to form the first 3 letters of s3 \\n\\t* Check left neighbot (remove 1 char from s2), i.e. s1 = aa, s2 = d. Its true, so check next condition. True is expected because `aa` and `d`  can be interleaved to form the first 3 letters of s3.\\n\\t\\t* Next condition is to check whether current char of s2 is the same as current char of s3, which is true since they both are b\\n\\t\\t* Since both the conditions are true, it means s1 and s2 can be interleaved to form s3, thus the value here would be true\\n* Continue doing this for complete strings s1 and s2. Value in bottom right corner will be the answer since that denotes the end of the interleaving of 2 strings\\n\\t\\t\\nExample: `s1 = aabcc, s2 = dbbca, s3 = aadbbcbcac`\\n\\n![image](https://assets.leetcode.com/users/images/ef2f6ce0-615f-4a6b-93e2-ce34fcfff488_1657228807.3073637.png)\\n\\n>**T/S:** O(mn)/O(mn)\\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\tif (m + n != s3.length())\\n\\t\\treturn false;\\n\\n\\tvar dp = new boolean[m + 1][n + 1];\\n\\tdp[0][0] = true;\\n\\n\\tfor (var i = 0; i < m && dp[i][0]; i++)\\n\\t\\tdp[i + 1][0] = s1.charAt(i) == s3.charAt(i) && dp[i][0];\\n\\n\\tfor (var j = 0; j < n && dp[0][j]; j++)\\n\\t\\tdp[0][j + 1] = s2.charAt(j) == s3.charAt(j) && dp[0][j];\\n\\n\\tfor (var i = 1; i <= m; i++)\\n\\t\\tfor (var j = 1; j <= n; j++)\\n\\t\\t\\tdp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)\\n\\t\\t\\t\\t\\t|| dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\treturn dp[m][n];\\n}\\n```\\n**Method 5:** Space optimized version of Method 3\\n* In any iteration only the current row and previous row of dp is being used, so we need only 2 rows, not m\\n>**T/S:** O(mn)/O(n)\\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\tif (m + n != s3.length())\\n\\t\\treturn false;\\n\\n\\tvar dp = new boolean[n + 1];\\n\\n\\tfor (var i = 0; i <= m; i++)\\n\\t\\tfor (var j = 0; j <= n; j++) {\\n\\t\\t\\tvar first = j != 0 && dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\t\\t\\tvar second = i != 0 && dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\tif (i == 0 && j == 0)\\n\\t\\t\\t\\tdp[j] = true;\\n\\t\\t\\telse if (i == 0)\\n\\t\\t\\t\\tdp[j] = first;\\n\\t\\t\\telse if (j == 0)\\n\\t\\t\\t\\tdp[j] = second;\\n\\t\\t\\telse\\n\\t\\t\\t\\tdp[j] = first || second;\\n\\t\\t}\\n\\treturn dp[n];\\n}\\n```\\n\\n***Please upvote if this helps***\\n",
                "solutionTags": [
                    "Java",
                    "Memoization"
                ],
                "code": "```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\treturn m + n == s3.length() && isInterleave(s1, s2, s3, m, n, 0, 0);\\n}\\n\\nprivate boolean isInterleave(String s1, String s2, String s3, int m, int n, int i, int j) {\\n\\treturn i == m && j == n // reached end of both strings, so interleaving\\n\\t\\t|| i < m && s1.charAt(i) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i + 1, j) // recurse over s1\\n\\t\\t|| j < n && s2.charAt(j) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i, j + 1); // recurse over s2\\n}\\n```\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\treturn m + n == s3.length() \\n\\t\\t&& isInterleave(s1, s2, s3, m, n, 0, 0, new Boolean[m + 1][n + 1]);\\n}\\n\\nprivate boolean isInterleave(String s1, String s2, String s3, int m, int n, int i, int j, Boolean[][] memo) {\\n\\tif (i == m && j == n)\\n\\t\\treturn true;\\n\\tif (memo[i][j] != null)\\n\\t\\treturn memo[i][j];\\n\\t\\t\\n\\treturn memo[i][j] = i < m && s1.charAt(i) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i + 1, j, memo) \\n\\t\\t\\t\\t\\t || j < n && s2.charAt(j) == s3.charAt(i + j) && isInterleave(s1, s2, s3, m, n, i, j + 1, memo);\\n}\\n```\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\tif (m + n != s3.length())\\n\\t\\treturn false;\\n\\n\\tvar dp = new boolean[m + 1][n + 1];\\n\\tdp[m][n] = true;\\n\\n\\tfor (var i = m; i >= 0; i--)\\n\\t\\tfor (var j = n; j >= 0; j--)\\n\\t\\t\\tif (i < m && s1.charAt(i) == s3.charAt(i + j) && dp[i + 1][j] \\n\\t\\t\\t || j < n && s2.charAt(j) == s3.charAt(i + j) && dp[i][j + 1])\\t\\t\\t\\t\\n\\t\\t\\t\\tdp[i][j] = true;\\n\\n\\treturn dp[0][0];\\n}\\n```\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\tif (m + n != s3.length())\\n\\t\\treturn false;\\n\\n\\tvar dp = new boolean[m + 1][n + 1];\\n\\tdp[0][0] = true;\\n\\n\\tfor (var i = 0; i < m && dp[i][0]; i++)\\n\\t\\tdp[i + 1][0] = s1.charAt(i) == s3.charAt(i) && dp[i][0];\\n\\n\\tfor (var j = 0; j < n && dp[0][j]; j++)\\n\\t\\tdp[0][j + 1] = s2.charAt(j) == s3.charAt(j) && dp[0][j];\\n\\n\\tfor (var i = 1; i <= m; i++)\\n\\t\\tfor (var j = 1; j <= n; j++)\\n\\t\\t\\tdp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)\\n\\t\\t\\t\\t\\t|| dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\treturn dp[m][n];\\n}\\n```\n```\\npublic boolean isInterleave(String s1, String s2, String s3) {\\n\\tvar m = s1.length();\\n\\tvar n = s2.length();\\n\\tif (m + n != s3.length())\\n\\t\\treturn false;\\n\\n\\tvar dp = new boolean[n + 1];\\n\\n\\tfor (var i = 0; i <= m; i++)\\n\\t\\tfor (var j = 0; j <= n; j++) {\\n\\t\\t\\tvar first = j != 0 && dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\t\\t\\tvar second = i != 0 && dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\tif (i == 0 && j == 0)\\n\\t\\t\\t\\tdp[j] = true;\\n\\t\\t\\telse if (i == 0)\\n\\t\\t\\t\\tdp[j] = first;\\n\\t\\t\\telse if (j == 0)\\n\\t\\t\\t\\tdp[j] = second;\\n\\t\\t\\telse\\n\\t\\t\\t\\tdp[j] = first || second;\\n\\t\\t}\\n\\treturn dp[n];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2250499,
                "title": "python-easiest-alternative-o-n-space-solution-beats-97-19",
                "content": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        \\n        curr_layer, next_layer = set([(-1, -1)]), set()\\n        i3 = 0\\n        \\n        while curr_layer and i3 < len(s3):\\n            for i1, i2 in curr_layer:\\n                if i1 + 1 < len(s1) and s1[i1 + 1] == s3[i3]:\\n                    next_layer.add((i1 + 1, i2))\\n                if i2 + 1 < len(s2) and s2[i2 + 1] == s3[i3]:\\n                    next_layer.add((i1, i2 + 1))\\n            curr_layer, next_layer = next_layer, set()\\n            if curr_layer:\\n                i3 += 1\\n        \\n        return i3 == len(s3)\\n```\\n\\nIn this solution, we represent all possible combinations in a graph, and each time in the loop we go down one level in depth.\\n\\nTime Complexity - ```O(M *N)```, ```37``` ms, faster than ```97.19%```\\nSpace \\u0421omplexity - ```O(N)```,  ```13.9``` MB, faster than ```98.69%```\\n\\nVisualization:\\n![image](https://assets.leetcode.com/users/images/69135256-b4d7-48aa-b7d7-266639118969_1657195236.3817675.jpeg)\\n![image](https://assets.leetcode.com/users/images/bc25a80b-242d-4548-b5b4-ee0ecd75f1dd_1657195282.757755.jpeg)",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        \\n        curr_layer, next_layer = set([(-1, -1)]), set()\\n        i3 = 0\\n        \\n        while curr_layer and i3 < len(s3):\\n            for i1, i2 in curr_layer:\\n                if i1 + 1 < len(s1) and s1[i1 + 1] == s3[i3]:\\n                    next_layer.add((i1 + 1, i2))\\n                if i2 + 1 < len(s2) and s2[i2 + 1] == s3[i3]:\\n                    next_layer.add((i1, i2 + 1))\\n            curr_layer, next_layer = next_layer, set()\\n            if curr_layer:\\n                i3 += 1\\n        \\n        return i3 == len(s3)\\n```\n```O(M *N)```\n```37```\n```97.19%```\n```O(N)```\n```13.9```\n```98.69%```",
                "codeTag": "Java"
            },
            {
                "id": 2249083,
                "title": "cpp-beats-100-runtime-and-100-memory-usage-users-simple-dp-memoization",
                "content": "![image](https://assets.leetcode.com/users/images/37f82ee7-e049-4f80-8432-e08a34b9e045_1657170763.5329103.png)\\n\\n\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        if(s1.size() + s2.size()!=s3.size()){\\n            return false;\\n        }\\n        memset(dp,-1,sizeof(dp));\\n        \\n        return fun(s1,s2,s3,0,0,0);\\n        \\n    }\\n    \\n    int dp[105][105];\\n    \\n    int fun(string& s1,string& s2,string& s3,int p1,int p2,int p3){\\n        \\n        if(p1+p2==s3.size()){\\n            return true;\\n        }\\n        \\n        if(dp[p1][p2]!=-1){\\n            return dp[p1][p2];\\n        }\\n        \\n        bool res = false;\\n        \\n        if(p1!=s1.size()&&s1[p1]==s3[p3]) res|=fun(s1,s2,s3,p1+1,p2,p3+1);\\n        if(p2!=s2.size()&&s2[p2]==s3[p3]) res|=fun(s1,s2,s3,p1,p2+1,p3+1);\\n        \\n        return dp[p1][p2]=res;\\n        \\n    }\\n    \\n};\\n```\\n\\n\\n##### Upvote !!",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Backtracking",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        if(s1.size() + s2.size()!=s3.size()){\\n            return false;\\n        }\\n        memset(dp,-1,sizeof(dp));\\n        \\n        return fun(s1,s2,s3,0,0,0);\\n        \\n    }\\n    \\n    int dp[105][105];\\n    \\n    int fun(string& s1,string& s2,string& s3,int p1,int p2,int p3){\\n        \\n        if(p1+p2==s3.size()){\\n            return true;\\n        }\\n        \\n        if(dp[p1][p2]!=-1){\\n            return dp[p1][p2];\\n        }\\n        \\n        bool res = false;\\n        \\n        if(p1!=s1.size()&&s1[p1]==s3[p3]) res|=fun(s1,s2,s3,p1+1,p2,p3+1);\\n        if(p2!=s2.size()&&s2[p2]==s3[p3]) res|=fun(s1,s2,s3,p1,p2+1,p3+1);\\n        \\n        return dp[p1][p2]=res;\\n        \\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956582,
                "title": "easy-recursion-and-memoization-cpp",
                "content": "\\n\\n# RECURSION\\n```\\nclass Solution {\\npublic:\\n    bool helper(int i,int j,int k,string &s1, string &s2, string &s3){\\n        if(i<0 && j<0 && k<0)\\n            return true;\\n        \\n        if(i>=0 && j>=0 && k>=0 && s1[i]==s3[k] && s2[j]==s3[k])\\n            return helper(i-1,j,k-1,s1,s2,s3) || helper(i,j-1,k-1,s1,s2,s3) ;\\n        else if (i>=0 && k>=0 && s1[i]==s3[k])\\n            return helper(i-1,j,k-1,s1,s2,s3);\\n        else if(j>=0 && k>=0 && s2[j] == s3[k] )\\n            return helper(i,j-1,k-1,s1,s2,s3);\\n        else\\n            return false;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length() + s2.length() != s3.length())\\n            return false;\\n\\n        return helper(s1.length()-1,s2.length()-1,s3.length()-1,s1,s2,s3);\\n    }\\n};\\n```\\n\\n\\n# MEMOIZATION\\n```\\nbool helper(int i,int j,int k,string &s1, string &s2, string &s3,vector<vector<int>> &dp){\\n        if(i<0 && j<0 && k<0)\\n            return true;\\n\\n        if(dp[i+1][j+1]!=-1)\\n            return dp[i+1][j+1];\\n        \\n        bool result = false;\\n        if(i>=0 && j>=0 && k>=0 && s1[i]==s3[k] && s2[j]==s3[k])\\n            return result = helper(i-1,j,k-1,s1,s2,s3,dp) || helper(i,j-1,k-1,s1,s2,s3,dp) ;\\n        else if (i>=0 && k>=0 && s1[i]==s3[k])\\n            return result = helper(i-1,j,k-1,s1,s2,s3,dp);\\n        else if(j>=0 && k>=0 && s2[j] == s3[k] )\\n            return result = helper(i,j-1,k-1,s1,s2,s3,dp);\\n        \\n        return dp[i+1][j+1] = result;\\n    }\\n    bool isInterleave(string &s1, string &s2, string &s3) {\\n        if(s1.length() + s2.length() != s3.length())\\n            return false;\\n        vector<vector<int>> dp(s1.length()+1,vector<int>(s2.length()+1,-1));\\n        return helper(s1.length()-1,s2.length()-1,s3.length()-1,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool helper(int i,int j,int k,string &s1, string &s2, string &s3){\\n        if(i<0 && j<0 && k<0)\\n            return true;\\n        \\n        if(i>=0 && j>=0 && k>=0 && s1[i]==s3[k] && s2[j]==s3[k])\\n            return helper(i-1,j,k-1,s1,s2,s3) || helper(i,j-1,k-1,s1,s2,s3) ;\\n        else if (i>=0 && k>=0 && s1[i]==s3[k])\\n            return helper(i-1,j,k-1,s1,s2,s3);\\n        else if(j>=0 && k>=0 && s2[j] == s3[k] )\\n            return helper(i,j-1,k-1,s1,s2,s3);\\n        else\\n            return false;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length() + s2.length() != s3.length())\\n            return false;\\n\\n        return helper(s1.length()-1,s2.length()-1,s3.length()-1,s1,s2,s3);\\n    }\\n};\\n```\n```\\nbool helper(int i,int j,int k,string &s1, string &s2, string &s3,vector<vector<int>> &dp){\\n        if(i<0 && j<0 && k<0)\\n            return true;\\n\\n        if(dp[i+1][j+1]!=-1)\\n            return dp[i+1][j+1];\\n        \\n        bool result = false;\\n        if(i>=0 && j>=0 && k>=0 && s1[i]==s3[k] && s2[j]==s3[k])\\n            return result = helper(i-1,j,k-1,s1,s2,s3,dp) || helper(i,j-1,k-1,s1,s2,s3,dp) ;\\n        else if (i>=0 && k>=0 && s1[i]==s3[k])\\n            return result = helper(i-1,j,k-1,s1,s2,s3,dp);\\n        else if(j>=0 && k>=0 && s2[j] == s3[k] )\\n            return result = helper(i,j-1,k-1,s1,s2,s3,dp);\\n        \\n        return dp[i+1][j+1] = result;\\n    }\\n    bool isInterleave(string &s1, string &s2, string &s3) {\\n        if(s1.length() + s2.length() != s3.length())\\n            return false;\\n        vector<vector<int>> dp(s1.length()+1,vector<int>(s2.length()+1,-1));\\n        return helper(s1.length()-1,s2.length()-1,s3.length()-1,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2130468,
                "title": "python-recursion-with-dp-with-added-comments",
                "content": "# Interleaving Strings solution\\n\\n\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        \\'\\'\\' base condition, if sum of the length of given strings, \\n\\t\\ts1 and s2 are not equal to length of the \\'interleaved\\' string,\\n\\t\\tthen The required string s3 cannot be formed by completely using s1 and s2\\'\\'\\'\\n        if len(s1)+len(s2) != len(s3):\\n            return False\\n        \\n        dp ={}\\n        \\n        \\n        def construct(p1,p2,ind):\\n            if ind == len(s3):\\n                return True\\n            \\n            if (p1,p2) in dp:\\n                return dp[(p1,p2)]\\n            \\n            \\n            \\n            # if the s1 has been traversed or the pointer at s1 doesnt match\\n            if p1>=len(s1) or s1[p1] != s3[ind]:\\n                \\n                # if s2 has not been traversed completely but still pointer is not matchin\\n                if p2<len(s2) and s2[p2]!=s3[ind]:\\n                    return False\\n                \\n                # both s1 and s2 has been traversed\\n                elif p2>=len(s2):return False\\n                \\n                # else a match is found in s2 so inc pointers to s2 and the req string\\n                dp[(p1,p2)] = construct(p1,p2+1,ind+1)\\n            \\n            \\n            # doing the same for p2\\n            elif p2>= len(s2) or s2[p2] != s3[ind]:\\n                \\n                if s1[p1] != s3[ind]: return False\\n                \\n                \\n                dp[(p1,p2)] = construct(p1+1,p2,ind+1)\\n    \\n            # in this case we have matches in both s1 and s2 so you can traverse along either of the path\\n            elif s1[p1] == s3[ind] and s2[p2] == s3[ind]:\\n                dp[(p1,p2)] = construct(p1+1,p2,ind+1) or construct(p1,p2+1,ind+1)\\n            \\n            return dp[(p1,p2)]\\n        \\n        return construct(0,0,0)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        \\'\\'\\' base condition, if sum of the length of given strings, \\n\\t\\ts1 and s2 are not equal to length of the \\'interleaved\\' string,\\n\\t\\tthen The required string s3 cannot be formed by completely using s1 and s2\\'\\'\\'\\n        if len(s1)+len(s2) != len(s3):\\n            return False\\n        \\n        dp ={}\\n        \\n        \\n        def construct(p1,p2,ind):\\n            if ind == len(s3):\\n                return True\\n            \\n            if (p1,p2) in dp:\\n                return dp[(p1,p2)]\\n            \\n            \\n            \\n            # if the s1 has been traversed or the pointer at s1 doesnt match\\n            if p1>=len(s1) or s1[p1] != s3[ind]:\\n                \\n                # if s2 has not been traversed completely but still pointer is not matchin\\n                if p2<len(s2) and s2[p2]!=s3[ind]:\\n                    return False\\n                \\n                # both s1 and s2 has been traversed\\n                elif p2>=len(s2):return False\\n                \\n                # else a match is found in s2 so inc pointers to s2 and the req string\\n                dp[(p1,p2)] = construct(p1,p2+1,ind+1)\\n            \\n            \\n            # doing the same for p2\\n            elif p2>= len(s2) or s2[p2] != s3[ind]:\\n                \\n                if s1[p1] != s3[ind]: return False\\n                \\n                \\n                dp[(p1,p2)] = construct(p1+1,p2,ind+1)\\n    \\n            # in this case we have matches in both s1 and s2 so you can traverse along either of the path\\n            elif s1[p1] == s3[ind] and s2[p2] == s3[ind]:\\n                dp[(p1,p2)] = construct(p1+1,p2,ind+1) or construct(p1,p2+1,ind+1)\\n            \\n            return dp[(p1,p2)]\\n        \\n        return construct(0,0,0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1450701,
                "title": "simple-python-o-mn-dynamic-programming-solution",
                "content": "```Python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s3) != len(s1)+len(s2):\\n            return False\\n        # state: dp[i][j] denote whether the first i+j letters in s3 is a \\n        # interleaving of the first i elements in s1 and the first j\\n        # elements in s2\\n        n, m = len(s1), len(s2)\\n        dp = [[False]*(m+1) for _ in range(n+1)]\\n        \\n        # initialization: fill in the first row and column\\n        dp[0][0] = True\\n        for i in range(1, n+1):\\n            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\\n        for i in range(1, m+1):\\n            dp[0][i] = dp[0][i-1] and s2[i-1] == s3[i-1]\\n        \\n        # state transition: matching last character in s1 and s2 with that\\n        # of s3\\n        for i in range(1, n+1):\\n            for j in range(1, m+1):\\n                if s1[i-1] == s3[i+j-1]:         # s3[:3] = \"abc\", s1[2] = \\'c\\'\\n                    dp[i][j] = dp[i-1][j]\\n                if s2[j-1] == s3[i+j-1]:         # s3[:3] = \"abc\", s2[2] = \\'c\\'\\n                    dp[i][j] = dp[i][j] or dp[i][j-1]\\n            \\n        # result: whether entire s3 is an interleaving of entire s1 and s2\\n        return dp[-1][-1]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```Python\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s3) != len(s1)+len(s2):\\n            return False\\n        # state: dp[i][j] denote whether the first i+j letters in s3 is a \\n        # interleaving of the first i elements in s1 and the first j\\n        # elements in s2\\n        n, m = len(s1), len(s2)\\n        dp = [[False]*(m+1) for _ in range(n+1)]\\n        \\n        # initialization: fill in the first row and column\\n        dp[0][0] = True\\n        for i in range(1, n+1):\\n            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]\\n        for i in range(1, m+1):\\n            dp[0][i] = dp[0][i-1] and s2[i-1] == s3[i-1]\\n        \\n        # state transition: matching last character in s1 and s2 with that\\n        # of s3\\n        for i in range(1, n+1):\\n            for j in range(1, m+1):\\n                if s1[i-1] == s3[i+j-1]:         # s3[:3] = \"abc\", s1[2] = \\'c\\'\\n                    dp[i][j] = dp[i-1][j]\\n                if s2[j-1] == s3[i+j-1]:         # s3[:3] = \"abc\", s2[2] = \\'c\\'\\n                    dp[i][j] = dp[i][j] or dp[i][j-1]\\n            \\n        # result: whether entire s3 is an interleaving of entire s1 and s2\\n        return dp[-1][-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1049250,
                "title": "recursive-to-recursion-memoization-optimised-in-c",
                "content": "Recursive Solution :-\\n```\\nclass Solution {\\npublic:\\n    bool answ(string s1,int i,string s2,int j,string ans,string s3)\\n    {\\n        if(ans==s3 and i==s1.length() and j==s2.length())\\n            return true;\\n        \\n        bool a=false;\\n        \\n        if(i<s1.length())\\n            a|=answ(s1,i+1,s2,j,ans+s1[i],s3);\\n        \\n        if(j<s2.length())\\n            a|=answ(s1,i,s2,j+1,ans+s2[j],s3);\\n        \\n        return a;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3)\\n    {\\n        return answ(s1,0,s2,0,\"\",s3);\\n    }\\n};\\n```\\n\\nRecursive+Memoization Optimised :-\\n```\\nclass Solution {\\npublic:\\n    bool answ(string s1,int i,string s2,int j,string s3,int k,vector<vector<int>> &dp)\\n    {\\n        if(i==s1.length())\\n        {\\n            string a=s2.substr(j);\\n            string b=s3.substr(k);\\n            \\n            return a==b;\\n        }\\n        \\n        if(j==s2.length())\\n        {\\n            string a=s1.substr(i);\\n            string b=s3.substr(k);\\n            \\n            return a==b;\\n        }\\n        \\n        if(dp[i][j]>=0)\\n        {\\n            if(dp[i][j]==1)\\n                return true;\\n            return false;\\n        }\\n        \\n        bool ans=false;\\n        \\n        if((s3[k]==s1[i] and answ(s1,i+1,s2,j,s3,k+1,dp)) or (s3[k]==s2[j] and answ(s1,i,s2,j+1,s3,k+1,dp)))\\n            ans=true;\\n        \\n        dp[i][j]=ans?1:0;\\n        \\n        return ans;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3)\\n    {\\n        int n=s1.length();\\n        int m=s2.length();\\n        vector<vector<int>> dp(n,vector<int>(m,-1));\\n        \\n        return answ(s1,0,s2,0,s3,0,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool answ(string s1,int i,string s2,int j,string ans,string s3)\\n    {\\n        if(ans==s3 and i==s1.length() and j==s2.length())\\n            return true;\\n        \\n        bool a=false;\\n        \\n        if(i<s1.length())\\n            a|=answ(s1,i+1,s2,j,ans+s1[i],s3);\\n        \\n        if(j<s2.length())\\n            a|=answ(s1,i,s2,j+1,ans+s2[j],s3);\\n        \\n        return a;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3)\\n    {\\n        return answ(s1,0,s2,0,\"\",s3);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool answ(string s1,int i,string s2,int j,string s3,int k,vector<vector<int>> &dp)\\n    {\\n        if(i==s1.length())\\n        {\\n            string a=s2.substr(j);\\n            string b=s3.substr(k);\\n            \\n            return a==b;\\n        }\\n        \\n        if(j==s2.length())\\n        {\\n            string a=s1.substr(i);\\n            string b=s3.substr(k);\\n            \\n            return a==b;\\n        }\\n        \\n        if(dp[i][j]>=0)\\n        {\\n            if(dp[i][j]==1)\\n                return true;\\n            return false;\\n        }\\n        \\n        bool ans=false;\\n        \\n        if((s3[k]==s1[i] and answ(s1,i+1,s2,j,s3,k+1,dp)) or (s3[k]==s2[j] and answ(s1,i,s2,j+1,s3,k+1,dp)))\\n            ans=true;\\n        \\n        dp[i][j]=ans?1:0;\\n        \\n        return ans;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3)\\n    {\\n        int n=s1.length();\\n        int m=s2.length();\\n        vector<vector<int>> dp(n,vector<int>(m,-1));\\n        \\n        return answ(s1,0,s2,0,s3,0,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 617188,
                "title": "python-dp-lru-cahce-beats-97",
                "content": "```\\nfrom functools import lru_cache\\nclass Solution:\\n    @lru_cache(maxsize=None)\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if s1 == s2 == s3 == \\'\\':\\n            return True\\n        elif s3 == \\'\\' and (s1 != \\'\\' or s2 != \\'\\'):\\n            return False\\n        \\n        if s1 == \\'\\':\\n            return s2 == s3\\n        elif s2 == \\'\\':\\n            return s1 == s3\\n       \\n        if s1[0] == s2[0] == s3[0]:\\n            return self.isInterleave(s1[1:] , s2, s3[1:]) or self.isInterleave(s1 , s2[1:], s3[1:])\\n        elif s1[0] == s3[0]:\\n            return self.isInterleave(s1[1:] , s2, s3[1:])\\n        elif s2[0] == s3[0]:\\n            return self.isInterleave(s1 , s2[1:], s3[1:])\\n        else:\\n            return False\\n```\\nNo extra function required.",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```\\nfrom functools import lru_cache\\nclass Solution:\\n    @lru_cache(maxsize=None)\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if s1 == s2 == s3 == \\'\\':\\n            return True\\n        elif s3 == \\'\\' and (s1 != \\'\\' or s2 != \\'\\'):\\n            return False\\n        \\n        if s1 == \\'\\':\\n            return s2 == s3\\n        elif s2 == \\'\\':\\n            return s1 == s3\\n       \\n        if s1[0] == s2[0] == s3[0]:\\n            return self.isInterleave(s1[1:] , s2, s3[1:]) or self.isInterleave(s1 , s2[1:], s3[1:])\\n        elif s1[0] == s3[0]:\\n            return self.isInterleave(s1[1:] , s2, s3[1:])\\n        elif s2[0] == s3[0]:\\n            return self.isInterleave(s1 , s2[1:], s3[1:])\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957679,
                "title": "ex-amazon-explains-a-solution-with-python-javascript-java-and-c",
                "content": "# Intuition\\nThe problem of determining whether one string is an interleaving of two others can be approached using dynamic programming. The core intuition lies in breaking down the problem into smaller subproblems. Essentially, we want to determine if the characters from both strings, s1 and s2, can be interwoven to create the target string s3. We aim to build a dynamic programming matrix that stores the state of the interleaving at different points, helping us track the possibilities.\\n\\n# Solution Video\\n\\n### Please subscribe to my channel from here. I have 247 videos as of August 25th.\\n\\n**\\u25A0 Subscribe URL**\\nhttp://www.youtube.com/channel/UC9RMNwYTL3SXCP6ShLWVFww?sub_confirmation=1\\n\\n---\\n\\n# Approach\\nThis is based on Python. Other might be different a bit.\\n\\n1. Initialize `dp` array: Create an array `dp` of size `(len(s2) + 1)` to store whether substrings of `s1` and `s2` can interleave to form substrings of `s3`.\\n\\n2. Check total length: If the sum of the lengths of `s1` and `s2` is not equal to the length of `s3`, return `False` since it\\'s impossible for `s1` and `s2` to interleave to form `s3`.\\n\\n3. Initialization: Set `dp[0]` to `True` to indicate that an empty `s1` and empty `s2` can interleave to form an empty `s3`.\\n\\n4. Loop through `s1` and `s2`: Use nested loops to iterate through all possible combinations of substrings of `s1` and `s2` to check if they can interleave to form `s3`.\\n\\n5. Base cases handling:\\n   - If `i` is `0` and `j` is `0`, it means both `s1` and `s2` are empty. Set `dp[j]` to `True`.\\n   - If `i` is `0`, update `dp[j]` using the previous value of `dp[j - 1]` and check if the character in `s2` at index `j - 1` matches the character in `s3` at index `i + j - 1`.\\n   - If `j` is `0`, update `dp[j]` using the current value of `dp[j]` and check if the character in `s1` at index `i - 1` matches the character in `s3` at index `i + j - 1`.\\n\\n6. General case:\\n   - For all other cases (when both `i` and `j` are not `0`), update `dp[j]` using the following conditions:\\n     - `dp[j]` should be the result of `(dp[j] and s1[i - 1] == s3[i + j - 1])`, meaning that the current character in `s1` matches the current character in `s3`, and the previous substring also interleave to form the previous part of `s3`.\\n     - `dp[j - 1]` should be the result of `(dp[j - 1] and s2[j - 1] == s3[i + j - 1])`, meaning that the current character in `s2` matches the current character in `s3`, and the previous substring of `s2` can interleave to form the previous part of `s3`.\\n\\n7. Return result: The final result is stored in `dp[len(s2)]`, which indicates whether `s1` and `s2` can interleave to form `s3`.\\n\\n8. The function returns the value of `dp[len(s2)]` as the final result.\\n\\nIn summary, the algorithm uses dynamic programming to determine whether substrings of `s1` and `s2` can be interleaved to form substrings of `s3`. The `dp` array stores whether the substrings can interleave at each position.\\n\\n# Complexity\\n- Time complexity: O(m * n)\\nm is the length of string s1 and n is the length of string s2. This is because we iterate through each character of s1 and s2 once while constructing the dynamic programming matrix.\\n\\n- Space complexity: O(n),\\nn is the length of string s2. We only use a dynamic programming array of length n+1 to store the state transitions.\\n\\n```python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        # Check if the combined length of s1 and s2 matches the length of s3\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        \\n        # Initialize a dynamic programming array dp\\n        # dp[j] will store whether s1[0:i] and s2[0:j] can form s3[0:i+j]\\n        dp = [False] * (len(s2) + 1)\\n        \\n        for i in range(len(s1) + 1):\\n            for j in range(len(s2) + 1):\\n                if i == 0 and j == 0:\\n                    # Base case: Both s1 and s2 are empty, so s3 is also empty.\\n                    # Set dp[j] to True.\\n                    dp[j] = True\\n                elif i == 0:\\n                    # Base case: s1 is empty, so check if the previous dp[j-1]\\n                    # is True and if s2[j-1] matches s3[i+j-1].\\n                    dp[j] = dp[j - 1] and s2[j - 1] == s3[i + j - 1]\\n                elif j == 0:\\n                    # Base case: s2 is empty, so check if the current dp[j]\\n                    # is True and if s1[i-1] matches s3[i+j-1].\\n                    dp[j] = dp[j] and s1[i - 1] == s3[i + j - 1]\\n                else:\\n                    # General case: Check if either the previous dp[j] or dp[j-1]\\n                    # is True and if the corresponding characters match s3[i+j-1].\\n                    dp[j] = (dp[j] and s1[i - 1] == s3[i + j - 1]) or (dp[j - 1] and s2[j - 1] == s3[i + j - 1])\\n\\n        # Return the result stored in dp[len(s2)], which indicates whether\\n        # s1 and s2 can form s3 by interleaving characters.\\n        return dp[len(s2)]\\n\\n```\\n```javascript []\\n/**\\n * @param {string} s1\\n * @param {string} s2\\n * @param {string} s3\\n * @return {boolean}\\n */\\nvar isInterleave = function(s1, s2, s3) {\\n    if (s1.length + s2.length !== s3.length) {\\n        return false;\\n    }\\n    \\n    const dp = new Array(s2.length + 1).fill(false);\\n    \\n    for (let i = 0; i <= s1.length; i++) {\\n        for (let j = 0; j <= s2.length; j++) {\\n            if (i === 0 && j === 0) {\\n                dp[j] = true;\\n            } else if (i === 0) {\\n                dp[j] = dp[j - 1] && s2[j - 1] === s3[i + j - 1];\\n            } else if (j === 0) {\\n                dp[j] = dp[j] && s1[i - 1] === s3[i + j - 1];\\n            } else {\\n                dp[j] = (dp[j] && s1[i - 1] === s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] === s3[i + j - 1]);\\n            }\\n        }\\n    }\\n    \\n    return dp[s2.length];    \\n};\\n```\\n```java []\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        boolean[] dp = new boolean[s2.length() + 1];\\n        \\n        for (int i = 0; i <= s1.length(); i++) {\\n            for (int j = 0; j <= s2.length(); j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[j] = true;\\n                } else if (i == 0) {\\n                    dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n                } else if (j == 0) {\\n                    dp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n                } else {\\n                    dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n                }\\n            }\\n        }\\n        \\n        return dp[s2.length()];        \\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        vector<bool> dp(s2.length() + 1, false);\\n        \\n        for (int i = 0; i <= s1.length(); i++) {\\n            for (int j = 0; j <= s2.length(); j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[j] = true;\\n                } else if (i == 0) {\\n                    dp[j] = dp[j - 1] && s2[j - 1] == s3[i + j - 1];\\n                } else if (j == 0) {\\n                    dp[j] = dp[j] && s1[i - 1] == s3[i + j - 1];\\n                } else {\\n                    dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                }\\n            }\\n        }\\n        \\n        return dp[s2.length()];        \\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "JavaScript"
                ],
                "code": "```python []\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        # Check if the combined length of s1 and s2 matches the length of s3\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        \\n        # Initialize a dynamic programming array dp\\n        # dp[j] will store whether s1[0:i] and s2[0:j] can form s3[0:i+j]\\n        dp = [False] * (len(s2) + 1)\\n        \\n        for i in range(len(s1) + 1):\\n            for j in range(len(s2) + 1):\\n                if i == 0 and j == 0:\\n                    # Base case: Both s1 and s2 are empty, so s3 is also empty.\\n                    # Set dp[j] to True.\\n                    dp[j] = True\\n                elif i == 0:\\n                    # Base case: s1 is empty, so check if the previous dp[j-1]\\n                    # is True and if s2[j-1] matches s3[i+j-1].\\n                    dp[j] = dp[j - 1] and s2[j - 1] == s3[i + j - 1]\\n                elif j == 0:\\n                    # Base case: s2 is empty, so check if the current dp[j]\\n                    # is True and if s1[i-1] matches s3[i+j-1].\\n                    dp[j] = dp[j] and s1[i - 1] == s3[i + j - 1]\\n                else:\\n                    # General case: Check if either the previous dp[j] or dp[j-1]\\n                    # is True and if the corresponding characters match s3[i+j-1].\\n                    dp[j] = (dp[j] and s1[i - 1] == s3[i + j - 1]) or (dp[j - 1] and s2[j - 1] == s3[i + j - 1])\\n\\n        # Return the result stored in dp[len(s2)], which indicates whether\\n        # s1 and s2 can form s3 by interleaving characters.\\n        return dp[len(s2)]\\n\\n```\n```javascript []\\n/**\\n * @param {string} s1\\n * @param {string} s2\\n * @param {string} s3\\n * @return {boolean}\\n */\\nvar isInterleave = function(s1, s2, s3) {\\n    if (s1.length + s2.length !== s3.length) {\\n        return false;\\n    }\\n    \\n    const dp = new Array(s2.length + 1).fill(false);\\n    \\n    for (let i = 0; i <= s1.length; i++) {\\n        for (let j = 0; j <= s2.length; j++) {\\n            if (i === 0 && j === 0) {\\n                dp[j] = true;\\n            } else if (i === 0) {\\n                dp[j] = dp[j - 1] && s2[j - 1] === s3[i + j - 1];\\n            } else if (j === 0) {\\n                dp[j] = dp[j] && s1[i - 1] === s3[i + j - 1];\\n            } else {\\n                dp[j] = (dp[j] && s1[i - 1] === s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] === s3[i + j - 1]);\\n            }\\n        }\\n    }\\n    \\n    return dp[s2.length];    \\n};\\n```\n```java []\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        boolean[] dp = new boolean[s2.length() + 1];\\n        \\n        for (int i = 0; i <= s1.length(); i++) {\\n            for (int j = 0; j <= s2.length(); j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[j] = true;\\n                } else if (i == 0) {\\n                    dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n                } else if (j == 0) {\\n                    dp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n                } else {\\n                    dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n                }\\n            }\\n        }\\n        \\n        return dp[s2.length()];        \\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        vector<bool> dp(s2.length() + 1, false);\\n        \\n        for (int i = 0; i <= s1.length(); i++) {\\n            for (int j = 0; j <= s2.length(); j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[j] = true;\\n                } else if (i == 0) {\\n                    dp[j] = dp[j - 1] && s2[j - 1] == s3[i + j - 1];\\n                } else if (j == 0) {\\n                    dp[j] = dp[j] && s1[i - 1] == s3[i + j - 1];\\n                } else {\\n                    dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1]) || (dp[j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                }\\n            }\\n        }\\n        \\n        return dp[s2.length()];        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957330,
                "title": "recursion-best-optimization-4-steps-of-optimization-c-dp",
                "content": "*Note:-* Refer the last stage of this solution for *best optimization code*, else move step by step optimization for better understanding.\\n\\n\\n# 1. Naive Recursive approach \\n- **Time complexity: O(2^o)**\\nThe function f is a recursive function that explores various possibilities of interleaving s1 and s2 to form s3. In the worst case, each recursive call results in two new recursive calls, as shown in the code. Therefore, the number of recursive calls grows exponentially with the length of the strings. The maximum depth of the recursion tree will be o, the length of string s3, since each recursive call reduces the length of s3 by 1. So, the time complexity of this algorithm can be approximated as O(2^o), where o is the length of the target string s3.\\n- **Space complexity: O(o)**\\nThe space complexity is determined by the maximum depth of the recursive call stack. At any point in time, the maximum number of active recursive calls corresponds to the depth of the recursion tree. Since each recursive call only involves a few additional variables and constant space complexity operations, the dominant factor here is the recursion stack space. Therefore, the space complexity is O(o), where o is the length of the target string s3.\\n```\\nclass Solution {\\npublic:\\n    bool f(int m, int n, int o, string &s1, string &s2, string &s3){\\n        if(o==0) return true;\\n        if(m==0 && n==0) return false;\\n        if(m>0 && n>0 && s1[m-1]==s3[o-1] && s2[n-1]==s3[o-1]){\\n            return f(m-1, n, o-1, s1, s2, s3) || f(m, n-1, o-1, s1, s2, s3);\\n        }\\n        else if(n>0 && s2[n-1]==s3[o-1]){\\n            return f(m, n-1, o-1, s1, s2, s3);\\n        }\\n        else if(m>0 && s1[m-1]==s3[o-1]){\\n            return f(m-1, n, o-1, s1, s2, s3);\\n        }\\n        else return false;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        string s;\\n        int m=s1.size();\\n        int n=s2.size();\\n        int o=s3.size();\\n        if(m+n!=o) return false;\\n        return f(m, n, o, s1, s2, s3);\\n    }\\n};\\n```\\n# 2. Memoization(DP)\\n- Time complexity: O(m*n)\\n- Space complexity: O(m*n)\\n\\n```\\nclass Solution {\\npublic:\\n    bool f(int m, int n, int o, string &s1, string &s2, string &s3, vector<vector<int>>&dp){\\n        if(o==0) return true;\\n        if(m==0 && n==0) return false;\\n        if(dp[m][n]!=-1) return dp[m][n];\\n        if(m>0 && n>0 && s1[m-1]==s3[o-1] && s2[n-1]==s3[o-1]){\\n            return dp[m][n] = f(m-1, n, o-1, s1, s2, s3, dp) || f(m, n-1, o-1, s1, s2, s3, dp);\\n        }\\n        else if(n>0 && s2[n-1]==s3[o-1]){\\n            return dp[m][n] = f(m, n-1, o-1, s1, s2, s3, dp);\\n        }\\n        else if(m>0 && s1[m-1]==s3[o-1]){\\n            return dp[m][n] = f(m-1, n, o-1, s1, s2, s3, dp);\\n        }\\n        else return false;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        string s;\\n        int m=s1.size();\\n        int n=s2.size();\\n        int o=s3.size();\\n        if(m+n!=o) return false;\\n        vector<vector<int>>dp(m+1, vector<int>(n+1, -1));\\n        return f(m, n, o, s1, s2, s3, dp);\\n    }\\n};\\n```\\n\\n# 3. Tabulation(DP)\\n- Time complexity: O(m*n)\\n- Space complexity: O(m*n)\\n\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int o = s3.size();\\n        \\n        if (m + n != o) return false;\\n        \\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1));\\n        dp[0][0] = true;  // Base case\\n        \\n        for (int i = 0; i <= m; i++) {\\n            for (int j = 0; j <= n; j++) {\\n                int k = i + j - 1;  // Adjusted index for s3\\n                \\n                if (i > 0 && s1[i - 1] == s3[k])\\n                    dp[i][j] = dp[i][j] || dp[i - 1][j];\\n                if (j > 0 && s2[j - 1] == s3[k])\\n                    dp[i][j] = dp[i][j] || dp[i][j - 1];\\n            }\\n        }\\n        \\n        return dp[m][n];\\n    }\\n};\\n```\\n\\n# 4. Optimized Space (BEST Approach)\\n- Time complexity: O(m*n)\\n- Space complexity: O(n)\\n\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int o = s3.size();\\n        \\n        if (m+n!=o) return false;\\n        \\n        vector<bool> dp(n + 1);\\n        dp[0]=true;  // Base case\\n        \\n        for (int i=0;i<=m;i++) {\\n            for (int j=0;j<=n;j++) {\\n                int k=i+j-1;  // Adjusted index for s3\\n                \\n                if(i>0)\\n                    dp[j]=dp[j] && s1[i-1] == s3[k];\\n                if (j > 0)\\n                    dp[j]=dp[j] || (dp[j-1] && s2[j-1] == s3[k]);\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool f(int m, int n, int o, string &s1, string &s2, string &s3){\\n        if(o==0) return true;\\n        if(m==0 && n==0) return false;\\n        if(m>0 && n>0 && s1[m-1]==s3[o-1] && s2[n-1]==s3[o-1]){\\n            return f(m-1, n, o-1, s1, s2, s3) || f(m, n-1, o-1, s1, s2, s3);\\n        }\\n        else if(n>0 && s2[n-1]==s3[o-1]){\\n            return f(m, n-1, o-1, s1, s2, s3);\\n        }\\n        else if(m>0 && s1[m-1]==s3[o-1]){\\n            return f(m-1, n, o-1, s1, s2, s3);\\n        }\\n        else return false;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        string s;\\n        int m=s1.size();\\n        int n=s2.size();\\n        int o=s3.size();\\n        if(m+n!=o) return false;\\n        return f(m, n, o, s1, s2, s3);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool f(int m, int n, int o, string &s1, string &s2, string &s3, vector<vector<int>>&dp){\\n        if(o==0) return true;\\n        if(m==0 && n==0) return false;\\n        if(dp[m][n]!=-1) return dp[m][n];\\n        if(m>0 && n>0 && s1[m-1]==s3[o-1] && s2[n-1]==s3[o-1]){\\n            return dp[m][n] = f(m-1, n, o-1, s1, s2, s3, dp) || f(m, n-1, o-1, s1, s2, s3, dp);\\n        }\\n        else if(n>0 && s2[n-1]==s3[o-1]){\\n            return dp[m][n] = f(m, n-1, o-1, s1, s2, s3, dp);\\n        }\\n        else if(m>0 && s1[m-1]==s3[o-1]){\\n            return dp[m][n] = f(m-1, n, o-1, s1, s2, s3, dp);\\n        }\\n        else return false;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        string s;\\n        int m=s1.size();\\n        int n=s2.size();\\n        int o=s3.size();\\n        if(m+n!=o) return false;\\n        vector<vector<int>>dp(m+1, vector<int>(n+1, -1));\\n        return f(m, n, o, s1, s2, s3, dp);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int o = s3.size();\\n        \\n        if (m + n != o) return false;\\n        \\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1));\\n        dp[0][0] = true;  // Base case\\n        \\n        for (int i = 0; i <= m; i++) {\\n            for (int j = 0; j <= n; j++) {\\n                int k = i + j - 1;  // Adjusted index for s3\\n                \\n                if (i > 0 && s1[i - 1] == s3[k])\\n                    dp[i][j] = dp[i][j] || dp[i - 1][j];\\n                if (j > 0 && s2[j - 1] == s3[k])\\n                    dp[i][j] = dp[i][j] || dp[i][j - 1];\\n            }\\n        }\\n        \\n        return dp[m][n];\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int o = s3.size();\\n        \\n        if (m+n!=o) return false;\\n        \\n        vector<bool> dp(n + 1);\\n        dp[0]=true;  // Base case\\n        \\n        for (int i=0;i<=m;i++) {\\n            for (int j=0;j<=n;j++) {\\n                int k=i+j-1;  // Adjusted index for s3\\n                \\n                if(i>0)\\n                    dp[j]=dp[j] && s1[i-1] == s3[k];\\n                if (j > 0)\\n                    dp[j]=dp[j] || (dp[j-1] && s2[j-1] == s3[k]);\\n            }\\n        }\\n        \\n        return dp[n];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957222,
                "title": "dp-solution-explanation-by-comment",
                "content": "# Intuition\\nThis code uses a dynamic programming approach to fill in a 2D table dp, where **dp[i][j]** represents whether the first **i** characters from **s1** and the first **j** characters from **s2** can form the first **i+j** characters of **s3**. The recurrence relation used is based on the idea that for **dp[i][j]** to be true, either the character from s1 should match the current character of s3, and the previous state should also be true, or the character from **s2** should match the current character of **s3**, and the current state in the previous column should be true.\\n\\n# Complexity\\n- Time complexity:O(n * m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n * m)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.size();\\n        int m = s2.size();\\n        \\n        if (n + m != s3.size()) {\\n            return false;\\n        }\\n        \\n        vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));\\n        \\n        // Base case: Empty strings interleave to form an empty string\\n        dp[0][0] = true;\\n        \\n        // Initialize the first row (s1) and first column (s2)\\n        for (int i = 1; i <= n; ++i) {\\n            dp[i][0] = dp[i - 1][0] && s1[i - 1] == s3[i - 1];\\n        }\\n        \\n        for (int j = 1; j <= m; ++j) {\\n            dp[0][j] = dp[0][j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n        \\n        // Fill in the DP table\\n        for (int i = 1; i <= n; ++i) {\\n            for (int j = 1; j <= m; ++j) {\\n                dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||\\n                           (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        return dp[n][m];\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.size();\\n        int m = s2.size();\\n        \\n        if (n + m != s3.size()) {\\n            return false;\\n        }\\n        \\n        vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));\\n        \\n        // Base case: Empty strings interleave to form an empty string\\n        dp[0][0] = true;\\n        \\n        // Initialize the first row (s1) and first column (s2)\\n        for (int i = 1; i <= n; ++i) {\\n            dp[i][0] = dp[i - 1][0] && s1[i - 1] == s3[i - 1];\\n        }\\n        \\n        for (int j = 1; j <= m; ++j) {\\n            dp[0][j] = dp[0][j - 1] && s2[j - 1] == s3[j - 1];\\n        }\\n        \\n        // Fill in the DP table\\n        for (int i = 1; i <= n; ++i) {\\n            for (int j = 1; j <= m; ++j) {\\n                dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||\\n                           (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n        \\n        return dp[n][m];\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2250660,
                "title": "c-recursion-memoization-tabulation-space-optimization-o-n-space-with-intuition",
                "content": "I have renamed Input Strings in my code\\na=s1,b=s2 and ist i.e Interleaved STring =s3\\n\\nRecursion:\\nTime complexity :Exponential\\nSpace complexity: O(N+M) (Auxiliary Stack Space)\\nCode:\\n```\\nbool rec(string &a, string &b, string &ist, int i = 0, int j = 0, int k = 0)\\n{\\nint n = a.length(), m = b.length();\\nif (n + m != ist.length())\\nreturn false;\\nif (i == n && j == m)\\n    return true; // base case\\n\\nbool left, right;\\nleft = i < n ? a[i] == ist[k] : false;\\nright = j < m ? b[j] == ist[k] : false;\\n\\nif (left && right)\\n    return rec(a, b, ist, i + 1, j, k + 1) || rec(a, b, ist, i, j + 1, k + 1);\\n\\nelse if (left)\\n    return rec(a, b, ist, i + 1, j, k + 1);\\n\\nelse if (right)\\n    return rec(a, b, ist, i, j + 1, k + 1);\\n\\nelse\\n    return false;\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nreturn rec(s1, s2, s3);\\n}\\n```\\n\\nMemoization:\\nTime Complexity:O(N^M)\\nSpace Complexity: O(N+M)(Auxiliary Space) +O(N^M) (2D DP Vector)\\nCode:\\n\\n```\\nbool mem(string &a, string &b, string &ist, vector<vector> &dp, int i = 0, int j = 0, int k = 0)\\n{\\nint n = a.length(), m = b.length();\\nif (n + m != ist.length())\\nreturn false;\\nif (i == n && j == m)\\n    return true; // base case\\n\\nif (dp[i][j] != -1)\\n    return dp[i][j];\\n\\nbool left, right;\\nleft = i < n ? a[i] == ist[k] : false;\\nright = j < m ? b[j] == ist[k] : false;\\n\\nif (left && right)\\n    return dp[i][j] = mem(a, b, ist, dp, i + 1, j, k + 1) || mem(a, b, ist, dp, i, j + 1, k + 1);\\n\\nelse if (left)\\n    return dp[i][j] = mem(a, b, ist, dp, i + 1, j, k + 1);\\n\\nelse if (right)\\n    return dp[i][j] = mem(a, b, ist, dp, i, j + 1, k + 1);\\n\\nelse\\n    return dp[i][j] = false;\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nint n = s1.length(), m = s2.length();\\nvector<vector> dp(n + 1, vector(m + 1, -1));\\nreturn mem(s1, s2, s3, dp);\\n}\\n\\n```\\n\\nTabulation:\\nTime Complexity: O(N^M)\\nSpace Complexity: O(N^M) (2D DP Vector)\\nCode:\\n\\n```\\nbool tabulation(string& a,string& b,string& ist)\\n{\\nint m = b.length(), n = a.length();\\nif (m + n != ist.length())\\nreturn false;\\nvector<vector<bool>> dp(n+1,vector<bool>(m+1,true));\\n\\nfor (int j = m - 1; j >= 0; j--)\\n{\\n    if (b[j] == ist[n + j])\\n        dp[n][j] = dp[n][j+1];\\n    else\\n        dp[n][j] = false;\\n} // base case i==n\\n\\nfor (int i = n - 1; i >= 0; i--)\\n{\\n    dp[i][m] = a[i] == ist[m + i];\\n\\n    for (int j = m - 1; j >= 0; j--)\\n    {\\n        bool left, right;\\n        left = a[i] == ist[i + j];\\n        right = b[j] == ist[i + j];\\n\\n        if (left && right)\\n            dp[i][j] = dp[i+1][j] || dp[i][j+1];\\n\\n        else if (right)\\n            dp[i][j] = dp[i][j+1];\\n\\n        else if(left)\\n            dp[i][j]=dp[i+1][j];\\n\\n        else\\n            dp[i][j] = false;\\n    }\\n}\\n\\nreturn dp[0][0];\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nreturn tabulation(s1, s2, s3);\\n}\\n\\n```\\n\\nSpace-optimization:\\nTime Complexity:O(N^M)\\nSpace Complexity:O(M) (Only a prev 1D vector used of size M i.e s2.length())\\nFollow Up Question Solved\\nCode:\\n\\n```\\nbool sop(string &a, string &b, string &ist)\\n{\\nint m = b.length(), n = a.length();\\nif (m + n != ist.length())\\nreturn false;\\nvector<bool> prev(m + 1, true);\\n\\nfor (int j = m - 1; j >= 0; j--)\\n{\\n    if (b[j] == ist[n + j])\\n        prev[j] = prev[j + 1];\\n    else\\n        prev[j] = false;\\n} // base case i==n\\n\\nfor (int i = n - 1; i >= 0; i--)\\n{\\n    prev[m] = a[i] == ist[m + i];\\n\\n    for (int j = m - 1; j >= 0; j--)\\n    {\\n        bool left, right;\\n        left = a[i] == ist[i + j];\\n        right = b[j] == ist[i + j];\\n\\n        if (left && right)\\n            prev[j] = prev[j] || prev[j + 1];\\n\\n        else if (right)\\n            prev[j] = prev[j + 1];\\n\\n        else if (!left)\\n            prev[j] = false;\\n    }\\n}\\n\\nreturn prev[0];\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nreturn sop(s1, s2, s3);\\n}\\n\\n```\\n\\nComplete Intuition for space optimization:-\\nThis prev array is a dp array only, but if we observer in tabulation that for filling dp[i] we are only requiring dp[i+1] and not any further. So, I thought why not only store only dp[i+1] and keep updating it for every i.\\nNow we could keep current i.e dp[i] and previous i.e dp[i+1]  but here also i tried to optimize and keeping only one i.e previous.\\nwe see that while filling dp[i][j] we are needing either dp[i][j+1](will come from current hence needs to be computed before,hence we go from j=m ->j=0) or dp[i+1][j](will come from previous). Now compare it to filling for each ith row prev[j] , we know prev[j+1] is already computed,and just before filling prev[j] value in it is prev[j],but for i+1 th row (dp[i+1][j]), and these were the two needed for prev[j].\\nThis was all intuition.\\n\\nIf you find this solution helpful , plz upvote.\\nAnd would love to hear about flaws in code in comment section.\\nThanks for reading.\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nbool rec(string &a, string &b, string &ist, int i = 0, int j = 0, int k = 0)\\n{\\nint n = a.length(), m = b.length();\\nif (n + m != ist.length())\\nreturn false;\\nif (i == n && j == m)\\n    return true; // base case\\n\\nbool left, right;\\nleft = i < n ? a[i] == ist[k] : false;\\nright = j < m ? b[j] == ist[k] : false;\\n\\nif (left && right)\\n    return rec(a, b, ist, i + 1, j, k + 1) || rec(a, b, ist, i, j + 1, k + 1);\\n\\nelse if (left)\\n    return rec(a, b, ist, i + 1, j, k + 1);\\n\\nelse if (right)\\n    return rec(a, b, ist, i, j + 1, k + 1);\\n\\nelse\\n    return false;\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nreturn rec(s1, s2, s3);\\n}\\n```\n```\\nbool mem(string &a, string &b, string &ist, vector<vector> &dp, int i = 0, int j = 0, int k = 0)\\n{\\nint n = a.length(), m = b.length();\\nif (n + m != ist.length())\\nreturn false;\\nif (i == n && j == m)\\n    return true; // base case\\n\\nif (dp[i][j] != -1)\\n    return dp[i][j];\\n\\nbool left, right;\\nleft = i < n ? a[i] == ist[k] : false;\\nright = j < m ? b[j] == ist[k] : false;\\n\\nif (left && right)\\n    return dp[i][j] = mem(a, b, ist, dp, i + 1, j, k + 1) || mem(a, b, ist, dp, i, j + 1, k + 1);\\n\\nelse if (left)\\n    return dp[i][j] = mem(a, b, ist, dp, i + 1, j, k + 1);\\n\\nelse if (right)\\n    return dp[i][j] = mem(a, b, ist, dp, i, j + 1, k + 1);\\n\\nelse\\n    return dp[i][j] = false;\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nint n = s1.length(), m = s2.length();\\nvector<vector> dp(n + 1, vector(m + 1, -1));\\nreturn mem(s1, s2, s3, dp);\\n}\\n\\n```\n```\\nbool tabulation(string& a,string& b,string& ist)\\n{\\nint m = b.length(), n = a.length();\\nif (m + n != ist.length())\\nreturn false;\\nvector<vector<bool>> dp(n+1,vector<bool>(m+1,true));\\n\\nfor (int j = m - 1; j >= 0; j--)\\n{\\n    if (b[j] == ist[n + j])\\n        dp[n][j] = dp[n][j+1];\\n    else\\n        dp[n][j] = false;\\n} // base case i==n\\n\\nfor (int i = n - 1; i >= 0; i--)\\n{\\n    dp[i][m] = a[i] == ist[m + i];\\n\\n    for (int j = m - 1; j >= 0; j--)\\n    {\\n        bool left, right;\\n        left = a[i] == ist[i + j];\\n        right = b[j] == ist[i + j];\\n\\n        if (left && right)\\n            dp[i][j] = dp[i+1][j] || dp[i][j+1];\\n\\n        else if (right)\\n            dp[i][j] = dp[i][j+1];\\n\\n        else if(left)\\n            dp[i][j]=dp[i+1][j];\\n\\n        else\\n            dp[i][j] = false;\\n    }\\n}\\n\\nreturn dp[0][0];\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nreturn tabulation(s1, s2, s3);\\n}\\n\\n```\n```\\nbool sop(string &a, string &b, string &ist)\\n{\\nint m = b.length(), n = a.length();\\nif (m + n != ist.length())\\nreturn false;\\nvector<bool> prev(m + 1, true);\\n\\nfor (int j = m - 1; j >= 0; j--)\\n{\\n    if (b[j] == ist[n + j])\\n        prev[j] = prev[j + 1];\\n    else\\n        prev[j] = false;\\n} // base case i==n\\n\\nfor (int i = n - 1; i >= 0; i--)\\n{\\n    prev[m] = a[i] == ist[m + i];\\n\\n    for (int j = m - 1; j >= 0; j--)\\n    {\\n        bool left, right;\\n        left = a[i] == ist[i + j];\\n        right = b[j] == ist[i + j];\\n\\n        if (left && right)\\n            prev[j] = prev[j] || prev[j + 1];\\n\\n        else if (right)\\n            prev[j] = prev[j + 1];\\n\\n        else if (!left)\\n            prev[j] = false;\\n    }\\n}\\n\\nreturn prev[0];\\n}\\nbool isInterleave(string s1, string s2, string s3)\\n{\\nreturn sop(s1, s2, s3);\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2248790,
                "title": "easy-memoization-c-code",
                "content": "intuition:- we compair first element of both of s1 and s2 with s3 if match ind1 of s1 with current  index of then we go forword with ind1+1 and next index of s3 and same for s2.\\n \\n    bool isInterleave(string s1, string s2, string s3) {\\n       if(s1.size()+s2.size()!=s3.size()) return false;\\n        vector<vector<int>>dp(s1.size()+1,vector<int>(s2.size()+1,-1));\\n        \\n        return fun(s1,s2,s3,0,0,dp);\\n    }\\n\\tbool fun(string &s1, string &s2, string &s3,int ind1,int ind2,vector<vector<int>>&dp)\\n    {\\n        if(ind1+ind2==s3.size()) return 1;\\n        if(dp[ind1][ind2]!=-1) return dp[ind1][ind2];\\n        bool ans=0;        \\n        if(ind1<s1.size() and s1[ind1]==s3[ind1+ind2] and fun(s1,s2,s3,ind1+1,ind2,dp)) ans=1;\\n        if(ind2<s2.size() and s2[ind2]==s3[ind1+ind2] and fun(s1,s2,s3,ind1,ind2+1,dp)) ans=1;\\n        \\n        return dp[ind1][ind2]=ans;\\n    }\\n",
                "solutionTags": [
                    "String",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "intuition:- we compair first element of both of s1 and s2 with s3 if match ind1 of s1 with current  index of then we go forword with ind1+1 and next index of s3 and same for s2.\\n \\n    bool isInterleave(string s1, string s2, string s3) {\\n       if(s1.size()+s2.size()!=s3.size()) return false;\\n        vector<vector<int>>dp(s1.size()+1,vector<int>(s2.size()+1,-1));\\n        \\n        return fun(s1,s2,s3,0,0,dp);\\n    }\\n\\tbool fun(string &s1, string &s2, string &s3,int ind1,int ind2,vector<vector<int>>&dp)\\n    {\\n        if(ind1+ind2==s3.size()) return 1;\\n        if(dp[ind1][ind2]!=-1) return dp[ind1][ind2];\\n        bool ans=0;        \\n        if(ind1<s1.size() and s1[ind1]==s3[ind1+ind2] and fun(s1,s2,s3,ind1+1,ind2,dp)) ans=1;\\n        if(ind2<s2.size() and s2[ind2]==s3[ind1+ind2] and fun(s1,s2,s3,ind1,ind2+1,dp)) ans=1;\\n        \\n        return dp[ind1][ind2]=ans;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2248668,
                "title": "easy-js-solution",
                "content": "At first I tried to solved it linearly in which i kept three variables a, b, c all pointing to each string starting. I then kept on increasing them till i reach end of all string but this approach fails if there are two choices ( same character is availabe on both string s1, s2 ) then a wrong decision will give you wrong result. \\nSince constraints are small I tried taking all decisions using recursion where i take two decisions either from s1 or s2 and see which gives a positive result.\\n```\\nvar isInterleave = function(s1, s2, s3) {\\n    const dp = new Map();\\n    const solve = (a = 0, b = 0, c = 0) => {\\n        if(c == s3.length) return a == s1.length && b == s2.length;\\n        const key = [a, b, c].join(\\':\\');\\n        \\n        if(dp.has(key)) {\\n            // console.log(\\'hit\\');\\n            return dp.get(key);\\n        }\\n        \\n        let takeS1 = false, takeS2 = false;\\n        if(s1[a] == s3[c]) takeS1 = solve(a + 1, b, c + 1);\\n        if(s2[b] == s3[c]) takeS2 = solve(a, b + 1, c + 1);\\n\\n        dp.set(key, takeS1 || takeS2);\\n        return takeS1 || takeS2;\\n    }\\n    return solve();\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isInterleave = function(s1, s2, s3) {\\n    const dp = new Map();\\n    const solve = (a = 0, b = 0, c = 0) => {\\n        if(c == s3.length) return a == s1.length && b == s2.length;\\n        const key = [a, b, c].join(\\':\\');\\n        \\n        if(dp.has(key)) {\\n            // console.log(\\'hit\\');\\n            return dp.get(key);\\n        }\\n        \\n        let takeS1 = false, takeS2 = false;\\n        if(s1[a] == s3[c]) takeS1 = solve(a + 1, b, c + 1);\\n        if(s2[b] == s3[c]) takeS2 = solve(a, b + 1, c + 1);\\n\\n        dp.set(key, takeS1 || takeS2);\\n        return takeS1 || takeS2;\\n    }\\n    return solve();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1906440,
                "title": "c-100-fast-recursion-memoization-clean-code-t-c-s-c-o-n-2",
                "content": "```\\nclass Solution {\\npublic:\\n    int dp[102][102];\\n    bool solve(string &s1, string &s2, string &s3, int i, int j, int k){\\n        \\n        if(k >= s3.size()) \\n            return true;\\n        if(dp[i][j] != -1) return dp[i][j];\\n        \\n        bool flag1 = false, flag2 = false;\\n        if(s1[i] == s3[k]){\\n            flag1 =  solve(s1, s2, s3, i + 1, j, k + 1);\\n        }\\n        \\n        if(s2[j] == s3[k]){\\n            flag2 =  solve(s1, s2, s3, i, j + 1, k + 1);\\n        }\\n    \\n        return dp[i][j] = (flag1 || flag2);\\n        \\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n         if((s1.size() + s2.size()) != s3.size()) return false;\\n         memset(dp, -1,sizeof(dp));         \\n         return solve(s1, s2, s3, 0 , 0 , 0);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Recursion",
                    "Memoization"
                ],
                "code": "class Solution {\\npublic:\\n    int dp[102][102];\\n    bool solve(string &s1, string &s2, string &s3, int i, int j, int k){\\n        \\n        if(k >= s3.size()) \\n            return true;\\n        if(dp[i][j] != -1) return dp[i][j];\\n        \\n        bool flag1 = false, flag2 = false;\\n        if(s1[i] == s3[k]){\\n            flag1 =  solve(s1, s2, s3, i + 1, j, k + 1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1506121,
                "title": "c-beats-100-9-lines-simple-recursion-memo",
                "content": "```\\nclass Solution {\\npublic:\\n    bool interleave(string &s1, string &s2, string &s3,int i,int j,int k,vector<vector<int>> &dp)\\n    {\\n        if(k==s3.size()) return true;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        bool ans=false;\\n        if(i<s1.size() && s3[k]==s1[i]) ans=ans || interleave(s1,s2,s3,i+1,j,k+1,dp);\\n        if(j<s2.size() && s3[k]==s2[j]) ans = ans || interleave(s1,s2,s3,i,j+1,k+1,dp);\\n        return dp[i][j]=ans;\\n    }\\n    \\n    bool isInterleave(string &s1, string &s2, string &s3) {\\n    if(s1.size()+s2.size()!=s3.size()) return false;\\n    vector<vector<int>> dp(s1.size()+1,vector<int>(s2.size()+1,-1));    \\n    return interleave(s1,s2,s3,0,0,0,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool interleave(string &s1, string &s2, string &s3,int i,int j,int k,vector<vector<int>> &dp)\\n    {\\n        if(k==s3.size()) return true;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        bool ans=false;\\n        if(i<s1.size() && s3[k]==s1[i]) ans=ans || interleave(s1,s2,s3,i+1,j,k+1,dp);\\n        if(j<s2.size() && s3[k]==s2[j]) ans = ans || interleave(s1,s2,s3,i,j+1,k+1,dp);\\n        return dp[i][j]=ans;\\n    }\\n    \\n    bool isInterleave(string &s1, string &s2, string &s3) {\\n    if(s1.size()+s2.size()!=s3.size()) return false;\\n    vector<vector<int>> dp(s1.size()+1,vector<int>(s2.size()+1,-1));    \\n    return interleave(s1,s2,s3,0,0,0,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956644,
                "title": "it-just-works-in-java",
                "content": "# Intuition\\nTry all the possibilities using recursion, now include memory to reduce time complexity.\\n\\n# Approach\\n1. Use recursion to find all the possibilites to combine 2 strings to form final string str3.\\n2. Whenever the indx3 reaches the end we can return true, but only when indx1 and indx2 also reaches their end simultaneously because it is mentioned both the strings have to be used completely.\\n3. So if there haven\\'t reached their end at the same time when indx3 had reached end we can return false.\\n4. The rest of the code is just checking all the possibilities.\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean recursion(int indx1,int indx2,int indx3,String s1,String s2,String s3,int[][][] dp){\\n        if(indx3==s3.length()) \\n        {\\n            if(indx1==s1.length() && indx2==s2.length())\\n                return true;\\n            else\\n                return false;\\n        }\\n\\n        if(dp[indx1][indx2][indx3]!=-1) return dp[indx1][indx2][indx3]==1?true:false;\\n        boolean first=false,second=false;\\n        if(indx1<s1.length() && s1.charAt(indx1)==s3.charAt(indx3))\\n            first = recursion(indx1+1,indx2,indx3+1,s1,s2,s3,dp);\\n        if(indx2<s2.length() && s2.charAt(indx2)==s3.charAt(indx3))\\n            second = recursion(indx1,indx2+1,indx3+1,s1,s2,s3,dp);\\n        \\n        dp[indx1][indx2][indx3] = (first||second)?1:0;\\n        return first || second;\\n    }\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int[][][]dp =new int[s1.length()+1][s2.length()+1][s3.length()+1];\\n        for(int i=0;i<=s1.length();i++){\\n            for(int j=0;j<=s2.length();j++){\\n                Arrays.fill(dp[i][j],-1);\\n            }\\n        }\\n        return recursion(0,0,0,s1,s2,s3,dp);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    public boolean recursion(int indx1,int indx2,int indx3,String s1,String s2,String s3,int[][][] dp){\\n        if(indx3==s3.length()) \\n        {\\n            if(indx1==s1.length() && indx2==s2.length())\\n                return true;\\n            else\\n                return false;\\n        }\\n\\n        if(dp[indx1][indx2][indx3]!=-1) return dp[indx1][indx2][indx3]==1?true:false;\\n        boolean first=false,second=false;\\n        if(indx1<s1.length() && s1.charAt(indx1)==s3.charAt(indx3))\\n            first = recursion(indx1+1,indx2,indx3+1,s1,s2,s3,dp);\\n        if(indx2<s2.length() && s2.charAt(indx2)==s3.charAt(indx3))\\n            second = recursion(indx1,indx2+1,indx3+1,s1,s2,s3,dp);\\n        \\n        dp[indx1][indx2][indx3] = (first||second)?1:0;\\n        return first || second;\\n    }\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int[][][]dp =new int[s1.length()+1][s2.length()+1][s3.length()+1];\\n        for(int i=0;i<=s1.length();i++){\\n            for(int j=0;j<=s2.length();j++){\\n                Arrays.fill(dp[i][j],-1);\\n            }\\n        }\\n        return recursion(0,0,0,s1,s2,s3,dp);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956593,
                "title": "python3-solution",
                "content": "\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        n1=len(s1)\\n        n2=len(s2)\\n        n3=len(s3)\\n        @cache\\n        def isInter(i1,i2,i3):\\n            if i1==n1 and i2==n2 and i3==n3:\\n                return True\\n\\n            return i3<n3 and (i1<n1 and s1[i1]==s3[i3] and isInter(i1+1,i2,i3+1) or i2<n2 and s2[i2]==s3[i3] and isInter(i1,i2+1,i3+1))\\n\\n        return isInter(0,0,0)        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        n1=len(s1)\\n        n2=len(s2)\\n        n3=len(s3)\\n        @cache\\n        def isInter(i1,i2,i3):\\n            if i1==n1 and i2==n2 and i3==n3:\\n                return True\\n\\n            return i3<n3 and (i1<n1 and s1[i1]==s3[i3] and isInter(i1+1,i2,i3+1) or i2<n2 and s2[i2]==s3[i3] and isInter(i1,i2+1,i3+1))\\n\\n        return isInter(0,0,0)        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3679676,
                "title": "c-easy-tabular-dp-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- At each step, we have two options: **either take a character from s1 or take a character from s2** to contribute to the interleaved string.\\n- The solution for the current step depends on the solutions for the previous steps, which leads to **overlapping subproblems**.\\n- By using a **dynamic programming table** (such as the interleaved table in the code), we can store and reuse the solutions to these smaller subproblems.\\n---\\n\\n\\n# Approach\\n- **Initialize** the **interleaved** table of size (m+1) x (n+1).\\n- Iterate through each cell of the interleaved table using two nested loops.\\n- For each cell (i, j), there are following cases:\\n    1) If both **s1 and s2 are empty strings** (i.e., i == 0 and j == 0), then **interleaved[i][j] is set to true** since there are no characters to interleave.\\n    2) If **s1 is empty** (i.e., i == 0), then **interleaved[i][j]** is determined by **comparing s2[j-1] with s3[i+j-1]** and the **previous cell interleaved[i][j-1]**.\\n    3) If **s2 is empty** (i.e., j == 0), then **interleaved[i][j]** is determined by comparing **s1[i-1] with s3[i+j-1]** and the **previous cell interleaved[i-1][j]**.\\n    4) If both **s1 and s2 are non-empty**, **interleaved[i][j]** is determined by **comparing s1[i-1] with s3[i+j-1]** and the **previous cell interleaved[i-1][j]**, as well as **comparing s2[j-1] with s3[i+j-1]** and the **previous cell interleaved[i][j-1]**.\\n- Finally, **return interleaved[m][n]**, which represents whether s1 and s2 can interleave to form s3, where m and n are the lengths of s1 and s2 respectively.\\n<!-- Describe your approach to solving the problem. -->\\n\\n---\\n\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the code is **O(m * n)**, where m and n are the lengths of **s1** and **s2** respectively. The nested loops iterate through each cell of the **interleaved** table, which has dimensions (m+1) x (n+1).\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\nThe space complexity of the code is **O(m * n)**, where m and n are the lengths of **s1** and **s2** respectively. The interleaved table is of size (m+1) x (n+1), which\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n---\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n    if (s1.size() + s2.size() != s3.size()) {\\n        return false;\\n    }\\n    \\n    int m = s1.size();\\n    int n = s2.size();\\n    bool interleaved[m + 1][n + 1];\\n\\n    for (int i = 0; i <= m; i++) {\\n        for (int j = 0; j <= n; j++) {\\n            if (i == 0 && j == 0) {\\n                interleaved[i][j] = true;\\n            } else if (i == 0) {\\n                interleaved[i][j] = interleaved[i][j - 1] && s2[j - 1] == s3[i + j - 1];\\n            } else if (j == 0) {\\n                interleaved[i][j] = interleaved[i - 1][j] && s1[i - 1] == s3[i + j - 1];\\n            } else {\\n                interleaved[i][j] = (interleaved[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||\\n                                    (interleaved[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n    }\\n    \\n    return interleaved[m][n];\\n    }\\n};\\n```\\n**Please upvote if it helped. Happy Coding!**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n    if (s1.size() + s2.size() != s3.size()) {\\n        return false;\\n    }\\n    \\n    int m = s1.size();\\n    int n = s2.size();\\n    bool interleaved[m + 1][n + 1];\\n\\n    for (int i = 0; i <= m; i++) {\\n        for (int j = 0; j <= n; j++) {\\n            if (i == 0 && j == 0) {\\n                interleaved[i][j] = true;\\n            } else if (i == 0) {\\n                interleaved[i][j] = interleaved[i][j - 1] && s2[j - 1] == s3[i + j - 1];\\n            } else if (j == 0) {\\n                interleaved[i][j] = interleaved[i - 1][j] && s1[i - 1] == s3[i + j - 1];\\n            } else {\\n                interleaved[i][j] = (interleaved[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||\\n                                    (interleaved[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n            }\\n        }\\n    }\\n    \\n    return interleaved[m][n];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2249605,
                "title": "python-elegant-short-top-down-dp-lru-cache",
                "content": "# Complexity\\n- Time complexity: $$O(n*m)$$\\n- Space complexity: $$O(n*m)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def isInterleave(self, a: str, b: str, target: str) -> bool:\\n        @cache\\n        def dp(i: int, j: int) -> bool:\\n            if i == n and j == m:\\n                return True\\n            return any([\\n                i < n and a[i] == target[i + j] and dp(i + 1, j),\\n                j < m and b[j] == target[i + j] and dp(i, j + 1),\\n            ])\\n\\n        n, m = len(a), len(b)\\n        return n + m == len(target) and dp(0, 0)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, a: str, b: str, target: str) -> bool:\\n        @cache\\n        def dp(i: int, j: int) -> bool:\\n            if i == n and j == m:\\n                return True\\n            return any([\\n                i < n and a[i] == target[i + j] and dp(i + 1, j),\\n                j < m and b[j] == target[i + j] and dp(i, j + 1),\\n            ])\\n\\n        n, m = len(a), len(b)\\n        return n + m == len(target) and dp(0, 0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783687,
                "title": "can-lcs-be-applied-to-this-problem-in-any-way",
                "content": "Can the longest common subsequence approach be applied to this problem in any way?\\n\\nMy initial intuition was we can return `true`,\\nif:\\n\\t\\ti) Length of String one + Length of String two == length of String three &&\\n\\t\\tii) Length of String one == LCS(String one, String three) &&\\n\\t\\tiii) Length of String two == LCS(String two, String three)\\n\\t\\t\\n`false` otherwise;\\n\\nBut this approach is failing some of the test cases. Please let me know if LCS can be applied to this problem in any way.",
                "solutionTags": [],
                "code": "Can the longest common subsequence approach be applied to this problem in any way?\\n\\nMy initial intuition was we can return `true`,\\nif:\\n\\t\\ti) Length of String one + Length of String two == length of String three &&\\n\\t\\tii) Length of String one == LCS(String one, String three) &&\\n\\t\\tiii) Length of String two == LCS(String two, String three)\\n\\t\\t\\n`false` otherwise;\\n\\nBut this approach is failing some of the test cases. Please let me know if LCS can be applied to this problem in any way.",
                "codeTag": "Unknown"
            },
            {
                "id": 1468511,
                "title": "simple-explanation-for-bottom-up-approach-with-diagrams",
                "content": "> First we create a dp table with s1 and s2( s1 -> Y-axis , s2-> X-axis) where **dp[i][j]** represents if first i characters of s1 and first j characters of s2 interleave to form ( i + j ) characters of s3.\\n![image](https://assets.leetcode.com/users/images/d761ab3b-78c4-426a-aee3-3f6a122fbc99_1631866519.9569435.png)\\n\\n\\n`How to fill dp table ?`\\nWe divide this into three parts \\n1. First Cell\\n2. First Row and First Column\\n3. Rest of the Cells\\n\\n* **First Cell** -> meaning  0 characters of s1 and 0 characters of s2 interleave to form 0 characters of s3 \\n\\t\\t![image](https://assets.leetcode.com/users/images/2e489f60-ac5d-46a6-b3b4-4812f788e547_1631866807.4218714.png)\\n\\t\\t\\n* **First Row** -> When  s1 is empty and s2 is not empty , then we have to check if substring of s2 = substring of s3\\n   ```\\n    if (s2[i-1] != s3[i-1])\\n\\t\\tdp[0][i] = false;\\n\\telse \\n\\t\\tdp[0][i] = dp[0][i-1];\\n   ```\\n  **Remember** : If we are at cell(i,j), then current characters of s1, s2 and s3 are (i-1)th, (j-1)th and (i+j-1)th characters of s1 , s2 and s3 respectively.\\n  \\n  Similarly ,\\n  **First Column** -> When s2 is empty and s1 is not empty, then we have to check if substring of s1 = substring of s3\\n  ```\\n\\t  if(s1[i-1] != s3[i-1])\\n\\t     dp[i][0] = false;\\n\\t  else \\n\\t\\t  dp[i][0] = dp[i-1][0];\\n  ```\\n  ![image](https://assets.leetcode.com/users/images/1c91c32c-c60f-4dfb-9e19-d785058dc61c_1631868477.9101102.png)\\n\\n  \\n*   **Rest of the cells**\\n  We have 4 possiblities for the rest of the cells, If\\n\\t  1. Current character of s3 is neither equals to current character of s1 nor current character of s2, then value of the cell is false\\n\\t  2. Current character of s3 is equal  current character of s1 but not current character of s2, then value of cell is the same cell above it.\\n\\t3. Current character of s3 is equal to current character of s2 but not current character of s1 , then value of cell is the cell left to it.\\n\\t4. Current character of s3 is equal to current character of s2 and current character of s1 , then value of cell is either from cell above it or cell left to it if they are true, otherwise false\\n\\n\\t\\t![image](https://assets.leetcode.com/users/images/fe18ed45-fe8c-4f54-bbda-8c4b74b277da_1631869257.556291.png)\\n\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.size();\\n        int m = s2.size();\\n        int l = s3.size();\\n        \\n        if(l != n + m)return false;\\n        \\n        vector<vector<bool>> dp(n+1 , vector<bool>(m+1, false));\\n        \\n        dp[0][0] = true;\\n        \\n        //populating first row\\n        for(int i=1 ;i<=m ;i++){\\n            if(s2[i-1] != s3[i-1])dp[0][i] = false;\\n            else dp[0][i] = dp[0][i-1];\\n        }\\n        \\n        //populating first col\\n        for(int i=1 ;i<=n ;i++){\\n            if(s1[i-1] != s3[i-1])dp[i][0] = false;\\n            else dp[i][0] = dp[i-1][0];\\n        }\\n        \\n        // rest\\n        for(int i=1;i<=n ;i++){\\n            for(int j=1;j<=m ;j++){\\n                if(s1[i-1] == s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i][j] = (dp[i-1][j] || dp[i][j-1]);\\n                }\\n                else if(s1[i-1] == s3[i+j-1] and s2[j-1] != s3[i+j-1]){\\n                    dp[i][j] = dp[i-1][j];\\n                } \\n                else if(s1[i-1] != s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i][j] = dp[i][j-1];\\n                }else{\\n                    dp[i][j] = false;\\n                }\\n            }\\n        }\\n        \\n        return dp[n][m];\\n        \\n        \\n        \\n    }\\n};\\n\\n```\\n\\nTime : O(M*N)\\n\\nSpace : O(M*N)\\n\\n**Space Opitmization**\\n**Idea** : To fill the each row , we just need one row above it ( 2 rows at a time ) \\n\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.size();\\n        int m = s2.size();\\n        int l = s3.size();\\n        \\n        if(l != n + m)return false;\\n        \\n\\t\\t// considering two rows at a time\\n        vector<vector<bool>> dp(2 , vector<bool>(m+1, false));\\n        \\n        dp[0][0] = true;\\n        \\n        //populating first row\\n        for(int i=1 ;i<=m ;i++){\\n            if(s2[i-1] != s3[i-1])dp[0][i] = false;\\n            else dp[0][i] = dp[0][i-1];\\n        }\\n        \\n     \\n        // rest\\n        for(int i=1;i<=n ;i++){\\n            for(int j=0;j<=m ;j++){\\n                if(j == 0){\\n                    // first col\\n                    if(s1[i-1] != s3[i+j-1])dp[i%2][j] = false;\\n                    else dp[i%2][j] = dp[(i-1)%2][j];\\n                }\\n                else if(s1[i-1] == s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i%2][j] = (dp[(i-1)%2][j] || dp[i%2][j-1]);\\n                }\\n                else if(s1[i-1] == s3[i+j-1] and s2[j-1] != s3[i+j-1]){\\n                    dp[i%2][j] = dp[(i-1)%2][j];\\n                } \\n                else if(s1[i-1] != s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i%2][j] = dp[i%2][j-1];\\n                }else{\\n                    dp[i%2][j] = false;\\n                }\\n            }\\n        }\\n        \\n        return dp[n%2][m];\\n        \\n        \\n        \\n    }\\n};\\n```\\n\\t\\nTime : O(M*N)\\n\\nSpace : O(M)\\n   \\n  \\n\\n\\t\\t\\t\\t\\t",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\n    if (s2[i-1] != s3[i-1])\\n\\t\\tdp[0][i] = false;\\n\\telse \\n\\t\\tdp[0][i] = dp[0][i-1];\\n   ```\n```\\n\\t  if(s1[i-1] != s3[i-1])\\n\\t     dp[i][0] = false;\\n\\t  else \\n\\t\\t  dp[i][0] = dp[i-1][0];\\n  ```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.size();\\n        int m = s2.size();\\n        int l = s3.size();\\n        \\n        if(l != n + m)return false;\\n        \\n        vector<vector<bool>> dp(n+1 , vector<bool>(m+1, false));\\n        \\n        dp[0][0] = true;\\n        \\n        //populating first row\\n        for(int i=1 ;i<=m ;i++){\\n            if(s2[i-1] != s3[i-1])dp[0][i] = false;\\n            else dp[0][i] = dp[0][i-1];\\n        }\\n        \\n        //populating first col\\n        for(int i=1 ;i<=n ;i++){\\n            if(s1[i-1] != s3[i-1])dp[i][0] = false;\\n            else dp[i][0] = dp[i-1][0];\\n        }\\n        \\n        // rest\\n        for(int i=1;i<=n ;i++){\\n            for(int j=1;j<=m ;j++){\\n                if(s1[i-1] == s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i][j] = (dp[i-1][j] || dp[i][j-1]);\\n                }\\n                else if(s1[i-1] == s3[i+j-1] and s2[j-1] != s3[i+j-1]){\\n                    dp[i][j] = dp[i-1][j];\\n                } \\n                else if(s1[i-1] != s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i][j] = dp[i][j-1];\\n                }else{\\n                    dp[i][j] = false;\\n                }\\n            }\\n        }\\n        \\n        return dp[n][m];\\n        \\n        \\n        \\n    }\\n};\\n\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.size();\\n        int m = s2.size();\\n        int l = s3.size();\\n        \\n        if(l != n + m)return false;\\n        \\n\\t\\t// considering two rows at a time\\n        vector<vector<bool>> dp(2 , vector<bool>(m+1, false));\\n        \\n        dp[0][0] = true;\\n        \\n        //populating first row\\n        for(int i=1 ;i<=m ;i++){\\n            if(s2[i-1] != s3[i-1])dp[0][i] = false;\\n            else dp[0][i] = dp[0][i-1];\\n        }\\n        \\n     \\n        // rest\\n        for(int i=1;i<=n ;i++){\\n            for(int j=0;j<=m ;j++){\\n                if(j == 0){\\n                    // first col\\n                    if(s1[i-1] != s3[i+j-1])dp[i%2][j] = false;\\n                    else dp[i%2][j] = dp[(i-1)%2][j];\\n                }\\n                else if(s1[i-1] == s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i%2][j] = (dp[(i-1)%2][j] || dp[i%2][j-1]);\\n                }\\n                else if(s1[i-1] == s3[i+j-1] and s2[j-1] != s3[i+j-1]){\\n                    dp[i%2][j] = dp[(i-1)%2][j];\\n                } \\n                else if(s1[i-1] != s3[i+j-1] and s2[j-1] == s3[i+j-1]){\\n                    dp[i%2][j] = dp[i%2][j-1];\\n                }else{\\n                    dp[i%2][j] = false;\\n                }\\n            }\\n        }\\n        \\n        return dp[n%2][m];\\n        \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1406870,
                "title": "c-dp-solution-fully-explained",
                "content": "While solving dp question always first find what are the possible choices you have at any given point i.e., first make the choice diagram and then coding it will be very easy.\\n\\nAnd if you see some overlapping sub problems then just store their result and use it later.\\n\\nIn this question, we have to form `s3` using `s1` and `s2` while maintaining their orders.\\n\\n## How we\\'re getting the answer\\n\\nIn the given test case:\\n\\ns1 = `aabcc`\\ns2 = `dbbca`\\ns3 = `aadbbcbcac`\\n\\nI\\'m starting from the end and trying to make `s3` with the help of `s1` and `s2`\\n\\nLet `i = s1.size() - 1` (end of `s1`) and `j = s2.size() - 1` (end of `s2`) and `k = s3.size() - 1` (end of `s3`)\\n\\n1. First I need `c`, so take `c` from `s1` (now `s1` = `aabc ` and s2 =`dbbca` and `s3` = `aadbbcbca`)\\n2. Now,  I need `a`, so take `a` from `s2` (now `s1` = `aabc ` and s2 =`dbbc` and `s3` = `aadbbcbc`)\\n3. Now, I need `c`, so I can take `c` from either `s1` or from `s2`\\n\\nThis intuition is more than enough to make the choice diagram\\n\\n## Choice Diagram\\n\\n1. `ith` character of `s1` = `kth` character of `s3`  (aabc**c**, aadbbcbca**c**)\\n\\n\\tJust shift the two pointers `i` to `i-1` and `k` to `k-1` as we\\'ve included `c` from `s1`\\n\\t\\n\\t```\\n\\tsolve(s1, s2, s3, i-1, j, k-1);\\n\\t```\\n\\n2. `jth` character of `s2` = `kth` character of `s3`  (dbbc**a**, aadbbcbc**a**)\\n\\t\\n\\tJust shift the two pointers `j` to `j-1` and `k` to `k-1`\\n\\t\\n\\t```\\n\\tsolve(s1, s2, s3, i, j-1, k-1);\\n\\t```\\n\\t\\n3. Both `ith` and `jth` character are equal to `kth` character of `s3` (aab**c**, dbb**c**, aadbbcb**c**)\\n\\t\\n\\tIn this case I can take the character from any of the string. And since I can get answer from any of the possiblity that\\'s why I\\'m using `||` \\n\\t\\n\\t```\\n\\tsolve(s1, s2, s3, i-1, j, k-1) || solve(s1, s2,s3, i, j-1, k-1);\\n\\t```\\n\\t\\n\\n4. None of them are equal to `kth` character of `s3`\\n\\tIf none of the character is equal to the `kth` character of `s3` then it\\'s impossible to make `s3` with the help of `s1` and `s2` as they don\\'t contain the `kth` character in them.\\n\\n## Recursive Code\\n\\nIn this step we just have to code the choice diagram\\n\\n```\\nbool solve(string &s1, string &s2, string &s3, int i, int j, int k)\\n{\\n\\n\\t// Base Case\\n\\tif(k == 0 and (i or j)) // If we\\'ve reached the end of s3 but still some of the characters are remaining in s1 or s2 then return false as we\\'ve to utilise every character of s1 and s2\\n\\t\\treturn false;\\n\\n\\tif(i == 0 and j == 0 and k == 0) // If we\\'ve exhausted all of the three strings then just return true as we have finally formed s3 with the help of s1 and s2\\n\\t\\treturn true;\\n\\t\\t\\n\\t// Choice Diagram\\n\\t\\n\\t// i and j should be > 0, which make sures that there are some characters left in our string\\n\\n\\tif(i > 0 and j > 0 and s1[i-1] == s2[j-1] and s1[i-1] == s3[k-1]) // Case 3\\n\\t\\treturn solve(s1, s2, s3, i-1, j, k-1) || solve(s1, s2,s3, i, j-1, k-1);\\n\\n\\tif(i > 0 and s3[k-1] == s1[i-1]) // Case 1\\n\\t\\treturn solve(s1, s2, s3, i-1, j, k-1);\\n\\n\\tif(j > 0 and s3[k-1] == s2[j-1]) // Case 2\\n\\t\\treturn solve(s1, s2,s3, i, j-1, k-1);\\n\\n\\treturn false; // Case 4\\n}\\n\\nbool isInterleave(string s1, string s2, string s3) {\\n\\n\\tif(s1.size() + s2.size() != s3.size())\\n\\t\\treturn false;\\n\\n\\treturn solve(s1, s2, s3, s1.size(), s2.size(), s3.size());\\n}\\n```\\n\\n## Memoized Code\\n\\nWe just have to add 2-3 extra lines to convert recusive code into memoized code. Make a DP Table and store the subproblems result in it.\\n\\n```\\nbool solve(string &s1, string &s2, string &s3, int i, int j, int k, vector<vector<int>> &dp)\\n{\\n\\tif(k == 0 and (i or j))\\n\\t\\treturn false;\\n\\n\\tif(i == 0 and j == 0 and k == 0)\\n\\t\\treturn true;\\n\\n\\tif(dp[i][j] != -1) // Just return the result from the cache\\n\\t\\treturn dp[i][j];\\n\\n\\tif(i > 0 and j > 0 and s1[i-1] == s2[j-1] and s1[i-1] == s3[k-1])\\n\\t\\treturn dp[i][j] = solve(s1, s2, s3, i-1, j, k-1, dp) || solve(s1, s2,s3, i, j-1, k-1, dp); // before returning the result store it into the cache\\n\\n\\tif(i > 0 and s3[k-1] == s1[i-1])\\n\\t\\treturn dp[i][j] = solve(s1, s2, s3, i-1, j, k-1, dp);\\n\\n\\tif(j > 0 and s3[k-1] == s2[j-1])\\n\\t\\treturn dp[i][j] = solve(s1, s2,s3, i, j-1, k-1, dp);\\n\\n\\treturn dp[i][j] = false;\\n}\\n\\nbool isInterleave(string s1, string s2, string s3) {\\n\\n\\tvector<vector<int>> dp(s1.size() + 1, vector<int> (s2.size() + 1, -1)); // initialisiation of 2D vector\\n\\n\\tif(s1.size() + s2.size() != s3.size())\\n\\t\\treturn false;\\n\\n\\treturn solve(s1, s2, s3, s1.size(), s2.size(), s3.size(), dp);\\n}\\n```\\n\\nSmall tip to avoid TLE \\n\\nAlways use call by referance wherever you can as in call by referance you\\'re not wasting any time in making copies of variables in every function call.\\n\\nSo, if I\\'ve used `bool solve(string s1, string s2, string s3, int i, int j, int k, vector<vector<int>> dp)` this instead of `bool solve(string &s1, string &s2, string &s3, int i, int j, int k, vector<vector<int>> &dp)` then I would\\'ve definately gotten TLE as I\\'m unncecessarily copying the values in every function call.",
                "solutionTags": [],
                "code": "```\\n\\tsolve(s1, s2, s3, i-1, j, k-1);\\n\\t```\n```\\n\\tsolve(s1, s2, s3, i, j-1, k-1);\\n\\t```\n```\\n\\tsolve(s1, s2, s3, i-1, j, k-1) || solve(s1, s2,s3, i, j-1, k-1);\\n\\t```\n```\\nbool solve(string &s1, string &s2, string &s3, int i, int j, int k)\\n{\\n\\n\\t// Base Case\\n\\tif(k == 0 and (i or j)) // If we\\'ve reached the end of s3 but still some of the characters are remaining in s1 or s2 then return false as we\\'ve to utilise every character of s1 and s2\\n\\t\\treturn false;\\n\\n\\tif(i == 0 and j == 0 and k == 0) // If we\\'ve exhausted all of the three strings then just return true as we have finally formed s3 with the help of s1 and s2\\n\\t\\treturn true;\\n\\t\\t\\n\\t// Choice Diagram\\n\\t\\n\\t// i and j should be > 0, which make sures that there are some characters left in our string\\n\\n\\tif(i > 0 and j > 0 and s1[i-1] == s2[j-1] and s1[i-1] == s3[k-1]) // Case 3\\n\\t\\treturn solve(s1, s2, s3, i-1, j, k-1) || solve(s1, s2,s3, i, j-1, k-1);\\n\\n\\tif(i > 0 and s3[k-1] == s1[i-1]) // Case 1\\n\\t\\treturn solve(s1, s2, s3, i-1, j, k-1);\\n\\n\\tif(j > 0 and s3[k-1] == s2[j-1]) // Case 2\\n\\t\\treturn solve(s1, s2,s3, i, j-1, k-1);\\n\\n\\treturn false; // Case 4\\n}\\n\\nbool isInterleave(string s1, string s2, string s3) {\\n\\n\\tif(s1.size() + s2.size() != s3.size())\\n\\t\\treturn false;\\n\\n\\treturn solve(s1, s2, s3, s1.size(), s2.size(), s3.size());\\n}\\n```\n```\\nbool solve(string &s1, string &s2, string &s3, int i, int j, int k, vector<vector<int>> &dp)\\n{\\n\\tif(k == 0 and (i or j))\\n\\t\\treturn false;\\n\\n\\tif(i == 0 and j == 0 and k == 0)\\n\\t\\treturn true;\\n\\n\\tif(dp[i][j] != -1) // Just return the result from the cache\\n\\t\\treturn dp[i][j];\\n\\n\\tif(i > 0 and j > 0 and s1[i-1] == s2[j-1] and s1[i-1] == s3[k-1])\\n\\t\\treturn dp[i][j] = solve(s1, s2, s3, i-1, j, k-1, dp) || solve(s1, s2,s3, i, j-1, k-1, dp); // before returning the result store it into the cache\\n\\n\\tif(i > 0 and s3[k-1] == s1[i-1])\\n\\t\\treturn dp[i][j] = solve(s1, s2, s3, i-1, j, k-1, dp);\\n\\n\\tif(j > 0 and s3[k-1] == s2[j-1])\\n\\t\\treturn dp[i][j] = solve(s1, s2,s3, i, j-1, k-1, dp);\\n\\n\\treturn dp[i][j] = false;\\n}\\n\\nbool isInterleave(string s1, string s2, string s3) {\\n\\n\\tvector<vector<int>> dp(s1.size() + 1, vector<int> (s2.size() + 1, -1)); // initialisiation of 2D vector\\n\\n\\tif(s1.size() + s2.size() != s3.size())\\n\\t\\treturn false;\\n\\n\\treturn solve(s1, s2, s3, s1.size(), s2.size(), s3.size(), dp);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1248331,
                "title": "java-easy-to-understand-dp-solution",
                "content": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n1=s1.length();\\n        int n2=s2.length();\\n        if(n1+n2!=s3.length())\\n            return false;\\n        boolean dp[][]=new boolean[n1+1][n2+1];\\n        dp[0][0]=true;\\n        for(int j=1;j<=n2;j++)\\n        {//initializing 0th row\\n            if(s2.charAt(j-1)==s3.charAt(j-1))\\n                dp[0][j]=dp[0][j-1];\\n        }\\n        for(int i=1;i<=n1;i++)\\n        {//initializing 0th column\\n            if(s1.charAt(i-1)==s3.charAt(i-1))\\n                dp[i][0]=dp[i-1][0];\\n        }\\n        for(int i=1;i<=n1;i++)\\n        {\\n            for(int j=1;j<=n2;j++)\\n            {//the length of s3 is n1+n2, since the string is 0 indexed we check at i+j-1\\n                if(s3.charAt(i+j-1)==s1.charAt(i-1))\\n                    dp[i][j]=dp[i-1][j];\\n                if(s3.charAt(i+j-1)==s2.charAt(j-1))\\n                    dp[i][j]=dp[i][j]||dp[i][j-1];  \\n\\t\\t\\t\\t\\t//In some cases the character from s3 matches both s1 and s2, therefore we consider the value thats true\\n            }\\n        }\\n        return dp[n1][n2];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n1=s1.length();\\n        int n2=s2.length();\\n        if(n1+n2!=s3.length())\\n            return false;\\n        boolean dp[][]=new boolean[n1+1][n2+1];\\n        dp[0][0]=true;\\n        for(int j=1;j<=n2;j++)\\n        {//initializing 0th row\\n            if(s2.charAt(j-1)==s3.charAt(j-1))\\n                dp[0][j]=dp[0][j-1];\\n        }\\n        for(int i=1;i<=n1;i++)\\n        {//initializing 0th column\\n            if(s1.charAt(i-1)==s3.charAt(i-1))\\n                dp[i][0]=dp[i-1][0];\\n        }\\n        for(int i=1;i<=n1;i++)\\n        {\\n            for(int j=1;j<=n2;j++)\\n            {//the length of s3 is n1+n2, since the string is 0 indexed we check at i+j-1\\n                if(s3.charAt(i+j-1)==s1.charAt(i-1))\\n                    dp[i][j]=dp[i-1][j];\\n                if(s3.charAt(i+j-1)==s2.charAt(j-1))\\n                    dp[i][j]=dp[i][j]||dp[i][j-1];  \\n\\t\\t\\t\\t\\t//In some cases the character from s3 matches both s1 and s2, therefore we consider the value thats true\\n            }\\n        }\\n        return dp[n1][n2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247271,
                "title": "python3-fast-dp-easy-to-understand",
                "content": "![image](https://assets.leetcode.com/users/images/e6742f38-33b2-4096-a3b1-5e2854d6cca6_1622643568.1336555.png)\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m = len(s1) \\n        n = len(s2)\\n        @lru_cache(None)\\n        def dfs(i,j,k) : \\n            if i > m-1 and j > n-1 : \\n                return True\\n            if i < m and s1[i] == s3[k] and dfs(i+1,j,k+1) :\\n                return True \\n            if j < n and s2[j] == s3[k] and dfs(i,j+1,k+1) : \\n                return True\\n            return False\\n        return Counter(s1) + Counter(s2) == Counter(s3) and dfs(0,0,0)\\n```",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m = len(s1) \\n        n = len(s2)\\n        @lru_cache(None)\\n        def dfs(i,j,k) : \\n            if i > m-1 and j > n-1 : \\n                return True\\n            if i < m and s1[i] == s3[k] and dfs(i+1,j,k+1) :\\n                return True \\n            if j < n and s2[j] == s3[k] and dfs(i,j+1,k+1) : \\n                return True\\n            return False\\n        return Counter(s1) + Counter(s2) == Counter(s3) and dfs(0,0,0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1246962,
                "title": "basic-recursion",
                "content": "THIS WILL NOT ACCEPT\\nbut if you want the logic of this question then you need to understand the recursion behind this.\\n\\n\\n boolean  helper(String s1, String s2, String s3, int i, int j, int k) {\\n\\n\\tif(i<0 && j<0 && k<0)\\n\\t{\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tif(i>=0 && j>=0 && s1.charAt(i)==s3.charAt(k) && s2.charAt(j)==s3.charAt(k))\\n\\t{\\n\\t\\treturn helper(s1,s2,s3,i-1,j,k-1) || helper(s1,s2,s3,i,j-1,k-1);\\n\\t}\\n\\telse if(i>=0 &&s1.charAt(i)==s3.charAt(k) )\\n\\t{\\n\\t\\treturn helper(s1,s2,s3,i-1,j,k-1);\\n\\t}\\n\\telse if(j>=0 && s2.charAt(j)==s3.charAt(k) )\\n\\t{\\n\\t\\treturn helper(s1,s2,s3,i,j-1,k-1);\\n\\t}else\\n\\t\\treturn false;\\n}\\n",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "THIS WILL NOT ACCEPT\\nbut if you want the logic of this question then you need to understand the recursion behind this.\\n\\n\\n boolean  helper(String s1, String s2, String s3, int i, int j, int k) {\\n\\n\\tif(i<0 && j<0 && k<0)\\n\\t{\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tif(i>=0 && j>=0 && s1.charAt(i)==s3.charAt(k) && s2.charAt(j)==s3.charAt(k))\\n\\t{\\n\\t\\treturn helper(s1,s2,s3,i-1,j,k-1) || helper(s1,s2,s3,i,j-1,k-1);\\n\\t}\\n\\telse if(i>=0 &&s1.charAt(i)==s3.charAt(k) )\\n\\t{\\n\\t\\treturn helper(s1,s2,s3,i-1,j,k-1);\\n\\t}\\n\\telse if(j>=0 && s2.charAt(j)==s3.charAt(k) )\\n\\t{\\n\\t\\treturn helper(s1,s2,s3,i,j-1,k-1);\\n\\t}else\\n\\t\\treturn false;\\n}\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 259205,
                "title": "clean-javascript-bfs",
                "content": "I used BFS + Set for this approach and got 64ms. \\nThe idea is to try every possible combination, but skip duplicates by using set.\\n\\n```\\nvar isInterleave = function(s1, s2, s3) {    \\n  let queue = [[0, 0, 0]];\\n  let set = new Set();\\n  \\n  while (queue.length) {\\n    let [one, two, three] = queue.shift(); // indices of s1, s2, and s3\\n\\t\\n    if (set.has(`${one}-${two}`)) continue;   // Skipping any duplicates.\\n    set.add(`${one}-${two}`); \\n    \\n\\t// if all indices are same as their length we basically found our answer so return true;\\n    if (three === s3.length && one === s1.length && two === s2.length) return true;\\n    \\n\\t// we enqueue the next possibles\\n    if (one < s1.length && s3[three] === s1[one]) queue.push([one + 1, two, three + 1]);\\n    if (two < s2.length && s3[three] === s2[two]) queue.push([one, two + 1, three + 1]);\\n  }\\n  \\n  // Our queue is empty which means we tried every possible combination, so return false;\\n  return false; \\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nvar isInterleave = function(s1, s2, s3) {    \\n  let queue = [[0, 0, 0]];\\n  let set = new Set();\\n  \\n  while (queue.length) {\\n    let [one, two, three] = queue.shift(); // indices of s1, s2, and s3\\n\\t\\n    if (set.has(`${one}-${two}`)) continue;   // Skipping any duplicates.\\n    set.add(`${one}-${two}`); \\n    \\n\\t// if all indices are same as their length we basically found our answer so return true;\\n    if (three === s3.length && one === s1.length && two === s2.length) return true;\\n    \\n\\t// we enqueue the next possibles\\n    if (one < s1.length && s3[three] === s1[one]) queue.push([one + 1, two, three + 1]);\\n    if (two < s2.length && s3[three] === s2[two]) queue.push([one, two + 1, three + 1]);\\n  }\\n  \\n  // Our queue is empty which means we tried every possible combination, so return false;\\n  return false; \\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 151397,
                "title": "javascript-dp-solution",
                "content": "```js\\nfunction isInterleave(s1, s2, s3) {\\n  if (s1.length + s2.length !== s3.length) {\\n    return false;\\n  }\\n  \\n  const N1 = s1.length;\\n  const N2 = s2.length;\\n  const DP = [...Array(N1+1)].map(r => Array(N2+1).fill(false));\\n  \\n  for (let r = 0; r <= N1; r++) {\\n    for (let c = 0; c <= N2; c++) {\\n      if (r === 0 && c === 0) {\\n        DP[r][c] = true;\\n      } else if (r === 0) {\\n        DP[r][c] = DP[r][c-1] && s2[c-1] === s3[r+c-1];\\n      } else if (c === 0) {\\n        DP[r][c] = DP[r-1][c] && s1[r-1] === s3[r+c-1];\\n      } else {\\n        DP[r][c] = (DP[r][c-1] && s3[r+c-1] === s2[c-1]) || (DP[r-1][c] && s3[r+c-1] === s1[r-1]);\\n      }\\n    }\\n  }\\n  \\n  return DP[N1][N2];\\n}\\n```",
                "solutionTags": [],
                "code": "```js\\nfunction isInterleave(s1, s2, s3) {\\n  if (s1.length + s2.length !== s3.length) {\\n    return false;\\n  }\\n  \\n  const N1 = s1.length;\\n  const N2 = s2.length;\\n  const DP = [...Array(N1+1)].map(r => Array(N2+1).fill(false));\\n  \\n  for (let r = 0; r <= N1; r++) {\\n    for (let c = 0; c <= N2; c++) {\\n      if (r === 0 && c === 0) {\\n        DP[r][c] = true;\\n      } else if (r === 0) {\\n        DP[r][c] = DP[r][c-1] && s2[c-1] === s3[r+c-1];\\n      } else if (c === 0) {\\n        DP[r][c] = DP[r-1][c] && s1[r-1] === s3[r+c-1];\\n      } else {\\n        DP[r][c] = (DP[r][c-1] && s3[r+c-1] === s2[c-1]) || (DP[r-1][c] && s3[r+c-1] === s1[r-1]);\\n      }\\n    }\\n  }\\n  \\n  return DP[N1][N2];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 31998,
                "title": "my-c-dp-solution",
                "content": "This is a typical DP problem. Use an array to save the intermediate matching result. dp[i][j] represents if s3[0::i+j-1] is an interleaved version of s1[0::i-1] and s2[0::j-1].  The recursive equation is dp[i][j] = ( dp[i-1][j] && (s1[i-1]==s3[i+j-1]) ) || ( dp[i][j-1] && (s2[j-1]==s3[i+j-1]) ). This equation only needs dp[i][] and dp[i-1][], so two rows are enough.\\n\\n    class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int len1 = s1.size(), len2 = s2.size(), len3 = s3.size(), row, col;\\n            if(len1+len2!=len3) return false;//if the length doesn't match\\n            if(!len1 || !len2) return s3 == s1+s2; // if at least one (s1 or s2) is empty, compare if the other equals to s3\\n            bool dp[2][len2+1];\\n    \\n            for(col=1, dp[0][0] = true; col<=len2;++col)\\n                dp[0][col] = dp[0][col-1] && (s2[col-1] == s3[col-1]); // generate the first row of dp\\n            \\n            for(row=1; row<=len1;++row)\\n                for(col=1, dp[row%2][0] = dp[(row-1)%2][0] && (s1[row-1]==s3[row-1]) ; col<=len2;++col)\\n                    dp[row%2][col] = (dp[row%2][col-1] && s2[col-1] == s3[row+col-1]) ||\\n                                     (dp[(row-1)%2][col] && s1[row-1] == s3[row+col-1]); // recursive equation\\n            return dp[len1%2][len2];                         \\n         }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int len1 = s1.size(), len2 = s2.size(), len3 = s3.size(), row, col;\\n            if(len1+len2!=len3) return false;//if the length doesn't match\\n            if(!len1 || !len2) return s3 == s1+s2; // if at least one (s1 or s2) is empty, compare if the other equals to s3\\n            bool dp[2][len2+1];\\n    \\n            for(col=1, dp[0][0] = true; col<=len2;++col)\\n                dp[0][col] = dp[0][col-1] && (s2[col-1] == s3[col-1]); // generate the first row of dp\\n            \\n            for(row=1; row<=len1;++row)\\n                for(col=1, dp[row%2][0] = dp[(row-1)%2][0] && (s1[row-1]==s3[row-1]) ; col<=len2;++col)\\n                    dp[row%2][col] = (dp[row%2][col-1] && s2[col-1] == s3[row+col-1]) ||\\n                                     (dp[(row-1)%2][col] && s1[row-1] == s3[row+col-1]); // recursive equation\\n            return dp[len1%2][len2];                         \\n         }",
                "codeTag": "Java"
            },
            {
                "id": 32059,
                "title": "3ms-dfs-easy-to-understand",
                "content": "    void isInterleave1(int i, int j, int k, string s1, string s2, string s3, bool &flag, vector<bool> &visit)\\n    {\\n\\tif (!flag)\\n\\t{\\n\\t\\tif (k == s3.length())\\n\\t\\t{\\n\\t\\t\\tflag = true;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (!visit[i*(s2.length()+1) + j])\\n\\t\\t{\\n\\t\\t\\tvisit[i*(s2.length() + 1) + j] = true;\\n\\t\\t\\tif (i < s1.length() && s3[k] == s1[i])\\n\\t\\t\\t{\\n\\t\\t\\t\\tisInterleave1(i + 1, j, k + 1, s1, s2, s3, flag, visit);\\n\\t\\t\\t}\\n\\t\\t\\tif (j < s2.length() && s3[k] == s2[j])\\n\\t\\t\\t{\\n\\t\\t\\t\\tisInterleave1(i, j + 1, k + 1, s1, s2, s3, flag, visit);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n\\tbool flag = false;\\n\\tif (s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\tvector<bool> visit((s1.length()+1)*(s2.length()+1), false);\\n\\tisInterleave1(0, 0, 0, s1, s2, s3, flag, visit);\\n\\treturn flag;\\n    }",
                "solutionTags": [],
                "code": "    void isInterleave1(int i, int j, int k, string s1, string s2, string s3, bool &flag, vector<bool> &visit)\\n    {\\n\\tif (!flag)\\n\\t{\\n\\t\\tif (k == s3.length())\\n\\t\\t{\\n\\t\\t\\tflag = true;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (!visit[i*(s2.length()+1) + j])\\n\\t\\t{\\n\\t\\t\\tvisit[i*(s2.length() + 1) + j] = true;\\n\\t\\t\\tif (i < s1.length() && s3[k] == s1[i])\\n\\t\\t\\t{\\n\\t\\t\\t\\tisInterleave1(i + 1, j, k + 1, s1, s2, s3, flag, visit);\\n\\t\\t\\t}\\n\\t\\t\\tif (j < s2.length() && s3[k] == s2[j])\\n\\t\\t\\t{\\n\\t\\t\\t\\tisInterleave1(i, j + 1, k + 1, s1, s2, s3, flag, visit);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n\\tbool flag = false;\\n\\tif (s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\tvector<bool> visit((s1.length()+1)*(s2.length()+1), false);\\n\\tisInterleave1(0, 0, 0, s1, s2, s3, flag, visit);\\n\\treturn flag;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3957580,
                "title": "python-easy-to-understand-fast-dp-tabulation",
                "content": "# Python | Easy to Understand | Fast | DP-Tabulation\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3):\\n            return False\\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[0][0] = True\\n        for i in range(1, m + 1):\\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\\n        for j in range(1, n + 1):\\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                choose_s1, choose_s2 = False, False\\n                if s1[i - 1] == s3[i + j - 1]:\\n                    choose_s1 = dp[i - 1][j]\\n                if s2[j - 1] == s3[i + j - 1]:\\n                    choose_s2 = dp[i][j - 1]\\n                dp[i][j] = choose_s1 or choose_s2\\n\\n        return dp[m][n]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3):\\n            return False\\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\\n        dp[0][0] = True\\n        for i in range(1, m + 1):\\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\\n        for j in range(1, n + 1):\\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                choose_s1, choose_s2 = False, False\\n                if s1[i - 1] == s3[i + j - 1]:\\n                    choose_s1 = dp[i - 1][j]\\n                if s2[j - 1] == s3[i + j - 1]:\\n                    choose_s2 = dp[i][j - 1]\\n                dp[i][j] = choose_s1 or choose_s2\\n\\n        return dp[m][n]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956545,
                "title": "c-simple-solution-using-dp-tabulation-memoization",
                "content": "USING Dynamic Programming\\nMethod 1 -Memoization\\n*Time Complexity: O(m * n)\\nSpace Complexity: O(m * n)*\\n```\\nclass Solution {\\n      bool help(string& s1, string& s2, string& s3, int i, int j, int k, vector<vector<int>>& dp) {\\n\\n        if (i == s1.size() && j == s2.size() && k == s3.size()) { //base case \\n            return true;   \\n        }\\n        \\n        if (dp[i][j] != -1) {  //check is dp array\\n            return dp[i][j];\\n        }\\n        \\n        bool result = false;   //first false check s1 ,s2 element not present then return false as always\\n        if (i < s1.size() && s1[i] == s3[k]) { check string s1 first\\n            result = help(s1, s2, s3, i + 1, j, k + 1, dp);//check s1 and s3 \\n        }\\n        if (result==false && j < s2.size() && s2[j] == s3[k]) { check string s2\\n            result = help(s1, s2, s3, i, j + 1, k + 1, dp); //check s2 and s3\\n        }\\n        dp[i][j] = result;\\n        return result;\\n    }\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int k = s3.size();\\n\\n        if (m + n != k) {\\n            return false;  . // when size of s3 is larger\\n        }\\n        \\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));\\n        return help(s1, s2, s3, 0, 0, 0, dp);\\n    }\\n};\\n```\\nMethod 2 -Tabulation\\n*Time Complexity: O(m * n)\\nSpace Complexity: O(m * n)*\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int k = s3.size();\\n\\n        if (m + n != k) {\\n            return false;\\n        }\\n\\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\\n\\n        // base case\\n        dp[0][0] = true;\\n\\n        // Fill the dp table\\n        for (int i = 0; i <= m; ++i) {\\n            for (int j = 0; j <= n; ++j) {\\n                int l = i + j - 1; // Current character in s3\\n\\n                if (i > 0 && s1[i - 1] == s3[l]) {\\n                    dp[i][j] = dp[i][j] || dp[i - 1][j];\\n                }\\n\\n                if (j > 0 && s2[j - 1] == s3[l]) {\\n                    dp[i][j] = dp[i][j] || dp[i][j - 1];\\n                }\\n            }\\n        }\\n\\n        return dp[m][n];\\n    }\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/ee427cbc-2502-4d04-9f60-13f66bf0a0b0_1692928977.5194664.webp)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n      bool help(string& s1, string& s2, string& s3, int i, int j, int k, vector<vector<int>>& dp) {\\n\\n        if (i == s1.size() && j == s2.size() && k == s3.size()) { //base case \\n            return true;   \\n        }\\n        \\n        if (dp[i][j] != -1) {  //check is dp array\\n            return dp[i][j];\\n        }\\n        \\n        bool result = false;   //first false check s1 ,s2 element not present then return false as always\\n        if (i < s1.size() && s1[i] == s3[k]) { check string s1 first\\n            result = help(s1, s2, s3, i + 1, j, k + 1, dp);//check s1 and s3 \\n        }\\n        if (result==false && j < s2.size() && s2[j] == s3[k]) { check string s2\\n            result = help(s1, s2, s3, i, j + 1, k + 1, dp); //check s2 and s3\\n        }\\n        dp[i][j] = result;\\n        return result;\\n    }\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int k = s3.size();\\n\\n        if (m + n != k) {\\n            return false;  . // when size of s3 is larger\\n        }\\n        \\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));\\n        return help(s1, s2, s3, 0, 0, 0, dp);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.size();\\n        int n = s2.size();\\n        int k = s3.size();\\n\\n        if (m + n != k) {\\n            return false;\\n        }\\n\\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\\n\\n        // base case\\n        dp[0][0] = true;\\n\\n        // Fill the dp table\\n        for (int i = 0; i <= m; ++i) {\\n            for (int j = 0; j <= n; ++j) {\\n                int l = i + j - 1; // Current character in s3\\n\\n                if (i > 0 && s1[i - 1] == s3[l]) {\\n                    dp[i][j] = dp[i][j] || dp[i - 1][j];\\n                }\\n\\n                if (j > 0 && s2[j - 1] == s3[l]) {\\n                    dp[i][j] = dp[i][j] || dp[i][j - 1];\\n                }\\n            }\\n        }\\n\\n        return dp[m][n];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3715481,
                "title": "c-solution-with-explanation",
                "content": "\\n# Approach\\nThe dynamic programming approach uses a 2D DP array where dp[i][j] represents whether the substrings s1[0...i-1] and s2[0...j-1] can interleave to form s3[0...i+j-1].\\n\\n\\nHere\\'s a step-by-step explanation of the logic behind the solution:\\n\\n1. **Base Case Initialization**: Initialize a 2D DP array `dp`, where `dp[i][j]` represents whether the first `i` characters of `s1` and the first `j` characters of `s2` can be interleaved to form the first `i + j` characters of `s3`. Initialize `dp[0][0]` as `true`, since two empty strings can form an empty string.\\n\\n2. **Check for Matches with `s1`**: Iterate through the characters of `s1` (from index 1 to `m`). For each character in `s1`, if the current character matches the corresponding character in `s3` and the previous state `dp[i - 1][0]` is `true`, set `dp[i][0]` as `true`. This means that the first `i` characters of `s1` can form the first `i` characters of `s3`.\\n\\n3. **Check for Matches with `s2`**: Similarly, iterate through the characters of `s2` (from index 1 to `n`). For each character in `s2`, if the current character matches the corresponding character in `s3` and the previous state `dp[0][j - 1]` is `true`, set `dp[0][j]` as `true`. This means that the first `j` characters of `s2` can form the first `j` characters of `s3`.\\n\\n4. **Interleaving Check**: Iterate through both `s1` and `s2` (using nested loops). For each position `(i, j)` in the DP array, check if either of the following conditions holds:\\n   - If the current character in `s1` matches the corresponding character in `s3` and the state `dp[i - 1][j]` is `true`. This indicates that characters from `s1` are being used.\\n   - If the current character in `s2` matches the corresponding character in `s3` and the state `dp[i][j - 1]` is `true`. This indicates that characters from `s2` are being used.\\n   \\n   If either of these conditions holds, set `dp[i][j]` as `true`, indicating that the characters from both `s1` and `s2` can be interleaved to form the current prefix of `s3`.\\n\\n5. **Final Result**: After filling the DP array, the value of `dp[m][n]` will indicate whether the entire strings `s1` and `s2` can be interleaved to form the string `s3`.\\n\\n\\n\\n# Upvote for goodluck in interviews\\uD83E\\uDD1E\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.length();\\n        int n = s2.length();\\n        \\n        // Check if the lengths of s1, s2, and s3 add up\\n        if (m + n != s3.length()) {\\n            return false;\\n        }\\n        \\n        // Create a 2D DP array to store the intermediate results\\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\\n        \\n        // Initialize the base cases\\n        dp[0][0] = true;\\n        \\n        // Check if s1 matches with s3\\n        for (int i = 1; i <= m; i++) {\\n            if (s1[i - 1] == s3[i - 1] && dp[i - 1][0]) {\\n                dp[i][0] = true;\\n            }\\n        }\\n        \\n        // Check if s2 matches with s3\\n        for (int j = 1; j <= n; j++) {\\n            if (s2[j - 1] == s3[j - 1] && dp[0][j - 1]) {\\n                dp[0][j] = true;\\n            }\\n        }\\n        \\n        // Check if s1 and s2 interleave to form s3\\n        for (int i = 1; i <= m; i++) {\\n            for (int j = 1; j <= n; j++) {\\n                if ((s1[i - 1] == s3[i + j - 1] && dp[i - 1][j]) ||\\n                    (s2[j - 1] == s3[i + j - 1] && dp[i][j - 1])) {\\n                    dp[i][j] = true;\\n                }\\n            }\\n        }\\n        \\n        return dp[m][n];\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int m = s1.length();\\n        int n = s2.length();\\n        \\n        // Check if the lengths of s1, s2, and s3 add up\\n        if (m + n != s3.length()) {\\n            return false;\\n        }\\n        \\n        // Create a 2D DP array to store the intermediate results\\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\\n        \\n        // Initialize the base cases\\n        dp[0][0] = true;\\n        \\n        // Check if s1 matches with s3\\n        for (int i = 1; i <= m; i++) {\\n            if (s1[i - 1] == s3[i - 1] && dp[i - 1][0]) {\\n                dp[i][0] = true;\\n            }\\n        }\\n        \\n        // Check if s2 matches with s3\\n        for (int j = 1; j <= n; j++) {\\n            if (s2[j - 1] == s3[j - 1] && dp[0][j - 1]) {\\n                dp[0][j] = true;\\n            }\\n        }\\n        \\n        // Check if s1 and s2 interleave to form s3\\n        for (int i = 1; i <= m; i++) {\\n            for (int j = 1; j <= n; j++) {\\n                if ((s1[i - 1] == s3[i + j - 1] && dp[i - 1][j]) ||\\n                    (s2[j - 1] == s3[i + j - 1] && dp[i][j - 1])) {\\n                    dp[i][j] = true;\\n                }\\n            }\\n        }\\n        \\n        return dp[m][n];\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3097709,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(), n2=s2.size(), n3=s3.size();\\n        if(n1+n2 != n3)\\n        return false;\\n        vector<vector<bool>> dp(n1+1, vector<bool>(n2+1));\\n        for(int i=0;i<=n1;i++)\\n        {\\n            for(int j=0;j<=n2;j++)\\n            {\\n                if(i==0 && j==0)\\n                dp[i][j]=true;\\n                else if(i==0)\\n                dp[i][j]=(dp[i][j-1] && s2[j-1]==s3[j-1]);\\n                else if(j==0)\\n                dp[i][j]=(dp[i-1][j] && s1[i-1]==s3[i-1]);\\n                else\\n                dp[i][j]=(dp[i][j-1] && s2[j-1]==s3[i+j-1]) || \\n                         (dp[i-1][j] && s1[i-1]==s3[i+j-1]);\\n            }\\n        }\\n        return dp[n1][n2];\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(), n2=s2.size(), n3=s3.size();\\n        if(n1+n2 != n3)\\n        return false;\\n        vector<vector<bool>> dp(n1+1, vector<bool>(n2+1));\\n        for(int i=0;i<=n1;i++)\\n        {\\n            for(int j=0;j<=n2;j++)\\n            {\\n                if(i==0 && j==0)\\n                dp[i][j]=true;\\n                else if(i==0)\\n                dp[i][j]=(dp[i][j-1] && s2[j-1]==s3[j-1]);\\n                else if(j==0)\\n                dp[i][j]=(dp[i-1][j] && s1[i-1]==s3[i-1]);\\n                else\\n                dp[i][j]=(dp[i][j-1] && s2[j-1]==s3[i+j-1]) || \\n                         (dp[i-1][j] && s1[i-1]==s3[i+j-1]);\\n            }\\n        }\\n        return dp[n1][n2];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2250515,
                "title": "c-easy-understandable-code-recursive-dp-please-upvote-if-found-useful",
                "content": "``` \\n#define ll long long\\nclass Solution {\\npublic:\\n    ll n,m,nn;\\n    bool fun(ll i,ll j,ll k,string &s1,string &s2,string &t, vector<vector<vector<int>>>&dp){\\n        \\n        \\n        if(i==n and j==m and k==nn)return true;\\n        else if(i==n and j==m)return false;\\n        else if(i==n){\\n            bool ok=true;\\n            if(s2.substr(j,m-j)==t.substr(k,nn-k))return true;\\n            else return dp[i][j][k]= false;\\n        }\\n        else if(j==m){\\n              if(s1.substr(i,n-i)==t.substr(k,nn-k))return true;\\n            else return  dp[i][j][k]=false;\\n        }\\n        \\n        if(dp[i][j][k]!=-1)return dp[i][j][k];\\n        \\n        if(s1[i]==t[k] and s2[j]==t[k]){\\n            bool ans1=fun(i+1,j,k+1,s1,s2,t,dp);\\n            bool ans2=fun(i,j+1,k+1,s1,s2,t,dp);\\n            return dp[i][j][k]= ans1|ans2;\\n        }\\n        else if(s1[i]==t[k]){\\n            return dp[i][j][k]= fun(i+1,j,k+1,s1,s2,t,dp);\\n        }\\n        else if(s2[j]==t[k]){\\n            return dp[i][j][k]= fun(i,j+1,k+1,s1,s2,t,dp);\\n        }\\n        else return dp[i][j][k]= false;\\n    }\\n    \\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        n=s1.size();\\n        m=s2.size();\\n        nn=s3.size();\\n        if(n+m!=nn)return false;\\n        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(m+1,vector<int>(nn+1,-1)));\\n        \\n        return fun(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "``` \\n#define ll long long\\nclass Solution {\\npublic:\\n    ll n,m,nn;\\n    bool fun(ll i,ll j,ll k,string &s1,string &s2,string &t, vector<vector<vector<int>>>&dp){\\n        \\n        \\n        if(i==n and j==m and k==nn)return true;\\n        else if(i==n and j==m)return false;\\n        else if(i==n){\\n            bool ok=true;\\n            if(s2.substr(j,m-j)==t.substr(k,nn-k))return true;\\n            else return dp[i][j][k]= false;\\n        }\\n        else if(j==m){\\n              if(s1.substr(i,n-i)==t.substr(k,nn-k))return true;\\n            else return  dp[i][j][k]=false;\\n        }\\n        \\n        if(dp[i][j][k]!=-1)return dp[i][j][k];\\n        \\n        if(s1[i]==t[k] and s2[j]==t[k]){\\n            bool ans1=fun(i+1,j,k+1,s1,s2,t,dp);\\n            bool ans2=fun(i,j+1,k+1,s1,s2,t,dp);\\n            return dp[i][j][k]= ans1|ans2;\\n        }\\n        else if(s1[i]==t[k]){\\n            return dp[i][j][k]= fun(i+1,j,k+1,s1,s2,t,dp);\\n        }\\n        else if(s2[j]==t[k]){\\n            return dp[i][j][k]= fun(i,j+1,k+1,s1,s2,t,dp);\\n        }\\n        else return dp[i][j][k]= false;\\n    }\\n    \\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        n=s1.size();\\n        m=s2.size();\\n        nn=s3.size();\\n        if(n+m!=nn)return false;\\n        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(m+1,vector<int>(nn+1,-1)));\\n        \\n        return fun(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2249170,
                "title": "very-very-easy-100-beat-solution",
                "content": "class Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size();\\n        int n2=s2.size();\\n        int n3=s3.size();\\n        if(n3!=n1+n2) return false;\\n        bool t[n1+1][n2+1];\\n        for(int i=0;i<n1+1;i++)\\n            for(int j=0;j<n2+1;j++){\\n                if(i==0&&j==0) t[i][j]= true;\\n                else if(i==0)\\n                    t[i][j]=(t[i][j-1]&&s2[j-1]==s3[i+j-1]);\\n                else if(j==0)\\n                    t[i][j]=(t[i-1][j]&&s1[i-1]==s3[i+j-1]);\\n                else \\n                    t[i][j]=(t[i-1][j]&&s1[i-1]==s3[i+j-1])||\\n                              (t[i][j-1]&&s2[j-1]==s3[i+j-1]);\\n            }\\n        return t[n1][n2];\\n    }\\n};",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size();\\n        int n2=s2.size();\\n        int n3=s3.size();\\n        if(n3!=n1+n2) return false;\\n        bool t[n1+1][n2+1];\\n        for(int i=0;i<n1+1;i++)\\n            for(int j=0;j<n2+1;j++){\\n                if(i==0&&j==0) t[i][j]= true;\\n                else if(i==0)\\n                    t[i][j]=(t[i][j-1]&&s2[j-1]==s3[i+j-1]);\\n                else if(j==0)\\n                    t[i][j]=(t[i-1][j]&&s1[i-1]==s3[i+j-1]);\\n                else \\n                    t[i][j]=(t[i-1][j]&&s1[i-1]==s3[i+j-1])||\\n                              (t[i][j-1]&&s2[j-1]==s3[i+j-1]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2248916,
                "title": "c-top-down-approach-dynamic-programming-diagram-recursion-tree",
                "content": "![image](https://assets.leetcode.com/users/images/93cf4f7e-6b36-4465-9a08-fa9a9abef864_1657167982.869954.jpeg)\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n**Recursion Tree**\\n\\n![image](https://assets.leetcode.com/users/images/ad3ede31-8317-43b5-8338-cc74add708ed_1657167531.1246266.jpeg)\\n\\nNow take **s1=\"aa\" and s2=\"aa\" s3 = \"aaaa\"** . \\nYou will observe repeated subproblems . \\n\\n\\n***C++ Top-Down Memoization***\\n```\\nclass Solution {\\npublic:\\n    bool recursion(string s1, int i,string s2,int j ,string s3 ,int k,vector<vector<int>>&dp)\\n    {\\n        if(i==s1.length() && j==s2.length() && k==s3.length())\\n            return true; // when all three strings reach end simultaneously \\n        \\n        if(k==s3.length()) return false; \\n        if(dp[i][j]!=-1) return dp[i][j];\\n        \\n    \\n        if(s1[i]==s3[k] && recursion(s1,i+1,s2,j,s3,k+1,dp))\\n            return dp[i][j]=true;\\n        if(s2[j]==s3[k] && recursion(s1,i,s2,j+1,s3,k+1,dp))\\n            return dp[i][j]=true;\\n        \\n        return dp[i][j]=false;\\n    }\\n  \\n    bool isInterleave(string s1, string s2, string s3) \\n    {\\n        if(s1.length()+s2.length()!=s3.length())\\n            return false;\\n            \\n        vector<vector<int>>dp(s1.length()+1,vector<int>(s2.length()+1,-1));\\n        \\n        return recursion(s1,0,s2,0,s3,0,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool recursion(string s1, int i,string s2,int j ,string s3 ,int k,vector<vector<int>>&dp)\\n    {\\n        if(i==s1.length() && j==s2.length() && k==s3.length())\\n            return true; // when all three strings reach end simultaneously \\n        \\n        if(k==s3.length()) return false; \\n        if(dp[i][j]!=-1) return dp[i][j];\\n        \\n    \\n        if(s1[i]==s3[k] && recursion(s1,i+1,s2,j,s3,k+1,dp))\\n            return dp[i][j]=true;\\n        if(s2[j]==s3[k] && recursion(s1,i,s2,j+1,s3,k+1,dp))\\n            return dp[i][j]=true;\\n        \\n        return dp[i][j]=false;\\n    }\\n  \\n    bool isInterleave(string s1, string s2, string s3) \\n    {\\n        if(s1.length()+s2.length()!=s3.length())\\n            return false;\\n            \\n        vector<vector<int>>dp(s1.length()+1,vector<int>(s2.length()+1,-1));\\n        \\n        return recursion(s1,0,s2,0,s3,0,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1813050,
                "title": "c-o-n-2-top-down-memoization",
                "content": "```\\nclass Solution {\\nprivate:\\n    string p, q, s;\\n    bool f(int i, int j, vector<vector<int>>& dp) {\\n        if(i == p.size() and j == q.size())\\n            return 1;\\n        bool ans = 0;\\n        if(dp[i][j] != -1)\\n            return dp[i][j];\\n         if(i < p.size() and p[i] == s[i + j])\\n             ans |= f(i + 1, j, dp);\\n        \\n         if(j < q.size() and q[j] == s[i + j])\\n            ans |= f(i, j + 1, dp);\\n\\n        \\n       \\n        return dp[i][j] = ans;\\n    }\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n                p = s1, q = s2, s = s3;\\n        vector<vector<int>> dp(101, vector<int>(101, -1));\\n        if(s1.size() + s2.size() != s3.size())\\n            return false;\\n        \\n        int i = 0, j = 0;\\n        return f(i, j, dp);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\nprivate:\\n    string p, q, s;\\n    bool f(int i, int j, vector<vector<int>>& dp) {\\n        if(i == p.size() and j == q.size())\\n            return 1;\\n        bool ans = 0;\\n        if(dp[i][j] != -1)\\n            return dp[i][j];\\n         if(i < p.size() and p[i] == s[i + j])\\n             ans |= f(i + 1, j, dp);\\n        \\n         if(j < q.size() and q[j] == s[i + j])\\n            ans |= f(i, j + 1, dp);\\n\\n        \\n       \\n        return dp[i][j] = ans;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1731392,
                "title": "python-3-memo-soln-beginner-friendly",
                "content": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1)+len(s2)!=len(s3):\\n            return False\\n        \\n        dp={}\\n        \\n        def solve(i,j):\\n            \\n            if i== len(s1) and j==len(s2):\\n                return True\\n            \\n            if (i,j) in dp:\\n                return dp[(i,j)]\\n            \\n            if  i <len(s1) and s3[i+j]==s1[i] and solve(i+1,j):\\n                return True\\n\\n            if j<len(s2) and s3[i+j]==s2[j] and solve(i,j+1):\\n                return True\\n            \\n            dp[(i,j)]=False\\n         \\n        return solve(0,0)\\n```",
                "solutionTags": [
                    "Python3",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1)+len(s2)!=len(s3):\\n            return False\\n        \\n        dp={}\\n        \\n        def solve(i,j):\\n            \\n            if i== len(s1) and j==len(s2):\\n                return True\\n            \\n            if (i,j) in dp:\\n                return dp[(i,j)]\\n            \\n            if  i <len(s1) and s3[i+j]==s1[i] and solve(i+1,j):\\n                return True\\n\\n            if j<len(s2) and s3[i+j]==s2[j] and solve(i,j+1):\\n                return True\\n            \\n            dp[(i,j)]=False\\n         \\n        return solve(0,0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1375149,
                "title": "simple-java-solution-dp-memoization-time-o-n-m",
                "content": "```\\nclass Solution {\\n\\tpublic boolean isInterLeave(String s1,String s2,String s3)\\n\\t{\\n       if(s1.length()+s2.length()!=s3.length())\\n       return false;\\n       Boolean dp[][]= new Boolean[s1.length()+1][s2.length()+1];\\n       return  solve(s1,s2,s3,0,0,dp);\\n    }\\n    \\n     boolean solve(String s1,String s2,String s3,int i,int j, Boolean[][]dp)\\n     {\\n           if( i == s1.length() && j == s2.length() )\\n            return  true;\\n         \\n         if(dp[i][j]!=null)\\n         {\\n             return dp[i][j];\\n         }\\n         \\n        if(i< s1.length() && s1.charAt(i)==s3.charAt(i+j)) \\n        {\\n           boolean f1= solve(s1,s2,s3,i+1,j,dp);\\n            dp[i][j] =  f1;\\n            if(f1==true)\\n            {\\n                return true;\\n            }\\n        }\\n       if(j< s2.length() && s2.charAt(j)==s3.charAt(i+j)) \\n        {\\n           boolean f2= solve(s1,s2,s3,i,j+1,dp);\\n            dp[i][j] = f2;\\n            if(f2==true)\\n            {\\n                return true;\\n            }    \\n        }   \\n       dp[i][j]=false;  \\n       return dp[i][j];  \\n     }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n\\tpublic boolean isInterLeave(String s1,String s2,String s3)\\n\\t{\\n       if(s1.length()+s2.length()!=s3.length())\\n       return false;\\n       Boolean dp[][]= new Boolean[s1.length()+1][s2.length()+1];\\n       return  solve(s1,s2,s3,0,0,dp);\\n    }\\n    \\n     boolean solve(String s1,String s2,String s3,int i,int j, Boolean[][]dp)\\n     {\\n           if( i == s1.length() && j == s2.length() )\\n            return  true;\\n         \\n         if(dp[i][j]!=null)\\n         {\\n             return dp[i][j];\\n         }\\n         \\n        if(i< s1.length() && s1.charAt(i)==s3.charAt(i+j)) \\n        {\\n           boolean f1= solve(s1,s2,s3,i+1,j,dp);\\n            dp[i][j] =  f1;\\n            if(f1==true)\\n            {\\n                return true;\\n            }\\n        }\\n       if(j< s2.length() && s2.charAt(j)==s3.charAt(i+j)) \\n        {\\n           boolean f2= solve(s1,s2,s3,i,j+1,dp);\\n            dp[i][j] = f2;\\n            if(f2==true)\\n            {\\n                return true;\\n            }    \\n        }   \\n       dp[i][j]=false;  \\n       return dp[i][j];  \\n     }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247301,
                "title": "interleaving-string-dp-solution-c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int x = s1.length();\\n        int y = s2.length();\\n        int z = s3.length();\\n        if(z!=x+y)\\n            return false;\\n        bool dp[x+1][y+1];\\n        for(int i=0;i<=x;i++)\\n        {\\n            for(int j=0;j<=y;j++)\\n            {\\n                if(i==0 && j==0)\\n                    dp[i][j]=true;\\n                else if(i==0)\\n                    dp[i][j] = dp[i][j-1] && s2[j-1]==s3[j-1];\\n                else if(j==0)\\n                    dp[i][j] = dp[i-1][j] && s1[i-1]==s3[i-1];\\n                else\\n                    dp[i][j] = ((dp[i][j-1] && s2[j-1]==s3[i+j-1]) || (dp[i-1][j] && s1[i-1]==s3[i+j-1]));\\n            }\\n        }\\n        return dp[x][y];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int x = s1.length();\\n        int y = s2.length();\\n        int z = s3.length();\\n        if(z!=x+y)\\n            return false;\\n        bool dp[x+1][y+1];\\n        for(int i=0;i<=x;i++)\\n        {\\n            for(int j=0;j<=y;j++)\\n            {\\n                if(i==0 && j==0)\\n                    dp[i][j]=true;\\n                else if(i==0)\\n                    dp[i][j] = dp[i][j-1] && s2[j-1]==s3[j-1];\\n                else if(j==0)\\n                    dp[i][j] = dp[i-1][j] && s1[i-1]==s3[i-1];\\n                else\\n                    dp[i][j] = ((dp[i][j-1] && s2[j-1]==s3[i+j-1]) || (dp[i-1][j] && s1[i-1]==s3[i+j-1]));\\n            }\\n        }\\n        return dp[x][y];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247179,
                "title": "c-clean-dp-solution-o-n-m-space-and-o-m-space",
                "content": "# **O(n\\\\*m) space**\\n\\n```\\nbool isInterleave(string s1, string s2, string s3) {\\n\\n\\tint n = s1.size(), m = s2.size(), sz = s3.size();\\n\\tif(n + m != sz) return false;\\n\\n\\tvector<vector<bool>> dp(n+1, vector<bool>(m+1));\\n\\t// dp[i][j] = is it possible to form s3[0...i+j-1] from s1[0...i-1] and s2[0...j-1]\\n\\n\\t// both strings empty\\n\\tdp[0][0] = true;\\n\\n\\t// if s2 is empty\\n\\tfor(int i = 1 ; i <= n ; i++) {\\n\\t\\tdp[i][0] = (s1[i-1] == s3[i-1]) and dp[i-1][0];\\n\\t}\\n\\n\\t// if s1 is empty\\n\\tfor(int j = 1 ; j <= m ; j++) {\\n\\t\\tdp[0][j] = (s2[j-1] == s3[j-1]) and dp[0][j-1];\\n\\t}\\n\\n\\tfor(int i = 1 ; i <= n ; i++) {\\n\\t\\tfor(int j = 1 ; j <= m ; j++) {\\n\\n\\t\\t\\tbool matchI = (s1[i-1] == s3[i+j-1]) and dp[i-1][j];\\n\\t\\t\\tbool matchJ = (s2[j-1] == s3[i+j-1]) and dp[i][j-1];\\n\\n\\t\\t\\tdp[i][j] = matchI or matchJ;\\n\\t\\t}\\n\\t}\\n\\n\\n\\treturn dp[n][m];\\n}\\n```\\n\\n# **O(m) space**\\n\\n\\n```\\nbool isInterleave(string s1, string s2, string s3) {\\n\\tint n = s1.size(), m = s2.size();\\n\\tif(n + m != s3.size()) return false;\\n\\n\\n\\tvector<bool> dp(m+1);\\n\\tdp[0] = true;\\n\\n\\tfor(int len1 = 0 ; len1 <= n ; len1++) {\\n\\t\\tfor(int len2 = 0 ; len2 <= m ; len2++) {\\n\\n\\t\\t\\tif(!len1 and !len2) continue;\\n\\t\\t\\tint len3 = len1 + len2;\\n\\t\\t\\tbool match1 = (len1) ? s1[len1-1] == s3[len3-1] and dp[len2] : false;\\n\\t\\t\\tbool match2 = (len2) ? s2[len2-1] == s3[len3-1] and dp[len2-1] : false;\\n\\t\\t\\tdp[len2] = match1 or match2;\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[m];\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nbool isInterleave(string s1, string s2, string s3) {\\n\\n\\tint n = s1.size(), m = s2.size(), sz = s3.size();\\n\\tif(n + m != sz) return false;\\n\\n\\tvector<vector<bool>> dp(n+1, vector<bool>(m+1));\\n\\t// dp[i][j] = is it possible to form s3[0...i+j-1] from s1[0...i-1] and s2[0...j-1]\\n\\n\\t// both strings empty\\n\\tdp[0][0] = true;\\n\\n\\t// if s2 is empty\\n\\tfor(int i = 1 ; i <= n ; i++) {\\n\\t\\tdp[i][0] = (s1[i-1] == s3[i-1]) and dp[i-1][0];\\n\\t}\\n\\n\\t// if s1 is empty\\n\\tfor(int j = 1 ; j <= m ; j++) {\\n\\t\\tdp[0][j] = (s2[j-1] == s3[j-1]) and dp[0][j-1];\\n\\t}\\n\\n\\tfor(int i = 1 ; i <= n ; i++) {\\n\\t\\tfor(int j = 1 ; j <= m ; j++) {\\n\\n\\t\\t\\tbool matchI = (s1[i-1] == s3[i+j-1]) and dp[i-1][j];\\n\\t\\t\\tbool matchJ = (s2[j-1] == s3[i+j-1]) and dp[i][j-1];\\n\\n\\t\\t\\tdp[i][j] = matchI or matchJ;\\n\\t\\t}\\n\\t}\\n\\n\\n\\treturn dp[n][m];\\n}\\n```\n```\\nbool isInterleave(string s1, string s2, string s3) {\\n\\tint n = s1.size(), m = s2.size();\\n\\tif(n + m != s3.size()) return false;\\n\\n\\n\\tvector<bool> dp(m+1);\\n\\tdp[0] = true;\\n\\n\\tfor(int len1 = 0 ; len1 <= n ; len1++) {\\n\\t\\tfor(int len2 = 0 ; len2 <= m ; len2++) {\\n\\n\\t\\t\\tif(!len1 and !len2) continue;\\n\\t\\t\\tint len3 = len1 + len2;\\n\\t\\t\\tbool match1 = (len1) ? s1[len1-1] == s3[len3-1] and dp[len2] : false;\\n\\t\\t\\tbool match2 = (len2) ? s2[len2-1] == s3[len3-1] and dp[len2-1] : false;\\n\\t\\t\\tdp[len2] = match1 or match2;\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[m];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1246996,
                "title": "c-dp-4ms-solution-memoization",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.length()>s1.length()+s2.length() || s3.length()<s1.length()+s2.length()){\\n            return false; \\n        }\\n        if(s3==(s1+s2)){\\n            return true;\\n        }\\n        vector<vector<int>> dp(s1.length()+1, vector<int> (s2.length()+1,-1));\\n        return interleave(s1,s2,s3,0,0,0,dp);\\n    }\\n    bool interleave(string &s1, string &s2, string &s3, int i, int j, int k, vector<vector<int>> &dp){\\n        if((i==s1.length()&&j==s2.length()) && (k==s3.length())){\\n            return true; //base case\\n        }\\n        if(dp[i][j]!=-1){\\n            return dp[i][j]; //look-up\\n            }\\n        if(i==s1.length()&& j< s2.length()){\\n             if(s3[k]==s2[j])\\n            return dp[i][j] = interleave(s1,s2,s3,i,j+1,k+1,dp); // if s1 string gets empty\\n            return false;\\n        }\\n        if(i<s1.length() && j==s2.length()){\\n           if(s3[k]==s1[i])\\n            return dp[i][j] = interleave(s1,s2,s3,i+1,j,k+1,dp); // if s2 string gets empty\\n            return false;\\n        }\\n        if(s3[k]==s2[j] && s3[k]==s1[i]){\\n            bool op2 = interleave(s1,s2,s3,i+1,j,k+1,dp); //choose from string s1\\n            bool op1 = interleave(s1,s2,s3,i,j+1,k+1,dp);  //choose from string s2;\\n            \\n            return dp[i][j] = op1||op2;\\n        }else if(s3[k]==s2[j]){\\n            return dp[i][j] = interleave(s1,s2,s3,i,j+1,k+1,dp); // choose from string s2;\\n        }else if(s3[k]==s1[i]){\\n            return dp[i][j] = interleave(s1,s2,s3,i+1,j,k+1,dp); // choose from string s1;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.length()>s1.length()+s2.length() || s3.length()<s1.length()+s2.length()){\\n            return false; \\n        }\\n        if(s3==(s1+s2)){\\n            return true;\\n        }\\n        vector<vector<int>> dp(s1.length()+1, vector<int> (s2.length()+1,-1));\\n        return interleave(s1,s2,s3,0,0,0,dp);\\n    }\\n    bool interleave(string &s1, string &s2, string &s3, int i, int j, int k, vector<vector<int>> &dp){\\n        if((i==s1.length()&&j==s2.length()) && (k==s3.length())){\\n            return true; //base case\\n        }\\n        if(dp[i][j]!=-1){\\n            return dp[i][j]; //look-up\\n            }\\n        if(i==s1.length()&& j< s2.length()){\\n             if(s3[k]==s2[j])\\n            return dp[i][j] = interleave(s1,s2,s3,i,j+1,k+1,dp); // if s1 string gets empty\\n            return false;\\n        }\\n        if(i<s1.length() && j==s2.length()){\\n           if(s3[k]==s1[i])\\n            return dp[i][j] = interleave(s1,s2,s3,i+1,j,k+1,dp); // if s2 string gets empty\\n            return false;\\n        }\\n        if(s3[k]==s2[j] && s3[k]==s1[i]){\\n            bool op2 = interleave(s1,s2,s3,i+1,j,k+1,dp); //choose from string s1\\n            bool op1 = interleave(s1,s2,s3,i,j+1,k+1,dp);  //choose from string s2;\\n            \\n            return dp[i][j] = op1||op2;\\n        }else if(s3[k]==s2[j]){\\n            return dp[i][j] = interleave(s1,s2,s3,i,j+1,k+1,dp); // choose from string s2;\\n        }else if(s3[k]==s1[i]){\\n            return dp[i][j] = interleave(s1,s2,s3,i+1,j,k+1,dp); // choose from string s1;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1246872,
                "title": "interleaving-string-100-fast-dp-solution",
                "content": "```\\n\\n\\nbool isInterleave(char * s1, char * s2, char * s3){\\n    int m = strlen(s1);\\n    int n = strlen(s2);\\n    int l = strlen(s3);\\n    if ((m + n) != l)\\n        return false;\\n    int dp[m+1][n+1];\\n    for(int i = 0;i <= m;i += 1) {\\n        for(int j = 0;j <= n;j += 1) {\\n            if (i == 0 && j == 0)\\n                dp[i][j] = 1;\\n            else if(i == 0)\\n                dp[i][j] = dp[i][j-1] && s2[j-1] == s3[j-1];\\n            else if(j == 0)\\n                dp[i][j] = dp[i-1][j] && s1[i-1] == s3[i-1];\\n            else\\n                dp[i][j] = (dp[i][j-1] && s2[j-1] == s3[i+j-1]) || (dp[i-1][j] && s1[i-1] == s3[i+j-1]);\\n        }\\n    }\\n    return dp[m][n];\\n}\\n\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\n\\n\\nbool isInterleave(char * s1, char * s2, char * s3){\\n    int m = strlen(s1);\\n    int n = strlen(s2);\\n    int l = strlen(s3);\\n    if ((m + n) != l)\\n        return false;\\n    int dp[m+1][n+1];\\n    for(int i = 0;i <= m;i += 1) {\\n        for(int j = 0;j <= n;j += 1) {\\n            if (i == 0 && j == 0)\\n                dp[i][j] = 1;\\n            else if(i == 0)\\n                dp[i][j] = dp[i][j-1] && s2[j-1] == s3[j-1];\\n            else if(j == 0)\\n                dp[i][j] = dp[i-1][j] && s1[i-1] == s3[i-1];\\n            else\\n                dp[i][j] = (dp[i][j-1] && s2[j-1] == s3[i+j-1]) || (dp[i-1][j] && s1[i-1] == s3[i+j-1]);\\n        }\\n    }\\n    return dp[m][n];\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1127736,
                "title": "javascript-simple-top-down-dp",
                "content": "Time: `O(N*M)`\\nSpace: `O(N*M)`\\n```javascript\\nvar isInterleave = function(s1, s2, s3) {\\n    if(s1.length + s2.length !== s3.length) return false;\\n    const memo = new Map()\\n    \\n    function run(i1, i2, i3) {\\n        if(i1 === s1.length) return s3.slice(i3) === s2.slice(i2);\\n        if(i2 === s2.length) return s3.slice(i3) === s1.slice(i1);\\n        const key = `${i1}-${i2}`;\\n        if(memo.has(key)) return memo.get(key)\\n        \\n        let res = false;\\n        \\n        if(s1[i1] === s2[i2] && s1[i1] === s3[i3]) res = run(i1+1, i2, i3+1) || run(i1, i2+1, i3+1);\\n        else if(s1[i1] === s3[i3]) res = run(i1+1, i2, i3+1);\\n        else if(s2[i2] === s3[i3]) res = run(i1, i2+1, i3+1);\\n        \\n        memo.set(key, res);\\n        return res;\\n    }\\n    return run(0, 0, 0)\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming"
                ],
                "code": "```javascript\\nvar isInterleave = function(s1, s2, s3) {\\n    if(s1.length + s2.length !== s3.length) return false;\\n    const memo = new Map()\\n    \\n    function run(i1, i2, i3) {\\n        if(i1 === s1.length) return s3.slice(i3) === s2.slice(i2);\\n        if(i2 === s2.length) return s3.slice(i3) === s1.slice(i1);\\n        const key = `${i1}-${i2}`;\\n        if(memo.has(key)) return memo.get(key)\\n        \\n        let res = false;\\n        \\n        if(s1[i1] === s2[i2] && s1[i1] === s3[i3]) res = run(i1+1, i2, i3+1) || run(i1, i2+1, i3+1);\\n        else if(s1[i1] === s3[i3]) res = run(i1+1, i2, i3+1);\\n        else if(s2[i2] === s3[i3]) res = run(i1, i2+1, i3+1);\\n        \\n        memo.set(key, res);\\n        return res;\\n    }\\n    return run(0, 0, 0)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 188575,
                "title": "extremely-easy-to-understand-java-dp-solution-with-detailed-explanations",
                "content": "  Hi! This is a quite straightforward solution using dp array. I can\\'t say this is runing with the lowest time complexity, but it\\'s really really really easy to understand!\\n\\tI introduced a array called ```boolean data[a + 1][b + 1]```, here a, b stand for the length of s1, s2. \\n  Each element in ```data``` like ```data[i + 1][j + 1]``` means if ```s3.substring(0, k + 1)``` could be formed by interleaving of ```s1.substring(0, i + 1)``` and ```s2.substring(0, j + 1)```, here ```k = i + j + 1``` in which the length of the substring of s1 + s2 equals to s3.\\n\\tThen there is the main idea of how this dp solution works:\\n\\t```Situation 1:```\\n\\t```if s3.charAt(k) == s1.charAt(i), so data[i + 1][j + 1] |= data[i][j + 1]```\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t```(the default data[i + 1][j + 1] is false)``` \\n\\tAnd\\n\\t```if s3.charAt(k) == s2.charAt(j), so data[i + 1][j + 1] |= data[i + 1][j]```\\n\\t```Situation 2:```\\n\\t```s3.charAt(k) != s1.charAt(i) && s3.charAt(k) != s2.charAt(j)``` doesn\\'t match! Just leave ```data[i + 1][j + 1]``` false.\\n\\t\\tBase case: \\n\\t\\t```1. data[0][0] = true``` since empty s1, s2 match empty s3.\\n\\t\\t```2. if(s1.charAt(i) == s3.charAt(i)) data[i + 1][0] = true ``` since s3 could be form by s1 without s2.\\n\\t\\t```3. if(s2.charAt(j) == s3.charAt(j)) data[0][j + 1] = true ``` reason is same as ```2.```\\n\\t\\tTime Complexity <strong>O(ab)</strong> btw.\\n\\t\\tAnd the code is shown below:\\n\\t\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int a = s1.length(), b = s2.length(), c = s3.length();\\n        if(a + b != c) return false;\\n        boolean[][] data = new boolean[a + 1][b + 1];\\n        data[0][0] = true;\\n        for(int i = 0; i < a && s1.charAt(i) == s3.charAt(i); i++) data[i + 1][0] = true;\\n        for(int i = 0; i < b && s2.charAt(i) == s3.charAt(i); i++) data[0][i + 1] = true;\\n        for(int i = 0; i < a; i++) {\\n            for(int j = 0; j < b; j++) {\\n                int k = i + j + 1;\\n                if(s3.charAt(k) == s1.charAt(i)) \\n                    data[i + 1][j + 1] |= data[i][j + 1];\\n                if(s3.charAt(k) == s2.charAt(j)) \\n                    data[i + 1][j + 1] |= data[i + 1][j];\\n            }\\n        }\\n        return data[a][b];\\n    }\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",
                "solutionTags": [],
                "code": "```boolean data[a + 1][b + 1]```\n```data```\n```data[i + 1][j + 1]```\n```s3.substring(0, k + 1)```\n```s1.substring(0, i + 1)```\n```s2.substring(0, j + 1)```\n```k = i + j + 1```\n```Situation 1:```\n```if s3.charAt(k) == s1.charAt(i), so data[i + 1][j + 1] |= data[i][j + 1]```\n```(the default data[i + 1][j + 1] is false)```\n```if s3.charAt(k) == s2.charAt(j), so data[i + 1][j + 1] |= data[i + 1][j]```\n```Situation 2:```\n```s3.charAt(k) != s1.charAt(i) && s3.charAt(k) != s2.charAt(j)```\n```data[i + 1][j + 1]```\n```1. data[0][0] = true```\n```2. if(s1.charAt(i) == s3.charAt(i)) data[i + 1][0] = true ```\n```3. if(s2.charAt(j) == s3.charAt(j)) data[0][j + 1] = true ```\n```2.```",
                "codeTag": "Unknown"
            },
            {
                "id": 31918,
                "title": "9-lines-dp-js-o-s1-len-s2-len",
                "content": "```\\nvar isInterleave = function(s1, s2, s3) {\\n    // dp[i][j] <=> if s1.substr(0, i) interleaving s2.substr(0, j) generates s3.substr(0, i+j)\\n    var dp= Array(s1.length+1).fill().map(r=>[])  \\n\\n    if (s1.length+s2.length!=s3.length) // quit ealier if possible\\n        return false\\n\\n    for (var i =0;i<= s1.length;i++)\\n        for (var j=0;j<= s2.length;j++)\\n            dp[i][j] = i && dp[i-1][j] && s3[i+j-1] == s1[i-1]    \\n                    || j && dp[i][j-1] && s3[i+j-1] == s2[j-1]\\n                    || !i&&!j   // set dp[0][0] to true\\n\\n    \\n    return !!dp.pop().pop();\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming"
                ],
                "code": "```\\nvar isInterleave = function(s1, s2, s3) {\\n    // dp[i][j] <=> if s1.substr(0, i) interleaving s2.substr(0, j) generates s3.substr(0, i+j)\\n    var dp= Array(s1.length+1).fill().map(r=>[])  \\n\\n    if (s1.length+s2.length!=s3.length) // quit ealier if possible\\n        return false\\n\\n    for (var i =0;i<= s1.length;i++)\\n        for (var j=0;j<= s2.length;j++)\\n            dp[i][j] = i && dp[i-1][j] && s3[i+j-1] == s1[i-1]    \\n                    || j && dp[i][j-1] && s3[i+j-1] == s2[j-1]\\n                    || !i&&!j   // set dp[0][0] to true\\n\\n    \\n    return !!dp.pop().pop();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 31974,
                "title": "java-first-got-an-idea-about-3d-dp-and-then-realized-that-i-can-change-it-to-2d-dp",
                "content": "**3D dp 46 ms:**\\n\\n        int n = s1.length();\\n        int m = s2.length();\\n        int l = s3.length();\\n        \\n        boolean[][][] dp = new boolean[l+1][n+1][m+1];\\n        \\n        for (int i = 0; i <= n; i++)\\n        {\\n        \\tfor (int j = 0; j <= m; j++)\\n        \\t\\tdp[0][i][j] = false;\\n        }\\n        \\n        dp[0][0][0] = true;\\n        \\n        for (int k = 1; k <= l; k++)\\n        {\\n        \\tfor (int i = 0; i <= n; i++)\\n        \\t{\\n        \\t\\tfor (int j = 0; j <= m; j++)\\n        \\t\\t{\\n        \\t\\t\\tdp[k][i][j] = (i+j == k)&&\\n        \\t\\t\\t\\t\\t((i >= 1 && dp[k-1][i-1][j] && s1.charAt(i-1) == s3.charAt(k-1)) \\n        \\t\\t\\t\\t\\t|| (j >= 1 && dp[k-1][i][j-1] && s2.charAt(j-1) == s3.charAt(k-1))); \\n        \\t\\t}\\n        \\t}\\n        }\\n        \\n        return dp[l][n][m];\\n  \\n**2D dp 6ms (shrink from above solution):**\\n\\n        int n = s1.length();\\n        int m = s2.length();\\n        \\n        boolean[][] dp = new boolean[n+1][m+1];\\n                \\n        dp[0][0] = true;\\n        \\n        for (int i = 0; i <= n; i++)\\n    \\t{\\n    \\t\\tfor (int j = 0; j <= m; j++)\\n    \\t\\t{\\n    \\t\\t\\tif (i == j && i == 0)\\n    \\t\\t\\t\\tcontinue;\\n    \\t\\t\\t\\n    \\t\\t\\tint k = i+j;\\n    \\t\\t\\tdp[i][j] = (i >= 1 && dp[i-1][j] && s1.charAt(i-1) == s3.charAt(k-1))\\n    \\t\\t\\t\\t\\t|| (j >= 1 && dp[i][j-1] && s2.charAt(j-1) == s3.charAt(k-1));\\n    \\t\\t}\\n    \\t}\\n                \\n        return dp[n][m];",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "**3D dp 46 ms:**\\n\\n        int n = s1.length();\\n        int m = s2.length();\\n        int l = s3.length();\\n        \\n        boolean[][][] dp = new boolean[l+1][n+1][m+1];\\n        \\n        for (int i = 0; i <= n; i++)\\n        {\\n        \\tfor (int j = 0; j <= m; j++)\\n        \\t\\tdp[0][i][j] = false;\\n        }\\n        \\n        dp[0][0][0] = true;\\n        \\n        for (int k = 1; k <= l; k++)\\n        {\\n        \\tfor (int i = 0; i <= n; i++)\\n        \\t{\\n        \\t\\tfor (int j = 0; j <= m; j++)\\n        \\t\\t{\\n        \\t\\t\\tdp[k][i][j] = (i+j == k)&&\\n        \\t\\t\\t\\t\\t((i >= 1 && dp[k-1][i-1][j] && s1.charAt(i-1) == s3.charAt(k-1)) \\n        \\t\\t\\t\\t\\t|| (j >= 1 && dp[k-1][i][j-1] && s2.charAt(j-1) == s3.charAt(k-1))); \\n        \\t\\t}\\n        \\t}\\n        }\\n        \\n        return dp[l][n][m];\\n  \\n**2D dp 6ms (shrink from above solution):**\\n\\n        int n = s1.length();\\n        int m = s2.length();\\n        \\n        boolean[][] dp = new boolean[n+1][m+1];\\n                \\n        dp[0][0] = true;\\n        \\n        for (int i = 0; i <= n; i++)\\n    \\t{\\n    \\t\\tfor (int j = 0; j <= m; j++)\\n    \\t\\t{\\n    \\t\\t\\tif (i == j && i == 0)\\n    \\t\\t\\t\\tcontinue;\\n    \\t\\t\\t\\n    \\t\\t\\tint k = i+j;\\n    \\t\\t\\tdp[i][j] = (i >= 1 && dp[i-1][j] && s1.charAt(i-1) == s3.charAt(k-1))\\n    \\t\\t\\t\\t\\t|| (j >= 1 && dp[i][j-1] && s2.charAt(j-1) == s3.charAt(k-1));\\n    \\t\\t}\\n    \\t}\\n                \\n        return dp[n][m];",
                "codeTag": "Unknown"
            },
            {
                "id": 32001,
                "title": "how-to-from-error-to-ac-thoughts-and-extensions-with-c-implementation",
                "content": "At the first glance, it seems a bit hard for me. So I want to try the tail DP.\\n\\nI set the dp[i][j] means\\n\\n         dp[i][j] = true  if s3[0...i+j-1] is the interleaving-string of  s1[0...i-1]  and  s2[0...j-1]  \\n\\nSo, we need to check the tail element .\\n\\nIt is not hard for me to think of  the equation  like this:\\n\\n        dp[i][j] = s3[i+j-1]==s1[i-1] && dp[i-1][j]\\n                           ||   s3[i+j-1]==s2[j-1] && dp[i][j-1]\\n\\nBefore seeing the AC code, I have to mention I make 2 mistakes before AC.\\n\\n**One is my code can not deal with if s1 or s2 is NULL\\nIt is important to first deal with the corner cases first.**\\n\\n\\n**Second is that when I do the initialization, I mis-type some code....**\\n\\nHere is the code.\\n\\n    class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int len1=s1.size(), len2=s2.size(), len3=s3.size();\\n            if(len1+len2!=len3)  return false;\\n            if(len1==0) return s2==s3;\\n            if(len2==0) return s1==s3;\\n            vector<vector<bool>> dp(len1+1, vector<bool>(len2+1, false));\\n            dp[0][0]=true;\\n            for(int i=1; i<=len1; i++) dp[i][0]=s1[i-1]==s3[i-1] && dp[i-1][0];\\n            for(int i=1; i<=len2; i++) dp[0][i]=s2[i-1]==s3[i-1] && dp[0][i-1];\\n            \\n            for(int i=1; i<=len1; i++){\\n                for(int j=1; j<=len2; j++){\\n                    dp[i][j] = (s3[i+j-1]==s1[i-1] && dp[i-1][j]) ||\\n                                  (s3[i+j-1]==s2[j-1] && dp[i][j-1]);\\n                }\\n            }\\n            return dp[len1][len2];\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isInterleave(string s1, string s2, string s3) {\\n            int len1=s1.size(), len2=s2.size(), len3=s3.size();\\n            if(len1+len2!=len3)  return false;\\n            if(len1==0) return s2==s3;\\n            if(len2==0) return s1==s3;\\n            vector<vector<bool>> dp(len1+1, vector<bool>(len2+1, false));\\n            dp[0][0]=true;\\n            for(int i=1; i<=len1; i++) dp[i][0]=s1[i-1]==s3[i-1] && dp[i-1][0];\\n            for(int i=1; i<=len2; i++) dp[0][i]=s2[i-1]==s3[i-1] && dp[0][i-1];\\n            \\n            for(int i=1; i<=len1; i++){\\n                for(int j=1; j<=len2; j++){\\n                    dp[i][j] = (s3[i+j-1]==s1[i-1] && dp[i-1][j]) ||\\n                                  (s3[i+j-1]==s2[j-1] && dp[i][j-1]);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3963313,
                "title": "python3-dp-top-down-bottom-up-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(N^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n1. Top-Down\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3): return False\\n        \\n        @cache\\n        def dp(i: int, j: int) -> bool:\\n            if i < 0 and j < 0: return True\\n            ans = False\\n            if i >= 0 and s1[i] == s3[i + j + 1]: ans |= dp(i - 1, j)\\n            if j >= 0 and s2[j] == s3[i + j + 1]: ans |= dp(i, j - 1)\\n            return ans\\n\\n        return dp(m - 1, n - 1)\\n```\\n- TC: $$O(N^2)$$\\n- SC: $$O(N^2)$$\\n\\n2. Bottom-Up\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3): return False\\n\\n        dp = [[False for _ in range(n + 1)] for _ in range(m + 1)]\\n        dp[0][0] = True\\n        for i in range(-1, m):\\n            for j in range(-1, n):\\n                if i >= 0 and s1[i] == s3[i + j + 1]: dp[i + 1][j + 1] |= dp[i][j + 1]\\n                if j >= 0 and s2[j] == s3[i + j + 1]: dp[i + 1][j + 1] |= dp[i + 1][j]\\n        return dp[m][n]\\n```\\n- TC: $$O(N^2)$$\\n- SC: $$O(N^2)$$\\n",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3): return False\\n        \\n        @cache\\n        def dp(i: int, j: int) -> bool:\\n            if i < 0 and j < 0: return True\\n            ans = False\\n            if i >= 0 and s1[i] == s3[i + j + 1]: ans |= dp(i - 1, j)\\n            if j >= 0 and s2[j] == s3[i + j + 1]: ans |= dp(i, j - 1)\\n            return ans\\n\\n        return dp(m - 1, n - 1)\\n```\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m, n = len(s1), len(s2)\\n        if m + n != len(s3): return False\\n\\n        dp = [[False for _ in range(n + 1)] for _ in range(m + 1)]\\n        dp[0][0] = True\\n        for i in range(-1, m):\\n            for j in range(-1, n):\\n                if i >= 0 and s1[i] == s3[i + j + 1]: dp[i + 1][j + 1] |= dp[i][j + 1]\\n                if j >= 0 and s2[j] == s3[i + j + 1]: dp[i + 1][j + 1] |= dp[i + 1][j]\\n        return dp[m][n]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959849,
                "title": "recursion-to-space-optimization-dp-c-with-explanation",
                "content": "# Intuition\\nWe try to interleave `s1` & `s2` in every possible way that can form string `s3`. We can use recursion to explore all possible ways & find if there exist an answer for any possibility.\\n\\n# Recursion\\nLet\\'s define a recursive boolean function `canInterleave`. where, `canInterleave(k, i, j)` tells us that is it possible to interleave `s1[i...end]` & `s2[j...end]` to form `s3[k...end]`.\\nTherefore our answer will be `canInterleave(0, 0, 0)`.\\n\\n## Code\\n```\\nclass Solution {\\n    bool canInterleave(int k, int i, int j, string& s1, string& s2, string& s3) {\\n        \\n        // All indices reached the end then interleaving is possible\\n        if(i == s1.length() && j == s2.length() && k == s3.length())\\n            return true;\\n\\n        // Intially considering that interleaving is not possible\\n        bool res = false;\\n\\n        // Check if we can match s1[i] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(i < s1.length() && s1[i] == s3[k])\\n            res |= canInterleave(k + 1, i + 1, j, s1, s2, s3);\\n\\n        // Check if we can match s2[j] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(j < s2.length() && s2[j] == s3[k])\\n            res |= canInterleave(k + 1, i, j + 1, s1, s2, s3);\\n\\n        return res;\\n    }\\n\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        return canInterleave(0, 0, 0, s1, s2, s3);\\n    }\\n};\\n```\\n\\n## Complexity\\n- Time complexity:\\n$$O(2^{len3})$$, where `len3` is length of string`s3`.\\nBecause at a hypothetical situation, we\\'ll have 2 possibilities for every character in `s3` that either match it with character in `s1` or in `s2`.\\n\\n- Space complexity:\\n$$O(len3)$$, Because the recursion depth will be at most `len3` & every function call will have its constant space.\\n\\n# Memoization\\nAbove solution will not work because of it\\'s exponential nature. but we can optimize by memoizing it as there will be overlapping subproblems which we evaluate again & again unnecessarily.\\n\\n## Code\\n```\\nclass Solution {\\n    bool canInterleave(int k, int i, int j, string& s1, string& s2, string& s3, vector<vector<vector<int>>>& dp) {\\n        \\n        // All indices reached the end then interleaving is possible\\n        if(i == s1.length() && j == s2.length() && k == s3.length())\\n            return true;\\n\\n        if(dp[k][i][j] != -1)\\n            return dp[k][i][j];\\n\\n        // Intially considering that interleaving is not possible\\n        bool res = false;\\n\\n        // Check if we can match s1[i] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(i < s1.length() && s1[i] == s3[k])\\n            res |= canInterleave(k + 1, i + 1, j, s1, s2, s3, dp);\\n\\n        // Check if we can match s2[j] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(j < s2.length() && s2[j] == s3[k])\\n            res |= canInterleave(k + 1, i, j + 1, s1, s2, s3, dp);\\n\\n        return dp[k][i][j] = res;\\n    }\\n\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        vector dp(len3 + 1, vector<vector<int>>(len1 + 1, vector<int>(len2 + 1, -1)));\\n        return canInterleave(0, 0, 0, s1, s2, s3, dp);\\n    }\\n};\\n```\\n\\n## Complexity\\n- Time complexity:\\n$$O(len1*len2*len3)$$, Because there are `len1*len2*len3` dp states to evaluate.\\n\\n- Space complexity:\\n$$O(len3) + O(len1*len2*len3)$$, For recursion stack space & dp array respectively.\\n\\n# Tabulation\\nWe can eliminate recursion stack space from previous solution by using a bottom up tabulation solution as follows\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        vector dp(len3 + 1, vector<vector<int>>(len1 + 1, vector<int>(len2 + 1, false)));\\n\\n        dp[len3][len1][len2] = true;\\n\\n        for(int k = len3 - 1; k >= 0; k--) {\\n            for(int i = len1; i >= 0; i--) {\\n                for(int j = len2; j >= 0; j--) {\\n                    bool res = false;\\n                    if(i < len1 && s1[i] == s3[k])\\n                        res |= dp[k + 1][i + 1][j];\\n\\n                    if(j < len2 && s2[j] == s3[k])\\n                        res |= dp[k + 1][i][j + 1];\\n\\n                    dp[k][i][j] = res;\\n                }\\n            }\\n        }\\n\\n        return dp[0][0][0];\\n    }\\n};\\n```\\n\\n## Complexity\\n- Time complexity:\\n$$O(len1*len2*len3)$$, Because there are `len1*len2*len3` dp states to evaluate.\\n\\n- Space complexity:\\n$$O(len1*len2*len3)$$, For dp array.\\n\\n# Space Optimization\\nTo calculate dp states for any index `k` we do not need all the previously calculated states we just need dp states for index `k+1`. We can use this to eliminate the 3D dp array with just 2 2D dp arrays.\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        vector curdp(len1 + 1, vector<bool>(len2 + 1, false));\\n        vector nextdp(len1 + 1, vector<bool>(len2 + 1, false));\\n\\n        nextdp[len1][len2] = true;\\n\\n        for(int k = len3 - 1; k >= 0; k--) {\\n            for(int i = len1; i >= 0; i--) {\\n                for(int j = len2; j >= 0; j--) {\\n                    bool res = false;\\n                    if(i < len1 && s1[i] == s3[k])\\n                        res |= nextdp[i + 1][j];\\n\\n                    if(j < len2 && s2[j] == s3[k])\\n                        res |= nextdp[i][j + 1];\\n\\n                    curdp[i][j] = res;\\n                }\\n            }\\n            nextdp = curdp;\\n        }\\n\\n        return nextdp[0][0];\\n    }\\n};\\n```\\n\\n## Complexity\\n- Time complexity:\\n$$O(len1*len2*len3)$$, Because there are `len1*len2*len3` dp states to evaluate.\\n\\n- Space complexity:\\n$$O(len1*len2)$$, For dp array.\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    bool canInterleave(int k, int i, int j, string& s1, string& s2, string& s3) {\\n        \\n        // All indices reached the end then interleaving is possible\\n        if(i == s1.length() && j == s2.length() && k == s3.length())\\n            return true;\\n\\n        // Intially considering that interleaving is not possible\\n        bool res = false;\\n\\n        // Check if we can match s1[i] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(i < s1.length() && s1[i] == s3[k])\\n            res |= canInterleave(k + 1, i + 1, j, s1, s2, s3);\\n\\n        // Check if we can match s2[j] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(j < s2.length() && s2[j] == s3[k])\\n            res |= canInterleave(k + 1, i, j + 1, s1, s2, s3);\\n\\n        return res;\\n    }\\n\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        return canInterleave(0, 0, 0, s1, s2, s3);\\n    }\\n};\\n```\n```\\nclass Solution {\\n    bool canInterleave(int k, int i, int j, string& s1, string& s2, string& s3, vector<vector<vector<int>>>& dp) {\\n        \\n        // All indices reached the end then interleaving is possible\\n        if(i == s1.length() && j == s2.length() && k == s3.length())\\n            return true;\\n\\n        if(dp[k][i][j] != -1)\\n            return dp[k][i][j];\\n\\n        // Intially considering that interleaving is not possible\\n        bool res = false;\\n\\n        // Check if we can match s1[i] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(i < s1.length() && s1[i] == s3[k])\\n            res |= canInterleave(k + 1, i + 1, j, s1, s2, s3, dp);\\n\\n        // Check if we can match s2[j] to s3[k]\\n        // and if we can, can we get answer by matching them\\n        if(j < s2.length() && s2[j] == s3[k])\\n            res |= canInterleave(k + 1, i, j + 1, s1, s2, s3, dp);\\n\\n        return dp[k][i][j] = res;\\n    }\\n\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        vector dp(len3 + 1, vector<vector<int>>(len1 + 1, vector<int>(len2 + 1, -1)));\\n        return canInterleave(0, 0, 0, s1, s2, s3, dp);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        vector dp(len3 + 1, vector<vector<int>>(len1 + 1, vector<int>(len2 + 1, false)));\\n\\n        dp[len3][len1][len2] = true;\\n\\n        for(int k = len3 - 1; k >= 0; k--) {\\n            for(int i = len1; i >= 0; i--) {\\n                for(int j = len2; j >= 0; j--) {\\n                    bool res = false;\\n                    if(i < len1 && s1[i] == s3[k])\\n                        res |= dp[k + 1][i + 1][j];\\n\\n                    if(j < len2 && s2[j] == s3[k])\\n                        res |= dp[k + 1][i][j + 1];\\n\\n                    dp[k][i][j] = res;\\n                }\\n            }\\n        }\\n\\n        return dp[0][0][0];\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        vector curdp(len1 + 1, vector<bool>(len2 + 1, false));\\n        vector nextdp(len1 + 1, vector<bool>(len2 + 1, false));\\n\\n        nextdp[len1][len2] = true;\\n\\n        for(int k = len3 - 1; k >= 0; k--) {\\n            for(int i = len1; i >= 0; i--) {\\n                for(int j = len2; j >= 0; j--) {\\n                    bool res = false;\\n                    if(i < len1 && s1[i] == s3[k])\\n                        res |= nextdp[i + 1][j];\\n\\n                    if(j < len2 && s2[j] == s3[k])\\n                        res |= nextdp[i][j + 1];\\n\\n                    curdp[i][j] = res;\\n                }\\n            }\\n            nextdp = curdp;\\n        }\\n\\n        return nextdp[0][0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957308,
                "title": "easy-video-explanation-recursive-memoization-c-java-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUses Dynamic Progrmming to solve the problem\\n\\n***I\\'ve created a video that breaks down this problem with a thorough explanation, ensuring everyone can easily grasp the concept***\\n\\nhttps://youtu.be/UJVvaO_TuX4\\n\\n# Approach\\nThe code checks if string s3 can be formed by interleaving characters from s1 and s2 while maintaining order. It uses dynamic programming with memoization to efficiently solve.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n     O(x * y)\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(x * y)\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    bool solve(int x,int y,int z,string &s1,string &s2,string &s3)\\n    {   \\n        if(x==0 && y==0 && z==0)\\n            return true;\\n        if(dp[x][y]!=-1)\\n            return dp[x][y];\\n        bool a=false,b=false;\\n        if(x-1>=0 && z-1>=0 && s1[x-1]==s3[z-1])\\n            a=solve(x-1,y,z-1,s1,s2,s3);\\n        if(y-1>=0 && z-1>=0 && s2[y-1]==s3[z-1])\\n            b=solve(x,y-1,z-1,s1,s2,s3);\\n        return dp[x][y]=a||b;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int x=s1.size();\\n        int y=s2.size();\\n        int z=s3.size();\\n        memset(dp,-1,sizeof(dp));\\n        bool ans=solve(x,y,z,s1,s2,s3);\\n        return ans;\\n    }\\n};\\n```\\n```python []\\nclass Solution:\\n    def solve(self, x, y, z, s1, s2, s3, dp):\\n        if x == 0 and y == 0 and z == 0:\\n            return True\\n        if dp[x][y] != -1:\\n            return dp[x][y]\\n        a, b = False, False\\n        if x - 1 >= 0 and z - 1 >= 0 and s1[x - 1] == s3[z - 1]:\\n            a = self.solve(x - 1, y, z - 1, s1, s2, s3, dp)\\n        if y - 1 >= 0 and z - 1 >= 0 and s2[y - 1] == s3[z - 1]:\\n            b = self.solve(x, y - 1, z - 1, s1, s2, s3, dp)\\n        dp[x][y] = a or b\\n        return dp[x][y]\\n\\n    def isInterleave(self, s1, s2, s3):\\n        x, y, z = len(s1), len(s2), len(s3)\\n        dp = [[-1] * (y + 1) for _ in range(x + 1)]\\n        return self.solve(x, y, z, s1, s2, s3, dp)\\n\\n```\\n```java []\\npublic class Solution {\\n    private int[][] dp;\\n\\n    public boolean solve(int x, int y, int z, String s1, String s2, String s3) {\\n        if (x == 0 && y == 0 && z == 0)\\n            return true;\\n        if (dp[x][y] != -1)\\n            return dp[x][y];\\n        boolean a = false, b = false;\\n        if (x - 1 >= 0 && z - 1 >= 0 && s1.charAt(x - 1) == s3.charAt(z - 1))\\n            a = solve(x - 1, y, z - 1, s1, s2, s3);\\n        if (y - 1 >= 0 && z - 1 >= 0 && s2.charAt(y - 1) == s3.charAt(z - 1))\\n            b = solve(x, y - 1, z - 1, s1, s2, s3);\\n        return dp[x][y] = a || b;\\n    }\\n\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int x = s1.length();\\n        int y = s2.length();\\n        int z = s3.length();\\n        dp = new int[x + 1][y + 1];\\n        for (int i = 0; i <= x; i++) {\\n            Arrays.fill(dp[i], -1);\\n        }\\n        return solve(x, y, z, s1, s2, s3);\\n    }\\n}\\n```\\n\\n\\n***If the solution resonates with you, I\\'d really appreciate an upvote. Feel free to hit the like button and consider subscribing to my channel, where I\\'ll be sharing more LeetCode challenges.***\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    bool solve(int x,int y,int z,string &s1,string &s2,string &s3)\\n    {   \\n        if(x==0 && y==0 && z==0)\\n            return true;\\n        if(dp[x][y]!=-1)\\n            return dp[x][y];\\n        bool a=false,b=false;\\n        if(x-1>=0 && z-1>=0 && s1[x-1]==s3[z-1])\\n            a=solve(x-1,y,z-1,s1,s2,s3);\\n        if(y-1>=0 && z-1>=0 && s2[y-1]==s3[z-1])\\n            b=solve(x,y-1,z-1,s1,s2,s3);\\n        return dp[x][y]=a||b;\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int x=s1.size();\\n        int y=s2.size();\\n        int z=s3.size();\\n        memset(dp,-1,sizeof(dp));\\n        bool ans=solve(x,y,z,s1,s2,s3);\\n        return ans;\\n    }\\n};\\n```\n```python []\\nclass Solution:\\n    def solve(self, x, y, z, s1, s2, s3, dp):\\n        if x == 0 and y == 0 and z == 0:\\n            return True\\n        if dp[x][y] != -1:\\n            return dp[x][y]\\n        a, b = False, False\\n        if x - 1 >= 0 and z - 1 >= 0 and s1[x - 1] == s3[z - 1]:\\n            a = self.solve(x - 1, y, z - 1, s1, s2, s3, dp)\\n        if y - 1 >= 0 and z - 1 >= 0 and s2[y - 1] == s3[z - 1]:\\n            b = self.solve(x, y - 1, z - 1, s1, s2, s3, dp)\\n        dp[x][y] = a or b\\n        return dp[x][y]\\n\\n    def isInterleave(self, s1, s2, s3):\\n        x, y, z = len(s1), len(s2), len(s3)\\n        dp = [[-1] * (y + 1) for _ in range(x + 1)]\\n        return self.solve(x, y, z, s1, s2, s3, dp)\\n\\n```\n```java []\\npublic class Solution {\\n    private int[][] dp;\\n\\n    public boolean solve(int x, int y, int z, String s1, String s2, String s3) {\\n        if (x == 0 && y == 0 && z == 0)\\n            return true;\\n        if (dp[x][y] != -1)\\n            return dp[x][y];\\n        boolean a = false, b = false;\\n        if (x - 1 >= 0 && z - 1 >= 0 && s1.charAt(x - 1) == s3.charAt(z - 1))\\n            a = solve(x - 1, y, z - 1, s1, s2, s3);\\n        if (y - 1 >= 0 && z - 1 >= 0 && s2.charAt(y - 1) == s3.charAt(z - 1))\\n            b = solve(x, y - 1, z - 1, s1, s2, s3);\\n        return dp[x][y] = a || b;\\n    }\\n\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int x = s1.length();\\n        int y = s2.length();\\n        int z = s3.length();\\n        dp = new int[x + 1][y + 1];\\n        for (int i = 0; i <= x; i++) {\\n            Arrays.fill(dp[i], -1);\\n        }\\n        return solve(x, y, z, s1, s2, s3);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956632,
                "title": "c-solution-for-interleaving-strings-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem asks whether a string s3 can be formed by interleaving two strings s1 and s2. Interleaving means that the characters of s1 and s2 maintain their relative order while forming s3. To solve this problem efficiently, dynamic programming is used to build a table that stores whether the current substrings of s1 and s2 can form the corresponding substring of s3.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe dynamic programming approach involves using a 2D boolean array dp, where dp[i, j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i + j characters of s3.\\n\\n1. Base case: Initialize dp[0, 0] as true, since empty strings can be interleaved to form an empty string.\\n1. Fill in the base cases for when one of the strings (s1 or s2) is empty.\\n1. For each remaining cell dp[i, j], consider whether the current character of s1 or s2 can be matched with the next character of s3. If yes, then check the previous states (dp[i-1, j] and dp[i, j-1]) to determine if the current interleaving is possible.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution is O(len1 * len2), where len1 is the length of string s1 and len2 is the length of string s2. This is because the 2D dp array has dimensions len1 + 1 and len2 + 1, and each cell is filled once based on the previous cells.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(len1 * len2), as the 2D array dp of size (len1 + 1) x (len2 + 1) is used to store the intermediate results.\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool IsInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.Length, len2 = s2.Length, len3 = s3.Length;\\n        \\n        if (len1 + len2 != len3) {\\n            return false;\\n        }\\n        \\n        bool[,] dp = new bool[len1 + 1, len2 + 1];\\n        \\n        for (int i = 0; i <= len1; i++) {\\n            for (int j = 0; j <= len2; j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[i, j] = true;\\n                } else if (i == 0) {\\n                    dp[i, j] = dp[i, j - 1] && s2[j - 1] == s3[i + j - 1];\\n                } else if (j == 0) {\\n                    dp[i, j] = dp[i - 1, j] && s1[i - 1] == s3[i + j - 1];\\n                } else {\\n                    dp[i, j] = (dp[i - 1, j] && s1[i - 1] == s3[i + j - 1]) ||\\n                               (dp[i, j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                }\\n            }\\n        }\\n        \\n        return dp[len1, len2];\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool IsInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.Length, len2 = s2.Length, len3 = s3.Length;\\n        \\n        if (len1 + len2 != len3) {\\n            return false;\\n        }\\n        \\n        bool[,] dp = new bool[len1 + 1, len2 + 1];\\n        \\n        for (int i = 0; i <= len1; i++) {\\n            for (int j = 0; j <= len2; j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[i, j] = true;\\n                } else if (i == 0) {\\n                    dp[i, j] = dp[i, j - 1] && s2[j - 1] == s3[i + j - 1];\\n                } else if (j == 0) {\\n                    dp[i, j] = dp[i - 1, j] && s1[i - 1] == s3[i + j - 1];\\n                } else {\\n                    dp[i, j] = (dp[i - 1, j] && s1[i - 1] == s3[i + j - 1]) ||\\n                               (dp[i, j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                }\\n            }\\n        }\\n        \\n        return dp[len1, len2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956471,
                "title": "easy-to-understand-memoization-approach-c-with-proper-explanation-of-each-step",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind this approach involves breaking down the problem into smaller subproblems, and checking different possibilities.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- There are basically three iterators: i, j, k where i keeps track of s1 string, j and k keeps track of string s2 and s3 respectively.\\n### - **Base Cases**\\n  a.) if iterator k reaches the end of target string i.e., s3 return true as entire string is traversed\\n  b.) if s1 is finished and current character of s2 doesn\\'t matches with s3\\'s current character, then return false as there is no character left that can match with current character of s3\\n  c.) Similarly if s2 ends and current s1[i] doesn\\'t matches with s3[k], return false.\\n d.) If neither s1[i] nor s2[j] matches with s3[k], return false\\n\\n### **- Recursions**\\n a.) If character at ith position of matches with s3[k] ans s2[j] does not match then, move the iterator i and k.\\n b.) If character at jth position of matches with s3[k] ans s1[i] does not match then, move the iterator j and k.\\n c.) If both s1[i] and s2[j] match with s3[k], then we will have two options---- \\nI. take ith element of s1\\nII. take jth element of s2\\nWe will exploit both the possibilities and return true if any of the two cases return true.\\n             \\n\\n\\n# Complexity\\n- Time complexity:\\nO(s1.length() * s2.length())\\n\\n- Space complexity:\\nO(s1.length() * s2.length())\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool solve(int i, int j, int k, string s1, string s2, string s3, vector<vector<int>>&dp)\\n    {\\n        if(k==s3.length()) //base case - a - if s3 is completely traversed\\n            return true;\\n        if(dp[i][j]!=-1) // searching in dp table\\n            return dp[i][j];\\n        /* base case - b - if s1 is finished and current \\n        character of s2 doesn\\'t matches with s3\\'s current character. */\\n        if(i==s1.length() && s2[j]!=s3[k])\\n            return false;\\n        /* base case - c - if s2 is finished and current \\n        character of s1 doesn\\'t matches with s3\\'s current character. */\\n        if(j==s2.length() && s1[i]!=s3[k])\\n            return false;\\n        //base case - d - If neither s1[i] nor s2[j] matches with s3[k], return false\\n        if(s1[i]!=s3[k] && s2[j]!=s3[k])\\n            return false;\\n//RECURSION\\n    //a.\\n        if(s1[i]==s3[k] && s2[j]!=s3[k])\\n            return dp[i][j]=solve(i+1, j, k+1, s1, s2, s3, dp);\\n    //b.\\n        if(s1[i]!=s3[k] && s2[j]==s3[k])\\n            return dp[i][j]=solve(i, j+1, k+1, s1, s2, s3, dp);\\n    //c.\\n        else\\n            return dp[i][j]=(solve(i+1, j, k+1, s1, s2, s3, dp) || solve(i, j+1, k+1, s1, s2, s3, dp));\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        //if length of string s3 is less than lengthof s1+s2 string then, interleaving not possible\\n        if(s1.length()+s2.length()!=s3.length())\\n            return false;\\n        vector<vector<int>>dp(s1.length()+1, vector<int>(s2.length()+1, -1));\\n        return solve(0, 0, 0, s1, s2, s3, dp);\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "class Solution {\\npublic:\\n    bool solve(int i, int j, int k, string s1, string s2, string s3, vector<vector<int>>&dp)\\n    {\\n        if(k==s3.length()) //base case - a - if s3 is completely traversed\\n            return true;\\n        if(dp[i][j]!=-1) // searching in dp table\\n            return dp[i][j];\\n        /* base case - b - if s1 is finished and current \\n        character of s2 doesn\\'t matches with s3\\'s current character. */\\n        if(i==s1.length() && s2[j]!=s3[k])\\n            return false;\\n        /* base case - c - if s2 is finished and current \\n        character of s1 doesn\\'t matches with s3\\'s current character. */\\n        if(j==s2.length() && s1[i]!=s3[k])\\n            return false;\\n        //base case - d - If neither s1[i] nor s2[j] matches with s3[k], return false\\n        if(s1[i]!=s3[k] && s2[j]!=s3[k])\\n            return false;\\n//RECURSION\\n    //a.\\n        if(s1[i]==s3[k] && s2[j]!=s3[k])\\n            return dp[i][j]=solve(i+1, j, k+1, s1, s2, s3, dp);\\n    //b.\\n        if(s1[i]!=s3[k] && s2[j]==s3[k])\\n            return dp[i][j]=solve(i, j+1, k+1, s1, s2, s3, dp);\\n    //c.\\n        else\\n            return dp[i][j]=(solve(i+1, j, k+1, s1, s2, s3, dp) || solve(i, j+1, k+1, s1, s2, s3, dp));\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3699287,
                "title": "my-dp-solution-in-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int l = s1.size(), m = s2.size(), n = s3.size();\\n        if(l + m != n) return false;\\n        if (l == 0) return s2 == s3;\\n        if (m == 0) return s1 == s3;\\n        vector<vector<bool>> dp(l+1, vector<bool>(m+1, false));\\n\\n        dp[l][m] = true;\\n        for(int i = 0; i < l; i++) {\\n            if(s1.substr(i, l-i) == s3.substr(m+i, l-i))\\n                dp[i][m] = true;\\n        }\\n        for(int j = 0; j < m; j++) {\\n            if(s2.substr(j, m-j) == s3.substr(l+j, m-j))\\n                dp[l][j] = true;\\n        }\\n\\n        for(int i = l-1; i >= 0; i--) {\\n            for(int j = m-1; j >= 0; j--) {\\n                if(s1[i] == s3[i+j] && s2[j] == s3[i+j]) {\\n                    if(dp[i+1][j] == true || dp[i][j+1] == true) dp[i][j] = true;\\n                }\\n                else if(s1[i] == s3[i+j]) {\\n                    if(dp[i+1][j] == true) dp[i][j] = true;\\n                }\\n                else if(s2[j] == s3[i+j]) {\\n                    if(dp[i][j+1] == true) dp[i][j] = true;\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int l = s1.size(), m = s2.size(), n = s3.size();\\n        if(l + m != n) return false;\\n        if (l == 0) return s2 == s3;\\n        if (m == 0) return s1 == s3;\\n        vector<vector<bool>> dp(l+1, vector<bool>(m+1, false));\\n\\n        dp[l][m] = true;\\n        for(int i = 0; i < l; i++) {\\n            if(s1.substr(i, l-i) == s3.substr(m+i, l-i))\\n                dp[i][m] = true;\\n        }\\n        for(int j = 0; j < m; j++) {\\n            if(s2.substr(j, m-j) == s3.substr(l+j, m-j))\\n                dp[l][j] = true;\\n        }\\n\\n        for(int i = l-1; i >= 0; i--) {\\n            for(int j = m-1; j >= 0; j--) {\\n                if(s1[i] == s3[i+j] && s2[j] == s3[i+j]) {\\n                    if(dp[i+1][j] == true || dp[i][j+1] == true) dp[i][j] = true;\\n                }\\n                else if(s1[i] == s3[i+j]) {\\n                    if(dp[i+1][j] == true) dp[i][j] = true;\\n                }\\n                else if(s2[j] == s3[i+j]) {\\n                    if(dp[i][j+1] == true) dp[i][j] = true;\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3592463,
                "title": "java-5-approaches-recursive-memoization-iterative",
                "content": "# Recursive Code \\n```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        Boolean[][][] memo=new Boolean[s1.length()+1][s2.length()+1][s3.length()+1];\\n        return helper(0,0,0,s1,s2,s3,memo);\\n    }\\n    public boolean helper(int i, int j, int k, String s1, String s2, String s3,Boolean[][][] memo){\\n        if(k>=s3.length() ) {\\n            if(i>=s1.length() && j>=s2.length() ) return true;\\n            return false;\\n        }\\n        \\n        if(i>=s1.length() && j>=s2.length()) return false;\\n        if(memo[i][j][k]!=null) return memo[i][j][k];\\n        boolean op1 = false;\\n        if(i<s1.length() && s1.charAt(i)==s3.charAt(k)){\\n            op1=helper(i+1,j,k+1,s1,s2,s3,memo);\\n        }\\n        boolean op2=false;\\n        if(j<s2.length()&& s2.charAt(j)==s3.charAt(k)){\\n            op2=helper(i,j+1,k+1,s1,s2,s3,memo);\\n        }\\n        return memo[i][j][k]= op1 || op2;\\n    }\\n}\\n```\\n# Recursive Code 2\\n```\\nclass Solution{\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tBoolean[][] memo = new Boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\treturn helper(s1, s2, s3, 0, 0, memo);\\n}\\n\\npublic boolean helper(String s1, String s2, String s3, int i, int j, Boolean[][] memo) {\\n\\tif(i+j == s3.length())\\n\\t\\treturn true;\\n\\n\\tif(memo[i][j] != null)\\n\\t\\treturn memo[i][j];\\n    boolean op1=false;\\n\\n\\t if(i < s1.length() && s3.charAt(i+j) == s1.charAt(i)) {\\n\\t\\top1 = helper(s1, s2, s3, i+1, j, memo);\\n\\t\\t\\n\\t}\\n    boolean op2 = false;\\n\\tif(j < s2.length() && s3.charAt(i+j) == s2.charAt(j)) {\\n\\t\\top2 = helper(s1, s2, s3, i, j+1, memo);\\n\\t\\t\\n\\t}\\n\\n\\tmemo[i][j] = op1|| op2;\\n\\treturn memo[i][j];\\n}\\n}\\n```\\n# Tabulation Code - 2d\\n```\\nclass Solution{\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[][] = new boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[i][j] = true;\\n\\t\\t\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t\\t|| (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s1.length()][s2.length()];\\n}\\n}\\n```\\n# Tabulation Code - 1d\\n```\\n//Tabulation 1d -> just make dp[i][j] to dp[j]\\nclass Solution{\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[] = new boolean[s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[j] = true;\\n\\t\\t\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t\\t|| (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s2.length()];\\n}\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        Boolean[][][] memo=new Boolean[s1.length()+1][s2.length()+1][s3.length()+1];\\n        return helper(0,0,0,s1,s2,s3,memo);\\n    }\\n    public boolean helper(int i, int j, int k, String s1, String s2, String s3,Boolean[][][] memo){\\n        if(k>=s3.length() ) {\\n            if(i>=s1.length() && j>=s2.length() ) return true;\\n            return false;\\n        }\\n        \\n        if(i>=s1.length() && j>=s2.length()) return false;\\n        if(memo[i][j][k]!=null) return memo[i][j][k];\\n        boolean op1 = false;\\n        if(i<s1.length() && s1.charAt(i)==s3.charAt(k)){\\n            op1=helper(i+1,j,k+1,s1,s2,s3,memo);\\n        }\\n        boolean op2=false;\\n        if(j<s2.length()&& s2.charAt(j)==s3.charAt(k)){\\n            op2=helper(i,j+1,k+1,s1,s2,s3,memo);\\n        }\\n        return memo[i][j][k]= op1 || op2;\\n    }\\n}\\n```\n```\\nclass Solution{\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tBoolean[][] memo = new Boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\treturn helper(s1, s2, s3, 0, 0, memo);\\n}\\n\\npublic boolean helper(String s1, String s2, String s3, int i, int j, Boolean[][] memo) {\\n\\tif(i+j == s3.length())\\n\\t\\treturn true;\\n\\n\\tif(memo[i][j] != null)\\n\\t\\treturn memo[i][j];\\n    boolean op1=false;\\n\\n\\t if(i < s1.length() && s3.charAt(i+j) == s1.charAt(i)) {\\n\\t\\top1 = helper(s1, s2, s3, i+1, j, memo);\\n\\t\\t\\n\\t}\\n    boolean op2 = false;\\n\\tif(j < s2.length() && s3.charAt(i+j) == s2.charAt(j)) {\\n\\t\\top2 = helper(s1, s2, s3, i, j+1, memo);\\n\\t\\t\\n\\t}\\n\\n\\tmemo[i][j] = op1|| op2;\\n\\treturn memo[i][j];\\n}\\n}\\n```\n```\\nclass Solution{\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[][] = new boolean[s1.length() + 1][s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[i][j] = true;\\n\\t\\t\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t\\t|| (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s1.length()][s2.length()];\\n}\\n}\\n```\n```\\n//Tabulation 1d -> just make dp[i][j] to dp[j]\\nclass Solution{\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n\\tif(s1.length() + s2.length() != s3.length())\\n\\t\\treturn false;\\n\\n\\tboolean dp[] = new boolean[s2.length() + 1];\\n\\n\\tfor (int i = 0; i <= s1.length(); i++) {\\n\\t\\tfor (int j = 0; j <= s2.length(); j++) {\\n\\t\\t\\tif (i == 0 && j == 0) \\n\\t\\t\\t\\tdp[j] = true;\\n\\t\\t\\n\\t\\t\\telse if (i == 0) \\n\\t\\t\\t\\tdp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse if (j == 0) \\n\\t\\t\\t\\tdp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);\\n\\n\\t\\t\\telse \\n\\t\\t\\t\\tdp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) \\n\\t\\t\\t\\t\\t\\t\\t\\t|| (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[s2.length()];\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3353694,
                "title": "super-super-easy-to-understand-java-sol",
                "content": "\\n```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1.length() + s2.length() != s3.length()) return false;\\n        this.s1 = s1;\\n        this.s2 = s2;\\n        this.s3 = s3;\\n        dp = new int[s1.length() + 1][s2.length() + 1];\\n        return helper(0, 0, 0);\\n    }\\n\\n    String s1;\\n    String s2;\\n    String s3;\\n    int[][] dp;\\n\\n    private boolean helper(int i, int j, int k) {\\n        boolean isMatch = false;\\n        // base case\\n        if(k == s3.length()) return true;\\n        \\n        // we don\\'t have to calculate it again, just return result\\n        if(dp[i][j] != 0) return dp[i][j] == 1;\\n\\n        // if s1 matches pick s1\\n        if(i < s1.length() && s1.charAt(i) == s3.charAt(k)) {\\n            isMatch = isMatch || helper(i + 1, j, k + 1);\\n        }\\n\\n        // if s2 matches pick s2\\n        if(j < s2.length() && s2.charAt(j) == s3.charAt(k)) {\\n            isMatch = isMatch || helper(i, j + 1, k + 1);\\n        }\\n\\n        // memorize the final answer\\n        dp[i][j] = isMatch ? 1 : -1;\\n\\n        return isMatch;\\n    }   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1.length() + s2.length() != s3.length()) return false;\\n        this.s1 = s1;\\n        this.s2 = s2;\\n        this.s3 = s3;\\n        dp = new int[s1.length() + 1][s2.length() + 1];\\n        return helper(0, 0, 0);\\n    }\\n\\n    String s1;\\n    String s2;\\n    String s3;\\n    int[][] dp;\\n\\n    private boolean helper(int i, int j, int k) {\\n        boolean isMatch = false;\\n        // base case\\n        if(k == s3.length()) return true;\\n        \\n        // we don\\'t have to calculate it again, just return result\\n        if(dp[i][j] != 0) return dp[i][j] == 1;\\n\\n        // if s1 matches pick s1\\n        if(i < s1.length() && s1.charAt(i) == s3.charAt(k)) {\\n            isMatch = isMatch || helper(i + 1, j, k + 1);\\n        }\\n\\n        // if s2 matches pick s2\\n        if(j < s2.length() && s2.charAt(j) == s3.charAt(k)) {\\n            isMatch = isMatch || helper(i, j + 1, k + 1);\\n        }\\n\\n        // memorize the final answer\\n        dp[i][j] = isMatch ? 1 : -1;\\n\\n        return isMatch;\\n    }   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2734441,
                "title": "c",
                "content": "```\\nbool isInterleave(char * s1, char * s2, char * s3){\\n    int n1 = strlen(s1);\\n    int n2 = strlen(s2);\\n    int n3 = strlen(s3);\\n    if((n1 + n2) != n3)\\n        return false;\\n    if(n1 == 0){\\n        if(strcmp(s2, s3) == 0)\\n            return true;\\n        else\\n            return false;\\n    }\\n    if(n2 == 0){\\n        if(strcmp(s1, s3) == 0)\\n            return true;\\n        else\\n            return false;\\n    }\\n    if(s3[n3-1] != s1[n1-1]  &&  s3[n3-1] != s2[n2-1])\\n        return false;\\n    if(s3[0] != s1[0]  &&  s3[0] != s2[0])\\n        return false;\\n    \\n    bool** dp = malloc((n1+1) * sizeof(bool*));\\n    for(int i = 0; i <= n1; i++){\\n        dp[i] = calloc((n2+1), sizeof(bool));\\n    }\\n\\n    dp[0][0] = true;\\n    for(int i = 1; i <= n1; i++){\\n        dp[i][0] = (dp[i-1][0]== true && (s1[i-1] == s3[i-1]));\\n    }\\n    for(int j = 1; j <= n2; j++){\\n        dp[0][j] = (dp[0][j-1]== true && (s2[j-1] == s3[j-1]));\\n    }\\n    \\n    for(int i = 1; i <= n1; i++){\\n        for(int j = 1; j <= n2; j++){\\n            if((s1[i-1] == s3[i+j-1]) && dp[i-1][j]== true)\\n                dp[i][j] = true;\\n            else if((s2[j-1] == s3[i+j-1]) && dp[i][j-1] == true)\\n                dp[i][j] = true;\\n        }\\n    }\\n\\n    return dp[n1][n2];\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nbool isInterleave(char * s1, char * s2, char * s3){\\n    int n1 = strlen(s1);\\n    int n2 = strlen(s2);\\n    int n3 = strlen(s3);\\n    if((n1 + n2) != n3)\\n        return false;\\n    if(n1 == 0){\\n        if(strcmp(s2, s3) == 0)\\n            return true;\\n        else\\n            return false;\\n    }\\n    if(n2 == 0){\\n        if(strcmp(s1, s3) == 0)\\n            return true;\\n        else\\n            return false;\\n    }\\n    if(s3[n3-1] != s1[n1-1]  &&  s3[n3-1] != s2[n2-1])\\n        return false;\\n    if(s3[0] != s1[0]  &&  s3[0] != s2[0])\\n        return false;\\n    \\n    bool** dp = malloc((n1+1) * sizeof(bool*));\\n    for(int i = 0; i <= n1; i++){\\n        dp[i] = calloc((n2+1), sizeof(bool));\\n    }\\n\\n    dp[0][0] = true;\\n    for(int i = 1; i <= n1; i++){\\n        dp[i][0] = (dp[i-1][0]== true && (s1[i-1] == s3[i-1]));\\n    }\\n    for(int j = 1; j <= n2; j++){\\n        dp[0][j] = (dp[0][j-1]== true && (s2[j-1] == s3[j-1]));\\n    }\\n    \\n    for(int i = 1; i <= n1; i++){\\n        for(int j = 1; j <= n2; j++){\\n            if((s1[i-1] == s3[i+j-1]) && dp[i-1][j]== true)\\n                dp[i][j] = true;\\n            else if((s2[j-1] == s3[i+j-1]) && dp[i][j-1] == true)\\n                dp[i][j] = true;\\n        }\\n    }\\n\\n    return dp[n1][n2];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2491750,
                "title": "c-three-different-method-approach-with-most-optimal-solution",
                "content": "```\\nclass Solution {\\n    \\n    //1. Top Down Approach\\n    bool SolveByMemo(string s1, string s2, string s3, vector<vector<int>> &dp)\\n    {\\n        int i = s1.length() , j = s2.length();\\n        \\n        if(dp[i][j] != -1)\\n            return dp[i][j];\\n        \\n        if(s3.empty())\\n            return dp[i][j] = (s1.empty() && s2.empty());\\n        \\n        if(s1.empty())\\n            return dp[i][j] = (s2 == s3);\\n        if(s2.empty())\\n            return dp[i][j] = (s1 == s3);\\n        \\n        if(s1[0] == s3[0] && s2[0] == s3[0])\\n            return dp[i][j] = SolveByMemo(s1.substr(1) , s2 , s3.substr(1) , dp) || SolveByMemo(s1 , s2.substr(1) , s3.substr(1), dp) ;\\n        if(s1[0] == s3[0] )\\n            return dp[i][j] = SolveByMemo(s1.substr(1) , s2 , s3.substr(1), dp);\\n        if(s2[0] == s3[0] )\\n            return dp[i][j] = SolveByMemo(s1 , s2.substr(1) , s3.substr(1), dp) ;\\n        \\n        return dp[i][j] = false;\\n        \\n    }\\n    \\n    // 2. Bottom UP Approach\\n    bool SolveByTab(string s1 , string s2 , string s3)\\n    {\\n         vector<vector<int>> dp(s1.length()+1, vector<int> (s2.length()+1, 0));\\n        \\n        for(int i = 0 ; i<= s1.length(); i++)\\n        {\\n            for(int j = 0; j<= s2.length() ; j++)\\n            {\\n                int k = i+j ;\\n                if(i == 0 && j == 0)\\n                   dp[0][0]  = 1;\\n                else if( i == 0)\\n                {\\n                    if(s2[j-1] == s3[k-1])\\n                        dp[i][j] = dp[i][j-1];\\n                }\\n                else if(j == 0)\\n                {\\n                    if(s1[i-1] == s3[k-1])\\n                        dp[i][j] = dp[i-1][j];\\n                }\\n                else\\n                {\\n                   dp[i][j] = (s1[i-1] == s3[k-1] && dp[i-1][j] || s2[j-1] == s3[k-1] && dp[i][j-1]);          \\n                }    \\n            }       \\n        }\\n        \\n        return dp[s1.length()][s2.length()];\\n    }\\n    \\n    // 3. Bottom Up Approach with Space Optimisation\\n      bool SolveSpaceOptimised(string s1 , string s2 , string s3)\\n    {\\n          if(s1.empty())\\n              return s2 == s3;\\n          if(s2.empty())\\n              return s1 == s3;\\n          \\n         vector<int> prev (s2.length()+1, 0);\\n         vector<int> curr (s2.length()+1, 0);\\n          \\n        for(int i = 0 ; i<= s1.length(); i++)\\n        {\\n            for(int j = 0; j<= s2.length() ; j++)\\n            {\\n                int k = i+j ;\\n                if(i == 0 && j == 0)\\n                  curr[0] = 1;\\n                else if( i == 0)\\n                {\\n                    if(s2[j-1] == s3[k-1])\\n                        curr[j] = curr[j-1];\\n                }\\n                else if(j == 0)\\n                {\\n                    if(s1[i-1] == s3[k-1])\\n                        curr[j] = prev[j];\\n                }\\n                else\\n                {\\n                   curr[j] = (s1[i-1] == s3[k-1] && prev[j] || s2[j-1] == s3[k-1] && curr[j-1]);\\n                }    \\n            }\\n            \\n            prev = curr;\\n        }\\n          \\n        return curr[s2.length()];\\n    }\\n    \\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n            \\n        if(s1.length() + s2.length() != s3.length())\\n            return false;\\n        // 1. Top Down Approach\\n        // vector<vector<int>> dp(s1.length()+1, vector<int> (s2.length()+1, -1));\\n        // return SolveByMemo(s1 , s2 , s3 , dp);\\n        \\n        // 2. Bottom Up Approach\\n         return SolveByTab(s1, s2 , s3);\\n        \\n        // 2. Bottom Up Approach + Space optimised\\n        return SolveSpaceOptimised(s1, s2 , s3);\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    \\n    //1. Top Down Approach\\n    bool SolveByMemo(string s1, string s2, string s3, vector<vector<int>> &dp)\\n    {\\n        int i = s1.length() , j = s2.length();\\n        \\n        if(dp[i][j] != -1)\\n            return dp[i][j];\\n        \\n        if(s3.empty())\\n            return dp[i][j] = (s1.empty() && s2.empty());\\n        \\n        if(s1.empty())\\n            return dp[i][j] = (s2 == s3);\\n        if(s2.empty())\\n            return dp[i][j] = (s1 == s3);\\n        \\n        if(s1[0] == s3[0] && s2[0] == s3[0])\\n            return dp[i][j] = SolveByMemo(s1.substr(1) , s2 , s3.substr(1) , dp) || SolveByMemo(s1 , s2.substr(1) , s3.substr(1), dp) ;\\n        if(s1[0] == s3[0] )\\n            return dp[i][j] = SolveByMemo(s1.substr(1) , s2 , s3.substr(1), dp);\\n        if(s2[0] == s3[0] )\\n            return dp[i][j] = SolveByMemo(s1 , s2.substr(1) , s3.substr(1), dp) ;\\n        \\n        return dp[i][j] = false;\\n        \\n    }\\n    \\n    // 2. Bottom UP Approach\\n    bool SolveByTab(string s1 , string s2 , string s3)\\n    {\\n         vector<vector<int>> dp(s1.length()+1, vector<int> (s2.length()+1, 0));\\n        \\n        for(int i = 0 ; i<= s1.length(); i++)\\n        {\\n            for(int j = 0; j<= s2.length() ; j++)\\n            {\\n                int k = i+j ;\\n                if(i == 0 && j == 0)\\n                   dp[0][0]  = 1;\\n                else if( i == 0)\\n                {\\n                    if(s2[j-1] == s3[k-1])\\n                        dp[i][j] = dp[i][j-1];\\n                }\\n                else if(j == 0)\\n                {\\n                    if(s1[i-1] == s3[k-1])\\n                        dp[i][j] = dp[i-1][j];\\n                }\\n                else\\n                {\\n                   dp[i][j] = (s1[i-1] == s3[k-1] && dp[i-1][j] || s2[j-1] == s3[k-1] && dp[i][j-1]);          \\n                }    \\n            }       \\n        }\\n        \\n        return dp[s1.length()][s2.length()];\\n    }\\n    \\n    // 3. Bottom Up Approach with Space Optimisation\\n      bool SolveSpaceOptimised(string s1 , string s2 , string s3)\\n    {\\n          if(s1.empty())\\n              return s2 == s3;\\n          if(s2.empty())\\n              return s1 == s3;\\n          \\n         vector<int> prev (s2.length()+1, 0);\\n         vector<int> curr (s2.length()+1, 0);\\n          \\n        for(int i = 0 ; i<= s1.length(); i++)\\n        {\\n            for(int j = 0; j<= s2.length() ; j++)\\n            {\\n                int k = i+j ;\\n                if(i == 0 && j == 0)\\n                  curr[0] = 1;\\n                else if( i == 0)\\n                {\\n                    if(s2[j-1] == s3[k-1])\\n                        curr[j] = curr[j-1];\\n                }\\n                else if(j == 0)\\n                {\\n                    if(s1[i-1] == s3[k-1])\\n                        curr[j] = prev[j];\\n                }\\n                else\\n                {\\n                   curr[j] = (s1[i-1] == s3[k-1] && prev[j] || s2[j-1] == s3[k-1] && curr[j-1]);\\n                }    \\n            }\\n            \\n            prev = curr;\\n        }\\n          \\n        return curr[s2.length()];\\n    }\\n    \\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n            \\n        if(s1.length() + s2.length() != s3.length())\\n            return false;\\n        // 1. Top Down Approach\\n        // vector<vector<int>> dp(s1.length()+1, vector<int> (s2.length()+1, -1));\\n        // return SolveByMemo(s1 , s2 , s3 , dp);\\n        \\n        // 2. Bottom Up Approach\\n         return SolveByTab(s1, s2 , s3);\\n        \\n        // 2. Bottom Up Approach + Space optimised\\n        return SolveSpaceOptimised(s1, s2 , s3);\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2249713,
                "title": "dp-easy-solution-0ms-memoization-easy-and-simple-with-comments",
                "content": "DP solution (memoization)\\nTC - O(n)\\n```\\nclass Solution {\\npublic:\\n    bool f(int i,int j, int k, string &s1, string &s2, string &s3, vector<vector<int>> &dp){\\n        //base cases\\n        if(i==s1.size() && j==s2.size() && k==s3.size()) return true;\\n        if(i>s1.size() || j>s2.size()) return false;\\n        \\n        //memoization\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        \\n        //if both are same then check for both i.e. recursion\\n        if(s1[i]==s3[k] && s2[j]==s3[k]){\\n            return dp[i][j] = (f(i+1,j,k+1,s1,s2,s3,dp) || f(i,j+1,k+1,s1,s2,s3,dp));\\n        }\\n        else if(s1[i]==s3[k]){\\n            return dp[i][j] = f(i+1,j,k+1,s1,s2,s3,dp);\\n        }\\n        else if(s2[j]==s3[k]){\\n            return dp[i][j] = f(i,j+1,k+1,s1,s2,s3,dp);\\n        }else{\\n            return false;\\n        }\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n=s1.length(),m=s2.length(),len=s3.length();\\n        //initialization of dp\\n        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));\\n        return f(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```\\nwe can do it with tabulation and then space optimization also.",
                "solutionTags": [
                    "C",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool f(int i,int j, int k, string &s1, string &s2, string &s3, vector<vector<int>> &dp){\\n        //base cases\\n        if(i==s1.size() && j==s2.size() && k==s3.size()) return true;\\n        if(i>s1.size() || j>s2.size()) return false;\\n        \\n        //memoization\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        \\n        //if both are same then check for both i.e. recursion\\n        if(s1[i]==s3[k] && s2[j]==s3[k]){\\n            return dp[i][j] = (f(i+1,j,k+1,s1,s2,s3,dp) || f(i,j+1,k+1,s1,s2,s3,dp));\\n        }\\n        else if(s1[i]==s3[k]){\\n            return dp[i][j] = f(i+1,j,k+1,s1,s2,s3,dp);\\n        }\\n        else if(s2[j]==s3[k]){\\n            return dp[i][j] = f(i,j+1,k+1,s1,s2,s3,dp);\\n        }else{\\n            return false;\\n        }\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n=s1.length(),m=s2.length(),len=s3.length();\\n        //initialization of dp\\n        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));\\n        return f(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2249366,
                "title": "easy-understandable-recursion-with-memoization-3d-dp",
                "content": "```\\nclass Solution {\\n    Boolean[][][] dp;\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        \\n        int s1Len = s1.length(), s2Len = s2.length(), s3Len = s3.length();\\n        \\n        dp = new Boolean[s1Len+1][s2Len+1][s3Len+1];\\n\\t\\t\\n\\t\\t// If length of s1 + s2 is not equal with that of s3 then return false bcz s3 is created by combining s1 and s2 only\\n        if((s1Len+s2Len) != s3Len) return false;\\n        \\n        return solve(s1,s2,s3,0,0,0);\\n    }\\n    \\n    private boolean solve(String s1, String s2, String s3, int i1, int i2, int j){\\n        \\n        // Base condition\\n        if(j == s3.length()) return true;\\n        \\n        if(dp[i1][i2][j] != null) return dp[i1][i2][j];\\n        \\n        // If any of string (s1 or s2) ends, then continue comparing with the remaining string\\n        if(i1 == s1.length() && i2 != s2.length())\\n            return dp[i1][i2][j] = (s2.charAt(i2)==s3.charAt(j)) && solve(s1,s2,s3,i1,i2+1,j+1);\\n        else if(i1 != s1.length() && i2 == s2.length())\\n            return dp[i1][i2][j] = (s1.charAt(i1)==s3.charAt(j)) && solve(s1,s2,s3,i1+1,i2,j+1);\\n        \\n        char s1C = s1.charAt(i1), s2C = s2.charAt(i2), s3C = s3.charAt(j);\\n        \\n        // If char of s1 matches with s3 but not of s2 \\n        if(s1C == s3C && s2C != s3C)\\n            return dp[i1][i2][j] = solve(s1,s2,s3,i1+1,i2,j+1);\\n        \\n        // If char of s2 matches with s3 but not of s1\\n        else if (s1C != s3C && s2C == s3C)\\n            return dp[i1][i2][j] = solve(s1,s2,s3,i1,i2+1,j+1);\\n        \\n        // If char of both s1 and s2 matches with s3\\n        else if(s1C == s3C && s2C == s3C)\\n            return dp[i1][i2][j] = solve(s1,s2,s3,i1,i2+1,j+1) || solve(s1,s2,s3,i1+1,i2,j+1);\\n        \\n        // If no char of either s1 or s2 matching with s3, then return false as the char in s3 is not a part of any substring of s1 and s2\\n        else return dp[i1][i2][j] = false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    Boolean[][][] dp;\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        \\n        int s1Len = s1.length(), s2Len = s2.length(), s3Len = s3.length();\\n        \\n        dp = new Boolean[s1Len+1][s2Len+1][s3Len+1];\\n\\t\\t\\n\\t\\t// If length of s1 + s2 is not equal with that of s3 then return false bcz s3 is created by combining s1 and s2 only\\n        if((s1Len+s2Len) != s3Len) return false;\\n        \\n        return solve(s1,s2,s3,0,0,0);\\n    }\\n    \\n    private boolean solve(String s1, String s2, String s3, int i1, int i2, int j){\\n        \\n        // Base condition\\n        if(j == s3.length()) return true;\\n        \\n        if(dp[i1][i2][j] != null) return dp[i1][i2][j];\\n        \\n        // If any of string (s1 or s2) ends, then continue comparing with the remaining string\\n        if(i1 == s1.length() && i2 != s2.length())\\n            return dp[i1][i2][j] = (s2.charAt(i2)==s3.charAt(j)) && solve(s1,s2,s3,i1,i2+1,j+1);\\n        else if(i1 != s1.length() && i2 == s2.length())\\n            return dp[i1][i2][j] = (s1.charAt(i1)==s3.charAt(j)) && solve(s1,s2,s3,i1+1,i2,j+1);\\n        \\n        char s1C = s1.charAt(i1), s2C = s2.charAt(i2), s3C = s3.charAt(j);\\n        \\n        // If char of s1 matches with s3 but not of s2 \\n        if(s1C == s3C && s2C != s3C)\\n            return dp[i1][i2][j] = solve(s1,s2,s3,i1+1,i2,j+1);\\n        \\n        // If char of s2 matches with s3 but not of s1\\n        else if (s1C != s3C && s2C == s3C)\\n            return dp[i1][i2][j] = solve(s1,s2,s3,i1,i2+1,j+1);\\n        \\n        // If char of both s1 and s2 matches with s3\\n        else if(s1C == s3C && s2C == s3C)\\n            return dp[i1][i2][j] = solve(s1,s2,s3,i1,i2+1,j+1) || solve(s1,s2,s3,i1+1,i2,j+1);\\n        \\n        // If no char of either s1 or s2 matching with s3, then return false as the char in s3 is not a part of any substring of s1 and s2\\n        else return dp[i1][i2][j] = false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2248912,
                "title": "dp-memoization",
                "content": "\\n\\n    class Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        int dp[][][]=new int[s1.length()+1][s2.length()+1][s3.length()];\\n        for(int p[][]:dp){\\n            for(int t1[]:p){\\n                Arrays.fill(t1,-1);\\n            }\\n        }\\n        return f(0,0,0,s1,s2,s3,dp);\\n    }\\n    public boolean f(int i,int j,int k,String s1,String s2,String s3,int dp[][][]){\\n        if(i>=s1.length() && j>=s2.length() && k>=s3.length())return true;\\n        \\n        if(dp[i][j][k]!=-1)return dp[i][j][k]==0?false:true;\\n        boolean up=false;\\n        //checking if from both string characters are equal\\n        if((i<s1.length() && s1.charAt(i)==s3.charAt(k)) && (j<s2.length() && s2.charAt(j)==s3.charAt(k))){\\n            boolean take=f(i+1,j,k+1,s1,s2,s3,dp);\\n            boolean not=f(i,j+1,k+1,s1,s2,s3,dp);\\n            up=take || not;\\n        }\\n         // checking if from first string characters are equal  \\n        else if(i<s1.length() && s1.charAt(i)==s3.charAt(k)){\\n            up=f(i+1,j,k+1,s1,s2,s3,dp);\\n        }\\n        //checking if from second string characters are equal  \\n        else if(j<s2.length() && s2.charAt(j)==s3.charAt(k)){\\n            up=f(i,j+1,k+1,s1,s2,s3,dp);\\n        }\\n        dp[i][j][k]=(up==false)?0:1;\\n        return up;\\n    }\\n}",
                "solutionTags": [
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "class Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        int dp[][][]=new int[s1.length()+1][s2.length()+1][s3.length()];\\n        for(int p[][]:dp){\\n            for(int t1[]:p){\\n                Arrays.fill(t1,-1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2248489,
                "title": "java-easy-solution-with-explanation",
                "content": "\\'\\'\\'\\n class Solution {\\n\\tpublic boolean isInterleave(String s1, String s2, String s3) {\\n\\t\\tint m = s1.length(); \\n\\t\\tint n = s2.length();\\n\\n\\t\\t// Base case\\n\\t\\tif(s3.length() != m + n) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tif(s1.length() == 0) {\\n\\t\\t\\treturn s2.equals(s3);\\n\\t\\t} \\n\\t\\tif(s2.length() == 0) {\\n\\t\\t\\treturn s1.equals(s3);\\n\\t\\t}\\n\\n\\t\\t// dp[i][j] represents can we use i characters from s1 and j characters from s2 \\n\\t\\t// to form the first i+j characters from s3\\n\\t\\tboolean[][] dp = new boolean[m+1][n+1];\\n\\n\\t\\t// base case using 0 characters from both means yes. \\n\\t\\tdp[0][0] = true;\\n\\n\\t\\tfor(int i = 1; i < m+1; i++) {\\n\\t\\t\\tdp[i][0] = dp[i-1][0] && s1.charAt(i-1) == s3.charAt(i-1);\\n\\t\\t}\\n\\n\\t\\tfor(int i = 1; i < n+1; i++) {\\n\\t\\t\\tdp[0][i] = dp[0][i-1] && s2.charAt(i-1) == s3.charAt(i-1);\\n\\t\\t}\\n\\n\\t\\t// the recursive relationship\\n\\t\\tfor(int i = 1; i < m+1; i++) {\\n\\t\\t\\tfor(int j = 1; j < n+1; j++) {\\n\\t\\t\\t\\tdp[i][j] = (dp[i-1][j] && s1.charAt(i-1) == s3.charAt(i+j-1)) \\n\\t\\t\\t\\t\\t\\t|| (dp[i][j-1] && s2.charAt(j-1) == s3.charAt(i+j-1));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn dp[m][n];\\n\\t}\\n}",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\n\\tpublic boolean isInterleave(String s1, String s2, String s3) {\\n\\t\\tint m = s1.length(); \\n\\t\\tint n = s2.length();\\n\\n\\t\\t// Base case\\n\\t\\tif(s3.length() != m + n) {\\n\\t\\t\\treturn false;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1823087,
                "title": "super-fast-golang",
                "content": "2D DP matrix is faster than 1D DP array (100% vs 40%), for some reason. May be due to underlying slice operations. \\nBoth are included below.\\n\\n```\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n    /*\\n\\t\\n\\t2D DP matrix: \\n\\tPlace s1 and s2 on axes. \\n\\tmatrix[i][j] represents isInterleave(s1[:i], s2[:j], s3[:i+j]).\\n    \\n\\t       a a b c c\\n        0 1 2 3 4 5\\n      0 t t t f f f\\n    d 1 f f t t f f  \\n    b 2 f f t t t f\\n    b 3 f f t t t f\\n    c 4 f f t t t f\\n    a 5 f f f f t t\\n      \\n    */\\n    if s1 == \"\" || s2 == \"\" {\\n        return s3 == s1 + s2\\n    }\\n    if len(s1) + len(s2) != len(s3) {\\n        return false\\n    }\\n    dp := make([][]bool, len(s1)+1)\\n    for i := range dp {\\n        dp[i] = make([]bool, len(s2)+1)\\n    }\\n    for i := 0; i < len(dp); i++ {\\n        for j := 0; j < len(dp[0]); j++ {\\n            if i == 0 || j == 0 {\\n                dp[i][j] = s1[:i] + s2[:j] == s3[:i+j]\\n                continue\\n            }\\n            // check top\\n            if dp[i-1][j] && s1[i-1] == s3[i+j-1] {\\n                dp[i][j] = true\\n            }\\n            // check left\\n            if dp[i][j-1] && s2[j-1] == s3[i+j-1] {\\n                dp[i][j] = true\\n            }\\n        }\\n    }\\n    return dp[len(s1)][len(s2)]\\n}\\n```\\n\\nSince we are going row by row, we only need to hold two rows in memory (current and previous).\\n1D DP slice solution here.\\n\\n```\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n    if s1 == \"\" || s2 == \"\" {\\n        return s3 == s1 + s2\\n    }\\n    if len(s1) + len(s2) != len(s3) {\\n        return false\\n    }\\n    dp := make([]bool, len(s2)+1)\\n    for i := 0; i <= len(s1); i++ {\\n        nextDP := make([]bool, len(s2)+1)\\n        for j := 0; j <= len(s2); j++ {\\n            if i == 0 || j == 0 {\\n                nextDP[j] = s1[:i] + s2[:j] == s3[:i+j]\\n                continue\\n            }\\n            // check top\\n            if dp[j] && s1[i-1] == s3[i+j-1] {\\n                nextDP[j] = true\\n            }\\n            // check left\\n            if nextDP[j-1] && s2[j-1] == s3[i+j-1] {\\n                nextDP[j] = true\\n            }\\n        }\\n        dp = nextDP\\n    }\\n    return dp[len(s2)]\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n    /*\\n\\t\\n\\t2D DP matrix: \\n\\tPlace s1 and s2 on axes. \\n\\tmatrix[i][j] represents isInterleave(s1[:i], s2[:j], s3[:i+j]).\\n    \\n\\t       a a b c c\\n        0 1 2 3 4 5\\n      0 t t t f f f\\n    d 1 f f t t f f  \\n    b 2 f f t t t f\\n    b 3 f f t t t f\\n    c 4 f f t t t f\\n    a 5 f f f f t t\\n      \\n    */\\n    if s1 == \"\" || s2 == \"\" {\\n        return s3 == s1 + s2\\n    }\\n    if len(s1) + len(s2) != len(s3) {\\n        return false\\n    }\\n    dp := make([][]bool, len(s1)+1)\\n    for i := range dp {\\n        dp[i] = make([]bool, len(s2)+1)\\n    }\\n    for i := 0; i < len(dp); i++ {\\n        for j := 0; j < len(dp[0]); j++ {\\n            if i == 0 || j == 0 {\\n                dp[i][j] = s1[:i] + s2[:j] == s3[:i+j]\\n                continue\\n            }\\n            // check top\\n            if dp[i-1][j] && s1[i-1] == s3[i+j-1] {\\n                dp[i][j] = true\\n            }\\n            // check left\\n            if dp[i][j-1] && s2[j-1] == s3[i+j-1] {\\n                dp[i][j] = true\\n            }\\n        }\\n    }\\n    return dp[len(s1)][len(s2)]\\n}\\n```\n```\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n    if s1 == \"\" || s2 == \"\" {\\n        return s3 == s1 + s2\\n    }\\n    if len(s1) + len(s2) != len(s3) {\\n        return false\\n    }\\n    dp := make([]bool, len(s2)+1)\\n    for i := 0; i <= len(s1); i++ {\\n        nextDP := make([]bool, len(s2)+1)\\n        for j := 0; j <= len(s2); j++ {\\n            if i == 0 || j == 0 {\\n                nextDP[j] = s1[:i] + s2[:j] == s3[:i+j]\\n                continue\\n            }\\n            // check top\\n            if dp[j] && s1[i-1] == s3[i+j-1] {\\n                nextDP[j] = true\\n            }\\n            // check left\\n            if nextDP[j-1] && s2[j-1] == s3[i+j-1] {\\n                nextDP[j] = true\\n            }\\n        }\\n        dp = nextDP\\n    }\\n    return dp[len(s2)]\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1470519,
                "title": "recursive-dp-solution-c-0ms-faster-than-100",
                "content": "```class Solution {\\npublic:\\n    int dp[105][105];\\n    bool sol(string& s1,string& s2,string& s3,int i,int j,int k){\\n        if(k==s3.length()){\\n            if(i==s1.length()&&j==s2.length())return dp[i][j]=true;\\n            return false;\\n        }\\n        if(dp[i][j]!=-1)return dp[i][j];\\n        if(s1[i]==s3[k]){\\n            if(s2[j]==s3[k]){\\n                bool a1=sol(s1,s2,s3,i+1,j,k+1);\\n                if(a1==true)return dp[i][j]=true;\\n                return dp[i][j]=sol(s1,s2,s3,i,j+1,k+1);\\n            }\\n            return dp[i][j]=sol(s1,s2,s3,i+1,j,k+1);\\n        }\\n        if(s2[j]==s3[k]){\\n            return dp[i][j]=sol(s1,s2,s3,i,j+1,k+1);\\n        }\\n        return dp[i][j]=false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        // if(s1+s2==s3||s2+s1==s3)return true;\\n        memset(dp,-1,sizeof(dp));\\n        return sol(s1,s2,s3,0,0,0);\\n    }\\n};```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```class Solution {\\npublic:\\n    int dp[105][105];\\n    bool sol(string& s1,string& s2,string& s3,int i,int j,int k){\\n        if(k==s3.length()){\\n            if(i==s1.length()&&j==s2.length())return dp[i][j]=true;\\n            return false;\\n        }\\n        if(dp[i][j]!=-1)return dp[i][j];\\n        if(s1[i]==s3[k]){\\n            if(s2[j]==s3[k]){\\n                bool a1=sol(s1,s2,s3,i+1,j,k+1);\\n                if(a1==true)return dp[i][j]=true;\\n                return dp[i][j]=sol(s1,s2,s3,i,j+1,k+1);\\n            }\\n            return dp[i][j]=sol(s1,s2,s3,i+1,j,k+1);\\n        }\\n        if(s2[j]==s3[k]){\\n            return dp[i][j]=sol(s1,s2,s3,i,j+1,k+1);\\n        }\\n        return dp[i][j]=false;\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        // if(s1+s2==s3||s2+s1==s3)return true;\\n        memset(dp,-1,sizeof(dp));\\n        return sol(s1,s2,s3,0,0,0);\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 1311468,
                "title": "c-4-ms-faster-than-73-89-6-1-mb-less-than-93-05-dp-visualised",
                "content": "```c++\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n\\t\\n\\t/* Input\\n\\t\\n\\t\"aabcc\"\\n\\t\"dbbca\"\\n\\t\"aadbbcbcac\"\\n\\t\\n\\t*/\\n\\n        \\n    if (s1.size() > 100 \\n        || s2.size() > 100 \\n        || s1.size() + s2.size() != s3.size()) {\\n        return false;\\n    }\\n        \\n    int dp[101][101];\\n        \\n    for(int i = 0; i < 101; i++) {\\n        for(int j = 0; j < 101; j++) {\\n            dp[i][j] = 0;\\n        }\\n    }\\n\\n    // If no length then match\\n    dp[0][0] = 1;\\n        \\n    \\n    // Calculate for only s1\\n    for(int i = 0 ; i < s1.size() ; i++ ) {\\n        if( s3[i] == s1[i] ) {\\n            dp[0][i+1] =  dp[0][i];\\n        }\\n    }\\n\\n    // Calculate for only s2 \\n    for(int j = 0 ; j < s2.size() ; j++ ) {\\n        if( s3[j] == s2[j] ) {\\n            dp[j+1][0] = dp[j][0];\\n        }\\n    }\\n\\n    /* dp table lloks like\\n\\t\\n\\t1 1 1 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t\\n\\t*/\\n        \\n    for (  int j = 1;  j  <=  s2.size() ;  j++ ) {\\n        \\n        for ( int i = 1;  i <= s1.size();  i++ )  {\\n\\n            // if s3[previous] not from s2, then check if s1 match\\n\\t\\t\\t\\n            bool isFromS1 = dp[j][i-1] && s3[i+j-1] == s1[i-1];\\n\\n            // if s3[previous] not from s1, then check if s2 match\\n\\t\\t\\t\\n            bool isFromS2 = dp[j-1][i] && s3[i+j-1] == s2[j-1];\\n\\n            dp[j][i] = isFromS1 || isFromS2;\\n        }\\n    }\\n\\n   /* dp table lloks like\\n\\t\\n\\t1 1 1 0 0 0 \\n\\t0 0 1 1 0 0 \\n\\t0 0 1 1 1 0 \\n\\t0 0 1 0 1 1 \\n\\t0 0 1 1 1 0 \\n\\t0 0 0 0 1 1 \\n\\t\\n\\t*/\\n\\t\\n    return dp[s2.size()][s1.size()];\\n}\\n};\\n```\\n\\n**For more solutions, check out this \\uD83C\\uDFC6  [GITHUB REPOSITORY](https://github.com/MuhtasimTanmoy/playground) with over 1500+ solutions.**",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n\\t\\n\\t/* Input\\n\\t\\n\\t\"aabcc\"\\n\\t\"dbbca\"\\n\\t\"aadbbcbcac\"\\n\\t\\n\\t*/\\n\\n        \\n    if (s1.size() > 100 \\n        || s2.size() > 100 \\n        || s1.size() + s2.size() != s3.size()) {\\n        return false;\\n    }\\n        \\n    int dp[101][101];\\n        \\n    for(int i = 0; i < 101; i++) {\\n        for(int j = 0; j < 101; j++) {\\n            dp[i][j] = 0;\\n        }\\n    }\\n\\n    // If no length then match\\n    dp[0][0] = 1;\\n        \\n    \\n    // Calculate for only s1\\n    for(int i = 0 ; i < s1.size() ; i++ ) {\\n        if( s3[i] == s1[i] ) {\\n            dp[0][i+1] =  dp[0][i];\\n        }\\n    }\\n\\n    // Calculate for only s2 \\n    for(int j = 0 ; j < s2.size() ; j++ ) {\\n        if( s3[j] == s2[j] ) {\\n            dp[j+1][0] = dp[j][0];\\n        }\\n    }\\n\\n    /* dp table lloks like\\n\\t\\n\\t1 1 1 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t0 0 0 0 0 0 \\n\\t\\n\\t*/\\n        \\n    for (  int j = 1;  j  <=  s2.size() ;  j++ ) {\\n        \\n        for ( int i = 1;  i <= s1.size();  i++ )  {\\n\\n            // if s3[previous] not from s2, then check if s1 match\\n\\t\\t\\t\\n            bool isFromS1 = dp[j][i-1] && s3[i+j-1] == s1[i-1];\\n\\n            // if s3[previous] not from s1, then check if s2 match\\n\\t\\t\\t\\n            bool isFromS2 = dp[j-1][i] && s3[i+j-1] == s2[j-1];\\n\\n            dp[j][i] = isFromS1 || isFromS2;\\n        }\\n    }\\n\\n   /* dp table lloks like\\n\\t\\n\\t1 1 1 0 0 0 \\n\\t0 0 1 1 0 0 \\n\\t0 0 1 1 1 0 \\n\\t0 0 1 0 1 1 \\n\\t0 0 1 1 1 0 \\n\\t0 0 0 0 1 1 \\n\\t\\n\\t*/\\n\\t\\n    return dp[s2.size()][s1.size()];\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1248583,
                "title": "c-from-top-down-memoization-using-map",
                "content": "bool godp(string s1, string s2, string s3, int i, int j, int k, map<pair<int,int>,int> &ma ) {\\n        \\n        int n = s1.length(), m = s2.length(), l = s3.length();\\n        if(k >= l && i >=n && j >= m) {\\n            return 1;\\n        }\\n        if(k >= l)\\n            return 0;\\n        if(ma.find({i,j}) != ma.end()) {\\n            return ma[{i,j}];\\n        }\\n        int op1 = 0, op2 = 0;\\n        if(j < m && s3[k] == s2[j]) {\\n                    op1 = godp(s1,s2,s3,i,j+1,k+1, ma);\\n        }\\n        if(i < n && s3[k] == s1[i]) {\\n            op2 = godp(s1,s2,s3,i+1,j,k+1, ma);\\n        }\\n        return ma[{i,j}] = (op1||op2);\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n         map<pair<int,int>,int> ma;\\n        int i =0, j = 0, k = 0;\\n        int n = s1.length(), m = s2.length(), l = s3.length(); \\n        return godp(s1,s2,s3,0,0,0,ma);\\n    }",
                "solutionTags": [],
                "code": "bool godp(string s1, string s2, string s3, int i, int j, int k, map<pair<int,int>,int> &ma ) {\\n        \\n        int n = s1.length(), m = s2.length(), l = s3.length();\\n        if(k >= l && i >=n && j >= m) {\\n            return 1;\\n        }\\n        if(k >= l)\\n            return 0;\\n        if(ma.find({i,j}) != ma.end()) {\\n            return ma[{i,j}];\\n        }\\n        int op1 = 0, op2 = 0;\\n        if(j < m && s3[k] == s2[j]) {\\n                    op1 = godp(s1,s2,s3,i,j+1,k+1, ma);\\n        }\\n        if(i < n && s3[k] == s1[i]) {\\n            op2 = godp(s1,s2,s3,i+1,j,k+1, ma);\\n        }\\n        return ma[{i,j}] = (op1||op2);\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n         map<pair<int,int>,int> ma;\\n        int i =0, j = 0, k = 0;\\n        int n = s1.length(), m = s2.length(), l = s3.length(); \\n        return godp(s1,s2,s3,0,0,0,ma);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1248054,
                "title": "java-easy-3ms-tabulation-tabulation",
                "content": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n = s1.length();\\n        int m = s2.length();\\n        int q = s3.length();\\n        if(n+m!=q){\\n            return false;\\n        }\\n        boolean dp[][]= new boolean[n+1][m+1];\\n        for(int i = 0;i<=n;i++){\\n            for(int j = 0;j<=m;j++){\\n                if(i==0&&j==0){\\n                    dp[i][j]=true;\\n                }\\n                else if(i==0){\\n                    char a = s3.charAt(j-1);\\n                    char b = s2.charAt(j-1);\\n                    if(a==b&&dp[i][j-1]){\\n                        dp[i][j]=true;\\n                    }\\n                }else if(j==0){\\n                    char a = s3.charAt(i-1);\\n                    char b = s1.charAt(i-1);\\n                    if(a==b&&dp[i-1][j]){\\n                        dp[i][j]=true;\\n                    }\\n                }else{\\n                    if(dp[i][j-1]&&!dp[i-1][j]){\\n                    char a = s2.charAt(j-1);\\n                    char b = s3.charAt(i+j-1);\\n                        if(a==b){\\n                            dp[i][j]=true;\\n                        }\\n                  \\n                }\\n                    else if(dp[i-1][j]&&!dp[i][j-1]){\\n                    char a = s1.charAt(i-1);\\n                    char b = s3.charAt(i+j-1);\\n                        if(a==b){\\n                            dp[i][j]=true;\\n                        }\\n                  \\n                }\\n                    else if(dp[i-1][j]&&dp[i][j-1]){\\n                         char a = s1.charAt(i-1);\\n                        char c = s2.charAt(j-1);\\n                    char b = s3.charAt(i+j-1);\\n                        if(a==b&&a==c){\\n                            dp[i][j]=true;\\n                        }\\n                    }\\n                }\\n                \\n            }\\n        }\\n       return dp[n][m]; \\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/a02d94b5-9c16-4d19-a261-d6873a24911d_1622681113.874321.png)\\n",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        int n = s1.length();\\n        int m = s2.length();\\n        int q = s3.length();\\n        if(n+m!=q){\\n            return false;\\n        }\\n        boolean dp[][]= new boolean[n+1][m+1];\\n        for(int i = 0;i<=n;i++){\\n            for(int j = 0;j<=m;j++){\\n                if(i==0&&j==0){\\n                    dp[i][j]=true;\\n                }\\n                else if(i==0){\\n                    char a = s3.charAt(j-1);\\n                    char b = s2.charAt(j-1);\\n                    if(a==b&&dp[i][j-1]){\\n                        dp[i][j]=true;\\n                    }\\n                }else if(j==0){\\n                    char a = s3.charAt(i-1);\\n                    char b = s1.charAt(i-1);\\n                    if(a==b&&dp[i-1][j]){\\n                        dp[i][j]=true;\\n                    }\\n                }else{\\n                    if(dp[i][j-1]&&!dp[i-1][j]){\\n                    char a = s2.charAt(j-1);\\n                    char b = s3.charAt(i+j-1);\\n                        if(a==b){\\n                            dp[i][j]=true;\\n                        }\\n                  \\n                }\\n                    else if(dp[i-1][j]&&!dp[i][j-1]){\\n                    char a = s1.charAt(i-1);\\n                    char b = s3.charAt(i+j-1);\\n                        if(a==b){\\n                            dp[i][j]=true;\\n                        }\\n                  \\n                }\\n                    else if(dp[i-1][j]&&dp[i][j-1]){\\n                         char a = s1.charAt(i-1);\\n                        char c = s2.charAt(j-1);\\n                    char b = s3.charAt(i+j-1);\\n                        if(a==b&&a==c){\\n                            dp[i][j]=true;\\n                        }\\n                    }\\n                }\\n                \\n            }\\n        }\\n       return dp[n][m]; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247877,
                "title": "clean-1d-dp-go-solution-beats-100",
                "content": "```\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n\\tif len(s1)+len(s2) != len(s3) {\\n\\t\\treturn false\\n\\t}\\n\\n\\tdp := make([]bool, len(s1)+1)\\n\\tfor i := 0; i < len(s2)+1; i++ {\\n\\t\\tfor j := 0; j < len(s1)+1; j++ {\\n\\t\\t\\tdp[j] = i == 0 && j == 0 || j > 0 && dp[j-1] && s1[j-1] == s3[i+j-1] || i > 0 && dp[j] && s2[i-1] == s3[i+j-1]\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[len(s1)]\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Dynamic Programming"
                ],
                "code": "```\\nfunc isInterleave(s1 string, s2 string, s3 string) bool {\\n\\tif len(s1)+len(s2) != len(s3) {\\n\\t\\treturn false\\n\\t}\\n\\n\\tdp := make([]bool, len(s1)+1)\\n\\tfor i := 0; i < len(s2)+1; i++ {\\n\\t\\tfor j := 0; j < len(s1)+1; j++ {\\n\\t\\t\\tdp[j] = i == 0 && j == 0 || j > 0 && dp[j-1] && s1[j-1] == s3[i+j-1] || i > 0 && dp[j] && s2[i-1] == s3[i+j-1]\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[len(s1)]\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1247161,
                "title": "interleaving-string",
                "content": "**Basic intution**\\nthis question is somewhat similar to longest common subsequence which is a very popular dp problem. Here were are selecting last character of s3 and comparing it with  last element of s1 and s2.\\n\\n**Example1**\\n   consider s1=\"abc\",s2=\"adg\" and s3=\"aabcdg\"\\n![image](https://assets.leetcode.com/users/images/fc54b5d6-67c8-451e-af04-0903dc4809ce_1622638700.4142802.png)\\n\\n**Example2**\\n![image](https://assets.leetcode.com/users/images/944f8c3f-b56f-4ed3-b8d4-7040ac82de91_1622639036.6773384.png)\\n\\n\\t\\t\\t\\t\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int t[101][101];\\n    bool lcs(string s1,string s2,string s3,int n1,int n2,int n3){\\n        if(t[n1+1][n2+1]!=-1){\\n            return t[n1+1][n2+1];\\n        }\\n        if(n1<0 and n2<0){\\n            return t[n1+1][n2+1]=true;\\n        }\\n        if(n1<0){\\n            if(s2[n2]==s3[n3]){\\n                return t[n1+1][n2+1]=lcs(s1,s2,s3,n1,n2-1,n3-1);\\n            }\\n            else{\\n                return t[n1+1][n2+1]=false;\\n            }\\n        }\\n        else if(n2<0){\\n             if(s1[n1]==s3[n3]){\\n                return t[n1+1][n2+1]=lcs(s1,s2,s3,n1-1,n2,n3-1);\\n            }\\n            else{\\n                return t[n1+1][n2+1]=false;\\n            }\\n        }\\n        if(s1[n1]==s3[n3] and s2[n2]==s3[n3]){\\n            return t[n1+1][n2+1]=lcs(s1,s2,s3,n1-1,n2,n3-1) or lcs(s1,s2,s3,n1,n2-1,n3-1);\\n        }\\n        else if(s1[n1]==s3[n3]){\\n            return t[n1+1][n2+1]=lcs(s1,s2,s3,n1-1,n2,n3-1);\\n        }\\n        else if(s2[n2]==s3[n3]){\\n             return t[n1+1][n2+1]=lcs(s1,s2,s3,n1,n2-1,n3-1);\\n        }\\n        return t[n1+1][n2+1]=false;\\n        \\n    }    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size()!=s1.size()+s2.size()){\\n            return false;\\n        }\\n        memset(t,-1,sizeof(t));\\n        return lcs(s1,s2,s3,s1.size()-1,s2.size()-1,s3.size()-1);\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int t[101][101];\\n    bool lcs(string s1,string s2,string s3,int n1,int n2,int n3){\\n        if(t[n1+1][n2+1]!=-1){\\n            return t[n1+1][n2+1];\\n        }\\n        if(n1<0 and n2<0){\\n            return t[n1+1][n2+1]=true;\\n        }\\n        if(n1<0){\\n            if(s2[n2]==s3[n3]){\\n                return t[n1+1][n2+1]=lcs(s1,s2,s3,n1,n2-1,n3-1);\\n            }\\n            else{\\n                return t[n1+1][n2+1]=false;\\n            }\\n        }\\n        else if(n2<0){\\n             if(s1[n1]==s3[n3]){\\n                return t[n1+1][n2+1]=lcs(s1,s2,s3,n1-1,n2,n3-1);\\n            }\\n            else{\\n                return t[n1+1][n2+1]=false;\\n            }\\n        }\\n        if(s1[n1]==s3[n3] and s2[n2]==s3[n3]){\\n            return t[n1+1][n2+1]=lcs(s1,s2,s3,n1-1,n2,n3-1) or lcs(s1,s2,s3,n1,n2-1,n3-1);\\n        }\\n        else if(s1[n1]==s3[n3]){\\n            return t[n1+1][n2+1]=lcs(s1,s2,s3,n1-1,n2,n3-1);\\n        }\\n        else if(s2[n2]==s3[n3]){\\n             return t[n1+1][n2+1]=lcs(s1,s2,s3,n1,n2-1,n3-1);\\n        }\\n        return t[n1+1][n2+1]=false;\\n        \\n    }    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s3.size()!=s1.size()+s2.size()){\\n            return false;\\n        }\\n        memset(t,-1,sizeof(t));\\n        return lcs(s1,s2,s3,s1.size()-1,s2.size()-1,s3.size()-1);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1247111,
                "title": "interleaving-string-with-dp-solution-c",
                "content": "\\n\\n![image](https://assets.leetcode.com/users/images/ee9cb1ad-88e5-491f-aac7-2ae94816c95d_1622637178.164193.jpeg)\\n\\n\\n\\n\\n```\\nclass Solution {\\npublic:\\n    // Recursive DP Solution\\n\\t\\n    vector < vector < int > > dp;\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        dp.assign(s1.size() + 1, vector < int > (s2.size() + 1, -1));\\n        return ans(s1, s2, s3, 0, 0, 0);    \\n    }\\n    \\n    bool ans(string s1, string s2, string s3, int idx1, int idx2, int idx3){\\n\\t   if(idx3 == s3.size() && idx1 == s1.size() && idx2 == s2.size()) return true;\\n        if(dp[idx1][idx2] != -1) return dp[idx1][idx2];\\n        bool res = false;\\n        if(s1[idx1] == s3[idx3] && idx1 < s1.size())\\n            res |= ans(s1, s2, s3, idx1 + 1, idx2, idx3 + 1);\\n        if(s2[idx2] == s3[idx3] && idx2 < s2.size())\\n            res |= ans(s1, s2, s3, idx1, idx2 + 1, idx3 + 1);\\n        return dp[idx1][idx2] = res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    // Recursive DP Solution\\n\\t\\n    vector < vector < int > > dp;\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        dp.assign(s1.size() + 1, vector < int > (s2.size() + 1, -1));\\n        return ans(s1, s2, s3, 0, 0, 0);    \\n    }\\n    \\n    bool ans(string s1, string s2, string s3, int idx1, int idx2, int idx3){\\n\\t   if(idx3 == s3.size() && idx1 == s1.size() && idx2 == s2.size()) return true;\\n        if(dp[idx1][idx2] != -1) return dp[idx1][idx2];\\n        bool res = false;\\n        if(s1[idx1] == s3[idx3] && idx1 < s1.size())\\n            res |= ans(s1, s2, s3, idx1 + 1, idx2, idx3 + 1);\\n        if(s2[idx2] == s3[idx3] && idx2 < s2.size())\\n            res |= ans(s1, s2, s3, idx1, idx2 + 1, idx3 + 1);\\n        return dp[idx1][idx2] = res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1246982,
                "title": "interleaving-string-simple-bottom-up-dp-python",
                "content": "Before solving this question I would advice you to solve the longest common subsequence problem and then maybe try this one again. You\\'ll be able to understand the logic better.\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m = len(s1)\\n        n = len(s2)\\n        lenS3 = len(s3)\\n        \\n        if m == 0:\\n            return s2 == s3\\n        elif n == 0:\\n            return s1 == s3\\n        elif lenS3 == 0:\\n            return m + n == 0\\n        elif m + n != lenS3:\\n            return False\\n        \\n        t = [[False] * (n + 1) for i in range(m + 1)]\\n        t[0][0] = True\\n        \\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                # Base conditions\\n                if s1[i-1] == s3[i-1]:\\n                    t[i][0] = t[i-1][0]\\n                \\n                if s2[j-1] == s3[j-1]:\\n                    t[0][j] = t[0][j-1]\\n                \\n                # Main logic - We\\'re taking i + j - 1 in s3 because of 0-index\\n                if s1[i-1] == s3[i+j-1]:\\n                    t[i][j] = t[i-1][j]\\n                \\n                # We do an OR to cover the case that both s1 and s2 match.\\n                # This way we reduce an extra loop.\\n                if s2[j-1] == s3[i+j-1]:\\n                    t[i][j] = t[i][j] or t[i][j-1]\\n        \\n        return t[m][n]\\n```\\n\\nIf you like my approach please consider upvoting. Also, if you have any doubts feel free to ask. \\nThank you.",
                "solutionTags": [
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        m = len(s1)\\n        n = len(s2)\\n        lenS3 = len(s3)\\n        \\n        if m == 0:\\n            return s2 == s3\\n        elif n == 0:\\n            return s1 == s3\\n        elif lenS3 == 0:\\n            return m + n == 0\\n        elif m + n != lenS3:\\n            return False\\n        \\n        t = [[False] * (n + 1) for i in range(m + 1)]\\n        t[0][0] = True\\n        \\n        for i in range(1, m + 1):\\n            for j in range(1, n + 1):\\n                # Base conditions\\n                if s1[i-1] == s3[i-1]:\\n                    t[i][0] = t[i-1][0]\\n                \\n                if s2[j-1] == s3[j-1]:\\n                    t[0][j] = t[0][j-1]\\n                \\n                # Main logic - We\\'re taking i + j - 1 in s3 because of 0-index\\n                if s1[i-1] == s3[i+j-1]:\\n                    t[i][j] = t[i-1][j]\\n                \\n                # We do an OR to cover the case that both s1 and s2 match.\\n                # This way we reduce an extra loop.\\n                if s2[j-1] == s3[i+j-1]:\\n                    t[i][j] = t[i][j] or t[i][j-1]\\n        \\n        return t[m][n]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1246814,
                "title": "interleaving-string-rust-dynamic-programming",
                "content": "**Intuition**\\n\\n- We have to use letters in the input order, hence it makes sense to consider prefixes.\\n- Let `dp[i1][i2]` denote the length of the longest prefix of `s3` that we can obtain by interleaving `s1[..i1]` and `s2[..i2]`.\\n- When looking at `dp[i1][i2]` we update `dp[i1 + 1][i2]` if `s1[i1] == s3[i1 + i2]` and  `dp[i1][i2 + 1]` if `s2[i2] == s3[i1 + i2]`.\\n\\n**Complexity**\\n\\n- Time is O(nm).\\n- Space is O(nm).\\n\\n**Implementation**\\n\\n```rust\\nimpl Solution {\\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\\n        let (l1, l2, l3) = (s1.len(), s2.len(), s3.len());\\n        if l1 + l2 != l3 {\\n            return false;\\n        }\\n\\n        let (s1, s2, s3) = (s1.as_bytes(), s2.as_bytes(), s3.as_bytes());\\n        let mut dp: Vec<Vec<usize>> = vec![vec![0; l2 + 1]; l1 + 1];\\n\\n        for i1 in 0..=l1 {\\n            for i2 in 0..=l2 {\\n                let i3 = i1 + i2;\\n                if i1 < l1 && s1[i1] == s3[i3] {\\n                    dp[i1 + 1][i2] = std::cmp::max(dp[i1 + 1][i2], dp[i1][i2] + 1);\\n                }\\n                if i2 < l2 && s2[i2] == s3[i3] {\\n                    dp[i1][i2 + 1] = std::cmp::max(dp[i1][i2 + 1], dp[i1][i2] + 1);\\n                }\\n            }\\n        }\\n        \\n        dp[l1][l2] == l3\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Dynamic Programming"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\\n        let (l1, l2, l3) = (s1.len(), s2.len(), s3.len());\\n        if l1 + l2 != l3 {\\n            return false;\\n        }\\n\\n        let (s1, s2, s3) = (s1.as_bytes(), s2.as_bytes(), s3.as_bytes());\\n        let mut dp: Vec<Vec<usize>> = vec![vec![0; l2 + 1]; l1 + 1];\\n\\n        for i1 in 0..=l1 {\\n            for i2 in 0..=l2 {\\n                let i3 = i1 + i2;\\n                if i1 < l1 && s1[i1] == s3[i3] {\\n                    dp[i1 + 1][i2] = std::cmp::max(dp[i1 + 1][i2], dp[i1][i2] + 1);\\n                }\\n                if i2 < l2 && s2[i2] == s3[i3] {\\n                    dp[i1][i2 + 1] = std::cmp::max(dp[i1][i2 + 1], dp[i1][i2] + 1);\\n                }\\n            }\\n        }\\n        \\n        dp[l1][l2] == l3\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1246757,
                "title": "explanation-brute-memorization-dp-o-l-m-time-space-dp-o-l-m-time-and-o-m-space",
                "content": "# Brute Force + Memo\\nEx.\\n\\n    s1 = abc  \\n    s2 = abcd\\n\\n    s3 = aabbccd\\n\\n  **Intution:**\\n    For making s3[k] what we have,\\n    suppose we have used s1[0...i) and s2[0...j) for making s3[0...k)\\n    So we have three condition for making s3[k]\\n    1.  s1[i] == s2[j] == s3[k], so we have 2 option\\n        i. whether we use s1[i] to make s3[k], \\n        ii. or we can use s2[j] to make s3[k]\\n    2. if none of s1[i] and s2[j] is able to make s3[k]\\n        i. We can\\'t make s3 for now.\\n    3. If s1[i] is able to make s3[k] then use s1[i] else use s2[j]\\n    \\n    vector<vector<int>> dp;\\n    bool solve(string& s1, string& s2, string& s3, int i, int j, int k) {\\n        if (k == s3.size()) {\\n            return i == s1.size() && j == s2.size();\\n        }\\n\\n        if (dp[i][j] != -1) {\\n            return dp[i][j];\\n        }\\n\\n        if (i >= s1.size()) {\\n            if (s2[j] != s3[k]) {\\n                return dp[i][j] = false;\\n            } else {\\n                return dp[i][j] = solve(s1, s2, s3, i, j + 1, k + 1);\\n            }\\n        } else if (j >= s2.size()) {\\n            if (s1[i] != s3[k]) {\\n                return dp[i][j] = false;\\n            } else {\\n                return dp[i][j] = solve(s1, s2, s3, i + 1, j, k + 1);\\n            }\\n        } else {\\n            if (s1[i] != s3[k] && s2[j] != s3[k]) {\\n                return dp[i][j] = false;\\n            }\\n        }\\n\\n        bool ans = false;\\n        if (s1[i] == s2[j]) {\\n            ans |= solve(s1, s2, s3, i + 1, j, k + 1);\\n            ans |= solve(s1, s2, s3, i, j + 1, k + 1);\\n        } else {\\n            if (s1[i] == s3[k]) {\\n                ans |= solve(s1, s2, s3, i + 1, j, k + 1);\\n            } else {\\n                ans |= solve(s1, s2, s3, i, j + 1, k + 1);\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n\\t\\n**Time Complexity :**\\n O(2^(L+M)), without memorization  but using memorization O(L*M)\\n **Space Complexity:**\\n O(L*M) Size of dp\\n# \\tIterative Dp\\n    If we look carefully recursive solution then how dp is filling.\\n    dp[i][j] is filled by \\n    1. solve(i+1,j,k+1) || solve(i,j+1,k+1) // When both s1[i] and s2[i] is able to make s3[k]\\n    2. solve(i+1,j,k+1) // When only s1[i] only able to make s3[k]\\n    3. solve(i,j+1, k + 1) // When only s2[j] only able to make s3[k]\\n\\n    So we can fill dp iterative also\\n\\t\\n\\t\\n\\tbool solve(string s1, string s2, string s3) {\\n        int l = s1.size(), m = s2.size(), n = s3.size();\\n        if (l + m != n) return false;\\n\\n        vector<vector<bool>> dp(l + 1, vector<bool>(m + 1));\\n\\n        for (int i = 0; i <= l; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[i][j] = true;\\n                } else if (i == 0) {\\n                    dp[i][j] = (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                } else if (j == 0) {\\n                    dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]);\\n                } else {\\n                    dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) || (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                }\\n            }\\n        }\\n        return dp[l][m];\\n    }\\n\\t\\n# \\tO(M) space dp\\nNow if we look the dependency of dp[i][j] then\\n    dp[i][j] -> dp[i-1][j], dp[i][j-1] only, so we can skip all the remove which are less than i-1 because we don\\'t need them\\n\\t```\\n\\t    bool solve(string s1, string s2, string s3) {\\n        int l = s1.size(), m = s2.size(), n = s3.size(), flag = 1;\\n        vector<vector<bool>> dp(2, vector<bool>(m + 1));\\n\\n        for (int i = 0; i <= l; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[flag][j] = true;\\n                } else if (i == 0) {\\n                    dp[flag][j] = (dp[flag ^ 1][j] && (s2[j - 1] == s3[i + j - 1]));\\n                } else if (j == 0) {\\n                    dp[flag][j] = (dp[flag ^ 1])[j] && (s1[i - 1] == s3[i + j - 1]);\\n                } else {\\n                    dp[flag][j] = ((dp[flag ^ 1][j] && s1[i - 1] == s3[i + j - 1]) || (dp[flag][j - 1] && (s2[j - 1] == s3[i + j - 1])));\\n                }\\n            }\\n            flag ^= 1;\\n        }\\n        return dp[flag ^ 1][m];\\n    }\\n\\t\\n\\nHappy Coding !!!",
                "solutionTags": [],
                "code": "# Brute Force + Memo\\nEx.\\n\\n    s1 = abc  \\n    s2 = abcd\\n\\n    s3 = aabbccd\\n\\n  **Intution:**\\n    For making s3[k] what we have,\\n    suppose we have used s1[0...i) and s2[0...j) for making s3[0...k)\\n    So we have three condition for making s3[k]\\n    1.  s1[i] == s2[j] == s3[k], so we have 2 option\\n        i. whether we use s1[i] to make s3[k], \\n        ii. or we can use s2[j] to make s3[k]\\n    2. if none of s1[i] and s2[j] is able to make s3[k]\\n        i. We can\\'t make s3 for now.\\n    3. If s1[i] is able to make s3[k] then use s1[i] else use s2[j]\\n    \\n    vector<vector<int>> dp;\\n    bool solve(string& s1, string& s2, string& s3, int i, int j, int k) {\\n        if (k == s3.size()) {\\n            return i == s1.size() && j == s2.size();\\n        }\\n\\n        if (dp[i][j] != -1) {\\n            return dp[i][j];\\n        }\\n\\n        if (i >= s1.size()) {\\n            if (s2[j] != s3[k]) {\\n                return dp[i][j] = false;\\n            } else {\\n                return dp[i][j] = solve(s1, s2, s3, i, j + 1, k + 1);\\n            }\\n        } else if (j >= s2.size()) {\\n            if (s1[i] != s3[k]) {\\n                return dp[i][j] = false;\\n            } else {\\n                return dp[i][j] = solve(s1, s2, s3, i + 1, j, k + 1);\\n            }\\n        } else {\\n            if (s1[i] != s3[k] && s2[j] != s3[k]) {\\n                return dp[i][j] = false;\\n            }\\n        }\\n\\n        bool ans = false;\\n        if (s1[i] == s2[j]) {\\n            ans |= solve(s1, s2, s3, i + 1, j, k + 1);\\n            ans |= solve(s1, s2, s3, i, j + 1, k + 1);\\n        } else {\\n            if (s1[i] == s3[k]) {\\n                ans |= solve(s1, s2, s3, i + 1, j, k + 1);\\n            } else {\\n                ans |= solve(s1, s2, s3, i, j + 1, k + 1);\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n\\t\\n**Time Complexity :**\\n O(2^(L+M)), without memorization  but using memorization O(L*M)\\n **Space Complexity:**\\n O(L*M) Size of dp\\n# \\tIterative Dp\\n    If we look carefully recursive solution then how dp is filling.\\n    dp[i][j] is filled by \\n    1. solve(i+1,j,k+1) || solve(i,j+1,k+1) // When both s1[i] and s2[i] is able to make s3[k]\\n    2. solve(i+1,j,k+1) // When only s1[i] only able to make s3[k]\\n    3. solve(i,j+1, k + 1) // When only s2[j] only able to make s3[k]\\n\\n    So we can fill dp iterative also\\n\\t\\n\\t\\n\\tbool solve(string s1, string s2, string s3) {\\n        int l = s1.size(), m = s2.size(), n = s3.size();\\n        if (l + m != n) return false;\\n\\n        vector<vector<bool>> dp(l + 1, vector<bool>(m + 1));\\n\\n        for (int i = 0; i <= l; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[i][j] = true;\\n                } else if (i == 0) {\\n                    dp[i][j] = (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                } else if (j == 0) {\\n                    dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]);\\n                } else {\\n                    dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) || (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\\n                }\\n            }\\n        }\\n        return dp[l][m];\\n    }\\n\\t\\n# \\tO(M) space dp\\nNow if we look the dependency of dp[i][j] then\\n    dp[i][j] -> dp[i-1][j], dp[i][j-1] only, so we can skip all the remove which are less than i-1 because we don\\'t need them\\n\\t```\\n\\t    bool solve(string s1, string s2, string s3) {\\n        int l = s1.size(), m = s2.size(), n = s3.size(), flag = 1;\\n        vector<vector<bool>> dp(2, vector<bool>(m + 1));\\n\\n        for (int i = 0; i <= l; i++) {\\n            for (int j = 0; j <= m; j++) {\\n                if (i == 0 && j == 0) {\\n                    dp[flag][j] = true;\\n                } else if (i == 0) {\\n                    dp[flag][j] = (dp[flag ^ 1][j] && (s2[j - 1] == s3[i + j - 1]));\\n                } else if (j == 0) {\\n                    dp[flag][j] = (dp[flag ^ 1])[j] && (s1[i - 1] == s3[i + j - 1]);\\n                } else {\\n                    dp[flag][j] = ((dp[flag ^ 1][j] && s1[i - 1] == s3[i + j - 1]) || (dp[flag][j - 1] && (s2[j - 1] == s3[i + j - 1])));\\n                }\\n            }\\n            flag ^= 1;\\n        }\\n        return dp[flag ^ 1][m];\\n    }\\n\\t\\n\\nHappy Coding !!!",
                "codeTag": "Unknown"
            },
            {
                "id": 1079837,
                "title": "c-0ms-100-recursion-memorization-with-comments",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Interleaving String.\\nMemory Usage: 7.3 MB, less than 37.03% of C++ online submissions for Interleaving String.\\n```\\nclass Solution {\\npublic:\\n  int n1,n2,n3;\\n  set<pair<int,int>> st;                              //for memorization\\n  \\n  bool helper(string &s1, string &s2, string &s3, int i1, int i2, int i3){    \\n    if(st.count({i1,i2})) return false;                                       //if we already attend this variant \\n    \\n    while(n1 != i1 || n2 != i2){\\n      \\n      if(n1 != i1 && n2 != i2 && s1[i1] == s2[i2] && s1[i1] == s3[i3]){       //if we have to use letters from two words\\n        st.insert({i1,i2});                                                   //check it situation\\n        return helper(s1, s2, s3, i1 + 1, i2 , i3 + 1) ||                     //and consider two possibilities\\n          helper(s1, s2, s3, i1 , i2 + 1 , i3 + 1);\\n      }\\n      if(n1 != i1 && s1[i1] == s3[i3]){i1++;i3++;continue;}                   //if use letter only from one word\\n      if(n2 != i2 && s2[i2] == s3[i3]){i2++;i3++;continue;}\\n      return false;\\n    }\\n    \\n    return true;                                                              //FINISH !!!!!!\\n  }\\n  \\n  \\n  bool isInterleave(string s1, string s2, string s3) {\\n    n1 = s1.size(), n2 = s2.size(), n3 = s3.size();\\n    if(n1 + n2 != n3) return false;\\n   \\n    return helper(s1,s2,s3,0,0,0);\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int n1,n2,n3;\\n  set<pair<int,int>> st;                              //for memorization\\n  \\n  bool helper(string &s1, string &s2, string &s3, int i1, int i2, int i3){    \\n    if(st.count({i1,i2})) return false;                                       //if we already attend this variant \\n    \\n    while(n1 != i1 || n2 != i2){\\n      \\n      if(n1 != i1 && n2 != i2 && s1[i1] == s2[i2] && s1[i1] == s3[i3]){       //if we have to use letters from two words\\n        st.insert({i1,i2});                                                   //check it situation\\n        return helper(s1, s2, s3, i1 + 1, i2 , i3 + 1) ||                     //and consider two possibilities\\n          helper(s1, s2, s3, i1 , i2 + 1 , i3 + 1);\\n      }\\n      if(n1 != i1 && s1[i1] == s3[i3]){i1++;i3++;continue;}                   //if use letter only from one word\\n      if(n2 != i2 && s2[i2] == s3[i3]){i2++;i3++;continue;}\\n      return false;\\n    }\\n    \\n    return true;                                                              //FINISH !!!!!!\\n  }\\n  \\n  \\n  bool isInterleave(string s1, string s2, string s3) {\\n    n1 = s1.size(), n2 = s2.size(), n3 = s3.size();\\n    if(n1 + n2 != n3) return false;\\n   \\n    return helper(s1,s2,s3,0,0,0);\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 933323,
                "title": "dfs-dp-progression-with-explanation-o-s1-s2-o-s1-s2",
                "content": "In this problem, we are tasked to see if `s3` can be broken down into `s1` and `s2` where `s1` and `s2` have to be used from front to back.  Therefore to find the solution, let\\'s look at all possible combinations of breaking down `s3` given `s1` and `s2`.  DFS is a great tool for this as it allows us to express an instance of a function as the current state, and the recursive calls as actions to future states.  To start out, the best approach is to draw a DFS tree.\\n![image](https://assets.leetcode.com/users/images/8a501cca-f3a5-43f5-b047-b9f57af55712_1605200826.533606.png)\\nAt each step, we check if the first character of `s1` and/or `s2` match the first character of `s3` and recurse downwards if there is a match.  This translates well to code, and looks like\\n```\\ndef dfs(s1, s2, s3):\\n\\tif not s1:\\n\\t\\treturn s2 == s3\\n\\tif not s2:\\n\\t\\treturn s1 == s3\\n\\tif not s3:\\n\\t\\treturn True\\n\\n\\tleft = right = False\\n\\tif s1[0] == s3[0]:\\n\\t\\tleft = dfs(s1[1:], s2, s3[1:])\\n\\tif s2[0] == s3[0]:\\n\\t\\tright = dfs(s1, s2[1:], s3[1:])\\n\\treturn left or right\\nreturn dfs(s1, s2, s3)\\n```\\nIt may not exactly help us solve this problem, but notice that the solution can also be seen as finding a root -> leaf path of length `s3`.  It seems this is a very common pattern in DFS, and it makes sense why.  The tree recurses down until it hits a base case, which indicates success or failure, depending on the base case.  This DFS approach will solve the problem, but takes far too long and times out on larger inputs.  Why is that?\\nNotice in the DFS tree, after two steps, both branches have the state `s1 = b, s2 = c, s3 = bc`.  From this point onwards, the rest of the calculation will return the same answer.  However our implementation of DFS is unaware of this and will waste time calculating the answer separately for both branches.  This becomes exponentially worse as the input sizes grow and the DFS tree becomes larger.  This is where the DP solution comes in.\\n\\nThe DFS approach solves the problem from the top down, meaning it must recurse all the way to a base case before there is any idea of a solution.  Instead, let\\'s build the solution from the ground up, saving the answer to subproblems as we solve them.  Therefore instead of spending time recalculating them, we can simply reference them when needed.\\n```\\ndef dp(s1, s2, s3):\\n\\tA = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\\n\\t# Base cases\\n\\tA[0][0] = True\\n\\tfor i in range(1, len(s1) + 1):\\n\\t\\tA[i][0] = A[i - 1][0] and s1[i - 1] == s3[i - 1]\\n\\tfor j in range(1, len(s2) + 1):\\n\\t\\tA[0][j] = A[0][j - 1] and s2[j - 1] == s3[j - 1]\\n\\n\\tfor i in range(1, len(s1) + 1):\\n\\t\\tfor j in range(1, len(s2) + 1):                    \\n\\t\\t\\tif s1[i - 1] == s3[i - 1 + j]:\\n\\t\\t\\t\\tA[i][j] = A[i - 1][j]\\n\\t\\t\\tif s2[j - 1] == s3[i - 1 + j]:\\n\\t\\t\\t\\tA[i][j] = A[i][j] or A[i][j - 1]\\n\\treturn A[-1][-1]\\nreturn dp(s1, s2, s3)\\n```\\nNotice that the recursion relation and base cases we are using are essentially the same as we found in the DFS approach.  We check if the first character of `s1` and/or `s2` match the first character of `s3`, and simply reference the smaller subproblem that was already solved.  This technique is like building the DFS tree from bottom up, and gives us our solution.",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming",
                    "Depth-First Search"
                ],
                "code": "```\\ndef dfs(s1, s2, s3):\\n\\tif not s1:\\n\\t\\treturn s2 == s3\\n\\tif not s2:\\n\\t\\treturn s1 == s3\\n\\tif not s3:\\n\\t\\treturn True\\n\\n\\tleft = right = False\\n\\tif s1[0] == s3[0]:\\n\\t\\tleft = dfs(s1[1:], s2, s3[1:])\\n\\tif s2[0] == s3[0]:\\n\\t\\tright = dfs(s1, s2[1:], s3[1:])\\n\\treturn left or right\\nreturn dfs(s1, s2, s3)\\n```\n```\\ndef dp(s1, s2, s3):\\n\\tA = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\\n\\t# Base cases\\n\\tA[0][0] = True\\n\\tfor i in range(1, len(s1) + 1):\\n\\t\\tA[i][0] = A[i - 1][0] and s1[i - 1] == s3[i - 1]\\n\\tfor j in range(1, len(s2) + 1):\\n\\t\\tA[0][j] = A[0][j - 1] and s2[j - 1] == s3[j - 1]\\n\\n\\tfor i in range(1, len(s1) + 1):\\n\\t\\tfor j in range(1, len(s2) + 1):                    \\n\\t\\t\\tif s1[i - 1] == s3[i - 1 + j]:\\n\\t\\t\\t\\tA[i][j] = A[i - 1][j]\\n\\t\\t\\tif s2[j - 1] == s3[i - 1 + j]:\\n\\t\\t\\t\\tA[i][j] = A[i][j] or A[i][j - 1]\\n\\treturn A[-1][-1]\\nreturn dp(s1, s2, s3)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 921322,
                "title": "java-0-ms-recursion-with-memoization-two-solutions-with-comments",
                "content": "Without memoization\\n```\\nclass Solution {\\n   public boolean isInterleave(String s1, String s2, String s3) {\\n        return isInterleave(s1, s2, s3, 0, 0, 0);\\n    }\\n\\n    public boolean isInterleave(String s1, String s2, String s3, int idx1, int idx2, int idx3) {\\n\\n\\t\\t//if we have reached the end of all the strings - found the answer\\n        if (idx3 == s3.length() && idx1 == s1.length() && idx2 == s2.length()) return true;\\n\\n\\t\\t//compare the character of s3 with s1\\n\\t\\t//if same - recursively check for other characters with s3 index+1   and    s1 index+1\\n\\t\\t//if not same compare the same character of s3 with s2\\n        if (idx1 < s1.length()  && idx3 < s3.length()  && s3.charAt(idx3) == s1.charAt(idx1)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1 + 1, idx2, idx3 + 1);\\n            if (result) return true;\\n        }\\n\\n\\t\\t//compare the character of s3 with s2\\n\\t\\t//if same - recursively check for other characters with s3 index+1   and    s2 index+1\\n\\t\\t//if not same return false\\n        if (idx2 < s2.length() && idx3 < s3.length()  && s3.charAt(idx3) == s2.charAt(idx2)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1, idx2 + 1, idx3 + 1);\\n            if (result) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```\\n\\n----------------------------------------------------------\\n\\nDoing the same logic as above but saving the computed results to an array\\n\\n**With memoization**\\n```\\nclass Solution {\\n   public boolean isInterleave(String s1, String s2, String s3) {\\n       Boolean[][] dp = new Boolean[s1.length()+1][s2.length()+1];\\n        return isInterleave(s1, s2, s3, 0, 0, 0, dp);\\n    }\\n\\n    public boolean isInterleave(String s1, String s2, String s3, int idx1, int idx2, int idx3, Boolean[][] dp) {\\n\\n        if(dp[idx1][idx2] != null) return dp[idx1][idx2];\\n        \\n        if (idx3 == s3.length() && idx1 == s1.length() && idx2 == s2.length()) return true;\\n\\n        if (idx1 < s1.length()  && idx3 < s3.length()  && s3.charAt(idx3) == s1.charAt(idx1)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1 + 1, idx2, idx3 + 1, dp);\\n            dp[idx1][idx2] = result;\\n            if (result) return dp[idx1][idx2];\\n        }\\n\\n        if (idx2 < s2.length() && idx3 < s3.length()  && s3.charAt(idx3) == s2.charAt(idx2)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1, idx2 + 1, idx3 + 1, dp);\\n            dp[idx1][idx2] = result;\\n            if (result) return dp[idx1][idx2];\\n        }\\n        \\n        dp[idx1][idx2] = false;\\n\\n        return dp[idx1][idx2];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n   public boolean isInterleave(String s1, String s2, String s3) {\\n        return isInterleave(s1, s2, s3, 0, 0, 0);\\n    }\\n\\n    public boolean isInterleave(String s1, String s2, String s3, int idx1, int idx2, int idx3) {\\n\\n\\t\\t//if we have reached the end of all the strings - found the answer\\n        if (idx3 == s3.length() && idx1 == s1.length() && idx2 == s2.length()) return true;\\n\\n\\t\\t//compare the character of s3 with s1\\n\\t\\t//if same - recursively check for other characters with s3 index+1   and    s1 index+1\\n\\t\\t//if not same compare the same character of s3 with s2\\n        if (idx1 < s1.length()  && idx3 < s3.length()  && s3.charAt(idx3) == s1.charAt(idx1)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1 + 1, idx2, idx3 + 1);\\n            if (result) return true;\\n        }\\n\\n\\t\\t//compare the character of s3 with s2\\n\\t\\t//if same - recursively check for other characters with s3 index+1   and    s2 index+1\\n\\t\\t//if not same return false\\n        if (idx2 < s2.length() && idx3 < s3.length()  && s3.charAt(idx3) == s2.charAt(idx2)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1, idx2 + 1, idx3 + 1);\\n            if (result) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n```\n```\\nclass Solution {\\n   public boolean isInterleave(String s1, String s2, String s3) {\\n       Boolean[][] dp = new Boolean[s1.length()+1][s2.length()+1];\\n        return isInterleave(s1, s2, s3, 0, 0, 0, dp);\\n    }\\n\\n    public boolean isInterleave(String s1, String s2, String s3, int idx1, int idx2, int idx3, Boolean[][] dp) {\\n\\n        if(dp[idx1][idx2] != null) return dp[idx1][idx2];\\n        \\n        if (idx3 == s3.length() && idx1 == s1.length() && idx2 == s2.length()) return true;\\n\\n        if (idx1 < s1.length()  && idx3 < s3.length()  && s3.charAt(idx3) == s1.charAt(idx1)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1 + 1, idx2, idx3 + 1, dp);\\n            dp[idx1][idx2] = result;\\n            if (result) return dp[idx1][idx2];\\n        }\\n\\n        if (idx2 < s2.length() && idx3 < s3.length()  && s3.charAt(idx3) == s2.charAt(idx2)) {\\n            boolean result = isInterleave(s1, s2, s3, idx1, idx2 + 1, idx3 + 1, dp);\\n            dp[idx1][idx2] = result;\\n            if (result) return dp[idx1][idx2];\\n        }\\n        \\n        dp[idx1][idx2] = false;\\n\\n        return dp[idx1][idx2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 815959,
                "title": "java-simple-dp-memo",
                "content": "```\\nclass Solution {\\n    HashMap<String, Boolean> map;\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        map = new HashMap();\\n        return find(s1, s2, s3, s1.length()-1, s2.length()-1, s3.length()-1);\\n    }\\n    \\n    boolean find(String a, String b, String c, int i, int j, int k){\\n        \\n        \\n        if( i == -1 && j == -1 && k == -1)  return true;\\n        String key = i+\"-\"+j+\"-\"+k;\\n        \\n        if( map.containsKey(key))   return map.get(key);\\n         \\n        if( i >= 0 && j >= 0 && k >= 0 && a.charAt(i) == b.charAt(j) && b.charAt(j) == c.charAt(k) ){\\n            boolean temp = find(a, b, c, i-1, j, k-1) || find(a, b, c, i, j-1, k-1);\\n            map.put(key, temp);\\n            return temp;\\n            \\n        }\\n        \\n        \\n        if( i >= 0 && k >= 0 && a.charAt(i) == c.charAt(k) ){\\n            boolean temp = find(a, b, c, i-1, j, k-1);\\n            map.put(key, temp);\\n            return temp;\\n        }\\n        \\n        if( j >= 0 && k >= 0 && b.charAt(j) == c.charAt(k) ){\\n            boolean temp = find(a, b, c, i, j-1, k-1);\\n            map.put(key, temp);\\n            return temp;\\n        }\\n        \\n        return false;\\n       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Depth-First Search",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    HashMap<String, Boolean> map;\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        map = new HashMap();\\n        return find(s1, s2, s3, s1.length()-1, s2.length()-1, s3.length()-1);\\n    }\\n    \\n    boolean find(String a, String b, String c, int i, int j, int k){\\n        \\n        \\n        if( i == -1 && j == -1 && k == -1)  return true;\\n        String key = i+\"-\"+j+\"-\"+k;\\n        \\n        if( map.containsKey(key))   return map.get(key);\\n         \\n        if( i >= 0 && j >= 0 && k >= 0 && a.charAt(i) == b.charAt(j) && b.charAt(j) == c.charAt(k) ){\\n            boolean temp = find(a, b, c, i-1, j, k-1) || find(a, b, c, i, j-1, k-1);\\n            map.put(key, temp);\\n            return temp;\\n            \\n        }\\n        \\n        \\n        if( i >= 0 && k >= 0 && a.charAt(i) == c.charAt(k) ){\\n            boolean temp = find(a, b, c, i-1, j, k-1);\\n            map.put(key, temp);\\n            return temp;\\n        }\\n        \\n        if( j >= 0 && k >= 0 && b.charAt(j) == c.charAt(k) ){\\n            boolean temp = find(a, b, c, i, j-1, k-1);\\n            map.put(key, temp);\\n            return temp;\\n        }\\n        \\n        return false;\\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 705691,
                "title": "python",
                "content": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        memo = {}\\n        return self.helper(s1, s2, s3, 0, 0, 0, \\'\\', {})\\n        \\n    \\n    def helper(self, s1, s2, s3, index1, index2, index3, current, memo):\\n        if current == s3 and index1 == len(s1) and index2 == len(s2):\\n            return True\\n        if current and current[-1] != s3[index3 - 1]:\\n            return False\\n        ans = False\\n        if (index1, index2) in memo:\\n            return memo[(index1, index2)]\\n        if index1 < len(s1):\\n            ans = ans or self.helper(s1, s2, s3, index1 + 1, index2, index3 + 1, current + s1[index1], memo)\\n        if index2 < len(s2):\\n            ans = ans or self.helper(s1, s2, s3, index1, index2 + 1, index3 + 1, current + s2[index2], memo)\\n        \\n        memo[(index1, index2)] = ans\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n        memo = {}\\n        return self.helper(s1, s2, s3, 0, 0, 0, \\'\\', {})\\n        \\n    \\n    def helper(self, s1, s2, s3, index1, index2, index3, current, memo):\\n        if current == s3 and index1 == len(s1) and index2 == len(s2):\\n            return True\\n        if current and current[-1] != s3[index3 - 1]:\\n            return False\\n        ans = False\\n        if (index1, index2) in memo:\\n            return memo[(index1, index2)]\\n        if index1 < len(s1):\\n            ans = ans or self.helper(s1, s2, s3, index1 + 1, index2, index3 + 1, current + s1[index1], memo)\\n        if index2 < len(s2):\\n            ans = ans or self.helper(s1, s2, s3, index1, index2 + 1, index3 + 1, current + s2[index2], memo)\\n        \\n        memo[(index1, index2)] = ans\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 687639,
                "title": "python3-top-down-dp",
                "content": "\\n\\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False \\n        \\n        @cache\\n        def fn(i, j): \\n            \"\"\"Return True if s3[i+j:] is formed by interleaving s1[i:] and s2[j:]\"\"\"\\n            if i == len(s1) and j == len(s2): return True\\n            ans = False\\n            if i < len(s1) and s1[i] == s3[i+j]: ans = ans or fn(i+1, j)\\n            if j < len(s2) and s2[j] == s3[i+j]: ans = ans or fn(i, j+1)\\n            return ans \\n        \\n        return fn(0, 0)\\n```\\n\\nEdited on 6/2/2021\\nAdding bottom-up implementation \\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False \\n        \\n        dp = [False]*len(s2) + [True]\\n        for i in reversed(range(len(s1)+1)): \\n            for j in reversed(range(len(s2)+1)): \\n                if i < len(s1): dp[j] = (dp[j] and s1[i] == s3[i+j])\\n                if j < len(s2): dp[j] = dp[j] or (dp[j+1] and s2[j] == s3[i+j])\\n        return dp[0]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False \\n        \\n        @cache\\n        def fn(i, j): \\n            \"\"\"Return True if s3[i+j:] is formed by interleaving s1[i:] and s2[j:]\"\"\"\\n            if i == len(s1) and j == len(s2): return True\\n            ans = False\\n            if i < len(s1) and s1[i] == s3[i+j]: ans = ans or fn(i+1, j)\\n            if j < len(s2) and s2[j] == s3[i+j]: ans = ans or fn(i, j+1)\\n            return ans \\n        \\n        return fn(0, 0)\\n```\n```\\nclass Solution:\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        if len(s1) + len(s2) != len(s3): return False \\n        \\n        dp = [False]*len(s2) + [True]\\n        for i in reversed(range(len(s1)+1)): \\n            for j in reversed(range(len(s2)+1)): \\n                if i < len(s1): dp[j] = (dp[j] and s1[i] == s3[i+j])\\n                if j < len(s2): dp[j] = dp[j] or (dp[j+1] and s2[j] == s3[i+j])\\n        return dp[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 526481,
                "title": "c-0ms-top-down-and-bottom-up-dp-solutions-detailed-explanation",
                "content": "```\\n/*\\n    https://leetcode.com/problems/interleaving-string/submissions/\\n    \\n    Solutions:\\n    1. Top-down, TC: O(MN)\\n    2. Bottom-up, TC: O(MN)\\n*/\\n\\nclass Solution {\\npublic:\\n    // Checks if interleaves using top-down DP\\n    /*\\n        If the string interleaves, then that means the entire s1 and s2 will be used \\n        for making s3. So len(s1) + len(s2) = len(s3).\\n        So till any pos. k in s3, we would have used i of s1 and j of s2.\\n        So we track if string till (i + j) interleaves with s3[i+j-1]\\n        \\n        TC: O(MN)\\n    */\\n    bool isInterleaveMem(int i, int j, int k, string& s1, string& s2, string& s3,\\n                        vector<vector<int>>& dp) {\\n        // when the total char length is zero\\n        // also check if s1 and s2 has ended as well\\n        if(k == 0)\\n            return (i || j) ? false : true;\\n        \\n        if(dp[i][j] == -1) {\\n            // do dfs with the string whose current char matches s3\\n            dp[i][j] = (i-1) >= 0 && s1[i-1] == s3[k-1] && isInterleaveMem(i-1, j, k-1, s1, s2, s3, dp) ||\\n                        (j-1) >= 0 && s2[j-1] == s3[k-1] && isInterleaveMem(i, j-1, k-1, s1, s2, s3, dp);\\n        }\\n        return dp[i][j];\\n    }\\n    \\n    bool isInterleaveMemDriver(string& s1, string& s2, string& s3) {\\n        int M = s1.size(), N = s2.size(), K = s3.size();\\n        // the strings interleaves only if the sum of string lengths match\\n        if(M + N != K)\\n            return false;\\n        \\n        // dp(i, j): if string till s[i+j-1] interleaves till s1[i] and s2[j]  \\n        vector<vector<int>> dp(M + 1, vector<int>(N + 1, -1));\\n        return isInterleaveMem(M, N, K, s1, s2, s3, dp);\\n    }\\n    \\n    // Checks if interleaves using bottom-up DP\\n    /*\\n        If the string interleaves, then that means the entire s1 and s2 will be used \\n        for making s3. So len(s1) + len(s2) = len(s3).\\n        So till any pos. k in s3, we would have used i of s1 and j of s2.\\n        So we track if string till (i + j) interleaves with s3[i+j-1]\\n        \\n        TC: O(MN)\\n    */\\n    bool isInterleaveTab(string& s1, string& s2, string& s3) {\\n        const int M = s1.size(), N = s2.size();\\n        // the strings interleaves only if the sum of string lengths match\\n        if(M + N != s3.size())\\n            return false;\\n        \\n        // dp(i, j): if string till s[i+j-1] interleaves till s1[i] and s2[j]  \\n        vector<vector<bool>> dp(M + 1, vector<bool>(N + 1, false));\\n        // when s1, s2 and s3 are empty\\n        dp[0][0] = true;\\n        // when s2 is empty\\n        for(int i = 1; i <= M; i++)\\n            dp[i][0] = dp[i-1][0] && s3[i-1] == s1[i-1];\\n        // when s1 is empty\\n        for(int i = 1; i <= N; i++)\\n            dp[0][i] = dp[0][i-1] && s3[i-1] == s2[i-1];\\n    \\n        for(int i = 1; i <= M; i++)\\n            for(int j = 1; j <= N; j++)\\n                // s3 interleaves if till the current length it was interleaving and one of chars from\\n                // s1 or s2 match the current position in s3\\n                dp[i][j] = (s1[i-1] == s3[i+j-1] && dp[i-1][j]) ||\\n                            (s2[j-1] == s3[i+j-1] && dp[i][j-1]);\\n        \\n        return dp[M][N];\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        //return isInterleaveTab(s1, s2, s3);\\n         return isInterleaveMemDriver(s1, s2, s3);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\n/*\\n    https://leetcode.com/problems/interleaving-string/submissions/\\n    \\n    Solutions:\\n    1. Top-down, TC: O(MN)\\n    2. Bottom-up, TC: O(MN)\\n*/\\n\\nclass Solution {\\npublic:\\n    // Checks if interleaves using top-down DP\\n    /*\\n        If the string interleaves, then that means the entire s1 and s2 will be used \\n        for making s3. So len(s1) + len(s2) = len(s3).\\n        So till any pos. k in s3, we would have used i of s1 and j of s2.\\n        So we track if string till (i + j) interleaves with s3[i+j-1]\\n        \\n        TC: O(MN)\\n    */\\n    bool isInterleaveMem(int i, int j, int k, string& s1, string& s2, string& s3,\\n                        vector<vector<int>>& dp) {\\n        // when the total char length is zero\\n        // also check if s1 and s2 has ended as well\\n        if(k == 0)\\n            return (i || j) ? false : true;\\n        \\n        if(dp[i][j] == -1) {\\n            // do dfs with the string whose current char matches s3\\n            dp[i][j] = (i-1) >= 0 && s1[i-1] == s3[k-1] && isInterleaveMem(i-1, j, k-1, s1, s2, s3, dp) ||\\n                        (j-1) >= 0 && s2[j-1] == s3[k-1] && isInterleaveMem(i, j-1, k-1, s1, s2, s3, dp);\\n        }\\n        return dp[i][j];\\n    }\\n    \\n    bool isInterleaveMemDriver(string& s1, string& s2, string& s3) {\\n        int M = s1.size(), N = s2.size(), K = s3.size();\\n        // the strings interleaves only if the sum of string lengths match\\n        if(M + N != K)\\n            return false;\\n        \\n        // dp(i, j): if string till s[i+j-1] interleaves till s1[i] and s2[j]  \\n        vector<vector<int>> dp(M + 1, vector<int>(N + 1, -1));\\n        return isInterleaveMem(M, N, K, s1, s2, s3, dp);\\n    }\\n    \\n    // Checks if interleaves using bottom-up DP\\n    /*\\n        If the string interleaves, then that means the entire s1 and s2 will be used \\n        for making s3. So len(s1) + len(s2) = len(s3).\\n        So till any pos. k in s3, we would have used i of s1 and j of s2.\\n        So we track if string till (i + j) interleaves with s3[i+j-1]\\n        \\n        TC: O(MN)\\n    */\\n    bool isInterleaveTab(string& s1, string& s2, string& s3) {\\n        const int M = s1.size(), N = s2.size();\\n        // the strings interleaves only if the sum of string lengths match\\n        if(M + N != s3.size())\\n            return false;\\n        \\n        // dp(i, j): if string till s[i+j-1] interleaves till s1[i] and s2[j]  \\n        vector<vector<bool>> dp(M + 1, vector<bool>(N + 1, false));\\n        // when s1, s2 and s3 are empty\\n        dp[0][0] = true;\\n        // when s2 is empty\\n        for(int i = 1; i <= M; i++)\\n            dp[i][0] = dp[i-1][0] && s3[i-1] == s1[i-1];\\n        // when s1 is empty\\n        for(int i = 1; i <= N; i++)\\n            dp[0][i] = dp[0][i-1] && s3[i-1] == s2[i-1];\\n    \\n        for(int i = 1; i <= M; i++)\\n            for(int j = 1; j <= N; j++)\\n                // s3 interleaves if till the current length it was interleaving and one of chars from\\n                // s1 or s2 match the current position in s3\\n                dp[i][j] = (s1[i-1] == s3[i+j-1] && dp[i-1][j]) ||\\n                            (s2[j-1] == s3[i+j-1] && dp[i][j-1]);\\n        \\n        return dp[M][N];\\n    }\\n    \\n    bool isInterleave(string s1, string s2, string s3) {\\n        //return isInterleaveTab(s1, s2, s3);\\n         return isInterleaveMemDriver(s1, s2, s3);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 518963,
                "title": "simple-python-dfs",
                "content": "```python\\nfrom functools import lru_cache\\n\\nclass Solution:\\n    @lru_cache()\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:        \\n        if s1 == \\'\\': return s2 == s3\\n        if s2 == \\'\\': return s1 == s3\\n\\n        return ( s3[0] == s1[0] and self.isInterleave(s1[1:], s2, s3[1:]) ) \\\\\\n            or ( s3[0] == s2[0] and self.isInterleave(s1, s2[1:], s3[1:]) )\\n```",
                "solutionTags": [],
                "code": "```python\\nfrom functools import lru_cache\\n\\nclass Solution:\\n    @lru_cache()\\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:        \\n        if s1 == \\'\\': return s2 == s3\\n        if s2 == \\'\\': return s1 == s3\\n\\n        return ( s3[0] == s1[0] and self.isInterleave(s1[1:], s2, s3[1:]) ) \\\\\\n            or ( s3[0] == s2[0] and self.isInterleave(s1, s2[1:], s3[1:]) )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 214113,
                "title": "dp-solution-with-intuition-in-java",
                "content": "```\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        // dp[i][j] = true, means first i characters of s1 and first j characters of s2 interleaved to form i+j characters of s3\\n        // intuition dp[i][j] = true, if(dp[i-1][j] = true and ith char of s1 = (i+j)th char of s3 or dp[i][j-1] = true and jth character of s2 = (i+j)th char of s3\\n        \\n        int m = s1.length();\\n        int n = s2.length();\\n        int t = s3.length();\\n        \\n        if(t==0) return true;\\n        if(m+n != t) return false;\\n        else if(m==0 && n==0 && t!=0) return false;\\n        else if(m==0 && n!=0 )\\n        {\\n            if(s2.equals(s3))\\n                return true;\\n            else\\n                return false;\\n        }\\n        else if(m!=0 && n==0)\\n        {\\n            if(s1.equals(s3))\\n                return true;\\n            else\\n                return false;\\n        }\\n            \\n        \\n        boolean dp[][] = new boolean[m+1][n+1];\\n        dp[0][0] = true;\\n        \\n        //base case 1\\n        for(int i=1;i<=m;i++)\\n        {\\n            if((s1.substring(0,i)).equals(s3.substring(0,i)))\\n                dp[i][0] = true;\\n            else\\n                dp[i][0] = false;\\n        }\\n\\n        //base case 2\\n        for(int j=1;j<=n;j++)\\n        {\\n            if((s2.substring(0,j)).equals(s3.substring(0,j)))\\n                dp[0][j] = true;\\n            else\\n                dp[0][j] = false;\\n        }\\n        \\n        //dp solution\\n        for(int i=1;i<=m;i++)\\n        {\\n            for(int j=1;j<=n;j++)\\n            {\\n                if( (dp[i-1][j]==true && s1.charAt(i-1)==s3.charAt(i+j-1)) || (dp[i][j-1]==true && s2.charAt(j-1)==s3.charAt(i+j-1)) )\\n                    dp[i][j] = true;\\n                 else\\n                    dp[i][j] = false;\\n            }\\n        }\\n        return dp[m][n]; \\n    }\\n\\n",
                "solutionTags": [],
                "code": "```\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        // dp[i][j] = true, means first i characters of s1 and first j characters of s2 interleaved to form i+j characters of s3\\n        // intuition dp[i][j] = true, if(dp[i-1][j] = true and ith char of s1 = (i+j)th char of s3 or dp[i][j-1] = true and jth character of s2 = (i+j)th char of s3\\n        \\n        int m = s1.length();\\n        int n = s2.length();\\n        int t = s3.length();\\n        \\n        if(t==0) return true;\\n        if(m+n != t) return false;\\n        else if(m==0 && n==0 && t!=0) return false;\\n        else if(m==0 && n!=0 )\\n        {\\n            if(s2.equals(s3))\\n                return true;\\n            else\\n                return false;\\n        }\\n        else if(m!=0 && n==0)\\n        {\\n            if(s1.equals(s3))\\n                return true;\\n            else\\n                return false;\\n        }\\n            \\n        \\n        boolean dp[][] = new boolean[m+1][n+1];\\n        dp[0][0] = true;\\n        \\n        //base case 1\\n        for(int i=1;i<=m;i++)\\n        {\\n            if((s1.substring(0,i)).equals(s3.substring(0,i)))\\n                dp[i][0] = true;\\n            else\\n                dp[i][0] = false;\\n        }\\n\\n        //base case 2\\n        for(int j=1;j<=n;j++)\\n        {\\n            if((s2.substring(0,j)).equals(s3.substring(0,j)))\\n                dp[0][j] = true;\\n            else\\n                dp[0][j] = false;\\n        }\\n        \\n        //dp solution\\n        for(int i=1;i<=m;i++)\\n        {\\n            for(int j=1;j<=n;j++)\\n            {\\n                if( (dp[i-1][j]==true && s1.charAt(i-1)==s3.charAt(i+j-1)) || (dp[i][j-1]==true && s2.charAt(j-1)==s3.charAt(i+j-1)) )\\n                    dp[i][j] = true;\\n                 else\\n                    dp[i][j] = false;\\n            }\\n        }\\n        return dp[m][n]; \\n    }\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 31934,
                "title": "java-dp-solution-o-m-n-time-o-n-space",
                "content": "```\\npublic class Solution {\\n    /**\\n     * Dynamic programming\\n     * Dynamic programming has 2 properties: overlapping subproblems and optimal substructure. \\n     * Then for this question, the overlapping subproblem would be matching substring of s1 or s2 with substring of s3. \\n     * Since s3 must match s1 and s2 in a way that the character has the same order, so we can just start comparison from start to end. \\n     * Say, s1.charAt(i) == s3.charAt(i + j); then we only have to deal with the subproblem of s1.substring(i + 1, s1.length()), s2.substring(j, s2.length()) and s3.substring(i + j, s3.length())\\n     * Since we don't have to know exactly how they match but rather only if they have matched for previous characters, a 2-dimensional boolean array would be enough. \\n     * One dimension record the index of s1 and the other record the index of s2.\\n     * matched[i][j] = matched[i][j-1] && current character of s2 and s3 is the same || matched[i-1][j] && current character of s1 and s3 is the same\\n     * Base case would be matched[0][0] = true\\n     * The corner case would be s1.length() + s2.length() != s3.length(), which is obviously false. \\n     * O(m * n) time and space where m and n are length of s1 and s2 respectively\\n     * The space may be further optimized to O(n), see below.\\n     */\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1 == null || s1.length() == 0) {\\n            return s2.equals(s3);\\n        }\\n        if (s2 == null || s2.length() == 0) {\\n            return s1.equals(s3);\\n        }\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        boolean[][] matched = new boolean[s1.length() + 1][s2.length() + 1];\\n        char[] ch1 = s1.toCharArray();\\n        char[] ch2 = s2.toCharArray();\\n        char[] ch3 = s3.toCharArray();\\n        \\n        for (int i = 0; i <= ch1.length; i++) {\\n            for (int j = 0; j <= ch2.length; j++) {\\n                if (i == 0 && j == 0) {\\n                    matched[i][j] = true;\\n                } else if (i == 0) {\\n                    matched[i][j] = matched[i][j-1] && ch2[j - 1] == ch3[i + j - 1];\\n                } else if (j == 0) {\\n                    matched[i][j] = matched[i - 1][j] && ch1[i - 1] == ch3[i + j - 1];\\n                } else {\\n                    matched[i][j] = (matched[i][j - 1] && ch2[j - 1] == ch3[i + j - 1] || matched[i - 1][j] && ch1[i - 1] == ch3[i + j - 1]);\\n                }\\n            }\\n        }\\n        \\n        return matched[ch1.length][ch2.length];\\n    }\\n```\\n\\nSince every matched flag is only related to the flag on the right and above it, we can drop every other flags and only retain a 1-dimension array to store these flags. \\n```\\npublic Solution {\\n    /**\\n     * Further optimized to O(m * n) time and O(n) space where m and n are the length of s1 and s2 respectively\\n     */\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1 == null || s2 == null || s3 == null) {\\n            return false;\\n        }\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        char[] ch1 = s1.toCharArray();\\n        char[] ch2 = s2.toCharArray();\\n        char[] ch3 = s3.toCharArray();\\n        boolean[] matched = new boolean[ch2.length + 1];\\n        for (int i = 0; i <= ch1.length; i++) {\\n            for (int j = 0; j <= ch2.length; j++) {\\n                if (i == 0 && j == 0) {\\n                    matched[j] = true;\\n                } else if (i == 0) {\\n                    matched[j] = matched[j - 1] && ch2[j - 1] == ch3[i + j -1];\\n                } else if (j == 0) {\\n                    matched[j] = matched[j] && ch1[i - 1] == ch3[i + j - 1];\\n                } else {\\n                    matched[j] = matched[j - 1] && ch2[j - 1] == ch3[i + j - 1] || matched[j] && ch1[i - 1] == ch3[i + j - 1];\\n                }\\n            }\\n        }\\n        \\n        return matched[ch2.length];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    /**\\n     * Dynamic programming\\n     * Dynamic programming has 2 properties: overlapping subproblems and optimal substructure. \\n     * Then for this question, the overlapping subproblem would be matching substring of s1 or s2 with substring of s3. \\n     * Since s3 must match s1 and s2 in a way that the character has the same order, so we can just start comparison from start to end. \\n     * Say, s1.charAt(i) == s3.charAt(i + j); then we only have to deal with the subproblem of s1.substring(i + 1, s1.length()), s2.substring(j, s2.length()) and s3.substring(i + j, s3.length())\\n     * Since we don't have to know exactly how they match but rather only if they have matched for previous characters, a 2-dimensional boolean array would be enough. \\n     * One dimension record the index of s1 and the other record the index of s2.\\n     * matched[i][j] = matched[i][j-1] && current character of s2 and s3 is the same || matched[i-1][j] && current character of s1 and s3 is the same\\n     * Base case would be matched[0][0] = true\\n     * The corner case would be s1.length() + s2.length() != s3.length(), which is obviously false. \\n     * O(m * n) time and space where m and n are length of s1 and s2 respectively\\n     * The space may be further optimized to O(n), see below.\\n     */\\n    \\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1 == null || s1.length() == 0) {\\n            return s2.equals(s3);\\n        }\\n        if (s2 == null || s2.length() == 0) {\\n            return s1.equals(s3);\\n        }\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        boolean[][] matched = new boolean[s1.length() + 1][s2.length() + 1];\\n        char[] ch1 = s1.toCharArray();\\n        char[] ch2 = s2.toCharArray();\\n        char[] ch3 = s3.toCharArray();\\n        \\n        for (int i = 0; i <= ch1.length; i++) {\\n            for (int j = 0; j <= ch2.length; j++) {\\n                if (i == 0 && j == 0) {\\n                    matched[i][j] = true;\\n                } else if (i == 0) {\\n                    matched[i][j] = matched[i][j-1] && ch2[j - 1] == ch3[i + j - 1];\\n                } else if (j == 0) {\\n                    matched[i][j] = matched[i - 1][j] && ch1[i - 1] == ch3[i + j - 1];\\n                } else {\\n                    matched[i][j] = (matched[i][j - 1] && ch2[j - 1] == ch3[i + j - 1] || matched[i - 1][j] && ch1[i - 1] == ch3[i + j - 1]);\\n                }\\n            }\\n        }\\n        \\n        return matched[ch1.length][ch2.length];\\n    }\\n```\n```\\npublic Solution {\\n    /**\\n     * Further optimized to O(m * n) time and O(n) space where m and n are the length of s1 and s2 respectively\\n     */\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if (s1 == null || s2 == null || s3 == null) {\\n            return false;\\n        }\\n        if (s1.length() + s2.length() != s3.length()) {\\n            return false;\\n        }\\n        \\n        char[] ch1 = s1.toCharArray();\\n        char[] ch2 = s2.toCharArray();\\n        char[] ch3 = s3.toCharArray();\\n        boolean[] matched = new boolean[ch2.length + 1];\\n        for (int i = 0; i <= ch1.length; i++) {\\n            for (int j = 0; j <= ch2.length; j++) {\\n                if (i == 0 && j == 0) {\\n                    matched[j] = true;\\n                } else if (i == 0) {\\n                    matched[j] = matched[j - 1] && ch2[j - 1] == ch3[i + j -1];\\n                } else if (j == 0) {\\n                    matched[j] = matched[j] && ch1[i - 1] == ch3[i + j - 1];\\n                } else {\\n                    matched[j] = matched[j - 1] && ch2[j - 1] == ch3[i + j - 1] || matched[j] && ch1[i - 1] == ch3[i + j - 1];\\n                }\\n            }\\n        }\\n        \\n        return matched[ch2.length];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31946,
                "title": "clear-code-java-1ms-solution",
                "content": "```\\npublic class Solution {\\n    public boolean isInterleave(String a, String b, String c) {\\n        if (a.length() + b.length() != c.length())\\n            return false;\\n        return isInterleave(0, 0, new boolean[a.length() + 1][b.length() + 1], a, b, c);\\n    }\\n    public boolean isInterleave(int i, int j, boolean[][] f, String a, String b, String c) {\\n        if (f[i][j])\\n            return false;\\n        else\\n            f[i][j] = true;\\n        if (i == a.length() && j == b.length())\\n            return true;\\n        if (i < a.length() && a.charAt(i) == c.charAt(i + j) && isInterleave(i + 1, j, f, a, b, c))\\n            return true;\\n        if (j < b.length() && b.charAt(j) == c.charAt(i + j) && isInterleave(i, j + 1, f, a, b, c))\\n            return true;\\n        return false;\\n    }\\n}\\n```\\nThe idea is very clear so that I don't think any explanation is needed. QAQ",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public boolean isInterleave(String a, String b, String c) {\\n        if (a.length() + b.length() != c.length())\\n            return false;\\n        return isInterleave(0, 0, new boolean[a.length() + 1][b.length() + 1], a, b, c);\\n    }\\n    public boolean isInterleave(int i, int j, boolean[][] f, String a, String b, String c) {\\n        if (f[i][j])\\n            return false;\\n        else\\n            f[i][j] = true;\\n        if (i == a.length() && j == b.length())\\n            return true;\\n        if (i < a.length() && a.charAt(i) == c.charAt(i + j) && isInterleave(i + 1, j, f, a, b, c))\\n            return true;\\n        if (j < b.length() && b.charAt(j) == c.charAt(i + j) && isInterleave(i, j + 1, f, a, b, c))\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 32075,
                "title": "share-accepted-python-solution",
                "content": "    class Solution:\\n        # @return a boolean\\n        def isInterleave(self, s1, s2, s3):\\n            #dp[i][j][k] = True if s3[:k] is interleave of s1[:i] and s2[:j]\\n            #dp[i][j][k] = (dp[i-1][j][k-1] if s1[i] == s3[k]) or (dp[i][j-1][k-1] if s2[j] == s3[k])\\n            #dp[0][0][0] = True\\n            #dp[i][j][k] = False if i+j != k   Since k always = i+j, we can eliminate one dimension\\n            if len(s1)+len(s2) != len(s3): return False\\n            dp = [[False for j in range(len(s2)+1)] for i in range(len(s1)+1)]\\n            for i in range(0, len(s1)+1):\\n                for j in range(0, len(s2)+1): #k is determined\\n                    if i == 0 and j == 0:\\n                        dp[i][j] = True\\n                    elif i == 0:                        #\"aa\", \"ab\", \"abaa\" length of s1 is 0\\n                        dp[i][j] = s2[:j] == s3[:j]\\n                    elif j == 0:                        #length of s2 is 0\\n                        dp[i][j] = s1[:i] == s3[:i]\\n                    else:\\n                        dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])\\n            return dp[-1][-1]",
                "solutionTags": [],
                "code": "    class Solution:\\n        # @return a boolean\\n        def isInterleave(self, s1, s2, s3):\\n            #dp[i][j][k] = True if s3[:k] is interleave of s1[:i] and s2[:j]\\n            #dp[i][j][k] = (dp[i-1][j][k-1] if s1[i] == s3[k]) or (dp[i][j-1][k-1] if s2[j] == s3[k])\\n            #dp[0][0][0] = True\\n            #dp[i][j][k] = False if i+j != k   Since k always = i+j, we can eliminate one dimension\\n            if len(s1)+len(s2) != len(s3): return False\\n            dp = [[False for j in range(len(s2)+1)] for i in range(len(s1)+1)]\\n            for i in range(0, len(s1)+1):\\n                for j in range(0, len(s2)+1): #k is determined\\n                    if i == 0 and j == 0:\\n                        dp[i][j] = True\\n                    elif i == 0:                        #\"aa\", \"ab\", \"abaa\" length of s1 is 0\\n                        dp[i][j] = s2[:j] == s3[:j]\\n                    elif j == 0:                        #length of s2 is 0\\n                        dp[i][j] = s1[:i] == s3[:i]\\n                    else:\\n                        dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])\\n            return dp[-1][-1]",
                "codeTag": "Java"
            },
            {
                "id": 31933,
                "title": "definition-of-interleave-on-test-examples",
                "content": "    The example says:\\n    s1 \"aabcc\"\\n    s2 \"dbbca\"\\n    s3 \"aadbbcbcac\" is interleave,\\n    \\n    if we decompose: s3\\n    \"aa\"   \"db\"  \"bc\"  \"bc\"  \"a\"  \"c\"\\n     s1     s2    s1    s2   s2    s1\\n    \\n    It is not interleaving right?",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 3997350,
                "title": "interleaving-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int dp[101][101];\\n    bool solve(string &s1, string &s2, string &s3,int i,int j)\\n    {\\n        if(i == s1.length() && j == s2.length() && i+j == s3.length()) return true;\\n\\n        if(dp[i][j] != -1) return dp[i][j];\\n\\n        bool result = false;\\n        \\n        if(i < s1.length() && j < s2.length() && s1[i] == s3[i+j] && s2[j] == s3[i+j])\\n        {\\n            result = (solve(s1,s2,s3,i+1,j) || solve(s1,s2,s3,i,j+1));\\n        }\\n        else if(i < s1.length() && s1[i] == s3[i+j])\\n        {\\n            result = solve(s1,s2,s3,i+1,j);\\n        }\\n        else if(j < s2.length() && s2[j] == s3[i+j])\\n        {\\n            result = solve(s1,s2,s3,i,j+1);\\n        }\\n        return dp[i][j] = result;\\n    }\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) \\n    {\\n      if(s1.length() + s2.length() != s3.length()) return false;\\n      memset(dp,-1,sizeof(dp));\\n      return solve(s1,s2,s3,0,0);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    int dp[101][101];\\n    bool solve(string &s1, string &s2, string &s3,int i,int j)\\n    {\\n        if(i == s1.length() && j == s2.length() && i+j == s3.length()) return true;\\n\\n        if(dp[i][j] != -1) return dp[i][j];\\n\\n        bool result = false;\\n        \\n        if(i < s1.length() && j < s2.length() && s1[i] == s3[i+j] && s2[j] == s3[i+j])\\n        {\\n            result = (solve(s1,s2,s3,i+1,j) || solve(s1,s2,s3,i,j+1));\\n        }\\n        else if(i < s1.length() && s1[i] == s3[i+j])\\n        {\\n            result = solve(s1,s2,s3,i+1,j);\\n        }\\n        else if(j < s2.length() && s2[j] == s3[i+j])\\n        {\\n            result = solve(s1,s2,s3,i,j+1);\\n        }\\n        return dp[i][j] = result;\\n    }\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) \\n    {\\n      if(s1.length() + s2.length() != s3.length()) return false;\\n      memset(dp,-1,sizeof(dp));\\n      return solve(s1,s2,s3,0,0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959506,
                "title": "faster-99-73-easy-and-clean-dp-top-down-bottom-up",
                "content": "# Please Upvote if you liked my Solution \\uD83E\\uDD17\\uD83E\\uDD17\\n> **Please do UpVote** it took lot of time to figure out these solutions\\n\\n# Complexity \\n- Time complexity: $$O(N*M)$$ for `N = s1.length` and `M = s2.length`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(N*M)$$ for `Solution 1` and `Solution 2`\\n- Space complexity: $$O(N)$$ for `Solution 3`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n# C++ Code\\n```\\nclass Solution {\\n    int isInterleaveHelp(int i, int j, vector<vector<int>> &dp, string &s1, string &s2, string &s3) {\\n        if( i+j == s3.size() ) return 1;\\n        if( dp[i][j] != -1 ) return dp[i][j];\\n\\n        if( i<s1.size() && s1[i] == s3[i+j] && isInterleaveHelp(i+1, j, dp, s1, s2, s3) )\\n            return dp[i][j] = 1;\\n        if( j<s2.size() && s2[j] == s3[i+j] && isInterleaveHelp(i, j+1, dp, s1, s2, s3) )\\n            return dp[i][j] = 1;\\n        return dp[i][j] = 0;\\n    }\\n\\npublic:\\n    // Solution 1 - TOP DOWN DP - SC - O(N*M)\\n    bool isInterleave1(string s1, string s2, string s3) {\\n        if( s1.size() + s2.size() != s3.size() ) return 0;\\n        int n = s1.size(), m = s2.size();\\n        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));\\n        return isInterleaveHelp(0, 0, dp, s1, s2, s3) == 1;\\n    }\\n\\n\\n    // Solution 2 - BOTTOM UP DP - SC - O(N*M)\\n    bool isInterleave2(string s1, string s2, string s3) {\\n        if( s1.size() + s2.size() != s3.size() ) return 0;\\n        int n = s1.size(), m = s2.size();\\n        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.size());\\n                if( i<s1.size() && s1[i] == s3[i+j] ) ans |= dp[i+1][j];\\n                if( j<s2.size() && s2[j] == s3[i+j] ) ans |= dp[i][j+1];\\n                dp[i][j] = ans;\\n            }\\n        }\\n        return dp[0][0] == 1;\\n    }\\n\\n\\n    // Solution 3 - BOTTOM UP - Space Optimized - SC - O(M)\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if( s1.size() + s2.size() != s3.size() ) return 0;\\n        int n = s1.size(), m = s2.size();\\n        vector<int> cur(m+1, 0);\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.size());\\n                if( i<s1.size() && s1[i] == s3[i+j] ) ans |= cur[j];\\n                if( j<s2.size() && s2[j] == s3[i+j] ) ans |= cur[j+1];\\n                cur[j] = ans;\\n            }\\n        }\\n        return cur[0] == 1;\\n    }\\n};\\n```\\n\\n---\\n\\n# Java Code\\n```\\nclass Solution {\\n    private int isInterleaveHelp(int i, int j, int dp[][], String s1, String s2, String s3) {\\n        if( i+j == s3.length() ) return 1;\\n        if( dp[i][j] != -1 ) return dp[i][j];\\n\\n        int ans = 0;\\n        if( i<s1.length() && s1.charAt(i) == s3.charAt(i+j) )\\n            ans |= isInterleaveHelp(i+1, j, dp, s1, s2, s3);\\n        \\n        if( j<s2.length() && s2.charAt(j) == s3.charAt(i+j) )\\n            ans |= isInterleaveHelp(i, j+1, dp, s1, s2, s3);\\n        \\n        return dp[i][j] = ans;\\n    }\\n\\n\\n\\n    // Solution 1 - TOP DOWN DP - SC - O(N*M)\\n    public boolean isInterleave1(String s1, String s2, String s3) {\\n        if( s1.length() + s2.length() != s3.length() ) return false;\\n        int n = s1.length(), m = s2.length();\\n        int dp[][] = new int[n+1][m+1];\\n        for(int row[] : dp) Arrays.fill(row, -1);\\n        return isInterleaveHelp(0, 0, dp, s1, s2, s3) == 1;\\n    }\\n\\n\\n\\n    // Solution 2 - BOTTOM UP DP - SC - O(N*M)\\n    public boolean isInterleave2(String s1, String s2, String s3) {\\n        if( s1.length() + s2.length() != s3.length() ) return false;\\n        int n = s1.length(), m = s2.length();\\n        int dp[][] = new int[n+1][m+1];\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.length() ? 1 : 0);\\n                if( i<s1.length() && s1.charAt(i) == s3.charAt(i+j) ) ans |= dp[i+1][j];\\n                if( j<s2.length() && s2.charAt(j) == s3.charAt(i+j) ) ans |= dp[i][j+1];\\n                dp[i][j] = ans;\\n            }\\n        }\\n        return dp[0][0] == 1;\\n    }\\n\\n\\n\\n    // Solution 3 - BOTTOM UP - Space Optimized - SC - O(M)\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if( s1.length() + s2.length() != s3.length() ) return false;\\n        int n = s1.length(), m = s2.length();\\n        int cur[] = new int[m+1];\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.length() ? 1 : 0 );\\n                if( i<n && s1.charAt(i) == s3.charAt(i+j) ) ans |= cur[j];\\n                if( j<m && s2.charAt(j) == s3.charAt(i+j) ) ans |= cur[j+1];\\n                cur[j] = ans;\\n            }\\n        }\\n        return cur[0] == 1;\\n    }\\n}\\n```\\n\\n![upvote-4.png](https://assets.leetcode.com/users/images/5af4e2a5-e8b2-4f46-be00-75247cfdf9ff_1689947516.7818904.png)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String",
                    "Dynamic Programming",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    int isInterleaveHelp(int i, int j, vector<vector<int>> &dp, string &s1, string &s2, string &s3) {\\n        if( i+j == s3.size() ) return 1;\\n        if( dp[i][j] != -1 ) return dp[i][j];\\n\\n        if( i<s1.size() && s1[i] == s3[i+j] && isInterleaveHelp(i+1, j, dp, s1, s2, s3) )\\n            return dp[i][j] = 1;\\n        if( j<s2.size() && s2[j] == s3[i+j] && isInterleaveHelp(i, j+1, dp, s1, s2, s3) )\\n            return dp[i][j] = 1;\\n        return dp[i][j] = 0;\\n    }\\n\\npublic:\\n    // Solution 1 - TOP DOWN DP - SC - O(N*M)\\n    bool isInterleave1(string s1, string s2, string s3) {\\n        if( s1.size() + s2.size() != s3.size() ) return 0;\\n        int n = s1.size(), m = s2.size();\\n        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));\\n        return isInterleaveHelp(0, 0, dp, s1, s2, s3) == 1;\\n    }\\n\\n\\n    // Solution 2 - BOTTOM UP DP - SC - O(N*M)\\n    bool isInterleave2(string s1, string s2, string s3) {\\n        if( s1.size() + s2.size() != s3.size() ) return 0;\\n        int n = s1.size(), m = s2.size();\\n        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.size());\\n                if( i<s1.size() && s1[i] == s3[i+j] ) ans |= dp[i+1][j];\\n                if( j<s2.size() && s2[j] == s3[i+j] ) ans |= dp[i][j+1];\\n                dp[i][j] = ans;\\n            }\\n        }\\n        return dp[0][0] == 1;\\n    }\\n\\n\\n    // Solution 3 - BOTTOM UP - Space Optimized - SC - O(M)\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if( s1.size() + s2.size() != s3.size() ) return 0;\\n        int n = s1.size(), m = s2.size();\\n        vector<int> cur(m+1, 0);\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.size());\\n                if( i<s1.size() && s1[i] == s3[i+j] ) ans |= cur[j];\\n                if( j<s2.size() && s2[j] == s3[i+j] ) ans |= cur[j+1];\\n                cur[j] = ans;\\n            }\\n        }\\n        return cur[0] == 1;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    private int isInterleaveHelp(int i, int j, int dp[][], String s1, String s2, String s3) {\\n        if( i+j == s3.length() ) return 1;\\n        if( dp[i][j] != -1 ) return dp[i][j];\\n\\n        int ans = 0;\\n        if( i<s1.length() && s1.charAt(i) == s3.charAt(i+j) )\\n            ans |= isInterleaveHelp(i+1, j, dp, s1, s2, s3);\\n        \\n        if( j<s2.length() && s2.charAt(j) == s3.charAt(i+j) )\\n            ans |= isInterleaveHelp(i, j+1, dp, s1, s2, s3);\\n        \\n        return dp[i][j] = ans;\\n    }\\n\\n\\n\\n    // Solution 1 - TOP DOWN DP - SC - O(N*M)\\n    public boolean isInterleave1(String s1, String s2, String s3) {\\n        if( s1.length() + s2.length() != s3.length() ) return false;\\n        int n = s1.length(), m = s2.length();\\n        int dp[][] = new int[n+1][m+1];\\n        for(int row[] : dp) Arrays.fill(row, -1);\\n        return isInterleaveHelp(0, 0, dp, s1, s2, s3) == 1;\\n    }\\n\\n\\n\\n    // Solution 2 - BOTTOM UP DP - SC - O(N*M)\\n    public boolean isInterleave2(String s1, String s2, String s3) {\\n        if( s1.length() + s2.length() != s3.length() ) return false;\\n        int n = s1.length(), m = s2.length();\\n        int dp[][] = new int[n+1][m+1];\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.length() ? 1 : 0);\\n                if( i<s1.length() && s1.charAt(i) == s3.charAt(i+j) ) ans |= dp[i+1][j];\\n                if( j<s2.length() && s2.charAt(j) == s3.charAt(i+j) ) ans |= dp[i][j+1];\\n                dp[i][j] = ans;\\n            }\\n        }\\n        return dp[0][0] == 1;\\n    }\\n\\n\\n\\n    // Solution 3 - BOTTOM UP - Space Optimized - SC - O(M)\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n        if( s1.length() + s2.length() != s3.length() ) return false;\\n        int n = s1.length(), m = s2.length();\\n        int cur[] = new int[m+1];\\n\\n        for(int i=n; i>=0; i--){\\n            for(int j=m; j>=0; j--){\\n                int ans = (i + j == s3.length() ? 1 : 0 );\\n                if( i<n && s1.charAt(i) == s3.charAt(i+j) ) ans |= cur[j];\\n                if( j<m && s2.charAt(j) == s3.charAt(i+j) ) ans |= cur[j+1];\\n                cur[j] = ans;\\n            }\\n        }\\n        return cur[0] == 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957919,
                "title": "python-3-one-line",
                "content": "Looks like this is the shortest:\\n```python\\nclass Solution:\\n    @cache\\n    def isInterleave(self, a: str, b: str, c: str) -> bool:\\n        return any(c[:1]==x[:1]and self.isInterleave(x[1:],y,c[1:])for x,y in((a,b),(b,a)))if(a and b)else(a or b or\\'\\')==c\\n```\\nYou can also use cache decorator as a function:\\n```python\\nclass Solution:\\n    def isInterleave(self, a: str, b: str, c: str) -> bool:\\n        return(f:=cache(lambda a,b,c:any(c[:1]==x[:1]and f(x[1:],y,c[1:])for x,y in((a,b),(b,a)))if(a and b)else(a or b or\\'\\')==c))(a,b,c)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    @cache\\n    def isInterleave(self, a: str, b: str, c: str) -> bool:\\n        return any(c[:1]==x[:1]and self.isInterleave(x[1:],y,c[1:])for x,y in((a,b),(b,a)))if(a and b)else(a or b or\\'\\')==c\\n```\n```python\\nclass Solution:\\n    def isInterleave(self, a: str, b: str, c: str) -> bool:\\n        return(f:=cache(lambda a,b,c:any(c[:1]==x[:1]and f(x[1:],y,c[1:])for x,y in((a,b),(b,a)))if(a and b)else(a or b or\\'\\')==c))(a,b,c)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957841,
                "title": "using-dp",
                "content": "# Intuition\\nYou can solve this problem using dynamic programming.\\n\\n# Approach\\n\\n\\nThe dp[i][j] entry in the 2D array represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3. The dynamic programming approach iterates through all possible combinations of s1 and s2 substrings and checks if they can form the corresponding substring of s3.\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n^2)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        \"\"\"\\n        :type s1: str\\n        :type s2: str\\n        :type s3: str\\n        :rtype: bool\\n        \"\"\"\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n    \\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\\n        \\n        dp[0][0] = True\\n        \\n        for i in range(len(s1) + 1):\\n            for j in range(len(s2) + 1):\\n                if i > 0 and s1[i - 1] == s3[i + j - 1]:\\n                    dp[i][j] |= dp[i - 1][j]\\n                if j > 0 and s2[j - 1] == s3[i + j - 1]:\\n                    dp[i][j] |= dp[i][j - 1]\\n                    \\n        return dp[len(s1)][len(s2)]\\n\\n\\n```\\n# **PLEASE DO UPVOTE!!!\\uD83E\\uDD79**",
                "solutionTags": [
                    "Python",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution(object):\\n    def isInterleave(self, s1, s2, s3):\\n        \"\"\"\\n        :type s1: str\\n        :type s2: str\\n        :type s3: str\\n        :rtype: bool\\n        \"\"\"\\n        if len(s1) + len(s2) != len(s3):\\n            return False\\n    \\n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\\n        \\n        dp[0][0] = True\\n        \\n        for i in range(len(s1) + 1):\\n            for j in range(len(s2) + 1):\\n                if i > 0 and s1[i - 1] == s3[i + j - 1]:\\n                    dp[i][j] |= dp[i - 1][j]\\n                if j > 0 and s2[j - 1] == s3[i + j - 1]:\\n                    dp[i][j] |= dp[i][j - 1]\\n                    \\n        return dp[len(s1)][len(s2)]\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957744,
                "title": "inter-leave",
                "content": "# Intuition\\nMy initial thoughts on solving this problem are to use a Depth-First Search (DFS) approach to determine whether a given string `s3` can be formed by interleaving characters from two input strings `s1` and `s2`.\\n\\n# Approach\\nThe approach I\\'ve taken to solve this problem is to use a recursive DFS algorithm with memoization. The idea is to consider each character of `s1` and `s2` and check if it matches the current character of `s3`. If there\\'s a match, we recursively check the next characters from both `s1` and `s2` along with the next character from `s3`. If either of these recursive calls returns true, it means that we\\'ve successfully formed an interleaved string up to this point. \\n\\nI\\'m using a 2D boolean array `dp` to store the memoization information. The element `dp[i][j]` represents whether the substring formed by considering the first `i` characters from `s1` and the first `j` characters from `s2` can form the first `i+j` characters of `s3`.\\n\\n# Complexity\\n- Time complexity: The worst-case time complexity of the algorithm is O(m * n), where `m` is the length of string `s1` and `n` is the length of string `s2`. This is because for each character of `s1`, we potentially explore all characters of `s2`.\\n- Space complexity: The space complexity is O(m * n), as we are using a 2D array `dp` of size `(m+1) x (n+1)` for memoization.\\n\\n# Code\\n```java\\nimport java.util.*;\\n\\nclass Solution {\\n    public static boolean dfs(char c1[], char c2[], char c3[], int i, int j, int k, boolean dp[][]) {\\n        if (dp[i][j]) {\\n            return false;\\n        }\\n        if (k == c3.length) {\\n            return true;\\n        }\\n        boolean valid = i < c1.length && c1[i] == c3[k] && dfs(c1, c2, c3, i + 1, j, k + 1, dp)\\n                || j < c2.length && c2[j] == c3[k] && dfs(c1, c2, c3, i, j + 1, k + 1, dp);\\n        if (!valid) {\\n            dp[i][j] = true;\\n        }\\n        return valid;\\n    }\\n\\n    public static boolean isInterleave(String s1, String s2, String s3) {\\n        char c1[] = s1.toCharArray(), c2[] = s2.toCharArray(), c3[] = s3.toCharArray();\\n        int m = s1.length(), n = s2.length();\\n        if (m + n != s3.length()) {\\n            return false;\\n        }\\n        boolean dp[][] = new boolean[m + 1][n + 1];\\n        return dfs(c1, c2, c3, 0, 0, 0, dp);\\n    }\\n}\\n```\\n\\nThis code implements the DFS algorithm with memoization to solve the problem of determining whether `s3` can be formed by interleaving characters from `s1` and `s2`.",
                "solutionTags": [
                    "Java",
                    "String",
                    "Dynamic Programming",
                    "Memoization",
                    "Matrix"
                ],
                "code": "```java\\nimport java.util.*;\\n\\nclass Solution {\\n    public static boolean dfs(char c1[], char c2[], char c3[], int i, int j, int k, boolean dp[][]) {\\n        if (dp[i][j]) {\\n            return false;\\n        }\\n        if (k == c3.length) {\\n            return true;\\n        }\\n        boolean valid = i < c1.length && c1[i] == c3[k] && dfs(c1, c2, c3, i + 1, j, k + 1, dp)\\n                || j < c2.length && c2[j] == c3[k] && dfs(c1, c2, c3, i, j + 1, k + 1, dp);\\n        if (!valid) {\\n            dp[i][j] = true;\\n        }\\n        return valid;\\n    }\\n\\n    public static boolean isInterleave(String s1, String s2, String s3) {\\n        char c1[] = s1.toCharArray(), c2[] = s2.toCharArray(), c3[] = s3.toCharArray();\\n        int m = s1.length(), n = s2.length();\\n        if (m + n != s3.length()) {\\n            return false;\\n        }\\n        boolean dp[][] = new boolean[m + 1][n + 1];\\n        return dfs(c1, c2, c3, 0, 0, 0, dp);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957693,
                "title": "most-easy-dp-solution-u-can-get",
                "content": "\\n# **PLS UPVOTE IF YOU LIKE AND COMMENT FOR ANY DOUBT**\\n# Approach\\nsolve function: This function takes the current indices i, j, and k as well as the three strings s1, s2, and s3 and the dp table for memoization.\\n\\nBase Case: The base case of the recursion is when all three strings have been completely used (i == s1.length(), j == s2.length(), and k == s3.length()). In this case, if both s1 and s2 have been fully used, it means we have successfully interleaved s1 and s2 to create s3, and thus, we return true.\\n\\nMemoization: If the state (i, j) has been computed before (indicated by dp[i][j] != -1), then we directly return the precomputed result.\\n\\nRecursive Steps: Two conditions are checked here to recursively explore the interleaving possibilities:\\n\\nIf the current character of s1 (s1[i]) matches the current character of s3 (s3[k]), then we can consider this match and recurse with the next character from s1 and s3. We increment i and k.\\nSimilarly, if the current character of s2 (s2[j]) matches the current character of s3 (s3[k]), then we can consider this match and recurse with the next character from s2 and s3. We increment j and k.\\nReturn: The result of the current state (i, j) is stored in the dp table and returned as a || b, where a and b are the results of the two recursive steps mentioned above.\\n\\nisInterleave function: This function is the entry point of the solution. It checks if the lengths of the strings match correctly. If not, it returns false immediately since interleaving wouldn\\'t be possible. Otherwise, it initializes the dp table and starts the recursion from the (0, 0, 0) state of the solve function\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N*M)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(N*M)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nbool solve(string& s1, string& s2, string& s3, int i, int j, int k, vector<vector<int>>& dp) {\\n    if (i == s1.length() && j == s2.length() && k == s3.length()) {\\n        // Both s1 and s2 should be empty at this point to return true\\n        return true;\\n    }\\n    if (dp[i][j] != -1) {\\n        return dp[i][j];\\n    }\\n    bool a = false, b = false;\\n    if( i!=s1.length() && k!=s3.length() && s1[i] == s3[k]) {\\n        a = solve(s1, s2, s3, i+1, j , k+1, dp);\\n    }\\n    if ( j!=s2.length() && k!=s3.length() && s2[j] == s3[k]) {\\n        b = solve(s1, s2, s3, i , j+1 , k+1 , dp);\\n    }\\n    return dp[i][j] = a || b;\\n}\\n\\n   bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.length();\\n        int m = s2.length();\\n        int len= s3.length();\\n        if(n+m!=len)\\n        {\\n            return false;\\n        }\\n        vector<vector<int>>dp(201,vector<int>(201,-1));\\n        return solve(s1 , s2 , s3 , 0 , 0 , 0 , dp);\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nbool solve(string& s1, string& s2, string& s3, int i, int j, int k, vector<vector<int>>& dp) {\\n    if (i == s1.length() && j == s2.length() && k == s3.length()) {\\n        // Both s1 and s2 should be empty at this point to return true\\n        return true;\\n    }\\n    if (dp[i][j] != -1) {\\n        return dp[i][j];\\n    }\\n    bool a = false, b = false;\\n    if( i!=s1.length() && k!=s3.length() && s1[i] == s3[k]) {\\n        a = solve(s1, s2, s3, i+1, j , k+1, dp);\\n    }\\n    if ( j!=s2.length() && k!=s3.length() && s2[j] == s3[k]) {\\n        b = solve(s1, s2, s3, i , j+1 , k+1 , dp);\\n    }\\n    return dp[i][j] = a || b;\\n}\\n\\n   bool isInterleave(string s1, string s2, string s3) {\\n        int n = s1.length();\\n        int m = s2.length();\\n        int len= s3.length();\\n        if(n+m!=len)\\n        {\\n            return false;\\n        }\\n        vector<vector<int>>dp(201,vector<int>(201,-1));\\n        return solve(s1 , s2 , s3 , 0 , 0 , 0 , dp);\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957663,
                "title": "c-recursion-memoisation-tabulation-follow-up-space-optimisation",
                "content": "\\n# Recursion(TLE)\\n```\\nclass Solution {\\npublic:\\n    bool helper(string&s1,string&s2,string&s3,int i,int j){\\n        if(i+j==s3.length())return true;\\n        int ans=false;\\n        if(i<s1.length()&&j<s2.length()&&s1[i]==s3[i+j]&&s2[j]==s3[i+j]){\\n            bool take1 =helper(s1,s2,s3,i+1,j);\\n            bool take2=helper(s1,s2,s3,i,j+1);\\n            ans=take1||take2;\\n        }\\n        else if(i<s1.length()&&s1[i]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i+1,j);\\n        }\\n        else if(j<s2.length()&&s2[j]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i,j+1);\\n        }\\n        return ans;\\n\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        return helper(s1,s2,s3,0,0);\\n    }\\n};\\n```\\n# Memoisation(AC)\\n```\\nclass Solution {\\npublic:\\nvector<vector<int>>memo;\\n    bool helper(string&s1,string&s2,string&s3,int i,int j){\\n        if(i+j==s3.length())return true;\\n        if(memo[i][j]!=-1)return memo[i][j];\\n        int ans=false;\\n        if(i<s1.length()&&j<s2.length()&&s1[i]==s3[i+j]&&s2[j]==s3[i+j]){\\n            bool take1 =helper(s1,s2,s3,i+1,j);\\n            bool take2=helper(s1,s2,s3,i,j+1);\\n            ans=take1||take2;\\n        }\\n        else if(i<s1.length()&&s1[i]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i+1,j);\\n        }\\n        else if(j<s2.length()&&s2[j]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i,j+1);\\n        }\\n        return memo[i][j]= ans;\\n\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        memo.resize(s1.length()+1,vector<int>(s2.length()+1,-1));\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        return helper(s1,s2,s3,0,0);\\n    }\\n};\\n```\\n# Tabulation(AC) \\n**space complexity**: `0(s1.length*s2.length)`\\n```\\nclass Solution {\\npublic:\\n\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        vector<vector<bool>>dp(s1.length()+1,vector<bool>(s2.length()+1));\\n        dp[0][0]=1; //satisfies because s1,s2,and s3 are empty strings\\n        for(int j=1;j<s2.length()+1;j++){ //check when s1 length is zero\\n             dp[0][j]=dp[0][j-1]&&(s2[j-1]==s3[j-1]);\\n        }\\n        for(int i=1;i<s1.length()+1;i++){ //check when s2 length is zero\\n             dp[i][0]=dp[i-1][0]&&(s1[i-1]==s3[i-1]);\\n        }\\n        for(int i=1;i<s1.length()+1;i++){\\n            for(int j=1;j<s2.length()+1;j++){\\n                bool a=(s1[i-1]==s3[i+j-1])&&dp[i-1][j];\\n                bool b=(s2[j-1]==s3[i+j-1])&&dp[i][j-1];\\n                dp[i][j]=a||b;\\n            }\\n        }\\n        return dp[s1.length()][s2.length()];\\n    }\\n};\\n```\\n# Space optimisation(Follow up):\\n **space complexity**: `0(s2.length)`\\n```\\n bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n\\n       vector<bool>dp(s2.length()+1);\\n        dp[0]=1; //satisfies because s1,s2,and s3 are empty strings\\n        for(int j=1;j<s2.length()+1;j++){ //check when s1 length is zero\\n             dp[j]=dp[j-1]&&(s2[j-1]==s3[j-1]);\\n        }\\n        \\n        for(int i=1;i<s1.length()+1;i++){\\n            dp[0]=(s3[i-1]==s1[i-1])&&dp[0];\\n            for(int j=1;j<s2.length()+1;j++){\\n                bool a=(s1[i-1]==s3[i+j-1])&&dp[j];\\n                bool b=(s2[j-1]==s3[i+j-1])&&dp[j-1];\\n                dp[j]=a||b;\\n            }\\n        }\\n        return dp[s2.length()];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool helper(string&s1,string&s2,string&s3,int i,int j){\\n        if(i+j==s3.length())return true;\\n        int ans=false;\\n        if(i<s1.length()&&j<s2.length()&&s1[i]==s3[i+j]&&s2[j]==s3[i+j]){\\n            bool take1 =helper(s1,s2,s3,i+1,j);\\n            bool take2=helper(s1,s2,s3,i,j+1);\\n            ans=take1||take2;\\n        }\\n        else if(i<s1.length()&&s1[i]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i+1,j);\\n        }\\n        else if(j<s2.length()&&s2[j]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i,j+1);\\n        }\\n        return ans;\\n\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        return helper(s1,s2,s3,0,0);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\nvector<vector<int>>memo;\\n    bool helper(string&s1,string&s2,string&s3,int i,int j){\\n        if(i+j==s3.length())return true;\\n        if(memo[i][j]!=-1)return memo[i][j];\\n        int ans=false;\\n        if(i<s1.length()&&j<s2.length()&&s1[i]==s3[i+j]&&s2[j]==s3[i+j]){\\n            bool take1 =helper(s1,s2,s3,i+1,j);\\n            bool take2=helper(s1,s2,s3,i,j+1);\\n            ans=take1||take2;\\n        }\\n        else if(i<s1.length()&&s1[i]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i+1,j);\\n        }\\n        else if(j<s2.length()&&s2[j]==s3[i+j]){\\n            ans=helper(s1,s2,s3,i,j+1);\\n        }\\n        return memo[i][j]= ans;\\n\\n    }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        memo.resize(s1.length()+1,vector<int>(s2.length()+1,-1));\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        return helper(s1,s2,s3,0,0);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n        vector<vector<bool>>dp(s1.length()+1,vector<bool>(s2.length()+1));\\n        dp[0][0]=1; //satisfies because s1,s2,and s3 are empty strings\\n        for(int j=1;j<s2.length()+1;j++){ //check when s1 length is zero\\n             dp[0][j]=dp[0][j-1]&&(s2[j-1]==s3[j-1]);\\n        }\\n        for(int i=1;i<s1.length()+1;i++){ //check when s2 length is zero\\n             dp[i][0]=dp[i-1][0]&&(s1[i-1]==s3[i-1]);\\n        }\\n        for(int i=1;i<s1.length()+1;i++){\\n            for(int j=1;j<s2.length()+1;j++){\\n                bool a=(s1[i-1]==s3[i+j-1])&&dp[i-1][j];\\n                bool b=(s2[j-1]==s3[i+j-1])&&dp[i][j-1];\\n                dp[i][j]=a||b;\\n            }\\n        }\\n        return dp[s1.length()][s2.length()];\\n    }\\n};\\n```\n```\\n bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.length()+s2.length()!=s3.length())return false;\\n\\n       vector<bool>dp(s2.length()+1);\\n        dp[0]=1; //satisfies because s1,s2,and s3 are empty strings\\n        for(int j=1;j<s2.length()+1;j++){ //check when s1 length is zero\\n             dp[j]=dp[j-1]&&(s2[j-1]==s3[j-1]);\\n        }\\n        \\n        for(int i=1;i<s1.length()+1;i++){\\n            dp[0]=(s3[i-1]==s1[i-1])&&dp[0];\\n            for(int j=1;j<s2.length()+1;j++){\\n                bool a=(s1[i-1]==s3[i+j-1])&&dp[j];\\n                bool b=(s2[j-1]==s3[i+j-1])&&dp[j-1];\\n                dp[j]=a||b;\\n            }\\n        }\\n        return dp[s2.length()];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957198,
                "title": "c-recursion-memoization-dp-simple-code-with-explanation-mr-robot",
                "content": "# Approach 1 Recursion : TLE\\n```\\nclass Solution {\\n    private:\\n    bool solve(string &s1,int i, string &s2, int j,string &s3,int k){\\n        if(k == s3.length())return true;\\n        if(i < s1.size() && s1[i] == s3[k]  && j<s2.size() && s2[j] == s3[k]){\\n           \\n            return solve(s1,i+1,s2,j,s3,k+1) ||  solve(s1,i,s2,j+1,s3,k+1);\\n        }\\n        else if(i < s1.size() && s1[i] == s3[k]){\\n           \\n            return solve(s1,i+1,s2,j,s3,k+1);\\n        }\\n        else if (j<s2.size() && s2[j] == s3[k]){\\n          \\n            return solve(s1,i,s2,j+1,s3,k+1);\\n        }\\n        else return false;\\n    }\\npublic:\\n\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.size() + s2.size() != s3.size())return false;\\n        return solve(s1,0,s2,0,s3,0);\\n    }\\n};\\n```\\n\\n# Complexity Analysis\\n\\n- **Time complexity** : O(2^{m+n})\\n- **Space complexity** : O(m+n).The size of stack for recursive calls can go upto m+n\\n- m = s1.length()\\n- n = s2.length()\\n\\n\\n\\n---\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n# Approach 2 \\n- Solve Function: This is a recursive helper function that determines whether s3 can be formed by interleaving characters from s1 and s2. The function uses dynamic programming with memoization to avoid redundant calculations. The parameters are the current indices (i, j, k) for s1, s2, and s3 respectively, along with the memoization dp vector.\\n\\n- Base Case: The base case checks if the index k has reached the length of s3, indicating that the interleaving is successful, and the function returns true.\\n\\n- Memoization: The dp vector is used to store the results of subproblems to avoid recalculating them. If a particular state (i, j, k) has been computed before, it is stored in dp[i][j][k].\\n\\n- Interleaving Logic: The code checks three scenarios to determine if the current characters from s1 and s2 match the character at index k in s3:\\n\\n- If both s1[i] and s2[j] match s3[k], then the function recursively calls itself by either incrementing i or j.\\n- If only s1[i] matches s3[k], the function increments i and proceeds with the next character comparison.\\n- If only s2[j] matches s3[k], the function increments j and proceeds with the next character comparison.\\n- Return: If none of the conditions are met, it means that the current characters of s1 and s2 cannot contribute to the interleaving of s3, so the function returns false.\\n\\n- Return Value: The result of the solve function is returned, which indicates whether s3 can be formed by interleaving s1 and s2.\\n\\n- This solution uses dynamic programming with memoization to avoid redundant calculations, ensuring efficiency in solving the interleaving problem. The concept of recursion and memoization is key to understanding and implementing this solution.\\n\\n\\n\\n---\\n\\n\\n# Approach 2 : Recursion + Memoization\\n```\\nclass Solution {\\n    private:\\n    bool solve(string &s1,int i, string &s2, int j,string &s3,int k,vector<vector<vector<int>>>&dp){\\n        if(k == s3.length())return true;\\n        if(dp[i][j][k] != -1)return dp[i][j][k];\\n        if(i < s1.size() && s1[i] == s3[k]  && j<s2.size() && s2[j] == s3[k]){\\n            return  dp[i][j][k]=solve(s1,i+1,s2,j,s3,k+1,dp) || solve(s1,i,s2,j+1,s3,k+1,dp);\\n        }\\n        else if(i < s1.size() && s1[i] == s3[k]){\\n            return  dp[i][j][k]=solve(s1,i+1,s2,j,s3,k+1,dp);\\n        }\\n        else if (j<s2.size() && s2[j] == s3[k]){ \\n            return  dp[i][j][k]=solve(s1,i,s2,j+1,s3,k+1,dp);\\n        }\\n        else return  dp[i][j][k]=false;\\n    }\\npublic:\\n\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.size() + s2.size() != s3.size())return false;\\n        vector<vector<vector<int>>>dp(s1.size()+ 1, vector<vector<int>>(s2.size()+1,vector<int>(s3.size()+1,-1)));\\n        return solve(s1,0,s2,0,s3,0,dp);\\n    }\\n\\n};\\n```\\n---\\n![image.png](https://assets.leetcode.com/users/images/9a3019b7-d663-4c47-94a6-c33d8916a04b_1692943277.9862583.png)\\n\\n---\\nDO UPVOTE\\u2B06\\uFE0F\\nDROP YOUR SUGGESTIONS IN THE COMMENT\\n\\nKeep Coding\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB\\n\\n-- *MR.ROBOT SIGNING OFF*\\n",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    private:\\n    bool solve(string &s1,int i, string &s2, int j,string &s3,int k){\\n        if(k == s3.length())return true;\\n        if(i < s1.size() && s1[i] == s3[k]  && j<s2.size() && s2[j] == s3[k]){\\n           \\n            return solve(s1,i+1,s2,j,s3,k+1) ||  solve(s1,i,s2,j+1,s3,k+1);\\n        }\\n        else if(i < s1.size() && s1[i] == s3[k]){\\n           \\n            return solve(s1,i+1,s2,j,s3,k+1);\\n        }\\n        else if (j<s2.size() && s2[j] == s3[k]){\\n          \\n            return solve(s1,i,s2,j+1,s3,k+1);\\n        }\\n        else return false;\\n    }\\npublic:\\n\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.size() + s2.size() != s3.size())return false;\\n        return solve(s1,0,s2,0,s3,0);\\n    }\\n};\\n```\n```\\nclass Solution {\\n    private:\\n    bool solve(string &s1,int i, string &s2, int j,string &s3,int k,vector<vector<vector<int>>>&dp){\\n        if(k == s3.length())return true;\\n        if(dp[i][j][k] != -1)return dp[i][j][k];\\n        if(i < s1.size() && s1[i] == s3[k]  && j<s2.size() && s2[j] == s3[k]){\\n            return  dp[i][j][k]=solve(s1,i+1,s2,j,s3,k+1,dp) || solve(s1,i,s2,j+1,s3,k+1,dp);\\n        }\\n        else if(i < s1.size() && s1[i] == s3[k]){\\n            return  dp[i][j][k]=solve(s1,i+1,s2,j,s3,k+1,dp);\\n        }\\n        else if (j<s2.size() && s2[j] == s3[k]){ \\n            return  dp[i][j][k]=solve(s1,i,s2,j+1,s3,k+1,dp);\\n        }\\n        else return  dp[i][j][k]=false;\\n    }\\npublic:\\n\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if(s1.size() + s2.size() != s3.size())return false;\\n        vector<vector<vector<int>>>dp(s1.size()+ 1, vector<vector<int>>(s2.size()+1,vector<int>(s3.size()+1,-1)));\\n        return solve(s1,0,s2,0,s3,0,dp);\\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957156,
                "title": "video-solution-explanation-with-drawings-in-depth-c-java",
                "content": "# Intuition, approach, and complexity disucssed in detail in video solution\\nhttps://youtu.be/_X9aOayXvl0\\n\\n# Code\\nC++\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        if((len1 + len2) != len3){\\n            return false;\\n        }\\n        vector<vector<bool>> indxState(len1+1, vector<bool>(len2+1, false));\\n        indxState[0][0] = true;\\n\\n        for(int indx1 = 1; indx1<indxState.size(); indx1++){\\n            indxState[indx1][0] = indxState[indx1-1][0] && (s1[indx1-1] == s3[indx1-1]); \\n        }\\n        for(int indx2 = 1; indx2<indxState[0].size(); indx2++){\\n            indxState[0][indx2] = indxState[0][indx2-1] && (s2[indx2-1] == s3[indx2-1]);\\n        }\\n        for(int indx1 = 1; indx1<indxState.size(); indx1++){\\n            for(int indx2 = 1; indx2<indxState[0].size(); indx2++){\\n                indxState[indx1][indx2] = (indxState[indx1-1][indx2] && s1[indx1-1] == s3[indx1+indx2-1]) || (indxState[indx1][indx2-1] && s2[indx2-1] == s3[indx1+indx2-1]); \\n            }\\n        }\\n        return indxState[len1][len2];\\n    }\\n};\\n```\\nJava\\n```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n           int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        if((len1 + len2) != len3){\\n            return false;\\n        }\\n        boolean indxState[][] = new boolean[len1+1][len2+1];\\n        indxState[0][0] = true;\\n\\n        for(int indx1 = 1; indx1<indxState.length; indx1++){\\n            indxState[indx1][0] = indxState[indx1-1][0] && (s1.charAt(indx1-1) == s3.charAt(indx1-1)); \\n        }\\n        for(int indx2 = 1; indx2<indxState[0].length; indx2++){\\n            indxState[0][indx2] = indxState[0][indx2-1] && (s2.charAt(indx2-1) == s3.charAt(indx2-1));\\n        }\\n        for(int indx1 = 1; indx1<indxState.length; indx1++){\\n            for(int indx2 = 1; indx2<indxState[0].length; indx2++){\\n                indxState[indx1][indx2] = (indxState[indx1-1][indx2] && s1.charAt(indx1-1) == s3.charAt(indx1+indx2-1)) || (indxState[indx1][indx2-1] && s2.charAt(indx2-1) == s3.charAt(indx1+indx2-1)); \\n            }\\n        }\\n        return indxState[len1][len2];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        if((len1 + len2) != len3){\\n            return false;\\n        }\\n        vector<vector<bool>> indxState(len1+1, vector<bool>(len2+1, false));\\n        indxState[0][0] = true;\\n\\n        for(int indx1 = 1; indx1<indxState.size(); indx1++){\\n            indxState[indx1][0] = indxState[indx1-1][0] && (s1[indx1-1] == s3[indx1-1]); \\n        }\\n        for(int indx2 = 1; indx2<indxState[0].size(); indx2++){\\n            indxState[0][indx2] = indxState[0][indx2-1] && (s2[indx2-1] == s3[indx2-1]);\\n        }\\n        for(int indx1 = 1; indx1<indxState.size(); indx1++){\\n            for(int indx2 = 1; indx2<indxState[0].size(); indx2++){\\n                indxState[indx1][indx2] = (indxState[indx1-1][indx2] && s1[indx1-1] == s3[indx1+indx2-1]) || (indxState[indx1][indx2-1] && s2[indx2-1] == s3[indx1+indx2-1]); \\n            }\\n        }\\n        return indxState[len1][len2];\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean isInterleave(String s1, String s2, String s3) {\\n           int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();\\n        if((len1 + len2) != len3){\\n            return false;\\n        }\\n        boolean indxState[][] = new boolean[len1+1][len2+1];\\n        indxState[0][0] = true;\\n\\n        for(int indx1 = 1; indx1<indxState.length; indx1++){\\n            indxState[indx1][0] = indxState[indx1-1][0] && (s1.charAt(indx1-1) == s3.charAt(indx1-1)); \\n        }\\n        for(int indx2 = 1; indx2<indxState[0].length; indx2++){\\n            indxState[0][indx2] = indxState[0][indx2-1] && (s2.charAt(indx2-1) == s3.charAt(indx2-1));\\n        }\\n        for(int indx1 = 1; indx1<indxState.length; indx1++){\\n            for(int indx2 = 1; indx2<indxState[0].length; indx2++){\\n                indxState[indx1][indx2] = (indxState[indx1-1][indx2] && s1.charAt(indx1-1) == s3.charAt(indx1+indx2-1)) || (indxState[indx1][indx2-1] && s2.charAt(indx2-1) == s3.charAt(indx1+indx2-1)); \\n            }\\n        }\\n        return indxState[len1][len2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956862,
                "title": "c-dp",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if (s3.size() != s1.size() + s2.size()) {\\n            return false;\\n        }\\n        return dfs(s1, s2, s3, 0, 0);\\n    }\\nprivate:\\n    map<pair<int, int>, bool> dp;\\n    \\n    bool dfs(string s1, string s2, string s3, int i, int j) {\\n        if (i == s1.size() && j == s2.size()) {\\n            return true;\\n        }\\n        if (dp.find({i, j}) != dp.end()) {\\n            return dp[{i, j}];\\n        }\\n        \\n        if (i < s1.size() && s1[i] == s3[i + j] && dfs(s1, s2, s3, i + 1, j)) {\\n            return true;\\n        }\\n        if (j < s2.size() && s2[j] == s3[i + j] && dfs(s1, s2, s3, i, j + 1)) {\\n            return true;\\n        }\\n        \\n        dp[{i, j}] = false;\\n        return dp[{i, j}];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        if (s3.size() != s1.size() + s2.size()) {\\n            return false;\\n        }\\n        return dfs(s1, s2, s3, 0, 0);\\n    }\\nprivate:\\n    map<pair<int, int>, bool> dp;\\n    \\n    bool dfs(string s1, string s2, string s3, int i, int j) {\\n        if (i == s1.size() && j == s2.size()) {\\n            return true;\\n        }\\n        if (dp.find({i, j}) != dp.end()) {\\n            return dp[{i, j}];\\n        }\\n        \\n        if (i < s1.size() && s1[i] == s3[i + j] && dfs(s1, s2, s3, i + 1, j)) {\\n            return true;\\n        }\\n        if (j < s2.size() && s2[j] == s3[i + j] && dfs(s1, s2, s3, i, j + 1)) {\\n            return true;\\n        }\\n        \\n        dp[{i, j}] = false;\\n        return dp[{i, j}];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956861,
                "title": "very-simple-dp-code-memoization-c",
                "content": "# Intuition\\n\\n# Approach\\nThere are three states of dp in this question :\\n- character of string s3 matches with s1 and s2\\n- character of string s3 matches with string s1 only\\n- character of string s3 matches with string s2 only\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n     bool solve(int i,int j, int k,string s1,string s2,string s3,vector<vector<int>>&dp){\\n      if(i==s1.size() && j==s2.size() && k==s3.size()) return true;\\n      if(i<s1.size() && j<s2.size() && dp[i][j]!=-1) return dp[i][j];\\n      if(i<s1.size() && j<s2.size() && s1[i]==s3[k] && s2[j]==s3[k]){\\n       return dp[i][j]= solve(i+1,j,k+1,s1,s2,s3,dp)||solve(i,j+1,k+1,s1,s2,s3,dp);\\n      }else if(i<s1.size() && s1[i]==s3[k]){\\n        return dp[i][j]=solve(i+1,j,k+1,s1,s2,s3,dp);\\n       }else if(j<s2.size() && s2[j]==s3[k]){\\n         return dp[i][j]=solve(i,j+1,k+1,s1,s2,s3,dp);\\n       }\\n         return dp[i][j]= false;  \\n            \\n     }\\n     \\n    bool isInterleave(string s1, string s2, string s3) {\\n      if(s1.size()+s2.size() !=s3.size()) return false;\\n      vector<vector<int>>dp(s1.size()+1,vector<int>(s2.size()+1,-1));\\n     return solve(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n     bool solve(int i,int j, int k,string s1,string s2,string s3,vector<vector<int>>&dp){\\n      if(i==s1.size() && j==s2.size() && k==s3.size()) return true;\\n      if(i<s1.size() && j<s2.size() && dp[i][j]!=-1) return dp[i][j];\\n      if(i<s1.size() && j<s2.size() && s1[i]==s3[k] && s2[j]==s3[k]){\\n       return dp[i][j]= solve(i+1,j,k+1,s1,s2,s3,dp)||solve(i,j+1,k+1,s1,s2,s3,dp);\\n      }else if(i<s1.size() && s1[i]==s3[k]){\\n        return dp[i][j]=solve(i+1,j,k+1,s1,s2,s3,dp);\\n       }else if(j<s2.size() && s2[j]==s3[k]){\\n         return dp[i][j]=solve(i,j+1,k+1,s1,s2,s3,dp);\\n       }\\n         return dp[i][j]= false;  \\n            \\n     }\\n     \\n    bool isInterleave(string s1, string s2, string s3) {\\n      if(s1.size()+s2.size() !=s3.size()) return false;\\n      vector<vector<int>>dp(s1.size()+1,vector<int>(s2.size()+1,-1));\\n     return solve(0,0,0,s1,s2,s3,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956476,
                "title": "javascript-solution-explanation-with-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s1\\n * @param {string} s2\\n * @param {string} s3\\n * @return {boolean}\\n */\\n\\nfunction isInterleave(s1, s2, s3) {\\n    // Check if the total length of s1 and s2 is equal to s3\\n    if (s1.length + s2.length !== s3.length) {\\n        return false;\\n    }\\n\\n    // Create a 2D dynamic programming array dp\\n    const dp = new Array(s1.length + 1).fill(false).map(() => new Array(s2.length + 1).fill(false));\\n\\n    // Base case: Both s1 and s2 are empty, and s3 is also empty\\n    dp[0][0] = true;\\n\\n    // Fill the first column of dp using s1 and s3\\n    for (let i = 1; i <= s1.length; i++) {\\n        dp[i][0] = dp[i - 1][0] && s1[i - 1] === s3[i - 1];\\n    }\\n\\n    // Fill the first row of dp using s2 and s3\\n    for (let j = 1; j <= s2.length; j++) {\\n        dp[0][j] = dp[0][j - 1] && s2[j - 1] === s3[j - 1];\\n    }\\n\\n    // Fill the rest of the dp array based on character matching logic\\n    for (let i = 1; i <= s1.length; i++) {\\n        for (let j = 1; j <= s2.length; j++) {\\n            dp[i][j] = (dp[i - 1][j] && s1[i - 1] === s3[i + j - 1]) ||\\n                       (dp[i][j - 1] && s2[j - 1] === s3[i + j - 1]);\\n        }\\n    }\\n\\n    // Return whether the last cell of dp is true, indicating s3 can be formed by interleaving s1 and s2\\n    return dp[s1.length][s2.length];\\n}\\n\\nconst s1 = \"aabcc\";\\nconst s2 = \"dbbca\";\\nconst s3 = \"aadbbcbcac\";\\nconsole.log(isInterleave(s1, s2, s3)); // Output: true\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s1\\n * @param {string} s2\\n * @param {string} s3\\n * @return {boolean}\\n */\\n\\nfunction isInterleave(s1, s2, s3) {\\n    // Check if the total length of s1 and s2 is equal to s3\\n    if (s1.length + s2.length !== s3.length) {\\n        return false;\\n    }\\n\\n    // Create a 2D dynamic programming array dp\\n    const dp = new Array(s1.length + 1).fill(false).map(() => new Array(s2.length + 1).fill(false));\\n\\n    // Base case: Both s1 and s2 are empty, and s3 is also empty\\n    dp[0][0] = true;\\n\\n    // Fill the first column of dp using s1 and s3\\n    for (let i = 1; i <= s1.length; i++) {\\n        dp[i][0] = dp[i - 1][0] && s1[i - 1] === s3[i - 1];\\n    }\\n\\n    // Fill the first row of dp using s2 and s3\\n    for (let j = 1; j <= s2.length; j++) {\\n        dp[0][j] = dp[0][j - 1] && s2[j - 1] === s3[j - 1];\\n    }\\n\\n    // Fill the rest of the dp array based on character matching logic\\n    for (let i = 1; i <= s1.length; i++) {\\n        for (let j = 1; j <= s2.length; j++) {\\n            dp[i][j] = (dp[i - 1][j] && s1[i - 1] === s3[i + j - 1]) ||\\n                       (dp[i][j - 1] && s2[j - 1] === s3[i + j - 1]);\\n        }\\n    }\\n\\n    // Return whether the last cell of dp is true, indicating s3 can be formed by interleaving s1 and s2\\n    return dp[s1.length][s2.length];\\n}\\n\\nconst s1 = \"aabcc\";\\nconst s2 = \"dbbca\";\\nconst s3 = \"aadbbcbcac\";\\nconsole.log(isInterleave(s1, s2, s3)); // Output: true\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3786588,
                "title": "backtracking-with-memoization-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIdea is that we create this type of a path \\n\\n\\n![image.png](https://assets.leetcode.com/users/images/a028a997-21fc-4f04-8b14-e6c7b78cf49e_1689750812.7706375.png)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIf char from s1 is chosen we travel downwards (i+1 ,j) \\n\\nand char from s2 is chosen we travel to the right.\\n\\nand there we update the value.\\n\\n\\n\\nThe trace on the dict is as follows :\\n\\n{(5, 3): False, (5, 5): True, (4, 5): True, (4, 4): True, (4, 3): True, (4, 2): True, (3, 2): True, (3, 1): True, (2, 1): True, (2, 0): True, (1, 0): True, (0, 0): True}\\n\\nGoing from last to first The right path would be like:\\n\\n![image.png](https://assets.leetcode.com/users/images/c3d4b55e-d142-4fef-890b-54d03fa6409a_1689752315.7093666.png)\\n\\nNote :**The movement is backwards and we check the incremented cell before we update our current cell.**\\n\\nIn this wrong trace where \\'c\\' was chosen from s1 , we would not have gotten the subset and thus that backtracking run has failed\\n\\n![image.png](https://assets.leetcode.com/users/images/e9af376b-b69c-4ed0-8458-66dcb3e68e4c_1689752552.5403507.png)\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(m*n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(m*n)\\n\\n\\n# Code\\n```\\nclass Solution:\\n\\n    \\'\\'\\'\\n            This recursion goes all in and backtracks\\n\\n            Goal string : aadbbcbcac\\n\\n             +---+---+---+---+---+---+\\n            |   | d | b | b | c |   |\\n            +---+---+---+---+---+---+\\n            | a |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | a |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | b |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | c |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | c |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            |   |   |   |   |   | T |\\n            +---+---+---+---+---+---+\\n\\n\\n    \\'\\'\\'\\n    \\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        def topDownBacktrack(i,j):\\n            # Bottom Up approach This is the goal state\\n            if i == len(s1) and j == len(s2):\\n                return True \\n            # using memo\\n            if (i,j) in dp:\\n                return dp[(i,j)]\\n\\n            if i < len(s1) and s1[i] == s3[i+j] and topDownBacktrack(i+1,j) : # Checking if we take the s1 substring \\n                dp[(i,j)] = True\\n                return True\\n            if j < len(s2) and s2[j] == s3[i+j] and topDownBacktrack(i,j+1) : # Checking if we take the s2 substring\\n                dp[(i,j)] = True\\n                return True\\n            dp[(i,j)] = False\\n            return False\\n            \\n\\n        if len(s1) +len(s2) != len(s3):\\n            return False\\n\\n        dp = {} #memo : [(i,j)] = True or False, need to only mark false nodes\\n        \\n\\n        \\n        \\n\\n        # while i <= len(s1) and j <=len(s2) and i+j len(s3):\\n            \\n            \\n            \\n        return topDownBacktrack(0,0)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Dynamic Programming",
                    "Backtracking",
                    "Memoization"
                ],
                "code": "```\\nclass Solution:\\n\\n    \\'\\'\\'\\n            This recursion goes all in and backtracks\\n\\n            Goal string : aadbbcbcac\\n\\n             +---+---+---+---+---+---+\\n            |   | d | b | b | c |   |\\n            +---+---+---+---+---+---+\\n            | a |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | a |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | b |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | c |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            | c |   |   |   |   |   |\\n            +---+---+---+---+---+---+\\n            |   |   |   |   |   | T |\\n            +---+---+---+---+---+---+\\n\\n\\n    \\'\\'\\'\\n    \\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\\n        def topDownBacktrack(i,j):\\n            # Bottom Up approach This is the goal state\\n            if i == len(s1) and j == len(s2):\\n                return True \\n            # using memo\\n            if (i,j) in dp:\\n                return dp[(i,j)]\\n\\n            if i < len(s1) and s1[i] == s3[i+j] and topDownBacktrack(i+1,j) : # Checking if we take the s1 substring \\n                dp[(i,j)] = True\\n                return True\\n            if j < len(s2) and s2[j] == s3[i+j] and topDownBacktrack(i,j+1) : # Checking if we take the s2 substring\\n                dp[(i,j)] = True\\n                return True\\n            dp[(i,j)] = False\\n            return False\\n            \\n\\n        if len(s1) +len(s2) != len(s3):\\n            return False\\n\\n        dp = {} #memo : [(i,j)] = True or False, need to only mark false nodes\\n        \\n\\n        \\n        \\n\\n        # while i <= len(s1) and j <=len(s2) and i+j len(s3):\\n            \\n            \\n            \\n        return topDownBacktrack(0,0)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3146211,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n   int rec(int i1,int i2,int i3,string &s1,string &s2,string &s3,int n1,int n2,int n3,vector<vector<vector<int>>>&dp)\\n   {\\n       if (i1==n1 && i2==n2 && i3==n3)\\n       return 1;\\n       if (i3==n3) return 0;\\n       if (dp[i1][i2][i3]!=-1) return dp[i1][i2][i3];\\n       int a=0;\\n       if(i1<n1 && s3[i3]==s1[i1])\\n       a=rec(i1+1,i2,i3+1,s1,s2,s3,n1,n2,n3,dp);\\n       int b=0;\\n        if(i2<n2 && s3[i3]==s2[i2])\\n       b=rec(i1,i2+1,i3+1,s1,s2,s3,n1,n2,n3,dp);\\n       return dp[i1][i2][i3]=a||b;\\n   }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(),n2=s2.size(),n3=s3.size();\\n        vector<vector<vector<int>>>dp(n1+1,vector<vector<int>>(n2+1,vector<int>(n3+1,-1)));\\n        return rec(0,0,0,s1,s2,s3,n1,n2,n3,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   int rec(int i1,int i2,int i3,string &s1,string &s2,string &s3,int n1,int n2,int n3,vector<vector<vector<int>>>&dp)\\n   {\\n       if (i1==n1 && i2==n2 && i3==n3)\\n       return 1;\\n       if (i3==n3) return 0;\\n       if (dp[i1][i2][i3]!=-1) return dp[i1][i2][i3];\\n       int a=0;\\n       if(i1<n1 && s3[i3]==s1[i1])\\n       a=rec(i1+1,i2,i3+1,s1,s2,s3,n1,n2,n3,dp);\\n       int b=0;\\n        if(i2<n2 && s3[i3]==s2[i2])\\n       b=rec(i1,i2+1,i3+1,s1,s2,s3,n1,n2,n3,dp);\\n       return dp[i1][i2][i3]=a||b;\\n   }\\n    bool isInterleave(string s1, string s2, string s3) {\\n        int n1=s1.size(),n2=s2.size(),n3=s3.size();\\n        vector<vector<vector<int>>>dp(n1+1,vector<vector<int>>(n2+1,vector<int>(n3+1,-1)));\\n        return rec(0,0,0,s1,s2,s3,n1,n2,n3,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1576535,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1646591,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 2029056,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1576855,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1568627,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 2029275,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1568580,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 2029043,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1570461,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567151,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1576535,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1646591,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 2029056,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1576855,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1568627,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 2029275,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1568580,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 2029043,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1570461,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567151,
                "content": [
                    {
                        "username": "roshitkhare",
                        "content": "So you need to ask yourself ..why is dp used here?\\n In first look this questions looks pretty simple and can be done using 2 pointers. \\n \\n Then you implement the 2 pointer approach and upon submission your code get a wrong ans on the below testcase.\\n \\n This test case then tells you why this que is asking for a dp solution.\\n \\n s1 = \"aabc\"\\n s2 = \"abad\"\\n s3= \"aabadabc\"\\n \\n Now in this, if you start moving from the back using the 2 pointer approach, it keeps on eleminating the character from the 1st string i.e s1. But when s1 gets exhausted, your s3 does not match with s2. \\n Here you take a note that, when char at s1 and s2 are equal, we need to check if deleting the char from s1 is a correct move or deleting the char from s2 would be a correct move.\\n \\n That clearly means, we have 2 choices here, either to delete the char from s1 or s2.\\n \\n Now for a bigger testcase like this it is clearly evidant that the que is asking for a Dyanmic Programming solution!!\\n \\n s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s2 = \"aaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n s3 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\\t\\t aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\\n"
                    },
                    {
                        "username": "Curious_hritik",
                        "content": "great intution \\uD83D\\uDD25\\uD83D\\uDD25\\uD83C\\uDF89"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "I CAN\\'T BELIEVE I SOLVED THIS ONE BY MY SELF :OOOOOOOOOO"
                    },
                    {
                        "username": "SeineAle",
                        "content": "ME TOO !\nFeels Good :)"
                    },
                    {
                        "username": "killerraj369",
                        "content": "After watching this comment I solved it by myself at first attempt itself."
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good... doesn\\'t it?"
                    },
                    {
                        "username": "him_Sarma619",
                        "content": "same bro... feeling proud in my small achievement lol !"
                    },
                    {
                        "username": "getbusylivingOrgetbusydying",
                        "content": "I am ashamed of my self. "
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "same bruh!\\n"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "whenever i see leaving, it reminds me of her :("
                    },
                    {
                        "username": "monikakumari2k",
                        "content": "slow claps :)"
                    },
                    {
                        "username": "santanusen",
                        "content": "Please share how did you make her leave :p"
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "Logic level with realistic view on top "
                    },
                    {
                        "username": "misba_shoeib",
                        "content": "riyal"
                    },
                    {
                        "username": "Vicjr",
                        "content": "real"
                    },
                    {
                        "username": "hawtsauce-iwnl",
                        "content": "real"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "\\uD83D\\uDE06 "
                    },
                    {
                        "username": "maysrv",
                        "content": "You might be tempted to use i, j and k to keep track of s1, s2 and s3 respectively in your recursive calls but it gave me TLE. (Please note that it is not wrong)\\nThe trick here was to remove k from your changing state and reduce dp from 3D to 2D.\\nYou may reason about it by manipulating what you think of i and j at each point and it may work for you but I would like to point out how I reason it. \\nThe thing here is, at every step k is nothing but i+j, so we dont need to keep track of k because we can get it from i and j."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "[@chenon](/chenon) The problem here is you\\'re greedily checking if s3 can be created from s1 if not then you\\'re checking for s2.\\n\\nIf somehow the test-case you\\'re mentioning currently is cleared then you\\'ll stuck later on."
                    },
                    {
                        "username": "chenon",
                        "content": "I was exactly keeping track of the indexes on s1 and s2  . See my submission https://leetcode.com/problems/interleaving-string/submissions/1031746304/ . NO TLE but wrong answer."
                    },
                    {
                        "username": "daring-calf",
                        "content": "I used 4D and beat 9%..."
                    },
                    {
                        "username": "parmani",
                        "content": "but 3d also works, since the constraints are low"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "at first i also did the 3d dp, then i figured it out that we dont need k..:p"
                    },
                    {
                        "username": "sanket54",
                        "content": "What is meaning of |n-m| <= 1 and why it is being ignored in all solutions ?"
                    },
                    {
                        "username": "sanjeeb42",
                        "content": "[@mahesh105](/mahesh105) Thanks for the explanation. I was exactly looking for this"
                    },
                    {
                        "username": "halfengineer",
                        "content": "[@mahesh105](/mahesh105)  thankss bro"
                    },
                    {
                        "username": "mahesh105",
                        "content": "All of the reasons in this threads were not explaining why?\\nLet me tell you.\\nsuppose you take n substrings of S1 and place it like this\\n__  __  __  __  __  __  __  __  __  __  __  __\\nthen you can fill the S2 substrings in the gaps or the boundary...in either case the inequality holds.\\nSo yeah if the string is interleaving, this inequality is automatically held due to this observation.\\nHappy Debugging : )"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "The fact is that |n - m| <= 1 (where m and n are the no. of substring used for interleaving the string) is just the condition which supports that strings must be interleaved.\\nIf there are interleaved correctly then this condition will be automatically true.\\nThat\\'s why every piece of information not need to be included in code some time based on few logic we have to neglect few of them."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@unters](/unters) |n-m| <= 1 means you cannot divide the strings into arbitrarily sized pieces. If string 1 is divided into 4 parts, then string 5 can only be divided into 3, 4 or 5 parts. "
                    },
                    {
                        "username": "unters",
                        "content": "[@WajeehHasan](/WajeehHasan), in my opinion you\\'re not quite right. `m` and `n` are not numbers of characters in each string - that are numbers of nonoverlapping substrings in each string (each substring can contain more than one character). `|m - n| <= 1\\' means there can not be two adjacent substrings in p3 that belong to one string."
                    },
                    {
                        "username": "Sanskar_Garg",
                        "content": "Exactly what I am looking for."
                    },
                    {
                        "username": "WajeehHasan",
                        "content": "simply means difference of the length of string s and t is less than or equal to 1"
                    },
                    {
                        "username": "eddy66",
                        "content": "I think `|n-m|<=1` just means the substrings of `s` are interleaved with the substrings of `t`. So they could be `s1, t1, s2`, or `s1, t1, s2, t2`. But since each substring can be anything, so it\\'s not important when we solve the problem"
                    },
                    {
                        "username": "mvo13",
                        "content": "|n-m| <= 1 \\n=> The time complexity is O(n^2)"
                    },
                    {
                        "username": "shiva_San",
                        "content": "be ready for this testcase if you are using two pointer method without dp..\n\ns1 =\n\"aabc\"\ns2 =\n\"abad\"\ns3 =\n\"aabadabc\"\n\noutput=true\n"
                    },
                    {
                        "username": "oisinfarrell00",
                        "content": "In the brief of Intervealving strings it states that:\\n - The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nHowever then they give this example:\\n![image](https://assets.leetcode.com/users/images/28de80e4-3308-48c9-9f45-46d243f7a928_1622621577.219354.png)\\nI dont really understand how this example works. It takes two letters from the first string and then 4 from the next and then back to two and so on. I thought it had to be like s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Am I missing something here?"
                    },
                    {
                        "username": "Storm97Breaker",
                        "content": "s1 and so on may not necessarily be single characters. That is the trick here."
                    },
                    {
                        "username": "Kaltu",
                        "content": "`s1 = \\'aa\\', s2 = \\'bc\\', s3 = \\'c\\'` and `t1 = \\'dbbc\\', t2 = \\'a\\'` so the answer is `s1 + t1 + s2 + t2 + s3`"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Here s or t don\\'t represent the charecters but a substring, which means in above example s1 is \"aa\" and t1 is \"dbbc\" and similarily s2 is \"bc\"..."
                    },
                    {
                        "username": "anwendeng",
                        "content": "Again a string problem. But it needs some method to solve. A 2D DP is possible, since s3 depends on both s1 & s2. "
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@meow_power](/meow_power) because we don\\'t need it, i and j together can always determine k uniquely (i+j = k; always holds if ur not doing anything sus)"
                    },
                    {
                        "username": "anwendeng",
                        "content": "[@meow_power](/meow_power) Your solution is fine. 2D array is used."
                    },
                    {
                        "username": "meow_power",
                        "content": "my solution uses k as third parameter but in memoization why is it not used.Please help"
                    },
                    {
                        "username": "mayliao",
                        "content": "It is so strange use static variable get the answer is different from my computer. After I changed it as parameter, it worked well."
                    },
                    {
                        "username": "drdamanraaj",
                        "content": "relevant article \\nhttps://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-"
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "cuz static variable will be kept and be operated by the function u implemented for each different test cases, without resetting its original value. while local parameter will be wiped after function is done for one test case, and created and set for the next test case."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for July, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/interleaving-string/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 4 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Recursion with memoization\n\n  \n**Approach 3:** Using 2D Dynamic Programming\n\n  \n**Approach 4:** Using 1D Dynamic Programming\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1566477,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2030001,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2029182,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 1575397,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2030072,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2029778,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 1576218,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2029643,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2029496,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2029343,
                "content": [
                    {
                        "username": "merce",
                        "content": "If s1 = \"a\" and s2 = \"b\" and s3 = \"aba\" \\n\\nWhy isn't this a valid interleaving?? Sorry if I seem stupid."
                    },
                    {
                        "username": "sonivinayak716",
                        "content": "BECASE THE QUANTITY OF \\'a\\' is over by using it frst time in \"aba\""
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because s3 should contain all the characters of both s1 and s2.. Actually in my code if the length of s3 is not the sum of the lengths of s1 and s2 - I am already returning \\'false\\' as a result, to speed up the checking process."
                    },
                    {
                        "username": "krhemant172003",
                        "content": "*This problem is quite challenging.*\n**Here is a tip to overcome this challenge**\nThis problem involves finding whether a target string s3 can be formed by interleaving two given strings s1 and s2. An important observation is that the relative order of characters within each string needs to be maintained in the interleaved result.\n\nHere's a high-level approach to consider:\n\n**Dynamic Programming:** Consider using a dynamic programming approach. Create a 2D DP table where dp[i][j] represents whether the first i characters of s1 and the first j characters of s2 can form the first i+j characters of s3.\n\n**Base Cases:** Initialize the DP table with base cases. For example, dp[0][0] should be true, as both empty strings can form an empty string.\n\n**Recurrence Relation:** Build the DP table bottom-up using a recurrence relation. You can consider the following cases:\n\nIf the current character in s3 matches the current character in s1, you can check if the previous characters in s1 and s3 match and update dp[i][j] accordingly.\nSimilarly, if the current character in s3 matches the current character in s2, you can check if the previous characters in s2 and s3 match and update dp[i][j] accordingly.\nFinal Result: After filling the DP table, the value of dp[s1.length()][s2.length()] will indicate whether s3 can be formed by interleaving s1 and s2.\n\nRemember to handle the edge cases and index mapping properly while implementing the DP solution.\n\nGood luck! Dynamic programming can be powerful for such sequence-related problems.  "
                    },
                    {
                        "username": "Zeeshan251",
                        "content": "Did I just solve this on my own \\uD83D\\uDE2D"
                    },
                    {
                        "username": "Arunabh_Gupta",
                        "content": "It feels good.... doesn\\'t it :)"
                    },
                    {
                        "username": "rvrishav7",
                        "content": "can someone explain why we it is not problem of 3d dp but 2d? since 3 variables are changing,it should be 3D DP"
                    },
                    {
                        "username": "Sansk_Ritu",
                        "content": "You can think of the third variable as the sum of the first two and that way you don\\'t have to keep track of all three of them."
                    },
                    {
                        "username": "humaocheng75",
                        "content": "because s3\\'s pointer is controlled by s1 and s2 directly... it is not independent..."
                    },
                    {
                        "username": "niranjank2022",
                        "content": "Hooray! I did it myself!"
                    },
                    {
                        "username": "user5400vw",
                        "content": "this test case (second to last one) forced me to use memoization.  if you\\'re shooting for 100% acceptance use this as your custom performance test.\\n\\ns1 = \"abababababababababababababababababababababababababababababababababababababababababababababababababbb\"\\ns2 = \"babababababababababababababababababababababababababababababababababababababababababababababababaaaba\"\\ns3 = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbb\""
                    },
                    {
                        "username": "brunotg",
                        "content": "Why do we need to generate all the interleavings? I was trynig to have a pointer that moves along s1, another that moves along s2 and another that moves along s3. \\n\\nAs long as you have the same characters on s1 as on s3, you move them both. An you do the same with s2 and s3.\\n"
                    },
                    {
                        "username": "packle",
                        "content": "same characters on s1 and s2, we do not know which ptr to move. have to branch and try both"
                    },
                    {
                        "username": "humaocheng75",
                        "content": "I got timeout..."
                    },
                    {
                        "username": "vdas53073",
                        "content": "i was doing the same and in example 2 it gives true according to my logic but don\\'t know why it is false"
                    },
                    {
                        "username": "1711",
                        "content": "maybe it\\'s very hard"
                    },
                    {
                        "username": "anurag_819",
                        "content": "Can anyone pls explain me this testcase?\\n\\ns1= \"aaaa\"\\ns2= \"aa\"\\ns3= \"aaa\"\\n\\nThe expected output is false."
                    },
                    {
                        "username": "0x6B0",
                        "content": "[@kdhjd](/kdhjd) Why would that matter? If we have two strings, \"a\" and \"bbbb\" then \"bbabb\" should be a valid interleaving, even though the difference of their lengths is 3. "
                    },
                    {
                        "username": "ahrix268",
                        "content": "[@kdhjd](/kdhjd) \n`s3` is formed by **interleaving** `s1` and `s2`. therefore, `s3.length == s1.length + s2.length`. \nidk why they put `|n -m| <= 1` as one of the conditions but surely they did NOT say `n` is `s1.length` and `m` is `s2.length`.\nbtw, i did nothing with that `|n -m| <= 1` and still got passed"
                    },
                    {
                        "username": "kdhjd",
                        "content": "The expected output is false as | len(s1)-len(s2) | > 1."
                    },
                    {
                        "username": "chirag019",
                        "content": "Additional info: \n- You can't use a character twice.\n- You have to necessarily use all the characters of s1 and s2.\n\nTip:\n- Initialize two pointers, say `i` and `j` for `s1` and `s2` resp. No need for an explicit pointer for `s3`, since it will always be equal to `i+j`"
                    }
                ]
            },
            {
                "id": 2029121,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 1944239,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 1575375,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 1572625,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 1571211,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 1575347,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 2043146,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 2032884,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 2031581,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 2030326,
                "content": [
                    {
                        "username": "Shubham_Raj22",
                        "content": "`Tips:-`\\n\\nSee this before the solution.\\n\\nSo the trick here is to how to implement this alternate selection of substrings. I am pretty much sure you have concluded that we need recursion to solve this, but how to ensure that when we append the string, it is the way it\\'s mentioned.\\n\\nWhat you need to do it, instead of appending substrings, append character of strings. At each iteration, check if `s1[i] == s3[i+j]` and below that check `s2[j] == s3[i+j]`. \\n\\nOn satisfaction , call again the function with incremented i or j.\\n\\nThis way, if you observe, you will have implemented the above condition of alternating substrings.\\n\\nIn base case,\\n\\n` if temp == s3,` return `true`.\\n\\n`if i == s1.length() `return `temp+s2.subtr(j) == s3.`\\n\\n`if j == s2.length() `return `temp+s1.substr(i) == s3.`"
                    },
                    {
                        "username": "sergei99",
                        "content": "Would it even complete within time limit?"
                    },
                    {
                        "username": "xfffrank",
                        "content": "Did someone find this one a lot more difficult than other DP problems like \"63. Unique Paths II\\n\"..."
                    },
                    {
                        "username": "luoyunfeng1853",
                        "content": "Anyone can explain this constraint |n - m| <= 1?"
                    },
                    {
                        "username": "c4tdog",
                        "content": "means if you split s1 into 3 parts, you must split s2 either to 2, 3 or 4 parts.\\n|3-2| = 1\\n|3-3| = 0\\n|3-4| = 1"
                    },
                    {
                        "username": "patilc125",
                        "content": "n-m==0 or n-m==-1 or n-m==1"
                    },
                    {
                        "username": "upendrabartwalymail",
                        "content": "s1:\"\"\\ns2:\"\"\\ns3:\"a\"\\nwhy this should return false?\\na empty string is part of all string so this should be true. Help me!\\n"
                    },
                    {
                        "username": "northern-flower",
                        "content": "Because the length of s3 is not the sum of the lengths s1 and s2."
                    },
                    {
                        "username": "alik",
                        "content": "It's quite easy to solve it using recursion but the result is \"Time Limit Exceeded\" on some very long input.\\nI can convert the recursion to a for loop, but it's quite tedious and I feel I'm missing the whole point of the question.\\nIs there some kind of a trick here?"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The reason you are getting TLE is because you are making the same calculations many times. In other words, assuming you use a 2 pointer approach, where i and j point to the current character you are considering for s1 and s2 respectively. you get the same i and j  many times. \\n\\nTo avoid this you can use memo. where the key is something like `${i}-${j}` so that you just stop when you get the same i and j, because you know you have already made that specific calculation. In a 2d dp array you do essentially the same thing, but more elegantly, but I am not entirely sure how. "
                    },
                    {
                        "username": "sergei99",
                        "content": "My first solution was a loop with a vector-based stack of todo items. But it exceeded the time limit as well. Recusion seems to give a consistenly bad rating on memory usage, let alone exponential time in this particular case.\nP.S. Can't believe this task is there for 10 years already. They gave it to me as a daily challenge... indeed it took half a day."
                    },
                    {
                        "username": "northern-flower",
                        "content": "You can use 2 pointers - one in s1 and another in s2 and move the respective one when you find the character of s3 in one of them"
                    },
                    {
                        "username": "rv14",
                        "content": "# I could not understand this program. Please help me to make me understand.\\n\\n\\n# Thank You ...."
                    },
                    {
                        "username": "strawhatdragon",
                        "content": "Need help with the 1D implementation for this.\n```\nclass Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n        int n = s2.length();\n        if(m + n != s3.length()) return false;\n        boolean[] next = new boolean[n+1];\n        next[n] = true;\n        for(int i = m-1; i >= 0; i--) {\n            boolean[] curr = new boolean[n+1];\n            for(int j = n; j >= 0; j--) {\n                if(i < s1.length() && s1.charAt(i) == s3.charAt(i+j) && next[j]) {\n                    curr[j] = next[j];\n                }\n                if(j < s2.length() && s2.charAt(j) == s3.charAt(i+j) && curr[j+1]) {\n                    curr[j] = curr[j+1];\n                }\n            }\n            next = curr;\n        }\n        return next[0];\n    }\n}\n```"
                    },
                    {
                        "username": "sandeepmourya0720",
                        "content": "Can anyone give example for repeating subproblem in this question"
                    },
                    {
                        "username": "olsonpm",
                        "content": "the edge cases on this problem are extremely stupid.  Empty strings should be removed via constraints because the result makes no sense.  Why would 'a', 'b', 'a' be false but 'a', '', 'a' output true, yet '', 'abc', 'ab'  is false ?  Interview problems should have some level of intuition because otherwise we're guess'n'checking the author's mind"
                    },
                    {
                        "username": "tifv",
                        "content": "I don\\'t see the need to guess anyone\\'s mind, at least not in this particular problem. Its description is quite precise, one just needs to read it carefully.\\nIn particular, empty string can be represented as a concatenation of one empty substring (like `n = 1` or `m = 1`).\\nAll the other examples you list should obviously output false, since for `s3` to be an interleaving, its length must be the sum of lengths of `s1` and `s2`."
                    },
                    {
                        "username": "quan_mai",
                        "content": "string + dp = best combo!"
                    }
                ]
            },
            {
                "id": 2030217,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2030197,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2030096,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2030092,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2029995,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2029886,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2029879,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2029827,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2029820,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2029809,
                "content": [
                    {
                        "username": "abhi2616",
                        "content": "Information provided in this question is just not sufficient \\nwho else feel this"
                    },
                    {
                        "username": "sergei99",
                        "content": "Yes it is. Got no problem solving it, excep debugging the bloody thing for 4 hours in a row..."
                    },
                    {
                        "username": "StefanelStan",
                        "content": "Once again, I have to thank LeetCode for pushing DP for 2-3 weeks in a row last month. Today, I easily solved this problem."
                    },
                    {
                        "username": "mahesh105",
                        "content": "Can anyone help to do the follow up question?"
                    },
                    {
                        "username": "tifv",
                        "content": "Notice that in your [solution](https://leetcode.com/submissions/detail/1031603649/) you only ever use two adjacent rows of `dp` matrix (`dp[i]` and `dp[i-1]`). You can rewrite solution in such a way that other rows are not stored in memory. (It is in fact possible to use only one row, overwriting it in each cycle. One has to be careful about the order of operations, though.)"
                    },
                    {
                        "username": "shuchisaini462",
                        "content": "I started solving this but n-m\\u22641 given for partitioning how can we get that up "
                    },
                    {
                        "username": "olzh06",
                        "content": "As I understand it:\\nLet\\'s assume you start with `s1` and split it into `n` parts. Now you can insert `n-1` pieces of `s2` between these `s1` parts. Finally you either have no pieces of `s2` left or a single piece to be append at the end of resulting string. So, it seems the condition will be satisfied automatically if `s3` is interleaving string of `s1` and `s2`"
                    },
                    {
                        "username": "Priyanshu1_618031",
                        "content": "Passed 89/106 test cases, then got Memory limit exceeded error! I really wished my recursive solution to get accepted :( \\nI will attempt again after learning DP."
                    },
                    {
                        "username": "crocedev",
                        "content": "Can\\'t believe I finished a DP problem before finishing my coffee. \\n\\nThanks daily challenges for beating my brain into eventual comprehension!"
                    },
                    {
                        "username": "sergei99",
                        "content": "Done. 0ms and 6.18 Mb, beating 100% and 96.97% respectively. 7 unsuccessful submissions. Dynamic programming, of course, and a light fixed size bitset of 1.3 Kb. Debugged the bloody edge cases for 4 hours in a row with a short lunch break, feel like I've just unloaded a truck of heavy items alone... and for free."
                    },
                    {
                        "username": "mzvic",
                        "content": "s1 = \"ABCDEF\"\\ns2 = \"ABC\"\\noutput = \"DEF\"\\n\\nsomehow, the solution is \"\", i can\\'t understand why"
                    },
                    {
                        "username": "__sunny15__",
                        "content": "here in output string only def is there, it must contain all the s1+s2 in some manner that it satisfies the question.\\n\\nsome possible output can be:\\n\"abcdefabc\", \"abcabcdef\"."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Could you solve it using only O(s2.length) additional memory space? --- just thinking about this"
                    },
                    {
                        "username": "Aqdas_Ali",
                        "content": "I Think we ignore |n-m|<=1 because we cannot take two consecutive substring from the same string therefore we just ignore it correct me if am wrong plz"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "We don\\'t take two consecutive substrings as we can count them as one anyways. We can keep taking the characters from the same string as long as they satisfy the condition."
                    }
                ]
            },
            {
                "id": 2029768,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029709,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029662,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029600,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029564,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029559,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029518,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029479,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029477,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029419,
                "content": [
                    {
                        "username": "a_andreasian",
                        "content": "Am I the only one who has no idea what the task wants?\\n\\n"
                    },
                    {
                        "username": "aitachii",
                        "content": "Why is my recursive solution with `O(s1.length * s2.length)` space faster than my iterative solution with `O(s2.length)` space?"
                    },
                    {
                        "username": "ahrix268",
                        "content": "after more than twice times reading their description, which is also very \"humanity\" as they usually do...\n`|n -m| <= 1` is just a weird condition explaining for a weird example they provided `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`\nbut no need to care about it. e.g.: `s1 = \"a\" + \"b\" + \"c\" + \"d\" (m=4)`, `s2 = \"e\" + \"f\" (n=2)`, `s3 = \"aebfcd\"`. it is not `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"c\" + \"d\"`  (m=4, n=2), because obviously \"c\" and \"d\" are 2 continuous characters in `s1`. it is `s3 = \"a\" + \"e\" + \"b\"+ \"f\" + \"cd\"` (m=3, n=2)\nhence, just ignore it"
                    },
                    {
                        "username": "ahrix268",
                        "content": "I remember when I was a newbie to Leetcode and DP, using pick one randomly and they gave me this problem. I was like how the hell people could solve this shit..."
                    },
                    {
                        "username": "mindstuck",
                        "content": "Why are we ignoring the condition |n-m|<=1?\\nNone of the solutions is checking that condition."
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@ahrix268](/ahrix268) Gotch Thanks!"
                    },
                    {
                        "username": "mindstuck",
                        "content": "[@amitbansal13](/amitbansal13) cool, gotcha thanks!"
                    },
                    {
                        "username": "amitbansal13",
                        "content": "Consider the case s1,s2 and t1,t2,t3,t4\\n\\nWe will have the final string as \\n\\nsomething like s1,t1,s2,t2,t3,t4 - We can consider t2,t3,t4 as one substring \\n\\nSimilar situation for other permutations/cases."
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 i explained in this. conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "JiayingGao",
                        "content": "This is so classic."
                    },
                    {
                        "username": "avigaikwad007",
                        "content": "1. What is meaning by |n - m| <= 1 ?\\n\\nAnd in every solution it ignored. In question\\'s description it is mentioned that interleaving string means concatenate the substrings alternately. \\n2. Am i going wrong with the understanding of the question??"
                    },
                    {
                        "username": "ahrix268",
                        "content": "https://leetcode.com/problems/interleaving-string/description/comments/2029662 conclusion: \"just a weird and obviously condition explaining for their very \"humanity\" example\""
                    },
                    {
                        "username": "bhati25",
                        "content": "<h1>Thank you leetcode daily questions, you have made DP so easy. </h1>\\n<h1>Now DP is \\uD83E\\uDEF6.</h1>"
                    },
                    {
                        "username": "yash___saxena",
                        "content": "It is giving TLE, Some one can help😣, I don't know Why?\njava:  \n\nclass Solution {\n\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if(s1.length()+s2.length()!=s3.length())\n        return false;\n        Boolean dp[][]=new Boolean[s1.length()+1][s2.length()+1];\n        return interleave(0,0,0,dp,s1,s2,s3);\n    }\n    boolean interleave(int i,int j,int k,Boolean dp[][],String s1,String s2,String s3)\n    {\n        if(dp[i][j]!=null)\n        return dp[i][j];\n         while(k<s3.length())\n            {\n                if(i<s1.length() &&  j<s2.length()  && s3.charAt(k)==s2.charAt(j) && s3.charAt(k)==s1.charAt(i))\n              {\n                return dp[i][j]=interleave(i+1,j,k+1,dp,s1,s2,s3)|| interleave(i,j+1,k+1,dp,s1,s2,s3); \n              }\n            else if(i<s1.length() && s3.charAt(k)==s1.charAt(i))\n            {\n                i++;\n\n            }\n            else if( j<s2.length() && s3.charAt(k)==s2.charAt(j))\n            {\n              j++;\n            }\n            else\n            return dp[i][j]=false;\n            k++;\n        }\n        if(i==s1.length() && j==s2.length())\n        return dp[i][j]=true;\n        else\n        return dp[i][j]=false;\n    }\n}"
                    },
                    {
                        "username": "Noobcoooooder",
                        "content": "This Question makes my mind more Curious and Puzzled."
                    }
                ]
            },
            {
                "id": 2029248,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 2029134,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 2029075,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 2029021,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 2029017,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 2020501,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 2014006,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 1967139,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 1953238,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            },
            {
                "id": 1926683,
                "content": [
                    {
                        "username": "dEAthWednesday",
                        "content": "passed 72 test cases plz help me\\nclass Solution {\\npublic:\\n    bool isInterleave(string s1, string s2, string s3) {\\n        \\n        int n1 = s1.size();\\n        int n2 = s2.size();\\n        int n3 = s3.size();\\n        if (n1 + n2 != n3) {\\n            return false;\\n        }\\n\\n        queue<char> q1,q2;\\n\\n        for(int i=0;i<n1;i++){\\n            q1.push(s1[i]);\\n        }\\n        for(int i=0;i<n2;i++){\\n            q2.push(s2[i]);\\n        }\\n\\n        int i=0;\\n        while(!q1.empty() && !q2.empty() && i< n3){\\n            while(i<n3 && s3[i]==q1.front()){\\n                q1.pop();\\n                i++;\\n            }\\n            while(i<n3 && s3[i]==q2.front()){\\n                q2.pop();\\n                i++;\\n            }\\n            if(s3[i]!=q1.front() && s3[i]!=q2.front()){\\n                return false;\\n            }\\n        }\\n        while(!q1.empty() && i<n3){\\n            if(s3[i]==q1.front()){\\n                i++;\\n                q1.pop();\\n            }\\n            else return false;\\n        }\\n        while(!q2.empty() && i<n3){\\n            if(s3[i]==q2.front()){\\n                i++;\\n                q2.pop();\\n            }\\n            else return false;\\n        }\\n        return q1.empty() && q2.empty() && i == n3;\\n    }\\n};\\n// failed for s1 = \"a\" s2 = \"b\" s3=\"ab\""
                    },
                    {
                        "username": "sexyshit66",
                        "content": "  Can someone explain where is my code missing  to solve this problem\n\n class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        a, b, c = 0, 0, 0\n        while c < len(s3):\n            if a < len(s1) and s3[c] == s1[a]:\n                a += 1\n            elif b < len(s2) and s3[c] == s2[b]:\n                b += 1\n            else:\n                return False\n            c += 1\n        return True "
                    },
                    {
                        "username": "Sword0fDamoc1es",
                        "content": "it shouldn\\'t be elif, for you need to check increment of a and b within the same c. Thus, both increment on a and b should be consider at the same time."
                    },
                    {
                        "username": "ingato",
                        "content": "Man, LeetCode really need to do a better job at explaining what they mean on a problem. It is not obvious AT ALL why the second example does not work. After doing a full implementation and trying to understand why my code is not working I finally realized that in order to work all the letters need to stay in the same order. Why can\\'t they just say that? "
                    },
                    {
                        "username": "tifv",
                        "content": "It follows directly from the given definition of \\u201Cinterleaving\\u201D. Relation $s = s_{1} + s_{2} + ... + s_{n}$ implies that $s_{1}$, \\u2026 $s_{n}$ form $s$ in that particular order; this is the same relative order in which they appear in the interleaved concatenations.\\n\\nLeetCode does not always succeed at giving clear problem statements, but in this particular case the definition is quite precise, in my opinion; example are not necessary to understand it."
                    },
                    {
                        "username": "bbbbeetroot",
                        "content": "This question looks lovely after the hard weekend"
                    },
                    {
                        "username": "psionl0",
                        "content": "The weekend is yet to come."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Oops \\uD83D\\uDE2C"
                    },
                    {
                        "username": "user8272RT",
                        "content": "Initially I used a 3D table. Had to check the solution to figure out the 2D tabulation trick."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "For those who concern the constrain |n-m| <= 1, it is intrinsically right, you can do a small proof and you can see that. "
                    },
                    {
                        "username": "keshav3899",
                        "content": "Is there any way to solve this using LCS ?"
                    },
                    {
                        "username": "Hidden_Line",
                        "content": "Yes, it\\'s kind of LCS. Analyze deeply. "
                    },
                    {
                        "username": "boliu1997",
                        "content": "By definition of substring which requires it to be non-empty, the following testcase should give false instead of true:\\n\\ns1 = \"deeff\"\\ns2 = \"abbcc\"\\ns3 = \"abbccdeeff\"\\n\\nbecause the first substring of s1 has to be empty \"\"."
                    },
                    {
                        "username": "psionl0",
                        "content": "In every test case, you will reach the end of one of the substrings before reaching the end of the other. Therefore, every test case would return false by your definition."
                    },
                    {
                        "username": "rohith1002",
                        "content": "\\nCan anyone tell whether this code is right , I\\'m able to pass 61 case and getting TLE , if these code is wrong pls let me know where did i go wrong. If this code is right pls help me in implementing dp !!!\\n \\n```\\nbool solve(string s1,string s2,int i,int j,string s3,bool flag,string temp)\\n  {\\n    if(temp==s3)\\n    return 1;\\n\\n    bool ans=0;\\n    if(flag)\\n    {\\n      for(int k=j+1;k<=s2.length();k++)\\n        ans=ans || solve(s1,s2,i,k,s3,0,temp+s2.substr(j,k-j));\\n    }\\n    else\\n    {\\n      for(int k=i+1;k<=s1.length();k++)\\n        ans=ans || solve(s1,s2,k,j,s3,1,temp+s1.substr(i,k-i));\\n    }\\n    return ans;\\n  }\\n  bool isInterleave(string s1, string s2, string s3) {\\n\\n    if(s1.length()+s2.length()!=s3.length())\\n    return 0;\\n    \\n    return solve(s1,s2,0,0,s3,0,\"\") || solve(s1,s2,0,0,s3,1,\"\");\\n  }\\n```"
                    },
                    {
                        "username": "psionl0",
                        "content": "Without memoization your code will repeatedly calculate the same sub cases over and over again."
                    }
                ]
            }
        ]
    },
    {
        "title": "Rising Temperature",
        "question_content": "<p>Table: <code>Weather</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nThis table contains information about the temperature on a certain day.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find all dates&#39; <code>Id</code> with higher temperatures compared to its previous dates (yesterday).</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+\n<strong>Output:</strong> \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+\n<strong>Explanation:</strong> \nIn 2015-01-02, the temperature was higher than the previous day (10 -&gt; 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -&gt; 30).\n</pre>\n",
        "solutions": [
            {
                "id": 1308831,
                "title": "faster-easy",
                "content": "***Do upvote if you like the solution to keep me motivated*** \\uD83D\\uDE0A\\u270C\\n```\\nSELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55619,
                "title": "simple-solution",
                "content": "    SELECT wt1.Id \\n    FROM Weather wt1, Weather wt2\\n    WHERE wt1.Temperature > wt2.Temperature AND \\n          TO_DAYS(wt1.DATE)-TO_DAYS(wt2.DATE)=1;\\n\\n\\nEXPLANATION:\\n\\n**TO_DAYS(wt1.DATE)** return the number of days between from year 0 to date DATE\\n**TO_DAYS(wt1.DATE)-TO_DAYS(wt2.DATE)=1** check if wt2.DATE is yesterday respect to wt1.DATE\\n\\nWe select from the joined tables the rows that have \\n\\n**wt1.Temperature > wt2.Temperature** \\n\\nand difference between dates in days of 1 (yesterday):\\n\\n**TO_DAYS(wt1.DATE)-TO_DAYS(wt2.DATE)=1;**",
                "solutionTags": [],
                "code": "    SELECT wt1.Id \\n    FROM Weather wt1, Weather wt2\\n    WHERE wt1.Temperature > wt2.Temperature AND \\n          TO_DAYS(wt1.DATE)-TO_DAYS(wt2.DATE)=1;\\n\\n\\nEXPLANATION:\\n\\n**TO_DAYS(wt1.DATE)** return the number of days between from year 0 to date DATE\\n**TO_DAYS(wt1.DATE)-TO_DAYS(wt2.DATE)=1** check if wt2.DATE is yesterday respect to wt1.DATE\\n\\nWe select from the joined tables the rows that have \\n\\n**wt1.Temperature > wt2.Temperature** \\n\\nand difference between dates in days of 1 (yesterday):\\n\\n**TO_DAYS(wt1.DATE)-TO_DAYS(wt2.DATE)=1;**",
                "codeTag": "Unknown"
            },
            {
                "id": 3716884,
                "title": "mysql-simple-and-clean-beats-88",
                "content": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n\\n## Intuition\\n\\nThe problem requires us to find all the dates with higher temperatures compared to their previous dates (yesterday). To solve this, we need to compare each date\\'s temperature with the temperature of the previous date.\\n\\n## Approach\\n\\nTo solve the problem, we can use the following approach:\\n\\n1. Join the Weather table with itself, denoting the first occurrence as `w1` and the second occurrence as `w2`.\\n2. Compare the dates of `w1` and `w2` using the `DATEDIFF()` function to check if they are consecutive days (with a difference of 1 day).\\n3. Add a condition in the WHERE clause to select the rows where the temperature of `w1` is greater than the temperature of `w2`.\\n4. Select the `id` of `w1` as the result.\\n\\nThe SQL query for the above approach is as follows:\\n\\n```sql\\nSELECT w1.id\\nFROM Weather w1, Weather w2\\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature;\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n\\n## Intuition\\n\\nThe problem requires us to find all the dates with higher temperatures compared to their previous dates (yesterday). To solve this, we need to compare each date\\'s temperature with the temperature of the previous date.\\n\\n## Approach\\n\\nTo solve the problem, we can use the following approach:\\n\\n1. Join the Weather table with itself, denoting the first occurrence as `w1` and the second occurrence as `w2`.\\n2. Compare the dates of `w1` and `w2` using the `DATEDIFF()` function to check if they are consecutive days (with a difference of 1 day).\\n3. Add a condition in the WHERE clause to select the rows where the temperature of `w1` is greater than the temperature of `w2`.\\n4. Select the `id` of `w1` as the result.\\n\\nThe SQL query for the above approach is as follows:\\n\\n```sql\\nSELECT w1.id\\nFROM Weather w1, Weather w2\\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2386995,
                "title": "three-different-solutions-datediff-subdate",
                "content": "```\\n# 1.\\nSELECT w2.id from Weather w1,Weather w2\\nWHERE datediff(w2.recordDate, w1.recordDate) = 1 AND w2.temperature > w1.temperature;\\n// where datediff -> date difference b/w two dates\\n# 2.\\nSELECT w2.id from Weather w1, Weather w2\\nWHERE w2.temperature > w1.temperature AND\\nsubdate(w2.recordDate, 1) = w1.recordDate;\\n// where subdate -> subtract date \\n\\n#3.\\nSELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;\\n```\\n**If you have any doubts, feel free to ask...\\nIf you understand the concept. Don\\'t Forget to upvote \\uD83D\\uDE0A**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# 1.\\nSELECT w2.id from Weather w1,Weather w2\\nWHERE datediff(w2.recordDate, w1.recordDate) = 1 AND w2.temperature > w1.temperature;\\n// where datediff -> date difference b/w two dates\\n# 2.\\nSELECT w2.id from Weather w1, Weather w2\\nWHERE w2.temperature > w1.temperature AND\\nsubdate(w2.recordDate, 1) = w1.recordDate;\\n// where subdate -> subtract date \\n\\n#3.\\nSELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3218931,
                "title": "197-beats-92-26-solution-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nExplanation:\\n\\n- The query selects the id from Weather table where the temperature on a certain day is higher than its previous day.\\n- It uses a self join to compare the temperature of each day with its previous day. The w1 and w2 aliases are used to distinguish between the two instances of the Weather table being joined.\\n- The JOIN condition matches records where w1\\'s recordDate is equal to w2\\'s recordDate plus one day, effectively joining each record with its previous day\\'s record.\\n- The WHERE clause filters records where the temperature on the current day (w1) is higher than the temperature on the previous day (w2).\\n- Finally, the query selects the id from the Weather table for the records that match the JOIN and WHERE conditions.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT w1.id\\nFROM Weather w1\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\nWHERE w1.temperature > w2.temperature\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT w1.id\\nFROM Weather w1\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\nWHERE w1.temperature > w2.temperature\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3700586,
                "title": "easy-understandible-solution",
                "content": "# Code\\n```\\nSELECT w2.id\\nFROM Weather w1\\njoin Weather w2\\nON DATEDIFF (w1.recordDate ,w2.recordDate ) = -1\\nAND w2.temperature>w1.temperature   \\n```PLEASE UPVOTE TO MOTIVATE ME WRITE MORE SOLUTION",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT w2.id\\nFROM Weather w1\\njoin Weather w2\\nON DATEDIFF (w1.recordDate ,w2.recordDate ) = -1\\nAND w2.temperature>w1.temperature   \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55620,
                "title": "my-simple-solution-using-inner-join",
                "content": "    SELECT t1.Id\\n    FROM Weather t1\\n    INNER JOIN Weather t2\\n    ON TO_DAYS(t1.Date) = TO_DAYS(t2.Date) + 1\\n    WHERE t1.Temperature > t2.Temperatur",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "    SELECT t1.Id\\n    FROM Weather t1\\n    INNER JOIN Weather t2\\n    ON TO_DAYS(t1.Date) = TO_DAYS(t2.Date) + 1\\n    WHERE t1.Temperature > t2.Temperatur",
                "codeTag": "Unknown"
            },
            {
                "id": 1522560,
                "title": "5-solutions-with-different-date-functions-in-mysql",
                "content": "The main catch of this problem is how we can compare todays\\' temperature with yesterdays\\' temperature. \\n\\nI thought it should be great to list all the MySQL methods we can use to calculate the time difference `RecordDate - 1` \\n\\n1. Using `DATE_SUB`\\n``` \\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE DATE_SUB(w1.RecordDate, interval 1 Day) = w2.RecordDate \\nAND w1.Temperature > w2.Temperature;\\n```\\n\\n2. Using `DATEDIFF`\\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE DATEDIFF(w1.RecordDate, w2.RecordDate)=1\\nAND w1.Temperature > w2.Temperature;\\n```\\n3. `SUBDATE`(solution 1)\\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE w2.RecordDate = subdate(w1.RecordDate, 1) /*This is w1.RecordDate with 1*/\\nAND w1.Temperature > w2.Temperature;\\n```\\n4. `SUBDATE`(solution 2)\\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE w1.RecordDate = subdate(w2.RecordDate, -1) /*This is w2.RecordDate with -1*/\\nAND w1.Temperature > w2.Temperature;\\n```\\n5. Using `TO_DAYS`\\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE TO_DAYS(w1.RecordDate) - TO_DAYS(w2.RecordDate) = 1\\nAND w1.Temperature > w2.Temperature;\\n```\\n\\nHope it will help.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "``` \\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE DATE_SUB(w1.RecordDate, interval 1 Day) = w2.RecordDate \\nAND w1.Temperature > w2.Temperature;\\n```\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE DATEDIFF(w1.RecordDate, w2.RecordDate)=1\\nAND w1.Temperature > w2.Temperature;\\n```\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE w2.RecordDate = subdate(w1.RecordDate, 1) /*This is w1.RecordDate with 1*/\\nAND w1.Temperature > w2.Temperature;\\n```\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE w1.RecordDate = subdate(w2.RecordDate, -1) /*This is w2.RecordDate with -1*/\\nAND w1.Temperature > w2.Temperature;\\n```\n```\\nSELECT\\n    w1.Id\\nFROM weather w1, weather w2\\nWHERE TO_DAYS(w1.RecordDate) - TO_DAYS(w2.RecordDate) = 1\\nAND w1.Temperature > w2.Temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3438022,
                "title": "superb-logic-query",
                "content": "# DATEDIFF Concept\\n```\\nselect x.id from weather x,weather y\\nwhere x.temperature>y.temperature and DATEDIFF(x.recordDate,y.recordDate)=1\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect x.id from weather x,weather y\\nwhere x.temperature>y.temperature and DATEDIFF(x.recordDate,y.recordDate)=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55662,
                "title": "two-solutions",
                "content": "1.\\n\\n    SELECT a.Id FROM Weather AS a, Weather AS b\\n    WHERE DATEDIFF(a.Date, b.Date)=1 AND a.Temperature > b.Temperature\\n\\n2.\\n\\n    SELECT Id FROM (\\n        SELECT CASE\\n            WHEN Temperature > @prevtemp AND DATEDIFF(Date, @prevdate) = 1 THEN Id ELSE NULL END AS Id,\\n            @prevtemp:=Temperature,\\n            @prevdate:=Date\\n        FROM Weather, (SELECT @prevtemp:=NULL) AS A, (SELECT @prevdate:=NULL) AS B ORDER BY Date ASC\\n    ) AS D WHERE Id IS NOT NULL",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "1.\\n\\n    SELECT a.Id FROM Weather AS a, Weather AS b\\n    WHERE DATEDIFF(a.Date, b.Date)=1 AND a.Temperature > b.Temperature\\n\\n2.\\n\\n    SELECT Id FROM (\\n        SELECT CASE\\n            WHEN Temperature > @prevtemp AND DATEDIFF(Date, @prevdate) = 1 THEN Id ELSE NULL END AS Id,\\n            @prevtemp:=Temperature,\\n            @prevdate:=Date\\n        FROM Weather, (SELECT @prevtemp:=NULL) AS A, (SELECT @prevdate:=NULL) AS B ORDER BY Date ASC\\n    ) AS D WHERE Id IS NOT NULL",
                "codeTag": "Unknown"
            },
            {
                "id": 3644783,
                "title": "concise-solution-with-selfjoin-mysql",
                "content": "# Intuition and Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSo coming to the explanation is pretty easy.\\nComing to the explanation where we using selfjoin concepts on the dates.\\n\\n```\\nSelf-Join Syntax:\\n\\nSELECT column_name(s)\\nFROM table1 T1, table1 T2\\nWHERE condition;\\n```\\n\\nSo in this question we were aksed to find the id of where the temperature is increased than the previous date.\\nWe used ```datediff(current_date,prev_date)=1 this is means we are comapring with yesterday and one more condition is current.temp > prev.temp.```\\n\\n## Please Upvote if you like the explanation.I appreciate it.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect w1.id \\nfrom Weather w1,Weather w2\\nwhere datediff(w1.recordDate,w2.recordDate)=1 and w1.temperature > w2.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelf-Join Syntax:\\n\\nSELECT column_name(s)\\nFROM table1 T1, table1 T2\\nWHERE condition;\\n```\n```datediff(current_date,prev_date)=1 this is means we are comapring with yesterday and one more condition is current.temp > prev.temp.```\n```\\n# Write your MySQL query statement below\\nSelect w1.id \\nfrom Weather w1,Weather w2\\nwhere datediff(w1.recordDate,w2.recordDate)=1 and w1.temperature > w2.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2507742,
                "title": "mysql-simple-and-clean-solution",
                "content": "**Please Upvote if it helped you !!!**\\n```\\nselect t1.id as id from weather t1 \\ninner join weather t2 \\nwhere t1.temperature >t2.temperature and datediff(t1.recorddate ,t2.recorddate)=1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect t1.id as id from weather t1 \\ninner join weather t2 \\nwhere t1.temperature >t2.temperature and datediff(t1.recorddate ,t2.recorddate)=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1971476,
                "title": "easy-to-understand-sql",
                "content": "```\\nselect\\n    A.id\\nfrom\\n    weather A, weather B\\nwhere \\n    datediff(A.recordDate, B.recordDate)= 1\\nand\\n    A.temperature > B.temperature;\\n    \\n```\\n\\nIf you have any **doubts**, feel **free to ask**...\\nIf you understand the **concept**. Don\\'t Forget to **upvote** \\uD83D\\uDE0A\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n    A.id\\nfrom\\n    weather A, weather B\\nwhere \\n    datediff(A.recordDate, B.recordDate)= 1\\nand\\n    A.temperature > B.temperature;\\n    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1114624,
                "title": "using-lag",
                "content": "```\\nSELECT id\\nFROM\\n(SELECT *, \\n    LAG(temperature,1) OVER (ORDER BY recordDate)  as prevTemp,\\n    LAG(recordDate,1) OVER (ORDER BY recordDate)  as prevDate\\n    FROM Weather) a\\nWHERE temperature > prevTemp\\nAND DATEDIFF(day,recordDate,prevDate) = -1 \\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id\\nFROM\\n(SELECT *, \\n    LAG(temperature,1) OVER (ORDER BY recordDate)  as prevTemp,\\n    LAG(recordDate,1) OVER (ORDER BY recordDate)  as prevDate\\n    FROM Weather) a\\nWHERE temperature > prevTemp\\nAND DATEDIFF(day,recordDate,prevDate) = -1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3549798,
                "title": "implementation-using-datediff-and-dateadd-with-explanation",
                "content": "\\n# Code\\n``` DateDIFF []\\nSELECT w1.id as Id \\nFROM Weather as w1, Weather as w2\\nWHERE w1.temperature > w2.temperature\\nAND DATEDIFF( DAY, w2.recordDate, w1.recordDate) = 1\\n```\\n``` DateADD []\\nSELECT w1.id as Id \\nFROM Weather as w1, Weather as w2\\nWHERE w1.temperature > w2.temperature\\nAND w1.recordDate = DATEADD( DAY, 1, w2.recordDate)\\n```\\n\\nSince you need to **compare date values** and you have only **one table**, the direct choice is to use **self joins**. \\nThe above implementation is one way to self join table **without using** \\'*JOIN*\\' and \\'*ON*\\'.\\n\\n`DATEDIFF` and `DATEADD` are two functions in SQL Server that are used to manipulate dates.\\n\\n\\n# DateDIFF \\n**DATEDIFF** function returns the difference between two dates in terms of the specified datepart. The syntax for DATEDIFF is as follows:\\n`DATEDIFF(datepart,startdate,enddate)`\\n\\n1. In the problem, the `datepart` will be `day` (other dateparts can be found [here](https://learn.microsoft.com/en-us/sql/t-sql/functions/datediff-transact-sql?view=sql-server-ver16#arguments))\\n2. The `startdate` will be the previous date\\n3. The `enddate` will be the next date\\n4. The `DATEDIFF should be 1`, i.e., there is 1 day difference between our startdate and enddate.\\n\\n# DateADD \\n**DATEADD** function adds a specified number of intervals (such as days, months, or years) to a date and returns a new date. The syntax for DATEADD is as follows:\\n`DATEADD(interval,number,date)`\\n1. The `interval` is same as datepart. For our problem, our interval is `day`. \\n2. The `number` is the amount that you want to add to the date. For us, it is `1`\\n3. The `date` is the previous date and we use it to add the `number` and check with the nextDate.\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "``` DateDIFF []\\nSELECT w1.id as Id \\nFROM Weather as w1, Weather as w2\\nWHERE w1.temperature > w2.temperature\\nAND DATEDIFF( DAY, w2.recordDate, w1.recordDate) = 1\\n```\n``` DateADD []\\nSELECT w1.id as Id \\nFROM Weather as w1, Weather as w2\\nWHERE w1.temperature > w2.temperature\\nAND w1.recordDate = DATEADD( DAY, 1, w2.recordDate)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2423953,
                "title": "mysql-2-different-approach-beginner-level-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome**.*\\n______________________\\n\\u2705 **MySQL Code :**\\n***Approach 1:***\\n**Runtime:** 418 ms, faster than 86.29% of MySQL online submissions for Rising Temperature.\\n```\\nSELECT a.id as Id\\nFROM weather a , weather b\\nWHERE DATEDIFF(a.recordDate , b.recordDate)= 1 AND a.temperature > b.temperature; \\n```\\n**Runtime:** 418 ms\\n**Memory Usage:**  0B\\n__________________________________\\n***Approach 2***:\\n**Runtime:** 417 ms, faster than 86.59% of MySQL online submissions for Rising Temperature.\\n```\\nSELECT w1.Id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1\\n```\\t  \\n**Runtime:** 418 ms\\n**Memory Usage:**  0B\\n_________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT a.id as Id\\nFROM weather a , weather b\\nWHERE DATEDIFF(a.recordDate , b.recordDate)= 1 AND a.temperature > b.temperature; \\n```\n```\\nSELECT w1.Id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3529199,
                "title": "mysql-solution-for-rising-temperature-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given query selects the IDs from the \"Weather\" table for records where the temperature on a particular date (w1) is higher than the temperature on the previous date (w2) for consecutive days.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. It performs a self-join on the \"Weather\" table, creating two aliases, w1 and w2, representing different instances of the table.\\n2. The join condition is datediff(w1.RecordDate, w2.RecordDate) = 1, which ensures that the dates for w1 and w2 are consecutive.\\n3. The condition w1.Temperature > w2.Temperature checks if the temperature on the current day (w1) is higher than the temperature on the previous day (w2).\\n4. The query selects the IDs (w1.id) for the matching records.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query depends on the size of the \"Weather\" table and the efficiency of indexing on the \"RecordDate\" and \"Temperature\" columns. In the worst case, the query may require a full table scan or an index scan, resulting in a time complexity of O(N), where N is the number of rows in the table. The datediff function can also contribute to the time complexity, but its impact is typically negligible compared to the overall query execution.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this query is determined by the memory required to process the join operation and store the result set. The space complexity is generally proportional to the size of the result set. If the result set is large, it may require additional memory resources to store and return the data. However, if the result set is relatively small compared to the total table size, the impact on space complexity is minimal.\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect w1.id from Weather as w1, Weather as w2\\nwhere datediff(w1.RecordDate, w2.RecordDate) = 1 and w1.Temperature > w2.Temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect w1.id from Weather as w1, Weather as w2\\nwhere datediff(w1.RecordDate, w2.RecordDate) = 1 and w1.Temperature > w2.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55672,
                "title": "my-simple-solution",
                "content": "select w1.id \\nfrom Weather w1, Weather w2 \\nwhere (DATEDIFF(w1.Date, w2.Date) = 1) AND w1.Temperature > w2.Temperature",
                "solutionTags": [],
                "code": "select w1.id \\nfrom Weather w1, Weather w2 \\nwhere (DATEDIFF(w1.Date, w2.Date) = 1) AND w1.Temperature > w2.Temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 3796586,
                "title": "sql-cartesian-join-datediff-easy-to-understand",
                "content": "\\n![image.png](https://assets.leetcode.com/users/images/155e784c-1690-4960-96de-302469345e50_1689937627.06149.png)\\n\\n\\n# Code\\n```\\nselect w1.id\\nfrom Weather w1, Weather w2\\nwhere DATEDIFF(w1.recordDate, w2.recordDate) = 1 and w1.temperature > w2.temperature;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nselect w1.id\\nfrom Weather w1, Weather w2\\nwhere DATEDIFF(w1.recordDate, w2.recordDate) = 1 and w1.temperature > w2.temperature;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1964678,
                "title": "mysql-and-ms-sql-solutions",
                "content": "MySQL solutions:\\n```\\nSELECT w2.Id \\nFROM Weather w1\\nINNER JOIN Weather w2 ON DATEDIFF(w2.recordDate, w1.recordDate)=1 AND w2.Temperature > w1.Temperature\\n```\\n\\n\\nMS SQL solution:\\n```\\nSELECT w2.Id \\nFROM Weather w1\\nINNER JOIN Weather w2 ON DATEDIFF(day, w1.recordDate, w2.recordDate)=1 AND w2.Temperature > w1.Temperature\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT w2.Id \\nFROM Weather w1\\nINNER JOIN Weather w2 ON DATEDIFF(w2.recordDate, w1.recordDate)=1 AND w2.Temperature > w1.Temperature\\n```\n```\\nSELECT w2.Id \\nFROM Weather w1\\nINNER JOIN Weather w2 ON DATEDIFF(day, w1.recordDate, w2.recordDate)=1 AND w2.Temperature > w1.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55649,
                "title": "solution-with-mysql-built-in-function",
                "content": "    SELECT \\n        t1.Id\\n    From \\n        Weather t1, Weather t2\\n    WHERE \\n        t1.Temperature > t2.Temperature\\n    AND\\n        subdate(t1.Date, 1) = t2.Date\\n\\nMySQL SUBDATE() subtracts a time value (as interval) from a given date.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "    SELECT \\n        t1.Id\\n    From \\n        Weather t1, Weather t2\\n    WHERE \\n        t1.Temperature > t2.Temperature\\n    AND\\n        subdate(t1.Date, 1) = t2.Date\\n\\nMySQL SUBDATE() subtracts a time value (as interval) from a given date.",
                "codeTag": "Unknown"
            },
            {
                "id": 55629,
                "title": "a-simple-straightforward-solution-and-it-s-very-fast",
                "content": "    select w1.Id Id from Weather w1, Weather w2 where datediff(w1.Date,w2.Date)=1 and w1.Temperature>w2.Temperature",
                "solutionTags": [],
                "code": "    select w1.Id Id from Weather w1, Weather w2 where datediff(w1.Date,w2.Date)=1 and w1.Temperature>w2.Temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 3881503,
                "title": "pandas-simple-solution",
                "content": "# Intuition\\nSort days, select consecutive days with increasing temperature\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst we sort the table so that we only have to compare consecutive rows. Next we filter over two conditions: 1) the temperature must be rising and 2) the difference in dates should be one day.\\n\\nNote that difference of dates is of type `np.timedelta64t`. We use `.dt.days` to convert it into an integer day count. Alternatively, we could compare the date difference directly to \"1 day\" typed properly: `weather.recordDate.diff() == np.timedelta64(1, \\'D\\')`. Not sure which way is more proper, but the complexity is obviously the same.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n \\\\log n)$$ due to neccessity of sorting\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ - bound by size of output\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather.sort_values(by=\\'recordDate\\', inplace=True)\\n    return weather[\\n        (weather.temperature.diff() > 0)\\n      & (weather.recordDate.diff().dt.days == 1)\\n    ][[\\'id\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather.sort_values(by=\\'recordDate\\', inplace=True)\\n    return weather[\\n        (weather.temperature.diff() > 0)\\n      & (weather.recordDate.diff().dt.days == 1)\\n    ][[\\'id\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1887936,
                "title": "simple-and-clean-date-diff-mysql-and-ms-sql",
                "content": "**MySQL**:\\n```\\nSELECT Today.id FROM Weather Today, Weather Yesterday\\nWHERE DATEDIFF(Today.recordDate, Yesterday.recordDate) = 1\\nAND Today.temperature > Yesterday.temperature\\n```\\n\\n**MS SQL**:\\n```\\nSELECT Today.id FROM Weather Today, Weather Yesterday\\nWHERE DATEDIFF(DAY, Today.recordDate, Yesterday.recordDate) = -1\\nAND Today.temperature > Yesterday.temperature\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nSELECT Today.id FROM Weather Today, Weather Yesterday\\nWHERE DATEDIFF(Today.recordDate, Yesterday.recordDate) = 1\\nAND Today.temperature > Yesterday.temperature\\n```\n```\\nSELECT Today.id FROM Weather Today, Weather Yesterday\\nWHERE DATEDIFF(DAY, Today.recordDate, Yesterday.recordDate) = -1\\nAND Today.temperature > Yesterday.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2444928,
                "title": "simple-solution-explanation-datediff-mysql-solution",
                "content": "```\\n# MySQL DATEDIFF() returns the number of days between two dates or datetimes\\n\\nSELECT w1.id FROM Weather w1, Weather w2 \\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# MySQL DATEDIFF() returns the number of days between two dates or datetimes\\n\\nSELECT w1.id FROM Weather w1, Weather w2 \\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1538722,
                "title": "simple-datediff-soluiton",
                "content": "```\\nselect w1.id\\nfrom Weather w1\\njoin Weather w2\\nwhere w1.temperature > w2.temperature \\nand DATEDIFF(w1.RecordDate, w2.RecordDate)=1\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect w1.id\\nfrom Weather w1\\njoin Weather w2\\nwhere w1.temperature > w2.temperature \\nand DATEDIFF(w1.RecordDate, w2.RecordDate)=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3254419,
                "title": "easy-to-understand-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect A.id\\nfrom weather A, weather B\\nwhere datediff(A.recordDate, B.recordDate)= 1\\nand A.temperature > B.temperature;\\n    \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect A.id\\nfrom weather A, weather B\\nwhere datediff(A.recordDate, B.recordDate)= 1\\nand A.temperature > B.temperature;\\n    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1399980,
                "title": "2-simple-sql-solutions",
                "content": "Solution 1 using DateDiff()\\n\\n```\\nselect w1.id from Weather w1, Weather w2\\nwhere w1.Temperature  > w2.Temperature AND DATEDIFF(w1.recordDate,w2.recordDate)=1\\n```\\n\\nSolution 2 using To_Days()\\n\\n```\\nSELECT w1.Id \\nFROM Weather w1, Weather w2\\nWHERE w1.Temperature > w2.Temperature AND \\n      TO_DAYS(w1.recordDate )-TO_DAYS(w2.recordDate )=1;",
                "solutionTags": [],
                "code": "```\\nselect w1.id from Weather w1, Weather w2\\nwhere w1.Temperature  > w2.Temperature AND DATEDIFF(w1.recordDate,w2.recordDate)=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1139635,
                "title": "mysql-faster-than-92",
                "content": "```\\nSELECT w2.id FROM Weather w1, Weather w2 \\nWHERE w2.recordDate = w1.recordDate + INTERVAL 1 DAY AND w2.temperature > w1.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT w2.id FROM Weather w1, Weather w2 \\nWHERE w2.recordDate = w1.recordDate + INTERVAL 1 DAY AND w2.temperature > w1.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55653,
                "title": "my-first-sql-query",
                "content": "select a.Id as Id\\n        from \\n        Weather as a\\n        join\\n        Weather as b\\n        ON\\n        b.Date = subdate(a.Date,1)\\n        where \\n        a.Temperature > b.Temperature;",
                "solutionTags": [],
                "code": "select a.Id as Id\\n        from \\n        Weather as a\\n        join\\n        Weather as b\\n        ON\\n        b.Date = subdate(a.Date,1)\\n        where \\n        a.Temperature > b.Temperature;",
                "codeTag": "Unknown"
            },
            {
                "id": 3548974,
                "title": "using-window-function-and-cte",
                "content": "# Intuition\\nTo solve this problem we need to compare current and previous temperature of two \"consecutive dates\" \\n\\n# Approach\\nFOR TEMPERATURE:\\n\\nTo achieve this, we need to have the consecutive dates in proper order thats why I have applied \"order by recordDate\"\\nNow to compare temperatures, we need both previous and current temperature.\\nCurrent temperature we already have, all we need is the previous one which can be achieved by \"lag()\", Lag function will add a new column having previous temperature beside the current one.\\nHence applied a condition in final query to make sure temperature of next date is greater than the previous.\\n\\n\\nFOR DATE:\\nNow, to make sure we are comparing temperature of previous date(yesterday), again applied a lag() to recordDate and therefore applied a condition in final query which makes sure the date difference is 1.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nWITH CTE AS(\\nSELECT id, \\n       recordDate, \\n       temperature,\\n       lag(temperature) over(order by recordDate) as pre_temp,\\n       lag(recordDate) over(order by recordDate) as pre_date\\nFROM Weather\\n)\\nSELECT id as Id \\nFROM CTE \\nWHERE temperature>pre_temp AND datediff(recordDate,pre_date)=1\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH CTE AS(\\nSELECT id, \\n       recordDate, \\n       temperature,\\n       lag(temperature) over(order by recordDate) as pre_temp,\\n       lag(recordDate) over(order by recordDate) as pre_date\\nFROM Weather\\n)\\nSELECT id as Id \\nFROM CTE \\nWHERE temperature>pre_temp AND datediff(recordDate,pre_date)=1\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2169224,
                "title": "mysql-easiest-solution",
                "content": "```\\nselect w1.id from Weather w1,Weather w2 where DateDiff(w1.recordDate,w2.recordDate)=1 and \\nw1.temperature > w2.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect w1.id from Weather w1,Weather w2 where DateDiff(w1.recordDate,w2.recordDate)=1 and \\nw1.temperature > w2.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1326477,
                "title": "oracle-lag",
                "content": "```\\nselect t.id as ID\\n  from (select w.id,\\n            --   w.recorddate,\\n               w.temperature as tt,\\n             --  lag(w.recorddate, 1) over(order by w.recorddate) as dt,\\n               w.recorddate - lag(w.recorddate, 1) over(order by w.recorddate) as dtmin,\\n               lag(w.temperature, 1) over(order by w.recorddate) as tmp\\n          from weather w) t\\n where dtmin = 1\\n   and t.tt > t.tmp\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect t.id as ID\\n  from (select w.id,\\n            --   w.recorddate,\\n               w.temperature as tt,\\n             --  lag(w.recorddate, 1) over(order by w.recorddate) as dt,\\n               w.recorddate - lag(w.recorddate, 1) over(order by w.recorddate) as dtmin,\\n               lag(w.temperature, 1) over(order by w.recorddate) as tmp\\n          from weather w) t\\n where dtmin = 1\\n   and t.tt > t.tmp\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 817353,
                "title": "mysql-easy-to-follow",
                "content": "```\\nSELECT w1.id\\nFROM Weather w1, Weather w2\\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.Temperature > w2.Temperature;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT w1.id\\nFROM Weather w1, Weather w2\\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.Temperature > w2.Temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 673040,
                "title": "ms-server-solution",
                "content": "```\\nSELECT today.Id \\nFROM Weather today\\nINNER JOIN Weather y\\nON today.RecordDate = DATEADD(d, 1, y.RecordDate)\\nWHERE today.Temperature > y.Temperature\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT today.Id \\nFROM Weather today\\nINNER JOIN Weather y\\nON today.RecordDate = DATEADD(d, 1, y.RecordDate)\\nWHERE today.Temperature > y.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 317553,
                "title": "easy-solution",
                "content": "select w.Id from Weather as w inner join Weather as h on to_days(w.RecordDate) = to_days(h.RecordDate)+1 and w.Temperature > h.Temperature;",
                "solutionTags": [],
                "code": "select w.Id from Weather as w inner join Weather as h on to_days(w.RecordDate) = to_days(h.RecordDate)+1 and w.Temperature > h.Temperature;",
                "codeTag": "Unknown"
            },
            {
                "id": 55635,
                "title": "why-using-a-condition-on-id-not-working",
                "content": "\\n    SELECT a.Id FROM Weather a INNER JOIN Weather b ON a.Id=b.Id+1\\n     WHERE a.Temperature>b.Temperature\\n\\nI know the logic here is all about one day earlier, but the code I write should have given the same answer. However, it was not working here. Why?",
                "solutionTags": [],
                "code": "\\n    SELECT a.Id FROM Weather a INNER JOIN Weather b ON a.Id=b.Id+1\\n     WHERE a.Temperature>b.Temperature\\n\\nI know the logic here is all about one day earlier, but the code I write should have given the same answer. However, it was not working here. Why?",
                "codeTag": "Unknown"
            },
            {
                "id": 3511128,
                "title": "93-beats-with-lag-over-100-memory-oracle",
                "content": "If you have any doubts, feel free to ask...\\nIf you understand the concept. Don\\'t Forget to upvote \\uD83D\\uDE0A\\n\\n# Code\\n```\\nselect id from\\n(select\\nid,\\ntemperature,\\nrecordDate,\\nlag(recordDate) OVER (order by recordDate) as prevDate,\\nlag(temperature) OVER (order by recordDate) as prevTemp\\nfrom weather)\\nwhere temperature>prevTemp and recordDate-prevDate=1;\\n```\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect id from\\n(select\\nid,\\ntemperature,\\nrecordDate,\\nlag(recordDate) OVER (order by recordDate) as prevDate,\\nlag(temperature) OVER (order by recordDate) as prevTemp\\nfrom weather)\\nwhere temperature>prevTemp and recordDate-prevDate=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3303954,
                "title": "sql-server-clean-easy",
                "content": "```\\nSELECT w.id\\nFROM Weather w\\nJOIN Weather yesterday\\nON DATEDIFF(DAY, yesterday.recordDate, w.recordDate) = 1\\nWHERE w.temperature > yesterday.temperature\\n\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT w.id\\nFROM Weather w\\nJOIN Weather yesterday\\nON DATEDIFF(DAY, yesterday.recordDate, w.recordDate) = 1\\nWHERE w.temperature > yesterday.temperature\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3218996,
                "title": "91-with-inner-join-sql-server",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\n\\n\\nselect\\n\\tT2.id\\nfrom\\n\\tWeather T1\\nINNER JOIN\\n\\tWeather T2 ON    \\n\\t\\t\\t\\tDATEADD(DAY,1,T1.recordDate ) = T2.recordDate\\n            AND\\n              T1.temperature  < T2.temperature \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\n\\n\\nselect\\n\\tT2.id\\nfrom\\n\\tWeather T1\\nINNER JOIN\\n\\tWeather T2 ON    \\n\\t\\t\\t\\tDATEADD(DAY,1,T1.recordDate ) = T2.recordDate\\n            AND\\n              T1.temperature  < T2.temperature \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2708617,
                "title": "simple-solution-mysql",
                "content": "```\\nSelect (a.id) as Id from weather a, weather b\\nwhere\\ndatediff(a.recordDate , b.recordDate)=1 and a.temperature > b.temperature ;\\n```",
                "solutionTags": [],
                "code": "```\\nSelect (a.id) as Id from weather a, weather b\\nwhere\\ndatediff(a.recordDate , b.recordDate)=1 and a.temperature > b.temperature ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2101723,
                "title": "simple-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT \\n    A.ID \\nFROM\\n    WEATHER A,\\n    WEATHER B\\nWHERE\\n    DATEDIFF(A.RECORDDATE, B.RECORDDATE) = 1\\n    AND\\n    B.TEMPERATURE < A.TEMPERATURE\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    A.ID \\nFROM\\n    WEATHER A,\\n    WEATHER B\\nWHERE\\n    DATEDIFF(A.RECORDDATE, B.RECORDDATE) = 1\\n    AND\\n    B.TEMPERATURE < A.TEMPERATURE\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1198477,
                "title": "ms-sql-server-solution",
                "content": "```\\n\\nselect  id from\\n(\\nselect id,recordDate, Temperature,\\nlag(Temperature,1) over(order by recordDate) as Temperature_lag,\\nlag(recordDate,1) over(order by recordDate) as recordDate_lag\\nfrom Weather ) tbl1\\nwhere \\ndatediff(day,recordDate, recordDate_lag) = -1 and Temperature > Temperature_lag\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nselect  id from\\n(\\nselect id,recordDate, Temperature,\\nlag(Temperature,1) over(order by recordDate) as Temperature_lag,\\nlag(recordDate,1) over(order by recordDate) as recordDate_lag\\nfrom Weather ) tbl1\\nwhere \\ndatediff(day,recordDate, recordDate_lag) = -1 and Temperature > Temperature_lag\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55645,
                "title": "datediff-and-inner-join",
                "content": "select B.Id from Weather A,Weather B where A.Temperature < B.Temperature and datediff(B.Date,A.date)=1\\n\\nMysql\\u7684datediff \\u51fd\\u6570\\u548csql server\\u4e0d\\u540c\\uff0cDATEDIFF() \\u51fd\\u6570\\u8fd4\\u56de\\u4e24\\u4e2a\\u65e5\\u671f\\u4e4b\\u95f4\\u7684\\u5929\\u6570\\u3002 \\u683c\\u5f0f DATEDIFF(date1,date2)\\n\\ndate1-date2",
                "solutionTags": [],
                "code": "select B.Id from Weather A,Weather B where A.Temperature < B.Temperature and datediff(B.Date,A.date)=1\\n\\nMysql\\u7684datediff \\u51fd\\u6570\\u548csql server\\u4e0d\\u540c\\uff0cDATEDIFF() \\u51fd\\u6570\\u8fd4\\u56de\\u4e24\\u4e2a\\u65e5\\u671f\\u4e4b\\u95f4\\u7684\\u5929\\u6570\\u3002 \\u683c\\u5f0f DATEDIFF(date1,date2)\\n\\ndate1-date2",
                "codeTag": "Unknown"
            },
            {
                "id": 55646,
                "title": "a-solusion-with-time-1025-ms",
                "content": "    select a.Id from (select w2.Id from Weather w1 join Weather w2 on datediff(w2.Date,w1.Date)=1 where w1.Temperature < w2.Temperature) a",
                "solutionTags": [],
                "code": "    select a.Id from (select w2.Id from Weather w1 join Weather w2 on datediff(w2.Date,w1.Date)=1 where w1.Temperature < w2.Temperature) a",
                "codeTag": "Unknown"
            },
            {
                "id": 3977250,
                "title": "197-rising-temperature",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT W1.id FROM Weather W1, Weather W2 \\nWHERE DATEDIFF(W1.recordDate, W2.recordDate) = 1 \\nAND W1.temperature > W2.temperature;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT W1.id FROM Weather W1, Weather W2 \\nWHERE DATEDIFF(W1.recordDate, W2.recordDate) = 1 \\nAND W1.temperature > W2.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3757668,
                "title": "what-or-why-solution-approach-wow-solution-approach",
                "content": "# Intuition\\nTo find date, which are having higher temperature then yesterday.\\nSo first observation is that we have to find the relation between same column elements, why leads us to SELF JOIN, now as SELF JOIN uses simple O(n^2) approach( other words two for loops on same table) to match the values on the value we want here we are concerned about two things \\n1. Comparision between two date, which can be 1 or -1 let use take 1 only to  understand\\n2. If difference between two dates is 1 means first date is today and second date is yesterday ( thing what does -1 means then? ) now today temperature should be greater then yesterdays temperature.\\n\\n\\n# Approach\\n1. For Comparision or date difference we used DATEDIFF and checked if it is 1 ( you should try -1 also)\\n2. As differnce is 1 implies first.temp > sec.temp\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect first.id\\nfrom Weather first, Weather sec\\nwhere DATEDIFF(first.recordDate,sec.recordDate) =1 and first.temperature>sec.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect first.id\\nfrom Weather first, Weather sec\\nwhere DATEDIFF(first.recordDate,sec.recordDate) =1 and first.temperature>sec.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3565539,
                "title": "simple-sql-solution",
                "content": "# Code\\n```\\nSelect w1.id\\nfrom Weather w1, Weather w2\\nwhere w1.Temperature > w2.temperature \\nand datediff(w1.recordDate, w2.recordDate) = 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect w1.id\\nfrom Weather w1, Weather w2\\nwhere w1.Temperature > w2.temperature \\nand datediff(w1.recordDate, w2.recordDate) = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3537651,
                "title": "197-rising-temperature",
                "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1",
                "solutionTags": [],
                "code": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1",
                "codeTag": "Unknown"
            },
            {
                "id": 2945816,
                "title": "easy-solution-sql",
                "content": "\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect t2.id from weather t1 , weather t2 \\nwhere t2.temperature > t1.temperature \\nand to_date(t2.recorddate) - to_date(t1.recorddate)=1 ;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect t2.id from weather t1 , weather t2 \\nwhere t2.temperature > t1.temperature \\nand to_date(t2.recorddate) - to_date(t1.recorddate)=1 ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2919590,
                "title": "best-and-optimized-solution",
                "content": "# The fast solution\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Code\\n```\\nselect W1.id as Id\\nfrom Weather W1, Weather W2\\nwhere W2.recordDate = DATEADD(day, -1, W1.recordDate) \\nand W1.temperature > W2.temperature\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect W1.id as Id\\nfrom Weather W1, Weather W2\\nwhere W2.recordDate = DATEADD(day, -1, W1.recordDate) \\nand W1.temperature > W2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2849302,
                "title": "easiest-solution-mysql-simple-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n# select x.id from Weather x,Weather y where x.temperature>y.temperature and (x.id-y.id)=1;\\nselect x.id from Weather x,Weather y where x.temperature>y.temperature and datediff(x.recordDate,y.recordDate)=1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# select x.id from Weather x,Weather y where x.temperature>y.temperature and (x.id-y.id)=1;\\nselect x.id from Weather x,Weather y where x.temperature>y.temperature and datediff(x.recordDate,y.recordDate)=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2691996,
                "title": "mysql-solution-with-lag-beats-93-95-100-memory",
                "content": "![image](https://assets.leetcode.com/users/images/ff421f3e-f38a-4e8e-b682-f7bddadfc7ae_1665518625.636787.png)\\n```\\n# Write your MySQL query statement below\\nselect id from (\\n  select id, temperature, recordDate,\\n  lag(temperature) over(order by recordDate) as prevTemp,\\n  lag(recordDate) over(order by recordDate) as prevDate\\n  from Weather\\n) as T\\nwhere T.temperature > T.prevTemp\\n      and datediff(T.recordDate, T.prevDate)=1;\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect id from (\\n  select id, temperature, recordDate,\\n  lag(temperature) over(order by recordDate) as prevTemp,\\n  lag(recordDate) over(order by recordDate) as prevDate\\n  from Weather\\n) as T\\nwhere T.temperature > T.prevTemp\\n      and datediff(T.recordDate, T.prevDate)=1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2686629,
                "title": "mysql-solution",
                "content": "```\\nselect w1.id\\nfrom weather as w1, weather as w2\\nwhere w1.temperature> w2.temperature \\nand datediff(w1.recordDate, w2.recordDate)=1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect w1.id\\nfrom weather as w1, weather as w2\\nwhere w1.temperature> w2.temperature \\nand datediff(w1.recordDate, w2.recordDate)=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2679834,
                "title": "mysql-join-beginner-friendly",
                "content": "# Write your MySQL query statement below\\n```\\nSELECT w1.id FROM weather w1,weather w2 \\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature>w2.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT w1.id FROM weather w1,weather w2 \\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature>w2.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2562379,
                "title": "datediff-self-join-think-first-using-these-concepts",
                "content": "***So you\\'re here , this is the solution.  Do upvote if you liked it***\\n\\n```\\nselect w1.id \\nfrom weather w1, weather w2 \\nwhere w1.temperature > w2.temperature and \\ndatediff(w1.recordDate , w2.recordDate) = 1 ;\\n```\\n\\ndatediff function as name suggests gives the difference b/w two dates and we have to calculate only for previous days as mentioned.\\nElse is understandable.\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nselect w1.id \\nfrom weather w1, weather w2 \\nwhere w1.temperature > w2.temperature and \\ndatediff(w1.recordDate , w2.recordDate) = 1 ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2545810,
                "title": "197-rising-temperature",
                "content": "```\\nSELECT Weather.id\\nFROM Weather\\n\\nINNER JOIN Weather AS W2\\nON W2.RecordDate = SUBDATE(Weather.RecordDate, INTERVAL 1 DAY)\\nWHERE W2.Temperature < Weather.Temperature;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Weather.id\\nFROM Weather\\n\\nINNER JOIN Weather AS W2\\nON W2.RecordDate = SUBDATE(Weather.RecordDate, INTERVAL 1 DAY)\\nWHERE W2.Temperature < Weather.Temperature;",
                "codeTag": "Unknown"
            },
            {
                "id": 2347380,
                "title": "2-approaches-to-learn-from-mistake",
                "content": "This one ran 9/14 cases\\n```\\nselect DISTINCT d2.id\\nfrom Weather as d1, Weather as d2\\nWhere d1.recordDate<d2.recordDate AND d2.temperature>d1.temperature and d2.id-d1.id=1;\\n```\\nCorrect ans is below \\n```\\nSELECT wt1.Id \\nFROM Weather wt1, Weather wt2\\nWHERE wt1.Temperature > wt2.Temperature AND TO_DAYS(wt1.recordDate)-TO_DAYS(wt2.recordDate)=1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect DISTINCT d2.id\\nfrom Weather as d1, Weather as d2\\nWhere d1.recordDate<d2.recordDate AND d2.temperature>d1.temperature and d2.id-d1.id=1;\\n```\n```\\nSELECT wt1.Id \\nFROM Weather wt1, Weather wt2\\nWHERE wt1.Temperature > wt2.Temperature AND TO_DAYS(wt1.recordDate)-TO_DAYS(wt2.recordDate)=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2091635,
                "title": "mysql-easiest-solution",
                "content": "**Pls Upvote if you like the Solution!**\\n```\\nSELECT wt1.Id \\nFROM Weather wt1, Weather wt2\\nWHERE wt1.Temperature > wt2.Temperature AND \\n      TO_DAYS(wt1.recordDate)-TO_DAYS(wt2.recordDate)=1;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**Pls Upvote if you like the Solution!**\\n```\\nSELECT wt1.Id \\nFROM Weather wt1, Weather wt2\\nWHERE wt1.Temperature > wt2.Temperature AND \\n      TO_DAYS(wt1.recordDate)-TO_DAYS(wt2.recordDate)=1;",
                "codeTag": "Unknown"
            },
            {
                "id": 1986879,
                "title": "simple-solution-oracle-and-mysql",
                "content": "Simple approach in Oracle and MySQL \\n\\n```\\nOracle:\\n\\nselect w1.id from Weather w1, Weather w2\\nwhere w1.recordDate-w2.recordDate=1\\nand w1.temperature > w2.temperature\\n\\nMySQL:\\n\\nselect w1.id from Weather w1\\njoin Weather w2\\non datediff(w1.recordDate,w2.recordDate)=1\\nand w1.temperature>w2.temperature\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nOracle:\\n\\nselect w1.id from Weather w1, Weather w2\\nwhere w1.recordDate-w2.recordDate=1\\nand w1.temperature > w2.temperature\\n\\nMySQL:\\n\\nselect w1.id from Weather w1\\njoin Weather w2\\non datediff(w1.recordDate,w2.recordDate)=1\\nand w1.temperature>w2.temperature\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1598224,
                "title": "mysql-datediff",
                "content": "```\\nSELECT a.id FROM Weather a\\nCROSS JOIN Weather b\\nWHERE DATEDIFF(a.recordDate, b.recordDate) = 1\\nAND a.temperature>b.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT a.id FROM Weather a\\nCROSS JOIN Weather b\\nWHERE DATEDIFF(a.recordDate, b.recordDate) = 1\\nAND a.temperature>b.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1346230,
                "title": "simple-inner-join-oracle",
                "content": "```\\nselect a.id from weather a,weather b where a.recorddate-1=b.recorddate and a.temperature>b.temperature;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect a.id from weather a,weather b where a.recorddate-1=b.recorddate and a.temperature>b.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1336386,
                "title": "why-is-this-not-giving-the-correct-result-the-last-test-case-fails",
                "content": "SELECT W.Id FROM Weather W \\nINNER JOIN Weather W1 ON \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(W.RecordDate = W1.RecordDate + 1 \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tAND W.Temperature > W1.Temperature);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nUPD: I changed the first condition to \\nDATEDIFF(W.RecDate, W1.RecDate) = 1\\n and it worked. I\\'m still curious though, why did the initial arithmetic work for the first 13 test cases?",
                "solutionTags": [],
                "code": "SELECT W.Id FROM Weather W \\nINNER JOIN Weather W1 ON \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(W.RecordDate = W1.RecordDate + 1 \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tAND W.Temperature > W1.Temperature);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nUPD: I changed the first condition to \\nDATEDIFF(W.RecDate, W1.RecDate) = 1\\n and it worked. I\\'m still curious though, why did the initial arithmetic work for the first 13 test cases?",
                "codeTag": "Unknown"
            },
            {
                "id": 1090326,
                "title": "easy-mysql-solution",
                "content": "```\\nSELECT w1.id\\nFROM Weather w1, Weather w2\\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.Temperature > w2.Temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT w1.id\\nFROM Weather w1, Weather w2\\nWHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.Temperature > w2.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55644,
                "title": "simple-solution-using-datediff",
                "content": "    select w1.Id from Weather w1, Weather w2\\n    where w1.Temperature > w2.Temperature \\n    and datediff(w1.Date, w2.Date) = 1;",
                "solutionTags": [],
                "code": "    select w1.Id from Weather w1, Weather w2\\n    where w1.Temperature > w2.Temperature \\n    and datediff(w1.Date, w2.Date) = 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 55637,
                "title": "incorrect-expectation-for-first-day-of-the-month-results",
                "content": "The approach [chriszeng8](https://leetcode.com/discuss/44574/subtracting-directly-from-date-working-subdate-date-works) took is actually correct for this particular problem, even though it may not work for date differences bigger than `1`; here's how I tried it:\\n\\n    select wCurr.id as 'Id'\\n    from Weather wCurr\\n    join Weather wPrev on wCurr.date - 1 = wPrev.date\\n    where wPrev.temperature < wCurr.temperature\\n\\nAnd then my answer was rejected with \"Wrong answer\":\\n> https://leetcode.com/submissions/detail/45866299/  \\n> 13 / 14 test cases passed.\\n\\nThe `output` and `expected` diff looks like this:\\n\\n    {\"headers\": [\"Id\"], \"values\": [\\n        ..., [407], ..., [507], ..., [295], ..., [921], ..., [225], ..., [1167], ..., [462],\\n        ..., [925], ..., [875], ..., [178], ..., [1112], ..., [397], ..., [625], ...\\n    ]}\\n\\nWhere `...` are exact matches for the expected output, meaning the values listed above are extra results in my output. Let's see what those IDs correspond to in the `input` (sorted by date, filtered relevant lines):\\n\\n\\t|------|------------|------|\\n\\t|  id  |    date    | temp |\\n\\t|======|============|======|\\n\\t|  255 | 1998-08-31 |  -62 |\\n\\t|  225 | 1998-09-01 |   91 |\\n\\t|------|------------|------|\\n\\t|  139 | 1998-09-30 |  -43 |\\n\\t| 1167 | 1998-10-01 |  -17 |\\n\\t|------|------------|------|\\n\\t|  636 | 1998-10-31 |  -32 |\\n\\t|  407 | 1998-11-01 |   -9 |\\n\\t|------|------------|------|\\n\\t|   85 | 1999-03-31 |  -26 |\\n\\t|  178 | 1999-04-01 |   -1 |\\n\\t|------|------------|------|\\n\\t|  699 | 1999-05-31 |  -97 |\\n\\t|  875 | 1999-06-01 |   79 |\\n\\t|------|------------|------|\\n\\t|  247 | 1999-07-31 |  -67 |\\n\\t|  295 | 1999-08-01 |   76 |\\n\\t|------|------------|------|\\n\\t|  509 | 1999-10-31 |  -40 |\\n\\t|  462 | 1999-11-01 |  -13 |\\n\\t|------|------------|------|\\n\\t|  157 | 2000-12-31 |  -72 |\\n\\t|  397 | 2001-01-01 |   90 |\\n\\t|------|------------|------|\\n\\t|  472 | 2001-09-30 |    4 |\\n\\t|  507 | 2001-10-01 |   38 |\\n\\t|------|------------|------|\\n\\t|  707 | 2001-12-31 |   55 |\\n\\t|  625 | 2002-01-01 |   87 |\\n\\t|------|------------|------|\\n\\t|  126 | 2002-06-30 |  -50 |\\n\\t|  925 | 2002-07-01 |   -4 |\\n\\t|------|------------|------|\\n\\t|  840 | 2002-07-31 |  -46 |\\n\\t|  921 | 2002-08-01 |  -35 |\\n\\t|------|------------|------|\\n\\t|  753 | 2002-08-31 |   42 |\\n\\t| 1112 | 2002-09-01 |   57 |\\n\\t|------|------------|------|",
                "solutionTags": [],
                "code": "The approach [chriszeng8](https://leetcode.com/discuss/44574/subtracting-directly-from-date-working-subdate-date-works) took is actually correct for this particular problem, even though it may not work for date differences bigger than `1`; here's how I tried it:\\n\\n    select wCurr.id as 'Id'\\n    from Weather wCurr\\n    join Weather wPrev on wCurr.date - 1 = wPrev.date\\n    where wPrev.temperature < wCurr.temperature\\n\\nAnd then my answer was rejected with \"Wrong answer\":\\n> https://leetcode.com/submissions/detail/45866299/  \\n> 13 / 14 test cases passed.\\n\\nThe `output` and `expected` diff looks like this:\\n\\n    {\"headers\": [\"Id\"], \"values\": [\\n        ..., [407], ..., [507], ..., [295], ..., [921], ..., [225], ..., [1167], ..., [462],\\n        ..., [925], ..., [875], ..., [178], ..., [1112], ..., [397], ..., [625], ...\\n    ]}\\n\\nWhere `...` are exact matches for the expected output, meaning the values listed above are extra results in my output. Let's see what those IDs correspond to in the `input` (sorted by date, filtered relevant lines):\\n\\n\\t|------|------------|------|\\n\\t|  id  |    date    | temp |\\n\\t|======|============|======|\\n\\t|  255 | 1998-08-31 |  -62 |\\n\\t|  225 | 1998-09-01 |   91 |\\n\\t|------|------------|------|\\n\\t|  139 | 1998-09-30 |  -43 |\\n\\t| 1167 | 1998-10-01 |  -17 |\\n\\t|------|------------|------|\\n\\t|  636 | 1998-10-31 |  -32 |\\n\\t|  407 | 1998-11-01 |   -9 |\\n\\t|------|------------|------|\\n\\t|   85 | 1999-03-31 |  -26 |\\n\\t|  178 | 1999-04-01 |   -1 |\\n\\t|------|------------|------|\\n\\t|  699 | 1999-05-31 |  -97 |\\n\\t|  875 | 1999-06-01 |   79 |\\n\\t|------|------------|------|\\n\\t|  247 | 1999-07-31 |  -67 |\\n\\t|  295 | 1999-08-01 |   76 |\\n\\t|------|------------|------|\\n\\t|  509 | 1999-10-31 |  -40 |\\n\\t|  462 | 1999-11-01 |  -13 |\\n\\t|------|------------|------|\\n\\t|  157 | 2000-12-31 |  -72 |\\n\\t|  397 | 2001-01-01 |   90 |\\n\\t|------|------------|------|\\n\\t|  472 | 2001-09-30 |    4 |\\n\\t|  507 | 2001-10-01 |   38 |\\n\\t|------|------------|------|\\n\\t|  707 | 2001-12-31 |   55 |\\n\\t|  625 | 2002-01-01 |   87 |\\n\\t|------|------------|------|\\n\\t|  126 | 2002-06-30 |  -50 |\\n\\t|  925 | 2002-07-01 |   -4 |\\n\\t|------|------------|------|\\n\\t|  840 | 2002-07-31 |  -46 |\\n\\t|  921 | 2002-08-01 |  -35 |\\n\\t|------|------------|------|\\n\\t|  753 | 2002-08-31 |   42 |\\n\\t| 1112 | 2002-09-01 |   57 |\\n\\t|------|------------|------|",
                "codeTag": "Unknown"
            },
            {
                "id": 4095278,
                "title": "easiest-ms-sql-server-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCross join on the given table and just write the conditions as in the question and select the the id from w2 as the id of the second table in join will give you the desired output as per the conditions.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect w2.id from weather w1 \\ninner join weather w2\\non DATEDIFF(day, w1.recordDate, w2.recordDate ) = 1 and w2.temperature > w1.temperature\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect w2.id from weather w1 \\ninner join weather w2\\non DATEDIFF(day, w1.recordDate, w2.recordDate ) = 1 and w2.temperature > w1.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088116,
                "title": "simple-sql-beat-96-51",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT w1.id\\nFROM Weather w1 \\nINNER JOIN Weather w2\\nON w1.recordDate = DATE_ADD(w2.recordDate,INTERVAL 1 DAY)\\nWHERE w1.temperature > w2.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT w1.id\\nFROM Weather w1 \\nINNER JOIN Weather w2\\nON w1.recordDate = DATE_ADD(w2.recordDate,INTERVAL 1 DAY)\\nWHERE w1.temperature > w2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056328,
                "title": "pandas-sql-easy-rising-temperature-easy",
                "content": "[see the Accepted Solution](https://leetcode.com/submissions/detail/1051882154/)\\n```\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # 1) First, we sort the DataFrame by \\'recordDate\\' in ascending order\\n    weather.sort_values(by=\\'recordDate\\', ascending=True, inplace=True)\\n\\n    # 2) Then, the difference in temperature between consecutive rows are calculated\\n    weather[\\'temperature_diff\\'] = weather[\\'temperature\\'] - weather[\\'temperature\\'].shift(1)\\n    \\n    # 3) At the same time, we calculate the difference in recordDate between consecutive rows\\n    weather[\\'recordDate_diff\\'] = weather[\\'recordDate\\'] - weather[\\'recordDate\\'].shift(1)\\n\\n    # 4) then, we select rows where the temperature difference is greater than 0 and the date difference is 1 day\\n    filter_rising_temperature = weather[(weather[\\'temperature_diff\\'] > 0) & (weather[\\'recordDate_diff\\'] == pd.Timedelta(days=1))][\\'id\\']\\n    \\n    # 5) Finaly, a new Pandas DataFrame from the filtered data above is created\\n    result_df = pd.DataFrame(filter_rising_temperature)\\n \\n    return result_df\\n```\\n\\n**SQL**\\n[see the Accepted Solution](https://leetcode.com/submissions/detail/1061634982/)\\n\\n```\\nSELECT weather1.id\\nFROM Weather weather1 \\nINNER JOIN Weather weather2\\nON weather1.recordDate = DATE_ADD(weather2.recordDate, \\n                                  INTERVAL 1 DAY)\\nWHERE weather1.temperature > weather2.temperature\\n```\\n\\n```\\n-- Select the \"id\" column from the \"Weather\" table using the alias \"weather1\"\\nSELECT weather1.id\\n\\n-- Specify that we are performing an INNER JOIN between two instances of the \"Weather\" table: \"weather1\" and \"weather2\"\\nFROM Weather weather1\\nINNER JOIN Weather weather2\\n\\n-- Define the JOIN condition: we are matching records where the \"recordDate\" in \"weather1\" matches the \"recordDate\" in \"weather2\" \\n-- after adding one day to the date from \"weather2\" using DATE_ADD function\\nON weather1.recordDate = DATE_ADD(weather2.recordDate, INTERVAL 1 DAY)\\n\\n-- Apply a WHERE clause to further filter the results:\\n-- We are selecting records where the \"temperature\" in \"weather1\" is greater than the \"temperature\" in \"weather2\"\\nWHERE weather1.temperature > weather2.temperature\\n```\\n\\t\\n![image](https://assets.leetcode.com/users/images/365567d6-f863-4d76-8095-d8e7800a8a35_1695222065.3166265.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # 1) First, we sort the DataFrame by \\'recordDate\\' in ascending order\\n    weather.sort_values(by=\\'recordDate\\', ascending=True, inplace=True)\\n\\n    # 2) Then, the difference in temperature between consecutive rows are calculated\\n    weather[\\'temperature_diff\\'] = weather[\\'temperature\\'] - weather[\\'temperature\\'].shift(1)\\n    \\n    # 3) At the same time, we calculate the difference in recordDate between consecutive rows\\n    weather[\\'recordDate_diff\\'] = weather[\\'recordDate\\'] - weather[\\'recordDate\\'].shift(1)\\n\\n    # 4) then, we select rows where the temperature difference is greater than 0 and the date difference is 1 day\\n    filter_rising_temperature = weather[(weather[\\'temperature_diff\\'] > 0) & (weather[\\'recordDate_diff\\'] == pd.Timedelta(days=1))][\\'id\\']\\n    \\n    # 5) Finaly, a new Pandas DataFrame from the filtered data above is created\\n    result_df = pd.DataFrame(filter_rising_temperature)\\n \\n    return result_df\\n```\n```\\nSELECT weather1.id\\nFROM Weather weather1 \\nINNER JOIN Weather weather2\\nON weather1.recordDate = DATE_ADD(weather2.recordDate, \\n                                  INTERVAL 1 DAY)\\nWHERE weather1.temperature > weather2.temperature\\n```\n```\\n-- Select the \"id\" column from the \"Weather\" table using the alias \"weather1\"\\nSELECT weather1.id\\n\\n-- Specify that we are performing an INNER JOIN between two instances of the \"Weather\" table: \"weather1\" and \"weather2\"\\nFROM Weather weather1\\nINNER JOIN Weather weather2\\n\\n-- Define the JOIN condition: we are matching records where the \"recordDate\" in \"weather1\" matches the \"recordDate\" in \"weather2\" \\n-- after adding one day to the date from \"weather2\" using DATE_ADD function\\nON weather1.recordDate = DATE_ADD(weather2.recordDate, INTERVAL 1 DAY)\\n\\n-- Apply a WHERE clause to further filter the results:\\n-- We are selecting records where the \"temperature\" in \"weather1\" is greater than the \"temperature\" in \"weather2\"\\nWHERE weather1.temperature > weather2.temperature\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3791432,
                "title": "i-solve-it-using-inner-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#w1 is testerday and w2 is today\\n\\nselect w2.id\\nfrom weather w1\\ninner join weather w2\\non  w1.recordDate  = Date_add(w2.recordDate, interval - 1 day)\\nAND w2.temperature > w1.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n#w1 is testerday and w2 is today\\n\\nselect w2.id\\nfrom weather w1\\ninner join weather w2\\non  w1.recordDate  = Date_add(w2.recordDate, interval - 1 day)\\nAND w2.temperature > w1.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3787575,
                "title": "easy-mysql-solution",
                "content": "\\n# Code\\n```\\n\\n\\nSELECT w2.id from Weather w1,Weather w2\\nWHERE datediff(w2.recordDate, w1.recordDate) = 1 AND w2.temperature > w1.temperature;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\n\\nSELECT w2.id from Weather w1,Weather w2\\nWHERE datediff(w2.recordDate, w1.recordDate) = 1 AND w2.temperature > w1.temperature;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3770092,
                "title": "eassy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect w1.id from Weather w1, Weather w2 where dateDiff(w1.recordDate,w2.recordDate) = 1 And w1.Temperature> w2.Temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect w1.id from Weather w1, Weather w2 where dateDiff(w1.recordDate,w2.recordDate) = 1 And w1.Temperature> w2.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3762750,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe first thought after looking into the Problem Statement should be that there is only one Table, We need to write a query which will do Self Join on itself\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe keypoint should be :\\n- **create a query where we check the data between Dates having a difference of \"1 DAY\"**\\n- **AND (very important and not OR)**\\n- **temp of day 1 should be greater than day 2**\\n\\n\\n# Code\\n```\\n\\nselect w1.id from Weather w1, Weather w2\\nwhere dateDiff(w1.recordDate,w2.recordDate) = 1\\nAnd \\nw1.Temperature> w2.Temperature\\n```\\n\\nHope it Helps\\nAlso This is my First Solution on LeetCode\\nHave a Great Day!\\n**Be consistent**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect w1.id from Weather w1, Weather w2\\nwhere dateDiff(w1.recordDate,w2.recordDate) = 1\\nAnd \\nw1.Temperature> w2.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3758636,
                "title": "rising-temp-datediff",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect w2.id \\nfrom Weather as w1 ,Weather as w2 \\nwhere datediff(w2.recordDate,w1.recordDate)=1 \\nand w2.temperature>w1.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect w2.id \\nfrom Weather as w1 ,Weather as w2 \\nwhere datediff(w2.recordDate,w1.recordDate)=1 \\nand w2.temperature>w1.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3757167,
                "title": "solution-with-70-percent-beating-rate",
                "content": "# Intuition\\nWe need to compare the temperature of each date with the temperature of the previous date (yesterday).\\nTo perform this comparison, we can join the Weather table with itself, creating two instances of the table (w1 and w2).\\nBy joining the tables based on the recordDate column of w1 and the next day\\'s date (DATE_ADD(w2.recordDate, INTERVAL 1 DAY)), we can align the temperatures of consecutive dates for comparison.\\nThe WHERE clause filters the rows where the temperature of the current date (w1.temperature) is higher than the temperature of the previous day (w2.temperature).\\nFinally, we select the id values from w1 for the matched rows, representing the dates with higher temperatures than their previous dates.\\n\\nThe intuition is to use a self-join operation to align the temperatures of consecutive dates, enabling direct comparison. By checking if the temperature of a date is higher than its previous date, we can identify the desired rows.\\n\\n# Approach\\nThe query joins the Weather table w1 with itself w2 by matching the recordDate of w1 with the next day\\'s recordDate in w2 using the DATE_ADD function. The WHERE clause filters the rows where the temperature of the current day (w1.temperature) is higher than the temperature of the next day (w2.temperature). Finally, the SELECT statement retrieves the id values from the w1 table for the matched rows.\\n\\n# Complexity\\n- Time complexity:\\nJoining two tables typically has a time complexity of O(n * m), where n is the number of rows in the first table and m is the number of rows in the second table.\\nIn this case, assuming the recordDate column is indexed, the join operation can be efficient and reduce the time complexity.\\nTherefore, the time complexity of the query is typically O(n), where n is the number of rows in the Weather table.\\n\\n- Space complexity:\\nThe space complexity of the query is minimal since it doesn\\'t require any additional data structures or memory beyond what is used by the database system itself.\\nIt only requires space to store the result set, which in this case is the id values of the rows where the temperature is higher than the next day\\'s temperature.\\nTherefore, the space complexity is typically O(k), where k is the number of rows in the result set.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect w1.id\\nfrom Weather w1\\njoin Weather w2 on w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\nwhere w1.temperature > w2.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect w1.id\\nfrom Weather w1\\njoin Weather w2 on w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\nwhere w1.temperature > w2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3742691,
                "title": "ms-sql-self-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT id FROM (\\nSELECT w2.id, w2.temperature - w1.temperature AS temp_diff FROM Weather w1\\nJOIN Weather w2 ON w1.recordDate = DATEADD(day, -1, w2.recordDate)\\n) temp WHERE temp.temp_diff > 0\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT id FROM (\\nSELECT w2.id, w2.temperature - w1.temperature AS temp_diff FROM Weather w1\\nJOIN Weather w2 ON w1.recordDate = DATEADD(day, -1, w2.recordDate)\\n) temp WHERE temp.temp_diff > 0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3703263,
                "title": "easy-beats-95",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT t1.id\\nfrom weather t1\\njoin weather t2 on t1.recordDate = date_add(t2.recordDate,interval 1 day)\\nwhere t1.temperature > t2.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT t1.id\\nfrom weather t1\\njoin weather t2 on t1.recordDate = date_add(t2.recordDate,interval 1 day)\\nwhere t1.temperature > t2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3310263,
                "title": "easy-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT X.id FROM WEATHER X,WEATHER Y WHERE DATEDIFF(X.recordDate,Y.recordDate)=1 AND X.temperature>Y.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT X.id FROM WEATHER X,WEATHER Y WHERE DATEDIFF(X.recordDate,Y.recordDate)=1 AND X.temperature>Y.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3292046,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect A.id from weather A, weather B\\nwhere datediff(A.recordDate, B.recordDate) = 1 and A.temperature > B.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect A.id from weather A, weather B\\nwhere datediff(A.recordDate, B.recordDate) = 1 and A.temperature > B.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3258865,
                "title": "easy-to-understand-query-sql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT A.id FROM weather A, weather B\\nWHERE datediff(A.recordDate, B.recordDate)= 1\\nAND A.temperature > B.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT A.id FROM weather A, weather B\\nWHERE datediff(A.recordDate, B.recordDate)= 1\\nAND A.temperature > B.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3244033,
                "title": "mysql-simple-solution-uwu",
                "content": "\\n```\\nSELECT x.id\\nFROM Weather x\\nJOIN Weather y ON x.recordDate = DATE_ADD(y.recordDate, INTERVAL 1 DAY)\\nWHERE x.temperature > y.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT x.id\\nFROM Weather x\\nJOIN Weather y ON x.recordDate = DATE_ADD(y.recordDate, INTERVAL 1 DAY)\\nWHERE x.temperature > y.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2930251,
                "title": "fastest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\nselect a.id from Weather a ,weather b\\nwhere a.recordDate =(b.recordDate +1)\\nand a.temperature>b.temperature   \\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nselect a.id from Weather a ,weather b\\nwhere a.recordDate =(b.recordDate +1)\\nand a.temperature>b.temperature   \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2905066,
                "title": "easy-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2901027,
                "title": "using-datediff-and-self-join",
                "content": "# Query\\n```\\n# Write your MySQL query statement below\\nSELECT w1.id FROM Weather w1 JOIN Weather w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.temperature > w2.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT w1.id FROM Weather w1 JOIN Weather w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.temperature > w2.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2888726,
                "title": "mysql-solution",
                "content": "\\n```\\n\\nselect w2.id from Weather w1, Weather w2 \\nwhere w2.temperature>w1.temperature \\nAND DATEDIFF(w2.recordDate,w1.recordDate)=1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect w2.id from Weather w1, Weather w2 \\nwhere w2.temperature>w1.temperature \\nAND DATEDIFF(w2.recordDate,w1.recordDate)=1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2851150,
                "title": "mysql-simple-solution",
                "content": "\\n\\n# Code\\n```\\nselect w2.id\\nfrom Weather w1, Weather w2\\nwhere w1.recordDate = date_add(w2.recordDate, interval -1 day)\\nand w1.temperature < w2.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect w2.id\\nfrom Weather w1, Weather w2\\nwhere w1.recordDate = date_add(w2.recordDate, interval -1 day)\\nand w1.temperature < w2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2677938,
                "title": "mssql-join-weather-to-itself-on-recorddate",
                "content": "```\\nSELECT w1.id FROM weather w1\\n\\nLEFT JOIN weather w2 ON w1.recordDate = dateadd(day, 1, w2.recordDate)\\n\\nWHERE w1.temperature > w2.temperature\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT w1.id FROM weather w1\\n\\nLEFT JOIN weather w2 ON w1.recordDate = dateadd(day, 1, w2.recordDate)\\n\\nWHERE w1.temperature > w2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2668343,
                "title": "easy-understanding-mysql",
                "content": "approach- \\n*  consider weather as 2 table\\n*  compare the temperatures and check the date difference\\nusing DATEDIFF() function we check if the difference between current and previous date is 1\\n\\n\\n```\\nselect distinct a.id as \\'Id\\' from weather a, weather b\\nwhere a.temperature > b.temperature\\nand DATEDIFF(a.recorddate,b.recorddate)=1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct a.id as \\'Id\\' from weather a, weather b\\nwhere a.temperature > b.temperature\\nand DATEDIFF(a.recorddate,b.recorddate)=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2593952,
                "title": "nice-and-easy-mysql-using-lag-datediff",
                "content": "```\\nwith CTE as (select *, lag(recordDate) over(order by recordDate) as prev_date, lag(temperature) over() \\n             as prev_day_temp from Weather)\\nselect id from CTE where\\ntemperature>prev_day_temp and DATEDIFF(recordDate,prev_date)=1\\n```",
                "solutionTags": [],
                "code": "```\\nwith CTE as (select *, lag(recordDate) over(order by recordDate) as prev_date, lag(temperature) over() \\n             as prev_day_temp from Weather)\\nselect id from CTE where\\ntemperature>prev_day_temp and DATEDIFF(recordDate,prev_date)=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2580487,
                "title": "pretty-simple-using-dateadd-in-sql-server",
                "content": "**Upvote if you feel it easy :)**\\n```\\nSELECT wt.id\\nFROM Weather wt INNER JOIN Weather wy on wy.recorddate = DATEADD(DAY, -1, wt.recorddate)\\nWHERE wt.temperature > wy.temperature;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT wt.id\\nFROM Weather wt INNER JOIN Weather wy on wy.recorddate = DATEADD(DAY, -1, wt.recorddate)\\nWHERE wt.temperature > wy.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2571054,
                "title": "mysql-with-explanation",
                "content": "We need to specify that: \\n- difference of days has to be 1 with DATEDIFF(date1, date2) function.\\n\\tIt calculates like this: (date1-date2). In order to get **datediff=1**, date1 must be the \"next\" day (higher value). Then date1-date2 = 1\\n- following the above, also date1 temp has to be higher than date2 (previous day) temp\\n\\nWe specify which is which (date1, date2, date1.temp, date2.temp) by comparing table to itself with two aliases (w, r)\\n\\n\\tSELECT w.id FROM Weather w, Weather r\\n\\tWHERE DATEDIFF(w.recordDate, r.recordDate) = 1 AND w.temperature > r.temperature",
                "solutionTags": [],
                "code": "We need to specify that: \\n- difference of days has to be 1 with DATEDIFF(date1, date2) function.\\n\\tIt calculates like this: (date1-date2). In order to get **datediff=1**, date1 must be the \"next\" day (higher value). Then date1-date2 = 1\\n- following the above, also date1 temp has to be higher than date2 (previous day) temp\\n\\nWe specify which is which (date1, date2, date1.temp, date2.temp) by comparing table to itself with two aliases (w, r)\\n\\n\\tSELECT w.id FROM Weather w, Weather r\\n\\tWHERE DATEDIFF(w.recordDate, r.recordDate) = 1 AND w.temperature > r.temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 2556659,
                "title": "mysql-solution",
                "content": "```\\nSELECT w2.id FROM Weather w1 JOIN Weather w2 ON DATE_ADD(w1.recordDate, INTERVAL 1 DAY) = w2.recordDate and w2.temperature > w1.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT w2.id FROM Weather w1 JOIN Weather w2 ON DATE_ADD(w1.recordDate, INTERVAL 1 DAY) = w2.recordDate and w2.temperature > w1.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2529991,
                "title": "easy-mysql-solution-simple-to-understand",
                "content": "\\tselect wt2.id \\n\\tfrom Weather wt1, Weather wt2\\n\\twhere wt2.temperature > wt1.temperature and\\n\\t\\tto_days(wt2.recordDate) - to_days(wt1.recordDate) = 1;\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote. Happy Coding :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\tselect wt2.id \\n\\tfrom Weather wt1, Weather wt2\\n\\twhere wt2.temperature > wt1.temperature and\\n\\t\\tto_days(wt2.recordDate) - to_days(wt1.recordDate) = 1;\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote. Happy Coding :)",
                "codeTag": "Unknown"
            },
            {
                "id": 2529736,
                "title": "lag-and-datediff-functions-beats-95",
                "content": "\\'\\'\\'\\nselect id from\\n(select id, \\ntemperature, \\nLAG(temperature) over (order by recordDate) as \\'lt\\', \\nrecordDate,\\nLAG(recordDate) over (order by recordDate) as \\'ld\\'  \\nfrom Weather) t\\nWHERE t.temperature>lt and DATEDIFF(day,ld,recordDate)=1;\\n\\'\\'\\'",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "\\'\\'\\'\\nselect id from\\n(select id, \\ntemperature, \\nLAG(temperature) over (order by recordDate) as \\'lt\\', \\nrecordDate,\\nLAG(recordDate) over (order by recordDate) as \\'ld\\'  \\nfrom Weather) t\\nWHERE t.temperature>lt and DATEDIFF(day,ld,recordDate)=1;\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2497511,
                "title": "multiple-solutions",
                "content": "Thing to learn form this problem: comparing dates.\\n\\n## Solution 1: `DATEDIFF`\\n\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE DATEDIFF(current.recordDate, previous.recordDate) = 1\\nAND previous.temperature < current.temperature\\n```\\n\\n## Solution 2: `TO_DAYS`\\n\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE TO_DAYS(current.recordDate) - TO_DAYS(previous.recordDate) = 1\\nAND previous.temperature < current.temperature\\n```\\nor\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE TO_DAYS(current.recordDate) - 1 = TO_DAYS(previous.recordDate)\\nAND previous.temperature < current.temperature\\n```\\nor\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE TO_DAYS(previous.recordDate) + 1 = TO_DAYS(current.recordDate)\\nAND previous.temperature < current.temperature\\n```\\n\\n## Solution 3: `interval`\\n\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE previous.recordDate + interval 1 day = current.recordDate\\nAND previous.temperature < current.temperature\\n```\\nor\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE current.recordDate - interval 1 day = previous.recordDate\\nAND previous.temperature < current.temperature\\n```\\n\\n## Solution 4: `DATE_ADD` and `interval`\\n\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE DATE_ADD(previous.recordDate, interval 1 day) = current.recordDate\\nAND previous.temperature < current.temperature\\n```\\n\\n## Solution 5: `DATE_SUB` and `interval`\\n\\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE DATE_SUB(current.recordDate, interval 1 day) = previous.recordDate\\nAND previous.temperature < current.temperature\\n```\\n\\n## And more\\n\\nAnd many other options, like using `JOIN`s in previous solutions.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE DATEDIFF(current.recordDate, previous.recordDate) = 1\\nAND previous.temperature < current.temperature\\n```\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE TO_DAYS(current.recordDate) - TO_DAYS(previous.recordDate) = 1\\nAND previous.temperature < current.temperature\\n```\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE TO_DAYS(current.recordDate) - 1 = TO_DAYS(previous.recordDate)\\nAND previous.temperature < current.temperature\\n```\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE TO_DAYS(previous.recordDate) + 1 = TO_DAYS(current.recordDate)\\nAND previous.temperature < current.temperature\\n```\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE previous.recordDate + interval 1 day = current.recordDate\\nAND previous.temperature < current.temperature\\n```\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE current.recordDate - interval 1 day = previous.recordDate\\nAND previous.temperature < current.temperature\\n```\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE DATE_ADD(previous.recordDate, interval 1 day) = current.recordDate\\nAND previous.temperature < current.temperature\\n```\n```sql\\nSELECT DISTINCT current.id\\nFROM Weather previous, Weather current\\nWHERE DATE_SUB(current.recordDate, interval 1 day) = previous.recordDate\\nAND previous.temperature < current.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2481185,
                "title": "mysql-2-solutions-very-easy-lag-twice-join",
                "content": "### \\uD83D\\uDE4B\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F Hello, here are my solutions to the problem.\\n### Please upvote to motivate me post future solutions. HAPPY CODING \\u2764\\uFE0F\\n##### Any suggestions and improvements are always welcome.\\n##### Solution 1: Only join, long, not good \\uD83E\\uDD26\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n##### \\u2705 Runtime: 783 ms, faster than 25.50% of MySQL.\\n```\\nselect\\n    a.id as id\\nfrom\\n    weather a\\njoin weather b \\non datediff(a.recordDate, b.recordDate) = 1\\nand a.Temperature > b.Temperature\\n```\\n##### Solution 2: Lag twice, faster \\uD83C\\uDFAF\\n##### \\u2705 Runtime: 654 ms, faster than 39.98% of MySQL.\\n```\\nwith q1 as (\\nselect *, \\n    lag(temperature) over(order by recordDate) previous_day_temperature,\\n    lag(recordDate) over(order by recordDate) previous_Date\\nfrom Weather\\n)\\nselect id\\nfrom q1\\nwhere temperature > previous_day_temperature\\nand datediff(recordDate, previous_Date) = 1\\n```\\n##### If you like the solutions, please upvote \\uD83D\\uDD3C\\n##### For any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n    a.id as id\\nfrom\\n    weather a\\njoin weather b \\non datediff(a.recordDate, b.recordDate) = 1\\nand a.Temperature > b.Temperature\\n```\n```\\nwith q1 as (\\nselect *, \\n    lag(temperature) over(order by recordDate) previous_day_temperature,\\n    lag(recordDate) over(order by recordDate) previous_Date\\nfrom Weather\\n)\\nselect id\\nfrom q1\\nwhere temperature > previous_day_temperature\\nand datediff(recordDate, previous_Date) = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2459482,
                "title": "datediff-function-sql",
                "content": "```\\n# Write your MySQL query statement below\\nselect Weather.id\\nfrom Weather join Weather as a\\nwhere DATEDIFF(Weather.recordDate, a.recordDate) = 1 and Weather.temperature > a.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Weather.id\\nfrom Weather join Weather as a\\nwhere DATEDIFF(Weather.recordDate, a.recordDate) = 1 and Weather.temperature > a.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2412765,
                "title": "using-sub-query",
                "content": "```\\nSelect W1.id\\nfrom Weather W1\\nwhere W1.temperature > \\n            (select W2.temperature from Weather W2\\n             where W2.recordDate = DATE_ADD( W1.recordDate,INTERVAL -1 DAY));\\n```",
                "solutionTags": [],
                "code": "```\\nSelect W1.id\\nfrom Weather W1\\nwhere W1.temperature > \\n            (select W2.temperature from Weather W2\\n             where W2.recordDate = DATE_ADD( W1.recordDate,INTERVAL -1 DAY));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2354879,
                "title": "dekh-lo-bhala-hoga",
                "content": "```\\n# Write your MySQL query statement below\\nselect distinct a.id from\\n    Weather as a,\\n    Weather as b\\n    where \\n    a.temperature > b.temperature and datediff(a.recorddate,b.recorddate)=1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct a.id from\\n    Weather as a,\\n    Weather as b\\n    where \\n    a.temperature > b.temperature and datediff(a.recorddate,b.recorddate)=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2157907,
                "title": "copy-paste-leetcode",
                "content": "## **ok! you know** \\n### **What to do**\\n\\n![image](https://assets.leetcode.com/users/images/b032b449-c10b-4f5c-81f8-63b2ae013a63_1655367309.3055308.gif)\\n\\n```\\nSELECT\\n    weather.id AS \\'Id\\'\\nFROM\\n    weather\\n        JOIN\\n    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1\\n        AND weather.Temperature > w.Temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    weather.id AS \\'Id\\'\\nFROM\\n    weather\\n        JOIN\\n    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1\\n        AND weather.Temperature > w.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2070640,
                "title": "easy-and-simple-solution",
                "content": "**197. Rising Temperature**\\n```\\n/* Write your T-SQL query statement below */\\nSELECT w2.id  \\n    FROM weather w1 \\n        JOIN \\n        weather w2\\n            ON datediff(day, w1.recorddate, w2.recorddate) = 1\\n                AND\\n                w2.temperature > w1.temperature;\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT w2.id  \\n    FROM weather w1 \\n        JOIN \\n        weather w2\\n            ON datediff(day, w1.recorddate, w2.recorddate) = 1\\n                AND\\n                w2.temperature > w1.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2002582,
                "title": "two-simple-mysql-solutions-join-vs-lag",
                "content": "**Using Join**\\n```\\n# Write your MySQL query statement below\\nSELECT a.id\\nFROM Weather a\\nJOIN Weather b\\nWHERE a.temperature > b.temperature AND DATEDIFF(a.recordDate , b.recordDate) = 1;\\n```\\n\\n**Using LAG()**\\n```\\n# Write your MySQL query statement below\\nSELECT id FROM(\\n    SELECT *,\\n    LAG(temperature) OVER(ORDER BY recordDate) AS prevT,\\n    DATEDIFF(recordDate, LAG(recordDate) OVER(ORDER BY recordDate)) AS Delta\\n    FROM Weather) t\\nWHERE Delta = 1 AND temperature>prevT\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT a.id\\nFROM Weather a\\nJOIN Weather b\\nWHERE a.temperature > b.temperature AND DATEDIFF(a.recordDate , b.recordDate) = 1;\\n```\n```\\n# Write your MySQL query statement below\\nSELECT id FROM(\\n    SELECT *,\\n    LAG(temperature) OVER(ORDER BY recordDate) AS prevT,\\n    DATEDIFF(recordDate, LAG(recordDate) OVER(ORDER BY recordDate)) AS Delta\\n    FROM Weather) t\\nWHERE Delta = 1 AND temperature>prevT\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1992297,
                "title": "oracle-very-easy-solution",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nselect w1.id from Weather w1, Weather  w2\\nwhere w1.recordDate-w2.recordDate=1\\nand w1.temperature > w2.temperature\\n```\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect w1.id from Weather w1, Weather  w2\\nwhere w1.recordDate-w2.recordDate=1\\nand w1.temperature > w2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1992266,
                "title": "rising-temperature-easy-solution",
                "content": "select w1.id from Weather w1\\njoin Weather w2\\non datediff(w1.recordDate,w2.recordDate)=1\\nand w1.temperature>w2.temperature",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select w1.id from Weather w1\\njoin Weather w2\\non datediff(w1.recordDate,w2.recordDate)=1\\nand w1.temperature>w2.temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 1975985,
                "title": "mysql-solution-using-inner-join",
                "content": "```\\nSELECT w1.Id\\nFROM Weather w1\\nINNER JOIN Weather w2\\nON TO_DAYS(w1.recordDate) = TO_DAYS(w2.recordDate) + 1\\nWHERE w1.Temperature > w2.Temperature\\n```\\n\\n![image](https://assets.leetcode.com/users/images/3ce3cbb7-07df-40af-9a80-ad5292bc202d_1650737075.1208518.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT w1.Id\\nFROM Weather w1\\nINNER JOIN Weather w2\\nON TO_DAYS(w1.recordDate) = TO_DAYS(w2.recordDate) + 1\\nWHERE w1.Temperature > w2.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1940792,
                "title": "accepted-solution-for-mysql",
                "content": "```sql\\nSELECT w1.Id FROM Weather w1\\nJOIN weather w2 ON w2.recorddate = date_sub(w1.recorddate, interval 1 day)\\nWHERE w1.temperature > w2.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT w1.Id FROM Weather w1\\nJOIN weather w2 ON w2.recorddate = date_sub(w1.recorddate, interval 1 day)\\nWHERE w1.temperature > w2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1924180,
                "title": "mysql-date-add-vs-plus-doubt",
                "content": "Does anybody know why this is accepted\\n```\\nselect w2.id as id from \\nweather w1 inner join weather w2\\non DATE_ADD(w1.recordDate, INTERVAL 1 DAY)  = w2.recordDate\\nwhere w2.temperature > w1.temperature;\\n```\\nWhile this is not accepted?\\n``` \\nselect w2.id as id from \\nweather w1 inner join weather w2\\non w1.recordDate + 1 = w2.recordDate\\nwhere w2.temperature > w1.temperature;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect w2.id as id from \\nweather w1 inner join weather w2\\non DATE_ADD(w1.recordDate, INTERVAL 1 DAY)  = w2.recordDate\\nwhere w2.temperature > w1.temperature;\\n```\n``` \\nselect w2.id as id from \\nweather w1 inner join weather w2\\non w1.recordDate + 1 = w2.recordDate\\nwhere w2.temperature > w1.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1756684,
                "title": "mssql-simple-solution",
                "content": "```\\nselect a.id\\n\\nfrom Weather a,\\nWeather b\\n\\nwhere DATEADD(day, -1, a.recordDate) = b.recordDate\\nand a.temperature > b.temperature\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nselect a.id\\n\\nfrom Weather a,\\nWeather b\\n\\nwhere DATEADD(day, -1, a.recordDate) = b.recordDate\\nand a.temperature > b.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1670397,
                "title": "easy-mysql-solution-faster-than-98-3-of-submissions",
                "content": "```\\nselect a.id \\nfrom weather a \\nleft join weather b\\non a.recordDate = date_add(b.recordDate,interval 1 day) \\nwhere a.temperature > b.temperature \\n```",
                "solutionTags": [],
                "code": "```\\nselect a.id \\nfrom weather a \\nleft join weather b\\non a.recordDate = date_add(b.recordDate,interval 1 day) \\nwhere a.temperature > b.temperature \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1603462,
                "title": "efficient-solution-using-self-join-and-where-clauses",
                "content": "```\\nSELECT\\n    W1.id\\nFROM\\n    Weather W1, Weather W2\\nWHERE\\n    W1.recordDate = W2.recordDate + INTERVAL 1 DAY\\n    AND\\n    W1.temperature > W2.temperature\\n;\\n    \\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    W1.id\\nFROM\\n    Weather W1, Weather W2\\nWHERE\\n    W1.recordDate = W2.recordDate + INTERVAL 1 DAY\\n    AND\\n    W1.temperature > W2.temperature\\n;\\n    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1499808,
                "title": "89-faster-mysql",
                "content": "```\\nselect\\n    W1.id\\nfrom\\n    Weather W1\\ninner join\\n    Weather W2\\non W1.Temperature > W2.Temperature and DATE(W1.RecordDate) = DATE(W2.RecordDate + INTERVAL 1 DAY)\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect\\n    W1.id\\nfrom\\n    Weather W1\\ninner join\\n    Weather W2\\non W1.Temperature > W2.Temperature and DATE(W1.RecordDate) = DATE(W2.RecordDate + INTERVAL 1 DAY)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1410233,
                "title": "subquery-with-datediff",
                "content": "```\\nSELECT id \\nFROM Weather w1\\nWHERE Temperature > (\\n    SELECT Temperature \\n    FROM Weather w2\\n    WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1\\n\\t)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id \\nFROM Weather w1\\nWHERE Temperature > (\\n    SELECT Temperature \\n    FROM Weather w2\\n    WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1\\n\\t)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1387867,
                "title": "extremely-fast-solution-no-joins-using-lag-cte",
                "content": "```\\nWITH TEMP AS(\\nSELECT\\n    id, \\n    recordDate, \\n    LAG(recordDate) OVER(ORDER BY recordDate) \"recordDate2\", \\n    Temperature, \\n\\tLAG(Temperature) OVER(ORDER BY recordDate) \"Temperature2\"\\nFROM\\n    Weather\\n)\\n\\nSELECT id\\nFROM TEMP \\nWHERE \\n    (Temperature IS NOT NULL) AND \\n    (Temperature > Temperature2) AND \\n    (DATEDIFF(recordDate,recordDate2)) = 1\\n```",
                "solutionTags": [],
                "code": "```\\nWITH TEMP AS(\\nSELECT\\n    id, \\n    recordDate, \\n    LAG(recordDate) OVER(ORDER BY recordDate) \"recordDate2\", \\n    Temperature, \\n\\tLAG(Temperature) OVER(ORDER BY recordDate) \"Temperature2\"\\nFROM\\n    Weather\\n)\\n\\nSELECT id\\nFROM TEMP \\nWHERE \\n    (Temperature IS NOT NULL) AND \\n    (Temperature > Temperature2) AND \\n    (DATEDIFF(recordDate,recordDate2)) = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1375759,
                "title": "cross-join-mysql-simple-solution",
                "content": "SELECT \\n    DISTINCT w2.id\\nFROM \\n    Weather w1 JOIN Weather w2\\n    ON w1.recordDate <> w2.recordDate\\nWHERE \\n    DATEDIFF(w2.recordDate,w1.recordDate) = 1\\n    AND \\n    w2.Temperature > w1.Temperature",
                "solutionTags": [],
                "code": "SELECT \\n    DISTINCT w2.id\\nFROM \\n    Weather w1 JOIN Weather w2\\n    ON w1.recordDate <> w2.recordDate\\nWHERE \\n    DATEDIFF(w2.recordDate,w1.recordDate) = 1\\n    AND \\n    w2.Temperature > w1.Temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 1361768,
                "title": "faster-than-91-06-296ms-using-lag-window-function",
                "content": "```\\nWITH cte as (\\n    select id, \\n    temperature,\\n    recordDate,\\n    lag(temperature) OVER (ORDER BY recordDate) as \"prev_temp\",\\n    lag(recordDate) OVER (ORDER BY recordDate) as \"prev_date\"\\n    FROM Weather\\n)\\nSELECT id from cte\\nWHERE temperature > prev_temp\\nAND DATEDIFF(recordDate, prev_date) = 1\\n```",
                "solutionTags": [],
                "code": "```\\nWITH cte as (\\n    select id, \\n    temperature,\\n    recordDate,\\n    lag(temperature) OVER (ORDER BY recordDate) as \"prev_temp\",\\n    lag(recordDate) OVER (ORDER BY recordDate) as \"prev_date\"\\n    FROM Weather\\n)\\nSELECT id from cte\\nWHERE temperature > prev_temp\\nAND DATEDIFF(recordDate, prev_date) = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1177152,
                "title": "easy-to-understand",
                "content": "SELECT a.id as Id\\nFROM weather a , weather b\\nWHERE DATEDIFF(a.recordDate , b.recordDate)= 1 // for recognize pervious date \\nAND a.temperature > b.temperature;    // compare temperature between perious two dates",
                "solutionTags": [],
                "code": "SELECT a.id as Id\\nFROM weather a , weather b\\nWHERE DATEDIFF(a.recordDate , b.recordDate)= 1 // for recognize pervious date \\nAND a.temperature > b.temperature;    // compare temperature between perious two dates",
                "codeTag": "Unknown"
            },
            {
                "id": 1165750,
                "title": "mysql-using-cte-and-lag",
                "content": "```\\nwith cte as \\n            (\\n            select  id,\\n                    datediff(recordDate, LAG(recordDate, 1) over(order by recordDate)) day_diff,\\n                    temperature - LAG(Temperature) over(order by recordDate) temp_diff\\n            from weather\\n            )\\nselect id \\nfrom cte\\nwhere day_diff = 1 \\nand  temp_diff > 0\\n\\n```",
                "solutionTags": [],
                "code": "```\\nwith cte as \\n            (\\n            select  id,\\n                    datediff(recordDate, LAG(recordDate, 1) over(order by recordDate)) day_diff,\\n                    temperature - LAG(Temperature) over(order by recordDate) temp_diff\\n            from weather\\n            )\\nselect id \\nfrom cte\\nwhere day_diff = 1 \\nand  temp_diff > 0\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1095133,
                "title": "e197-rising-temperature",
                "content": "```\\nSELECT w1.id FROM Weather w1, Weather w2\\nWHERE w1.Temperature > w2.Temperature \\nAND TO_DAYS(w1.recordDate) - TO_DAYS(w2.recordDate) = 1\\n```\\n```\\nSELECT w1.id FROM Weather w1, Weather w2\\nWHERE w1.Temperature > w2.Temperature \\nAND DATEDIFF(w1.recordDate, w2.recordDate) = 1\\n```\\n```\\nSELECT w1.id FROM Weather w1, Weather w2\\nWHERE w1.Temperature > w2.Temperature \\nAND SUBDATE(w1.recordDate, 1) = w2.recordDate\\n```\\n```\\nSELECT w1.id FROM Weather w1 JOIN Weather w2\\nON SUBDATE(w1.recordDate, 1) = w2.recordDate\\nWHERE w1.Temperature > w2.Temperature \\n```",
                "solutionTags": [],
                "code": "```\\nSELECT w1.id FROM Weather w1, Weather w2\\nWHERE w1.Temperature > w2.Temperature \\nAND TO_DAYS(w1.recordDate) - TO_DAYS(w2.recordDate) = 1\\n```\n```\\nSELECT w1.id FROM Weather w1, Weather w2\\nWHERE w1.Temperature > w2.Temperature \\nAND DATEDIFF(w1.recordDate, w2.recordDate) = 1\\n```\n```\\nSELECT w1.id FROM Weather w1, Weather w2\\nWHERE w1.Temperature > w2.Temperature \\nAND SUBDATE(w1.recordDate, 1) = w2.recordDate\\n```\n```\\nSELECT w1.id FROM Weather w1 JOIN Weather w2\\nON SUBDATE(w1.recordDate, 1) = w2.recordDate\\nWHERE w1.Temperature > w2.Temperature \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1058654,
                "title": "lag-function-datediff-82-75-faster",
                "content": "```\\nWITH Weather_Diff AS(\\n    SELECT id, \\n    Temperature  - LAG(Temperature) OVER(ORDER BY recordDate) temp_diff ,\\n    DATEDIFF(recordDate , LAG(recordDate) OVER (ORDER BY recordDate)) date_diff   \\n    FROM Weather)\\n\\nSELECT id\\nFROM Weather_Diff\\nWHERE temp_diff > 0 and date_diff = 1;\\n```\\n",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\nWITH Weather_Diff AS(\\n    SELECT id, \\n    Temperature  - LAG(Temperature) OVER(ORDER BY recordDate) temp_diff ,\\n    DATEDIFF(recordDate , LAG(recordDate) OVER (ORDER BY recordDate)) date_diff   \\n    FROM Weather)\\n\\nSELECT id\\nFROM Weather_Diff\\nWHERE temp_diff > 0 and date_diff = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1024840,
                "title": "datediff-and-lag",
                "content": "```\\n# Write your MySQL query statement below\\nWITH tab1 AS\\n    (SELECT\\n        *,\\n        temperature- LAG(temperature) OVER (ORDER BY recordDate) AS temp_diff,\\n        DATEDIFF(recordDate, LAG(recordDate) OVER (ORDER BY recordDate)) AS date_diff\\n    FROM\\n        weather)\\n        \\n\\nSELECT\\n    id\\nFROM\\n    tab1\\nWHERE\\n    temp_diff > 0 AND \\n    date_diff = 1\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nWITH tab1 AS\\n    (SELECT\\n        *,\\n        temperature- LAG(temperature) OVER (ORDER BY recordDate) AS temp_diff,\\n        DATEDIFF(recordDate, LAG(recordDate) OVER (ORDER BY recordDate)) AS date_diff\\n    FROM\\n        weather)\\n        \\n\\nSELECT\\n    id\\nFROM\\n    tab1\\nWHERE\\n    temp_diff > 0 AND \\n    date_diff = 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 882134,
                "title": "just-another-approach-still-beats-99",
                "content": "Not the easiest way ofc but it is interesting how fast it is. Decided to share\\n\\n```\\nselect b.id from (\\n    select row_number() over(order by recordDate) i, Id, Temperature, recordDate\\n    from weather\\n\\t) a,\\n    (select row_number() over(order by recordDate) i, Id, Temperature, recordDate\\n    from weather\\n\\t) b\\nwhere a.i + 1 = b.i\\nand a.Temperature < b.Temperature\\nand date(a.recordDate) + interval 1 day = date(b.recordDate);\\n```",
                "solutionTags": [],
                "code": "```\\nselect b.id from (\\n    select row_number() over(order by recordDate) i, Id, Temperature, recordDate\\n    from weather\\n\\t) a,\\n    (select row_number() over(order by recordDate) i, Id, Temperature, recordDate\\n    from weather\\n\\t) b\\nwhere a.i + 1 = b.i\\nand a.Temperature < b.Temperature\\nand date(a.recordDate) + interval 1 day = date(b.recordDate);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 869624,
                "title": "still-don-t-get-why-i-m-wrong-can-anyone-help-mysql",
                "content": "SELECT id AS Id\\nFROM (SELECT * ,\\n             LAG(Temperature, 1) OVER (ORDER BY recordDate) as pre\\n      FROM Weather) table1\\nWHERE table1.Temperature > table1.pre",
                "solutionTags": [],
                "code": "SELECT id AS Id\\nFROM (SELECT * ,\\n             LAG(Temperature, 1) OVER (ORDER BY recordDate) as pre\\n      FROM Weather) table1\\nWHERE table1.Temperature > table1.pre",
                "codeTag": "Unknown"
            },
            {
                "id": 863383,
                "title": "use-inner-join-to-date",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nSELECT W1.Id \\nFROM Weather W1\\nINNER JOIN Weather W2 ON W1.RecordDate -1= W2.RecordDate\\nWHERE W1.Temperature > W2.Temperature;\\n```\\n\\u8981\\u6BD4\\u8F83\\u4E24\\u4E2A\\u6E29\\u5EA6\\u8FD8\\u662F\\u4F7F\\u7528\\u5185\\u8FDE\\u63A5\\uFF0C\\u67E5\\u4E86\\u7F51\\u7EDC\\u624D\\u77E5\\u9053\\u5185\\u8FDE\\u63A5\\u4E5F\\u53EF\\u4EE5\\u7528\\u8BA1\\u7B97\\u7B26\\u7684\\uFF0C\\u8FD9\\u4E2A\\u7EA0\\u7ED3\\u4E86\\u4E00\\u4E0B\\uFF0C\\u975E\\u65E5\\u671F\\u7C7B\\u578Bdate\\u7684\\u683C\\u5F0F\\u8981\\u6BD4\\u8F83\\u8981\\u4F7F\\u7528to_date\\u51FD\\u6570\\uFF0C\\u5E76\\u4E14\\u540E\\u9762\\u65E5\\u671F\\u683C\\u5F0F\\u8BB0\\u5F97\\u662F**\\u5355\\u5F15\\u53F7**\\uFF0C\\u4F7F\\u7528\\u53CC\\u5F15\\u53F7\\u4F1A\\u62A5\\u9519\\n```\\nORA-00904: \"YYYY-MM-DD\": invalid identifier\\n```\\n\\u5982\\u679C\\u8FD9\\u9053\\u9898\\u662F\\u5B57\\u7B26\\u4E32\\u683C\\u5F0F\\u7684\\u65E5\\u671F\\uFF0C\\u8FD8\\u8981\\u5148to_date\\u8F6C\\u6362\\n```\\n/* Write your PL/SQL query statement below \\uFF0C\\u5047\\u8BBERecoreDate\\u5B57\\u6BB5\\u662F\\u5B57\\u7B26\\u4E32\\u683C\\u5F0F\\uFF0C\\u5176\\u5B9E\\u7528\\u4E86TO_DATE\\u4E4B\\u540E\\u6548\\u7387\\u53CD\\u800C\\u9AD8\\u4E86*/\\nSELECT W1.Id \\nFROM Weather W1\\nINNER JOIN Weather W2 ON TO_DATE(W1.RecordDate,\\'YYYY-MM-DD\\') -1= TO_DATE(W2.RecordDate,\\'YYYY-MM-DD\\')\\nWHERE W1.Temperature > W2.Temperature;\\n```\\n\\u8FD8\\u6709\\u8FD9\\u9053\\u9898\\u6709\\u4E2A\\u5C0F\\u5751\\uFF0C\\u6D4B\\u8BD5\\u9636\\u6BB5\\u8F93\\u5165\\u7684\\u6570\\u636E\\u8DDF\\u63D0\\u4EA4\\u9636\\u6BB5\\u8F93\\u5165\\u7684\\u6570\\u636E\\u662F\\u4E0D\\u4E00\\u6837\\u7684\\uFF0C\\u6240\\u4EE5\\u7528ID\\u5B57\\u6BB5\\u53D6\\u5DE7\\u662F\\u4E0D\\u884C\\u4E86\\uFF0C\\u9644\\u4E0A\\u6211\\u4E00\\u5F00\\u59CB\\u53D6\\u5DE7\\u5728\\u6D4B\\u8BD5\\u9636\\u6BB5\\u8DD1\\u6210\\u529F\\u4F46\\u63D0\\u4EA4\\u5931\\u8D25\\u7684\\u4EE3\\u7801\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT W1.id \\nFROM Weather W1\\nINNER JOIN Weather W2 ON W2.id +1 = W1.id\\nWHERE W1.Temperature > W2.Temperature;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT W1.Id \\nFROM Weather W1\\nINNER JOIN Weather W2 ON W1.RecordDate -1= W2.RecordDate\\nWHERE W1.Temperature > W2.Temperature;\\n```\n```\\nORA-00904: \"YYYY-MM-DD\": invalid identifier\\n```\n```\\n/* Write your PL/SQL query statement below \\uFF0C\\u5047\\u8BBERecoreDate\\u5B57\\u6BB5\\u662F\\u5B57\\u7B26\\u4E32\\u683C\\u5F0F\\uFF0C\\u5176\\u5B9E\\u7528\\u4E86TO_DATE\\u4E4B\\u540E\\u6548\\u7387\\u53CD\\u800C\\u9AD8\\u4E86*/\\nSELECT W1.Id \\nFROM Weather W1\\nINNER JOIN Weather W2 ON TO_DATE(W1.RecordDate,\\'YYYY-MM-DD\\') -1= TO_DATE(W2.RecordDate,\\'YYYY-MM-DD\\')\\nWHERE W1.Temperature > W2.Temperature;\\n```\n```\\n/* Write your PL/SQL query statement below */\\nSELECT W1.id \\nFROM Weather W1\\nINNER JOIN Weather W2 ON W2.id +1 = W1.id\\nWHERE W1.Temperature > W2.Temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847664,
                "title": "oracle-99-9",
                "content": "```\\nselect b.id\\nfrom Weather a join Weather b on\\na.recordDate=b.recordDate-1\\nwhere b.Temperature>a.Temperature\\n```",
                "solutionTags": [],
                "code": "```\\nselect b.id\\nfrom Weather a join Weather b on\\na.recordDate=b.recordDate-1\\nwhere b.Temperature>a.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 822793,
                "title": "mysql-faster-easier",
                "content": "```\\nSELECT temp.id\\nFROM(\\n    SELECT w1.id, (w1.Temperature - w2.Temperature) as diff \\n    FROM Weather w1\\n    JOIN Weather w2\\n    ON DATEDIFF(w1.recordDate, w2.recordDate)=1) temp\\nWHERE temp.diff > 0;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT temp.id\\nFROM(\\n    SELECT w1.id, (w1.Temperature - w2.Temperature) as diff \\n    FROM Weather w1\\n    JOIN Weather w2\\n    ON DATEDIFF(w1.recordDate, w2.recordDate)=1) temp\\nWHERE temp.diff > 0;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 705734,
                "title": "mysql-uses-inferred-join-and-to-days",
                "content": "```\\n# Write your MySQL query statement below\\n\\nSELECT higher.Id \\nFROM Weather higher, Weather lower\\nWHERE higher.Temperature > lower.Temperature \\nAND to_days(higher.RecordDate)-to_days(lower.RecordDate)=1;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT higher.Id \\nFROM Weather higher, Weather lower\\nWHERE higher.Temperature > lower.Temperature \\nAND to_days(higher.RecordDate)-to_days(lower.RecordDate)=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 566700,
                "title": "very-simple-solution-in-mysql",
                "content": "```\\nSELECT w2.Id FROM Weather w1, Weather w2\\nWHERE DATEDIFF(w2.RecordDate, w1.RecordDate) = 1\\nAND w2.Temperature >  w1.Temperature\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT w2.Id FROM Weather w1, Weather w2\\nWHERE DATEDIFF(w2.RecordDate, w1.RecordDate) = 1\\nAND w2.Temperature >  w1.Temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 501996,
                "title": "easy-mssql",
                "content": "SELECT\\nw1.Id \\nFROM Weather w1\\nINNER JOIN  Weather w2\\nON w1. RecordDate = w2. RecordDate+1\\nWHERE w1.Temperature > w2. Temperature",
                "solutionTags": [],
                "code": "SELECT\\nw1.Id \\nFROM Weather w1\\nINNER JOIN  Weather w2\\nON w1. RecordDate = w2. RecordDate+1\\nWHERE w1.Temperature > w2. Temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 429095,
                "title": "sqlserver",
                "content": "select a.id as Id\\nfrom Weather a , Weather b \\nwhere datediff(day,  b.RecordDate, a.RecordDate) = 1\\nand a.Temperature > b.Temperature",
                "solutionTags": [],
                "code": "select a.id as Id\\nfrom Weather a , Weather b \\nwhere datediff(day,  b.RecordDate, a.RecordDate) = 1\\nand a.Temperature > b.Temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 359006,
                "title": "oracle-solution-easy-to-unserstand",
                "content": "```\\nselect w.id id\\nfrom weather w\\njoin \\nweather k\\non w.recorddate - 1 = k.recorddate \\nwhere w.temperature > k.temperature;\\n```",
                "solutionTags": [],
                "code": "```\\nselect w.id id\\nfrom weather w\\njoin \\nweather k\\non w.recorddate - 1 = k.recorddate \\nwhere w.temperature > k.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 349638,
                "title": "mssql-window-functions-beats-97",
                "content": "```\\n;WITH Diffs AS\\n(\\n    SELECT \\n        Id,\\n        RecordDate,\\n        LAG(RecordDate) OVER (ORDER BY RecordDate ASC) AS PrevDate,\\n        Temperature - LAG(Temperature) OVER (ORDER BY RecordDate ASC) AS Diff\\n    FROM Weather\\n)\\nSELECT Id FROM Diffs\\nWHERE Diff > 0 AND DATEDIFF(day, PrevDate, RecordDate) = 1\\nORDER BY Id ASC\\n```",
                "solutionTags": [],
                "code": "```\\n;WITH Diffs AS\\n(\\n    SELECT \\n        Id,\\n        RecordDate,\\n        LAG(RecordDate) OVER (ORDER BY RecordDate ASC) AS PrevDate,\\n        Temperature - LAG(Temperature) OVER (ORDER BY RecordDate ASC) AS Diff\\n    FROM Weather\\n)\\nSELECT Id FROM Diffs\\nWHERE Diff > 0 AND DATEDIFF(day, PrevDate, RecordDate) = 1\\nORDER BY Id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 340373,
                "title": "using-lag-function",
                "content": "```\\nselect id from (\\nselect id,RecordDate,datediff(day,RecordDate,lag(RecordDate,1,RecordDate)over(order by RecordDate )) as date_dif,\\ncase when Temperature > lag(Temperature,1,Temperature)over(order by RecordDate) then 1 else 0 end as result\\nfrom weather) a\\nwhere result = 1 and date_dif=-1\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect id from (\\nselect id,RecordDate,datediff(day,RecordDate,lag(RecordDate,1,RecordDate)over(order by RecordDate )) as date_dif,\\ncase when Temperature > lag(Temperature,1,Temperature)over(order by RecordDate) then 1 else 0 end as result\\nfrom weather) a\\nwhere result = 1 and date_dif=-1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 290178,
                "title": "mssql-solution",
                "content": "select b.Id from weather a\\nleft join weather b\\non a.RecordDate=dateadd(day,-1,b.RecordDate)\\nwhere a.Temperature<b.Temperature",
                "solutionTags": [],
                "code": "select b.Id from weather a\\nleft join weather b\\non a.RecordDate=dateadd(day,-1,b.RecordDate)\\nwhere a.Temperature<b.Temperature",
                "codeTag": "Unknown"
            },
            {
                "id": 198459,
                "title": "what-is-wrong-with-this-query-i-could-not-pass-the-14th-test-case",
                "content": "select w1.Id\\nfrom Weather w1 join Weather w2\\non w1.RecordDate = w2.RecordDate+1\\nwhere w1.Temperature > w2.Temperature;",
                "solutionTags": [],
                "code": "select w1.Id\\nfrom Weather w1 join Weather w2\\non w1.RecordDate = w2.RecordDate+1\\nwhere w1.Temperature > w2.Temperature;",
                "codeTag": "Unknown"
            },
            {
                "id": 173071,
                "title": "ms-server-solution-using-dateadd-function",
                "content": "```\\nSELECT w1.Id FROM Weather w1\\nJOIN Weather w2 \\nON w2.Temperature < w1.Temperature AND w2.RecordDate = DATEADD(day, -1, w1.RecordDate)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT w1.Id FROM Weather w1\\nJOIN Weather w2 \\nON w2.Temperature < w1.Temperature AND w2.RecordDate = DATEADD(day, -1, w1.RecordDate)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 167225,
                "title": "same-output-why-it-shows-wrong-answer",
                "content": "Select a.Id\\nFrom Weather a, Weather b\\nWhere a.RecordDate-b.RecordDate = 1 and a.Temperature > b.Temperature;",
                "solutionTags": [],
                "code": "Select a.Id\\nFrom Weather a, Weather b\\nWhere a.RecordDate-b.RecordDate = 1 and a.Temperature > b.Temperature;",
                "codeTag": "Unknown"
            },
            {
                "id": 55640,
                "title": "using-two-variables-1000ms",
                "content": "    # Write your MySQL query statement below\\n    select Id \\n    from(\\n            select \\n                w.Id, \\n                if(@prev<Temperature && DATEDIFF(@prevD,Date)=-1,1,0) as increased,\\n                @prev := w.Temperature, \\n                @prevD :=w.Date\\n            from \\n                (select * from Weather order by Date asc) w, # order the dates\\n                (select @prev := 10000) p, \\n                (select @prevD := null) d\\n        ) a\\n    where \\n    increased = 1;",
                "solutionTags": [],
                "code": "    # Write your MySQL query statement below\\n    select Id \\n    from(\\n            select \\n                w.Id, \\n                if(@prev<Temperature && DATEDIFF(@prevD,Date)=-1,1,0) as increased,\\n                @prev := w.Temperature, \\n                @prevD :=w.Date\\n            from \\n                (select * from Weather order by Date asc) w, # order the dates\\n                (select @prev := 10000) p, \\n                (select @prevD := null) d\\n        ) a\\n    where \\n    increased = 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 3782741,
                "title": "easy-explanation",
                "content": "**We have to perform inner join since we comparing 2 values in one table**\\n# How do we get the second value ?\\nTo get the second value we use DATE_ADD Function and save it in  w1.recordDate\\n# WHATS THIS FUNCTION\\nThe DATE_ADD() function adds a time/date interval to a date and then returns the date.\\n\\nSyntax\\nDATE_ADD(date, INTERVAL value addunit)\\nIn our case we need one day\\n\\nFinally , we compare and get the result based on ther where condition\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT w1.id FROM Weather w1\\nJOIN Weather w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\nWHERE w1.temperature > w2.temperature\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT w1.id FROM Weather w1\\nJOIN Weather w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\nWHERE w1.temperature > w2.temperature\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3666772,
                "title": "correlated-queries-sql-nested-queries",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT w1.id\\nFROM weather  w1\\nWHERE exists (\\n  SELECT w2.id \\n  FROM weather  w2\\n  WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature\\n);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT w1.id\\nFROM weather  w1\\nWHERE exists (\\n  SELECT w2.id \\n  FROM weather  w2\\n  WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature\\n);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3589091,
                "title": "easy-solution-with-line-by-line-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- The query must retrieve the id of the date when the temperature was more than the previous date.\\n- A **self-join is done on Weather table with aliases W1 and W2**, with W1 chosen as the table to retrieve the id.\\n- For this, we use the **DATEDIFF() function** in the Where Clause such that the difference between the date is 1, meaning they are **consecutive dates**.\\n- Since we retrieve id from W1, we must take care to write** W1 in the first argument of DATEDIFF()**. The correct code with retrieval of id from W2 is commented below in the solution.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. In the SELECT statement, we retrieve the id from the chosen alias of the table, here W1. If you retrieve id from W2, consider the commented code.\\n2. In the FROM statement, we perform a **JOIN operation between the two aliases of Weather table namely W1 and W2**.\\n3. In the WHERE clause, we use the **DATEDIFF() function** such that the difference between the date is 1, meaning they are consecutive dates. Here, we take **W1 as first argument to the DATEDIFF() function**.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT W1.id\\nFROM Weather as W1 JOIN Weather as W2\\nWHERE DATEDIFF(W1.RecordDate, W2.RecordDate) = 1 AND W1.Temperature > W2.Temperature;\\n\\n# SELECT W2.id\\n# FROM Weather as W1 JOIN Weather as W2\\n# WHERE DATEDIFF(W2.RecordDate, W1.RecordDate) = 1 AND W2.Temperature > W1.Temperature;\\n```\\n# Note \\nPlease upvote if you find my solution helpful. If you have any doubts, suggestion or want to discuss any solution, comment it. If you wish to discuss other related topics, feel free to message me on LinkedIn, https://leetcode.com/prathams29/",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT W1.id\\nFROM Weather as W1 JOIN Weather as W2\\nWHERE DATEDIFF(W1.RecordDate, W2.RecordDate) = 1 AND W1.Temperature > W2.Temperature;\\n\\n# SELECT W2.id\\n# FROM Weather as W1 JOIN Weather as W2\\n# WHERE DATEDIFF(W2.RecordDate, W1.RecordDate) = 1 AND W2.Temperature > W1.Temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3555500,
                "title": "inner-join-on-basis-of-date-diff-and-temperature",
                "content": "# MySql\\n```\\nselect w1.id  from Weather w1 inner join Weather w2 on datediff(w1.recordDate,w2.recordDate)=1 and w1.temperature >w2.temperature;\\n```\\n# Oracle\\n```\\nselect w1.id  from Weather w1 inner join Weather w2 on w1.recordDate-w2.recordDate=1 and w1.temperature >w2.temperature;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nselect w1.id  from Weather w1 inner join Weather w2 on datediff(w1.recordDate,w2.recordDate)=1 and w1.temperature >w2.temperature;\\n```\n```\\nselect w1.id  from Weather w1 inner join Weather w2 on w1.recordDate-w2.recordDate=1 and w1.temperature >w2.temperature;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3550973,
                "title": "easy-sql-code",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT wt1.id FROM Weather AS wt1 , Weather AS wt2 \\nWHERE wt1.temperature> wt2.temperature AND TO_DAYS(wt1.recordDate)-TO_DAYS(wt2.recordDate)=1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT wt1.id FROM Weather AS wt1 , Weather AS wt2 \\nWHERE wt1.temperature> wt2.temperature AND TO_DAYS(wt1.recordDate)-TO_DAYS(wt2.recordDate)=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3161723,
                "title": "mysql-date-add",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT w1.id as Id FROM Weather w1\\nINNER JOIN Weather w2 \\nON w1.temperature > w2.temperature \\nAND w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY);\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT w1.id as Id FROM Weather w1\\nINNER JOIN Weather w2 \\nON w1.temperature > w2.temperature \\nAND w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3085850,
                "title": "simple-query-rising-temperature",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect a.id from Weather a, Weather b where a.temperature>b.temperature and datediff(a.recorddate ,b.recorddate)=1  order by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect a.id from Weather a, Weather b where a.temperature>b.temperature and datediff(a.recorddate ,b.recorddate)=1  order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3055912,
                "title": "easy-solution-oracle",
                "content": "\\n\\n# Code\\n```\\n\\nselect distinct id\\nfrom Weather\\nwhere prior temperature < temperature\\nconnect by prior recordDate +1 = recordDate\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n\\nselect distinct id\\nfrom Weather\\nwhere prior temperature < temperature\\nconnect by prior recordDate +1 = recordDate\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3043381,
                "title": "mysql-3-different-solution-date-add-and-datediff-function",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect w2.id\\nfrom Weather w1, Weather w2\\nwhere w1.recordDate = date_add(w2.recordDate, interval -1 day)\\nand w1.temperature < w2.temperature\\n\\ntake more time  \\nSELECT w1.id \\nFROM Weather w1 JOIN Weather w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.temperature > w2.temperature;\\n\\n\\nselect x.id \\nfrom Weather x,Weather y \\nwhere x.temperature>y.temperature and datediff(x.recordDate,y.recordDate)=1;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect w2.id\\nfrom Weather w1, Weather w2\\nwhere w1.recordDate = date_add(w2.recordDate, interval -1 day)\\nand w1.temperature < w2.temperature\\n\\ntake more time  \\nSELECT w1.id \\nFROM Weather w1 JOIN Weather w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\\nAND w1.temperature > w2.temperature;\\n\\n\\nselect x.id \\nfrom Weather x,Weather y \\nwhere x.temperature>y.temperature and datediff(x.recordDate,y.recordDate)=1;",
                "codeTag": "Unknown"
            },
            {
                "id": 2917749,
                "title": "oracle-solution-with-window-function-nth-value",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nwith wind_tmp as (\\n    select t.id, t.recordDate, t.temperature, NTH_VALUE(t.temperature, 2) from last over (order by t.recordDate range between 1 preceding and current row) as prev_temp\\n        from Weather t\\n)\\n\\nselect t.id\\n    from wind_tmp t\\n        where t.temperature > t.prev_temp\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nwith wind_tmp as (\\n    select t.id, t.recordDate, t.temperature, NTH_VALUE(t.temperature, 2) from last over (order by t.recordDate range between 1 preceding and current row) as prev_temp\\n        from Weather t\\n)\\n\\nselect t.id\\n    from wind_tmp t\\n        where t.temperature > t.prev_temp\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2915318,
                "title": "solution-using-date-add-on-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect w1.id \\nfrom weather w1 join weather w2\\nwhere w1.temperature > w2.temperature \\nand w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect w1.id \\nfrom weather w1 join weather w2\\nwhere w1.temperature > w2.temperature \\nand w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2909289,
                "title": "used-dateadd-to-compare-find-yesterday-s-date",
                "content": "Using DATEADD to compare find yesterdays date\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect w.id from weather w where w.temperature  > (\\n    select temperature from weather where recordDate = DATEADD(day, -1, w.recordDate) and temperature is not null )\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect w.id from weather w where w.temperature  > (\\n    select temperature from weather where recordDate = DATEADD(day, -1, w.recordDate) and temperature is not null )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2851438,
                "title": "mysql-complex-solution-using-window-functions-and-common-table-expressions",
                "content": "I saw so many people putting out \"simple\" solutions so I thought why not just put a complex one?\\n```\\nWITH cte AS (\\n    SELECT \\n        id, \\n        recordDate,\\n\\t\\tLAG(recordDate) OVER (ORDER BY recordDate) AS prev_date,\\n        temperature, \\n        LAG(temperature) OVER (ORDER BY recordDate) AS prev_temp\\n    FROM Weather\\n)\\nSELECT id \\nFROM cte\\nWHERE \\n    temperature > prev_temp AND\\n    DATEDIFF(recordDate, prev_date) = 1;\\n```\\nSo, Here we are using 2 important concepts of SQL:\\n1. Common Table Expressions or CTEs, and\\n2. LAG() Window Function\\n\\nLet\\'s understand both of them, one by one:\\n* **CTEs:**\\n\\nCommon Table Expressions are used to simplify (quite ironic in this solution though, innit?) complex SQL queries. Now, the question is how does it do it?\\nSo, it basically stores (temporarily only) the result set of a SQL query which we can reference for later use. For eg:\\n```\\n-- The CTE \"name_of_cte\" can be used later, i.e. the result set with field foo can be referenced later in another query as in our solution.\\nWITH name_of_cte AS (\\n\\tSELECT foo FROM bar\\n)\\nSELECT foo FROM name_of_cte;\\n```\\nIt\\'s pretty much just that. Simple, right?\\n\\n* **LAG() Window Function**\\n\\nThe LAG() function allows us to simply (Oh! I said it again) shift the row data for any particular field by an specific offset value, as sorted by a specified column or set of columns.\\nSyntax:\\n`LAG(expression [,offset[,default_value]]) OVER(ORDER BY columns)`\\n\\nSo, in our solution I shifted the recordDate and temperature column as prev_date and prev_temp respectively and refrenced them later (CTE?) to check if:\\n```\\ntemperature > prev_temp AND DATEDIFF(recordDate, prev_date) = 1;\\n```\\n\\nSo, I hope you learned something complex today (ofcourse, if you don\\'t already find this simple). Later!",
                "solutionTags": [],
                "code": "```\\nWITH cte AS (\\n    SELECT \\n        id, \\n        recordDate,\\n\\t\\tLAG(recordDate) OVER (ORDER BY recordDate) AS prev_date,\\n        temperature, \\n        LAG(temperature) OVER (ORDER BY recordDate) AS prev_temp\\n    FROM Weather\\n)\\nSELECT id \\nFROM cte\\nWHERE \\n    temperature > prev_temp AND\\n    DATEDIFF(recordDate, prev_date) = 1;\\n```\n```\\n-- The CTE \"name_of_cte\" can be used later, i.e. the result set with field foo can be referenced later in another query as in our solution.\\nWITH name_of_cte AS (\\n\\tSELECT foo FROM bar\\n)\\nSELECT foo FROM name_of_cte;\\n```\n```\\ntemperature > prev_temp AND DATEDIFF(recordDate, prev_date) = 1;\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1569017,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1565745,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576886,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576869,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1574935,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1572856,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576214,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576015,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576857,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1883213,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1569017,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1565745,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576886,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576869,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1574935,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1572856,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576214,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576015,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1576857,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1883213,
                "content": [
                    {
                        "username": "frunfola1229",
                        "content": "\\n**SELECT**  w1.Id \\n**FROM**     Weather w1, Weather w2\\n**WHERE**   dateDiff(w1.Date,w2.Date) = 1        **AND**    w1.Temperature > w2.Temperature;"
                    },
                    {
                        "username": "Vipul_Chaudhary_2003",
                        "content": "Okay great.\nNow let's read rules together\n\nDiscussion Rules\n1. Please don't post any solutions in this discussion.\n\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\n\n3. If you'd like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "jargolastik",
                        "content": "[@user8224IM](/user8224IM) self join creates every possible combination of columns so that means that you can just filter out the rows where the current temp is greater than yesterday\\'s"
                    },
                    {
                        "username": "JerryBlank",
                        "content": "[@user8224IM](/user8224IM) They have created 2 copies of the same table w1 and w2 and comparing each and every row. \\nSelecting only the ids for rows where \\nw1.date - w2.date =1 means that w1 is the date of next day to w2 (example: 2nd August - 1st August =1)\\nAND\\nw1.Temperature > w2.Temperature means Temperature on Date w1 is greater than Temperature on Date w2. \\n\\nso that would get Id with higher temperatures compared to its previous dates (yesterday).\\nHope this helps!"
                    },
                    {
                        "username": "user8224IM",
                        "content": "can you explain how/why this works please\\n"
                    },
                    {
                        "username": "chriszeng8",
                        "content": "Why is subtracting 1 directly from Date not working, but subdate(a.Date,1) works?\\n\\nMy code is \\n\\n    select W1.Id\\n    from Weather as W1, Weather as W2\\n    where W1.Date-1 = W2.Date and W1.Temperature> W2.Temperature\\n\\nit only passed 13/14 cases.\\n\\nHowever, when I changed `W1.Date-1` to `sub(W1.Date,1)` in the where clause, it worked. What is fundamental difference?"
                    },
                    {
                        "username": "Lysa123",
                        "content": "[@minhphamduy](/minhphamduy) cho m\\xECnh h\\u1ECFi v\\xEC sao ph\\u1EA3i c\\xF3 ch\\u1EEF subquery \\u1EDF cu\\u1ED1i v?\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "I think you not should do that, use date_add instead\\n# Write your MySQL query statement below\\n\\nselect id\\nfrom (\\n    select w1.id\\n    from weather w1, weather w2\\n    where w1.recordDate= DATE_ADD(w2.recordDate, interval 1 day) and w1.temperature > w2.temperature\\n) subquery"
                    },
                    {
                        "username": "har0101",
                        "content": "date is not int"
                    },
                    {
                        "username": "291831388",
                        "content": "[@michaelniki](/michaelniki)  Thank your for your response, it really helps me."
                    },
                    {
                        "username": "michaelniki",
                        "content": "subtracting 1 does not work for the date at the end of the month or year.\nTake this test case for example:\n\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2014-12-31 | 1           |\n| 2  | 2015-01-01 | 10          |\n| 3  | 2015-01-02 | 25          |\n\nrecordDate of id 2 (2015-01-01) - 1 does not equal to  2014-12-31\n\n```\nselect\n    *\n    , w1.recordDate - w2.recordDate\nfrom\n    weather w1, weather w2\norder by w1.id\n\n```\n\n| id | recordDate | temperature | id | recordDate | temperature | w1.recordDate - w2.recordDate |\n| -- | ---------- | ----------- | -- | ---------- | ----------- | ----------------------------- |\n| 1  | 2014-12-31 | 1           | 1  | 2014-12-31 | 1           | 0                             |\n| 1  | 2014-12-31 | 1           | 2  | 2015-01-01 | 10          | -8870                         |\n| 1  | 2014-12-31 | 1           | 3  | 2015-01-02 | 25          | -8871                         |\n| 2  | 2015-01-01 | 10          | 1  | 2014-12-31 | 1           | 8870                          |\n| 2  | 2015-01-01 | 10          | 2  | 2015-01-01 | 10          | 0                             |\n| 2  | 2015-01-01 | 10          | 3  | 2015-01-02 | 25          | -1                            |\n| 3  | 2015-01-02 | 25          | 1  | 2014-12-31 | 1           | 8871                          |\n| 3  | 2015-01-02 | 25          | 2  | 2015-01-01 | 10          | 1                             |\n| 3  | 2015-01-02 | 25          | 3  | 2015-01-02 | 25          | 0                             |\n"
                    },
                    {
                        "username": "suraj21193",
                        "content": "Its is running successfully but not able to submit!\\nSelect a.id\\nfrom \\n(Select id, temperature, lag(temperature) over(order by recordDate) as lt,\\ncase when temperature>lag(temperature) over(order by recordDate) then \\'High\\'\\nelse \\'Low\\'\\nend as \\'Status\\'\\nfrom Weather) a\\nwhere Status = \\'High\\';"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) the reason is that the test case has 2 dates with a day missing in between."
                    },
                    {
                        "username": "Palash5043",
                        "content": "\nselect x.Id from (\nselect Id,\n       recordDate,\n       temperature as temp,\n    lag(temperature,1) over(order by recordDate asc) as pre_day_temp\n    from weather) x\n    where x.temp>x.pre_day_temp;\n\nI am also facing the similar issue "
                    },
                    {
                        "username": "kashrex",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) test cases are failing because the dates have to be exact previous date. \"2000-12-14 |     |2000-12-16\"  have a date difference of more than 1 day."
                    },
                    {
                        "username": "jingpingyu1127",
                        "content": "[@avinashkumarjha05](/avinashkumarjha05) I think this is because that we are finding records with only 1 day difference. The records in the test case is using date with 2 days difference, which should not return anything for the output."
                    },
                    {
                        "username": "avinashkumarjha05",
                        "content": "mine too ... have u understood why the test case failing?\\n"
                    },
                    {
                        "username": "sandeep_kumar_75",
                        "content": "**SELECT a.id\\nFROM Weather a, Weather b\\nWHERE datediff(a.recordDate, b.recordDate) = 1\\nAND a.temperature > b.temperature;**"
                    },
                    {
                        "username": "themanutdmaniac",
                        "content": "Wow, what a solution. GOAT. amazing. all the best sandeep."
                    },
                    {
                        "username": "xudaiyanzi",
                        "content": "Hi everyone, I tried the query below. It works when I run MySQL, but it can not work when it is submitted.  Please help me. Thank you.\\n# Write your MySQL query statement below\\nSELECT y.id\\nFROM Weather x\\nLEFT JOIN Weather y ON x.Id +1 = y.Id\\nWHERE x.Temperature < y.Temperature\\n"
                    },
                    {
                        "username": "cassiellong1113",
                        "content": "date is not ascending sorted, and thus if you do not compare with dates but with ID, you may get wrong answer "
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a.recordDate,b.recordDate)=1\\n\\nYou must check the datas !"
                    },
                    {
                        "username": "patnanavarun",
                        "content": "you are just checking the id values .But not comparing the dates.\\n"
                    },
                    {
                        "username": "snehanshu17",
                        "content": "with tmp as (\\nselect id ,RecordDate,Temperature,\\nLAG (Temperature,1) OVER (ORDER BY RecordDate) AS prev_Temperature,\\n    LAG (RecordDate,1) OVER (ORDER BY RecordDate) AS prev_RecordDate\\nfrom Weather)\\n\\nselect id  from tmp where Temperature>prev_Temperature and (RecordDate-prev_RecordDate)=1"
                    },
                    {
                        "username": "mr-xed",
                        "content": "Really interesting approach, except it didn\\'t work for me from the get go for some reason, how ever I was able to solve it using `dateDiff(RecordDate, prev_RecordDate)` instead of `(RecordDate-prev_RecordDate)`"
                    },
                    {
                        "username": "XinyiQiu",
                        "content": "WITH yesterday AS (SELECT id,recordDate,temperature,DATE_SUB(recordDate, INTERVAL 1 DAY) AS yesterday\\nFROM Weather)\\n\\nSELECT yesterday.id\\nFROM yesterday LEFT JOIN Weather on yesterday.yesterday = Weather.recordDate\\nWHERE Weather.temperature IS NOT NULL AND yesterday.temperature > Weather.temperature"
                    },
                    {
                        "username": "nasirxia",
                        "content": "the idea is brilliant but why make things complicated? There should be a reasons for doing this."
                    },
                    {
                        "username": "anand_vineet19",
                        "content": "# Write your MySQL query statement below\\nSELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature AS today_temp, LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS yes_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE today_temp>yesterday_temp AND DATEDIFF(recordDate,yes_date)=1"
                    },
                    {
                        "username": "priyarb96",
                        "content": "Simple and neat query"
                    },
                    {
                        "username": "abebe_1983",
                        "content": "we need to rearrange this query a little bit as follows \\nwith CTE as (\\nselect\\nid,recordDate as [date], temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather\\n)\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and datediff(day,  prev_date, [date] ) = 1\\n\\n\\n"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect a.id\\nfrom weather a\\ninner join weather b\\non datediff(day, b.recordDate, a.recordDate) = 1\\nand a.temperature > b.temperature\\n\\n2)\\nwith cte as\\n(select *, \\n        lag(temperature)over(order by recordDate) as perviousTemp,\\n        lag(recordDate)over(order by recordDate) as perviousDate\\nfrom weather)\\nselect id from cte where temperature > perviousTemp and datediff(day, perviousDate, recordDate) = 1"
                    },
                    {
                        "username": "ann1996015",
                        "content": "This is my code, i think it is very hard ==\\n\\nSELECT DISTINCT  w2.id\\nFROM Weather w1\\nLEFT JOIN Weather w2 ON ABS(DATEDIFF(day,w2.recordDate, w1.recordDate)) = 1\\nWHERE w2.temperature > w1.temperature and w2.recordDate>w1.recordDate"
                    }
                ]
            },
            {
                "id": 1818339,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1575998,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1575760,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1575702,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1574353,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1573458,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1573199,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1571834,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 1571417,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 2072819,
                "content": [
                    {
                        "username": "Imelman",
                        "content": "| id | recordDate | temperature |\\n| -- | ------------  | ----------- |\\n| 1  | 2000-12-14 |     3           |\\n| 2  | 2000-12-16 |     5           |\\n\\nIn this test my answer is \"Id 2\". Why is it wrong? He has a higher temperature than the previous day."
                    },
                    {
                        "username": "dk9571288791",
                        "content": "I think this is because previous day of 2000-12-16 is 2000-12-15 (it is not in the table) not 2000-12-14. So, your query should  consider a null as previous temperature for the date 2000-12-16."
                    },
                    {
                        "username": "DanielAlegriaLino",
                        "content": "Same Error "
                    },
                    {
                        "username": "marchodl",
                        "content": "\\'\\'\\'\\nwith CTE as (\\nselect\\nid,recordDate as date, temperature as temp,\\nlag(temperature) over(order by recordDate,id) as prev_temp,\\nlag(recordDate) over(order by recordDate,id) as prev_date\\nfrom Weather \\n)\\n\\n\\nselect\\nid\\nfrom CTE\\nwhere temp > prev_temp and (date - prev_date =1 )\\n\\'\\'\\'"
                    },
                    {
                        "username": "vaishvel",
                        "content": "**Working Solution:**\\n\\nwith cte as\\n(select *, lag(temperature,1) over (order by RecordDate) as prev_t,\\n            lag(RecordDate,1) over (order by RecordDate) as prev_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>prev_t\\nand datediff(RecordDate,prev_d)=1\\n\\n\\n**Wrong Answer**: *[2] only not the expected [2],[4]*\\n\\nwith cte as\\n(select *, lead(temperature,1) over (order by RecordDate) as n_t,\\n            lead(RecordDate,1) over (order by RecordDate) as n_d\\nfrom weather)\\n\\nselect id from cte \\nwhere temperature>n_t"
                    },
                    {
                        "username": "mahala",
                        "content": "Hi all,\\n\\nI have written down two queries. Kindly let me know which query is optimized query and is efficient? If I am having billions of rows, then which query is good?\\n\\n# Method 1:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nand w1.temperature > w2.temperature;\\n\\n# Method 2:\\nselect w1.id from weather as w1\\ninner join weather as w2\\non datediff(w1.recordDate,w2.recordDate) = 1\\nwhere w1.temperature > w2.temperature;"
                    },
                    {
                        "username": "dana777",
                        "content": "\\'\\'\\'\\nselect w2.id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature\\n      and ADDDATE(W1.RecordDate, 1) = W2.RecordDate\\n\\'\\'\\'"
                    },
                    {
                        "username": "minhbgbgvn",
                        "content": "`\\nSELECT d2.Id as Id \\nFROM Weather d1, Weather d2 \\nWHERE d2.Temperature > d1.Temperature \\n\\tAND TRUNC(d2.RecordDate) - TRUNC(d1.RecordDate) = 1\\n`"
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi,\\n\\nHere\\'s the Mandarin Chinese version to explain this problem in MySQL with 2 solutions.\\nWelcome to discuss together and join this projects!\\n\\n[[\\u4F86\\u5B78\\u8CC7\\u6599\\u5EAB] LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(07): #197. Rising Temperature](https://medium.com/@s9811219/rising-temperature-leetcode-4cde8ad1e681)\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1574246339.png)\\n"
                    },
                    {
                        "username": "legbird3",
                        "content": "If use \"full join\" or \"full outer join\" instead of \"join\", it will throw a runtime error. Anybody knows why?"
                    },
                    {
                        "username": "louisepenberthy",
                        "content": "Mysql doesn\\'t have a full join."
                    },
                    {
                        "username": "skbysp",
                        "content": "I learn for mysql just few days, my solution was as following:\\nselect t1.Id from Weather as t1, Weather as t2 where datediff(t1.Date, t2.Date)=1 and (t1.Temperature - t2.Temperature) > 0;"
                    },
                    {
                        "username": "himanshumittal1095",
                        "content": "/* Write your PL/SQL query statement below */\\nwith cte as (\\nSELECT Id,temperature, LAG(temperature,1) OVER (\\n\\t\\tORDER BY recordDate\\n\\t) as py_temp,recordDate,\\nlag (recordDate,1) over (order by recordDate) as py_record_date\\n\\nFROM WEATHER \\n) select id from cte where temperature > py_temp and (recordDate-py_record_date)=1;"
                    }
                ]
            },
            {
                "id": 2072128,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2071766,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2071004,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2068174,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2065611,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2062054,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2059302,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2058694,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2057372,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2057223,
                "content": [
                    {
                        "username": "scrltkllr",
                        "content": "Hey can someone help pls, i use pandas and don\\'t know what\\'s wrong with my code  \\n \\nV1\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"temperature_1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[abs(weather[\"temperature\"]) > abs(weather[\"temperature_1\"])]\\n    return pd.DataFrame(output[\"id\"])\\n\\nV2\\ndef rising_temperature(weather: pd.DataFrame) -> pd.DataFrame:\\n    weather[\"recordDate\"] = pd.to_datetime(weather[\"recordDate\"])\\n    weather[\"recordDate1\"] = weather[\"recordDate\"] - pd.DateOffset(days=1)\\n    weather[\"temperature1\"] = weather[\"temperature\"].shift(1)\\n    output = weather[(weather[\"recordDate\"] - weather[\"recordDate1\"] == pd.Timedelta(days=1)) & (abs(weather[\"temperature\"]) > abs(weather[\"temperature1\"]))]\\n    return pd.DataFrame(output[\"id\"])\\n"
                    },
                    {
                        "username": "slavnikov",
                        "content": "My code is pointed as correct when I run it, however it's not able to be submitted until MySQL is changed to Oracle. \nDon't understand the reason, but lots of people here reported similar issues.\n\nSo try to shift from MySQL to Oracle. May be it helps in such a situation."
                    },
                    {
                        "username": "ak_ydv",
                        "content": "select id from(\\n  select temperature, lag(temperature,1) over(order by id) as prev_num\\n  from Weather\\n)a where temperature > prev_num;\\n\\nwhy this is showing me error ?? some buddy help !!"
                    },
                    {
                        "username": "sfan0037",
                        "content": "FROM Weather AS w1, Weather AS w2\\nWHERE DATEDIFF(w1.recordDate,w2.recordDate)=1\\nAND w1.temperature> W2.temperature"
                    },
                    {
                        "username": "Geetanjali262",
                        "content": "Best and easy way using Date _add and self join\\nSelect curr.id\\nfrom weather Curr\\ninner join weather pre\\non curr.recordDate = date_add(pre.recordDate, interval 1 day)\\nand curr.temperature > pre.temperature;\\n"
                    },
                    {
                        "username": "adrios93",
                        "content": "Accepted but cant submit\n\nselect Id\nfrom Weather w\norder by w.temperature desc\nlimit 2"
                    },
                    {
                        "username": "sarvanibulusu",
                        "content": "I have tried two approaches, surprising thing is Approach 2 has faster execution time than Approach 1, even though Approach 1 is accessing underlying Weather table only once. It does imply Lag and over maybe slower.\\n\\nApproach 1:\\n# Write your MySQL query statement below\\nwith temp as\\n(\\n    select id, RecordDate, Temperature,\\n    lag(Temperature,1) over (order by RecordDate) as previousTemperature,\\n    lag(RecordDate,1) over (order by RecordDate) as PreviousDate\\n    from Weather\\n)\\nSelect id from Temp where Temperature > PreviousTemperature and and datediff(RecordDate,PreviousDate) =1\\n\\nApproach 2:\\n# Write your MySQL query statement below\\nSelect\\ncurrentDay.id\\nfrom\\n(Select id, recordDate, temperature from Weather) as prevDay\\ninner join\\n(Select id, date_sub(recordDate, Interval 1 Day) as recordDate, temperature from Weather)  as currentDay\\non \\nprevDay.recordDate = currentDay.recordDate\\nwhere prevDay.temperature < currentDay.temperature\\n"
                    },
                    {
                        "username": "sunil93",
                        "content": "Oracle SQL:\n\nWITH cte1 as (select id, recorddate, temperature, lag(temperature) over (order by recorddate) as previous_day_temp from weather)\nselect id from cte1 \nwhere temperature > previous_day_temp\nOrder by id asc;"
                    },
                    {
                        "username": "VanTai",
                        "content": "select id from (select *, lag(temperature, 1) over(order by recordDate asc) as lagtemp from weather) as sub2 where (temperature - lagtemp) > 0"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "can anyone explain, why this code dosn\\'t pass 5 test case?\\n\\nselect id from weather \\nexcept\\nselect id from weather \\nwhere \\ntemperature < (select temperature from weather limit 1 offset 1);\\n\\ni don\\'t understand"
                    },
                    {
                        "username": "vlad_egrv",
                        "content": "ok, i\\'m little stpd. don\\'t know why, but i thought this works like cycle, but it always compare value with second row"
                    }
                ]
            },
            {
                "id": 2052851,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2052496,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2049740,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2045814,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2045140,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2043620,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2042261,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2039424,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2038519,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2035336,
                "content": [
                    {
                        "username": "seankala",
                        "content": "Can anyone explain the difference between using `DATEDIFF(date1, date2)` and `date1 - 1 = date2`? The latter one worked for me except for one test case."
                    },
                    {
                        "username": "zsd890912",
                        "content": "This is my code, but I do not know why it does not work.... Thanks\\nWITH p1 AS (\\n  SELECT id, recordDate, temperature,\\n    recordDate - Lag(recordDate, 1) OVER(ORDER BY recordDate ASC) AS diff_date,\\n    temperature - Lag(temperature, 1) OVER(ORDER BY recordDate ASC) AS diff_temp\\n  FROM Weather\\n  ORDER BY recordDate\\n)\\nSELECT id\\nFROM p1\\nWHERE diff_temp > 0 \\nAND diff_date = 1;\\n"
                    },
                    {
                        "username": "mayankmadhur",
                        "content": "Can someone help me understand why my query is not working. It runs but does not let me submit as it fails some testcases.\\n\\n`Select S.id from weather W, Weather S\\nwhere S.recorddate - W.recorddate = 1 and S.temperature > W.temperature\\norder by S.id as`"
                    },
                    {
                        "username": "himsm",
                        "content": "The below query is running correctly, but not able to submit.\\nwith t1 \\nas (select id, temperature,\\nlag (temperature) over (order by recorddate) as lag_temp, (lag (temperature) over (order by recorddate)-temperature) as Diff\\nfrom weather)\\n\\nselect t1.id\\nfrom t1\\nwhere t1.diff<0"
                    },
                    {
                        "username": "Adilummer1",
                        "content": "with window function working code\\nselect  id  from(\\nselect  id,temperature  ,\\nLAG  (temperature ) \\nOVER (\\nORDER BY ID) as temp  from Weather ) a\\nWHERE temperature>a.temp"
                    },
                    {
                        "username": "user4580f",
                        "content": "select id from\\n(select id,recordDate,temperature as current_temp,lag(temperature) over (order by recordDate) as prev_temp from weather) a\\nwhere current_temp>prev_temp\\n\\n"
                    },
                    {
                        "username": "Ravi_Gupta1",
                        "content": "Hii,\\nwhen i run this code it shows me that it is accepted but when i submit it, it shows me error\\n\\nselect id\\nfrom (\\nselect id,recordDate,temperature,lag(temperature,1,null)\\n       over(order by recordDate asc) as temp\\nfrom Weather) a\\nwhere (temperature - temp) > 0;"
                    },
                    {
                        "username": "Jayshiv",
                        "content": "select ID from \\n(select a.id, a.temperature as atemperature,b.temperature  as btemperature\\nfrom weather a\\nLEFT JOIN weather b ON DATEADD(dd,+1,b.recordDate) = a.recordDate )a\\nwhere atemperature>btemperature"
                    },
                    {
                        "username": "himansumallick502",
                        "content": "# my code is failing only on one  testcase ,can u plzz help to resolve .\\n\\nselect  a.id  from  Weather a join Weather b where (a.recordDate - b.recordDate)=1  and a.temperature > b.temperature ;"
                    },
                    {
                        "username": "jargolastik",
                        "content": " (a.recordDate - b.recordDate)=1 doesn\\'t work correctly on all dates because it will treat dates as integers\\n\\nSept 1 - Aug 31 would not be equal to 1 if you use that equation"
                    },
                    {
                        "username": "siva291197",
                        "content": "Has anyone tried using CTE? I am able to pass 13/14 test cases using this but not sure why it is not passing the last one. Any suggestions or inputs?\\n\\nwith temp as\\n(\\nselect *,\\nlag(temperature,1,null) over(order by recorddate asc) as Lagtemp,\\nlag(datepart(dayofyear,recorddate),1,null) over(order by recorddate asc) as Lagdate\\nfrom weather\\n)\\nselect id from temp where (temperature-lagtemp) > 0 and\\ndatepart(dayofyear,recorddate)-Lagdate = 1\\n"
                    }
                ]
            },
            {
                "id": 2031325,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2030627,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2022784,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2018989,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2018616,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2017462,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2017099,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2016102,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2014444,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 2008921,
                "content": [
                    {
                        "username": "i_0x6c1_i",
                        "content": "lot of answers here are using WHERE clause. But if you understand JOIN makes more sense here."
                    },
                    {
                        "username": "user0437YA",
                        "content": "better use this comment select id from weather where temperature = 25 or temperature = 30 "
                    },
                    {
                        "username": "prmems",
                        "content": "Haven\\'t seen anyone use this method:\\nSELECT id\\nFROM Weather w1\\nWHERE temperature > (SELECT temperature from Weather w2 WHERE w1.id = w2.id + 1)\\nIs there something wrong with it? it worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "it only works if you always insured the ids are sequential and there are no deleted rows, a simple example, think about a glitch that has removed a row of the id `3`, now the dependent next row will not be able to get the correct result hence `4` needs to know what `3` has but it doesn\\'t exist, if we really have a higher temp on either we can\\'t tell anymore."
                    },
                    {
                        "username": "superdrifter",
                        "content": "Hi guys, I used the following codes but it showed that the parameters inside DATEDIFF() are wrong, anyone knows why?\\n\\nSELECT id\\nFROM Weather w1\\nWHERE w1.temperature >(\\nSELECT temperature\\nFROM Weather w2\\nWHERE DATEDIFF( day, w1.recordDate, w2.recordDate) =1\\n)"
                    },
                    {
                        "username": "brunomac",
                        "content": "that was my code\\nSELECT t1.id\\nFROM weather t1\\nJOIN weather t2 ON t1.id = t2.id + 1\\nWHERE t2.temperature < t1.temperature;\\n\\nthis was the result when i submit\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-16 | 3           |\\n| 2  | 2000-12-15 | -1          |\\nOutput\\n| id |\\n| -- |\\n\\nIts is running successfully but not able to submit!"
                    },
                    {
                        "username": "user8998lj",
                        "content": "can some one help me understand the iteration of the self join ? how the rows are considered?"
                    },
                    {
                        "username": "abhishekverma24",
                        "content": "Any hints why this solution is not working?  It works when I use dateDiff function\n`SELECT W2.id\nFROM Weather W1, Weather W2\nWHERE W2.temperature>W1.temperature AND DATE(W2.recordDate-1)=W1.recordDate;`"
                    },
                    {
                        "username": "zwan7415",
                        "content": "SELECT b.id as Id \\nFROM Weather a, Weather b \\nWHERE datediff(day,a.recordDate,b.recordDate)=1 \\nAND a.temperature < b.temperature "
                    },
                    {
                        "username": "jawad-shaikh",
                        "content": "`SELECT w1.id FROM Weather AS w1 INNER JOIN Weather AS w2\\nON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY) AND w1.temperature > w2.temperature`\\n\\nthis worked for me."
                    },
                    {
                        "username": "sanigo",
                        "content": "Can someone please let me know why the below solution does not satisfy all the test cases?\\nselect w1.id from weather w1 inner join weather w2 on w1.id!=w2.id\\nwhere\\nw1.recordDate=w2.recordDate+1 and\\nw1.temperature>w2.temperature"
                    }
                ]
            },
            {
                "id": 1999490,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1997872,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1995452,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1994323,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1993458,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1993343,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1991781,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1987194,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1986790,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1984228,
                "content": [
                    {
                        "username": "rejent",
                        "content": " `SELECT w2.Id FROM Weather w1, Weather w2 WHERE w2.Temperature > w1.Temperature`\\n`AND\\nDATEDIFF(day,w1.recordDate,w2.recordDate)=1`"
                    },
                    {
                        "username": "mohdriduan13",
                        "content": "WITH cte AS (\\nSELECT *, LAG(temperature) OVER (ORDER BY id) AS prev_temp\\nFROM Weather)\\nSELECT id\\nFROM cte\\nWHERE temperature - prev_temp  > 0\\n"
                    },
                    {
                        "username": "pranshunayak566",
                        "content": "why this does not work?\\n\\n `# Write your MySQL query statement below\\nselect w1.id \\nfrom Weather as w1\\nwhere exists (\\n    select w2.id \\n    from Weather as w2\\n    where YEAR(w1.recordDate)=YEAR(w2.recordDate) and MONTH(w1.recordDate)=MONTH(w2.recordDate) and DAY(w1.recordDate)-DAY(w2.recordDate)=1 and w1.temperature > w2.temperature\\n)`"
                    },
                    {
                        "username": "Gajanan_todeti",
                        "content": "solved using windows functions  \\nselect id\\nfrom \\n(select*,\\nlag(temperature)over(order by recordDate) as prev_temp\\nfrom Weather ) as tbl\\nwhere temperature > prev_temp"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Most fastest way : \\n`Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "akacool0744",
                        "content": "Fastest way :- MS SQL Server\\n\\n `Select w2.id from Weather w1, Weather w2  where w1.temperature < w2.temperature and w2.recordDate = DATEADD(day, 1, w1.recordDate);`"
                    },
                    {
                        "username": "adi031999",
                        "content": "what should be approach for problem if data given is not for consecutive dates."
                    },
                    {
                        "username": "Ra1242",
                        "content": "My code is:\\nselect a.id\\nfrom weather a,weather b\\nWhere datediff(day, b.recordDate, a.recordDate) = 1 and a.temperature > b.temperature"
                    },
                    {
                        "username": "ankush20386",
                        "content": "only 1 test case is left to pass what is wrong with this query?\\n\\n\\nwith \\ncte as(select id,recordDate,temperature,LAG(temperature,1)over(order by recordDate) as temp,LAG(recordDate,1)over(order by recordDate) as recordb  from weather)\\nselect id from cte where temperature>temp and (recordDate-recordb=1);\\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "WITH CTE AS \n(SELECT id, LAG(recordDate) OVER (ORDER BY recordDate) AS YestDate, recordDate, \nLAG(temperature) OVER (ORDER BY recordDate) AS YestTemp, temperature\nFROM Weather)\n\nSELECT id \nFROM CTE \nWHERE temperature > YestTemp\nAND DATEDIFF(day, YestDate, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1970540,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1959894,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1957370,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1950745,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1934655,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1925995,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1906305,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1904387,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1899985,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1899150,
                "content": [
                    {
                        "username": "yangzx608",
                        "content": "i have struggling on self join operation, why is w1 table contains id 2 and 4 not w2 table?\\nand actually how is the theory of separate one table to two table w1 and w2?"
                    },
                    {
                        "username": "gkpani97",
                        "content": "Why does this doesnt work?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON w1.recordDate = w2.recordDate + 1\\nWHERE w1.temperature > w2.temperature;\\n```\\n\\nAnd this does?\\n```\\nSELECT w1.id AS Id\\nFROM Weather w1 \\nLEFT JOIN Weather w2\\nON DATEDIFF (w1.recordDate, w2.recordDate) = 1\\nWHERE w1.temperature > w2.temperature ;\\n```"
                    },
                    {
                        "username": "suru1113",
                        "content": "is it possible with self join? i feel yes..\\nselect w1.id from Weather w1 inner join Weather w2 on w1.id=w2.id+1 where w1.temperature >w2.temperature\\nbut half of the test cases failed\\n"
                    },
                    {
                        "username": "shivajipoudel16",
                        "content": "Try this: \\n\\nselect a.id from weather a,\\nweather b\\nwhere datediff(a.recordDate,b.recordDate)=1\\nand a.temperature>b.temperature;"
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "Can someone explain the expected  result here.\n\n `Weather =\n| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |`\n \n\nWhy expected result is :\n\n\n`| Id |\n | -- |`\n\n\nShouldn't it be \n`| id |\n | -- |\n | 2  |`\n"
                    },
                    {
                        "username": "Zivko",
                        "content": "The issue is with dates, they are not consecutive, since you do not have temperature data for 2000-12-15."
                    },
                    {
                        "username": "edatheolo",
                        "content": "with cte as(\\n  select id, (temperature - lag(temperature,1) OVER()) AS temp_diff\\n  from Weather\\n)\\nselect id\\nfrom cte\\nwhere temp_diff >0;\\n\\nwhy is this returning empty output? but if I change select id to select *, the output is actually containing correct rows."
                    },
                    {
                        "username": "ahjimomo",
                        "content": "When you perform `SELECT *`, is the `temp_diff` correct? \n\nI am applying very similar technique as you but I am extracting both date and temperature, it works:\n```\nWITH ytd AS\n    (SELECT *,\n    LAG(temperature) OVER (ORDER BY recordDate) AS ytdTemp,\n    LAG(recordDate) OVER (ORDER BY recordDate) AS ytdDate\n    FROM Weather)\nSELECT id AS Id\nFROM ytd \n    WHERE temperature > ytdTemp\n    AND DATEDIFF(recordDate, ytdDate) = 1 \n```"
                    },
                    {
                        "username": "George125",
                        "content": "Where is problem?\\n\\n`SELECT id AS Id \\nFROM [Weather] AS W\\nWHERE W.temperature > (SELECT MAX(temperature)\\n                      FROM [Weather] AS SUBW\\n                      WHERE W.recordDate > SUBW.recordDate)`"
                    },
                    {
                        "username": "shubhamshiwarkar",
                        "content": "SELECT w2.id\nFROM Weather w1, Weather w2\nWHERE w2.recordDate - 1 = w1.recordDate \nAND w2.temperature > w1.temperature;"
                    },
                    {
                        "username": "IzumiProgrammer",
                        "content": "select id from\\n(\\nselect id  ,temperature,\\nlag(temperature) over(order by recordDate )as \\'prev\\'  from weather\\n) seq\\nwhere seq.temperature>seq.prev"
                    },
                    {
                        "username": "V1NAY8",
                        "content": "Solution with MS SQL Server -> Answer got submitted\\nWITH data_filter as (\\n  SELECT id, recordDate, temperature as temp, LAG(temperature) OVER (ORDER BY recordDate) as prev_temp, LAG(recordDate) OVER (ORDER BY recordDate) as prev_date from Weather\\n)\\n\\nselect id from data_filter  where temp > prev_temp and DATEDIFF(day, prev_date, recordDate) = 1"
                    }
                ]
            },
            {
                "id": 1885698,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1874451,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1873968,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1873806,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1872507,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1864428,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1863766,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1854818,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1845173,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1844197,
                "content": [
                    {
                        "username": "Tmakinde",
                        "content": "This works:\\n\\nselect id from \\n(\\nselect id, DATEDIFF(recordDate, lag(recordDate) over(order by recordDate)) as datedifference, temperature, lag(temperature) over(order by recordDate) as previousTemp, lag(recordDate) over(order by recordDate) as previousDate from Weather\\n) w\\nwhere temperature > previousTemp and datedifference = 1;"
                    },
                    {
                        "username": "user5079r",
                        "content": "SELECT t1.id\\nFROM Weather t1\\nINNER JOIN Weather t2\\nON t1.recordDate = DATE_ADD(t2.recordDate, INTERVAL 1 DAY)\\nWHERE t1.temperature > t2.temperature;\\n"
                    },
                    {
                        "username": "epetrarca5479",
                        "content": "My answer is accepted but I don\\'t get good feelings from it.\\nSELECT w2.id AS Id\\nFROM Weather w1 inner join Weather w2 on DATEADD(day, 1, w1.recordDate) = w2.recordDate\\nWHERE w2.temperature > w1.temperature"
                    },
                    {
                        "username": "hari_aravi",
                        "content": "why is the code below not running the 13th case?\\n\\n `select w.id from weather w left join weather ww on (w.recordDate=ww.recordDate+1) \\nwhere ww.temperature < w.temperature`"
                    },
                    {
                        "username": "shivakant012",
                        "content": "Would it be a possible approach to get the top 2 Id\\'s by ordering the temperature to descending ? As the table is going to hold the temperature for every single day."
                    },
                    {
                        "username": "prathams29",
                        "content": "Only the given example has temperature for every day. I\\'m sure that other test cases do not follow the same thing. \\nAlso, if we were to follow your suggestion, it may still give wrong answer. Suppose temperature is 47 on 1st, 48 on 2nd, 50 on 3rd and 49 on 4th. \\nYour suggestion would give 3rd and 4th as answers. However, correct answers would be 2nd and 3rd."
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select t2.id as Id from Weather t1,Weather t2\\n  WHERE dateDiff(t2.recordDate,t1.recordDate)=1 and t1.temperature<t2.temperature"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "I have attempted 6 queries so far and have faced 2 issues.\\n1. window functions row_number(), rank(), dense_rank() aren\\'t working \\n2. When i ran the code it shows as Accepted and showing expected output but when clicked on Submit it says Wrong Answer.\\n\\nBut the kind of challenges we could see here are really good."
                    },
                    {
                        "username": "har0101",
                        "content": "can anyone tell me why sometimes we use join in same table and some times , didn\\'t get the difference "
                    },
                    {
                        "username": "prathams29",
                        "content": "When we want to compare values of the column from the same table, we use self-join (join same table) \\nHere, we need to compare the dates as well as the temperature.\\n\\nHope this solves your doubt, Do upvote if it did ! "
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select id,recordDate,temperature,lag(temperature) over (order by recordDate asc) as rnk from Weather)\\n\\nselect id,temperature,rnk from cte where temperature > rnk"
                    },
                    {
                        "username": "Avazbeka_dev",
                        "content": "SELECT a.id\\nFROM Weather as a,Weather as b\\nWHERE a.temperature>b.temperature\\nAND DATEDIFF(a,b)=1\\n\\nUnknown column \\'a\\' in \\'where clause\\'\\n\\nWhy my code doesn\\'t work ?"
                    },
                    {
                        "username": "prathams29",
                        "content": "In DATEDIFF(), you just wrote a and b, and did not specify which column of a and b. You need to write a.RecordDate and b.RecordDate \\nHope this solves your doubt. Do upvote if it did !"
                    }
                ]
            },
            {
                "id": 1841149,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1816034,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1809650,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1805159,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1804938,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1803938,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1798719,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1797021,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1790142,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1788745,
                "content": [
                    {
                        "username": "Puneet72",
                        "content": "Its not accepting ..\\n\\nwith cte as (select id,temperature,lag(temperature) over (order by recordDate) as temp2 from Weather ),\\n\\ncte2 as (select id ,temperature,temp2 from cte )\\n\\nselect id from cte2 where temperature > temp2"
                    },
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.id \\nFROM(\\n    SELECT id ,recordDate ,temperature, LAG(temperature) OVER(ORDER BY recordDate) as temperature_LAG\\n    FROM Weather\\n) x\\nWHERE x.temperature > x.temperature_LAG;"
                    },
                    {
                        "username": "Echo_N1",
                        "content": "The easiest SQL for this case\\n\\nSELECT w.id AS Id\\nFROM Weather w\\n     INNER JOIN Weather pd ON pd.recordDate = DATEADD(DAY, -1, w.recordDate)\\nWHERE w.temperature > pd.temperature"
                    },
                    {
                        "username": "jjjho",
                        "content": "[passed]\\nwith temp as(\\nselect id, date_add(recorddate, interval 1 day) as date, temperature from weather \\n)\\n\\nselect a.id from weather a\\nleft join temp b on a.recorddate = b.date\\nwhere a.temperature > b.temperature"
                    },
                    {
                        "username": "vinayakam19",
                        "content": "Using CTE\\n\\n `with rising_temperature as (select we.id as Id, DATEDIFF(we.recordDate, w.recordDate) as days_diff from Weather w JOIN Weather we on w.id = we.id or w.temperature < we.temperature)\\n\\n\\nselect Id from rising_temperature where days_diff = 1;`"
                    },
                    {
                        "username": "PIYUSH310501",
                        "content": "SELECT w1.id\\nFROM Weather AS w1 , Weather AS w2\\nWHERE w1.Temperature > w2.Temperature AND DATEDIFF(w1.recordDate , w2.recordDate) = 1"
                    },
                    {
                        "username": "sakuramomo1005",
                        "content": "Why I got wrong answer? I think the expected answer is incorrect for one example: \\n\\nInput\\nWeather =\\n| id | recordDate | temperature |\\n| -- | ---------- | ----------- |\\n| 1  | 2000-12-14 | 3           |\\n| 2  | 2000-12-16 | 5           |\\n\\nExpected\\n| id |\\n| -- |\\n\\nI think the expected should be id = 2 since 12-16 does have higher temperature than 12-14, is that right?\\n"
                    },
                    {
                        "username": "siddhant_samal",
                        "content": "`select w1.id from\\nWeather w1 join Weather w2\\non\\nDATE_ADD(w1.recordDate , INTERVAL -1 DAY) = w2.recordDate \\nand\\nw1.temperature > w2.temperature ;`"
                    },
                    {
                        "username": "adityachatterjee",
                        "content": "SELECT w1.id FROM Weather w1 JOIN Weather w2\nON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nAND w1.temperature > w2.temperature;\n\nHow does this query work when the difference between 2 dates is greater than 1. Where as this doesn't work for the same\n\nSELECT ID FROM (SELECT W.*,Z.TEMPERATURE AS PREVTEMP\nFROM WEATHER W\nLEFT JOIN\nWEATHER Z\nON W.RECORDDATE=(Z.RECORDDATE+1))A\nWHERE TEMPERATURE>PREVTEMP\n\n"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "If the difference between two dates is greater than 1 then, how it could be called the previous day so that kind of non consecutive dates and not included"
                    },
                    {
                        "username": "ashish_singh00",
                        "content": "select id from (select * , lag(temperature,1,NULL) over(order by recordDate)\\n as prev_temp,lag(recordDate,1,NULL) over(order by recordDate) as prev_date\\nfrom Weather\\n) x\\nwhere x.prev_temp is not null and x.temperature > x.prev_temp\\nand x.prev_date is not null and datediff(x.recordDate,x.prev_date) =1;\\n\\nIs this a good way to do this"
                    }
                ]
            },
            {
                "id": 1785808,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1785195,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1782322,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1779908,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1778161,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1772316,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1761565,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1760556,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1759853,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1756131,
                "content": [
                    {
                        "username": "DhruvitModi",
                        "content": "Is there any issue with Submit, because while Run the code it is accepted.\\nbut when I try to submit, it shows wrong answer, \\nalso I noticed that after submit, data set are different than question which leads to wrong answer.\\nIs anyone faced same problem, or any solution ?"
                    },
                    {
                        "username": "Stas_Hlova",
                        "content": "SELECT id\\nFROM Weather weather \\nWHERE weather.temperature > (SELECT w1.temperature\\n                            FROM Weather w1\\n                            WHERE w1.recordDate = SUBDATE(weather.recordDate, INTERVAL 1 DAY)\\n                            LIMIT 1);\\n"
                    },
                    {
                        "username": "Ravi_ranjan_itz",
                        "content": "Hey guys plz help\\nselect x.id from\\n    (select w.*,\\n    lag(temperature,1,0) over(order by id) as prev_temp\\n    from weather w) as x \\n    where x.temperature> x.prev_temp;\\n\\n"
                    },
                    {
                        "username": "tantheidiot",
                        "content": " `with cte AS (SELECT id, recordDate, temperature, LAG(recordDate, 1) OVER (ORDER BY recordDate ASC) pre_date, LAG(temperature, 1) OVER (ORDER BY recordDate ASC) t\\nFROM Weather)\\n\\nselect id FROM cte\\nWHERE temperature > t\\nAND DATE_SUB(recordDate, INTERVAL 1 DAY) = pre_date;`"
                    },
                    {
                        "username": "Chaudhary_Anmol",
                        "content": "try this one \\nselect id  from Weather w1 where temperature - (select temperature from weather where recordDate = w1.recordDate-1)>0 "
                    },
                    {
                        "username": "pinky_adhikari1996",
                        "content": "SELECT id\\nFROM\\n(\\nSELECT id, recordDate, temperature , LAG(temperature,1) OVER (ORDER BY recordDate) AS yesterday_temp, LAG(recordDate,1) OVER (ORDER BY recordDate) AS prev_date\\n\\nFROM Weather\\n) AS temp_table\\n\\nWHERE temperature>yesterday_temp AND DATEDIFF(day,prev_date,recordDate)=1"
                    },
                    {
                        "username": "Himanshu_sansanwal",
                        "content": "select matrix.id from (select Weather.*, lag(temperature,1,null) over(order by recordDate asc) as prev_temp from Weather) as matrix \\nwhere prev_temp is not null and temperature > prev_temp\\n\\n"
                    },
                    {
                        "username": "user1388JN",
                        "content": "Can anyone help ! \\n\\nwhy the below code is not working. \\nit is working for case1 and not for case2 \\n\\n\\n\\nwith table1 as \\n(select *, \\nlag(temperature) over (order by recordDate) as previoustemp\\nfrom Weather)\\n\\nselect id\\nfrom table1\\nwhere temperature > previoustemp;"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "Beats 90%!\\n\\nSELECT w2.id\\nFROM (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w1\\nINNER JOIN (\\n    SELECT id, recordDate, temperature, \\n    ROW_NUMBER() OVER(ORDER BY recordDate) as row_id\\n    FROM Weather\\n) w2\\nON w1.row_id+1 = w2.row_id\\nWHERE w1.temperature < w2.temperature AND DATEDIFF(w2.recordDate, w1.recordDate)=1\\n"
                    },
                    {
                        "username": "karthiknandiraju",
                        "content": "\nSELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(day, weather.RecordDate, w.RecordDate) = -1\n        AND weather.Temperature > w.Temperature;\n\n/* Please do not use +1 but use -1 */"
                    }
                ]
            },
            {
                "id": 1753088,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1751063,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1750756,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1748574,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1745416,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1745394,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1744340,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1738091,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1734474,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1733674,
                "content": [
                    {
                        "username": "muz97",
                        "content": "it fails in case 13\\n`SELECT id FROM Weather WHERE id IN (SELECT CASE\\nWHEN LAG(temperature) OVER (ORDER BY recordDate) < temperature\\nAND recordDate - LAG(recordDate) OVER (ORDER BY recordDate) = 1\\nTHEN id\\nEND as Id\\nFROM Weather ORDER BY recordDate) ORDER BY id` "
                    },
                    {
                        "username": "user5490oS",
                        "content": "SELECT w2.id from Weather w1 JOIN Weather w2\\nON w2.temperature > w1.temperature AND\\ndatediff(w2.recordDate,w1.recordDate) = 1;"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use subdate(date,1) instead of date-1\\n `select w.id as id from weather w inner join weather ww on subdate(w.recorddate,1)=ww.recorddate\\nwhere w.temperature>ww.temperature;`"
                    },
                    {
                        "username": "user0556G",
                        "content": "lightning fast :)\\n `select a.id from weather a,weather b where date_sub(a.recordDate, interval 1 day) = b.recordDate and a.temperature>b.temperature`"
                    },
                    {
                        "username": "camellie",
                        "content": "Hi, the query below results in a Runtime Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\\' at line 4\\n\\nSELECT today.id AS id\\nFROM weather yesterday, weather today\\nWHERE yesterday.recorddate + INTERVAL \\'1 DAY\\' =  today.recorddate \\nAND yesterday.temperature < today.temperature;\\n\\nBut it works as expected locally. I don\\'t understand why LeetCode doesn\\'t accept it. Please help"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT T2.id FROM Weather T1 inner join Weather T2 \\nWHERE T2.temperature>T1.temperature\\nAND DATEDIFF(T2.recordDate,T1.recordDate)=1\\nAND T2.id!=T1.id"
                    },
                    {
                        "username": "rishav4u7",
                        "content": "Why this code is not working for 14th test case?\\nselect w1.id from weather w1 join weather w2  on w1.recordDate=w2.recordDate+1 where w1.temperature>w2.temperature;\\n\\nBut the below code is working though both looks same except datediff\\n\\nselect w1.id from weather w1 join weather w2  on Datediff(w1.recordDate,w2.recordDate)=1 where w1.temperature>w2.temperature;\\n\\n"
                    },
                    {
                        "username": "andyjackson393",
                        "content": "Working Solution\\n\\n```\\nWITH CTE1(id, recordDate, temperature, lag_temp, lag_date) AS (\\n    SELECT *, lag(temperature) OVER(ORDER BY recordDate) lag_temp,\\n    lag(recordDate) OVER(ORDER BY recordDate) as lag_date\\n    FROM Weather\\n)\\nSELECT id\\nFROM CTE1\\nWHERE temperature > lag_temp and ABS(DATEDIFF(lag_date, recordDate)) = 1\\n```"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "select Id from weather w\\nwhere temperature > (select temperature from weather x\\nwhere x.id+1=w.id\\nlimit 1);\\nthis is much easier to understand"
                    },
                    {
                        "username": "navitadev22",
                        "content": "Why my query is  not recognizing the Weather Table..?\\n\\nSELECT w2.id \\nFROM Weather AS w1 JOIN Weather AS w2\\nON DATEDIFF(w1.recordDate, w2.recordDate) = -1\\nWHERE w2.temperature > w1.temperature;\\n\\nI\\'m getting Invalid Testcase\\n\\'Weather\\'"
                    }
                ]
            },
            {
                "id": 1728823,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1722522,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1718433,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1717154,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1716098,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1715764,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1713256,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1710649,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1708262,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            },
            {
                "id": 1706901,
                "content": [
                    {
                        "username": "la1kshman",
                        "content": "| id | recordDate | temperature |\n| -- | ---------- | ----------- |\n| 1  | 2000-12-14 | 3           |\n| 2  | 2000-12-16 | 5           |\n\nFor above, I got Id ,2 as answer, but expected answer is null , why?\n"
                    },
                    {
                        "username": "yigit148",
                        "content": "# Write your MySQL query statement below\\nSELECT id \\nFROM Weather F \\nWHERE temperature > (SELECT temperature FROM Weather S WHERE F.recordDate = (S.recordDate+1))\\n\\ncan someone tell me why this doesnt work on testcase 13\\n\\n"
                    },
                    {
                        "username": "niks_gpt",
                        "content": "why is test case 13 getting failed?\\n\\nselect distinct w2.id as Id\\nfrom weather w1, weather w2\\nwhere w1.temperature < w2.temperature and w2.recorddate-1=w1.recorddate"
                    },
                    {
                        "username": "pankaj_kumar_01",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "aminbasiran",
                        "content": "Can you tell me why this code wouldn\\'t work? (it actually worked however it didnt pass 2 test cases)\\n\\n `select id from\\n(select *, lag(temperature) over() as prev_temp from weather order by recordDate asc) \\nas new_table where\\ntemperature  > new_table.prev_temp `"
                    },
                    {
                        "username": "karanpeshwani7",
                        "content": "Why is this nested query wrong?\\n `select w1.id\\nfrom Weather as w1\\nwhere \\nw1.temperature > (select w2.temperature from Weather as w2 where w2.recordDate = (w1.recordDate - 1))`"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "## Intuition\\nWe know that we need to compare the temperature of the current day and it\\'s preceding day to determine if it\\'s warmer for the current day. \\n\\nBased on the `Weather` table, we can see that both the `recordDate` and `id` are in order but use of `recordDate` will likely be a better option.\\n\\n## Approach\\n<b>Solution 1:</b>\\n- Using the `LAG()` function allows us to get the preceding value\\n- Integrate this with the `WITH` query to generate a new table\\n- Query for `Id` that has higher temperature than their precedence, and ensuring the difference in day is just 1 with `DATEDIFF()` function\\n\\n<b>Solution 2:</b>\\n- Extract the `Id` by comparing 2 same `Weather` tables as today `tdy` and yesterday `ytd`\\n- Query WHERE difference of day is 1 with `DATEDIFF()`\\n- AND `tdy.temperature` is higher than `ytd.temperature`"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select sq.id\\nfrom\\n(Select w.*, \\nlag(temperature) over(order by recordDate, id) as prev_temp,\\nlag(recordDate) over(order by recordDate, id) as prev_date\\nfrom weather w) sq\\nwhere sq.temperature > sq.prev_temp and datediff(sq.recordDate, sq.prev_date) = 1"
                    },
                    {
                        "username": "liutsewei",
                        "content": "SELECT w1.id\nFROM Weather w1\nLEFT JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1\nWHERE w1.temperature > w2.temperature"
                    },
                    {
                        "username": "Pritam_ath",
                        "content": "please tell me ...why am I not getting the right output?//\\n\\nselect w2.id  as Id from weather w1 , weather w2 \\nwhere w1.temperature < w2.temperature and w1.recorddate = w2.recorddate+1;"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "RecordDate\\'s Type is DATE, not a INT, you should consider it"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "Following Query is running successfully but cannot submit, what can I do for this issue?\\n\\nSELECT A.id AS id\\nFROM Weather AS A\\nINNER JOIN Weather AS B ON A.id = (B.id + 1)\\nWHERE A.temperature > B.temperature"
                    },
                    {
                        "username": "hongseongeun39",
                        "content": "I solved it through following query\\nLeetCode\\'s Problems should be accepted not only the sample question but also in several test cases \\n\\nSELECT A.id AS Id\\nFROM Weather AS A\\nINNER JOIN weather AS B ON DATE_SUB(A.recordDate, INTERVAL 1 DAY) = B.recordDate\\nWHERE A.temperature > B.temperature "
                    }
                ]
            }
        ]
    },
    {
        "title": "Serialize and Deserialize Binary Tree",
        "question_content": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-\" target=\"_blank\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 74259,
                "title": "recursive-preorder-python-and-c-o-n",
                "content": "**Python**\\n\\n    class Codec:\\n    \\n        def serialize(self, root):\\n            def doit(node):\\n                if node:\\n                    vals.append(str(node.val))\\n                    doit(node.left)\\n                    doit(node.right)\\n                else:\\n                    vals.append('#')\\n            vals = []\\n            doit(root)\\n            return ' '.join(vals)\\n    \\n        def deserialize(self, data):\\n            def doit():\\n                val = next(vals)\\n                if val == '#':\\n                    return None\\n                node = TreeNode(int(val))\\n                node.left = doit()\\n                node.right = doit()\\n                return node\\n            vals = iter(data.split())\\n            return doit()\\n\\n---\\n\\n**C++**\\n\\n    class Codec {\\n    public:\\n    \\n        string serialize(TreeNode* root) {\\n            ostringstream out;\\n            serialize(root, out);\\n            return out.str();\\n        }\\n    \\n        TreeNode* deserialize(string data) {\\n            istringstream in(data);\\n            return deserialize(in);\\n        }\\n    \\n    private:\\n    \\n        void serialize(TreeNode* root, ostringstream& out) {\\n            if (root) {\\n                out << root->val << ' ';\\n                serialize(root->left, out);\\n                serialize(root->right, out);\\n            } else {\\n                out << \"# \";\\n            }\\n        }\\n    \\n        TreeNode* deserialize(istringstream& in) {\\n            string val;\\n            in >> val;\\n            if (val == \"#\")\\n                return nullptr;\\n            TreeNode* root = new TreeNode(stoi(val));\\n            root->left = deserialize(in);\\n            root->right = deserialize(in);\\n            return root;\\n        }\\n    };",
                "solutionTags": [
                    "C++",
                    "Python"
                ],
                "code": "**Python**\\n\\n    class Codec:\\n    \\n        def serialize(self, root):\\n            def doit(node):\\n                if node:\\n                    vals.append(str(node.val))\\n                    doit(node.left)\\n                    doit(node.right)\\n                else:\\n                    vals.append('#')\\n            vals = []\\n            doit(root)\\n            return ' '.join(vals)\\n    \\n        def deserialize(self, data):\\n            def doit():\\n                val = next(vals)\\n                if val == '#':\\n                    return None\\n                node = TreeNode(int(val))\\n                node.left = doit()\\n                node.right = doit()\\n                return node\\n            vals = iter(data.split())\\n            return doit()\\n\\n---\\n\\n**C++**\\n\\n    class Codec {\\n    public:\\n    \\n        string serialize(TreeNode* root) {\\n            ostringstream out;\\n            serialize(root, out);\\n            return out.str();\\n        }\\n    \\n        TreeNode* deserialize(string data) {\\n            istringstream in(data);\\n            return deserialize(in);\\n        }\\n    \\n    private:\\n    \\n        void serialize(TreeNode* root, ostringstream& out) {\\n            if (root) {\\n                out << root->val << ' ';\\n                serialize(root->left, out);\\n                serialize(root->right, out);\\n            } else {\\n                out << \"# \";\\n            }\\n        }\\n    \\n        TreeNode* deserialize(istringstream& in) {\\n            string val;\\n            in >> val;\\n            if (val == \"#\")\\n                return nullptr;\\n            TreeNode* root = new TreeNode(stoi(val));\\n            root->left = deserialize(in);\\n            root->right = deserialize(in);\\n            return root;\\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 74253,
                "title": "easy-to-understand-java-solution",
                "content": "The idea is simple: print the tree in pre-order traversal and use \"X\" to denote null node and split node with \",\". We can use a StringBuilder for building the string on the fly. For deserializing, we use a Queue to store the pre-order traversal and since we have \"X\" as null node, we know exactly how to where to end building subtress.\\n\\n    public class Codec {\\n        private static final String spliter = \",\";\\n        private static final String NN = \"X\";\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            StringBuilder sb = new StringBuilder();\\n            buildString(root, sb);\\n            return sb.toString();\\n        }\\n    \\n        private void buildString(TreeNode node, StringBuilder sb) {\\n            if (node == null) {\\n                sb.append(NN).append(spliter);\\n            } else {\\n                sb.append(node.val).append(spliter);\\n                buildString(node.left, sb);\\n                buildString(node.right,sb);\\n            }\\n        }\\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            Deque<String> nodes = new LinkedList<>();\\n            nodes.addAll(Arrays.asList(data.split(spliter)));\\n            return buildTree(nodes);\\n        }\\n        \\n        private TreeNode buildTree(Deque<String> nodes) {\\n            String val = nodes.remove();\\n            if (val.equals(NN)) return null;\\n            else {\\n                TreeNode node = new TreeNode(Integer.valueOf(val));\\n                node.left = buildTree(nodes);\\n                node.right = buildTree(nodes);\\n                return node;\\n            }\\n        }\\n    }",
                "solutionTags": [],
                "code": "The idea is simple: print the tree in pre-order traversal and use \"X\" to denote null node and split node with \",\". We can use a StringBuilder for building the string on the fly. For deserializing, we use a Queue to store the pre-order traversal and since we have \"X\" as null node, we know exactly how to where to end building subtress.\\n\\n    public class Codec {\\n        private static final String spliter = \",\";\\n        private static final String NN = \"X\";\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            StringBuilder sb = new StringBuilder();\\n            buildString(root, sb);\\n            return sb.toString();\\n        }\\n    \\n        private void buildString(TreeNode node, StringBuilder sb) {\\n            if (node == null) {\\n                sb.append(NN).append(spliter);\\n            } else {\\n                sb.append(node.val).append(spliter);\\n                buildString(node.left, sb);\\n                buildString(node.right,sb);\\n            }\\n        }\\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            Deque<String> nodes = new LinkedList<>();\\n            nodes.addAll(Arrays.asList(data.split(spliter)));\\n            return buildTree(nodes);\\n        }\\n        \\n        private TreeNode buildTree(Deque<String> nodes) {\\n            String val = nodes.remove();\\n            if (val.equals(NN)) return null;\\n            else {\\n                TreeNode node = new TreeNode(Integer.valueOf(val));\\n                node.left = buildTree(nodes);\\n                node.right = buildTree(nodes);\\n                return node;\\n            }\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 74264,
                "title": "short-and-straight-forward-bfs-java-code-with-a-queue",
                "content": "Here I use typical BFS method to handle a binary tree. I use string `n` to represent null values. The string of the binary tree in the example will be `\"1 2 3 n n 4 5 n n n n \"`.\\n\\nWhen deserialize the string, I assign left and right child for each not-null node, and add the not-null children to the queue, waiting to be handled later.\\n\\n\\n\\n    public class Codec {\\n        public String serialize(TreeNode root) {\\n            if (root == null) return \"\";\\n            Queue<TreeNode> q = new LinkedList<>();\\n            StringBuilder res = new StringBuilder();\\n            q.add(root);\\n            while (!q.isEmpty()) {\\n                TreeNode node = q.poll();\\n                if (node == null) {\\n                    res.append(\"n \");\\n                    continue;\\n                }\\n                res.append(node.val + \" \");\\n                q.add(node.left);\\n                q.add(node.right);\\n            }\\n            return res.toString();\\n        }\\n\\n        public TreeNode deserialize(String data) {\\n            if (data == \"\") return null;\\n            Queue<TreeNode> q = new LinkedList<>();\\n            String[] values = data.split(\" \");\\n            TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n            q.add(root);\\n            for (int i = 1; i < values.length; i++) {\\n                TreeNode parent = q.poll();\\n                if (!values[i].equals(\"n\")) {\\n                    TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                    parent.left = left;\\n                    q.add(left);\\n                }\\n                if (!values[++i].equals(\"n\")) {\\n                    TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                    parent.right = right;\\n                    q.add(right);\\n                }\\n            }\\n            return root;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "Here I use typical BFS method to handle a binary tree. I use string `n` to represent null values. The string of the binary tree in the example will be `\"1 2 3 n n 4 5 n n n n \"`.\\n\\nWhen deserialize the string, I assign left and right child for each not-null node, and add the not-null children to the queue, waiting to be handled later.\\n\\n\\n\\n    public class Codec {\\n        public String serialize(TreeNode root) {\\n            if (root == null) return \"\";\\n            Queue<TreeNode> q = new LinkedList<>();\\n            StringBuilder res = new StringBuilder();\\n            q.add(root);\\n            while (!q.isEmpty()) {\\n                TreeNode node = q.poll();\\n                if (node == null) {\\n                    res.append(\"n \");\\n                    continue;\\n                }\\n                res.append(node.val + \" \");\\n                q.add(node.left);\\n                q.add(node.right);\\n            }\\n            return res.toString();\\n        }\\n\\n        public TreeNode deserialize(String data) {\\n            if (data == \"\") return null;\\n            Queue<TreeNode> q = new LinkedList<>();\\n            String[] values = data.split(\" \");\\n            TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n            q.add(root);\\n            for (int i = 1; i < values.length; i++) {\\n                TreeNode parent = q.poll();\\n                if (!values[i].equals(\"n\")) {\\n                    TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                    parent.left = left;\\n                    q.add(left);\\n                }\\n                if (!values[++i].equals(\"n\")) {\\n                    TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                    parent.right = right;\\n                    q.add(right);\\n                }\\n            }\\n            return root;\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 396124,
                "title": "python-very-easy-to-understand-recursive-preorder-with-comments",
                "content": "```\\nclass Codec:\\n    def serialize(self, root):\\n        # take care of base cases\\n        # if a node is empty, add \\'x\\' to string\\n        # you can set \\'x\\' to any mark as you want\\n        if not root: return \\'x\\'\\n        # preoder(Root->left->right)\\n        # ex,\\n        #     1\\n        #    / \\\\\\n        #   2   3\\n        #      / \\\\\\n        #     4   5 \\n        # \\n        # return (1, (2, \\'x\\', \\'x\\'), (3, (4, \\'x\\', \\'x\\'), (5, \\'x\\', \\'x\\')))\\n        # if you look at the return statement very closely, it is actually very intuitive\\n        # for value 1, you have 2 as left child and 3 as right child\\n        # for value 2, you have \\'x\\'(None) as left child and \\'x\\'(None) as right child which indicates it is a leaf node\\n        return root.val, self.serialize(root.left), self.serialize(root.right)\\n\\n    def deserialize(self, data):\\n        #######################INTUITION#########################\\n        # The initial data string will be something like below:\\n        # (1, (2, \\'x\\', \\'x\\'), (3, (4, \\'x\\', \\'x\\'), (5, \\'x\\', \\'x\\')))\\n        # if you loop through string: \\n        # 1                                 -> this is node value\\n        # (2, \\'x\\', \\'x\\')                     -> this is node left\\n        # (3, (4, \\'x\\', \\'x\\'), (5, \\'x\\', \\'x\\')) -> this is node right\\n        ########################################################\\n        # always take care of base case: if the node\\'s value is \\'x\\' then return None\\n        if data[0] == \\'x\\': return None\\n        # create new treenode for node value\\n        node = TreeNode(data[0])\\n        # do the recursive to unpack string value\\n        node.left = self.deserialize(data[1])\\n        node.right = self.deserialize(data[2])\\n        # return the new TreeNode that we just created\\n        return node\\n```    \\n\\ncode without comments\\n```\\ndef serialize(self, root):\\n        if not root: return \\'x\\'\\n        return root.val, self.serialize(root.left), self.serialize(root.right)\\n\\ndef deserialize(self, data):\\n\\tif data[0] == \\'x\\': return None\\n\\tnode = TreeNode(data[0])\\n\\tnode.left = self.deserialize(data[1])\\n\\tnode.right = self.deserialize(data[2])\\n\\treturn node\\n```\\nHope it helps! Likes and comments are welcome\\n\\n\\n05/07/2020 update:\\nReturning string instead of tuple.\\nI tried to maintain the coding style as similar as possible to above solution.\\n```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root: return \\'x\\'\\n        return \\',\\'.join([str(root.val), self.serialize(root.left), self.serialize(root.right)])\\n\\n    def deserialize(self, data):\\n\\t\\t# The reason I use self.data in the deserialize is, data stream will be consumed  as we build left side of Tree\\n\\t\\t# by the time when the right side is building up, we need to hold what is left over.\\n\\t\\t# Therefore, self.data is a global value, right side will use what is left over after tree is partially built\\n        self.data = data\\n        if self.data[0] == \\'x\\': return None\\n        node = TreeNode(self.data[:self.data.find(\\',\\')]) \\n        node.left = self.deserialize(self.data[self.data.find(\\',\\')+1:])\\n        node.right = self.deserialize(self.data[self.data.find(\\',\\')+1:])\\n        return node\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Codec:\\n    def serialize(self, root):\\n        # take care of base cases\\n        # if a node is empty, add \\'x\\' to string\\n        # you can set \\'x\\' to any mark as you want\\n        if not root: return \\'x\\'\\n        # preoder(Root->left->right)\\n        # ex,\\n        #     1\\n        #    / \\\\\\n        #   2   3\\n        #      / \\\\\\n        #     4   5 \\n        # \\n        # return (1, (2, \\'x\\', \\'x\\'), (3, (4, \\'x\\', \\'x\\'), (5, \\'x\\', \\'x\\')))\\n        # if you look at the return statement very closely, it is actually very intuitive\\n        # for value 1, you have 2 as left child and 3 as right child\\n        # for value 2, you have \\'x\\'(None) as left child and \\'x\\'(None) as right child which indicates it is a leaf node\\n        return root.val, self.serialize(root.left), self.serialize(root.right)\\n\\n    def deserialize(self, data):\\n        #######################INTUITION#########################\\n        # The initial data string will be something like below:\\n        # (1, (2, \\'x\\', \\'x\\'), (3, (4, \\'x\\', \\'x\\'), (5, \\'x\\', \\'x\\')))\\n        # if you loop through string: \\n        # 1                                 -> this is node value\\n        # (2, \\'x\\', \\'x\\')                     -> this is node left\\n        # (3, (4, \\'x\\', \\'x\\'), (5, \\'x\\', \\'x\\')) -> this is node right\\n        ########################################################\\n        # always take care of base case: if the node\\'s value is \\'x\\' then return None\\n        if data[0] == \\'x\\': return None\\n        # create new treenode for node value\\n        node = TreeNode(data[0])\\n        # do the recursive to unpack string value\\n        node.left = self.deserialize(data[1])\\n        node.right = self.deserialize(data[2])\\n        # return the new TreeNode that we just created\\n        return node\\n```\n```\\ndef serialize(self, root):\\n        if not root: return \\'x\\'\\n        return root.val, self.serialize(root.left), self.serialize(root.right)\\n\\ndef deserialize(self, data):\\n\\tif data[0] == \\'x\\': return None\\n\\tnode = TreeNode(data[0])\\n\\tnode.left = self.deserialize(data[1])\\n\\tnode.right = self.deserialize(data[2])\\n\\treturn node\\n```\n```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root: return \\'x\\'\\n        return \\',\\'.join([str(root.val), self.serialize(root.left), self.serialize(root.right)])\\n\\n    def deserialize(self, data):\\n\\t\\t# The reason I use self.data in the deserialize is, data stream will be consumed  as we build left side of Tree\\n\\t\\t# by the time when the right side is building up, we need to hold what is left over.\\n\\t\\t# Therefore, self.data is a global value, right side will use what is left over after tree is partially built\\n        self.data = data\\n        if self.data[0] == \\'x\\': return None\\n        node = TreeNode(self.data[:self.data.find(\\',\\')]) \\n        node.left = self.deserialize(self.data[self.data.find(\\',\\')+1:])\\n        node.right = self.deserialize(self.data[self.data.find(\\',\\')+1:])\\n        return node\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74252,
                "title": "clean-c-solution",
                "content": "    class Codec {\\n    public:\\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            if (root == nullptr) return \"#\";\\n            return to_string(root->val)+\",\"+serialize(root->left)+\",\"+serialize(root->right);\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            return mydeserialize(data);\\n        }\\n        TreeNode* mydeserialize(string& data) {\\n            if (data[0]=='#') {\\n                if(data.size() > 1) data = data.substr(2);\\n                return nullptr;\\n            } else {\\n                TreeNode* node = new TreeNode(helper(data));\\n                node->left = mydeserialize(data);\\n                node->right = mydeserialize(data);\\n                return node;\\n            }\\n        }\\n    private:\\n        int helper(string& data) {\\n            int pos = data.find(',');\\n            int val = stoi(data.substr(0,pos));\\n            data = data.substr(pos+1);\\n            return val;\\n        }\\n    };`",
                "solutionTags": [],
                "code": "    class Codec {\\n    public:\\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            if (root == nullptr) return \"#\";\\n            return to_string(root->val)+\",\"+serialize(root->left)+\",\"+serialize(root->right);\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            return mydeserialize(data);\\n        }\\n        TreeNode* mydeserialize(string& data) {\\n            if (data[0]=='#') {\\n                if(data.size() > 1) data = data.substr(2);\\n                return nullptr;\\n            } else {\\n                TreeNode* node = new TreeNode(helper(data));\\n                node->left = mydeserialize(data);\\n                node->right = mydeserialize(data);\\n                return node;\\n            }\\n        }\\n    private:\\n        int helper(string& data) {\\n            int pos = data.find(',');\\n            int val = stoi(data.substr(0,pos));\\n            data = data.substr(pos+1);\\n            return val;\\n        }\\n    };`",
                "codeTag": "Java"
            },
            {
                "id": 608304,
                "title": "c-solution-using-queue-and-preorder-traversal",
                "content": "```\\nHey guys I have seen many solutions that would not be accepted in interview.\\nMoreover i will try to restrict my stl to as minimum as possible so begginers would understand.\\n\\nThe idea behind my answer would be to use a preorder traversal and queue.\\n\\n    1\\n   / \\\\\\n  2   3\\n     / \\\\\\n    4   5\\n\\n preorder traversal:1,2,x,x,3,4,x,x,5,x,x\\n Now if we were to serialize it by using null as x and 1 as string characters this how it would become\\n string data = 12xx34xx5xx\\n 12 can be seen as 1 or 12 and many complications would arise due to this.\\n Thus we will try to use a delimiter (i.e commas (\\',\\')) to tackle this problem.\\n string data = \"1,2,x,x,3,4,x,x,5,x,x\".\\n\\n Okay we have finished with serialization.\\n Now how do we deserialize string data = \"1,2,x,x,3,4,x,x,5,x,x\".\\n We can just go through the data stream and be like if till comma or end of string make a new node out of that.\\n This would be a very tedious process and may result in incorrect answers.\\n We will try to use a data structure to solve this->Queue.\\n\\n Why Queue?\\n Because we wanna process the data from left to right.\\n\\n we do a preorder traversal again to decode it.\\n\\n root=1 root->left = deserialize_helper(q) and root->right=deserialize_helper(q)\\n\\n This will build up the tree.\\n\\n I have copied the idea from this video its a brilliant video and i highly suggest u to watch it for deeper understanding.\\n\\n [https://www.youtube.com/watch?v=suj1ro8TIVY&t=689s]\\n\\n string serialize(TreeNode* root) {\\n    if(!root) {\\n     return \"NULL,\";\\n    }\\n    return to_string(root->val)+\",\"+serialize(root->left)+serialize(root->right);\\n}\\n\\n// Decodes your encoded data to tree.\\nTreeNode* deserialize(string data) {\\n    queue<string> q;\\n    string s;\\n    for(int i=0;i<data.size();i++)\\n    {\\n        if(data[i]==\\',\\')\\n        {\\n            q.push(s);\\n            s=\"\";\\n            continue;\\n        }\\n        s+=data[i];\\n    }\\n    if(s.size()!=0)q.push(s);\\n    return deserialize_helper(q);\\n}\\n\\nTreeNode* deserialize_helper(queue<string> &q) {\\n    string s=q.front();\\n    q.pop();\\n    if(s==\"NULL\")return NULL;\\n    TreeNode* root=new TreeNode(stoi(s));\\n    root->left=deserialize_helper(q);\\n    root->right=deserialize_helper(q);\\n    return root;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nHey guys I have seen many solutions that would not be accepted in interview.\\nMoreover i will try to restrict my stl to as minimum as possible so begginers would understand.\\n\\nThe idea behind my answer would be to use a preorder traversal and queue.\\n\\n    1\\n   / \\\\\\n  2   3\\n     / \\\\\\n    4   5\\n\\n preorder traversal:1,2,x,x,3,4,x,x,5,x,x\\n Now if we were to serialize it by using null as x and 1 as string characters this how it would become\\n string data = 12xx34xx5xx\\n 12 can be seen as 1 or 12 and many complications would arise due to this.\\n Thus we will try to use a delimiter (i.e commas (\\',\\')) to tackle this problem.\\n string data = \"1,2,x,x,3,4,x,x,5,x,x\".\\n\\n Okay we have finished with serialization.\\n Now how do we deserialize string data = \"1,2,x,x,3,4,x,x,5,x,x\".\\n We can just go through the data stream and be like if till comma or end of string make a new node out of that.\\n This would be a very tedious process and may result in incorrect answers.\\n We will try to use a data structure to solve this->Queue.\\n\\n Why Queue?\\n Because we wanna process the data from left to right.\\n\\n we do a preorder traversal again to decode it.\\n\\n root=1 root->left = deserialize_helper(q) and root->right=deserialize_helper(q)\\n\\n This will build up the tree.\\n\\n I have copied the idea from this video its a brilliant video and i highly suggest u to watch it for deeper understanding.\\n\\n [https://www.youtube.com/watch?v=suj1ro8TIVY&t=689s]\\n\\n string serialize(TreeNode* root) {\\n    if(!root) {\\n     return \"NULL,\";\\n    }\\n    return to_string(root->val)+\",\"+serialize(root->left)+serialize(root->right);\\n}\\n\\n// Decodes your encoded data to tree.\\nTreeNode* deserialize(string data) {\\n    queue<string> q;\\n    string s;\\n    for(int i=0;i<data.size();i++)\\n    {\\n        if(data[i]==\\',\\')\\n        {\\n            q.push(s);\\n            s=\"\";\\n            continue;\\n        }\\n        s+=data[i];\\n    }\\n    if(s.size()!=0)q.push(s);\\n    return deserialize_helper(q);\\n}\\n\\nTreeNode* deserialize_helper(queue<string> &q) {\\n    string s=q.front();\\n    q.pop();\\n    if(s==\"NULL\")return NULL;\\n    TreeNode* root=new TreeNode(stoi(s));\\n    root->left=deserialize_helper(q);\\n    root->right=deserialize_helper(q);\\n    return root;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 281714,
                "title": "clean-java-solution",
                "content": "```\\npublic class Codec {\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"#\";\\n        return root.val + \",\" + serialize(root.left) + \",\" + serialize(root.right);\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(\",\")));\\n        return helper(queue);\\n    }\\n    \\n    private TreeNode helper(Queue<String> queue) {\\n        String s = queue.poll();\\n        if (s.equals(\"#\")) return null;\\n        TreeNode root = new TreeNode(Integer.valueOf(s));\\n        root.left = helper(queue);\\n        root.right = helper(queue);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Codec {\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"#\";\\n        return root.val + \",\" + serialize(root.left) + \",\" + serialize(root.right);\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(\",\")));\\n        return helper(queue);\\n    }\\n    \\n    private TreeNode helper(Queue<String> queue) {\\n        String s = queue.poll();\\n        if (s.equals(\"#\")) return null;\\n        TreeNode root = new TreeNode(Integer.valueOf(s));\\n        root.left = helper(queue);\\n        root.right = helper(queue);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74260,
                "title": "recursive-dfs-iterative-dfs-and-bfs",
                "content": "This problem can solved in 3 different ways\\n\\n(1) Iterative DFS\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            StringBuilder sb=new StringBuilder();\\n            TreeNode x=root;\\n            Deque<TreeNode> stack=new LinkedList<>();\\n            while (x!=null || !stack.isEmpty()) {\\n                if (x!=null) {\\n                    sb.append(String.valueOf(x.val));\\n                    sb.append(' ');\\n                    stack.push(x);\\n                    x=x.left;\\n                }\\n                else {\\n                    sb.append(\"null \");\\n                    x=stack.pop();\\n                    x=x.right;\\n                }\\n            }\\n            return sb.toString();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            if (data.length()==0) return null;\\n            String[] node=data.split(\" \");\\n            int n=node.length;\\n            Deque<TreeNode> stack=new LinkedList<>();\\n            TreeNode root=new TreeNode(Integer.valueOf(node[0]));\\n            TreeNode x=root;\\n            stack.push(x);\\n            \\n            int i=1;\\n            while (i<n) {\\n                while (i<n && !node[i].equals(\"null\")) {\\n                    x.left=new TreeNode(Integer.valueOf(node[i++]));\\n                    x=x.left;\\n                    stack.push(x);\\n                }\\n                while (i<n && node[i].equals(\"null\")) {\\n                    x=stack.pop();\\n                    i++;\\n                }\\n                if (i<n) {\\n                    x.right=new TreeNode(Integer.valueOf(node[i++]));\\n                    x=x.right;\\n                    stack.push(x);\\n                }\\n            }\\n            return root;\\n        }\\n    }\\n\\n(2) recursive DFS\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            StringBuilder sb=new StringBuilder();\\n            dfs(root,sb);\\n            return sb.toString();\\n        }\\n        private void dfs(TreeNode x, StringBuilder sb) {\\n            if (x==null) {\\n                sb.append(\"null \");\\n                return;\\n            }\\n            sb.append(String.valueOf(x.val));\\n            sb.append(' ');\\n            dfs(x.left,sb);\\n            dfs(x.right,sb);\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            String[] node=data.split(\" \");\\n            int[] d=new int[1];\\n            return dfs(node,d);\\n        }\\n        private TreeNode dfs(String[] node, int[] d) {\\n            if (node[d[0]].equals(\"null\")) {\\n                d[0]++;\\n                return null;\\n            }\\n            TreeNode x=new TreeNode(Integer.valueOf(node[d[0]]));\\n            d[0]++;\\n            x.left=dfs(node,d);\\n            x.right=dfs(node,d);\\n            return x;\\n        }\\n    }\\n\\n(3) BFS \\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            if (root==null) return \"\";\\n            Queue<TreeNode> qu=new LinkedList<>();\\n            StringBuilder sb=new StringBuilder();\\n            qu.offer(root);\\n            sb.append(String.valueOf(root.val));\\n            sb.append(' ');\\n            while (!qu.isEmpty()) {\\n                TreeNode x=qu.poll();\\n                if (x.left==null) sb.append(\"null \");\\n                else {\\n                    qu.offer(x.left);\\n                    sb.append(String.valueOf(x.left.val));\\n                    sb.append(' ');\\n                }\\n                if (x.right==null) sb.append(\"null \");\\n                else {\\n                    qu.offer(x.right);\\n                    sb.append(String.valueOf(x.right.val));\\n                    sb.append(' ');\\n                }\\n            }\\n            return sb.toString();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            if (data.length()==0) return null;\\n            String[] node=data.split(\" \");\\n            Queue<TreeNode> qu=new LinkedList<>();\\n            TreeNode root=new TreeNode(Integer.valueOf(node[0]));\\n            qu.offer(root);\\n            int i=1;\\n            while (!qu.isEmpty()) {\\n                Queue<TreeNode> nextQu=new LinkedList<>();\\n                while (!qu.isEmpty()) {\\n                    TreeNode x=qu.poll();\\n                    if (node[i].equals(\"null\")) x.left=null;\\n                    else {\\n                        x.left=new TreeNode(Integer.valueOf(node[i]));\\n                        nextQu.offer(x.left);\\n                    }\\n                    i++;\\n                    if (node[i].equals(\"null\")) x.right=null;\\n                    else {\\n                        x.right=new TreeNode(Integer.valueOf(node[i]));\\n                        nextQu.offer(x.right);\\n                    }\\n                    i++;\\n                }\\n                qu=nextQu;\\n            }\\n            return root;\\n        }\\n    }",
                "solutionTags": [
                    "Depth-First Search",
                    "Breadth-First Search"
                ],
                "code": "This problem can solved in 3 different ways\\n\\n(1) Iterative DFS\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            StringBuilder sb=new StringBuilder();\\n            TreeNode x=root;\\n            Deque<TreeNode> stack=new LinkedList<>();\\n            while (x!=null || !stack.isEmpty()) {\\n                if (x!=null) {\\n                    sb.append(String.valueOf(x.val));\\n                    sb.append(' ');\\n                    stack.push(x);\\n                    x=x.left;\\n                }\\n                else {\\n                    sb.append(\"null \");\\n                    x=stack.pop();\\n                    x=x.right;\\n                }\\n            }\\n            return sb.toString();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            if (data.length()==0) return null;\\n            String[] node=data.split(\" \");\\n            int n=node.length;\\n            Deque<TreeNode> stack=new LinkedList<>();\\n            TreeNode root=new TreeNode(Integer.valueOf(node[0]));\\n            TreeNode x=root;\\n            stack.push(x);\\n            \\n            int i=1;\\n            while (i<n) {\\n                while (i<n && !node[i].equals(\"null\")) {\\n                    x.left=new TreeNode(Integer.valueOf(node[i++]));\\n                    x=x.left;\\n                    stack.push(x);\\n                }\\n                while (i<n && node[i].equals(\"null\")) {\\n                    x=stack.pop();\\n                    i++;\\n                }\\n                if (i<n) {\\n                    x.right=new TreeNode(Integer.valueOf(node[i++]));\\n                    x=x.right;\\n                    stack.push(x);\\n                }\\n            }\\n            return root;\\n        }\\n    }\\n\\n(2) recursive DFS\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            StringBuilder sb=new StringBuilder();\\n            dfs(root,sb);\\n            return sb.toString();\\n        }\\n        private void dfs(TreeNode x, StringBuilder sb) {\\n            if (x==null) {\\n                sb.append(\"null \");\\n                return;\\n            }\\n            sb.append(String.valueOf(x.val));\\n            sb.append(' ');\\n            dfs(x.left,sb);\\n            dfs(x.right,sb);\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            String[] node=data.split(\" \");\\n            int[] d=new int[1];\\n            return dfs(node,d);\\n        }\\n        private TreeNode dfs(String[] node, int[] d) {\\n            if (node[d[0]].equals(\"null\")) {\\n                d[0]++;\\n                return null;\\n            }\\n            TreeNode x=new TreeNode(Integer.valueOf(node[d[0]]));\\n            d[0]++;\\n            x.left=dfs(node,d);\\n            x.right=dfs(node,d);\\n            return x;\\n        }\\n    }\\n\\n(3) BFS \\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            if (root==null) return \"\";\\n            Queue<TreeNode> qu=new LinkedList<>();\\n            StringBuilder sb=new StringBuilder();\\n            qu.offer(root);\\n            sb.append(String.valueOf(root.val));\\n            sb.append(' ');\\n            while (!qu.isEmpty()) {\\n                TreeNode x=qu.poll();\\n                if (x.left==null) sb.append(\"null \");\\n                else {\\n                    qu.offer(x.left);\\n                    sb.append(String.valueOf(x.left.val));\\n                    sb.append(' ');\\n                }\\n                if (x.right==null) sb.append(\"null \");\\n                else {\\n                    qu.offer(x.right);\\n                    sb.append(String.valueOf(x.right.val));\\n                    sb.append(' ');\\n                }\\n            }\\n            return sb.toString();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            if (data.length()==0) return null;\\n            String[] node=data.split(\" \");\\n            Queue<TreeNode> qu=new LinkedList<>();\\n            TreeNode root=new TreeNode(Integer.valueOf(node[0]));\\n            qu.offer(root);\\n            int i=1;\\n            while (!qu.isEmpty()) {\\n                Queue<TreeNode> nextQu=new LinkedList<>();\\n                while (!qu.isEmpty()) {\\n                    TreeNode x=qu.poll();\\n                    if (node[i].equals(\"null\")) x.left=null;\\n                    else {\\n                        x.left=new TreeNode(Integer.valueOf(node[i]));\\n                        nextQu.offer(x.left);\\n                    }\\n                    i++;\\n                    if (node[i].equals(\"null\")) x.right=null;\\n                    else {\\n                        x.right=new TreeNode(Integer.valueOf(node[i]));\\n                        nextQu.offer(x.right);\\n                    }\\n                    i++;\\n                }\\n                qu=nextQu;\\n            }\\n            return root;\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 886236,
                "title": "c-super-clean-short-solution",
                "content": "```\\nclass Codec {\\npublic:\\n\\n    string serialize(TreeNode* root) \\n    {\\n        return !root ? \" null\" : \" \" + to_string(root->val) + serialize(root->left) + serialize(root->right);\\n    }\\n\\t\\n    TreeNode* deserialize(string data) \\n    {\\n        istringstream ss(data);\\n        return buildTree(ss);\\n    }\\n    \\nprivate:\\n    \\n    TreeNode* buildTree(istringstream& ss)\\n    {\\n        string s;\\n        ss >> s;\\n        \\n        if (s == \"null\")\\n\\t\\t\\treturn NULL;\\n        \\n        TreeNode* node = new TreeNode(stoi(s));\\n        node->left = buildTree(ss);\\n        node->right = buildTree(ss);\\n            \\n        return node;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    string serialize(TreeNode* root) \\n    {\\n        return !root ? \" null\" : \" \" + to_string(root->val) + serialize(root->left) + serialize(root->right);\\n    }\\n\\t\\n    TreeNode* deserialize(string data) \\n    {\\n        istringstream ss(data);\\n        return buildTree(ss);\\n    }\\n    \\nprivate:\\n    \\n    TreeNode* buildTree(istringstream& ss)\\n    {\\n        string s;\\n        ss >> s;\\n        \\n        if (s == \"null\")\\n\\t\\t\\treturn NULL;\\n        \\n        TreeNode* node = new TreeNode(stoi(s));\\n        node->left = buildTree(ss);\\n        node->right = buildTree(ss);\\n            \\n        return node;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74417,
                "title": "short-and-clear-recursive-java-solution",
                "content": "    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) \\n    {\\n        if(root == null) return \"#\";\\n        \\n        return \"\" + root.val + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n    \\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) \\n    {\\n        return build(new Scanner(data));\\n    }\\n    \\n    private TreeNode build(Scanner sc)\\n    {\\n        if(!sc.hasNext()) return null;\\n        String tk = sc.next();\\n        if(tk.equals(\"#\")) return null;\\n        \\n        TreeNode root = new TreeNode(Integer.parseInt(tk));\\n        root.left = build(sc);\\n        root.right = build(sc);\\n        \\n        return root;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) \\n    {\\n        if(root == null) return \"#\";\\n        \\n        return \"\" + root.val + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n    \\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) \\n    {\\n        return build(new Scanner(data));\\n    }\\n    \\n    private TreeNode build(Scanner sc)\\n    {\\n        if(!sc.hasNext()) return null;\\n        String tk = sc.next();\\n        if(tk.equals(\"#\")) return null;\\n        \\n        TreeNode root = new TreeNode(Integer.parseInt(tk));\\n        root.left = build(sc);\\n        root.right = build(sc);\\n        \\n        return root;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 883704,
                "title": "java-python-2-solutions-dfs-bfs-o-n-clean-concise",
                "content": "**\\u2714\\uFE0F Solution 1: DFS - Serialize and Deserialize in Pre Order Traversal**\\n\\n<iframe src=\"https://leetcode.com/playground/R7vVdhU8/shared\" frameBorder=\"0\" width=\"100%\" height=\"750\"></iframe>\\n\\n**Complexity**\\n- Time: `O(N)`, where `N <= 10^4` is number of nodes in the Binary Tree.\\n- Space: `O(N)`\\n\\n---\\n\\n**\\u2714\\uFE0F Solution 2: BFS**\\n```python\\nclass Codec:\\n    def serialize(self, root):\\n        if root == None: return \"#\"\\n        bfs = deque([root])\\n        ans = []\\n        while bfs:\\n            curr = bfs.popleft()\\n            if curr == None:\\n                ans.append(\"#\")\\n            else:\\n                ans.append(str(curr.val))\\n                bfs.append(curr.left)\\n                bfs.append(curr.right)\\n        return \",\".join(ans)\\n\\n    def deserialize(self, data):\\n        def createNode(strVal):\\n            if strVal == \"#\": return None\\n            return TreeNode(int(strVal))\\n\\n        if data == \"#\": return None\\n        strs = data.split(\",\")\\n        root = createNode(strs[0])\\n        i = 1\\n        bfs = deque([root])\\n        while bfs:\\n            curr = bfs.popleft()\\n            curr.left = createNode(strs[i])\\n            curr.right = createNode(strs[i+1])\\n            i += 2\\n\\n            if curr.left != None:\\n                bfs.append(curr.left)\\n            if curr.right != None:\\n                bfs.append(curr.right)\\n\\n        return root\\n```\\n**Complexity**\\n- Time: `O(N)`, where `N <= 10^4` is number of nodes in the Binary Tree.\\n- Space: `O(N)`",
                "solutionTags": [],
                "code": "```python\\nclass Codec:\\n    def serialize(self, root):\\n        if root == None: return \"#\"\\n        bfs = deque([root])\\n        ans = []\\n        while bfs:\\n            curr = bfs.popleft()\\n            if curr == None:\\n                ans.append(\"#\")\\n            else:\\n                ans.append(str(curr.val))\\n                bfs.append(curr.left)\\n                bfs.append(curr.right)\\n        return \",\".join(ans)\\n\\n    def deserialize(self, data):\\n        def createNode(strVal):\\n            if strVal == \"#\": return None\\n            return TreeNode(int(strVal))\\n\\n        if data == \"#\": return None\\n        strs = data.split(\",\")\\n        root = createNode(strs[0])\\n        i = 1\\n        bfs = deque([root])\\n        while bfs:\\n            curr = bfs.popleft()\\n            curr.left = createNode(strs[i])\\n            curr.right = createNode(strs[i+1])\\n            i += 2\\n\\n            if curr.left != None:\\n                bfs.append(curr.left)\\n            if curr.right != None:\\n                bfs.append(curr.right)\\n\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74379,
                "title": "simple-and-intuitive-iterative-python-solution-using-deque-same-serialization-as-leetcode-beats-95",
                "content": "    # Definition for a binary tree node.\\n    # class TreeNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    from collections import deque\\n    \\n    class Codec:\\n    \\n        def serialize(self, root):\\n            string = \"\"\\n            queue = deque([root])\\n            while queue:\\n                cur = queue.popleft()\\n                if not cur:\\n                    string += \",None\"\\n                    continue\\n                else:\\n                    string += \",\" + str(cur.val)\\n                    queue.append(cur.left)\\n                    queue.append(cur.right)\\n            return string\\n            \\n        def deserialize(self, data):\\n            data = deque(data.split(\",\"))\\n            _, val = data.popleft(), data.popleft()\\n            root = None if val == \"None\" else TreeNode(int(val))\\n            queue = deque([root])\\n            while queue:\\n                cur = queue.popleft()\\n                if cur:\\n                    a, b = data.popleft(), data.popleft()\\n                    cur.left = TreeNode(int(a)) if a != \"None\" else None\\n                    cur.right = TreeNode(int(b)) if b != \"None\" else None\\n                    queue.append(cur.left)\\n                    queue.append(cur.right)\\n            return root\\n    \\n    # Your Codec object will be instantiated and called as such:\\n    # codec = Codec()\\n    # codec.deserialize(codec.serialize(root))",
                "solutionTags": [],
                "code": "    # Definition for a binary tree node.\\n    # class TreeNode(object):\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    from collections import deque\\n    \\n    class Codec:\\n    \\n        def serialize(self, root):\\n            string = \"\"\\n            queue = deque([root])\\n            while queue:\\n                cur = queue.popleft()\\n                if not cur:\\n                    string += \",None\"\\n                    continue\\n                else:\\n                    string += \",\" + str(cur.val)\\n                    queue.append(cur.left)\\n                    queue.append(cur.right)\\n            return string\\n            \\n        def deserialize(self, data):\\n            data = deque(data.split(\",\"))\\n            _, val = data.popleft(), data.popleft()\\n            root = None if val == \"None\" else TreeNode(int(val))\\n            queue = deque([root])\\n            while queue:\\n                cur = queue.popleft()\\n                if cur:\\n                    a, b = data.popleft(), data.popleft()\\n                    cur.left = TreeNode(int(a)) if a != \"None\" else None\\n                    cur.right = TreeNode(int(b)) if b != \"None\" else None\\n                    queue.append(cur.left)\\n                    queue.append(cur.right)\\n            return root\\n    \\n    # Your Codec object will be instantiated and called as such:\\n    # codec = Codec()\\n    # codec.deserialize(codec.serialize(root))",
                "codeTag": "Java"
            },
            {
                "id": 137778,
                "title": "javascript-dfs-preorder-solution",
                "content": "Straightforward easy DFS solution.\\n```js\\n/*\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    let string = \\'\\';\\n\\n    function buildString(node) {\\n        if (!node) {\\n            string += \\'e \\';\\n        } else {\\n            string += node.val + \\' \\';\\n            buildString(node.left);\\n            buildString(node.right);\\n        }\\n    }\\n\\n    buildString(root);\\n\\n    return string;\\n};\\n```\\nIt will generate `\"1 2 e e 3 4 e e 5 e e \"` (e = empty) for the following tree.\\n```\\n    1\\n   / \\\\\\n  2   3\\n     / \\\\\\n    4   5\\n```\\n```js\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    let nodes = data.split(\\' \\');\\n\\n    function buildTree() {\\n        let val = nodes.shift();\\n\\n        if (val === \\'e\\') {\\n            return null;\\n        } else {\\n            let node = new TreeNode(Number(val));\\n            node.left = buildTree();\\n            node.right = buildTree();\\n            return node;\\n        }\\n    }\\n\\n    return buildTree();\\n};\\n```",
                "solutionTags": [],
                "code": "```js\\n/*\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    let string = \\'\\';\\n\\n    function buildString(node) {\\n        if (!node) {\\n            string += \\'e \\';\\n        } else {\\n            string += node.val + \\' \\';\\n            buildString(node.left);\\n            buildString(node.right);\\n        }\\n    }\\n\\n    buildString(root);\\n\\n    return string;\\n};\\n```\n```\\n    1\\n   / \\\\\\n  2   3\\n     / \\\\\\n    4   5\\n```\n```js\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    let nodes = data.split(\\' \\');\\n\\n    function buildTree() {\\n        let val = nodes.shift();\\n\\n        if (val === \\'e\\') {\\n            return null;\\n        } else {\\n            let node = new TreeNode(Number(val));\\n            node.left = buildTree();\\n            node.right = buildTree();\\n            return node;\\n        }\\n    }\\n\\n    return buildTree();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 74446,
                "title": "c-accepted-o-n-easy-solution",
                "content": "Idea: Level-order traversal. Use '#' to denote a nullptr. User ',' to separate entries. The output is very similar to Leetcode's default deserialization logic.\\n\\n\\n--\\n\\nTime Complexities: O(n) to serialize and O(n) to deserialize\\n\\nSpace Complexities: O(n) to serialize and O(n) to deserialize\\n\\n--\\n\\n    /**\\n     * Definition for a binary tree node.\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            queue<TreeNode*> q;\\n            q.push(root);\\n            string str;\\n            while (!q.empty()) {\\n                if (q.front() == nullptr) {\\n                    str = str + \"#,\";\\n                } else {\\n                    q.push(q.front()->left);\\n                    q.push(q.front()->right);\\n                    str = str + to_string(q.front()->val) + \",\";\\n                }\\n                q.pop();\\n            }\\n            return str;\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            TreeNode* root = nullptr;\\n            queue<TreeNode**> q;\\n            q.push(&root);\\n            string::iterator first = data.begin();\\n            while (first != data.end()) {\\n                TreeNode** pp = q.front();\\n                if (*first == '#') {\\n                    // *pp = nullptr;\\n                    advance(first, 2);\\n                } else {\\n                    string::iterator last = find(first, data.end(), ',');\\n                    int val = stoi(string(first, last));\\n                    *pp = new TreeNode(val);\\n                    q.push(&((*pp)->left));\\n                    q.push(&((*pp)->right));\\n                    first = next(last);\\n                }\\n                q.pop();\\n            }\\n            return root;\\n        }\\n    };\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec;\\n    // codec.deserialize(codec.serialize(root));",
                "solutionTags": [],
                "code": "Idea: Level-order traversal. Use '#' to denote a nullptr. User ',' to separate entries. The output is very similar to Leetcode's default deserialization logic.\\n\\n\\n--\\n\\nTime Complexities: O(n) to serialize and O(n) to deserialize\\n\\nSpace Complexities: O(n) to serialize and O(n) to deserialize\\n\\n--\\n\\n    /**\\n     * Definition for a binary tree node.\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            queue<TreeNode*> q;\\n            q.push(root);\\n            string str;\\n            while (!q.empty()) {\\n                if (q.front() == nullptr) {\\n                    str = str + \"#,\";\\n                } else {\\n                    q.push(q.front()->left);\\n                    q.push(q.front()->right);\\n                    str = str + to_string(q.front()->val) + \",\";\\n                }\\n                q.pop();\\n            }\\n            return str;\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            TreeNode* root = nullptr;\\n            queue<TreeNode**> q;\\n            q.push(&root);\\n            string::iterator first = data.begin();\\n            while (first != data.end()) {\\n                TreeNode** pp = q.front();\\n                if (*first == '#') {\\n                    // *pp = nullptr;\\n                    advance(first, 2);\\n                } else {\\n                    string::iterator last = find(first, data.end(), ',');\\n                    int val = stoi(string(first, last));\\n                    *pp = new TreeNode(val);\\n                    q.push(&((*pp)->left));\\n                    q.push(&((*pp)->right));\\n                    first = next(last);\\n                }\\n                q.pop();\\n            }\\n            return root;\\n        }\\n    };\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec;\\n    // codec.deserialize(codec.serialize(root));",
                "codeTag": "Java"
            },
            {
                "id": 74261,
                "title": "easy-to-understand-java-solution",
                "content": "     public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();    \\n        helperS(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    private void helperS(TreeNode node, StringBuilder sb){\\n        if(node == null){\\n            sb.append(\"null\").append(\",\");\\n            return;\\n        }\\n        \\n        sb.append(node.val).append(\",\");\\n        \\n        helperS(node.left, sb);\\n        helperS(node.right, sb);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] vals  = data.split(\"[,]\");\\n        int[]    index = new int[]{0};\\n        return helperD(vals, index);\\n    }\\n    \\n    private TreeNode helperD(String[] vals, int[] index){\\n        if(index[0] == vals.length){\\n            return null;\\n        }\\n        \\n        String visiting = vals[index[0]++];\\n        if(visiting.equals(\"null\")){\\n            return null;\\n        }\\n        \\n        TreeNode node = new TreeNode(Integer.valueOf(visiting));\\n        node.left     = helperD(vals, index);\\n        node.right    = helperD(vals, index);\\n        \\n        return node;\\n    }",
                "solutionTags": [],
                "code": "     public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();    \\n        helperS(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    private void helperS(TreeNode node, StringBuilder sb){\\n        if(node == null){\\n            sb.append(\"null\").append(\",\");\\n            return;\\n        }\\n        \\n        sb.append(node.val).append(\",\");\\n        \\n        helperS(node.left, sb);\\n        helperS(node.right, sb);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] vals  = data.split(\"[,]\");\\n        int[]    index = new int[]{0};\\n        return helperD(vals, index);\\n    }\\n    \\n    private TreeNode helperD(String[] vals, int[] index){\\n        if(index[0] == vals.length){\\n            return null;\\n        }\\n        \\n        String visiting = vals[index[0]++];\\n        if(visiting.equals(\"null\")){\\n            return null;\\n        }\\n        \\n        TreeNode node = new TreeNode(Integer.valueOf(visiting));\\n        node.left     = helperD(vals, index);\\n        node.right    = helperD(vals, index);\\n        \\n        return node;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 74430,
                "title": "tuplify-json-python",
                "content": "    import json\\n    \\n    class Codec:\\n    \\n        def serialize(self, root):\\n            def tuplify(root):\\n                return root and (root.val, tuplify(root.left), tuplify(root.right))\\n            return json.dumps(tuplify(root))\\n    \\n        def deserialize(self, data):\\n            def detuplify(t):\\n                if t:\\n                    root = TreeNode(t[0])\\n                    root.left = detuplify(t[1])\\n                    root.right = detuplify(t[2])\\n                    return root\\n            return detuplify(json.loads(data))\\n\\nConvert the tree from TreeNode objects into purely basic data types (nested tuples with ints and None), which can then be handled by a standard serializers. For example, the shown example tree becomes `[1, [2, null, null], [3, [4, null, null], [5, null, null]]]`.\\n\\nI had tried tuplify + `repr`/`eval` before and it caused a MemoryError, but `json` works. Thanks to [\\u5728\\u7ebf\\u75af\\u72c2's solution](https://leetcode.com/discuss/66161/a-python-solution-using-json) for reminding me of json.",
                "solutionTags": [
                    "Python"
                ],
                "code": "    import json\\n    \\n    class Codec:\\n    \\n        def serialize(self, root):\\n            def tuplify(root):\\n                return root and (root.val, tuplify(root.left), tuplify(root.right))\\n            return json.dumps(tuplify(root))\\n    \\n        def deserialize(self, data):\\n            def detuplify(t):\\n                if t:\\n                    root = TreeNode(t[0])\\n                    root.left = detuplify(t[1])\\n                    root.right = detuplify(t[2])\\n                    return root\\n            return detuplify(json.loads(data))\\n\\nConvert the tree from TreeNode objects into purely basic data types (nested tuples with ints and None), which can then be handled by a standard serializers. For example, the shown example tree becomes `[1, [2, null, null], [3, [4, null, null], [5, null, null]]]`.\\n\\nI had tried tuplify + `repr`/`eval` before and it caused a MemoryError, but `json` works. Thanks to [\\u5728\\u7ebf\\u75af\\u72c2's solution](https://leetcode.com/discuss/66161/a-python-solution-using-json) for reminding me of json.",
                "codeTag": "Java"
            },
            {
                "id": 1436223,
                "title": "c-simple-well-explained",
                "content": "```\\n2 functions serialize and buildString for serialization : while building string we are doing pre order traversal and returned the built string.\\n2 functions deserialize and buildTree for deserialization : From the string we were given, we seperated the individual nodes and \\npushed them into a queue of string and with that queue we went into buildTree function. There we took one string at a time from \\nthe queue and constructed a TreeNode and keep on building the tree recursively and finally returned the root node.\\nstoi() is a function to convert string to int\\nupvote if you like it.\\n```\\n```\\nclass Codec {\\npublic:\\n    \\n    void buildString(TreeNode* root, string &res)\\n    {\\n        if(root == NULL)\\n        {   res += \"null,\";\\n            return;\\n        }\\n        \\n        res += to_string(root->val) + \",\";\\n        buildString(root->left, res);\\n        buildString(root->right, res);\\n    }\\n    \\n    string serialize(TreeNode* root) \\n    { \\n        string res = \"\";\\n        buildString(root, res);\\n        return res;\\n    }\\n    \\n    TreeNode* buildTree(queue<string> &q) \\n    {\\n        string s = q.front();\\n        q.pop();\\n        \\n        if(s == \"null\")\\n            return NULL;\\n        \\n        TreeNode* root = new TreeNode(stoi(s));\\n        root->left = buildTree(q);\\n        root->right = buildTree(q);\\n        return root;\\n    }\\n    \\n    TreeNode* deserialize(string data) \\n    {\\n        string s = \"\";\\n        queue <string> q;\\n        \\n        for(char c: data) \\n        {\\n            if(c == \\',\\') \\n            {\\n                q.push(s);\\n                s = \"\";\\n            }\\n            else\\n                s += c;\\n        }\\n        \\n        return buildTree(q);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\n2 functions serialize and buildString for serialization : while building string we are doing pre order traversal and returned the built string.\\n2 functions deserialize and buildTree for deserialization : From the string we were given, we seperated the individual nodes and \\npushed them into a queue of string and with that queue we went into buildTree function. There we took one string at a time from \\nthe queue and constructed a TreeNode and keep on building the tree recursively and finally returned the root node.\\nstoi() is a function to convert string to int\\nupvote if you like it.\\n```\n```\\nclass Codec {\\npublic:\\n    \\n    void buildString(TreeNode* root, string &res)\\n    {\\n        if(root == NULL)\\n        {   res += \"null,\";\\n            return;\\n        }\\n        \\n        res += to_string(root->val) + \",\";\\n        buildString(root->left, res);\\n        buildString(root->right, res);\\n    }\\n    \\n    string serialize(TreeNode* root) \\n    { \\n        string res = \"\";\\n        buildString(root, res);\\n        return res;\\n    }\\n    \\n    TreeNode* buildTree(queue<string> &q) \\n    {\\n        string s = q.front();\\n        q.pop();\\n        \\n        if(s == \"null\")\\n            return NULL;\\n        \\n        TreeNode* root = new TreeNode(stoi(s));\\n        root->left = buildTree(q);\\n        root->right = buildTree(q);\\n        return root;\\n    }\\n    \\n    TreeNode* deserialize(string data) \\n    {\\n        string s = \"\";\\n        queue <string> q;\\n        \\n        for(char c: data) \\n        {\\n            if(c == \\',\\') \\n            {\\n                q.push(s);\\n                s = \"\";\\n            }\\n            else\\n                s += c;\\n        }\\n        \\n        return buildTree(q);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 395586,
                "title": "simple-and-clean-javascript-solution",
                "content": "```\\n// e.g.\\n//    1\\n//   / \\\\\\n//  2   3\\n//     / \\\\\\n//    4   5\\n//\\n// data = [1, 2, null, null, 3, 4, null, null, 5, null, null]\\n\\nfunction serialize(root) {\\n  let data = [];\\n\\n  function go(node) {\\n    if (node == null) {\\n      data.push(null);\\n      return;\\n    }\\n\\n    data.push(node.val);\\n    go(node.left);\\n    go(node.right);\\n  }\\n\\n  go(root);\\n  return data;\\n}\\n\\nfunction deserialize(data) {\\n  function go() {\\n    if (data.length === 0) return;\\n\\n    const val = data.shift();\\n    if (val == null) return null;\\n\\n    const node = new TreeNode(val);\\n    node.left = go();\\n    node.right = go();\\n    return node;\\n  }\\n\\n  return go();\\n}\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// e.g.\\n//    1\\n//   / \\\\\\n//  2   3\\n//     / \\\\\\n//    4   5\\n//\\n// data = [1, 2, null, null, 3, 4, null, null, 5, null, null]\\n\\nfunction serialize(root) {\\n  let data = [];\\n\\n  function go(node) {\\n    if (node == null) {\\n      data.push(null);\\n      return;\\n    }\\n\\n    data.push(node.val);\\n    go(node.left);\\n    go(node.right);\\n  }\\n\\n  go(root);\\n  return data;\\n}\\n\\nfunction deserialize(data) {\\n  function go() {\\n    if (data.length === 0) return;\\n\\n    const val = data.shift();\\n    if (val == null) return null;\\n\\n    const node = new TreeNode(val);\\n    node.left = go();\\n    node.right = go();\\n    return node;\\n  }\\n\\n  return go();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 781918,
                "title": "python-bfs-to-serialize-like-leetcode",
                "content": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        # use level order traversal to match LeetCode\\'s serialization format\\n        flat_bt = []\\n        queue = collections.deque([root])\\n        while queue:\\n            node = queue.pop()\\n            if node:\\n                flat_bt.append(str(node.val))\\n                queue.appendleft(node.left)\\n                queue.appendleft(node.right)\\n            else:\\n                # you can use any char to represent null\\n                # empty string means test for a non-null node is simply: flat_bt[i]\\n                flat_bt.append(\\'\\')\\n        return \\',\\'.join(flat_bt)\\n    # time:  O(n)\\n    # space: O(n)\\n\\n    def deserialize(self, data):\\n        if not data:\\n            return\\n        flat_bt = data.split(\\',\\')\\n        ans = TreeNode(flat_bt[0])\\n        queue = collections.deque([ans])\\n        i = 1\\n        # when you pop a node, its children will be at i and i+1\\n        while queue:\\n            node = queue.pop()\\n            if i < len(flat_bt) and flat_bt[i]:\\n                node.left = TreeNode(int(flat_bt[i]))\\n                queue.appendleft(node.left)\\n            i += 1\\n            if i < len(flat_bt) and flat_bt[i]:\\n                node.right = TreeNode(int(flat_bt[i]))\\n                queue.appendleft(node.right)\\n            i += 1\\n        return ans\\n    # time:  O(n)\\n    # space: O(n)\\n```\\n*Edit: formatting*",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        # use level order traversal to match LeetCode\\'s serialization format\\n        flat_bt = []\\n        queue = collections.deque([root])\\n        while queue:\\n            node = queue.pop()\\n            if node:\\n                flat_bt.append(str(node.val))\\n                queue.appendleft(node.left)\\n                queue.appendleft(node.right)\\n            else:\\n                # you can use any char to represent null\\n                # empty string means test for a non-null node is simply: flat_bt[i]\\n                flat_bt.append(\\'\\')\\n        return \\',\\'.join(flat_bt)\\n    # time:  O(n)\\n    # space: O(n)\\n\\n    def deserialize(self, data):\\n        if not data:\\n            return\\n        flat_bt = data.split(\\',\\')\\n        ans = TreeNode(flat_bt[0])\\n        queue = collections.deque([ans])\\n        i = 1\\n        # when you pop a node, its children will be at i and i+1\\n        while queue:\\n            node = queue.pop()\\n            if i < len(flat_bt) and flat_bt[i]:\\n                node.left = TreeNode(int(flat_bt[i]))\\n                queue.appendleft(node.left)\\n            i += 1\\n            if i < len(flat_bt) and flat_bt[i]:\\n                node.right = TreeNode(int(flat_bt[i]))\\n                queue.appendleft(node.right)\\n            i += 1\\n        return ans\\n    # time:  O(n)\\n    # space: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74395,
                "title": "neat-python-solution-in-both-dfs-and-bfs",
                "content": "                  1\\n                /   \\\\\\n               2     3\\n                    / \\\\\\n                   4   5\\nin dfs: serialize result is: 1 2 n n 3 4 n n 5 n n\\nuse 'n'  None node and also use 'n' as the base case of recursion\\nin bfs: serialize result is: 1 2 3 n n 4 5 n n n n \\n\\n\\n        def serialize_dfs(self, root):\\n            if root is None:\\n                return ''\\n            def dfs(root_node):\\n                if root_node is None:\\n                    nodes.append('n')\\n                    return\\n                nodes.append(str(root_node.val))\\n                dfs(root_node.left)\\n                dfs(root_node.right)\\n    \\n            if root is None:\\n                return ''\\n            nodes = []\\n            dfs(root)\\n            return ','.join(nodes)\\n    \\n        def deserialize_dfs(self, data):\\n            \"\"\"Decodes your encoded data to tree.\\n            :type data: str\\n            :rtype: TreeNode\\n            \"\"\"\\n            if len(data) == 0:\\n                return None\\n            nodes = data.split(',')\\n            def dfs():\\n                if nodes[cur_pos[0]] == 'n':\\n                    cur_pos[0] += 1\\n                    return None\\n                root = TreeNode(int(nodes[cur_pos[0]]))\\n                cur_pos[0] += 1\\n                root.left = dfs()\\n                root.right = dfs()\\n                return root\\n            cur_pos = [0]\\n            return dfs()\\n    \\n        def serialize_bfs(self, root):\\n            \"\"\"Encodes a tree to a single string.\\n            :type root: TreeNode\\n            :rtype: str\\n            \"\"\"\\n            if root is None:\\n                return ''\\n            queue = deque()\\n            queue.append(root)\\n            nodes = []\\n            while len(queue) > 0:\\n                cur_node = queue.popleft()\\n                if cur_node is None:\\n                    nodes.append('n')\\n                    continue\\n                else:\\n                    nodes.append(str(cur_node.val))\\n                queue.append(cur_node.left)\\n                queue.append(cur_node.right)\\n            return ','.join(nodes)\\n    \\n    \\n    \\n        def deserialize_bfs(self, data):\\n            \"\"\"Decodes your encoded data to tree.\\n            :type data: str\\n            :rtype: TreeNode\\n            \"\"\"\\n            if len(data) == 0:\\n                return None\\n            nodes = data.split(',')\\n            root_node = TreeNode(int(nodes[0]))\\n            queue = deque()\\n            queue.append(root_node)\\n            cur_pos = 1\\n            while len(queue) > 0:\\n                cur = queue.popleft()\\n                if nodes[cur_pos] != 'n':\\n                    cur.left = TreeNode(int(nodes[cur_pos]))\\n                    queue.append(cur.left)\\n                cur_pos += 1\\n                if nodes[cur_pos] != 'n':\\n                    cur.right = TreeNode(int(nodes[cur_pos]))\\n                    queue.append(cur.right)\\n                cur_pos += 1\\n            return root_node",
                "solutionTags": [
                    "Python",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "                  1\\n                /   \\\\\\n               2     3\\n                    / \\\\\\n                   4   5\\nin dfs: serialize result is: 1 2 n n 3 4 n n 5 n n\\nuse 'n'  None node and also use 'n' as the base case of recursion\\nin bfs: serialize result is: 1 2 3 n n 4 5 n n n n \\n\\n\\n        def serialize_dfs(self, root):\\n            if root is None:\\n                return ''\\n            def dfs(root_node):\\n                if root_node is None:\\n                    nodes.append('n')\\n                    return\\n                nodes.append(str(root_node.val))\\n                dfs(root_node.left)\\n                dfs(root_node.right)\\n    \\n            if root is None:\\n                return ''\\n            nodes = []\\n            dfs(root)\\n            return ','.join(nodes)\\n    \\n        def deserialize_dfs(self, data):\\n            \"\"\"Decodes your encoded data to tree.\\n            :type data: str\\n            :rtype: TreeNode\\n            \"\"\"\\n            if len(data) == 0:\\n                return None\\n            nodes = data.split(',')\\n            def dfs():\\n                if nodes[cur_pos[0]] == 'n':\\n                    cur_pos[0] += 1\\n                    return None\\n                root = TreeNode(int(nodes[cur_pos[0]]))\\n                cur_pos[0] += 1\\n                root.left = dfs()\\n                root.right = dfs()\\n                return root\\n            cur_pos = [0]\\n            return dfs()\\n    \\n        def serialize_bfs(self, root):\\n            \"\"\"Encodes a tree to a single string.\\n            :type root: TreeNode\\n            :rtype: str\\n            \"\"\"\\n            if root is None:\\n                return ''\\n            queue = deque()\\n            queue.append(root)\\n            nodes = []\\n            while len(queue) > 0:\\n                cur_node = queue.popleft()\\n                if cur_node is None:\\n                    nodes.append('n')\\n                    continue\\n                else:\\n                    nodes.append(str(cur_node.val))\\n                queue.append(cur_node.left)\\n                queue.append(cur_node.right)\\n            return ','.join(nodes)\\n    \\n    \\n    \\n        def deserialize_bfs(self, data):\\n            \"\"\"Decodes your encoded data to tree.\\n            :type data: str\\n            :rtype: TreeNode\\n            \"\"\"\\n            if len(data) == 0:\\n                return None\\n            nodes = data.split(',')\\n            root_node = TreeNode(int(nodes[0]))\\n            queue = deque()\\n            queue.append(root_node)\\n            cur_pos = 1\\n            while len(queue) > 0:\\n                cur = queue.popleft()\\n                if nodes[cur_pos] != 'n':\\n                    cur.left = TreeNode(int(nodes[cur_pos]))\\n                    queue.append(cur.left)\\n                cur_pos += 1\\n                if nodes[cur_pos] != 'n':\\n                    cur.right = TreeNode(int(nodes[cur_pos]))\\n                    queue.append(cur.right)\\n                cur_pos += 1\\n            return root_node",
                "codeTag": "Python3"
            },
            {
                "id": 74432,
                "title": "my-simple-java-solution-preorder-traversal-recursive-simple-logic",
                "content": "public class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        serializeHelper(root,result);\\n        return result.toString();\\n    }\\n    \\n    private void serializeHelper(TreeNode root, ArrayList<Integer> result){\\n        if (root == null) {\\n            result.add(null);\\n            return;\\n        }\\n        result.add(root.val);\\n        serializeHelper(root.left,result);\\n        serializeHelper(root.right,result);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] strArray = data.substring(1,data.length()-1).split(\", \");\\n        Deque<String> strList = new LinkedList<String>(Arrays.asList(strArray)); \\n        return deserializeHelper(strList);\\n    }\\n    \\n    private TreeNode deserializeHelper(Deque<String> strList){\\n        if (strList.size() == 0) return null;\\n        String str = strList.pop();\\n        if (str.equals(\"null\")) return null;\\n        TreeNode currentRoot = new TreeNode(Integer.parseInt(str));\\n        currentRoot.left = deserializeHelper(strList);\\n        currentRoot.right = deserializeHelper(strList);\\n        return currentRoot;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "public class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        serializeHelper(root,result);\\n        return result.toString();\\n    }\\n    \\n    private void serializeHelper(TreeNode root, ArrayList<Integer> result){\\n        if (root == null) {\\n            result.add(null);\\n            return;\\n        }\\n        result.add(root.val);\\n        serializeHelper(root.left,result);\\n        serializeHelper(root.right,result);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] strArray = data.substring(1,data.length()-1).split(\", \");\\n        Deque<String> strList = new LinkedList<String>(Arrays.asList(strArray)); \\n        return deserializeHelper(strList);\\n    }\\n    \\n    private TreeNode deserializeHelper(Deque<String> strList){\\n        if (strList.size() == 0) return null;\\n        String str = strList.pop();\\n        if (str.equals(\"null\")) return null;\\n        TreeNode currentRoot = new TreeNode(Integer.parseInt(str));\\n        currentRoot.left = deserializeHelper(strList);\\n        currentRoot.right = deserializeHelper(strList);\\n        return currentRoot;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 1809518,
                "title": "c-using-level-order-traversal-bfs",
                "content": "Serialize and Deserialize Binary Tree -\\n\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL){return \"\";}\\n        string str;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* curr=q.front();\\n            q.pop();\\n            if(curr==NULL)\\n            {\\n                str.append(\"#,\");\\n            }\\n            else\\n            {\\n                str.append(to_string(curr->val)+\\',\\');\\n            }\\n           if(curr!=NULL)\\n           {\\n               q.push(curr->left);\\n               q.push(curr->right);\\n           }\\n        }\\n       return str; \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0){return NULL;}\\n        stringstream ss(data);\\n        string str;\\n        getline(ss,str,\\',\\');\\n        queue<TreeNode*> q;\\n        TreeNode* root = new TreeNode(stoi(str));\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            \\n            getline(ss,str,\\',\\');\\n            if(str==\"#\")\\n            {\\n                curr->left=NULL;\\n            }\\n            else\\n            {\\n                TreeNode* leftNode = new TreeNode(stoi(str));\\n                curr->left = leftNode;\\n                q.push(leftNode);\\n            }\\n            \\n            getline(ss,str,\\',\\');\\n            if(str==\"#\")\\n            {\\n                curr->right = NULL;\\n            }\\n            else\\n            {\\n                TreeNode* rightNode = new TreeNode(stoi(str));\\n                curr->right = rightNode;\\n                q.push(rightNode);\\n            }\\n        }\\n      return root;  \\n    }\\n};\\n```\\n\\n\\nPlease comment if you have any doubt.\\nWill get back to you as soon as possible.\\n**UPVOTE if you find it useful!**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL){return \"\";}\\n        string str;\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* curr=q.front();\\n            q.pop();\\n            if(curr==NULL)\\n            {\\n                str.append(\"#,\");\\n            }\\n            else\\n            {\\n                str.append(to_string(curr->val)+\\',\\');\\n            }\\n           if(curr!=NULL)\\n           {\\n               q.push(curr->left);\\n               q.push(curr->right);\\n           }\\n        }\\n       return str; \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0){return NULL;}\\n        stringstream ss(data);\\n        string str;\\n        getline(ss,str,\\',\\');\\n        queue<TreeNode*> q;\\n        TreeNode* root = new TreeNode(stoi(str));\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            \\n            getline(ss,str,\\',\\');\\n            if(str==\"#\")\\n            {\\n                curr->left=NULL;\\n            }\\n            else\\n            {\\n                TreeNode* leftNode = new TreeNode(stoi(str));\\n                curr->left = leftNode;\\n                q.push(leftNode);\\n            }\\n            \\n            getline(ss,str,\\',\\');\\n            if(str==\"#\")\\n            {\\n                curr->right = NULL;\\n            }\\n            else\\n            {\\n                TreeNode* rightNode = new TreeNode(stoi(str));\\n                curr->right = rightNode;\\n                q.push(rightNode);\\n            }\\n        }\\n      return root;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74385,
                "title": "leetcode-way-in-c-and-python",
                "content": "C++\\n\\n    class Codec {\\n    public:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        deque<TreeNode*> nodes{root};\\n        string ans=\"\";\\n        while(!nodes.empty()){\\n            TreeNode* head=nodes.front();\\n            nodes.pop_front();\\n            if(head!=NULL){\\n                ans+= to_string(head->val)+\" \";\\n                nodes.push_back(head->left);\\n                nodes.push_back(head->right);\\n            }\\n            else{\\n                ans+=\"null \";\\n            }\\n        }\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        vector<TreeNode *> nodes;\\n        string tmp;\\n        while(in>>tmp){\\n            if(tmp!=\"null\"){\\n                nodes.push_back(new TreeNode(stoi(tmp)));\\n            }\\n            else{\\n                nodes.push_back(NULL);\\n            }\\n        }\\n        int pos=0, offset=1;\\n        while(offset < nodes.size()){\\n            if(nodes[pos]!=NULL){\\n                nodes[pos]->left=nodes[offset++];\\n                if(offset<nodes.size()) nodes[pos]->right=nodes[offset++];\\n            }\\n            pos+=1;\\n        }\\n        return nodes[0];\\n    }\\n    };\\n\\nPython\\n\\n    class Codec:\\n    def serialize(self, root):\\n        data = []\\n        node_queue = [root]\\n        start = 0\\n        while start < len(node_queue):\\n            node = node_queue[start]\\n            start += 1\\n            if node:\\n                data.append(str(node.val))\\n                node_queue.append(node.left)\\n                node_queue.append(node.right)\\n            else:\\n                data.append(\"null\")\\n        # Remove the tail null node.\\n        while data and data[-1] == \"null\":\\n            del data[-1]\\n        return \",\".join(data)\\n\\n    def deserialize(self, data):\\n        if not data:\\n            return None\\n\\n        # Get all the nodes.\\n        data_list = data.split(\",\")\\n        length = len(data_list)\\n        node_list = [0] * length\\n        for i in range(length):\\n            if data_list[i] == \"null\":\\n                node_list[i] = None\\n            else:\\n                node_list[i] = TreeNode(int(data_list[i]))\\n\\n        # Build the tree.\\n        offset = 1\\n        cur_pos = 0\\n        while offset < length:\\n            if node_list[cur_pos]:\\n                node_list[cur_pos].left = node_list[offset]\\n                offset += 1\\n                if offset < length:\\n                    node_list[cur_pos].right = node_list[offset]\\n                    offset += 1\\n                else:\\n                    break\\n            else:\\n                pass\\n            cur_pos += 1\\n\\n        return node_list[0]",
                "solutionTags": [
                    "C++"
                ],
                "code": "C++\\n\\n    class Codec {\\n    public:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        deque<TreeNode*> nodes{root};\\n        string ans=\"\";\\n        while(!nodes.empty()){\\n            TreeNode* head=nodes.front();\\n            nodes.pop_front();\\n            if(head!=NULL){\\n                ans+= to_string(head->val)+\" \";\\n                nodes.push_back(head->left);\\n                nodes.push_back(head->right);\\n            }\\n            else{\\n                ans+=\"null \";\\n            }\\n        }\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        vector<TreeNode *> nodes;\\n        string tmp;\\n        while(in>>tmp){\\n            if(tmp!=\"null\"){\\n                nodes.push_back(new TreeNode(stoi(tmp)));\\n            }\\n            else{\\n                nodes.push_back(NULL);\\n            }\\n        }\\n        int pos=0, offset=1;\\n        while(offset < nodes.size()){\\n            if(nodes[pos]!=NULL){\\n                nodes[pos]->left=nodes[offset++];\\n                if(offset<nodes.size()) nodes[pos]->right=nodes[offset++];\\n            }\\n            pos+=1;\\n        }\\n        return nodes[0];\\n    }\\n    };\\n\\nPython\\n\\n    class Codec:\\n    def serialize(self, root):\\n        data = []\\n        node_queue = [root]\\n        start = 0\\n        while start < len(node_queue):\\n            node = node_queue[start]\\n            start += 1\\n            if node:\\n                data.append(str(node.val))\\n                node_queue.append(node.left)\\n                node_queue.append(node.right)\\n            else:\\n                data.append(\"null\")\\n        # Remove the tail null node.\\n        while data and data[-1] == \"null\":\\n            del data[-1]\\n        return \",\".join(data)\\n\\n    def deserialize(self, data):\\n        if not data:\\n            return None\\n\\n        # Get all the nodes.\\n        data_list = data.split(\",\")\\n        length = len(data_list)\\n        node_list = [0] * length\\n        for i in range(length):\\n            if data_list[i] == \"null\":\\n                node_list[i] = None\\n            else:\\n                node_list[i] = TreeNode(int(data_list[i]))\\n\\n        # Build the tree.\\n        offset = 1\\n        cur_pos = 0\\n        while offset < length:\\n            if node_list[cur_pos]:\\n                node_list[cur_pos].left = node_list[offset]\\n                offset += 1\\n                if offset < length:\\n                    node_list[cur_pos].right = node_list[offset]\\n                    offset += 1\\n                else:\\n                    break\\n            else:\\n                pass\\n            cur_pos += 1\\n\\n        return node_list[0]",
                "codeTag": "Java"
            },
            {
                "id": 231885,
                "title": "c-iterative-level-order",
                "content": "I saw many clean recursive codes, especially [this one](https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74259/Recursive-preorder-Python-and-C%2B%2B-O(n)) written by @StefanPochmann. So I wrote an iterative one below.\\n\\n```cpp\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string ans;\\n        queue<TreeNode*> todo;\\n        todo.push(root);\\n        while (!todo.empty()) {\\n            TreeNode* node = todo.front();\\n            todo.pop();\\n            ans += node ? to_string(node -> val) + \" \" : \"# \";\\n            if (node) {\\n                todo.push(node -> left);\\n                todo.push(node -> right);\\n            }\\n        }\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        string val;\\n        in >> val;\\n        if (val == \"#\") {\\n            return NULL;\\n        }\\n        TreeNode* root = new TreeNode(stoi(val));\\n        queue<TreeNode*> todo;\\n        todo.push(root);\\n        while (!todo.empty()) {\\n            TreeNode* node = todo.front();\\n            todo.pop();\\n            in >> val;\\n            if (val != \"#\") {\\n                node -> left = new TreeNode(stoi(val));\\n                todo.push(node -> left);\\n            }\\n            in >> val;\\n            if (val != \"#\") {\\n                node -> right = new TreeNode(stoi(val));\\n                todo.push(node -> right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string ans;\\n        queue<TreeNode*> todo;\\n        todo.push(root);\\n        while (!todo.empty()) {\\n            TreeNode* node = todo.front();\\n            todo.pop();\\n            ans += node ? to_string(node -> val) + \" \" : \"# \";\\n            if (node) {\\n                todo.push(node -> left);\\n                todo.push(node -> right);\\n            }\\n        }\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        string val;\\n        in >> val;\\n        if (val == \"#\") {\\n            return NULL;\\n        }\\n        TreeNode* root = new TreeNode(stoi(val));\\n        queue<TreeNode*> todo;\\n        todo.push(root);\\n        while (!todo.empty()) {\\n            TreeNode* node = todo.front();\\n            todo.pop();\\n            in >> val;\\n            if (val != \"#\") {\\n                node -> left = new TreeNode(stoi(val));\\n                todo.push(node -> left);\\n            }\\n            in >> val;\\n            if (val != \"#\") {\\n                node -> right = new TreeNode(stoi(val));\\n                todo.push(node -> right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74279,
                "title": "using-the-judge-s-code-python",
                "content": "Just for fun. Recently I noticed that we have access to some judge code.\\n```\\nclass Codec:\\n    serialize = precompiled.__serializer__.__Serializer__().serialize\\n    deserialize = precompiled.__deserializer__.__Deserializer__().to_tree_node\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec:\\n    serialize = precompiled.__serializer__.__Serializer__().serialize\\n    deserialize = precompiled.__deserializer__.__Deserializer__().to_tree_node\\n```",
                "codeTag": "Java"
            },
            {
                "id": 212059,
                "title": "python-solution",
                "content": "Method 1: Use preorder traversal to encode. Time complexity for both `serialize` and `deserialize` are `O(n)`, where `n` is the number of nodes in the binary tree.\\n\\nImplementation 1: recursive `deserialize`.\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        def dfs(root):\\n            if not root:\\n                res.append(\"None,\")\\n                return \\n            res.append(str(root.val)+\",\")\\n            dfs(root.left)\\n            dfs(root.right)\\n            \\n        res = []\\n        dfs(root)\\n        return \"\".join(res)\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        def helper(q):\\n            if q[0] == \"None\":\\n                q.popleft()\\n                return\\n            root = TreeNode(q.popleft())\\n            l = helper(q)\\n            r = helper(q)\\n            root.left = l\\n            root.right = r\\n            return root\\n        \\n        lst = data.split(\",\")\\n        q = collections.deque(lst)\\n        return helper(q)\\n```\\nImplementation 2: iterative `deserialize`.\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        def dfs(root):\\n            if not root:\\n                res.append(\"None,\")\\n                return\\n            res.append(str(root.val)+\",\")\\n            dfs(root.left)\\n            dfs(root.right)\\n        res = []\\n        dfs(root)\\n        return \"\".join(res)\\n       \\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        q = collections.deque(data.split(\",\"))\\n        q.pop()\\n        stack = []\\n        head = None\\n        right = False\\n        while q:\\n            u = q.popleft()\\n            if not head:\\n                if u == \"None\":\\n                    return\\n                head = TreeNode(u)\\n                stack.append(head)\\n                trav = head\\n            else:\\n                if u != \"None\":\\n                    node = TreeNode(u)\\n                    if not right:\\n                        trav.left = node\\n                    else:\\n                        trav.right = node\\n                        right = False\\n                    stack.append(node)\\n                    trav = node\\n                else:\\n                    if stack:\\n                        trav = stack.pop()\\n                        right = True\\n        if head:\\n            return head\\n```\\n\\nMethod 2: Use level order traversal (BFS) to encode. Time complexity for both `serialize` and `deserialize` are `O(n)`, where `n` is the number of nodes in the binary tree.\\n\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return \"\"\\n        q = collections.deque([root])\\n        res = [str(root.val)+\",\"]\\n        while q:\\n            u = q.popleft()\\n            if u.left:\\n                res.append(str(u.left.val)+\",\")\\n                q.append(u.left)\\n            else:\\n                res.append(\"None,\")\\n            if u.right:\\n                res.append(str(u.right.val)+\",\")\\n                q.append(u.right)\\n            else:\\n                res.append(\"None,\")\\n        return \"\".join(res)\\n                     \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        lst = data.split(\",\")\\n        lst.pop()\\n        q = collections.deque(lst)\\n        head = None\\n        nodeq = collections.deque([])\\n        while q:\\n            if not head:\\n                u = q.popleft()\\n                head = TreeNode(u)\\n                nodeq.appendleft(head)\\n            else:\\n                l = q.popleft()\\n                r = q.popleft()\\n                l = TreeNode(l) if l != \"None\" else None\\n                r = TreeNode(r) if r != \"None\" else None\\n                tmp = nodeq.popleft()\\n                if l:\\n                    tmp.left = l\\n                    nodeq.append(l)\\n                if r:\\n                    tmp.right = r\\n                    nodeq.append(r)\\n        return head\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        def dfs(root):\\n            if not root:\\n                res.append(\"None,\")\\n                return \\n            res.append(str(root.val)+\",\")\\n            dfs(root.left)\\n            dfs(root.right)\\n            \\n        res = []\\n        dfs(root)\\n        return \"\".join(res)\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        def helper(q):\\n            if q[0] == \"None\":\\n                q.popleft()\\n                return\\n            root = TreeNode(q.popleft())\\n            l = helper(q)\\n            r = helper(q)\\n            root.left = l\\n            root.right = r\\n            return root\\n        \\n        lst = data.split(\",\")\\n        q = collections.deque(lst)\\n        return helper(q)\\n```\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        def dfs(root):\\n            if not root:\\n                res.append(\"None,\")\\n                return\\n            res.append(str(root.val)+\",\")\\n            dfs(root.left)\\n            dfs(root.right)\\n        res = []\\n        dfs(root)\\n        return \"\".join(res)\\n       \\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        q = collections.deque(data.split(\",\"))\\n        q.pop()\\n        stack = []\\n        head = None\\n        right = False\\n        while q:\\n            u = q.popleft()\\n            if not head:\\n                if u == \"None\":\\n                    return\\n                head = TreeNode(u)\\n                stack.append(head)\\n                trav = head\\n            else:\\n                if u != \"None\":\\n                    node = TreeNode(u)\\n                    if not right:\\n                        trav.left = node\\n                    else:\\n                        trav.right = node\\n                        right = False\\n                    stack.append(node)\\n                    trav = node\\n                else:\\n                    if stack:\\n                        trav = stack.pop()\\n                        right = True\\n        if head:\\n            return head\\n```\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return \"\"\\n        q = collections.deque([root])\\n        res = [str(root.val)+\",\"]\\n        while q:\\n            u = q.popleft()\\n            if u.left:\\n                res.append(str(u.left.val)+\",\")\\n                q.append(u.left)\\n            else:\\n                res.append(\"None,\")\\n            if u.right:\\n                res.append(str(u.right.val)+\",\")\\n                q.append(u.right)\\n            else:\\n                res.append(\"None,\")\\n        return \"\".join(res)\\n                     \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        lst = data.split(\",\")\\n        lst.pop()\\n        q = collections.deque(lst)\\n        head = None\\n        nodeq = collections.deque([])\\n        while q:\\n            if not head:\\n                u = q.popleft()\\n                head = TreeNode(u)\\n                nodeq.appendleft(head)\\n            else:\\n                l = q.popleft()\\n                r = q.popleft()\\n                l = TreeNode(l) if l != \"None\" else None\\n                r = TreeNode(r) if r != \"None\" else None\\n                tmp = nodeq.popleft()\\n                if l:\\n                    tmp.left = l\\n                    nodeq.append(l)\\n                if r:\\n                    tmp.right = r\\n                    nodeq.append(r)\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1409286,
                "title": "easy-to-understand-recursive-in-python3",
                "content": "\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root:\\n            return \"\"\\n\\n        return f\"{root.val},{self.serialize(root.left)},{self.serialize(root.right)}\"\\n\\n\\n    def deserialize(self, data: str):\\n        if not data:\\n            return None\\n\\n        return self.deserialize_list(data.split(\",\"))\\n\\n\\n    def deserialize_list(self, nums: List[str]):\\n        val = nums.pop(0)\\n        if not val:\\n            return None\\n\\n        root = TreeNode(val)\\n        root.left = self.deserialize_list(nums)\\n        root.right = self.deserialize_list(nums)\\n\\n        return root\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root:\\n            return \"\"\\n\\n        return f\"{root.val},{self.serialize(root.left)},{self.serialize(root.right)}\"\\n\\n\\n    def deserialize(self, data: str):\\n        if not data:\\n            return None\\n\\n        return self.deserialize_list(data.split(\",\"))\\n\\n\\n    def deserialize_list(self, nums: List[str]):\\n        val = nums.pop(0)\\n        if not val:\\n            return None\\n\\n        root = TreeNode(val)\\n        root.left = self.deserialize_list(nums)\\n        root.right = self.deserialize_list(nums)\\n\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74304,
                "title": "javascript-solution-if-anyone-is-interested",
                "content": "    /**\\n     * Definition for a binary tree node.\\n     * function TreeNode(val) {\\n     *     this.val = val;\\n     *     this.left = this.right = null;\\n     * }\\n     */\\n    \\n    /**\\n     * Encodes a tree to a single string.\\n     *\\n     * @param {TreeNode} root\\n     * @return {string}\\n     */\\n    var serialize = function(root) {\\n        if (root === null) {\\n            return '';\\n        }\\n        var result = [];\\n        var queue = [root];\\n        \\n        while (queue.length > 0) {\\n            var node = queue.shift();\\n            \\n            if (node === null) {\\n                result.push('null');\\n                continue;\\n            }\\n            result.push(node.val);\\n            queue.push(node.left);\\n            queue.push(node.right);\\n        }\\n        \\n        // Remove the trailing nulls\\n        loop: for (var i=result.length - 1; i >= 0 ; i--) {\\n            if (result[i] === 'null') {\\n                result.splice(i, 1);\\n            }\\n            else {\\n                break loop;\\n            }\\n        }\\n        \\n        return result.toString();\\n        \\n    };\\n    \\n    /**\\n     * Decodes your encoded data to tree.\\n     *\\n     * @param {string} data\\n     * @return {TreeNode}\\n     */\\n    var deserialize = function(data) {\\n        if (data === '') {\\n            return null;\\n        }\\n        var values = data.split(',');\\n        var root = new TreeNode(parseInt(values[0]));\\n        var queue = [root];\\n        for (var i=1; i < values.length; i++) {\\n            var parent = queue.shift();\\n            \\n            if (values[i] !== 'null') {\\n                var left = new TreeNode(parseInt(values[i]));\\n                parent.left  = left;\\n                queue.push(left);\\n            }\\n            if (values[++i] !== 'null' && i !== values.length) {\\n                var right = new TreeNode(parseInt(values[i]));\\n                parent.right = right;\\n                queue.push(right);\\n            }\\n        }\\n        \\n        return root;\\n        \\n    };\\n    \\n    /**\\n     * Your functions will be called as such:\\n     * deserialize(serialize(root));\\n     */",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    /**\\n     * Definition for a binary tree node.\\n     * function TreeNode(val) {\\n     *     this.val = val;\\n     *     this.left = this.right = null;\\n     * }\\n     */\\n    \\n    /**\\n     * Encodes a tree to a single string.\\n     *\\n     * @param {TreeNode} root\\n     * @return {string}\\n     */\\n    var serialize = function(root) {\\n        if (root === null) {\\n            return '';\\n        }\\n        var result = [];\\n        var queue = [root];\\n        \\n        while (queue.length > 0) {\\n            var node = queue.shift();\\n            \\n            if (node === null) {\\n                result.push('null');\\n                continue;\\n            }\\n            result.push(node.val);\\n            queue.push(node.left);\\n            queue.push(node.right);\\n        }\\n        \\n        // Remove the trailing nulls\\n        loop: for (var i=result.length - 1; i >= 0 ; i--) {\\n            if (result[i] === 'null') {\\n                result.splice(i, 1);\\n            }\\n            else {\\n                break loop;\\n            }\\n        }\\n        \\n        return result.toString();\\n        \\n    };\\n    \\n    /**\\n     * Decodes your encoded data to tree.\\n     *\\n     * @param {string} data\\n     * @return {TreeNode}\\n     */\\n    var deserialize = function(data) {\\n        if (data === '') {\\n            return null;\\n        }\\n        var values = data.split(',');\\n        var root = new TreeNode(parseInt(values[0]));\\n        var queue = [root];\\n        for (var i=1; i < values.length; i++) {\\n            var parent = queue.shift();\\n            \\n            if (values[i] !== 'null') {\\n                var left = new TreeNode(parseInt(values[i]));\\n                parent.left  = left;\\n                queue.push(left);\\n            }\\n            if (values[++i] !== 'null' && i !== values.length) {\\n                var right = new TreeNode(parseInt(values[i]));\\n                parent.right = right;\\n                queue.push(right);\\n            }\\n        }\\n        \\n        return root;\\n        \\n    };\\n    \\n    /**\\n     * Your functions will be called as such:\\n     * deserialize(serialize(root));\\n     */",
                "codeTag": "Unknown"
            },
            {
                "id": 74434,
                "title": "python-preorder-recursive-traversal",
                "content": "\\n    def serialize(self, root):\\n        preorder = ''\\n        if not root:\\n            preorder += ',None'\\n            return preorder\\n        preorder += ','+str(root.val)\\n        preorder += self.serialize(root.left)\\n        preorder += self.serialize(root.right)\\n        return preorder\\n\\n    def deserialize(self, encode_data):\\n        pos = -1\\n        data = encode_data[1:].split(',')\\n        for i in xrange(len(data)):\\n            if data[i] == 'None':\\n                data[i] = None\\n            else:\\n                data[i] = int(data[i])\\n        root, count = self.buildTree(data, pos)\\n        return root\\n        \\n    def buildTree(self, data, pos):\\n        pos += 1\\n        if pos >= len(data) or data[pos]==None:\\n            return None, pos\\n            \\n        root = TreeNode(data[pos])\\n        root.left, pos = self.buildTree(data, pos)\\n        root.right, pos = self.buildTree(data, pos)\\n        return root, pos",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "\\n    def serialize(self, root):\\n        preorder = ''\\n        if not root:\\n            preorder += ',None'\\n            return preorder\\n        preorder += ','+str(root.val)\\n        preorder += self.serialize(root.left)\\n        preorder += self.serialize(root.right)\\n        return preorder\\n\\n    def deserialize(self, encode_data):\\n        pos = -1\\n        data = encode_data[1:].split(',')\\n        for i in xrange(len(data)):\\n            if data[i] == 'None':\\n                data[i] = None\\n            else:\\n                data[i] = int(data[i])\\n        root, count = self.buildTree(data, pos)\\n        return root\\n        \\n    def buildTree(self, data, pos):\\n        pos += 1\\n        if pos >= len(data) or data[pos]==None:\\n            return None, pos\\n            \\n        root = TreeNode(data[pos])\\n        root.left, pos = self.buildTree(data, pos)\\n        root.right, pos = self.buildTree(data, pos)\\n        return root, pos",
                "codeTag": "Python3"
            },
            {
                "id": 411608,
                "title": "javasscript-bfs-dfs-solution",
                "content": "#### BFS Solution Using Stack\\n``` javascript\\nvar serializeBFS = function(root) {\\n    let stack = [], serialize = [];\\n    if (root == null) return [];\\n    stack.push(root);\\n    while(stack.length > 0) {\\n        let node = stack.shift();\\n        serialize.push(node?node.val:null);\\n        if (node != null) {\\n            stack.push(node.left);\\n            stack.push(node.right);\\n        }\\n    }\\n    return serialize;\\n};\\n\\nvar deserializeBFS = function(data) {\\n    if (data[0] == null) return null;\\n    let node = new TreeNode(data.shift());\\n    let stack = [node];\\n    while(stack.length > 0) {\\n        let node = stack.shift();\\n        left = data.shift();\\n        right = data.shift();\\n        node.left = (left==null)?null:new TreeNode(left);\\n        node.right = (right==null)?null:new TreeNode(right);\\n        if (node.left != null) stack.push(node.left);\\n        if (node.right != null) stack.push(node.right);\\n    }\\n    return node;\\n};\\n```\\n\\n#### DFS Solution Using Recursion\\n``` javascript\\nvar serializeDFS = function(root, str) {\\n    if (root == null) {\\n        return str+=\"*,\";\\n    } else {\\n        str+=root.val+\",\";\\n        str = serializeDFS(root.left, str);\\n        str = serializeDFS(root.right, str);\\n    }\\n    return str;\\n};\\n\\n\\nvar deserializeDFS = function(data) {\\n    let nodes = data.split(\\',\\');\\n\\n    var recur = function() {\\n        let next = nodes.shift();\\n        if (next == \"*\") {\\n            return null;\\n        } else {\\n            let node = new TreeNode(next);\\n            node.left = recur();\\n            node.right = recur();\\n            return node;\\n        }\\n    }\\n\\n    return recur();\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` javascript\\nvar serializeBFS = function(root) {\\n    let stack = [], serialize = [];\\n    if (root == null) return [];\\n    stack.push(root);\\n    while(stack.length > 0) {\\n        let node = stack.shift();\\n        serialize.push(node?node.val:null);\\n        if (node != null) {\\n            stack.push(node.left);\\n            stack.push(node.right);\\n        }\\n    }\\n    return serialize;\\n};\\n\\nvar deserializeBFS = function(data) {\\n    if (data[0] == null) return null;\\n    let node = new TreeNode(data.shift());\\n    let stack = [node];\\n    while(stack.length > 0) {\\n        let node = stack.shift();\\n        left = data.shift();\\n        right = data.shift();\\n        node.left = (left==null)?null:new TreeNode(left);\\n        node.right = (right==null)?null:new TreeNode(right);\\n        if (node.left != null) stack.push(node.left);\\n        if (node.right != null) stack.push(node.right);\\n    }\\n    return node;\\n};\\n```\n``` javascript\\nvar serializeDFS = function(root, str) {\\n    if (root == null) {\\n        return str+=\"*,\";\\n    } else {\\n        str+=root.val+\",\";\\n        str = serializeDFS(root.left, str);\\n        str = serializeDFS(root.right, str);\\n    }\\n    return str;\\n};\\n\\n\\nvar deserializeDFS = function(data) {\\n    let nodes = data.split(\\',\\');\\n\\n    var recur = function() {\\n        let next = nodes.shift();\\n        if (next == \"*\") {\\n            return null;\\n        } else {\\n            let node = new TreeNode(next);\\n            node.left = recur();\\n            node.right = recur();\\n            return node;\\n        }\\n    }\\n\\n    return recur();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2660298,
                "title": "simple-c-solution-using-bfs-very-easy",
                "content": "```\\n string serialize(TreeNode* root) {\\n        if(root == NULL) {\\n            return \"\";\\n        }\\n        \\n        string res = \"\";\\n        queue<TreeNode *> q;\\n        q.push(root);\\n        \\n        while (!q.empty())\\n        {\\n            auto curr = q.front();\\n            q.pop();\\n\\n            if (curr == NULL)\\n            {\\n                res.append(\"#,\");\\n            }\\n\\n            else\\n            {\\n                res += to_string(curr->val)+\\',\\';\\n                if (curr->left)\\n                {\\n                    q.push(curr->left);\\n                }\\n                else\\n                {\\n                    q.push(NULL);\\n                }\\n                if (curr->right)\\n                {\\n                    q.push(curr->right);\\n                }\\n                else\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if (data.size() == 0)\\n        {\\n            return NULL;\\n        }\\n        stringstream ss(data);\\n        string str;\\n        getline(ss,str, \\',\\');\\n        \\n        TreeNode *ans;\\n        queue<TreeNode *> q;\\n        \\n        // Making the first character as the root of the tree.\\n        ans = new TreeNode(stoi(str));\\n        q.push(ans);\\n        \\n        // Recreating the tree from the serialize string.\\n        while (!q.empty())\\n        {\\n            auto curr = q.front();\\n            q.pop();\\n\\n            getline(ss,str,\\',\\'); // helps us to fetch a character before \\',\\'\\n            if (str == \"#\")\\n            {\\n                curr->left = NULL;\\n            }\\n            else\\n            {\\n                curr->left = new TreeNode(stoi(str));\\n                q.push(curr->left);\\n            }\\n            \\n            getline(ss,str,\\',\\');\\n            if (str == \"#\")\\n            {\\n                curr->right = NULL;\\n            }\\n            else\\n            {\\n                curr->right = new TreeNode(stoi(str));\\n                q.push(curr->right);\\n            }\\n        }\\n        return ans;        \\n    }\\n```\\n\\nTime Complexity :- **O(N)**\\nSpace Complexity :- **O(N)**\\n\\n**Please upvote , if you like the solution. \\nSuch that ,  the solution can reach out to more people.**\\n\\nThank you \\uD83D\\uDE0A",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Recursion",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\n string serialize(TreeNode* root) {\\n        if(root == NULL) {\\n            return \"\";\\n        }\\n        \\n        string res = \"\";\\n        queue<TreeNode *> q;\\n        q.push(root);\\n        \\n        while (!q.empty())\\n        {\\n            auto curr = q.front();\\n            q.pop();\\n\\n            if (curr == NULL)\\n            {\\n                res.append(\"#,\");\\n            }\\n\\n            else\\n            {\\n                res += to_string(curr->val)+\\',\\';\\n                if (curr->left)\\n                {\\n                    q.push(curr->left);\\n                }\\n                else\\n                {\\n                    q.push(NULL);\\n                }\\n                if (curr->right)\\n                {\\n                    q.push(curr->right);\\n                }\\n                else\\n                {\\n                    q.push(NULL);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if (data.size() == 0)\\n        {\\n            return NULL;\\n        }\\n        stringstream ss(data);\\n        string str;\\n        getline(ss,str, \\',\\');\\n        \\n        TreeNode *ans;\\n        queue<TreeNode *> q;\\n        \\n        // Making the first character as the root of the tree.\\n        ans = new TreeNode(stoi(str));\\n        q.push(ans);\\n        \\n        // Recreating the tree from the serialize string.\\n        while (!q.empty())\\n        {\\n            auto curr = q.front();\\n            q.pop();\\n\\n            getline(ss,str,\\',\\'); // helps us to fetch a character before \\',\\'\\n            if (str == \"#\")\\n            {\\n                curr->left = NULL;\\n            }\\n            else\\n            {\\n                curr->left = new TreeNode(stoi(str));\\n                q.push(curr->left);\\n            }\\n            \\n            getline(ss,str,\\',\\');\\n            if (str == \"#\")\\n            {\\n                curr->right = NULL;\\n            }\\n            else\\n            {\\n                curr->right = new TreeNode(stoi(str));\\n                q.push(curr->right);\\n            }\\n        }\\n        return ans;        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1847847,
                "title": "golang-bfs-solution",
                "content": "```\\ntype Codec struct {\\n}\\n\\nfunc Constructor() Codec {\\n    return Codec{}\\n}\\n\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    var queue []*TreeNode\\n\\n\\tenqueue(&queue, root)\\n\\n\\tvar result string\\n\\n\\tfor len(queue) > 0 {\\n\\t\\tdequeuedElement := dequeue(&queue)\\n\\n\\t\\tif dequeuedElement != nil {\\n\\t\\t\\tresult = result + fmt.Sprintf(\"%v\", dequeuedElement.Val) + \",\"\\n\\t\\t\\tenqueue(&queue, dequeuedElement.Left)\\n\\t\\t\\tenqueue(&queue, dequeuedElement.Right)\\n\\t\\t} else {\\n\\t\\t\\tresult = result + \"nil\" + \",\"\\n\\t\\t}\\n\\t}\\n    \\n\\treturn result[:len(result)-1]\\n}\\n\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    dataArr := strings.Split(data, \",\")\\n\\n\\tvar result []*TreeNode\\n\\n\\tfor _, num := range dataArr {\\n\\t\\tif num == \"nil\" {\\n\\t\\t\\tresult = append(result, nil)\\n\\t\\t} else {\\n\\t\\t\\tresult = append(result, &TreeNode{\\n\\t\\t\\t\\tVal: toInt(num),\\n\\t\\t\\t})\\n\\t\\t}\\n\\t}\\n\\n\\tbegin := 0\\n\\n\\tfor _, node := range result {\\n\\t\\tif node != nil {\\n\\t\\t\\tleft := 2 * begin + 1\\n\\t\\t\\tright := 2 * begin + 2\\n\\n\\t\\t\\tif left < len(result) {\\n\\t\\t\\t\\tnode.Left = result[left]\\n\\t\\t\\t}\\n\\n\\t\\t\\tif right < len(result) {\\n\\t\\t\\t\\tnode.Right = result[right]\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tbegin ++\\n\\t\\t}\\n\\t}\\n\\n\\treturn result[0]\\n}\\n\\nfunc enqueue(queue *[]*TreeNode, newItem *TreeNode) {\\n\\tif queue == nil {\\n\\t\\tpanic(\"nil pointer\")\\n\\t}\\n\\n\\t*queue = append(*queue, newItem)\\n}\\n\\nfunc dequeue(queue *[]*TreeNode) *TreeNode {\\n\\tif queue == nil {\\n\\t\\tpanic(\"nil pointer\")\\n\\t}\\n\\n\\tif len(*queue) == 0 {\\n\\t\\tpanic(\"empty queue\")\\n\\t}\\n\\n\\tdequeuedElement := (*queue)[0]\\n\\n\\t*queue = (*queue)[1:len(*queue)]\\n\\n\\treturn dequeuedElement\\n}\\n\\nfunc toInt(s string) int {\\n\\tvalue, err := strconv.Atoi(s)\\n\\n\\tif err != nil {\\n\\t\\tpanic(err)\\n\\t}\\n\\n\\treturn value\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Codec struct {\\n}\\n\\nfunc Constructor() Codec {\\n    return Codec{}\\n}\\n\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    var queue []*TreeNode\\n\\n\\tenqueue(&queue, root)\\n\\n\\tvar result string\\n\\n\\tfor len(queue) > 0 {\\n\\t\\tdequeuedElement := dequeue(&queue)\\n\\n\\t\\tif dequeuedElement != nil {\\n\\t\\t\\tresult = result + fmt.Sprintf(\"%v\", dequeuedElement.Val) + \",\"\\n\\t\\t\\tenqueue(&queue, dequeuedElement.Left)\\n\\t\\t\\tenqueue(&queue, dequeuedElement.Right)\\n\\t\\t} else {\\n\\t\\t\\tresult = result + \"nil\" + \",\"\\n\\t\\t}\\n\\t}\\n    \\n\\treturn result[:len(result)-1]\\n}\\n\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    dataArr := strings.Split(data, \",\")\\n\\n\\tvar result []*TreeNode\\n\\n\\tfor _, num := range dataArr {\\n\\t\\tif num == \"nil\" {\\n\\t\\t\\tresult = append(result, nil)\\n\\t\\t} else {\\n\\t\\t\\tresult = append(result, &TreeNode{\\n\\t\\t\\t\\tVal: toInt(num),\\n\\t\\t\\t})\\n\\t\\t}\\n\\t}\\n\\n\\tbegin := 0\\n\\n\\tfor _, node := range result {\\n\\t\\tif node != nil {\\n\\t\\t\\tleft := 2 * begin + 1\\n\\t\\t\\tright := 2 * begin + 2\\n\\n\\t\\t\\tif left < len(result) {\\n\\t\\t\\t\\tnode.Left = result[left]\\n\\t\\t\\t}\\n\\n\\t\\t\\tif right < len(result) {\\n\\t\\t\\t\\tnode.Right = result[right]\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tbegin ++\\n\\t\\t}\\n\\t}\\n\\n\\treturn result[0]\\n}\\n\\nfunc enqueue(queue *[]*TreeNode, newItem *TreeNode) {\\n\\tif queue == nil {\\n\\t\\tpanic(\"nil pointer\")\\n\\t}\\n\\n\\t*queue = append(*queue, newItem)\\n}\\n\\nfunc dequeue(queue *[]*TreeNode) *TreeNode {\\n\\tif queue == nil {\\n\\t\\tpanic(\"nil pointer\")\\n\\t}\\n\\n\\tif len(*queue) == 0 {\\n\\t\\tpanic(\"empty queue\")\\n\\t}\\n\\n\\tdequeuedElement := (*queue)[0]\\n\\n\\t*queue = (*queue)[1:len(*queue)]\\n\\n\\treturn dequeuedElement\\n}\\n\\nfunc toInt(s string) int {\\n\\tvalue, err := strconv.Atoi(s)\\n\\n\\tif err != nil {\\n\\t\\tpanic(err)\\n\\t}\\n\\n\\treturn value\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 841712,
                "title": "python-bfs-very-simple-and-straightforward",
                "content": "```\\n    def serialize(self, root):\\n        if not root: return []\\n        data = []\\n        # use deque for fast popleft / bfs traversal \\n        queue = deque([root])\\n        while queue:\\n            node = queue.popleft()\\n            if node: \\n                data.append(node.val)\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            else:\\n                data.append(\\'#\\')\\n        #remove trailing \\'#\\'\\n        while data[-1] == \\'#\\':\\n            data.pop()\\n        return data\\n    \\n    def deserialize(self, data):\\n        if not data: return []\\n        root = TreeNode(data[0])\\n        i = 1\\n        queue = deque([root])\\n        while queue and i <= len(data) -1:\\n            node = queue.popleft()\\n            if data[i] != \\'#\\':\\n                left = TreeNode(data[i])\\n                node.left = left\\n                queue.append(left)\\n            i += 1\\n            if i > len(data)-1:\\n                break\\n            if data[i] != \\'#\\':\\n                right = TreeNode(data[i])\\n                node.right = right\\n                queue.append(right)\\n            i += 1\\n        return root       \\n```\\nIf you like this explanation, please consider giving it a star on my [github](https://github.com/bwiens/leetcode-python). Means a lot to me.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def serialize(self, root):\\n        if not root: return []\\n        data = []\\n        # use deque for fast popleft / bfs traversal \\n        queue = deque([root])\\n        while queue:\\n            node = queue.popleft()\\n            if node: \\n                data.append(node.val)\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            else:\\n                data.append(\\'#\\')\\n        #remove trailing \\'#\\'\\n        while data[-1] == \\'#\\':\\n            data.pop()\\n        return data\\n    \\n    def deserialize(self, data):\\n        if not data: return []\\n        root = TreeNode(data[0])\\n        i = 1\\n        queue = deque([root])\\n        while queue and i <= len(data) -1:\\n            node = queue.popleft()\\n            if data[i] != \\'#\\':\\n                left = TreeNode(data[i])\\n                node.left = left\\n                queue.append(left)\\n            i += 1\\n            if i > len(data)-1:\\n                break\\n            if data[i] != \\'#\\':\\n                right = TreeNode(data[i])\\n                node.right = right\\n                queue.append(right)\\n            i += 1\\n        return root       \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3050449,
                "title": "easy-solution-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    \\n    string serialize(TreeNode* root) {\\n         if(!root)\\n            return \"null,\";\\n    //   return to_string(root->val)+\",\"+ serialize(root->left) + serialize(root->right);\\n      string s=to_string(root->val)+\",\";\\n      string s1=serialize(root->left);\\n      string s2=serialize(root->right);\\n      return s+s1+s2;\\n    }\\n    \\n    TreeNode* makeTree(queue<string> & q)\\n    {\\n        string s=q.front();\\n        q.pop();\\n        if(s==\"null\")\\n            return NULL;\\n        TreeNode* t=new TreeNode(stoi(s));\\n        t->left=makeTree(q);\\n        t->right=makeTree(q);\\n        return t;\\n        \\n    }\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        queue<string> q;\\n        string s=\"\";\\n        for(char c:data)\\n        {\\n            if(c==\\',\\')\\n            {\\n                q.push(s);\\n                s=\"\";\\n            }\\n            else\\n                s+=c;\\n        }\\n        return makeTree(q);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    \\n    string serialize(TreeNode* root) {\\n         if(!root)\\n            return \"null,\";\\n    //   return to_string(root->val)+\",\"+ serialize(root->left) + serialize(root->right);\\n      string s=to_string(root->val)+\",\";\\n      string s1=serialize(root->left);\\n      string s2=serialize(root->right);\\n      return s+s1+s2;\\n    }\\n    \\n    TreeNode* makeTree(queue<string> & q)\\n    {\\n        string s=q.front();\\n        q.pop();\\n        if(s==\"null\")\\n            return NULL;\\n        TreeNode* t=new TreeNode(stoi(s));\\n        t->left=makeTree(q);\\n        t->right=makeTree(q);\\n        return t;\\n        \\n    }\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        queue<string> q;\\n        string s=\"\";\\n        for(char c:data)\\n        {\\n            if(c==\\',\\')\\n            {\\n                q.push(s);\\n                s=\"\";\\n            }\\n            else\\n                s+=c;\\n        }\\n        return makeTree(q);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1334364,
                "title": "c-pre-order-dfs-queue",
                "content": "```\\nclass Codec {\\n    TreeNode* makeTree(queue<string> &q) {\\n        string s = q.front();\\n        q.pop();\\n        if(s==\"null\")\\n            return NULL;\\n        TreeNode* root = new TreeNode(stoi(s));\\n        root->left = makeTree(q);\\n        root->right = makeTree(q);\\n        return root;\\n    }\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root)\\n            return \"null,\";\\n      return to_string(root->val)+\",\"+ serialize(root->left) + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        string s =\"\";\\n        queue <string> q;\\n        for(char c: data) {\\n            if(c ==\\',\\') {\\n                q.push(s);\\n                s=\"\";\\n                continue;\\n            }\\n            s+=c;\\n        }\\n        return makeTree(q);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Depth-First Search",
                    "Queue"
                ],
                "code": "```\\nclass Codec {\\n    TreeNode* makeTree(queue<string> &q) {\\n        string s = q.front();\\n        q.pop();\\n        if(s==\"null\")\\n            return NULL;\\n        TreeNode* root = new TreeNode(stoi(s));\\n        root->left = makeTree(q);\\n        root->right = makeTree(q);\\n        return root;\\n    }\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root)\\n            return \"null,\";\\n      return to_string(root->val)+\",\"+ serialize(root->left) + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        string s =\"\";\\n        queue <string> q;\\n        for(char c: data) {\\n            if(c ==\\',\\') {\\n                q.push(s);\\n                s=\"\";\\n                continue;\\n            }\\n            s+=c;\\n        }\\n        return makeTree(q);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 688532,
                "title": "c-using-preorder-traversal-and-stringstream-object-clean-and-concise",
                "content": "```\\nclass Codec {\\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root == nullptr)     return \"null\";\\n        return to_string(root->val) + \",\" + serialize(root->left) + \",\" + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream ss(data);\\n        return deserialize(ss);\\n    }\\n    \\nprivate:\\n    TreeNode *deserialize(istringstream &ss) {\\n        string token;\\n        getline(ss, token, \\',\\');\\n        \\n        if(token == \"null\")     return nullptr;\\n        \\n        TreeNode *root = new TreeNode(stoi(token));\\n        root->left = deserialize(ss);\\n        root->right = deserialize(ss);\\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec {\\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root == nullptr)     return \"null\";\\n        return to_string(root->val) + \",\" + serialize(root->left) + \",\" + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream ss(data);\\n        return deserialize(ss);\\n    }\\n    \\nprivate:\\n    TreeNode *deserialize(istringstream &ss) {\\n        string token;\\n        getline(ss, token, \\',\\');\\n        \\n        if(token == \"null\")     return nullptr;\\n        \\n        TreeNode *root = new TreeNode(stoi(token));\\n        root->left = deserialize(ss);\\n        root->right = deserialize(ss);\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 314218,
                "title": "python-bfs-and-dfs-solutions",
                "content": "Please see and vote for my solutions for these similar problems.\\n[297. Serialize and Deserialize Binary Tree](https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/314218/Python-BFS-and-DFS-solutions)\\n[428. Serialize and Deserialize N-ary Tree](https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/discuss/358636/Simple-Python-DFS-solution)\\n\\nBFS solution: same serialization as Leetcode\\n```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root:\\n            return []\\n        lst, curr_level = [], [root]\\n        while curr_level:\\n            next_level, has_value = [], False\\n            for node in curr_level:\\n                if node:\\n                    lst.append(node.val)\\n                    next_level.append(node.left)\\n                    next_level.append(node.right)\\n                    if node.left or node.right:\\n                        has_value = True\\n                else:\\n                    lst.append(None)\\n            curr_level = next_level if has_value else []\\n        return lst\\n\\n    def deserialize(self, data):\\n        n = len(data)\\n        if n == 0:\\n            return None\\n        root = TreeNode(data[0])\\n        curr_level, i = [root], 1\\n        while curr_level and i < n:\\n            next_level = []\\n            for node in curr_level:\\n                if data[i] != None:\\n                    node.left = TreeNode(data[i])\\n                    next_level.append(node.left)\\n                i += 1\\n                if data[i] != None:\\n                    node.right = TreeNode(data[i])\\n                    next_level.append(node.right)\\n                i += 1\\n            curr_level = next_level\\n        return root\\n```\\n\\nDFS solution:\\n```\\nclass Codec:\\n    def serialize(self, root):\\n        def dfs(root, res):\\n            if root == None:\\n                res.append(None)\\n                return\\n            res.append(root.val)\\n            dfs(root.left, res)\\n            dfs(root.right, res)\\n        \\n        res = []\\n        dfs(root, res)\\n        return res\\n\\n    def deserialize(self, data):\\n        def dfs():\\n            if data[p[0]] == None:\\n                p[0] += 1\\n                return None\\n            root = TreeNode(data[p[0]])\\n            p[0] += 1\\n            root.left = dfs()\\n            root.right = dfs()\\n            return root\\n        \\n        p = [0]\\n        return dfs()\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root:\\n            return []\\n        lst, curr_level = [], [root]\\n        while curr_level:\\n            next_level, has_value = [], False\\n            for node in curr_level:\\n                if node:\\n                    lst.append(node.val)\\n                    next_level.append(node.left)\\n                    next_level.append(node.right)\\n                    if node.left or node.right:\\n                        has_value = True\\n                else:\\n                    lst.append(None)\\n            curr_level = next_level if has_value else []\\n        return lst\\n\\n    def deserialize(self, data):\\n        n = len(data)\\n        if n == 0:\\n            return None\\n        root = TreeNode(data[0])\\n        curr_level, i = [root], 1\\n        while curr_level and i < n:\\n            next_level = []\\n            for node in curr_level:\\n                if data[i] != None:\\n                    node.left = TreeNode(data[i])\\n                    next_level.append(node.left)\\n                i += 1\\n                if data[i] != None:\\n                    node.right = TreeNode(data[i])\\n                    next_level.append(node.right)\\n                i += 1\\n            curr_level = next_level\\n        return root\\n```\n```\\nclass Codec:\\n    def serialize(self, root):\\n        def dfs(root, res):\\n            if root == None:\\n                res.append(None)\\n                return\\n            res.append(root.val)\\n            dfs(root.left, res)\\n            dfs(root.right, res)\\n        \\n        res = []\\n        dfs(root, res)\\n        return res\\n\\n    def deserialize(self, data):\\n        def dfs():\\n            if data[p[0]] == None:\\n                p[0] += 1\\n                return None\\n            root = TreeNode(data[p[0]])\\n            p[0] += 1\\n            root.left = dfs()\\n            root.right = dfs()\\n            return root\\n        \\n        p = [0]\\n        return dfs()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3417131,
                "title": "this-is-not-a-hard-problem-it-s-an-easy-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n![Screenshot_20230205_171246.png](https://assets.leetcode.com/users/images/cab4e04b-cf9e-486a-968c-e919b314411b_1681492583.5272374.png)\\n\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n    \\n        // If the root node is null, return an empty string\\n        if(root == null){\\n            return \"\";\\n        }\\n\\n        // Create a queue to traverse the tree in a breadth-first manner and a StringBuilder to build the serialized string\\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder res = new StringBuilder();\\n\\n        // Add the root node to the queue\\n        q.add(root);\\n\\n        // Traverse the tree in a breadth-first manner\\n        while( !q.isEmpty()){\\n\\n            TreeNode node = q.poll();\\n\\n            // If the current node is null, append \"n\" to the serialized string\\n            if(node == null){\\n                res.append(\"n \");\\n                continue;\\n            }\\n\\n            // Append the value of the current node to the serialized string\\n            res.append(node.val + \" \");\\n        \\n            // Add the left and right children of the current node to the queue\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n\\n        // Convert the StringBuilder to a String and return it\\n        return res.toString();\\n    }\\n\\n    // Decodes the encoded data to a binary tree\\n    public TreeNode deserialize(String data) {\\n    \\n        // If the data string is empty, return null\\n        if(data == \"\"){\\n            return null;\\n        }\\n\\n        // Create a queue to build the tree in a breadth-first manner\\n        Queue<TreeNode> q = new LinkedList<>();\\n\\n        // Split the data string into an array of values\\n        String values[] = data.split(\" \");\\n\\n        // Create the root node of the tree using the first value in the array\\n        TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n\\n        // Add the root node to the queue\\n        q.add(root);\\n\\n        // Traverse the values array to build the tree in a breadth-first manner\\n        for(int i = 1; i < values.length; i++){\\n            \\n            // Get the parent node from the queue\\n            TreeNode parent = q.poll();\\n\\n            // If the current value is not \"n\", create a new node and set it as the left child of the parent node\\n            if(!values[i].equals(\"n\")){\\n                TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                parent.left = left;\\n                // Add the new node to the queue\\n                q.add(left);\\n            }\\n\\n            // If the next value is not \"n\", create a new node and set it as the right child of the parent node\\n            if(!values[++i].equals(\"n\")){\\n                TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                parent.right = right;\\n                // Add the new node to the queue\\n                q.add(right);\\n            }\\n        }\\n        // Return the root node of the reconstructed tree\\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Tree",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n    \\n        // If the root node is null, return an empty string\\n        if(root == null){\\n            return \"\";\\n        }\\n\\n        // Create a queue to traverse the tree in a breadth-first manner and a StringBuilder to build the serialized string\\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder res = new StringBuilder();\\n\\n        // Add the root node to the queue\\n        q.add(root);\\n\\n        // Traverse the tree in a breadth-first manner\\n        while( !q.isEmpty()){\\n\\n            TreeNode node = q.poll();\\n\\n            // If the current node is null, append \"n\" to the serialized string\\n            if(node == null){\\n                res.append(\"n \");\\n                continue;\\n            }\\n\\n            // Append the value of the current node to the serialized string\\n            res.append(node.val + \" \");\\n        \\n            // Add the left and right children of the current node to the queue\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n\\n        // Convert the StringBuilder to a String and return it\\n        return res.toString();\\n    }\\n\\n    // Decodes the encoded data to a binary tree\\n    public TreeNode deserialize(String data) {\\n    \\n        // If the data string is empty, return null\\n        if(data == \"\"){\\n            return null;\\n        }\\n\\n        // Create a queue to build the tree in a breadth-first manner\\n        Queue<TreeNode> q = new LinkedList<>();\\n\\n        // Split the data string into an array of values\\n        String values[] = data.split(\" \");\\n\\n        // Create the root node of the tree using the first value in the array\\n        TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n\\n        // Add the root node to the queue\\n        q.add(root);\\n\\n        // Traverse the values array to build the tree in a breadth-first manner\\n        for(int i = 1; i < values.length; i++){\\n            \\n            // Get the parent node from the queue\\n            TreeNode parent = q.poll();\\n\\n            // If the current value is not \"n\", create a new node and set it as the left child of the parent node\\n            if(!values[i].equals(\"n\")){\\n                TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                parent.left = left;\\n                // Add the new node to the queue\\n                q.add(left);\\n            }\\n\\n            // If the next value is not \"n\", create a new node and set it as the right child of the parent node\\n            if(!values[++i].equals(\"n\")){\\n                TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                parent.right = right;\\n                // Add the new node to the queue\\n                q.add(right);\\n            }\\n        }\\n        // Return the root node of the reconstructed tree\\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1924118,
                "title": "reason-why-js-developers-are-smart",
                "content": "```\\n\\nvar serialize = function(root) {\\n   return JSON.stringify(root)\\n};\\n\\nvar deserialize = function(data) {\\n   return JSON.parse(data)\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar serialize = function(root) {\\n   return JSON.stringify(root)\\n};\\n\\nvar deserialize = function(data) {\\n   return JSON.parse(data)\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1640923,
                "title": "c-preorder-traversal-just-25-lines-very-simple-code",
                "content": "```\\n\\t// Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root)\\n            return \"null\";\\n        return to_string(root->val) + \" \" + serialize(root->left) + \" \" + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream myis(data);\\n        return helper(myis);\\n    }\\n    \\n    // helper function for deserialize function\\n    TreeNode * helper(stringstream& myis){\\n        string cur;\\n        myis>>cur;\\n\\n        if(cur == \"null\")\\n            return NULL;\\n\\n        TreeNode * root = new TreeNode(stoi(cur));\\n        root->left = helper(myis);\\n        root->right = helper(myis);\\n        return root;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Tree",
                    "Depth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n\\t// Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root)\\n            return \"null\";\\n        return to_string(root->val) + \" \" + serialize(root->left) + \" \" + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream myis(data);\\n        return helper(myis);\\n    }\\n    \\n    // helper function for deserialize function\\n    TreeNode * helper(stringstream& myis){\\n        string cur;\\n        myis>>cur;\\n\\n        if(cur == \"null\")\\n            return NULL;\\n\\n        TreeNode * root = new TreeNode(stoi(cur));\\n        root->left = helper(myis);\\n        root->right = helper(myis);\\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1129115,
                "title": "shortest-easy-c-queue-solution-using-recursion",
                "content": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string of preorder traversal.\\n    string serialize(TreeNode* root) {\\n        if (root == NULL) return \"null\";\\n        string s;\\n        s += to_string(root -> val);\\n        string serial_left = serialize(root -> left);\\n        string serial_right = serialize(root -> right);\\n        return s + \",\" + serial_left + \",\" + serial_right;\\n    }\\n    \\n    TreeNode* helper_deserialize(queue<string> &q) {\\n        if (q.empty()) return NULL;\\n        string s = q.front();\\n        q.pop();\\n        if (s == \"null\") return NULL;\\n        int num = stoi(s);\\n        // int num = 10;\\n        TreeNode* node = new TreeNode(num);\\n        node -> left = helper_deserialize(q);\\n        node -> right = helper_deserialize(q);\\n        return node;\\n    }\\n    \\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        queue<string> q;\\n        string temp;\\n        for (int i = 0; i < data.size(); i++) {\\n            if (data[i] == \\',\\') {\\n                q.push(temp);\\n                temp = \"\";\\n            }\\n            else  temp.push_back(data[i]);\\n        }\\n        return helper_deserialize(q);\\n        return NULL;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Depth-First Search",
                    "Recursion",
                    "Queue"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string of preorder traversal.\\n    string serialize(TreeNode* root) {\\n        if (root == NULL) return \"null\";\\n        string s;\\n        s += to_string(root -> val);\\n        string serial_left = serialize(root -> left);\\n        string serial_right = serialize(root -> right);\\n        return s + \",\" + serial_left + \",\" + serial_right;\\n    }\\n    \\n    TreeNode* helper_deserialize(queue<string> &q) {\\n        if (q.empty()) return NULL;\\n        string s = q.front();\\n        q.pop();\\n        if (s == \"null\") return NULL;\\n        int num = stoi(s);\\n        // int num = 10;\\n        TreeNode* node = new TreeNode(num);\\n        node -> left = helper_deserialize(q);\\n        node -> right = helper_deserialize(q);\\n        return node;\\n    }\\n    \\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        queue<string> q;\\n        string temp;\\n        for (int i = 0; i < data.size(); i++) {\\n            if (data[i] == \\',\\') {\\n                q.push(temp);\\n                temp = \"\";\\n            }\\n            else  temp.push_back(data[i]);\\n        }\\n        return helper_deserialize(q);\\n        return NULL;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 797737,
                "title": "swift",
                "content": "**Approach**\\n* This approach uses a pre-order traversal to serialize and de-serialize the tree \\n* The official solution uses `pop(0)` to remove elements, but this requires `O(n)` time \\n* This solution just increments an index instead of removing the first \\n\\n**Solution**\\n```swift\\nfunc serialize(_ root: TreeNode?) -> String {\\n    var nodes = [String]() \\n\\n    func helper(_ node: TreeNode?) {\\n        guard let node = node else {\\n            nodes.append(\"nil\")\\n            return \\n        }\\n\\n        nodes.append(String(node.val))\\n        helper(node.left)\\n        helper(node.right)\\n    }\\n\\n    helper(root)\\n    return nodes.joined(separator: \",\")\\n}\\n\\nfunc deserialize(_ data: String) -> TreeNode? {\\n    let nodes = data.split(separator: \",\").map { Int(String($0)) }\\n    var idx = 0 \\n\\n    func helper() -> TreeNode? {\\n        guard let val = nodes[idx] else {\\n            idx += 1\\n            return nil \\n        }\\n\\n        idx += 1\\n        let node = TreeNode(val)\\n        node.left = helper() \\n        node.right = helper() \\n        return node\\n    }\\n\\n    return helper()\\n}\\n```",
                "solutionTags": [],
                "code": "```swift\\nfunc serialize(_ root: TreeNode?) -> String {\\n    var nodes = [String]() \\n\\n    func helper(_ node: TreeNode?) {\\n        guard let node = node else {\\n            nodes.append(\"nil\")\\n            return \\n        }\\n\\n        nodes.append(String(node.val))\\n        helper(node.left)\\n        helper(node.right)\\n    }\\n\\n    helper(root)\\n    return nodes.joined(separator: \",\")\\n}\\n\\nfunc deserialize(_ data: String) -> TreeNode? {\\n    let nodes = data.split(separator: \",\").map { Int(String($0)) }\\n    var idx = 0 \\n\\n    func helper() -> TreeNode? {\\n        guard let val = nodes[idx] else {\\n            idx += 1\\n            return nil \\n        }\\n\\n        idx += 1\\n        let node = TreeNode(val)\\n        node.left = helper() \\n        node.right = helper() \\n        return node\\n    }\\n\\n    return helper()\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 74289,
                "title": "javascript-in-leetcode-format-level-order-traversal-using-bfs",
                "content": "```\\nvar serialize = function(root) {\\n    const res = [];\\n    const queue = root ? [root] : [];\\n    while (queue.length) {\\n        let node = queue.shift();\\n        if (node) {\\n            res.push(node.val);\\n            queue.push(node.left || null);\\n            queue.push(node.right || null);\\n        } else {\\n            res.push(null);\\n        }\\n    }\\n    while (res[res.length - 1] === null) res.pop();\\n    return JSON.stringify(res);\\n};\\n\\nvar deserialize = function(data) {\\n    const arr = JSON.parse(data);\\n    if (!arr.length) return null;\\n    const root = new TreeNode(arr.shift());\\n    const queue = [root];\\n    while (queue.length) {\\n        let node = queue.shift(), val;\\n        node.left = (val = arr.shift()) || val === 0 ? new TreeNode(val) : null;\\n        node.right = (val = arr.shift()) || val === 0 ? new TreeNode(val) : null;\\n        if (node.left) queue.push(node.left);\\n        if (node.right) queue.push(node.right);\\n    }\\n    return root;\\n};\\n```\\nWhile the code is plenty fast, `shift` can be an O(n) operation depending on the underlying JavaScript engine implementation.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar serialize = function(root) {\\n    const res = [];\\n    const queue = root ? [root] : [];\\n    while (queue.length) {\\n        let node = queue.shift();\\n        if (node) {\\n            res.push(node.val);\\n            queue.push(node.left || null);\\n            queue.push(node.right || null);\\n        } else {\\n            res.push(null);\\n        }\\n    }\\n    while (res[res.length - 1] === null) res.pop();\\n    return JSON.stringify(res);\\n};\\n\\nvar deserialize = function(data) {\\n    const arr = JSON.parse(data);\\n    if (!arr.length) return null;\\n    const root = new TreeNode(arr.shift());\\n    const queue = [root];\\n    while (queue.length) {\\n        let node = queue.shift(), val;\\n        node.left = (val = arr.shift()) || val === 0 ? new TreeNode(val) : null;\\n        node.right = (val = arr.shift()) || val === 0 ? new TreeNode(val) : null;\\n        if (node.left) queue.push(node.left);\\n        if (node.right) queue.push(node.right);\\n    }\\n    return root;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 74343,
                "title": "c-solution-using-dfs-and-istringstream",
                "content": "```\\nclass Codec {\\nprivate:\\n    TreeNode* de(istringstream& iss) {\\n        TreeNode* root = NULL;\\n        string word;\\n        if (iss >> word && word != \"N\") {\\n            root = new TreeNode(stoi(word));\\n            root->left = de(iss);\\n            root->right = de(iss);\\n        }\\n        return root;\\n    }\\n    \\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if (!root) { return \"N \"; }\\n        return to_string(root->val) + \" \" + serialize(root->left) + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream iss(data);\\n        return de(iss);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec {\\nprivate:\\n    TreeNode* de(istringstream& iss) {\\n        TreeNode* root = NULL;\\n        string word;\\n        if (iss >> word && word != \"N\") {\\n            root = new TreeNode(stoi(word));\\n            root->left = de(iss);\\n            root->right = de(iss);\\n        }\\n        return root;\\n    }\\n    \\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if (!root) { return \"N \"; }\\n        return to_string(root->val) + \" \" + serialize(root->left) + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream iss(data);\\n        return de(iss);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74400,
                "title": "java-runtime-beats-99-of-submissions",
                "content": "import java.util.StringTokenizer;\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        serialize(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    private void serialize(TreeNode root, StringBuilder sb) {\\n        if (root == null)\\n            sb.append(\"# \");\\n        else {\\n            sb.append(root.val + \" \");\\n            serialize(root.left, sb);\\n            serialize(root.right, sb);\\n        }\\n    }\\n\\n    // ADD \"import java.util.StringTokenizer;\" AT TOP ==========================\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data == null || data.length() == 0) return null;\\n        StringTokenizer st = new StringTokenizer(data, \" \");\\n        return deserialize(st);\\n    }\\n    \\n    private TreeNode deserialize(StringTokenizer st) {\\n        if (!st.hasMoreTokens())\\n            return null;\\n        String s = st.nextToken();\\n        if (s.equals(\"#\"))\\n            return null;\\n        TreeNode root = new TreeNode(Integer.valueOf(s));\\n        root.left = deserialize(st);\\n        root.right = deserialize(st);\\n        \\n        return root;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "import java.util.StringTokenizer;\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        serialize(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    private void serialize(TreeNode root, StringBuilder sb) {\\n        if (root == null)\\n            sb.append(\"# \");\\n        else {\\n            sb.append(root.val + \" \");\\n            serialize(root.left, sb);\\n            serialize(root.right, sb);\\n        }\\n    }\\n\\n    // ADD \"import java.util.StringTokenizer;\" AT TOP ==========================\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data == null || data.length() == 0) return null;\\n        StringTokenizer st = new StringTokenizer(data, \" \");\\n        return deserialize(st);\\n    }\\n    \\n    private TreeNode deserialize(StringTokenizer st) {\\n        if (!st.hasMoreTokens())\\n            return null;\\n        String s = st.nextToken();\\n        if (s.equals(\"#\"))\\n            return null;\\n        TreeNode root = new TreeNode(Integer.valueOf(s));\\n        root.left = deserialize(st);\\n        root.right = deserialize(st);\\n        \\n        return root;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 74464,
                "title": "share-my-java-iterative-preorder-solution",
                "content": "As we know, LeetCode uses **Level Order Traversal** to encode and decode binary tree, we can also use **Preorder Traversal** to do the same thing. \\n\\nFollowing is the Java iterative solution, time complexity for both encoding and decoding is `O(n)`. \\n\\nIn my decoding solution, I use `split()` to store the values in `list[]`, we can also use two pointers to get each component separated by the comma, that will make the space complexity down to `O(h)` where `h` is the height of the tree.\\n\\n    public class Codec {\\n    \\n      // Encodes a tree to a single string.\\n      public String serialize(TreeNode root) {\\n        if (root == null) return null;\\n        \\n        String delim = \"\";\\n        StringBuilder sb = new StringBuilder();\\n        \\n        Stack<TreeNode> stack = new Stack<>();\\n        stack.push(root);\\n        \\n        // preorder traversal\\n        while (!stack.isEmpty()) {\\n          TreeNode node = stack.pop();\\n          sb.append(delim).append(node == null ? \"#\" : String.valueOf(node.val));\\n          delim = \",\";\\n          \\n          if (node != null) {\\n            stack.push(node.right);\\n            stack.push(node.left);\\n          }\\n        }\\n        \\n        return sb.toString();\\n      }\\n      \\n      // Decodes your encoded data to tree.\\n      public TreeNode deserialize(String data) {\\n        if (data == null) return null;\\n        \\n        String[] list = data.split(\",\");\\n        \\n        // create the root node and push it to the stack\\n        TreeNode root = new TreeNode(Integer.valueOf(list[0]));\\n        Stack<TreeNode> stack = new Stack<>();\\n        stack.push(root);\\n        \\n        // direction flag\\n        boolean left = true;\\n        \\n        for (int i = 1; i < list.length; i++) {\\n          TreeNode node = list[i].equals(\"#\") ? null : new TreeNode(Integer.valueOf(list[i]));\\n          \\n          if (left) {\\n            stack.peek().left = node;\\n            if (node == null) left = false;\\n          } else {\\n            stack.pop().right = node;\\n            if (node != null) left = true;\\n          }\\n          \\n          if (node != null) stack.push(node);\\n        }\\n        \\n        return root;\\n      }\\n        \\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "As we know, LeetCode uses **Level Order Traversal** to encode and decode binary tree, we can also use **Preorder Traversal** to do the same thing. \\n\\nFollowing is the Java iterative solution, time complexity for both encoding and decoding is `O(n)`. \\n\\nIn my decoding solution, I use `split()` to store the values in `list[]`, we can also use two pointers to get each component separated by the comma, that will make the space complexity down to `O(h)` where `h` is the height of the tree.\\n\\n    public class Codec {\\n    \\n      // Encodes a tree to a single string.\\n      public String serialize(TreeNode root) {\\n        if (root == null) return null;\\n        \\n        String delim = \"\";\\n        StringBuilder sb = new StringBuilder();\\n        \\n        Stack<TreeNode> stack = new Stack<>();\\n        stack.push(root);\\n        \\n        // preorder traversal\\n        while (!stack.isEmpty()) {\\n          TreeNode node = stack.pop();\\n          sb.append(delim).append(node == null ? \"#\" : String.valueOf(node.val));\\n          delim = \",\";\\n          \\n          if (node != null) {\\n            stack.push(node.right);\\n            stack.push(node.left);\\n          }\\n        }\\n        \\n        return sb.toString();\\n      }\\n      \\n      // Decodes your encoded data to tree.\\n      public TreeNode deserialize(String data) {\\n        if (data == null) return null;\\n        \\n        String[] list = data.split(\",\");\\n        \\n        // create the root node and push it to the stack\\n        TreeNode root = new TreeNode(Integer.valueOf(list[0]));\\n        Stack<TreeNode> stack = new Stack<>();\\n        stack.push(root);\\n        \\n        // direction flag\\n        boolean left = true;\\n        \\n        for (int i = 1; i < list.length; i++) {\\n          TreeNode node = list[i].equals(\"#\") ? null : new TreeNode(Integer.valueOf(list[i]));\\n          \\n          if (left) {\\n            stack.peek().left = node;\\n            if (node == null) left = false;\\n          } else {\\n            stack.pop().right = node;\\n            if (node != null) left = true;\\n          }\\n          \\n          if (node != null) stack.push(node);\\n        }\\n        \\n        return root;\\n      }\\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3051250,
                "title": "easy-to-understand-java-c-python-solution-short-faster-easy-solutions",
                "content": "The idea is simple: print the tree in pre-order traversal and use \"X\" to denote null node and split node with \",\". We can use a StringBuilder for building the string on the fly. For deserializing, we use a Queue to store the pre-order traversal and since we have \"X\" as null node, we know exactly how to where to end building subtress.\\n\\n# Code\\n\\n![LEETCODE.png](https://assets.leetcode.com/users/images/efb66893-00fb-4bf1-b775-f4e6fcc281fa_1673718365.1435704.png)\\n\\n# JAVA\\n```\\npublic class Codec {\\n    private static final String spliter = \",\";\\n    private static final String NN = \"X\";\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        buildString(root, sb);\\n        return sb.toString();\\n    }\\n\\n    private void buildString(TreeNode node, StringBuilder sb) {\\n        if (node == null) {\\n            sb.append(NN).append(spliter);\\n        } else {\\n            sb.append(node.val).append(spliter);\\n            buildString(node.left, sb);\\n            buildString(node.right,sb);\\n        }\\n    }\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        Deque<String> nodes = new LinkedList<>();\\n        nodes.addAll(Arrays.asList(data.split(spliter)));\\n        return buildTree(nodes);\\n    }\\n    \\n    private TreeNode buildTree(Deque<String> nodes) {\\n        String val = nodes.remove();\\n        if (val.equals(NN)) return null;\\n        else {\\n            TreeNode node = new TreeNode(Integer.valueOf(val));\\n            node.left = buildTree(nodes);\\n            node.right = buildTree(nodes);\\n            return node;\\n        }\\n    }\\n}\\n```\\n# C++\\n```\\nclass Codec {\\npublic:\\n\\n    string serialize(TreeNode* root) {\\n        ostringstream out;\\n        serialize(root, out);\\n        return out.str();\\n    }\\n\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        return deserialize(in);\\n    }\\n\\nprivate:\\n\\n    void serialize(TreeNode* root, ostringstream& out) {\\n        if (root) {\\n            out << root->val << \\' \\';\\n            serialize(root->left, out);\\n            serialize(root->right, out);\\n        } else {\\n            out << \"# \";\\n        }\\n    }\\n\\n    TreeNode* deserialize(istringstream& in) {\\n        string val;\\n        in >> val;\\n        if (val == \"#\")\\n            return nullptr;\\n        TreeNode* root = new TreeNode(stoi(val));\\n        root->left = deserialize(in);\\n        root->right = deserialize(in);\\n        return root;\\n    }\\n};\\n```\\n# PYTHON\\n\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        def doit(node):\\n            if node:\\n                vals.append(str(node.val))\\n                doit(node.left)\\n                doit(node.right)\\n            else:\\n                vals.append(\\'#\\')\\n        vals = []\\n        doit(root)\\n        return \\' \\'.join(vals)\\n\\n    def deserialize(self, data):\\n        def doit():\\n            val = next(vals)\\n            if val == \\'#\\':\\n                return None\\n            node = TreeNode(int(val))\\n            node.left = doit()\\n            node.right = doit()\\n            return node\\n        vals = iter(data.split())\\n        return doit()\\n```\\nIf you really found my solution helpful please upvote it, as it motivates me to post such kind of codes.\\nLet me know in comment if i can do better.\\nLets connect on [Linkedin](https://www.linkedin.com/in/kailas-rathod/)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Codec {\\n    private static final String spliter = \",\";\\n    private static final String NN = \"X\";\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        buildString(root, sb);\\n        return sb.toString();\\n    }\\n\\n    private void buildString(TreeNode node, StringBuilder sb) {\\n        if (node == null) {\\n            sb.append(NN).append(spliter);\\n        } else {\\n            sb.append(node.val).append(spliter);\\n            buildString(node.left, sb);\\n            buildString(node.right,sb);\\n        }\\n    }\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        Deque<String> nodes = new LinkedList<>();\\n        nodes.addAll(Arrays.asList(data.split(spliter)));\\n        return buildTree(nodes);\\n    }\\n    \\n    private TreeNode buildTree(Deque<String> nodes) {\\n        String val = nodes.remove();\\n        if (val.equals(NN)) return null;\\n        else {\\n            TreeNode node = new TreeNode(Integer.valueOf(val));\\n            node.left = buildTree(nodes);\\n            node.right = buildTree(nodes);\\n            return node;\\n        }\\n    }\\n}\\n```\n```\\nclass Codec {\\npublic:\\n\\n    string serialize(TreeNode* root) {\\n        ostringstream out;\\n        serialize(root, out);\\n        return out.str();\\n    }\\n\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        return deserialize(in);\\n    }\\n\\nprivate:\\n\\n    void serialize(TreeNode* root, ostringstream& out) {\\n        if (root) {\\n            out << root->val << \\' \\';\\n            serialize(root->left, out);\\n            serialize(root->right, out);\\n        } else {\\n            out << \"# \";\\n        }\\n    }\\n\\n    TreeNode* deserialize(istringstream& in) {\\n        string val;\\n        in >> val;\\n        if (val == \"#\")\\n            return nullptr;\\n        TreeNode* root = new TreeNode(stoi(val));\\n        root->left = deserialize(in);\\n        root->right = deserialize(in);\\n        return root;\\n    }\\n};\\n```\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        def doit(node):\\n            if node:\\n                vals.append(str(node.val))\\n                doit(node.left)\\n                doit(node.right)\\n            else:\\n                vals.append(\\'#\\')\\n        vals = []\\n        doit(root)\\n        return \\' \\'.join(vals)\\n\\n    def deserialize(self, data):\\n        def doit():\\n            val = next(vals)\\n            if val == \\'#\\':\\n                return None\\n            node = TreeNode(int(val))\\n            node.left = doit()\\n            node.right = doit()\\n            return node\\n        vals = iter(data.split())\\n        return doit()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2786016,
                "title": "c-serialize-and-deserialize-binary-tree-with-level-order",
                "content": "**Description**\\n\\nSerialize and Deserialize Binary Tree with Level Order.\\n\\n**Methods**\\n\\n- `serialize`: Returns a string for given binary tree `root`.\\n- `deserialize`: Returns a binary tree `root` for a given serialized string `data`.\\n\\n**References**\\n\\n- [std::basic_stringstream](https://en.cppreference.com/w/cpp/io/basic_stringstream)\\n- [std::getline](https://en.cppreference.com/w/cpp/string/basic_string/getline)\\n\\n**Program**\\n\\n```cpp []\\nclass Codec {\\n\\tpublic:\\n\\t\\tstring serialize(TreeNode *root) {\\n\\t\\t\\tstring result = \"\";\\n\\t\\t\\tif (!root) {\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}\\n            queue<TreeNode*> queue({ root });\\n\\t\\t\\twhile (!queue.empty()) {\\n                // get the first node from the queue\\n\\t\\t\\t\\tTreeNode *front = queue.front();\\n\\t\\t\\t\\tqueue.pop();\\n\\t\\t\\t\\tif (front) {\\n                    // if the node exists, append val to result with delimiter\\n\\t\\t\\t\\t\\tresult += to_string(front->val) + \",\";\\n                    // push the left and right nodes into the queue without null check\\n\\t\\t\\t\\t\\tqueue.push(front->left);\\n\\t\\t\\t\\t\\tqueue.push(front->right);\\n\\t\\t\\t\\t} else {\\n                    // if the node is null, append null indicator with delimiter\\n\\t\\t\\t\\t\\tresult += \"#,\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\n\\tTreeNode* deserialize(string data) {\\n\\t\\tif (!data.size()) {\\n\\t\\t\\treturn NULL;\\n\\t\\t}\\n        // get first input from stream with delimiter and save to data\\n\\t\\tstringstream stream(data);\\n\\t\\tgetline(stream, data, \\',\\');\\n        // initialize tree root with string to integer conversion of data\\n\\t\\tTreeNode *root = new TreeNode(stoi(data));\\n\\t\\tqueue<TreeNode*> queue({ root });\\n\\t\\twhile (!queue.empty()) {\\n            // get the first node from the queue\\n\\t\\t\\tTreeNode *front = queue.front();\\n\\t\\t\\tqueue.pop();\\n            // get the next two inputs from stream as left and right\\n\\t\\t\\tstring left, right;\\n\\t\\t\\tgetline(stream, left, \\',\\');\\n\\t\\t\\tgetline(stream, right, \\',\\');\\n\\t\\t\\tif (left == \"#\") {\\n                // if null indicator, set left node to null\\n\\t\\t\\t\\tfront->left = NULL;\\n\\t\\t\\t} else {\\n                // if not null, set left to new node and push to queue\\n\\t\\t\\t\\tfront->left = new TreeNode(stoi(left));\\n\\t\\t\\t\\tqueue.push(front->left);\\n\\t\\t\\t}\\n\\t\\t\\tif (right == \"#\") {\\n                // if null indicator, set right node to null\\n\\t\\t\\t\\tfront->right = NULL;\\n\\t\\t\\t} else {\\n                // if not null, set right to new node and push to queue\\n\\t\\t\\t\\tfront->right = new TreeNode(stoi(right));\\n\\t\\t\\t\\tqueue.push(front->right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn root;\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```cpp []\\nclass Codec {\\n\\tpublic:\\n\\t\\tstring serialize(TreeNode *root) {\\n\\t\\t\\tstring result = \"\";\\n\\t\\t\\tif (!root) {\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}\\n            queue<TreeNode*> queue({ root });\\n\\t\\t\\twhile (!queue.empty()) {\\n                // get the first node from the queue\\n\\t\\t\\t\\tTreeNode *front = queue.front();\\n\\t\\t\\t\\tqueue.pop();\\n\\t\\t\\t\\tif (front) {\\n                    // if the node exists, append val to result with delimiter\\n\\t\\t\\t\\t\\tresult += to_string(front->val) + \",\";\\n                    // push the left and right nodes into the queue without null check\\n\\t\\t\\t\\t\\tqueue.push(front->left);\\n\\t\\t\\t\\t\\tqueue.push(front->right);\\n\\t\\t\\t\\t} else {\\n                    // if the node is null, append null indicator with delimiter\\n\\t\\t\\t\\t\\tresult += \"#,\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\n\\tTreeNode* deserialize(string data) {\\n\\t\\tif (!data.size()) {\\n\\t\\t\\treturn NULL;\\n\\t\\t}\\n        // get first input from stream with delimiter and save to data\\n\\t\\tstringstream stream(data);\\n\\t\\tgetline(stream, data, \\',\\');\\n        // initialize tree root with string to integer conversion of data\\n\\t\\tTreeNode *root = new TreeNode(stoi(data));\\n\\t\\tqueue<TreeNode*> queue({ root });\\n\\t\\twhile (!queue.empty()) {\\n            // get the first node from the queue\\n\\t\\t\\tTreeNode *front = queue.front();\\n\\t\\t\\tqueue.pop();\\n            // get the next two inputs from stream as left and right\\n\\t\\t\\tstring left, right;\\n\\t\\t\\tgetline(stream, left, \\',\\');\\n\\t\\t\\tgetline(stream, right, \\',\\');\\n\\t\\t\\tif (left == \"#\") {\\n                // if null indicator, set left node to null\\n\\t\\t\\t\\tfront->left = NULL;\\n\\t\\t\\t} else {\\n                // if not null, set left to new node and push to queue\\n\\t\\t\\t\\tfront->left = new TreeNode(stoi(left));\\n\\t\\t\\t\\tqueue.push(front->left);\\n\\t\\t\\t}\\n\\t\\t\\tif (right == \"#\") {\\n                // if null indicator, set right node to null\\n\\t\\t\\t\\tfront->right = NULL;\\n\\t\\t\\t} else {\\n                // if not null, set right to new node and push to queue\\n\\t\\t\\t\\tfront->right = new TreeNode(stoi(right));\\n\\t\\t\\t\\tqueue.push(front->right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn root;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1244344,
                "title": "java-easy-to-understand-solution-using-stringbuilder",
                "content": "**Do vote up if you like it :)**\\n```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        serializeHelper(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    public void serializeHelper(TreeNode root, StringBuilder sb){\\n        if(root == null){\\n            sb.append(\"null\").append(\",\");\\n            return;\\n        }\\n        sb.append(root.val).append(\",\");\\n        serializeHelper(root.left, sb);\\n        serializeHelper(root.right, sb);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] strArr = data.split(\",\");\\n        return deserializeHelper(strArr);\\n    }\\n    \\n    int idx = 0;\\n    public TreeNode deserializeHelper(String[] strArr){\\n        if(idx == strArr.length || strArr[idx].equals(\"null\")){\\n            idx++;\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(strArr[idx++]));\\n        root.left = deserializeHelper(strArr);\\n        root.right = deserializeHelper(strArr);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        serializeHelper(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    public void serializeHelper(TreeNode root, StringBuilder sb){\\n        if(root == null){\\n            sb.append(\"null\").append(\",\");\\n            return;\\n        }\\n        sb.append(root.val).append(\",\");\\n        serializeHelper(root.left, sb);\\n        serializeHelper(root.right, sb);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] strArr = data.split(\",\");\\n        return deserializeHelper(strArr);\\n    }\\n    \\n    int idx = 0;\\n    public TreeNode deserializeHelper(String[] strArr){\\n        if(idx == strArr.length || strArr[idx].equals(\"null\")){\\n            idx++;\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(strArr[idx++]));\\n        root.left = deserializeHelper(strArr);\\n        root.right = deserializeHelper(strArr);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 330391,
                "title": "python-solution-beats-80",
                "content": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return []\\n        return [root.val] + [self.serialize(root.left)] + [self.serialize(root.right)] \\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if len(data) == 0:\\n            return None\\n        root = TreeNode(data[0])\\n        root.left = self.deserialize(data[1])   \\n        root.right = self.deserialize(data[2])\\n        return root\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return []\\n        return [root.val] + [self.serialize(root.left)] + [self.serialize(root.right)] \\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if len(data) == 0:\\n            return None\\n        root = TreeNode(data[0])\\n        root.left = self.deserialize(data[1])   \\n        root.right = self.deserialize(data[2])\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 234052,
                "title": "python-10-line-solution-beat-98",
                "content": "```python\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root: return \\'#\\'\\n        return str(root.val) + \\',\\' + self.serialize(root.left) + \\',\\' + self.serialize(root.right)        \\n\\n    def deserialize(self, data):\\n        def dfs(data):\\n            if data[0] == \\'#\\': \\n                data.popleft()\\n                return None\\n            root = TreeNode(data.popleft())\\n            root.left, root.right = dfs(data), dfs(data)\\n            return root\\n        return dfs(collections.deque(data.split(\\',\\')))\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root: return \\'#\\'\\n        return str(root.val) + \\',\\' + self.serialize(root.left) + \\',\\' + self.serialize(root.right)        \\n\\n    def deserialize(self, data):\\n        def dfs(data):\\n            if data[0] == \\'#\\': \\n                data.popleft()\\n                return None\\n            root = TreeNode(data.popleft())\\n            root.left, root.right = dfs(data), dfs(data)\\n            return root\\n        return dfs(collections.deque(data.split(\\',\\')))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74462,
                "title": "be-creative-share-my-c-solution",
                "content": "The problem asks me to be creative, so I came up this idea.\\n\\nFor tree,\\n\\n        1\\n       / \\\\\\n      2   3\\n         / \\\\\\n        4   5\\n       /     \\\\\\n      6       7\\n\\nThe serialization will be  `1,2,N,3,4,5,L,6,R,7,N,N`\\n\\n - `N` represents there are no children for the previous node. \\n - `L` represents that the previous node have one left child, and the value of that child comes after it.\\n - `R` represents that there is one right child.\\n\\nI use queue to do level traversal, the time complexity should be O(n) for both operations.\\n\\nC++ code here:\\n\\n\\n\\n    class Codec {\\n    public:\\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            if (root == NULL) return \"\";\\n            queue<TreeNode *> q;\\n            q.push(root);\\n            TreeNode *p;\\n            string result = to_string(root->val);\\n            while (!q.empty()) {\\n                p = q.front();\\n                q.pop();\\n                if (p->left && p->right) {\\n                    q.push(p->left);\\n                    q.push(p->right);\\n                    result += \",\" + to_string(p->left->val) + \",\" + to_string(p->right->val);\\n                }\\n                else if (p->left && !p->right) {\\n                    q.push(p->left);\\n                    result += \",L,\" + to_string(p->left->val);\\n                }\\n                else if (!p->left && p->right) {\\n                    q.push(p->right);\\n                    result += \",R,\" + to_string(p->right->val);\\n                }\\n                else {\\n                    result += \",N\";\\n                }\\n            }\\n            return result;\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            if (data.length() == 0) return NULL;\\n            vector<string> nodes = split(data, ',');\\n            auto it = nodes.begin();\\n            TreeNode *root = new TreeNode(stoi(*(it++)));\\n            queue<TreeNode *> q;\\n            q.push(root);\\n            while (!q.empty() && it != nodes.end()) {\\n                TreeNode *p = q.front();\\n                if (*it == \"N\") {\\n                    it++;\\n                }\\n                else if (*it == \"L\") {\\n                    p->left = new TreeNode(stoi(*(++it)));\\n                    it++;\\n                }\\n                else if (*it == \"R\") {\\n                    p->right = new TreeNode(stoi(*(++it)));\\n                    it++;\\n                }\\n                else {\\n                    p->left = new TreeNode(stoi(*(it++)));\\n                    p->right = new TreeNode(stoi(*(it++)));\\n                }\\n    \\n                q.pop();\\n                if (p->left) q.push(p->left);\\n                if (p->right) q.push(p->right);\\n            }\\n            return root;\\n        }\\n    \\n        vector<string> split(string str, char delimiter) {\\n            vector<string> result;\\n            int last = 0;\\n            for (int i = 0; i <= str.length(); i++) {\\n                if (str[i] == delimiter || str[i] == '\\\\0') {\\n                    result.push_back(str.substr(last, i - last));\\n                    last = i + 1;\\n                }\\n            }\\n            return result;\\n        }\\n    };",
                "solutionTags": [],
                "code": "The problem asks me to be creative, so I came up this idea.\\n\\nFor tree,\\n\\n        1\\n       / \\\\\\n      2   3\\n         / \\\\\\n        4   5\\n       /     \\\\\\n      6       7\\n\\nThe serialization will be  `1,2,N,3,4,5,L,6,R,7,N,N`\\n\\n - `N` represents there are no children for the previous node. \\n - `L` represents that the previous node have one left child, and the value of that child comes after it.\\n - `R` represents that there is one right child.\\n\\nI use queue to do level traversal, the time complexity should be O(n) for both operations.\\n\\nC++ code here:\\n\\n\\n\\n    class Codec {\\n    public:\\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            if (root == NULL) return \"\";\\n            queue<TreeNode *> q;\\n            q.push(root);\\n            TreeNode *p;\\n            string result = to_string(root->val);\\n            while (!q.empty()) {\\n                p = q.front();\\n                q.pop();\\n                if (p->left && p->right) {\\n                    q.push(p->left);\\n                    q.push(p->right);\\n                    result += \",\" + to_string(p->left->val) + \",\" + to_string(p->right->val);\\n                }\\n                else if (p->left && !p->right) {\\n                    q.push(p->left);\\n                    result += \",L,\" + to_string(p->left->val);\\n                }\\n                else if (!p->left && p->right) {\\n                    q.push(p->right);\\n                    result += \",R,\" + to_string(p->right->val);\\n                }\\n                else {\\n                    result += \",N\";\\n                }\\n            }\\n            return result;\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            if (data.length() == 0) return NULL;\\n            vector<string> nodes = split(data, ',');\\n            auto it = nodes.begin();\\n            TreeNode *root = new TreeNode(stoi(*(it++)));\\n            queue<TreeNode *> q;\\n            q.push(root);\\n            while (!q.empty() && it != nodes.end()) {\\n                TreeNode *p = q.front();\\n                if (*it == \"N\") {\\n                    it++;\\n                }\\n                else if (*it == \"L\") {\\n                    p->left = new TreeNode(stoi(*(++it)));\\n                    it++;\\n                }\\n                else if (*it == \"R\") {\\n                    p->right = new TreeNode(stoi(*(++it)));\\n                    it++;\\n                }\\n                else {\\n                    p->left = new TreeNode(stoi(*(it++)));\\n                    p->right = new TreeNode(stoi(*(it++)));\\n                }\\n    \\n                q.pop();\\n                if (p->left) q.push(p->left);\\n                if (p->right) q.push(p->right);\\n            }\\n            return root;\\n        }\\n    \\n        vector<string> split(string str, char delimiter) {\\n            vector<string> result;\\n            int last = 0;\\n            for (int i = 0; i <= str.length(); i++) {\\n                if (str[i] == delimiter || str[i] == '\\\\0') {\\n                    result.push_back(str.substr(last, i - last));\\n                    last = i + 1;\\n                }\\n            }\\n            return result;\\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 3396828,
                "title": "explained-simple-and-clear-python3-code",
                "content": "# Intuition\\nThe Codec class provides methods for serializing and deserializing a binary tree. The intuition behind this code is that it encodes the structure of a binary tree into a string that can be easily transmitted or stored, and then decodes the string to reconstruct the original binary tree. This can be useful in situations where a binary tree needs to be transmitted over a network or stored in a file.\\n# Approach\\nThe serialize method serializes a binary tree by recursively calling itself on the left and right children of each node, and concatenating the results into a string with the value of the current node in the middle. If a node is None, it is represented by the string \"x\". The deserialize method deserializes a binary tree by first checking if the input string is equal to \"x\", in which case it returns None. Otherwise, it parses the string to obtain the value of the current node, the string representation of its left child, and the string representation of its right child. It then recursively calls itself on the left and right child strings to obtain the corresponding binary trees, and returns a new TreeNode object with the current value and left and right children.\\n\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the serialize method is O(n), where n is the number of nodes in the binary tree, since it visits each node exactly once. The time complexity of the deserialize method is also O(n), since it needs to parse the input string and create a new TreeNode object for each node in the binary tree.\\n\\n\\n- Space complexity:\\nThe space complexity of both methods is O(n), since they both use recursion and may need to store information about all nodes in the binary tree on the call stack. In the serialize method, the maximum depth of the call stack is equal to the height of the binary tree, which is O(log n) in the best case and O(n) in the worst case. In the deserialize method, the call stack depth is also O(log n) in the best case, but can be as high as O(n) in the worst case if the binary tree is degenerate. Additionally, the deserialize method creates a new TreeNode object for each node in the binary tree, which requires O(n) space in the worst case.\\n\\n\\n\\n\\n# Code\\n```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if root==None:\\n            return \"x\"\\n        return \"[\"+str(root.val)+\",\"+self.serialize(root.left)+\",\"+self.serialize(root.right)+\"]\"\\n        \\n        \\n\\n    def deserialize(self, data):\\n        if data==\"x\":\\n            return None\\n        else:\\n            #val\\n            val=int(data[1:data.find(\",\")])\\n\\n            #left\\n            leftstart=data.index(\\',\\')+1\\n            if data[leftstart]==\"x\":\\n                leftend=leftstart+1\\n            else:\\n                leftend=0\\n                co=1\\n                for i in range(leftstart+1,len(data)):\\n                    if co==0:\\n                        leftend=i\\n                        break\\n                    elif data[i]==\"[\":\\n                        co+=1\\n                    elif data[i]==\"]\":\\n                        co-=1\\n            #right\\n            if data[leftend+1]==\"x\":\\n                right=None\\n            else:\\n                r=data[leftend+1:len(data)-1]  \\n                right=self.deserialize(r)\\n             \\n        return TreeNode(val,self.deserialize(data[leftstart:leftend]),right)\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Depth-First Search"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if root==None:\\n            return \"x\"\\n        return \"[\"+str(root.val)+\",\"+self.serialize(root.left)+\",\"+self.serialize(root.right)+\"]\"\\n        \\n        \\n\\n    def deserialize(self, data):\\n        if data==\"x\":\\n            return None\\n        else:\\n            #val\\n            val=int(data[1:data.find(\",\")])\\n\\n            #left\\n            leftstart=data.index(\\',\\')+1\\n            if data[leftstart]==\"x\":\\n                leftend=leftstart+1\\n            else:\\n                leftend=0\\n                co=1\\n                for i in range(leftstart+1,len(data)):\\n                    if co==0:\\n                        leftend=i\\n                        break\\n                    elif data[i]==\"[\":\\n                        co+=1\\n                    elif data[i]==\"]\":\\n                        co-=1\\n            #right\\n            if data[leftend+1]==\"x\":\\n                right=None\\n            else:\\n                r=data[leftend+1:len(data)-1]  \\n                right=self.deserialize(r)\\n             \\n        return TreeNode(val,self.deserialize(data[leftstart:leftend]),right)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238673,
                "title": "297-time-95-90-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis code is an implementation of a binary tree serialization and deserialization algorithm.\\n\\nThe serialize method takes a binary tree root node as input and returns a string representation of the tree. It uses a pre-order traversal to traverse the tree and add each node\\'s value to a list s. If a node is None, it appends the character \\'n\\' to the list. Finally, the list is joined into a string using a space separator and returned.\\n\\nThe deserialize method takes a string representation of a binary tree as input and returns the corresponding binary tree root node. It first splits the input string into a list of values using space as a delimiter. It uses a recursive preorder helper function to build the tree. The preorder function recursively constructs the tree by popping values from the list and creating a node for each value. If the popped value is the character \\'n\\', it returns None since the node has no children. Otherwise, it creates a node with the popped value as its value, and recursively constructs its left and right subtrees by calling the preorder function again. Finally, it returns the root node of the constructed tree.\\n\\nOverall, this implementation uses a simple and efficient approach to serialize and deserialize binary trees using a pre-order traversal.\\n\\n# Complexity\\n- Time complexity:\\n95.90%\\n\\n- Space complexity:\\n61.53%\\n\\n# Code\\n```\\nclass Codec:\\n  def serialize(self, root: \\'TreeNode\\') -> str:\\n    \"\"\"Encodes a tree to a single string.\"\"\"\\n    s = []\\n\\n    def preorder(root: \\'TreeNode\\') -> None:\\n      if not root:\\n        s.append(\\'n\\')\\n        return\\n\\n      s.append(str(root.val))\\n      preorder(root.left)\\n      preorder(root.right)\\n\\n    preorder(root)\\n    return \\' \\'.join(s)\\n\\n  def deserialize(self, data: str) -> \\'TreeNode\\':\\n    \"\"\"Decodes your encoded data to tree.\"\"\"\\n    q = collections.deque(data.split())\\n\\n    def preorder() -> \\'TreeNode\\':\\n      s = q.popleft()\\n      if s == \\'n\\':\\n        return None\\n\\n      root = TreeNode(s)\\n      root.left = preorder()\\n      root.right = preorder()\\n      return root\\n\\n    return preorder()\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Tree",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Codec:\\n  def serialize(self, root: \\'TreeNode\\') -> str:\\n    \"\"\"Encodes a tree to a single string.\"\"\"\\n    s = []\\n\\n    def preorder(root: \\'TreeNode\\') -> None:\\n      if not root:\\n        s.append(\\'n\\')\\n        return\\n\\n      s.append(str(root.val))\\n      preorder(root.left)\\n      preorder(root.right)\\n\\n    preorder(root)\\n    return \\' \\'.join(s)\\n\\n  def deserialize(self, data: str) -> \\'TreeNode\\':\\n    \"\"\"Decodes your encoded data to tree.\"\"\"\\n    q = collections.deque(data.split())\\n\\n    def preorder() -> \\'TreeNode\\':\\n      s = q.popleft()\\n      if s == \\'n\\':\\n        return None\\n\\n      root = TreeNode(s)\\n      root.left = preorder()\\n      root.right = preorder()\\n      return root\\n\\n    return preorder()\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2057967,
                "title": "clean-and-clear-bfs-solution-in-python-easy-to-understand",
                "content": "Great question that could be of great use!\\n\\nUse **BFS** to solve!\\n\\nUse **\\'#\\'** to mark a None node.\\nWhen deserialize, we use a variable **\"isLeftChild\"** to decide when we should move to next node.\\n\\n**Time:** O(n)\\n**Space:** O(n)\\n\\n```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return \\'\\'\\n        \\n        queue = [root]\\n        index = 0\\n        while index < len(queue):\\n            if queue[index]:\\n                queue.append(queue[index].left)\\n                queue.append(queue[index].right)\\n            index += 1\\n        \\n        return \\',\\'.join([\\n            str(node.val) if node else \\'#\\'\\n            for node in queue\\n        ])\\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if data == \\'\\':\\n            return None\\n        \\n        vals = data.split(\\',\\')\\n        root = TreeNode(int(vals[0]))\\n        queue = [root]\\n        isLeftChild = True\\n        index = 0\\n        for val in vals[1:]:\\n            if val is not \\'#\\':\\n                node = TreeNode(int(val))\\n                if isLeftChild:\\n                    queue[index].left = node\\n                else:\\n                    queue[index].right = node\\n                queue.append(node)\\n            if not isLeftChild:\\n                index += 1\\n            isLeftChild = not isLeftChild\\n        \\n        return root\\n```",
                "solutionTags": [
                    "Python",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return \\'\\'\\n        \\n        queue = [root]\\n        index = 0\\n        while index < len(queue):\\n            if queue[index]:\\n                queue.append(queue[index].left)\\n                queue.append(queue[index].right)\\n            index += 1\\n        \\n        return \\',\\'.join([\\n            str(node.val) if node else \\'#\\'\\n            for node in queue\\n        ])\\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if data == \\'\\':\\n            return None\\n        \\n        vals = data.split(\\',\\')\\n        root = TreeNode(int(vals[0]))\\n        queue = [root]\\n        isLeftChild = True\\n        index = 0\\n        for val in vals[1:]:\\n            if val is not \\'#\\':\\n                node = TreeNode(int(val))\\n                if isLeftChild:\\n                    queue[index].left = node\\n                else:\\n                    queue[index].right = node\\n                queue.append(node)\\n            if not isLeftChild:\\n                index += 1\\n            isLeftChild = not isLeftChild\\n        \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 622355,
                "title": "c-preorder-stringstream",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if (!root) return \"#\";\\n        \\n        return to_string(root->val) + \" \" + serialize(root->left) + \" \" + serialize(root->right);\\n    }\\n    \\n     // Helper for deserialization\\n    TreeNode* deserializeUtil(istringstream &ss) {\\n        string str;\\n        ss >> str;\\n        \\n        if (str == \"#\") return NULL;\\n        \\n        TreeNode* root = new TreeNode(stoi(str));\\n        root->left = deserializeUtil(ss);\\n        root->right = deserializeUtil(ss);\\n        \\n        return root;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream ss(data);\\n        return deserializeUtil(ss);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec codec;\\n// codec.deserialize(codec.serialize(root));``\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if (!root) return \"#\";\\n        \\n        return to_string(root->val) + \" \" + serialize(root->left) + \" \" + serialize(root->right);\\n    }\\n    \\n     // Helper for deserialization\\n    TreeNode* deserializeUtil(istringstream &ss) {\\n        string str;\\n        ss >> str;\\n        \\n        if (str == \"#\") return NULL;\\n        \\n        TreeNode* root = new TreeNode(stoi(str));\\n        root->left = deserializeUtil(ss);\\n        root->right = deserializeUtil(ss);\\n        \\n        return root;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream ss(data);\\n        return deserializeUtil(ss);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec codec;\\n// codec.deserialize(codec.serialize(root));``\\n```",
                "codeTag": "Java"
            },
            {
                "id": 430572,
                "title": "c-beats-95-advanced-string-stream-technique-with-video-explanation",
                "content": "Video: https://www.youtube.com/watch?v=QWbg6aLG48Y&t=0s\\n\\n```\\nclass Codec {\\nprivate:\\n\\n    char ourToken = \\' \\'; // All streams are seperated by tokens (which can be \\n    // either spaces, tabs, or new lines. Here we are using a space;\\n    \\n    void serializeHelper(TreeNode* root, ostringstream& OSS) {\\n        if (!root) {\\n            OSS << \\'#\\' << ourToken; // Chase with a space (ourToken)\\n            return;\\n        }\\n        \\n        OSS << root->val << ourToken;\\n        serializeHelper(root->left, OSS);\\n        serializeHelper(root->right, OSS);\\n        return;\\n    }\\n    \\n    TreeNode* deserializeHelper(istringstream& ISS) {\\n        string nodeHolder; // Holds either # or a number, in string form\\n        ISS >> nodeHolder; // Take first string (that isn\\'t ourToken) from stream\\n        // and put it into nodeHolder;\\n        if (!nodeHolder.compare(\"#\")) return nullptr; // If nodeHolder is \"#\" then a node doesn\\'t exist there\\n        TreeNode* newNode = new TreeNode(stoi(nodeHolder));\\n        newNode->left = deserializeHelper(ISS);\\n        newNode->right = deserializeHelper(ISS);\\n        return newNode;\\n    }\\n    \\npublic:\\n\\n    string serialize(TreeNode* root) {\\n        ostringstream OSS;\\n        serializeHelper(root, OSS);\\n        // cout << OSS.str() << endl;\\n        return OSS.str();\\n    }\\n\\n    TreeNode* deserialize(string data) {\\n        istringstream ISS(data); // Seed the stream with our data string.\\n        return deserializeHelper(ISS);\\n    }\\n};\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "Video: https://www.youtube.com/watch?v=QWbg6aLG48Y&t=0s\\n\\n```\\nclass Codec {\\nprivate:\\n\\n    char ourToken = \\' \\'; // All streams are seperated by tokens (which can be \\n    // either spaces, tabs, or new lines. Here we are using a space;\\n    \\n    void serializeHelper(TreeNode* root, ostringstream& OSS) {\\n        if (!root) {\\n            OSS << \\'#\\' << ourToken; // Chase with a space (ourToken)\\n            return;\\n        }\\n        \\n        OSS << root->val << ourToken;\\n        serializeHelper(root->left, OSS);\\n        serializeHelper(root->right, OSS);\\n        return;\\n    }\\n    \\n    TreeNode* deserializeHelper(istringstream& ISS) {\\n        string nodeHolder; // Holds either # or a number, in string form\\n        ISS >> nodeHolder; // Take first string (that isn\\'t ourToken) from stream\\n        // and put it into nodeHolder;\\n        if (!nodeHolder.compare(\"#\")) return nullptr; // If nodeHolder is \"#\" then a node doesn\\'t exist there\\n        TreeNode* newNode = new TreeNode(stoi(nodeHolder));\\n        newNode->left = deserializeHelper(ISS);\\n        newNode->right = deserializeHelper(ISS);\\n        return newNode;\\n    }\\n    \\npublic:\\n\\n    string serialize(TreeNode* root) {\\n        ostringstream OSS;\\n        serializeHelper(root, OSS);\\n        // cout << OSS.str() << endl;\\n        return OSS.str();\\n    }\\n\\n    TreeNode* deserialize(string data) {\\n        istringstream ISS(data); // Seed the stream with our data string.\\n        return deserializeHelper(ISS);\\n    }\\n};\\n",
                "codeTag": "C++"
            },
            {
                "id": 379424,
                "title": "python-solution-better-than-83-67-easy-to-understand",
                "content": "Taken idea from @joinyoung from problem https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/ . Thank you for providing a fantastic use case for nested dictionaries\\n\\nPrepare nested dict for each node and fill in values appropriately.\\n\\n```\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if root == None:\\n            return None\\n        \\n        dict = {\\'value\\':root.val,\\'left\\':None,\\'right\\':None}\\n        \\n        if root.left:\\n            dict[\\'left\\'] = self.serialize(root.left)\\n        if root.right:\\n            dict[\\'right\\'] = self.serialize(root.right)\\n            \\n        return dict\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if data == None:\\n            return None\\n        \\n        node = TreeNode(data[\\'value\\'])\\n        \\n        node.left = self.deserialize(data[\\'left\\'])\\n        \\n        node.right = self.deserialize(data[\\'right\\'])\\n        \\n        return node\\n        \\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if root == None:\\n            return None\\n        \\n        dict = {\\'value\\':root.val,\\'left\\':None,\\'right\\':None}\\n        \\n        if root.left:\\n            dict[\\'left\\'] = self.serialize(root.left)\\n        if root.right:\\n            dict[\\'right\\'] = self.serialize(root.right)\\n            \\n        return dict\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if data == None:\\n            return None\\n        \\n        node = TreeNode(data[\\'value\\'])\\n        \\n        node.left = self.deserialize(data[\\'left\\'])\\n        \\n        node.right = self.deserialize(data[\\'right\\'])\\n        \\n        return node\\n        \\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 285111,
                "title": "java-solution-level-order-traversal",
                "content": "**Idea**\\nSerialize using level order traversal.\\nDeserialize using the similar logic - take two values at a time and attach them as children to first node from the queue and as we form the tree nodes with these new two values, add them to queue as these are parent nodes for the next level.\\n\\n```\\npublic String serialize(TreeNode root) {\\n        if(root == null) return null;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        StringBuilder sb = new StringBuilder();\\n        while(!q.isEmpty()){\\n            TreeNode curr = q.remove();\\n            if(curr == null){\\n                sb.append(\"x,\");\\n            }else{\\n                sb.append(curr.val+\",\");\\n                q.add(curr.left);\\n                q.add(curr.right);\\n            }\\n        }\\n        return sb.substring(0, sb.length()-1);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data == null) return null;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        String[] vals = data.split(\",\");\\n        int i=0;\\n        TreeNode root = new TreeNode(Integer.valueOf(vals[i++]));\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode n = q.remove();\\n            if(!vals[i].equals(\"x\")){\\n                n.left = new TreeNode(Integer.valueOf(vals[i]));\\n                q.add(n.left);\\n            }\\n            i++;\\n            if(!vals[i].equals(\"x\")){\\n                n.right = new TreeNode(Integer.valueOf(vals[i]));\\n                q.add(n.right);\\n            }\\n            i++;\\n        }\\n        return root;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic String serialize(TreeNode root) {\\n        if(root == null) return null;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        StringBuilder sb = new StringBuilder();\\n        while(!q.isEmpty()){\\n            TreeNode curr = q.remove();\\n            if(curr == null){\\n                sb.append(\"x,\");\\n            }else{\\n                sb.append(curr.val+\",\");\\n                q.add(curr.left);\\n                q.add(curr.right);\\n            }\\n        }\\n        return sb.substring(0, sb.length()-1);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data == null) return null;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        String[] vals = data.split(\",\");\\n        int i=0;\\n        TreeNode root = new TreeNode(Integer.valueOf(vals[i++]));\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode n = q.remove();\\n            if(!vals[i].equals(\"x\")){\\n                n.left = new TreeNode(Integer.valueOf(vals[i]));\\n                q.add(n.left);\\n            }\\n            i++;\\n            if(!vals[i].equals(\"x\")){\\n                n.right = new TreeNode(Integer.valueOf(vals[i]));\\n                q.add(n.right);\\n            }\\n            i++;\\n        }\\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 74437,
                "title": "c-36ms-solution",
                "content": "The serialization format looks like:   1[2[3,],4[5,6[,7]]], O(n) one-pass processing for both ser/deser\\n\\n\\n    class Codec {\\n    private:\\n    \\tvoid serialize(TreeNode* root, stringstream& ss) {\\n    \\t\\tif (root == nullptr) return;\\n    \\n    \\t\\tss << root->val;\\n    \\t\\tif (root->left != nullptr || root->right != nullptr) {\\n    \\t\\t\\tss << \"[\";\\n    \\t\\t\\tserialize(root->left, ss);\\n    \\t\\t\\tss << \",\";\\n    \\t\\t\\tserialize(root->right, ss);\\n    \\t\\t\\tss << \"]\";\\n    \\t\\t}\\n    \\t}\\n    \\n    \\tTreeNode* deserialize(string& data, int& pos) {\\n    \\t\\tint n = data.size();\\n    \\t\\tint i = pos;\\n    \\t\\tbool foundL = false;\\n    \\n    \\t\\twhile (i < n) {\\n    \\t\\t\\tif (data[i] == ',' || data[i] == ']') break;\\n    \\n    \\t\\t\\tif (data[i] == '[') {\\n    \\t\\t\\t\\tfoundL = true;\\n    \\t\\t\\t\\tbreak;\\n    \\t\\t\\t}\\n    \\n    \\t\\t\\ti++;\\n    \\t\\t}\\n    \\n    \\t\\tif (i == pos && i < n) return nullptr;\\n    \\n    \\t\\tint val = atoi(data.substr(pos, i - pos).c_str());\\n    \\t\\tauto node = new TreeNode(val);\\n    \\n    \\t\\tif (i == n) return node;\\n    \\n    \\t\\tpos = i;\\n    \\t\\tif (foundL) {\\n    \\t\\t\\t// find a '['\\n    \\t\\t\\tpos++; // skip '['\\n    \\t\\t\\tnode->left = deserialize(data, pos);\\n    \\t\\t\\tpos++; // skip ','\\n    \\t\\t\\tnode->right = deserialize(data, pos);\\n    \\t\\t\\tpos++; // skip ']'\\n    \\t\\t}\\n    \\n    \\t\\treturn node;\\n    \\t}\\n    \\n    public:    \\n    \\t// Encodes a tree to a single string.\\n    \\tstring serialize(TreeNode* root) {\\n    \\t\\tstringstream ss;\\n    \\t\\tserialize(root, ss);\\n    \\t\\treturn ss.str();\\n    \\t}\\n    \\n    \\t// Decodes your encoded data to tree.\\n    \\tTreeNode* deserialize(string data) {\\n    \\t\\tif (data.empty()) return nullptr;\\n    \\t\\tint pos = 0;\\n    \\t\\treturn deserialize(data, pos);\\n    \\t}\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "The serialization format looks like:   1[2[3,],4[5,6[,7]]], O(n) one-pass processing for both ser/deser\\n\\n\\n    class Codec {\\n    private:\\n    \\tvoid serialize(TreeNode* root, stringstream& ss) {\\n    \\t\\tif (root == nullptr) return;\\n    \\n    \\t\\tss << root->val;\\n    \\t\\tif (root->left != nullptr || root->right != nullptr) {\\n    \\t\\t\\tss << \"[\";\\n    \\t\\t\\tserialize(root->left, ss);\\n    \\t\\t\\tss << \",\";\\n    \\t\\t\\tserialize(root->right, ss);\\n    \\t\\t\\tss << \"]\";\\n    \\t\\t}\\n    \\t}\\n    \\n    \\tTreeNode* deserialize(string& data, int& pos) {\\n    \\t\\tint n = data.size();\\n    \\t\\tint i = pos;\\n    \\t\\tbool foundL = false;\\n    \\n    \\t\\twhile (i < n) {\\n    \\t\\t\\tif (data[i] == ',' || data[i] == ']') break;\\n    \\n    \\t\\t\\tif (data[i] == '[') {\\n    \\t\\t\\t\\tfoundL = true;\\n    \\t\\t\\t\\tbreak;\\n    \\t\\t\\t}\\n    \\n    \\t\\t\\ti++;\\n    \\t\\t}\\n    \\n    \\t\\tif (i == pos && i < n) return nullptr;\\n    \\n    \\t\\tint val = atoi(data.substr(pos, i - pos).c_str());\\n    \\t\\tauto node = new TreeNode(val);\\n    \\n    \\t\\tif (i == n) return node;\\n    \\n    \\t\\tpos = i;\\n    \\t\\tif (foundL) {\\n    \\t\\t\\t// find a '['\\n    \\t\\t\\tpos++; // skip '['\\n    \\t\\t\\tnode->left = deserialize(data, pos);\\n    \\t\\t\\tpos++; // skip ','\\n    \\t\\t\\tnode->right = deserialize(data, pos);\\n    \\t\\t\\tpos++; // skip ']'\\n    \\t\\t}\\n    \\n    \\t\\treturn node;\\n    \\t}\\n    \\n    public:    \\n    \\t// Encodes a tree to a single string.\\n    \\tstring serialize(TreeNode* root) {\\n    \\t\\tstringstream ss;\\n    \\t\\tserialize(root, ss);\\n    \\t\\treturn ss.str();\\n    \\t}\\n    \\n    \\t// Decodes your encoded data to tree.\\n    \\tTreeNode* deserialize(string data) {\\n    \\t\\tif (data.empty()) return nullptr;\\n    \\t\\tint pos = 0;\\n    \\t\\treturn deserialize(data, pos);\\n    \\t}\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 2617742,
                "title": "c-level-order-commented-and-readable-easy-to-understand",
                "content": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n// Level order traversal to turn the tree into a string.\\n        if(!root) return \"\";\\n        string s = \"\";\\n        \\n        queue<TreeNode*>q;\\n        q.push(root);\\n        \\n        while(!q.empty()){\\n            TreeNode* temp = q.front();\\n            q.pop();\\n\\n// Just one modification to level order traversal here is that if we find a null node, we still enter it into our string so that when we read it later while deserialising, we will know which is null and which is\\'nt.\\n            if(temp == NULL) s.append(\"#,\");\\n            else s.append(to_string(temp->val)+\\',\\');\\n            if(temp!=NULL){\\n                q.push(temp->left);\\n                q.push(temp->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0) return NULL;\\n// What stringstream does is that it takes the whole string in as an input like \"cin\". I\\'ll write more about it when I understand it better.\\n        stringstream s(data);\\n        string str;\\n// Now what getline does is that we take the s string made by stringstream, and then insert all the values before a comma into the string str. Like if we have the string 1,2,3,4,#,#,#,# then the first getline will make the root node = 1.\\n        getline(s, str, \\',\\');\\n// Here we make it a root node\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        \\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n// Now we start the bfs traversal, since we are done with our root node, our s moves on towards the next literal before the comma, now if its a # i.e. NULL, we set the current node\\'s left value as null, else if it contains a value then we simply just create a new node, set it as the left and then push it into the queue for further BFS traversal.\\n            getline(s, str, \\',\\');\\n            if(str == \"#\"){\\n                node->left = NULL;\\n            } else {\\n                TreeNode* leftnode = new TreeNode(stoi(str));\\n                node->left = leftnode;\\n                q.push(leftnode);\\n            }\\n\\n// As we did with the left side, since we are done with our root node, our s moves on towards the next literal before the comma, now if its a # i.e. NULL, we set the current node\\'s right value as null, else if it contains a value then we simply just create a new node, set it as the right and then push it into the queue for further BFS traversal.\\n            getline(s, str, \\',\\');\\n            if(str == \"#\"){\\n                node->right = NULL;\\n            } else {\\n                TreeNode* rightnode = new TreeNode(stoi(str));\\n                node->right = rightnode;\\n                q.push(rightnode);\\n            }\\n        }\\n// We keep on doing so and in the end we will finally get our tree.\\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Breadth-First Search",
                    "Queue"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n// Level order traversal to turn the tree into a string.\\n        if(!root) return \"\";\\n        string s = \"\";\\n        \\n        queue<TreeNode*>q;\\n        q.push(root);\\n        \\n        while(!q.empty()){\\n            TreeNode* temp = q.front();\\n            q.pop();\\n\\n// Just one modification to level order traversal here is that if we find a null node, we still enter it into our string so that when we read it later while deserialising, we will know which is null and which is\\'nt.\\n            if(temp == NULL) s.append(\"#,\");\\n            else s.append(to_string(temp->val)+\\',\\');\\n            if(temp!=NULL){\\n                q.push(temp->left);\\n                q.push(temp->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0) return NULL;\\n// What stringstream does is that it takes the whole string in as an input like \"cin\". I\\'ll write more about it when I understand it better.\\n        stringstream s(data);\\n        string str;\\n// Now what getline does is that we take the s string made by stringstream, and then insert all the values before a comma into the string str. Like if we have the string 1,2,3,4,#,#,#,# then the first getline will make the root node = 1.\\n        getline(s, str, \\',\\');\\n// Here we make it a root node\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        \\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n// Now we start the bfs traversal, since we are done with our root node, our s moves on towards the next literal before the comma, now if its a # i.e. NULL, we set the current node\\'s left value as null, else if it contains a value then we simply just create a new node, set it as the left and then push it into the queue for further BFS traversal.\\n            getline(s, str, \\',\\');\\n            if(str == \"#\"){\\n                node->left = NULL;\\n            } else {\\n                TreeNode* leftnode = new TreeNode(stoi(str));\\n                node->left = leftnode;\\n                q.push(leftnode);\\n            }\\n\\n// As we did with the left side, since we are done with our root node, our s moves on towards the next literal before the comma, now if its a # i.e. NULL, we set the current node\\'s right value as null, else if it contains a value then we simply just create a new node, set it as the right and then push it into the queue for further BFS traversal.\\n            getline(s, str, \\',\\');\\n            if(str == \"#\"){\\n                node->right = NULL;\\n            } else {\\n                TreeNode* rightnode = new TreeNode(stoi(str));\\n                node->right = rightnode;\\n                q.push(rightnode);\\n            }\\n        }\\n// We keep on doing so and in the end we will finally get our tree.\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2109246,
                "title": "python3-dfs-easy-to-understand-solution",
                "content": "```\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        res = []\\n        def preorder(root):\\n            if not root:\\n                res.append(\\'N\\')\\n                return\\n            res.append(str(root.val))\\n            preorder(root.left)\\n            preorder(root.right)\\n        preorder(root)\\n        return \\',\\'.join(res)\\n\\n    def deserialize(self, data):\\n        data = data.split(\\',\\') # now, data = res\\n        self.i = 0\\n        def preorder():\\n            if data[self.i] == \\'N\\':\\n                self.i += 1\\n                return None\\n            root = TreeNode(int(data[self.i]))\\n            self.i += 1\\n            root.left = preorder()\\n            root.right = preorder()\\n            return root\\n        \\n        return preorder()\\n    \\n# Time: O(N)\\n# Space: O(N)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        res = []\\n        def preorder(root):\\n            if not root:\\n                res.append(\\'N\\')\\n                return\\n            res.append(str(root.val))\\n            preorder(root.left)\\n            preorder(root.right)\\n        preorder(root)\\n        return \\',\\'.join(res)\\n\\n    def deserialize(self, data):\\n        data = data.split(\\',\\') # now, data = res\\n        self.i = 0\\n        def preorder():\\n            if data[self.i] == \\'N\\':\\n                self.i += 1\\n                return None\\n            root = TreeNode(int(data[self.i]))\\n            self.i += 1\\n            root.left = preorder()\\n            root.right = preorder()\\n            return root\\n        \\n        return preorder()\\n    \\n# Time: O(N)\\n# Space: O(N)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1478215,
                "title": "javascript-99-easy-solution-bonus-1-liner",
                "content": "![image](https://assets.leetcode.com/users/images/f94d03da-136e-4df8-b8e3-4ad7ef985fc1_1632291055.7611206.png)\\n\\nDoing the Blind 75 and posting all solutions.\\n(If you want the HAS to be a string version, scroll down a bit.  The difference between this one and string version is just a \\n.join(\\',\\') and .split(\\',\\') though.)\\n```\\nvar serialize = function(root) {\\n  const answer = [];\\n  function serialize(node) {\\n    if (!node) return answer.push(null);\\n    serialize(node.right);\\n    serialize(node.left);\\n    answer.push(node.val);\\n  }\\n  serialize(root);\\n  //Answer array is reversed postorder.  That way\\n  //I can .pop() in the next part instead of .shift()\\n  //since .shift is an O(n) operation on its own\\n  //due to the fact that it has to reindex the\\n  //rest of the array.  Also, if we want to return\\n  //it as a string, we can .join(\\',\\') and the .split(\\',\\')\\n  //after it has been passed.  Or, JSON.stringify()\\n  //and JSON.parse() work too...  But they work for\\n  //the entire object, so I\\'m not sure where the line \\n  //for cheating is on this one. lol\\n  return answer;\\n};\\n\\nvar deserialize = function(data) {\\n  function build() {\\n    const curVal = data.pop();\\n    if (curVal === null) return null;\\n    const node = new TreeNode(curVal);\\n    node.left = build();\\n    node.right = build();\\n    return node;\\n  }\\n  return build();\\n};\\n```\\n\\nOr, if you could always use this cheeky one-liner that \\nwould 100% be cheating in an interview...  But passes\\nthe test cases here in record time. \\n```\\nconst serialize = root => JSON.stringify(root), deserialize = (data) => JSON.parse(data);\\n```\\n\\nWorking version for the string sticklers:\\n```\\nvar serialize = function(root) {\\n  const answer = [];\\n  function serialize(node) {\\n    if (!node) return answer.push(null);\\n    serialize(node.right);\\n    serialize(node.left);\\n    answer.push(node.val);\\n  }\\n  serialize(root);\\n  return answer.join(\\',\\');\\n};\\n\\nvar deserialize = function(data) {\\n  data = data.split(\\',\\');\\n  function build() {\\n    const curVal = data.pop();\\n    if (curVal === \\'\\') return null;\\n    const node = new TreeNode(+curVal);\\n    node.left = build();\\n    node.right = build();\\n    return node;\\n  }\\n  return build();\\n};\\n```\\n\\nSince someone said it would be slow if converted to string and back.\\n![image](https://assets.leetcode.com/users/images/4ff43b50-7a72-4d91-b370-6836f9f6bdba_1632332234.63363.png)\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar serialize = function(root) {\\n  const answer = [];\\n  function serialize(node) {\\n    if (!node) return answer.push(null);\\n    serialize(node.right);\\n    serialize(node.left);\\n    answer.push(node.val);\\n  }\\n  serialize(root);\\n  //Answer array is reversed postorder.  That way\\n  //I can .pop() in the next part instead of .shift()\\n  //since .shift is an O(n) operation on its own\\n  //due to the fact that it has to reindex the\\n  //rest of the array.  Also, if we want to return\\n  //it as a string, we can .join(\\',\\') and the .split(\\',\\')\\n  //after it has been passed.  Or, JSON.stringify()\\n  //and JSON.parse() work too...  But they work for\\n  //the entire object, so I\\'m not sure where the line \\n  //for cheating is on this one. lol\\n  return answer;\\n};\\n\\nvar deserialize = function(data) {\\n  function build() {\\n    const curVal = data.pop();\\n    if (curVal === null) return null;\\n    const node = new TreeNode(curVal);\\n    node.left = build();\\n    node.right = build();\\n    return node;\\n  }\\n  return build();\\n};\\n```\n```\\nconst serialize = root => JSON.stringify(root), deserialize = (data) => JSON.parse(data);\\n```\n```\\nvar serialize = function(root) {\\n  const answer = [];\\n  function serialize(node) {\\n    if (!node) return answer.push(null);\\n    serialize(node.right);\\n    serialize(node.left);\\n    answer.push(node.val);\\n  }\\n  serialize(root);\\n  return answer.join(\\',\\');\\n};\\n\\nvar deserialize = function(data) {\\n  data = data.split(\\',\\');\\n  function build() {\\n    const curVal = data.pop();\\n    if (curVal === \\'\\') return null;\\n    const node = new TreeNode(+curVal);\\n    node.left = build();\\n    node.right = build();\\n    return node;\\n  }\\n  return build();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1357227,
                "title": "java-easy-to-understand",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder str = new StringBuilder();\\n        serailizeHelper(root,str);\\n        return str.toString();\\n    }\\n    void serailizeHelper(TreeNode root,StringBuilder str)\\n    {\\n        if(root == null)\\n        {\\n            str.append(\"null,\");\\n            return ;\\n        }\\n        str.append(root.val+\",\");\\n        serailizeHelper(root.left,str);\\n        serailizeHelper(root.right,str);\\n    }\\n    // Decodes your encoded data to tree.\\n    int index ;\\n    public TreeNode deserialize(String data) {\\n        String[] arr = data.split(\",\");\\n        index = 0;\\n        return deserializeHelper(arr);\\n    }\\n    TreeNode deserializeHelper(String[] arr)\\n    {\\n        if(index >= arr.length || arr[index].equals(\"null\"))\\n        {\\n            index++;\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(arr[index++]));\\n        root.left = deserializeHelper(arr);\\n        root.right = deserializeHelper(arr);\\n        \\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```\\nPlease upvote if u find my code easy to understand",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder str = new StringBuilder();\\n        serailizeHelper(root,str);\\n        return str.toString();\\n    }\\n    void serailizeHelper(TreeNode root,StringBuilder str)\\n    {\\n        if(root == null)\\n        {\\n            str.append(\"null,\");\\n            return ;\\n        }\\n        str.append(root.val+\",\");\\n        serailizeHelper(root.left,str);\\n        serailizeHelper(root.right,str);\\n    }\\n    // Decodes your encoded data to tree.\\n    int index ;\\n    public TreeNode deserialize(String data) {\\n        String[] arr = data.split(\",\");\\n        index = 0;\\n        return deserializeHelper(arr);\\n    }\\n    TreeNode deserializeHelper(String[] arr)\\n    {\\n        if(index >= arr.length || arr[index].equals(\"null\"))\\n        {\\n            index++;\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(arr[index++]));\\n        root.left = deserializeHelper(arr);\\n        root.right = deserializeHelper(arr);\\n        \\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 603065,
                "title": "bfs-java-solution-clean-code",
                "content": "```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        \\n        StringBuilder seq = new StringBuilder();\\n        seq.append(root.val + \"/\");\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        \\n        while (!q.isEmpty()) {\\n            TreeNode cur = q.poll();\\n            \\n            if (cur.left == null) {\\n                seq.append(\"null/\");\\n            } else {\\n                seq.append(cur.left.val + \"/\");\\n                q.offer(cur.left);\\n            }\\n            \\n            if (cur.right == null) {\\n                seq.append(\"null/\");\\n            } else {\\n                seq.append(cur.right.val + \"/\");\\n                q.offer(cur.right);\\n            }\\n        }\\n        \\n        return seq.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data.isBlank()) return null;\\n        \\n        String[] parsedData = data.split(\"/\");\\n        \\n        TreeNode root = new TreeNode(Integer.parseInt(parsedData[0]));\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        \\n        int idx = 0;\\n        \\n        while (!q.isEmpty()) {\\n            TreeNode cur = q.poll();\\n    \\n            idx++;\\n            if (idx < parsedData.length) {\\n                if (parsedData[idx].equals(\"null\")) {\\n                    cur.left = null;\\n                } else {\\n                    cur.left = new TreeNode(Integer.parseInt(parsedData[idx]));\\n                    q.offer(cur.left);\\n                }\\n            }\\n            \\n            idx++;\\n            if (idx < parsedData.length) {\\n                if (parsedData[idx].equals(\"null\")) {\\n                    cur.right = null;\\n                } else {\\n                    cur.right = new TreeNode(Integer.parseInt(parsedData[idx]));\\n                    q.offer(cur.right);\\n                }\\n            }\\n        }\\n        \\n        return root;\\n    }\\n}\\n```\\nTime Complexity: O(n)\\nSpace Complexity: O(n)\\n",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        \\n        StringBuilder seq = new StringBuilder();\\n        seq.append(root.val + \"/\");\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        \\n        while (!q.isEmpty()) {\\n            TreeNode cur = q.poll();\\n            \\n            if (cur.left == null) {\\n                seq.append(\"null/\");\\n            } else {\\n                seq.append(cur.left.val + \"/\");\\n                q.offer(cur.left);\\n            }\\n            \\n            if (cur.right == null) {\\n                seq.append(\"null/\");\\n            } else {\\n                seq.append(cur.right.val + \"/\");\\n                q.offer(cur.right);\\n            }\\n        }\\n        \\n        return seq.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data.isBlank()) return null;\\n        \\n        String[] parsedData = data.split(\"/\");\\n        \\n        TreeNode root = new TreeNode(Integer.parseInt(parsedData[0]));\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        \\n        int idx = 0;\\n        \\n        while (!q.isEmpty()) {\\n            TreeNode cur = q.poll();\\n    \\n            idx++;\\n            if (idx < parsedData.length) {\\n                if (parsedData[idx].equals(\"null\")) {\\n                    cur.left = null;\\n                } else {\\n                    cur.left = new TreeNode(Integer.parseInt(parsedData[idx]));\\n                    q.offer(cur.left);\\n                }\\n            }\\n            \\n            idx++;\\n            if (idx < parsedData.length) {\\n                if (parsedData[idx].equals(\"null\")) {\\n                    cur.right = null;\\n                } else {\\n                    cur.right = new TreeNode(Integer.parseInt(parsedData[idx]));\\n                    q.offer(cur.right);\\n                }\\n            }\\n        }\\n        \\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 471827,
                "title": "java-bfs-iterative-dfs-recursion-dfs-iterative",
                "content": "Key point:\\nThe DFS interative is the much more complex, and that is why this is a hard question.\\nBut it is possible some self-thought-smart interviewer to ask you to implement the iterative DFS, so no harm to grab it.\\n\\nQueue;\\n// 1) the implementation of Queue to allow null value(LinkedList rather than ArrayDeque)\\n// 2) the algorithm to deserialize using Queue\\n\\n```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode curr = q.poll();\\n            if (curr == null){\\n                sb.append(\"null \");\\n            } else {\\n                sb.append(curr.val + \" \");\\n                q.add(curr.left);\\n                q.add(curr.right);\\n            }\\n        }\\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] d = data.split(\" \");\\n        if (d[0].equals(\"null\")) return null;\\n        TreeNode root = new TreeNode(Integer.parseInt(d[0]));\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        int i = 0;\\n        while(i < d.length - 1){\\n            TreeNode curr = q.poll();\\n            if (!d[++i].equals(\"null\")){  //must be ++idx other than idx++ in the next line;\\n                curr.left = new TreeNode(Integer.parseInt(d[i]));\\n                q.add(curr.left);\\n            }\\n            if (!d[++i].equals(\"null\")){\\n                curr.right = new TreeNode(Integer.parseInt(d[i]));\\n                q.add(curr.right);\\n            }\\n        }\\n        return root;        \\n    }\\n}\\n```\\n\\nRecursion:\\n```\\npublic class Codec {\\n    \\n    private String del = \",\";\\n    private String nil = \"nil\";\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        serial(sb, root);\\n        return sb.toString();\\n    }\\n    \\n    private void serial(StringBuilder sb, TreeNode node) {\\n        // System.out.println(sb.toString());\\n        if (node  == null) {   // check null as DFS terminator\\n            sb.append(nil);\\n            return;\\n        }\\n        sb.append(node.val).append(del);\\n        serial(sb, node.left);\\n        sb.append(del);\\n        serial(sb, node.right);\\n        System.out.println(sb.toString());\\n    }\\n    // Decodes your encoded data to tree.\\n    int idx;\\n    public TreeNode deserialize(String data) {\\n        String[] ss = data.split(del);\\n        idx = 0;\\n        return ds(ss);\\n    }\\n    \\n    private TreeNode ds(String[] ss) {\\n        if (idx >= ss.length) return null;\\n        String next = ss[idx++];\\n        if (next.equals(nil)) return null;  // check null as DFS terminator\\n        // System.out.println(next);\\n        TreeNode root = new TreeNode(Integer.valueOf(next));\\n        root.left = ds(ss);\\n        root.right = ds(ss);\\n        return root;\\n    }\\n}\\n```\\n\\nDFS interative:\\n```\\npublic class Codec {\\n    \\n    private String del = \",\";\\n    private String nil = \"nil\";\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        Stack<TreeNode> st = new Stack<>();\\n        TreeNode curr = root;\\n        StringBuilder sb = new StringBuilder();\\n        while(curr != null || !st.isEmpty()) {\\n            if (curr != null) {\\n                sb.append(String.valueOf(curr.val)).append(del);\\n                st.push(curr);\\n                curr = curr.left;\\n            } else {\\n                sb.append(nil).append(del);\\n                curr = st.pop();\\n                curr = curr.right;\\n            }\\n        }\\n        System.out.println(sb.toString());\\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data == null || data.length() == 0) return null;\\n        String[] ss = data.split(del);\\n        int idx = 0;\\n        Stack<TreeNode> st = new Stack<>();\\n        if (ss[idx].equals(nil)) return null;\\n        TreeNode root = new TreeNode(Integer.valueOf(ss[idx++]));\\n        st.push(root);\\n        TreeNode curr = root;\\n        while (idx < ss.length) {\\n            while (idx < ss.length && !ss[idx].equals(nil)) {\\n                curr.left = new TreeNode(Integer.valueOf(ss[idx++]));\\n                curr = curr.left;\\n                st.push(curr);\\n            }\\n            while (idx < ss.length && ss[idx].equals(nil) && !st.isEmpty()) {\\n                curr = st.pop();\\n                idx++;\\n            }\\n            if (idx < ss.length && !ss[idx].equals(nil)) {\\n                curr.right = new TreeNode(Integer.valueOf(ss[idx++]));\\n                curr = curr.right;\\n                st.push(curr);\\n            };\\n        }\\n        return root;\\n    }\\n}\\n```\\n\\n\\nRef:\\nhttps://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/74260/Recursive-DFS-Iterative-DFS-and-BFS",
                "solutionTags": [],
                "code": "```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode curr = q.poll();\\n            if (curr == null){\\n                sb.append(\"null \");\\n            } else {\\n                sb.append(curr.val + \" \");\\n                q.add(curr.left);\\n                q.add(curr.right);\\n            }\\n        }\\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] d = data.split(\" \");\\n        if (d[0].equals(\"null\")) return null;\\n        TreeNode root = new TreeNode(Integer.parseInt(d[0]));\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        int i = 0;\\n        while(i < d.length - 1){\\n            TreeNode curr = q.poll();\\n            if (!d[++i].equals(\"null\")){  //must be ++idx other than idx++ in the next line;\\n                curr.left = new TreeNode(Integer.parseInt(d[i]));\\n                q.add(curr.left);\\n            }\\n            if (!d[++i].equals(\"null\")){\\n                curr.right = new TreeNode(Integer.parseInt(d[i]));\\n                q.add(curr.right);\\n            }\\n        }\\n        return root;        \\n    }\\n}\\n```\n```\\npublic class Codec {\\n    \\n    private String del = \",\";\\n    private String nil = \"nil\";\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        serial(sb, root);\\n        return sb.toString();\\n    }\\n    \\n    private void serial(StringBuilder sb, TreeNode node) {\\n        // System.out.println(sb.toString());\\n        if (node  == null) {   // check null as DFS terminator\\n            sb.append(nil);\\n            return;\\n        }\\n        sb.append(node.val).append(del);\\n        serial(sb, node.left);\\n        sb.append(del);\\n        serial(sb, node.right);\\n        System.out.println(sb.toString());\\n    }\\n    // Decodes your encoded data to tree.\\n    int idx;\\n    public TreeNode deserialize(String data) {\\n        String[] ss = data.split(del);\\n        idx = 0;\\n        return ds(ss);\\n    }\\n    \\n    private TreeNode ds(String[] ss) {\\n        if (idx >= ss.length) return null;\\n        String next = ss[idx++];\\n        if (next.equals(nil)) return null;  // check null as DFS terminator\\n        // System.out.println(next);\\n        TreeNode root = new TreeNode(Integer.valueOf(next));\\n        root.left = ds(ss);\\n        root.right = ds(ss);\\n        return root;\\n    }\\n}\\n```\n```\\npublic class Codec {\\n    \\n    private String del = \",\";\\n    private String nil = \"nil\";\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        Stack<TreeNode> st = new Stack<>();\\n        TreeNode curr = root;\\n        StringBuilder sb = new StringBuilder();\\n        while(curr != null || !st.isEmpty()) {\\n            if (curr != null) {\\n                sb.append(String.valueOf(curr.val)).append(del);\\n                st.push(curr);\\n                curr = curr.left;\\n            } else {\\n                sb.append(nil).append(del);\\n                curr = st.pop();\\n                curr = curr.right;\\n            }\\n        }\\n        System.out.println(sb.toString());\\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data == null || data.length() == 0) return null;\\n        String[] ss = data.split(del);\\n        int idx = 0;\\n        Stack<TreeNode> st = new Stack<>();\\n        if (ss[idx].equals(nil)) return null;\\n        TreeNode root = new TreeNode(Integer.valueOf(ss[idx++]));\\n        st.push(root);\\n        TreeNode curr = root;\\n        while (idx < ss.length) {\\n            while (idx < ss.length && !ss[idx].equals(nil)) {\\n                curr.left = new TreeNode(Integer.valueOf(ss[idx++]));\\n                curr = curr.left;\\n                st.push(curr);\\n            }\\n            while (idx < ss.length && ss[idx].equals(nil) && !st.isEmpty()) {\\n                curr = st.pop();\\n                idx++;\\n            }\\n            if (idx < ss.length && !ss[idx].equals(nil)) {\\n                curr.right = new TreeNode(Integer.valueOf(ss[idx++]));\\n                curr = curr.right;\\n                st.push(curr);\\n            };\\n        }\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 185031,
                "title": "c-preorder-dfs-understandable",
                "content": "```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n      if (root == null) return \"null\";\\n      return  root.val + \",\" + serialize(root.left) + \",\" + serialize(root.right);\\n    }\\n\\n    private TreeNode deserialize(Queue<string> data) {\\n      var val = data.Dequeue();\\n      if (val == \"null\") return null;\\n      var newTree = new TreeNode(Convert.ToInt32(val));\\n      newTree.left = deserialize(data);\\n      newTree.right = deserialize(data);\\n      return newTree;\\n    }\\n  \\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n      var q = new Queue<string>();\\n      foreach(var v in data.Split(\\',\\')) q.Enqueue(v);\\n      return deserialize(q);\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n      if (root == null) return \"null\";\\n      return  root.val + \",\" + serialize(root.left) + \",\" + serialize(root.right);\\n    }\\n\\n    private TreeNode deserialize(Queue<string> data) {\\n      var val = data.Dequeue();\\n      if (val == \"null\") return null;\\n      var newTree = new TreeNode(Convert.ToInt32(val));\\n      newTree.left = deserialize(data);\\n      newTree.right = deserialize(data);\\n      return newTree;\\n    }\\n  \\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n      var q = new Queue<string>();\\n      foreach(var v in data.Split(\\',\\')) q.Enqueue(v);\\n      return deserialize(q);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 160613,
                "title": "c-inorder-recursive-solution",
                "content": "The idea is to add extra \\'mark\\' to label the right subtree (I used bracket) in the serialized string like the following format: \\n \\n left subtree, root, [ right subtree ] \\n \\nThis way in decoding one can tell whether the next node is the root or the right substree of the current node. For example, the following tree:\\n &nbsp;&nbsp; &nbsp;  1\\n &nbsp; &nbsp;&nbsp;   /    \\\\\\\\\\n&nbsp;&nbsp;  2  &nbsp;    4\\n&nbsp;&nbsp;&nbsp; \\\\\\\\\\n&nbsp;&nbsp;&nbsp; &nbsp;3 \\nis encoded as  2, [, 3, ], 1, [, 4, ]\\n\\n```\\nclass Codec {\\npublic:\\n    string serialize(TreeNode* root) {\\n        string tr;\\n        if (!root) return tr;\\n        string lt = serialize(root->left);\\n        string rt = serialize(root->right);\\n        if (!lt.empty()) tr = lt+\",\";\\n        tr += to_string(root->val);\\n        if (!rt.empty()) tr += \",[,\" + rt +\",]\";\\n        return tr;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int i=0;\\n        return read_recursive(data, i);\\n    }\\n    \\n    TreeNode* read_recursive(string& data, int& i) {\\n        TreeNode* pt=NULL;        \\n        while (i<data.length()) {\\n            string dat = read_dat(data, i);\\n            if (dat.compare(\"[\") == 0) pt->right = read_recursive(data, i);\\n            else if (dat.compare(\"]\") == 0) return pt;\\n            else {\\n                TreeNode* pnew = new TreeNode(stoi(dat));\\n                pnew->left = pt;\\n                pt = pnew;\\n            }\\n        }\\n        return pt;        \\n    }    \\n    \\n    string read_dat(const string& data, int& i) {\\n        int p=i;\\n        while (p<data.length() && data[p] != \\',\\') ++p;\\n        string ans=data.substr(i, p-i);\\n        i = p+1;\\n        return ans;\\n    }   \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec {\\npublic:\\n    string serialize(TreeNode* root) {\\n        string tr;\\n        if (!root) return tr;\\n        string lt = serialize(root->left);\\n        string rt = serialize(root->right);\\n        if (!lt.empty()) tr = lt+\",\";\\n        tr += to_string(root->val);\\n        if (!rt.empty()) tr += \",[,\" + rt +\",]\";\\n        return tr;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int i=0;\\n        return read_recursive(data, i);\\n    }\\n    \\n    TreeNode* read_recursive(string& data, int& i) {\\n        TreeNode* pt=NULL;        \\n        while (i<data.length()) {\\n            string dat = read_dat(data, i);\\n            if (dat.compare(\"[\") == 0) pt->right = read_recursive(data, i);\\n            else if (dat.compare(\"]\") == 0) return pt;\\n            else {\\n                TreeNode* pnew = new TreeNode(stoi(dat));\\n                pnew->left = pt;\\n                pt = pnew;\\n            }\\n        }\\n        return pt;        \\n    }    \\n    \\n    string read_dat(const string& data, int& i) {\\n        int p=i;\\n        while (p<data.length() && data[p] != \\',\\') ++p;\\n        string ans=data.substr(i, p-i);\\n        i = p+1;\\n        return ans;\\n    }   \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 155886,
                "title": "super-simple-java-solution-beats-95",
                "content": "```\\n\\t public String serialize(TreeNode root) {\\t\\t \\n\\t\\t return traverse(root,new StringBuilder()).toString();\\n\\t }\\n\\t StringBuilder traverse(TreeNode root, StringBuilder sb){\\n\\t\\t if(root==null){\\n\\t\\t\\t sb.append(\"#,\");\\n\\t\\t }else{\\n\\t\\t\\t sb.append(root.val+\",\");\\n\\t\\t\\t traverse(root.left,sb);\\n\\t\\t\\t traverse(root.right,sb);\\n\\t\\t }\\n\\t\\t return sb;\\n\\t }\\n\\t \\n\\t public TreeNode deserialize(String data) { \\n\\t\\t return traverse(new int[1],data.split(\",\"));\\n\\t }\\n\\t TreeNode traverse(int[] index, String[] spilited){\\n\\t\\t if(spilited[index[0]].equals(\"#\")) return null;\\n\\t\\t TreeNode root = new TreeNode(Integer.parseInt(spilited[index[0]]));\\n\\t\\t index[0]++; root.left=traverse(index,spilited); //use objects (Int Array) instead of primitive to use Heap memory not Stack\\n\\t\\t index[0]++; root.right=traverse(index,spilited);\\n\\t\\t return root;\\n\\t }\\n```",
                "solutionTags": [],
                "code": "```\\n\\t public String serialize(TreeNode root) {\\t\\t \\n\\t\\t return traverse(root,new StringBuilder()).toString();\\n\\t }\\n\\t StringBuilder traverse(TreeNode root, StringBuilder sb){\\n\\t\\t if(root==null){\\n\\t\\t\\t sb.append(\"#,\");\\n\\t\\t }else{\\n\\t\\t\\t sb.append(root.val+\",\");\\n\\t\\t\\t traverse(root.left,sb);\\n\\t\\t\\t traverse(root.right,sb);\\n\\t\\t }\\n\\t\\t return sb;\\n\\t }\\n\\t \\n\\t public TreeNode deserialize(String data) { \\n\\t\\t return traverse(new int[1],data.split(\",\"));\\n\\t }\\n\\t TreeNode traverse(int[] index, String[] spilited){\\n\\t\\t if(spilited[index[0]].equals(\"#\")) return null;\\n\\t\\t TreeNode root = new TreeNode(Integer.parseInt(spilited[index[0]]));\\n\\t\\t index[0]++; root.left=traverse(index,spilited); //use objects (Int Array) instead of primitive to use Heap memory not Stack\\n\\t\\t index[0]++; root.right=traverse(index,spilited);\\n\\t\\t return root;\\n\\t }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 137645,
                "title": "bfs",
                "content": "If we traverse the tree in some order and save data passed.\\nGiven data, we can build the tree in the order.\\nHere we choose BFS.\\n```\\n 1\\n  \\\\\\n   2\\nserialize to 1,x,2,x,x,x,x for x represents null nodes\\nwe have to consider null nodes to memorize tree structure\\n```\\n***\\n    private final static String DELIMITER = \",\";\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) { \\n        if (root == null) return \"\";\\n        StringBuilder result = new StringBuilder();\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        result.append(root.val).append(DELIMITER);\\n        queue.offer(root);\\n        // bfs\\n        while (!queue.isEmpty()) {\\n            TreeNode node = queue.poll();\\n            if (node.left == null) result.append(\"x\").append(DELIMITER);\\n            else {\\n                result.append(node.left.val).append(DELIMITER);\\n                queue.offer(node.left);\\n            }\\n            // for right as well\\n            if (node.right == null) result.append(\"x\").append(DELIMITER);\\n            else {\\n                result.append(node.right.val).append(DELIMITER);\\n                queue.offer(node.right);                    \\n            }\\n        }\\n        return result.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data.isEmpty()) return null;\\n        \\n        String[] values = data.split(DELIMITER);\\n        TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        queue.offer(root);\\n        int i = 1;\\n        \\n        while (!queue.isEmpty()) {\\n            TreeNode node = queue.poll();\\n            TreeNode leftnode;\\n            if (values[i].equals(\"x\")) leftnode = null;\\n            else {\\n                leftnode = new TreeNode(Integer.parseInt(values[i]));\\n                queue.offer(leftnode);\\n            }\\n            i++;\\n            TreeNode rightnode;\\n            if (values[i].equals(\"x\")) rightnode = null;\\n            else {\\n                rightnode = new TreeNode(Integer.parseInt(values[i]));\\n                queue.offer(rightnode);\\n            }\\n            i++;\\n            \\n            node.left = leftnode;\\n            node.right = rightnode;\\n        }\\n        return root;\\n    }\\n```",
                "solutionTags": [
                    "Breadth-First Search"
                ],
                "code": "```\\n 1\\n  \\\\\\n   2\\nserialize to 1,x,2,x,x,x,x for x represents null nodes\\nwe have to consider null nodes to memorize tree structure\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 74270,
                "title": "c-8-lines-cheat-solution-22-ms-beats-99-57-and-a-bfs-solution",
                "content": "**Solution 1**\\n\\nCheat.\\n```\\nclass Codec {\\nprivate:\\n    unordered_map<TreeNode*, string>tree2string;\\n    unordered_map<string, TreeNode*>string2tree;\\n    int count = 0;\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = to_string(count++);\\n        tree2string[root] = s;\\n        string2tree[s] = root;\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        return string2tree[data];\\n    }\\n};\\n```\\n***\\n**Solution 2**\\n\\nNormal BFS solution using deque.\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        deque<TreeNode*>cur;\\n        deque<TreeNode*>sub;\\n        cur.push_back(root);\\n        while(!cur.empty()){\\n            TreeNode* node = cur.front();\\n            cur.pop_front();\\n            s.append(node ? to_string(node->val) + \",\" : \",\");\\n            if(node){\\n                sub.push_back(node->left);\\n                sub.push_back(node->right);\\n            }\\n            if(cur.empty()) swap(cur, sub);\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0) return NULL;\\n        string s;\\n        stringstream ss(data);\\n        getline(ss, s, ',');\\n        TreeNode* root = new TreeNode(stoi(s));\\n        deque<TreeNode*>q;\\n        q.push_back(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop_front();\\n            getline(ss, s, ',');\\n            TreeNode* left = s.size() ? new TreeNode(stoi(s)) : NULL;\\n            getline(ss, s, ',');\\n            TreeNode* right = s.size() ? new TreeNode(stoi(s)) : NULL;\\n            node->left = left;\\n            node->right = right;\\n            if(left) q.push_back(left);\\n            if(right) q.push_back(right);\\n        }\\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Codec {\\nprivate:\\n    unordered_map<TreeNode*, string>tree2string;\\n    unordered_map<string, TreeNode*>string2tree;\\n    int count = 0;\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = to_string(count++);\\n        tree2string[root] = s;\\n        string2tree[s] = root;\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        return string2tree[data];\\n    }\\n};\\n```\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        deque<TreeNode*>cur;\\n        deque<TreeNode*>sub;\\n        cur.push_back(root);\\n        while(!cur.empty()){\\n            TreeNode* node = cur.front();\\n            cur.pop_front();\\n            s.append(node ? to_string(node->val) + \",\" : \",\");\\n            if(node){\\n                sub.push_back(node->left);\\n                sub.push_back(node->right);\\n            }\\n            if(cur.empty()) swap(cur, sub);\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0) return NULL;\\n        string s;\\n        stringstream ss(data);\\n        getline(ss, s, ',');\\n        TreeNode* root = new TreeNode(stoi(s));\\n        deque<TreeNode*>q;\\n        q.push_back(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop_front();\\n            getline(ss, s, ',');\\n            TreeNode* left = s.size() ? new TreeNode(stoi(s)) : NULL;\\n            getline(ss, s, ',');\\n            TreeNode* right = s.size() ? new TreeNode(stoi(s)) : NULL;\\n            node->left = left;\\n            node->right = right;\\n            if(left) q.push_back(left);\\n            if(right) q.push_back(right);\\n        }\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74447,
                "title": "java-stack-based-solution-using-json",
                "content": "    public class Codec {\\n        public String serialize(TreeNode root) {\\n    \\t\\treturn root==null?\"n\":\"[v:\"+root.val+\\n    \\t\\t    \",l:\"+serialize(root.left)+\",r:\"+serialize(root.right)+\"]\";\\n        }\\n        public TreeNode deserialize(String data) {\\n        \\tDeque<String> stack = new LinkedList<String>();\\n        \\tDeque<TreeNode> nodeStack = new LinkedList<TreeNode>();\\n        \\tStringBuilder sb = new StringBuilder();\\n        \\tfor (char c: data.toCharArray()){\\n        \\t\\tif (c == '[' || c == ',' || c == ']'){\\n        \\t\\t\\tstack.push(sb.toString());\\n        \\t\\t\\tsb.setLength(0);\\n                    stack.push(String.valueOf(c));\\n                    if (c == ']'){\\n            \\t\\t\\tTreeNode t = new TreeNode(0);\\n            \\t\\t\\tString str = null;\\n            \\t\\t\\twhile (!(str = stack.pop()).equals(\"[\"))\\n            \\t\\t\\t\\tif (str.startsWith(\"v:\"))\\n            \\t\\t\\t\\t\\tt.val = Integer.parseInt(str.substring(2));\\n            \\t\\t\\t\\telse if (str.equals(\"l:\"))\\n            \\t\\t\\t\\t\\tt.left = nodeStack.pop();\\n            \\t\\t\\t\\telse if (str.equals(\"r:\"))\\n            \\t\\t\\t\\t\\tt.right = nodeStack.pop();\\n            \\t\\t\\tnodeStack.push(t);\\n            \\t\\t}\\n        \\t\\t}\\n        \\t\\telse\\n        \\t\\t\\tsb.append(c);\\n        \\t}\\n    \\t\\treturn nodeStack.isEmpty()?null:nodeStack.pop();\\n    \\t}\\n    }",
                "solutionTags": [],
                "code": "    public class Codec {\\n        public String serialize(TreeNode root) {\\n    \\t\\treturn root==null?\"n\":\"[v:\"+root.val+\\n    \\t\\t    \",l:\"+serialize(root.left)+\",r:\"+serialize(root.right)+\"]\";\\n        }\\n        public TreeNode deserialize(String data) {\\n        \\tDeque<String> stack = new LinkedList<String>();\\n        \\tDeque<TreeNode> nodeStack = new LinkedList<TreeNode>();\\n        \\tStringBuilder sb = new StringBuilder();\\n        \\tfor (char c: data.toCharArray()){\\n        \\t\\tif (c == '[' || c == ',' || c == ']'){\\n        \\t\\t\\tstack.push(sb.toString());\\n        \\t\\t\\tsb.setLength(0);\\n                    stack.push(String.valueOf(c));\\n                    if (c == ']'){\\n            \\t\\t\\tTreeNode t = new TreeNode(0);\\n            \\t\\t\\tString str = null;\\n            \\t\\t\\twhile (!(str = stack.pop()).equals(\"[\"))\\n            \\t\\t\\t\\tif (str.startsWith(\"v:\"))\\n            \\t\\t\\t\\t\\tt.val = Integer.parseInt(str.substring(2));\\n            \\t\\t\\t\\telse if (str.equals(\"l:\"))\\n            \\t\\t\\t\\t\\tt.left = nodeStack.pop();\\n            \\t\\t\\t\\telse if (str.equals(\"r:\"))\\n            \\t\\t\\t\\t\\tt.right = nodeStack.pop();\\n            \\t\\t\\tnodeStack.push(t);\\n            \\t\\t}\\n        \\t\\t}\\n        \\t\\telse\\n        \\t\\t\\tsb.append(c);\\n        \\t}\\n    \\t\\treturn nodeStack.isEmpty()?null:nodeStack.pop();\\n    \\t}\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 74454,
                "title": "easy-c-solution",
                "content": "public class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if(root == null) return \"null\";\\n        return root.val + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n        List<TreeNode> list = new List<TreeNode>();\\n        \\n        if(data == \"null\") return null;\\n        \\n        string[] words = data.Split(' ');\\n        TreeNode root = new TreeNode(Convert.ToInt32(words[0]));\\n        list.Add(root);\\n        \\n        bool goLeft = true;\\n        for(int i=1;i<words.Count();++i)\\n        {\\n            if(words[i] == \"null\")\\n            {\\n                if(goLeft) goLeft = false;\\n                else list.RemoveAt(list.Count()-1);\\n            }\\n            else\\n            {\\n                TreeNode node = new TreeNode(Convert.ToInt32(words[i]));\\n                if(goLeft)\\n                {\\n                    list[list.Count()-1].left = node;\\n                }\\n                else\\n                {\\n                    list[list.Count()-1].right = node;\\n                    list.RemoveAt(list.Count()-1);\\n                }\\n                list.Add(node);\\n                goLeft = true;\\n            }\\n        }\\n        \\n        return root;\\n    }\\n}",
                "solutionTags": [
                    "C#",
                    "Binary Tree"
                ],
                "code": "public class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if(root == null) return \"null\";\\n        return root.val + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n        List<TreeNode> list = new List<TreeNode>();\\n        \\n        if(data == \"null\") return null;\\n        \\n        string[] words = data.Split(' ');\\n        TreeNode root = new TreeNode(Convert.ToInt32(words[0]));\\n        list.Add(root);\\n        \\n        bool goLeft = true;\\n        for(int i=1;i<words.Count();++i)\\n        {\\n            if(words[i] == \"null\")\\n            {\\n                if(goLeft) goLeft = false;\\n                else list.RemoveAt(list.Count()-1);\\n            }\\n            else\\n            {\\n                TreeNode node = new TreeNode(Convert.ToInt32(words[i]));\\n                if(goLeft)\\n                {\\n                    list[list.Count()-1].left = node;\\n                }\\n                else\\n                {\\n                    list[list.Count()-1].right = node;\\n                    list.RemoveAt(list.Count()-1);\\n                }\\n                list.Add(node);\\n                goLeft = true;\\n            }\\n        }\\n        \\n        return root;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 74408,
                "title": "java-solution-with-queue",
                "content": "Use two queues swap for binary traversal, for any null node, append \"null\". For deserialisation, split the string with space, again use queue to construct the tree. The code is as below:\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            // if(root==null) return \"\";\\n            StringBuilder sb = new StringBuilder();\\n            Queue<TreeNode> parent = new LinkedList<>();\\n            parent.offer(root);\\n            while(!parent.isEmpty()) {\\n                Queue<TreeNode> children = new LinkedList<>();\\n                while(!parent.isEmpty()) {\\n                    TreeNode node = parent.poll();\\n                    if(node!=null) {\\n                        sb.append(node.val);\\n                        children.offer(node.left);\\n                        children.offer(node.right);\\n                    } else {\\n                        sb.append(\"null\");\\n                    }\\n                    sb.append(\" \");\\n                }\\n                parent = children;\\n            }\\n            return sb.toString().trim();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            String[] strs = data.split(\" \");\\n            Queue<TreeNode> parent = new LinkedList<>();\\n            TreeNode root = strs[0].equals(\"null\") ? null : new TreeNode(Integer.valueOf(strs[0]));\\n            parent.offer(root);\\n            int i = 1;\\n            while(!parent.isEmpty()) {\\n                Queue<TreeNode> children = new LinkedList<>();\\n                while(!parent.isEmpty()) {\\n                    TreeNode node = parent.poll();\\n                    if(node!=null) {\\n                        if(i< strs.length && !strs[i].equals(\"null\")){\\n                            node.left = new TreeNode(Integer.valueOf(strs[i++]));\\n                        } else {\\n                            i++;\\n                        }\\n                        if(i< strs.length && !strs[i].equals(\"null\")){\\n                            node.right = new TreeNode(Integer.valueOf(strs[i++]));\\n                        } else {\\n                            i++;\\n                        }\\n                        children.offer(node.left);\\n                        children.offer(node.right);\\n                    }\\n                }\\n                parent = children;\\n            }\\n            return root;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "Use two queues swap for binary traversal, for any null node, append \"null\". For deserialisation, split the string with space, again use queue to construct the tree. The code is as below:\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            // if(root==null) return \"\";\\n            StringBuilder sb = new StringBuilder();\\n            Queue<TreeNode> parent = new LinkedList<>();\\n            parent.offer(root);\\n            while(!parent.isEmpty()) {\\n                Queue<TreeNode> children = new LinkedList<>();\\n                while(!parent.isEmpty()) {\\n                    TreeNode node = parent.poll();\\n                    if(node!=null) {\\n                        sb.append(node.val);\\n                        children.offer(node.left);\\n                        children.offer(node.right);\\n                    } else {\\n                        sb.append(\"null\");\\n                    }\\n                    sb.append(\" \");\\n                }\\n                parent = children;\\n            }\\n            return sb.toString().trim();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            String[] strs = data.split(\" \");\\n            Queue<TreeNode> parent = new LinkedList<>();\\n            TreeNode root = strs[0].equals(\"null\") ? null : new TreeNode(Integer.valueOf(strs[0]));\\n            parent.offer(root);\\n            int i = 1;\\n            while(!parent.isEmpty()) {\\n                Queue<TreeNode> children = new LinkedList<>();\\n                while(!parent.isEmpty()) {\\n                    TreeNode node = parent.poll();\\n                    if(node!=null) {\\n                        if(i< strs.length && !strs[i].equals(\"null\")){\\n                            node.left = new TreeNode(Integer.valueOf(strs[i++]));\\n                        } else {\\n                            i++;\\n                        }\\n                        if(i< strs.length && !strs[i].equals(\"null\")){\\n                            node.right = new TreeNode(Integer.valueOf(strs[i++]));\\n                        } else {\\n                            i++;\\n                        }\\n                        children.offer(node.left);\\n                        children.offer(node.right);\\n                    }\\n                }\\n                parent = children;\\n            }\\n            return root;\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3738541,
                "title": "unique-approach-easy-step-by-step-explanation-with-example",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**if we can represent each node of the tree uniquely**, then we can easily serialize the tree into a string and deserialize the string back to the original binary tree. This is because the inorder and preorder traversals of a binary tree (with unique node values) uniquely define the tree.\\n\\n**How do we represent each node uniquely as a string?**\\nTo represent each node uniquely, we can concatenate the address of the node to its value (as ***\"val_address\"***). **This ensures that even if there are duplicate values in the tree, we can able to represent each node uniquely as the address is unique for each node**.\\n```\\n    1\\n   / \\\\\\n  2   3\\n / \\\\\\n4   5\\n```\\nRepresentation example for this given tree:-\\n```\\nPreorder string : \"1_0x1000 2_0x1004 4_0x1008 5_0x100c 3_0x1010\"\\nInorder string :  \"4_0x1008 2_0x1004 5_0x100c 1_0x1000 3_0x1010\"\\nOverall tree can be represented as :-\\n\"4_0x1008 2_0x1004 5_0x100c 1_0x1000 3_0x1010 $ 1_0x1000 2_0x1004 4_0x1008 5_0x100c 3_0x1010 \"\\n```\\n\\n# Approach\\n**serialize(TreeNode * root)**: This method serializes the binary tree root into a string. The string will be in the format of \\n```\\n\"inorder_traversal_string $ preorder_traversal_string\"\\n```\\n\\n**deserialize(string data)**: This method deserializes the binary tree from the string data. The string must be in the format of \\n```\\n\"inorder_traversal_string $ preorder_traversal_string\"\\n```\\n## Helper functions definition : -\\n**getAddressAsString(const TreeNode * node)**: This method gets the address of the node as a string.\\n\\n**extractVal(string &s)**: This method extracts the value of a node from the string s. The string must be in the format of \\n```\\n\"val_address\"\\n```\\n> **We have store every node as *\"val_address\"* to represent every node uniquely so that we can generate unique tree from given preorder and inorder traversal even if there are multiples nodes with same values in the tree.**\\n\\n**inorder(TreeNode *root, string &serialstr)**: This method traverses the binary tree root in inorder and stores the values *(as \"value_address\")* of the nodes in the string serialstr.\\n\\n**preorder(TreeNode *root, string &serialstr)**: This method traverses the binary tree root in preorder and stores the values *(as \"value_address\")* of the nodes in the string serialstr.\\n\\n**genTree(int in_s, int in_e, int pre_s, int pre_e, vector< string> &inorder, vector< string> &preorder)**: This method constructs a binary tree from the inorder and preorder traversals inorder and preorder.\\n\\n---\\n\\n**To serialize the binary tree, the following steps are performed:**\\n\\n- The inorder traversal of the tree is performed and the values of the nodes are stored in a string serialstr.\\n- The preorder traversal of the tree is performed and the values of the nodes are stored in a string serialstr.\\n- The two strings are concatenated and returned.\\n\\n**To deserialize the binary tree, the following steps are performed:**\\n\\n- The string data is split into two strings: the inorder traversal and the preorder traversal.\\n- The inorder traversal( *as vector< string> where each node is represented as \"val_address\"*) is used to find the index of the root node given by the 0th index in the preorder traversal.\\n- Then we recursively construct the left and right subtrees of the root node.\\n- The root node is returned.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n    int extractVal(string &s)\\n    {\\n        stringstream ss(s);\\n        string str;\\n        while(getline(ss,str,\\'_\\'))\\n        {\\n            return stoi(str);\\n        }\\n        return 0; //it is not executed\\n    }\\n    string getAddressAsString(const TreeNode* node) {\\n        ostringstream oss;\\n        oss << static_cast<const void*>(node);\\n        return oss.str();\\n    }\\n    void inorder(TreeNode *root,string &serialstr)\\n    {\\n        if(root==NULL) return;\\n        inorder(root->left,serialstr);\\n        serialstr+=((to_string(root->val)+\"_\"+getAddressAsString(root))+\" \");\\n        inorder(root->right,serialstr);\\n    }\\n    void preorder(TreeNode *root,string &serialstr)\\n    {\\n        if(root==NULL) return;\\n        serialstr+=((to_string(root->val)+\"_\"+getAddressAsString(root))+\" \");\\n        preorder(root->left,serialstr);\\n        preorder(root->right,serialstr);\\n    }\\n    //  function to contruct tree from inorder and preorder array\\n    TreeNode* genTree(int in_s,int in_e,int pre_s,int pre_e,vector<string> &inorder,vector<string> &preorder)\\n    {\\n        /*\\n        in_s,in_e-> start index, end index (both included) of inorder array.\\n        pre_s,pre_e-> start index, end index (both included) of preorder array.\\n        */\\n        if(in_s>in_e) return NULL;\\n        //extract the root value from the string\\n        TreeNode *root=new TreeNode(extractVal(preorder[pre_s]));\\n        int idx;\\n        for(int i=in_s;i<=in_e;i++)\\n        {\\n            if(inorder[i]==preorder[pre_s])\\n            {\\n                idx=i;break;\\n            }\\n        }\\n        int leftsize=idx-in_s;\\n        int rightsize=in_e-idx;\\n        //construct left subtree\\n        root->left=genTree(in_s,idx-1,pre_s+1,pre_s+leftsize,inorder,preorder);\\n        root->right=genTree(idx+1,in_e,pre_s+leftsize+1,pre_e,inorder,preorder);\\n        return root;\\n    }\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        // we will store inorder and preoder in string seperated by \" $ \"\\n        string serialstr;\\n        inorder(root,serialstr);\\n        serialstr+=\"$ \";\\n        preorder(root,serialstr);\\n        return serialstr;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream ss(data); // using stringstream to tokenize the string wrt delimeter\\n        //then we use getline to access each string in stringstream into another string \\n        string str;\\n        bool seperator_seen=0;\\n        vector<string> inorder,preorder;\\n        while(getline(ss,str,\\' \\'))\\n        {\\n            if(str==\"$\")\\n            {\\n                seperator_seen=1;\\n            }\\n            else{\\n                if(seperator_seen==0)\\n                {\\n                    inorder.push_back(str);\\n                }\\n                else preorder.push_back(str);\\n            }\\n        }\\n        //now contruct the binary tree from inorder and preorder\\n        return genTree(0,inorder.size()-1,0,preorder.size()-1,inorder,preorder);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```\\n> **Feel free to comment if you want the code in any other language.**\\n\\n**Please upvote \\uD83D\\uDC4D if you like this solution.\\nAny suggestions or remarks are most welcome.**",
                "solutionTags": [
                    "C++",
                    "String",
                    "Tree",
                    "Binary Tree"
                ],
                "code": "```\\n    1\\n   / \\\\\\n  2   3\\n / \\\\\\n4   5\\n```\n```\\nPreorder string : \"1_0x1000 2_0x1004 4_0x1008 5_0x100c 3_0x1010\"\\nInorder string :  \"4_0x1008 2_0x1004 5_0x100c 1_0x1000 3_0x1010\"\\nOverall tree can be represented as :-\\n\"4_0x1008 2_0x1004 5_0x100c 1_0x1000 3_0x1010 $ 1_0x1000 2_0x1004 4_0x1008 5_0x100c 3_0x1010 \"\\n```\n```\\n\"inorder_traversal_string $ preorder_traversal_string\"\\n```\n```\\n\"inorder_traversal_string $ preorder_traversal_string\"\\n```\n```\\n\"val_address\"\\n```\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n    int extractVal(string &s)\\n    {\\n        stringstream ss(s);\\n        string str;\\n        while(getline(ss,str,\\'_\\'))\\n        {\\n            return stoi(str);\\n        }\\n        return 0; //it is not executed\\n    }\\n    string getAddressAsString(const TreeNode* node) {\\n        ostringstream oss;\\n        oss << static_cast<const void*>(node);\\n        return oss.str();\\n    }\\n    void inorder(TreeNode *root,string &serialstr)\\n    {\\n        if(root==NULL) return;\\n        inorder(root->left,serialstr);\\n        serialstr+=((to_string(root->val)+\"_\"+getAddressAsString(root))+\" \");\\n        inorder(root->right,serialstr);\\n    }\\n    void preorder(TreeNode *root,string &serialstr)\\n    {\\n        if(root==NULL) return;\\n        serialstr+=((to_string(root->val)+\"_\"+getAddressAsString(root))+\" \");\\n        preorder(root->left,serialstr);\\n        preorder(root->right,serialstr);\\n    }\\n    //  function to contruct tree from inorder and preorder array\\n    TreeNode* genTree(int in_s,int in_e,int pre_s,int pre_e,vector<string> &inorder,vector<string> &preorder)\\n    {\\n        /*\\n        in_s,in_e-> start index, end index (both included) of inorder array.\\n        pre_s,pre_e-> start index, end index (both included) of preorder array.\\n        */\\n        if(in_s>in_e) return NULL;\\n        //extract the root value from the string\\n        TreeNode *root=new TreeNode(extractVal(preorder[pre_s]));\\n        int idx;\\n        for(int i=in_s;i<=in_e;i++)\\n        {\\n            if(inorder[i]==preorder[pre_s])\\n            {\\n                idx=i;break;\\n            }\\n        }\\n        int leftsize=idx-in_s;\\n        int rightsize=in_e-idx;\\n        //construct left subtree\\n        root->left=genTree(in_s,idx-1,pre_s+1,pre_s+leftsize,inorder,preorder);\\n        root->right=genTree(idx+1,in_e,pre_s+leftsize+1,pre_e,inorder,preorder);\\n        return root;\\n    }\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        // we will store inorder and preoder in string seperated by \" $ \"\\n        string serialstr;\\n        inorder(root,serialstr);\\n        serialstr+=\"$ \";\\n        preorder(root,serialstr);\\n        return serialstr;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream ss(data); // using stringstream to tokenize the string wrt delimeter\\n        //then we use getline to access each string in stringstream into another string \\n        string str;\\n        bool seperator_seen=0;\\n        vector<string> inorder,preorder;\\n        while(getline(ss,str,\\' \\'))\\n        {\\n            if(str==\"$\")\\n            {\\n                seperator_seen=1;\\n            }\\n            else{\\n                if(seperator_seen==0)\\n                {\\n                    inorder.push_back(str);\\n                }\\n                else preorder.push_back(str);\\n            }\\n        }\\n        //now contruct the binary tree from inorder and preorder\\n        return genTree(0,inorder.size()-1,0,preorder.size()-1,inorder,preorder);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2787780,
                "title": "c-simple-solution",
                "content": "# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n\\nstatic const string digits = \"-0123456789N\";\\n\\nclass Codec {\\nprivate:\\n    void encodeTree(TreeNode *node, int level, string &s) {\\n        s += string(level, \\'#\\');\\n        if(node == nullptr) {\\n            s.push_back(\\'N\\');\\n            return;\\n        } else {\\n            s += to_string(node->val);\\n        }\\n        \\n        encodeTree(node->left, level+1, s);\\n        encodeTree(node->right, level+1, s);\\n    }\\n    \\n    TreeNode *decodeTree(const string &data, int &curr, int level) {\\n        int next_first_digit_pos = data.find_first_of(digits, curr);\\n        // check if the number of hashes NOT equal to the current level\\n        if(next_first_digit_pos-curr != level) return nullptr;\\n        \\n        curr = data.find(\\'#\\', next_first_digit_pos);    // next hash position\\n        // extract current node val\\n        string val = data.substr(next_first_digit_pos, curr - next_first_digit_pos);\\n        if(val == \"N\") {\\n            return nullptr;\\n        }\\n        \\n        TreeNode *node = new TreeNode(stoi(val));\\n        node->left = decodeTree(data, curr, level+1);\\n        node->right = decodeTree(data, curr, level+1);\\n        return node;\\n    }\\n    \\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s;\\n        encodeTree(root, 0, s);\\n        // cout << s << endl;\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int curr = 0;\\n        return decodeTree(data, curr, 0);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "C++",
                    "Depth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n\\nstatic const string digits = \"-0123456789N\";\\n\\nclass Codec {\\nprivate:\\n    void encodeTree(TreeNode *node, int level, string &s) {\\n        s += string(level, \\'#\\');\\n        if(node == nullptr) {\\n            s.push_back(\\'N\\');\\n            return;\\n        } else {\\n            s += to_string(node->val);\\n        }\\n        \\n        encodeTree(node->left, level+1, s);\\n        encodeTree(node->right, level+1, s);\\n    }\\n    \\n    TreeNode *decodeTree(const string &data, int &curr, int level) {\\n        int next_first_digit_pos = data.find_first_of(digits, curr);\\n        // check if the number of hashes NOT equal to the current level\\n        if(next_first_digit_pos-curr != level) return nullptr;\\n        \\n        curr = data.find(\\'#\\', next_first_digit_pos);    // next hash position\\n        // extract current node val\\n        string val = data.substr(next_first_digit_pos, curr - next_first_digit_pos);\\n        if(val == \"N\") {\\n            return nullptr;\\n        }\\n        \\n        TreeNode *node = new TreeNode(stoi(val));\\n        node->left = decodeTree(data, curr, level+1);\\n        node->right = decodeTree(data, curr, level+1);\\n        return node;\\n    }\\n    \\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s;\\n        encodeTree(root, 0, s);\\n        // cout << s << endl;\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int curr = 0;\\n        return decodeTree(data, curr, 0);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2406801,
                "title": "different-approach-must-read-fully-explained",
                "content": "The \"naive\" solution is to traverse the tree, and encode empty locations with \"None\" or some special sign.\\n\\nThis leads to having unecessarily long bits of data, which isn\\'t the best if we want to be efficient. we can do better.\\n\\n# Intuition\\n\\nThere is a concept of flattening a binary tree into an array, let\\'s take the following example:\\n\\n```\\n  \\t   1\\n    /    \\\\\\n   2      3 \\n  / \\\\    / \\\\\\n 4   5  6   7 \\n```\\n\\nWe can represent that tree with an array: `[1,2,3,4,5,6,7]`\\n\\n`1` is the root - index 0 in the array\\n\\nTo get to 1\\'s children, we access `index*2+1` for left child, and `index*2+2` for right child. We can access all node\\'s children the same way.\\n\\nSo we\\'ll use that insight to encode/serialize the data.\\n\\n## What about deserialize?\\n\\nWhenever we need to deserialize the string, first we create a hash map of `index -> value.`\\n\\nNow we know that the root starts at index 0, and we also know how to access the children, as discussed above, so we will simply check whether the child index exists or not. If it does, we create the node and continue to the children recursively. If the index doesn\\'t exist in the encoded string, we return null.\\n\\n# Implementation\\nRead the code, it\\'s super easy to understand.\\n\\nI\\'ve encoded the index -> value as {index}#{value}. For example for index 0, with value 2: `\"0#2\"`\\n\\n# Code\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root: return \"\"\\n        \\n        encoded_format = []\\n        q = deque([(root, 0)])\\n        \\n        while q:\\n            node, index = q.popleft()\\n            encoded_format.append(f\"{index}#{node.val}\")\\n            \\n            if node.left: q.append((node.left, index*2+1))\\n            if node.right: q.append((node.right, index*2+2))\\n        \\n        serialized_string = \",\".join(encoded_format)\\n        return serialized_string\\n        \\n\\n    def deserialize(self, data):\\n        index_to_value = {int(x.split(\"#\")[0]): int(x.split(\"#\")[1]) for x in data.split(\",\")}\\n        return self.build_tree(index_to_value, 0)\\n        \\n    \\n    def build_tree(self, index_to_value: dict[int, int], index: int):\\n        if index not in index_to_value: return None\\n        \\n        node = TreeNode(index_to_value[index])\\n        node.left = self.build_tree(index_to_value, index*2+1)\\n        node.right = self.build_tree(index_to_value, index*2+2)\\n        return node\\n        \\n```\\n\\n\\n# Final notes\\nIt doesn\\'t matter what traversal algorithm you use to encode the tree.\\n\\nI used BFS, but one might also use DFS and track the index of the node that is being processed.\\n\\n# Appendix\\nAttaching the classic preorder DFS solution, written by me.\\n\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root: return \"\"\\n        encode = []\\n        \\n        def pre_order(node):\\n            if not node:\\n                encode.append(\"None\")\\n                return\\n            \\n            encode.append(str(node.val))\\n            pre_order(node.left)\\n            pre_order(node.right)\\n            \\n        pre_order(root)\\n        encoded_string = \",\".join(encode)\\n        return encoded_string\\n        \\n\\n    def deserialize(self, data):\\n        if not data: return None\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        encoded = data.split(\",\")\\n        n = len(encoded)\\n        \\n        def build_tree(index):\\n            if index >= n:  return None, index\\n            if encoded[index] == \"None\":  return None, index\\n            \\n            node = TreeNode(int(encoded[index]))\\n            left_tree, last_index = build_tree(index + 1)\\n            node.left = left_tree\\n            \\n            right_tree, last_index = build_tree(last_index + 1)\\n            node.right = right_tree\\n            \\n            return node, last_index\\n            \\n            \\n        return build_tree(0)[0]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n  \\t   1\\n    /    \\\\\\n   2      3 \\n  / \\\\    / \\\\\\n 4   5  6   7 \\n```\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root: return \"\"\\n        \\n        encoded_format = []\\n        q = deque([(root, 0)])\\n        \\n        while q:\\n            node, index = q.popleft()\\n            encoded_format.append(f\"{index}#{node.val}\")\\n            \\n            if node.left: q.append((node.left, index*2+1))\\n            if node.right: q.append((node.right, index*2+2))\\n        \\n        serialized_string = \",\".join(encoded_format)\\n        return serialized_string\\n        \\n\\n    def deserialize(self, data):\\n        index_to_value = {int(x.split(\"#\")[0]): int(x.split(\"#\")[1]) for x in data.split(\",\")}\\n        return self.build_tree(index_to_value, 0)\\n        \\n    \\n    def build_tree(self, index_to_value: dict[int, int], index: int):\\n        if index not in index_to_value: return None\\n        \\n        node = TreeNode(index_to_value[index])\\n        node.left = self.build_tree(index_to_value, index*2+1)\\n        node.right = self.build_tree(index_to_value, index*2+2)\\n        return node\\n        \\n```\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if not root: return \"\"\\n        encode = []\\n        \\n        def pre_order(node):\\n            if not node:\\n                encode.append(\"None\")\\n                return\\n            \\n            encode.append(str(node.val))\\n            pre_order(node.left)\\n            pre_order(node.right)\\n            \\n        pre_order(root)\\n        encoded_string = \",\".join(encode)\\n        return encoded_string\\n        \\n\\n    def deserialize(self, data):\\n        if not data: return None\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        encoded = data.split(\",\")\\n        n = len(encoded)\\n        \\n        def build_tree(index):\\n            if index >= n:  return None, index\\n            if encoded[index] == \"None\":  return None, index\\n            \\n            node = TreeNode(int(encoded[index]))\\n            left_tree, last_index = build_tree(index + 1)\\n            node.left = left_tree\\n            \\n            right_tree, last_index = build_tree(last_index + 1)\\n            node.right = right_tree\\n            \\n            return node, last_index\\n            \\n            \\n        return build_tree(0)[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2010469,
                "title": "c-simple-recursive-dfs-solution-preorder-traversal",
                "content": "**[C++] Solution for Serializing and Deserializing a binary tree using Preorder DFS traversal:**\\n\\n```\\nclass Codec {\\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string serialTree = \"\";\\n        serializeTree(root, serialTree);\\n        return serialTree;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int index = 0;\\n        return deserializeTree(data, index);\\n    }\\n    \\nprivate:\\n    void serializeTree(TreeNode* node, string& serialTree) {\\n        if (node) serialTree += to_string(node->val) + \",\";\\n        else {\\n            serialTree += \"#,\";\\n            return;\\n        }\\n        serializeTree(node->left, serialTree);\\n        serializeTree(node->right, serialTree);\\n    }\\n    \\n    TreeNode* deserializeTree(string& data, int& idx) {\\n        if (idx >= data.size()-1) return nullptr;\\n        TreeNode *node = nullptr;\\n        string s = \"\";\\n        while (data[idx]!=\\',\\') {\\n            s += data[idx];\\n            idx++;\\n        }\\n        if (s==\"#\") {\\n            return nullptr;\\n        } else {\\n            node = new TreeNode();\\n            node->val = stoi(s);\\n        }\\n\\n        node->left = deserializeTree(data, ++idx);\\n        node->right = deserializeTree(data, ++idx);\\n        return node;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```\\n\\n**Time Complexity:** O(N)\\n**Space Complexity:** O(N)\\n\\nPlease do **upvote** if you find this helpful.\\nFeel free to ask queries or share feedback in comments.",
                "solutionTags": [
                    "C",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string serialTree = \"\";\\n        serializeTree(root, serialTree);\\n        return serialTree;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int index = 0;\\n        return deserializeTree(data, index);\\n    }\\n    \\nprivate:\\n    void serializeTree(TreeNode* node, string& serialTree) {\\n        if (node) serialTree += to_string(node->val) + \",\";\\n        else {\\n            serialTree += \"#,\";\\n            return;\\n        }\\n        serializeTree(node->left, serialTree);\\n        serializeTree(node->right, serialTree);\\n    }\\n    \\n    TreeNode* deserializeTree(string& data, int& idx) {\\n        if (idx >= data.size()-1) return nullptr;\\n        TreeNode *node = nullptr;\\n        string s = \"\";\\n        while (data[idx]!=\\',\\') {\\n            s += data[idx];\\n            idx++;\\n        }\\n        if (s==\"#\") {\\n            return nullptr;\\n        } else {\\n            node = new TreeNode();\\n            node->val = stoi(s);\\n        }\\n\\n        node->left = deserializeTree(data, ++idx);\\n        node->right = deserializeTree(data, ++idx);\\n        return node;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1924177,
                "title": "go-dfs-clear-solution",
                "content": "```\\ntype Codec struct {\\n}\\n\\nfunc Constructor() Codec {\\n    return Codec{}\\n}\\n\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    var buffer bytes.Buffer\\n    \\n    var dfs func(node *TreeNode)\\n    dfs = func(node *TreeNode) {\\n        if node == nil {\\n            buffer.WriteString(\"N,\")\\n        } else {\\n            buffer.WriteString(strconv.Itoa(node.Val))\\n            buffer.WriteString(\",\")\\n            dfs(node.Left)\\n            dfs(node.Right)\\n        }\\n    }\\n    dfs(root)\\n    \\n    return buffer.String()\\n}\\n\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    tokens := strings.Split(data, \",\")\\n    \\n    var dfs func() *TreeNode\\n    dfs = func() *TreeNode {\\n        token := tokens[0]\\n        tokens = tokens[1:]\\n        if token == \"N\" { return nil }\\n        val, _ := strconv.Atoi(token)\\n        return &TreeNode{val, dfs(), dfs() }\\n    }\\n    \\n    return dfs()\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Depth-First Search"
                ],
                "code": "```\\ntype Codec struct {\\n}\\n\\nfunc Constructor() Codec {\\n    return Codec{}\\n}\\n\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    var buffer bytes.Buffer\\n    \\n    var dfs func(node *TreeNode)\\n    dfs = func(node *TreeNode) {\\n        if node == nil {\\n            buffer.WriteString(\"N,\")\\n        } else {\\n            buffer.WriteString(strconv.Itoa(node.Val))\\n            buffer.WriteString(\",\")\\n            dfs(node.Left)\\n            dfs(node.Right)\\n        }\\n    }\\n    dfs(root)\\n    \\n    return buffer.String()\\n}\\n\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    tokens := strings.Split(data, \",\")\\n    \\n    var dfs func() *TreeNode\\n    dfs = func() *TreeNode {\\n        token := tokens[0]\\n        tokens = tokens[1:]\\n        if token == \"N\" { return nil }\\n        val, _ := strconv.Atoi(token)\\n        return &TreeNode{val, dfs(), dfs() }\\n    }\\n    \\n    return dfs()\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1902731,
                "title": "java-serialize-deserialize",
                "content": "```\\npublic class Codec {\\n    //Serialize\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder res = new StringBuilder();\\n        \\n        q.add(root);\\n        while (!q.isEmpty()) {\\n            TreeNode node = q.poll();\\n            if (node == null) {\\n                res.append(\"# \");\\n                continue;\\n            }\\n            res.append(node.val + \" \");\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n        return res.toString();\\n    }\\n    \\n    //Deserialize\\n    public TreeNode deserialize(String data) {\\n        if (data == \"\") return null;\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        String[] values = data.split(\" \");\\n        TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n        \\n        q.add(root);\\n        for (int i = 1; i < values.length; i++) {\\n            TreeNode parent = q.poll();\\n            if (!values[i].equals(\"#\")) {\\n                TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                parent.left = left;\\n                q.add(left);\\n            }\\n            if (!values[++i].equals(\"#\")) {\\n                TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                parent.right = right;\\n                q.add(right);\\n            }\\n        }\\n        return root;\\n    }\\n}",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\npublic class Codec {\\n    //Serialize\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder res = new StringBuilder();\\n        \\n        q.add(root);\\n        while (!q.isEmpty()) {\\n            TreeNode node = q.poll();\\n            if (node == null) {\\n                res.append(\"# \");\\n                continue;\\n            }\\n            res.append(node.val + \" \");\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n        return res.toString();\\n    }\\n    \\n    //Deserialize\\n    public TreeNode deserialize(String data) {\\n        if (data == \"\") return null;\\n        \\n        Queue<TreeNode> q = new LinkedList<>();\\n        String[] values = data.split(\" \");\\n        TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n        \\n        q.add(root);\\n        for (int i = 1; i < values.length; i++) {\\n            TreeNode parent = q.poll();\\n            if (!values[i].equals(\"#\")) {\\n                TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                parent.left = left;\\n                q.add(left);\\n            }\\n            if (!values[++i].equals(\"#\")) {\\n                TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                parent.right = right;\\n                q.add(right);\\n            }\\n        }\\n        return root;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 1763457,
                "title": "c-solution-with-explanation",
                "content": "Here, `makestring(...)` method constructs a string with nodes present in it in preordered manner. Also, `makeTree(...)` method constructs a binary tree from the vector `res` which stores node values in preordered manner and `0` for NULL nodes\\n\\n```\\nclass Codec {\\npublic:\\n    string res;\\n    vector<int> nums;\\n    int index;\\n    void makestring(TreeNode* root){\\n        //base case\\n        if(!root) {\\n            res.push_back(\\'0\\'); //I\\'ve used 0 for nullptr\\n            res.push_back(\\',\\'); //comma is the separator\\n            return;\\n        }\\n        //recursive case\\n        string num = to_string(root->val+1001); //to make numbers positive\\n        res.append(num);\\n        res.push_back(\\',\\'); //comma is the separator\\n        \\n        makestring(root->left);\\n        makestring(root->right);\\n        return;        \\n    }\\n    \\n    TreeNode* makeTree(){\\n        //base case\\n        if(!nums[index]) {index++; return NULL;}\\n        \\n        //recursive case\\n        TreeNode* node = new TreeNode(nums[index]-1001); //decoding the value of the node\\n        index++;\\n        node->left = makeTree();\\n        node->right = makeTree();\\n        return node;\\n    }\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root) return \"\";\\n        makestring(root);\\n        res.pop_back(); //for the extra comma at the end\\n        return res;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        //special case\\n        if(!data.size()) return NULL;\\n        \\n        /*Using stringstream to extract all numbers from the data string*/\\n        stringstream ss(data);\\n        char ch;\\n        int tmp;\\n        while(ss >> tmp) {\\n            nums.push_back(tmp);\\n            ss >> ch;\\n        }\\n        /*operation done*/\\n        \\n        //now we will implement normal depth first traversal to construct our tree\\n        index = 0;\\n        TreeNode* root = makeTree();\\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n    string res;\\n    vector<int> nums;\\n    int index;\\n    void makestring(TreeNode* root){\\n        //base case\\n        if(!root) {\\n            res.push_back(\\'0\\'); //I\\'ve used 0 for nullptr\\n            res.push_back(\\',\\'); //comma is the separator\\n            return;\\n        }\\n        //recursive case\\n        string num = to_string(root->val+1001); //to make numbers positive\\n        res.append(num);\\n        res.push_back(\\',\\'); //comma is the separator\\n        \\n        makestring(root->left);\\n        makestring(root->right);\\n        return;        \\n    }\\n    \\n    TreeNode* makeTree(){\\n        //base case\\n        if(!nums[index]) {index++; return NULL;}\\n        \\n        //recursive case\\n        TreeNode* node = new TreeNode(nums[index]-1001); //decoding the value of the node\\n        index++;\\n        node->left = makeTree();\\n        node->right = makeTree();\\n        return node;\\n    }\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root) return \"\";\\n        makestring(root);\\n        res.pop_back(); //for the extra comma at the end\\n        return res;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        //special case\\n        if(!data.size()) return NULL;\\n        \\n        /*Using stringstream to extract all numbers from the data string*/\\n        stringstream ss(data);\\n        char ch;\\n        int tmp;\\n        while(ss >> tmp) {\\n            nums.push_back(tmp);\\n            ss >> ch;\\n        }\\n        /*operation done*/\\n        \\n        //now we will implement normal depth first traversal to construct our tree\\n        index = 0;\\n        TreeNode* root = makeTree();\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1509760,
                "title": "easy-to-understand-o-n-dfs-c",
                "content": "Implementation\\n\\n**Efficient Approach\\nTime Complexity = O(N), Space Complexity = O(H) where H is the height of the Binary Tree.**\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root == NULL) return \"#\";\\n        return to_string(root->val) + \" \" + serialize(root->left) + \" \" + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"#\") return NULL;\\n        stringstream s(data);\\n        return deserializeTheData(s);\\n    }\\n    \\n   // Helper function to deserialize the Data which is in string format.\\n   TreeNode* deserializeTheData(stringstream &s){\\n       string str;\\n       getline(s, str, \\' \\');\\n       if(str == \"#\") return NULL;\\n       else{\\n           TreeNode* root = new TreeNode(stoi(str));\\n           root->left = deserializeTheData(s);\\n           root->right = deserializeTheData(s);\\n           return root;\\n        }\\n   }\\n};\\n```\\nIf you find any issue in understanding the solution then comment below, will try to help you.\\nIf you found my solution useful.\\nSo **please do upvote and encourage me** to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding **:)**",
                "solutionTags": [
                    "C",
                    "String",
                    "Binary Tree"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root == NULL) return \"#\";\\n        return to_string(root->val) + \" \" + serialize(root->left) + \" \" + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"#\") return NULL;\\n        stringstream s(data);\\n        return deserializeTheData(s);\\n    }\\n    \\n   // Helper function to deserialize the Data which is in string format.\\n   TreeNode* deserializeTheData(stringstream &s){\\n       string str;\\n       getline(s, str, \\' \\');\\n       if(str == \"#\") return NULL;\\n       else{\\n           TreeNode* root = new TreeNode(stoi(str));\\n           root->left = deserializeTheData(s);\\n           root->right = deserializeTheData(s);\\n           return root;\\n        }\\n   }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500010,
                "title": "c-true-o-1-solution",
                "content": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        unsigned long long number = (unsigned long long) root;\\n        return to_string(number);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        unsigned long long number = stoull(data);\\n        return (TreeNode *) number;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        unsigned long long number = (unsigned long long) root;\\n        return to_string(number);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        unsigned long long number = stoull(data);\\n        return (TreeNode *) number;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1147306,
                "title": "easy-to-understand-c-solution",
                "content": "\\tstring serialize(TreeNode* root) {  //serialize the root\\n        if(root == NULL){\\n            return \".\";   //a \\'.\\' character represents a null node\\n        }\\n        \\n        string serialized = \"\";\\n        \\n        serialized += to_string(root->val);  //add the current node to the serialized string then traverser its left and right children respectively\\n        \\n        serialized += \",\" + serialize(root->left);     //add the saperator after each node\\n        serialized += \",\" + serialize(root->right);\\n        \\n        return serialized;\\n    }\\n    \\n    TreeNode* deserializeUtil( vector<string> &serialized, int &i){\\n        \\n        if(i == serialized.size()){   //if the whole array is exhausted\\n            return NULL;\\n        }\\n        \\n        string val = serialized[i++];\\n        \\n          if(val == \".\"){   //if we encounter the \\'.\\' character => a null pointer\\n            return NULL;\\n        }\\n        //build the tree using the serialized array\\n        TreeNode* node = new TreeNode(stoi(val));\\n        \\n        node->left = deserializeUtil(serialized, i);\\n        node->right = deserializeUtil(serialized, i);\\n        \\n        return node;\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        vector<string> serialized;  //store the node array\\n        \\n        stringstream ss(data);  //use a string stream to saperate the node\\n        string node;\\n        \\n        while(getline(ss,node,\\',\\')){\\n            cout<<node<<\" \";\\n            serialized.push_back(node);\\n        }\\n        \\n        int i=0;\\n        return deserializeUtil(serialized, i);\\n    }",
                "solutionTags": [],
                "code": "\\tstring serialize(TreeNode* root) {  //serialize the root\\n        if(root == NULL){\\n            return \".\";   //a \\'.\\' character represents a null node\\n        }\\n        \\n        string serialized = \"\";\\n        \\n        serialized += to_string(root->val);  //add the current node to the serialized string then traverser its left and right children respectively\\n        \\n        serialized += \",\" + serialize(root->left);     //add the saperator after each node\\n        serialized += \",\" + serialize(root->right);\\n        \\n        return serialized;\\n    }\\n    \\n    TreeNode* deserializeUtil( vector<string> &serialized, int &i){\\n        \\n        if(i == serialized.size()){   //if the whole array is exhausted\\n            return NULL;\\n        }\\n        \\n        string val = serialized[i++];\\n        \\n          if(val == \".\"){   //if we encounter the \\'.\\' character => a null pointer\\n            return NULL;\\n        }\\n        //build the tree using the serialized array\\n        TreeNode* node = new TreeNode(stoi(val));\\n        \\n        node->left = deserializeUtil(serialized, i);\\n        node->right = deserializeUtil(serialized, i);\\n        \\n        return node;\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        vector<string> serialized;  //store the node array\\n        \\n        stringstream ss(data);  //use a string stream to saperate the node\\n        string node;\\n        \\n        while(getline(ss,node,\\',\\')){\\n            cout<<node<<\" \";\\n            serialized.push_back(node);\\n        }\\n        \\n        int i=0;\\n        return deserializeUtil(serialized, i);\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 962099,
                "title": "java-simple-and-clean-solution",
                "content": "```\\npublic class Codec {\\n    private static final String NULL = \"null\";\\n    private static final String SPLITER = \",\";\\n\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        preorder(root, sb);\\n        return sb.toString();\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        return buildTree(data.split(SPLITER), new int[1]);\\n    }\\n    \\n    private void preorder(TreeNode root, StringBuilder sb) {\\n        if (root == null) {\\n            sb.append(NULL).append(SPLITER);\\n            return;\\n        }\\n        \\n        sb.append(root.val).append(SPLITER);\\n        preorder(root.left, sb);\\n        preorder(root.right, sb);\\n    }\\n    \\n    private TreeNode buildTree(String[] arr, int[] idx) {\\n        String val = arr[idx[0]++];\\n        \\n        if (val.equals(NULL)) return null;\\n        \\n        TreeNode root = new TreeNode(Integer.valueOf(val));\\n        root.left = buildTree(arr, idx);\\n        root.right = buildTree(arr, idx);\\n        \\n        return root;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Codec {\\n    private static final String NULL = \"null\";\\n    private static final String SPLITER = \",\";\\n\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        preorder(root, sb);\\n        return sb.toString();\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        return buildTree(data.split(SPLITER), new int[1]);\\n    }\\n    \\n    private void preorder(TreeNode root, StringBuilder sb) {\\n        if (root == null) {\\n            sb.append(NULL).append(SPLITER);\\n            return;\\n        }\\n        \\n        sb.append(root.val).append(SPLITER);\\n        preorder(root.left, sb);\\n        preorder(root.right, sb);\\n    }\\n    \\n    private TreeNode buildTree(String[] arr, int[] idx) {\\n        String val = arr[idx[0]++];\\n        \\n        if (val.equals(NULL)) return null;\\n        \\n        TreeNode root = new TreeNode(Integer.valueOf(val));\\n        root.left = buildTree(arr, idx);\\n        root.right = buildTree(arr, idx);\\n        \\n        return root;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 640321,
                "title": "swift-bfs-solution",
                "content": "```\\n    func serialize(_ root: TreeNode?) -> String {\\n        var vals = [String]()\\n        var queue = [TreeNode?]()\\n        queue.append(root)\\n        while !queue.isEmpty {\\n            if let node = queue.removeFirst() {\\n                vals.append(node.val.description)\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            } else {\\n                vals.append(\"nil\")\\n            }\\n        }\\n        return vals.joined(separator: \",\")\\n    }\\n    \\n    func deserialize(_ data: String) -> TreeNode? {\\n        guard data != \"nil\" else { return nil }\\n        var queue = [TreeNode]()\\n        let vals = data.split(separator: \",\").map { String($0) }\\n        let root = TreeNode(Int(vals[0])!)\\n        queue.append(root)\\n        var idx = 1\\n        while !queue.isEmpty {\\n            let node = queue.removeFirst()\\n            if vals[idx] != \"nil\" {\\n                node.left = TreeNode(Int(vals[idx])!)\\n                queue.append(node.left!)\\n            }\\n            idx += 1\\n            if vals[idx] != \"nil\" {\\n                node.right = TreeNode(Int(vals[idx])!)\\n                queue.append(node.right!)\\n            }\\n            idx += 1\\n        }\\n        \\n        return root\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    func serialize(_ root: TreeNode?) -> String {\\n        var vals = [String]()\\n        var queue = [TreeNode?]()\\n        queue.append(root)\\n        while !queue.isEmpty {\\n            if let node = queue.removeFirst() {\\n                vals.append(node.val.description)\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            } else {\\n                vals.append(\"nil\")\\n            }\\n        }\\n        return vals.joined(separator: \",\")\\n    }\\n    \\n    func deserialize(_ data: String) -> TreeNode? {\\n        guard data != \"nil\" else { return nil }\\n        var queue = [TreeNode]()\\n        let vals = data.split(separator: \",\").map { String($0) }\\n        let root = TreeNode(Int(vals[0])!)\\n        queue.append(root)\\n        var idx = 1\\n        while !queue.isEmpty {\\n            let node = queue.removeFirst()\\n            if vals[idx] != \"nil\" {\\n                node.left = TreeNode(Int(vals[idx])!)\\n                queue.append(node.left!)\\n            }\\n            idx += 1\\n            if vals[idx] != \"nil\" {\\n                node.right = TreeNode(Int(vals[idx])!)\\n                queue.append(node.right!)\\n            }\\n            idx += 1\\n        }\\n        \\n        return root\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 502021,
                "title": "share-my-level-order-traversal-java-solution",
                "content": "I have got this problem in Amazon interview. The problem is the same as encodes into a list of integers or null values.\\n\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106932.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106936.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106941.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106944.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106947.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106951.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106954.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106957.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106965.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106971.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106975.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106984.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106988.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106991.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106994.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107001.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107004.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107011.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107016.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107021.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107026.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107030.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107034.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107038.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107041.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107045.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107049.png)\\n\\n\\n\\tpublic String serialize(TreeNode root) {\\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder sb = new StringBuilder();\\n        q.add(root);\\n        while (!q.isEmpty()) {\\n            TreeNode node = q.remove();\\n            if (node == null) {\\n                sb.append(\"null\");\\n            } else {\\n                sb.append(node.val);\\n                q.add(node.left);\\n                q.add(node.right);\\n            }\\n            sb.append(\\' \\');\\n        }\\n        return sb.toString();\\n    }\\n    public TreeNode deserialize(String data) {\\n        StringTokenizer st = new StringTokenizer(data);\\n        Queue<TreeNode> q = new LinkedList<>();\\n        String token = st.nextToken();\\n        TreeNode tree = token.equals(\"null\") ? null : new TreeNode(Integer.parseInt(token));\\n        q.add(tree);\\n        while (st.hasMoreTokens()) {\\n            TreeNode root = q.remove();\\n            if (root == null) continue;\\n            token = st.nextToken();\\n            root.left = token.equals(\"null\") ? null : new TreeNode(Integer.parseInt(token));\\n            q.add(root.left);\\n            token = st.nextToken();\\n            root.right = token.equals(\"null\") ? null : new TreeNode(Integer.parseInt(token));\\n            q.add(root.right);\\n        }\\n        return tree;\\n    }",
                "solutionTags": [],
                "code": "I have got this problem in Amazon interview. The problem is the same as encodes into a list of integers or null values.\\n\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106932.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106936.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106941.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106944.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106947.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106951.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106954.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106957.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106965.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106971.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106975.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106984.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106988.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106991.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581106994.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107001.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107004.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107011.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107016.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107021.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107026.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107030.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107034.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107038.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107041.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107045.png)\\n![image](https://assets.leetcode.com/users/dalao1002/image_1581107049.png)\\n\\n\\n\\tpublic String serialize(TreeNode root) {\\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder sb = new StringBuilder();\\n        q.add(root);\\n        while (!q.isEmpty()) {\\n            TreeNode node = q.remove();\\n            if (node == null) {\\n                sb.append(\"null\");\\n            } else {\\n                sb.append(node.val);\\n                q.add(node.left);\\n                q.add(node.right);\\n            }\\n            sb.append(\\' \\');\\n        }\\n        return sb.toString();\\n    }\\n    public TreeNode deserialize(String data) {\\n        StringTokenizer st = new StringTokenizer(data);\\n        Queue<TreeNode> q = new LinkedList<>();\\n        String token = st.nextToken();\\n        TreeNode tree = token.equals(\"null\") ? null : new TreeNode(Integer.parseInt(token));\\n        q.add(tree);\\n        while (st.hasMoreTokens()) {\\n            TreeNode root = q.remove();\\n            if (root == null) continue;\\n            token = st.nextToken();\\n            root.left = token.equals(\"null\") ? null : new TreeNode(Integer.parseInt(token));\\n            q.add(root.left);\\n            token = st.nextToken();\\n            root.right = token.equals(\"null\") ? null : new TreeNode(Integer.parseInt(token));\\n            q.add(root.right);\\n        }\\n        return tree;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 427509,
                "title": "bfs-with-queue-level-order-traversal",
                "content": "\\n\\n```\\npublic class Codec {\\n    \\n    private static final String nStr = \"null\";\\n\\n    // Encodes a tree to a single string.\\n    // TC -> O(n)\\n    // SC -> O(Max Breadth of tree) for que + O(n) for result\\n    public String serialize(TreeNode root) {\\n        if (root == null)\\n            return \"\";\\n        StringBuilder sb = new StringBuilder();\\n        \\n        Deque<TreeNode> que = new LinkedList<>();\\n        que.addLast(root);\\n        \\n        while (!que.isEmpty()) {\\n            TreeNode node = que.removeFirst();\\n            \\n            if (node == null) {\\n                sb.append(nStr).append(\",\");\\n                continue;\\n            }\\n            \\n            sb.append(node.val).append(\",\");\\n            que.addLast(node.left);\\n            que.addLast(node.right);\\n        }\\n        \\n        sb.setLength(sb.length() - 1);\\n        \\n        System.out.println(sb.toString());\\n        \\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    // TC -> O(n)\\n    // SC -> O( Max Breadth of Tree) for BFS que + O(n) for result\\n    public TreeNode deserialize(String data) {\\n        if (data == null || data.length() == 0)\\n            return null;\\n        \\n        String[] dTokens = data.split(\",\");\\n        \\n        TreeNode root = new TreeNode(Integer.parseInt(dTokens[0]));\\n        int cnt = 1;\\n        \\n        Deque<TreeNode> que = new ArrayDeque<>();\\n        que.addLast(root);\\n        \\n        while(!que.isEmpty() && cnt < dTokens.length) {\\n            TreeNode node = que.removeFirst();\\n            \\n            String left = dTokens[cnt++];\\n            if (!left.equals(nStr)) {\\n                TreeNode lNode = new TreeNode(Integer.parseInt(left));\\n                node.left = lNode;\\n                que.addLast(lNode);\\n            }\\n            \\n            String right = dTokens[cnt++];\\n            if (!right.equals(nStr)) {\\n                TreeNode rNode = new TreeNode(Integer.parseInt(right));\\n                node.right = rNode;\\n                que.addLast(rNode);\\n            }\\n        }\\n        \\n        return root;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Breadth-First Search"
                ],
                "code": "```\\npublic class Codec {\\n    \\n    private static final String nStr = \"null\";\\n\\n    // Encodes a tree to a single string.\\n    // TC -> O(n)\\n    // SC -> O(Max Breadth of tree) for que + O(n) for result\\n    public String serialize(TreeNode root) {\\n        if (root == null)\\n            return \"\";\\n        StringBuilder sb = new StringBuilder();\\n        \\n        Deque<TreeNode> que = new LinkedList<>();\\n        que.addLast(root);\\n        \\n        while (!que.isEmpty()) {\\n            TreeNode node = que.removeFirst();\\n            \\n            if (node == null) {\\n                sb.append(nStr).append(\",\");\\n                continue;\\n            }\\n            \\n            sb.append(node.val).append(\",\");\\n            que.addLast(node.left);\\n            que.addLast(node.right);\\n        }\\n        \\n        sb.setLength(sb.length() - 1);\\n        \\n        System.out.println(sb.toString());\\n        \\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    // TC -> O(n)\\n    // SC -> O( Max Breadth of Tree) for BFS que + O(n) for result\\n    public TreeNode deserialize(String data) {\\n        if (data == null || data.length() == 0)\\n            return null;\\n        \\n        String[] dTokens = data.split(\",\");\\n        \\n        TreeNode root = new TreeNode(Integer.parseInt(dTokens[0]));\\n        int cnt = 1;\\n        \\n        Deque<TreeNode> que = new ArrayDeque<>();\\n        que.addLast(root);\\n        \\n        while(!que.isEmpty() && cnt < dTokens.length) {\\n            TreeNode node = que.removeFirst();\\n            \\n            String left = dTokens[cnt++];\\n            if (!left.equals(nStr)) {\\n                TreeNode lNode = new TreeNode(Integer.parseInt(left));\\n                node.left = lNode;\\n                que.addLast(lNode);\\n            }\\n            \\n            String right = dTokens[cnt++];\\n            if (!right.equals(nStr)) {\\n                TreeNode rNode = new TreeNode(Integer.parseInt(right));\\n                node.right = rNode;\\n                que.addLast(rNode);\\n            }\\n        }\\n        \\n        return root;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 427482,
                "title": "c-iterative-and-recursive-implementations",
                "content": "The recursive one is much more compact, but the iterative is more efficient (twice so, according to LC tests).\\n\\nIterative:\\n```\\nclass Codec {\\npublic:\\n\\n\\t// Encodes a tree to a single string.\\n\\tstring serialize(TreeNode* root)\\n\\t{\\n\\t\\tif (root == nullptr) return \"null\";\\n\\t\\tstring str;\\n\\t\\tqueue<TreeNode*> q;\\n\\t\\tq.push(root);\\n\\t\\twhile (!q.empty())\\n\\t\\t{\\n\\t\\t\\tTreeNode* node = q.front();\\n\\t\\t\\tq.pop();\\n\\t\\t\\tstr += (node ? ::to_string(node->val) : \"null\") + \\' \\';\\n\\t\\t\\tif (node)\\n\\t\\t\\t{\\n\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn str;\\n\\t}\\n\\n\\t// Decodes your encoded data to tree.\\n\\tTreeNode* deserialize(string data)\\n\\t{\\n\\t\\tTreeNode* head = nullptr;\\n\\t\\tqueue<TreeNode*> q;\\n\\t\\tstringstream ss(data);\\n\\t\\tstring s;\\n\\t\\tif (ss >> s && s != \"null\")\\n\\t\\t{\\n\\t\\t\\thead = new TreeNode(::stoi(s));\\n\\t\\t\\tq.push(head);\\n\\t\\t}\\n\\t\\twhile (!q.empty())\\n\\t\\t{\\n\\t\\t\\tTreeNode* node = q.front();\\n\\t\\t\\tq.pop();\\n\\t\\t\\tif (ss >> s && s != \"null\")\\n\\t\\t\\t{\\n\\t\\t\\t\\tnode->left = new TreeNode(::stoi(s));\\n\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t}\\n\\t\\t\\tif (ss >> s && s != \"null\")\\n\\t\\t\\t{\\n\\t\\t\\t\\tnode->right = new TreeNode(::stoi(s));\\n\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn head;\\n\\t}\\n};\\n```\\n\\nRecursive:\\n```\\nclass Codec {\\npublic:\\n\\n\\t// Encodes a tree to a single string.\\n\\tstring serialize(TreeNode* root)\\n\\t{\\n\\t\\tif (root == nullptr) return \"null\";\\n\\t\\treturn ::to_string(root->val) + \\' \\' + serialize(root->left) + \\' \\' + serialize(root->right) + \\' \\';\\n\\t}\\n\\n\\t// Decodes your encoded data to tree.\\n\\tTreeNode* deserialize(string data)\\n\\t{\\n\\t\\tstringstream ss(data);\\n\\t\\treturn deserialize(ss);\\n\\t}\\n\\nprotected:\\n\\tTreeNode* deserialize(stringstream& ss)\\n\\t{\\n\\t\\tstring s;\\n\\t\\tif (!(ss >> s) || s == \"null\") return nullptr;\\n\\t\\tTreeNode* node = new TreeNode(::stoi(s));\\n\\t\\tnode->left = deserialize(ss);\\n\\t\\tnode->right = deserialize(ss);\\n\\t\\treturn node;\\n\\t}\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n\\t// Encodes a tree to a single string.\\n\\tstring serialize(TreeNode* root)\\n\\t{\\n\\t\\tif (root == nullptr) return \"null\";\\n\\t\\tstring str;\\n\\t\\tqueue<TreeNode*> q;\\n\\t\\tq.push(root);\\n\\t\\twhile (!q.empty())\\n\\t\\t{\\n\\t\\t\\tTreeNode* node = q.front();\\n\\t\\t\\tq.pop();\\n\\t\\t\\tstr += (node ? ::to_string(node->val) : \"null\") + \\' \\';\\n\\t\\t\\tif (node)\\n\\t\\t\\t{\\n\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn str;\\n\\t}\\n\\n\\t// Decodes your encoded data to tree.\\n\\tTreeNode* deserialize(string data)\\n\\t{\\n\\t\\tTreeNode* head = nullptr;\\n\\t\\tqueue<TreeNode*> q;\\n\\t\\tstringstream ss(data);\\n\\t\\tstring s;\\n\\t\\tif (ss >> s && s != \"null\")\\n\\t\\t{\\n\\t\\t\\thead = new TreeNode(::stoi(s));\\n\\t\\t\\tq.push(head);\\n\\t\\t}\\n\\t\\twhile (!q.empty())\\n\\t\\t{\\n\\t\\t\\tTreeNode* node = q.front();\\n\\t\\t\\tq.pop();\\n\\t\\t\\tif (ss >> s && s != \"null\")\\n\\t\\t\\t{\\n\\t\\t\\t\\tnode->left = new TreeNode(::stoi(s));\\n\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t}\\n\\t\\t\\tif (ss >> s && s != \"null\")\\n\\t\\t\\t{\\n\\t\\t\\t\\tnode->right = new TreeNode(::stoi(s));\\n\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn head;\\n\\t}\\n};\\n```\n```\\nclass Codec {\\npublic:\\n\\n\\t// Encodes a tree to a single string.\\n\\tstring serialize(TreeNode* root)\\n\\t{\\n\\t\\tif (root == nullptr) return \"null\";\\n\\t\\treturn ::to_string(root->val) + \\' \\' + serialize(root->left) + \\' \\' + serialize(root->right) + \\' \\';\\n\\t}\\n\\n\\t// Decodes your encoded data to tree.\\n\\tTreeNode* deserialize(string data)\\n\\t{\\n\\t\\tstringstream ss(data);\\n\\t\\treturn deserialize(ss);\\n\\t}\\n\\nprotected:\\n\\tTreeNode* deserialize(stringstream& ss)\\n\\t{\\n\\t\\tstring s;\\n\\t\\tif (!(ss >> s) || s == \"null\") return nullptr;\\n\\t\\tTreeNode* node = new TreeNode(::stoi(s));\\n\\t\\tnode->left = deserialize(ss);\\n\\t\\tnode->right = deserialize(ss);\\n\\t\\treturn node;\\n\\t}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74251,
                "title": "15-lines-java-solution-super-clean",
                "content": "Use the preorder way.\\nTo avoid using 'pos' for a global variable, you may use a LinkedList for the deserialize part.\\n\\n```\\n    public String serialize(TreeNode root) {\\n        if (root == null) {return \"#\";}\\n        return root.val + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n\\n    int pos = -1;\\n    public TreeNode deserialize(String data) {\\n        return helper(data.split(\" \"));\\n    }\\n    \\n    public TreeNode helper(String[] data) {\\n        pos++;\\n        if (data[pos].equals(\"#\")) {return null;}\\n        TreeNode root = new TreeNode(Integer.valueOf(data[pos]));\\n        root.left = helper(data); root.right = helper(data);\\n        return root;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public String serialize(TreeNode root) {\\n        if (root == null) {return \"#\";}\\n        return root.val + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n\\n    int pos = -1;\\n    public TreeNode deserialize(String data) {\\n        return helper(data.split(\" \"));\\n    }\\n    \\n    public TreeNode helper(String[] data) {\\n        pos++;\\n        if (data[pos].equals(\"#\")) {return null;}\\n        TreeNode root = new TreeNode(Integer.valueOf(data[pos]));\\n        root.left = helper(data); root.right = helper(data);\\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 74285,
                "title": "swift-solution-recursive-dfs-bfs",
                "content": "```\\nclass Solution {\\n    static let null = \"null\"\\n    static let separator = \",\"\\n    \\n    func serialize_Rec(_ root: TreeNode?) -> String {\\n        var result = [String]()\\n        \\n        buildString(root, &result)\\n        \\n        return result.joined(separator: Solution.separator)\\n    }\\n    \\n    private func buildString(_ root: TreeNode?, _ result: inout [String]) {\\n        if let root = root {\\n            result.append(String(root.val))\\n            buildString(root.left, &result)\\n            buildString(root.right, &result)\\n        }\\n    }\\n    \\n    func deserialize_Rec(_ data: String) -> TreeNode? {\\n        let nodes = data.components(separatedBy: Solution.separator)\\n        \\n        return buildTree(nodes)\\n    }\\n\\n    private func buildTree(_ nodes: [String]) -> TreeNode? {\\n        var nodes = nodes\\n        let val = nodes.removeFirst()\\n        \\n        if val == Solution.null {\\n            return nil\\n        }\\n        \\n        let node = TreeNode(Int(val)!)\\n        node.left = buildTree(nodes)\\n        node.right = buildTree(nodes)\\n        return node\\n    }\\n    \\n    func serialize_BFS(_ root: TreeNode?) -> String {\\n        guard let root = root else {\\n            return \"\"\\n        }\\n        \\n        var result = [String]()\\n        var queue = [TreeNode?]()\\n        \\n        queue.append(root)\\n        while !queue.isEmpty {\\n            let node = queue.removeFirst()\\n            if let node = node {\\n                result.append(String(node.val))\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            } else {\\n                result.append(Solution.null)\\n            }\\n        }\\n        \\n        return result.joined(separator: Solution.separator)\\n    }\\n    \\n    func deserialize_BFS(_ data: String) -> TreeNode? {\\n        if data == \"\" {\\n            return  nil\\n        }\\n        \\n        let vals = data.components(separatedBy: Solution.separator)\\n        guard let rootVal = Int(vals[0]) else {\\n            return nil\\n        }\\n        let root = TreeNode(rootVal)\\n        var queue = [root]\\n        var i = 1\\n        \\n        while i < vals.count {\\n            let parent = queue.removeFirst()\\n            if vals[i] != Solution.null {\\n                guard let val = Int(vals[i]) else {\\n                    return nil\\n                }\\n                let left = TreeNode(val)\\n                parent.left = left\\n                queue.append(left)\\n            }\\n            i += 1\\n            if vals[i] != Solution.null {\\n                guard let val = Int(vals[i]) else {\\n                    return nil\\n                }\\n                let right = TreeNode(val)\\n                parent.right = right\\n                queue.append(right)\\n            }\\n            i += 1\\n        }\\n        \\n        return root\\n    }\\n    \\n    func serialize_DFS(_ root: TreeNode?) -> String {\\n        var root = root\\n        var result = [String]()\\n        var stack = [TreeNode]()\\n        \\n        while root != nil || !stack.isEmpty {\\n            if root != nil {\\n                result.append(String(root!.val))\\n                stack.append(root!)\\n                root = root?.left\\n            } else {\\n                result.append(Solution.null)\\n                root = stack.removeLast()\\n                root = root?.right\\n            }\\n        }\\n        \\n        return result.joined(separator: Solution.separator)\\n    }\\n    \\n    func deserialize_DFS(_ data: String) -> TreeNode? {\\n        if data.characters.count == 0 {\\n            return nil\\n        }\\n        \\n        let nodes = data.components(separatedBy: Solution.separator)\\n        let count = nodes.count\\n        guard let val = Int(nodes[0]) else {\\n            return nil\\n        }\\n        let root = TreeNode(val)\\n        var node = root\\n        var i = 1\\n        var stack = [node]\\n\\n        while i < count {\\n            while i < count && nodes[i] != Solution.null {\\n                guard let val = Int(nodes[i]) else {\\n                    return nil\\n                }\\n                node.left = TreeNode(val)\\n                node = node.left!\\n                stack.append(node)\\n            }\\n            while i < count && nodes[i] != Solution.null {\\n                node = stack.removeLast()\\n                i += 1\\n            }\\n            if i < count {\\n                i += 1\\n                guard let val = Int(nodes[i]) else {\\n                    return nil\\n                }\\n                node.right = TreeNode(val)\\n                node = node.right!\\n                stack.append(node)\\n            }\\n        }\\n        \\n        return root\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    static let null = \"null\"\\n    static let separator = \",\"\\n    \\n    func serialize_Rec(_ root: TreeNode?) -> String {\\n        var result = [String]()\\n        \\n        buildString(root, &result)\\n        \\n        return result.joined(separator: Solution.separator)\\n    }\\n    \\n    private func buildString(_ root: TreeNode?, _ result: inout [String]) {\\n        if let root = root {\\n            result.append(String(root.val))\\n            buildString(root.left, &result)\\n            buildString(root.right, &result)\\n        }\\n    }\\n    \\n    func deserialize_Rec(_ data: String) -> TreeNode? {\\n        let nodes = data.components(separatedBy: Solution.separator)\\n        \\n        return buildTree(nodes)\\n    }\\n\\n    private func buildTree(_ nodes: [String]) -> TreeNode? {\\n        var nodes = nodes\\n        let val = nodes.removeFirst()\\n        \\n        if val == Solution.null {\\n            return nil\\n        }\\n        \\n        let node = TreeNode(Int(val)!)\\n        node.left = buildTree(nodes)\\n        node.right = buildTree(nodes)\\n        return node\\n    }\\n    \\n    func serialize_BFS(_ root: TreeNode?) -> String {\\n        guard let root = root else {\\n            return \"\"\\n        }\\n        \\n        var result = [String]()\\n        var queue = [TreeNode?]()\\n        \\n        queue.append(root)\\n        while !queue.isEmpty {\\n            let node = queue.removeFirst()\\n            if let node = node {\\n                result.append(String(node.val))\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            } else {\\n                result.append(Solution.null)\\n            }\\n        }\\n        \\n        return result.joined(separator: Solution.separator)\\n    }\\n    \\n    func deserialize_BFS(_ data: String) -> TreeNode? {\\n        if data == \"\" {\\n            return  nil\\n        }\\n        \\n        let vals = data.components(separatedBy: Solution.separator)\\n        guard let rootVal = Int(vals[0]) else {\\n            return nil\\n        }\\n        let root = TreeNode(rootVal)\\n        var queue = [root]\\n        var i = 1\\n        \\n        while i < vals.count {\\n            let parent = queue.removeFirst()\\n            if vals[i] != Solution.null {\\n                guard let val = Int(vals[i]) else {\\n                    return nil\\n                }\\n                let left = TreeNode(val)\\n                parent.left = left\\n                queue.append(left)\\n            }\\n            i += 1\\n            if vals[i] != Solution.null {\\n                guard let val = Int(vals[i]) else {\\n                    return nil\\n                }\\n                let right = TreeNode(val)\\n                parent.right = right\\n                queue.append(right)\\n            }\\n            i += 1\\n        }\\n        \\n        return root\\n    }\\n    \\n    func serialize_DFS(_ root: TreeNode?) -> String {\\n        var root = root\\n        var result = [String]()\\n        var stack = [TreeNode]()\\n        \\n        while root != nil || !stack.isEmpty {\\n            if root != nil {\\n                result.append(String(root!.val))\\n                stack.append(root!)\\n                root = root?.left\\n            } else {\\n                result.append(Solution.null)\\n                root = stack.removeLast()\\n                root = root?.right\\n            }\\n        }\\n        \\n        return result.joined(separator: Solution.separator)\\n    }\\n    \\n    func deserialize_DFS(_ data: String) -> TreeNode? {\\n        if data.characters.count == 0 {\\n            return nil\\n        }\\n        \\n        let nodes = data.components(separatedBy: Solution.separator)\\n        let count = nodes.count\\n        guard let val = Int(nodes[0]) else {\\n            return nil\\n        }\\n        let root = TreeNode(val)\\n        var node = root\\n        var i = 1\\n        var stack = [node]\\n\\n        while i < count {\\n            while i < count && nodes[i] != Solution.null {\\n                guard let val = Int(nodes[i]) else {\\n                    return nil\\n                }\\n                node.left = TreeNode(val)\\n                node = node.left!\\n                stack.append(node)\\n            }\\n            while i < count && nodes[i] != Solution.null {\\n                node = stack.removeLast()\\n                i += 1\\n            }\\n            if i < count {\\n                i += 1\\n                guard let val = Int(nodes[i]) else {\\n                    return nil\\n                }\\n                node.right = TreeNode(val)\\n                node = node.right!\\n                stack.append(node)\\n            }\\n        }\\n        \\n        return root\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74318,
                "title": "concise-python-preorder-recursive-method-easy-to-understand-with-comments",
                "content": "    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        def dfs(root):\\n            if not root:\\n                ans.append('#')\\n                return\\n            ans.append(str(root.val))\\n            dfs(root.left)\\n            dfs(root.right)\\n        ans = []\\n        dfs(root)\\n        return ' '.join(ans)\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        def dfs(index):\\n            if data[index] == '#': return None, index\\n            root = TreeNode(int(data[index]))\\n            root.left, index = dfs(index+1)\\n            root.right, index = dfs(index+1)\\n            return root, index\\n        data = data.split()\\n        return dfs(0)[0]\\nIn both of two functions, I use dfs to implement preorder traversal in a recursive way. In deserialization  part, index is used to record the current position of traversal.",
                "solutionTags": [
                    "Python",
                    "Depth-First Search"
                ],
                "code": "    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        def dfs(root):\\n            if not root:\\n                ans.append('#')\\n                return\\n            ans.append(str(root.val))\\n            dfs(root.left)\\n            dfs(root.right)\\n        ans = []\\n        dfs(root)\\n        return ' '.join(ans)\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        def dfs(index):\\n            if data[index] == '#': return None, index\\n            root = TreeNode(int(data[index]))\\n            root.left, index = dfs(index+1)\\n            root.right, index = dfs(index+1)\\n            return root, index\\n        data = data.split()\\n        return dfs(0)[0]\\nIn both of two functions, I use dfs to implement preorder traversal in a recursive way. In deserialization  part, index is used to record the current position of traversal.",
                "codeTag": "Python3"
            },
            {
                "id": 74346,
                "title": "concise-java-solution-21ms",
                "content": "```\\npublic class Codec {\\n\\n    public String serialize(TreeNode root) {\\n        if (root == null) {\\n            return \"#\";\\n        }\\n        return String.valueOf(root.val) + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n\\n    int desPos;\\n\\n    public TreeNode deserialize(String data) {\\n        desPos = -1;\\n        return desHelper(data.split(\" \"));\\n    }\\n\\n    private TreeNode desHelper(String[] strs) {\\n        desPos++;\\n        if (strs[desPos].equals(\"#\")) {\\n            return null;\\n        }\\n        TreeNode node = new TreeNode(Integer.parseInt(strs[desPos]));\\n        node.left = desHelper(strs);\\n        node.right = desHelper(strs);\\n        return node;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Codec {\\n\\n    public String serialize(TreeNode root) {\\n        if (root == null) {\\n            return \"#\";\\n        }\\n        return String.valueOf(root.val) + \" \" + serialize(root.left) + \" \" + serialize(root.right);\\n    }\\n\\n    int desPos;\\n\\n    public TreeNode deserialize(String data) {\\n        desPos = -1;\\n        return desHelper(data.split(\" \"));\\n    }\\n\\n    private TreeNode desHelper(String[] strs) {\\n        desPos++;\\n        if (strs[desPos].equals(\"#\")) {\\n            return null;\\n        }\\n        TreeNode node = new TreeNode(Integer.parseInt(strs[desPos]));\\n        node.left = desHelper(strs);\\n        node.right = desHelper(strs);\\n        return node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74448,
                "title": "c-preorder-approach",
                "content": "    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        serialize(root, s);\\n        return s;\\n    }\\n    \\n    void serialize(TreeNode* root, string &s) {\\n        if(!root) {\\n            s += \"NULL,\";\\n            return;\\n        }\\n        \\n        s += to_string(root->val) + \",\";\\n        serialize(root->left, s);\\n        serialize(root->right, s);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream iss (data);\\n        return deserialize(iss);\\n    }\\n    \\n    TreeNode* deserialize(istringstream& iss) {\\n        string token;\\n        getline(iss, token, ',');\\n        \\n        if(token == \"NULL\")\\n            return NULL;\\n        \\n        TreeNode* newNode = new TreeNode(stoi(token));\\n        newNode->left = deserialize(iss);\\n        newNode->right = deserialize(iss);\\n        return newNode;\\n    }",
                "solutionTags": [],
                "code": "    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        serialize(root, s);\\n        return s;\\n    }\\n    \\n    void serialize(TreeNode* root, string &s) {\\n        if(!root) {\\n            s += \"NULL,\";\\n            return;\\n        }\\n        \\n        s += to_string(root->val) + \",\";\\n        serialize(root->left, s);\\n        serialize(root->right, s);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream iss (data);\\n        return deserialize(iss);\\n    }\\n    \\n    TreeNode* deserialize(istringstream& iss) {\\n        string token;\\n        getline(iss, token, ',');\\n        \\n        if(token == \"NULL\")\\n            return NULL;\\n        \\n        TreeNode* newNode = new TreeNode(stoi(token));\\n        newNode->left = deserialize(iss);\\n        newNode->right = deserialize(iss);\\n        return newNode;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4031498,
                "title": "3-line-code-100-beats-in-both-s-c-t-c-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    static TreeNode res;\\n    public String serialize(TreeNode root) {\\n        res=root;\\n        return \"\";\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return res;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    static TreeNode res;\\n    public String serialize(TreeNode root) {\\n        res=root;\\n        return \"\";\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return res;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931904,
                "title": "c-solution-using-preorder-clean-and-modular-code",
                "content": "# Complexity\\n- Time complexity: O(N) where N is number of nodes\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    void BTtoStr(TreeNode* root, string &ser){\\n        if(!root){\\n            ser += \"N \"; //for NULL\\n            return;\\n        }\\n\\n        //build preorder string\\n        ser += to_string(root->val) + \\' \\';\\n        BTtoStr(root->left, ser);\\n        BTtoStr(root->right, ser);\\n\\n    }\\n    string serialize(TreeNode* root) {\\n        string ser = \"\";\\n        BTtoStr(root, ser);\\n        return ser;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n\\n    TreeNode* StrToBT(string &data, int &i){\\n        if(data[i] == \\'N\\'){\\n            i+=2; // skip space character \\n            return nullptr;\\n        }\\n\\n        string tmp = \"\"; // to store the number\\n        while(data[i] != \\' \\') tmp += data[i++]; // get number\\n        TreeNode* node = new TreeNode(stoi(tmp));\\n        i++; //skip the space character\\n        node->left = StrToBT(data, i); //recurse to build tree\\n        node->right = StrToBT(data, i);\\n\\n        return node;\\n\\n    }\\n    TreeNode* deserialize(string data) {\\n        int i = 0;\\n        return StrToBT(data, i);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Tree",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    void BTtoStr(TreeNode* root, string &ser){\\n        if(!root){\\n            ser += \"N \"; //for NULL\\n            return;\\n        }\\n\\n        //build preorder string\\n        ser += to_string(root->val) + \\' \\';\\n        BTtoStr(root->left, ser);\\n        BTtoStr(root->right, ser);\\n\\n    }\\n    string serialize(TreeNode* root) {\\n        string ser = \"\";\\n        BTtoStr(root, ser);\\n        return ser;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n\\n    TreeNode* StrToBT(string &data, int &i){\\n        if(data[i] == \\'N\\'){\\n            i+=2; // skip space character \\n            return nullptr;\\n        }\\n\\n        string tmp = \"\"; // to store the number\\n        while(data[i] != \\' \\') tmp += data[i++]; // get number\\n        TreeNode* node = new TreeNode(stoi(tmp));\\n        i++; //skip the space character\\n        node->left = StrToBT(data, i); //recurse to build tree\\n        node->right = StrToBT(data, i);\\n\\n        return node;\\n\\n    }\\n    TreeNode* deserialize(string data) {\\n        int i = 0;\\n        return StrToBT(data, i);\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885622,
                "title": "easy-solution-with-complete-explanation-c-bfs",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple Approach --> Makes use of **BFS algorithm** and **stringstream**() to serialize and deserialize the binary tree .\\n\\nA stringstream associates a string object with a stream allowing you to read from the string as if it were a stream (like cin). To use stringstream, we need to include sstream header file. The stringstream class is extremely useful in parsing input. \\n\\nTo learn more about stringstream visit-\\nhttps://en.wikipedia.org/wiki/Sstream\\n\\n# Important\\nWhen converting a string into number using stringstream make sure that your input string consist off **only numbers**, ie.,\\n```c++ []\\nstring x = \"12 65 98 A\";\\nstringstream s;\\ns << x;\\nint temp;\\nwhile(s>>temp){\\n    ...\\n}\\n```\\nwill fail because string \\'x\\' contains a character \\'A\\' which is not a number.\\nIt will work though, if temp is declared as a string, ie.`string temp`.\\n\\nDue to this very reason I have used the number \\'1010\\' to signify a null node\\n<!-- # Complexity\\n- Time complexity: --> \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity:\\nAdd your space complexity here, e.g. $$O(n)$$ --> \\n\\n# Code\\n```\\n#include<sstream>\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n\\n    void BFS(TreeNode * root, string &ans){\\n        if(root == nullptr) return ;\\n\\n        queue<TreeNode * > q;\\n        q.push(root);\\n        while(!q.empty()){\\n            auto cur = q.front();\\n            q.pop();\\n            if(cur){\\n                ans.append(to_string(cur->val) + \\' \\');\\n                q.push(cur->left);\\n                q.push(cur->right);\\n            }\\n            else ans.append(\"1010 \"); \\n\\n            // to_string convert cur->val into a string\\n            // then we add the char \\' \\' to the end of the string which also forms a string\\n\\n            // the space helps us separate one continuous string form another\\n            // to signify a null node we use the number 1010 cause it is bigger than any number present \\n            // in the tree\\n\\n            // rather than using space(\\' \\') we could have also used characters like \\',\\' to help us separate\\n            // one number from another\\n            // though i have used stringstream to solve the question so using \\' \\' to separate two strings is \\n            // the best approach\\n        }\\n    }\\n\\n    string serialize(TreeNode* root) {\\n        string ans ;\\n        BFS(root,ans);\\n        // cout<<ans; // for debugging\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int n = data.size();\\n        if(n == 0) return nullptr;\\n        stringstream s(data);\\n        int cur_val;\\n        s>>cur_val; \\n        // first string in \\'stringstream s\\' moved into cur_val as an int value\\n        // in this case we dont need to check whether \\'s\\' has a value\\n        // in it or not because we have checked whether the queue is empty or not.\\n        // Since we know that it isnt empty we know \\'s\\' also has    \\n        // atleast one string still left to be moved into cur_val\\n\\n        /*\\n            stringstream can convert a string directly into a number\\n            this is what I have used here\\n            eg.-\\n            string s = \"123 456 789\";\\n            stringstream str(s);\\n            int number;\\n            str>>number;\\n            cout<<number; [output will be 123]\\n        */\\n        TreeNode * root = new TreeNode (cur_val);\\n        queue<TreeNode* > q;\\n        q.push(root);\\n\\n        while(!q.empty()){\\n            auto cur = q.front();\\n            q.pop();    \\n            s>>cur_val;\\n            if(cur_val == 1010){\\n                cur->left = nullptr;\\n            }else {\\n                cur->left = new TreeNode(cur_val);\\n                q.push(cur->left);\\n            }\\n            s>>cur_val;\\n            if(cur_val == 1010){\\n                cur->right = nullptr;\\n            }else {\\n                cur->right = new TreeNode(cur_val);\\n                q.push(cur->right);\\n            }\\n\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```c++ []\\nstring x = \"12 65 98 A\";\\nstringstream s;\\ns << x;\\nint temp;\\nwhile(s>>temp){\\n    ...\\n}\\n```\n```\\n#include<sstream>\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n\\n    void BFS(TreeNode * root, string &ans){\\n        if(root == nullptr) return ;\\n\\n        queue<TreeNode * > q;\\n        q.push(root);\\n        while(!q.empty()){\\n            auto cur = q.front();\\n            q.pop();\\n            if(cur){\\n                ans.append(to_string(cur->val) + \\' \\');\\n                q.push(cur->left);\\n                q.push(cur->right);\\n            }\\n            else ans.append(\"1010 \"); \\n\\n            // to_string convert cur->val into a string\\n            // then we add the char \\' \\' to the end of the string which also forms a string\\n\\n            // the space helps us separate one continuous string form another\\n            // to signify a null node we use the number 1010 cause it is bigger than any number present \\n            // in the tree\\n\\n            // rather than using space(\\' \\') we could have also used characters like \\',\\' to help us separate\\n            // one number from another\\n            // though i have used stringstream to solve the question so using \\' \\' to separate two strings is \\n            // the best approach\\n        }\\n    }\\n\\n    string serialize(TreeNode* root) {\\n        string ans ;\\n        BFS(root,ans);\\n        // cout<<ans; // for debugging\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        int n = data.size();\\n        if(n == 0) return nullptr;\\n        stringstream s(data);\\n        int cur_val;\\n        s>>cur_val; \\n        // first string in \\'stringstream s\\' moved into cur_val as an int value\\n        // in this case we dont need to check whether \\'s\\' has a value\\n        // in it or not because we have checked whether the queue is empty or not.\\n        // Since we know that it isnt empty we know \\'s\\' also has    \\n        // atleast one string still left to be moved into cur_val\\n\\n        /*\\n            stringstream can convert a string directly into a number\\n            this is what I have used here\\n            eg.-\\n            string s = \"123 456 789\";\\n            stringstream str(s);\\n            int number;\\n            str>>number;\\n            cout<<number; [output will be 123]\\n        */\\n        TreeNode * root = new TreeNode (cur_val);\\n        queue<TreeNode* > q;\\n        q.push(root);\\n\\n        while(!q.empty()){\\n            auto cur = q.front();\\n            q.pop();    \\n            s>>cur_val;\\n            if(cur_val == 1010){\\n                cur->left = nullptr;\\n            }else {\\n                cur->left = new TreeNode(cur_val);\\n                q.push(cur->left);\\n            }\\n            s>>cur_val;\\n            if(cur_val == 1010){\\n                cur->right = nullptr;\\n            }else {\\n                cur->right = new TreeNode(cur_val);\\n                q.push(cur->right);\\n            }\\n\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3659506,
                "title": "c-level-order-traversal-easy-code-to-understand",
                "content": "# Code\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root) return \"\";\\n        string s=\"\";\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node=q.front();\\n            q.pop();\\n            if(node==NULL) s.append(\"#,\");\\n            else s.append(to_string(node->val)+\\',\\');\\n            if(node!=NULL){\\n                q.push(node->left);\\n                q.push(node->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0) return NULL;\\n        stringstream s(data);\\n        string str;\\n        getline(s,str,\\',\\'); // this will store the number in string format\\n        TreeNode* root=new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node=q.front();\\n            q.pop();\\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->left=NULL;\\n            }\\n            else{\\n                TreeNode* left=new TreeNode(stoi(str));\\n                node->left=left;\\n                q.push(left);\\n            }\\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->right=NULL;\\n            }\\n            else{\\n                TreeNode* right=new TreeNode(stoi(str));\\n                node->right=right;\\n                q.push(right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```\\nPLEASE UPVOTE IF YOU FIND THIS USEFUL",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root) return \"\";\\n        string s=\"\";\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node=q.front();\\n            q.pop();\\n            if(node==NULL) s.append(\"#,\");\\n            else s.append(to_string(node->val)+\\',\\');\\n            if(node!=NULL){\\n                q.push(node->left);\\n                q.push(node->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0) return NULL;\\n        stringstream s(data);\\n        string str;\\n        getline(s,str,\\',\\'); // this will store the number in string format\\n        TreeNode* root=new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node=q.front();\\n            q.pop();\\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->left=NULL;\\n            }\\n            else{\\n                TreeNode* left=new TreeNode(stoi(str));\\n                node->left=left;\\n                q.push(left);\\n            }\\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->right=NULL;\\n            }\\n            else{\\n                TreeNode* right=new TreeNode(stoi(str));\\n                node->right=right;\\n                q.push(right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3438679,
                "title": "iterative-and-recursive-dfs-bfs-approach-easy-understanding",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# DFS\\n```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root: return \"#\"\\n        return str(root.val) + \",\" + self.serialize(root.left) + \",\" + self.serialize(root.right)\\n\\n    def deserialize(self, data):\\n        def deserialize_helper(queue):\\n            val = queue.popleft()\\n            if val == \"#\":\\n                return None\\n            node = TreeNode(int(val))\\n            node.left = deserialize_helper(queue)\\n            node.right = deserialize_helper(queue)\\n            return node\\n        \\n        queue = deque(data.split(\",\"))\\n        return deserialize_helper(queue)\\n\\n```\\n# BFS \\n```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root:\\n            return \"\"\\n        queue = [root]\\n        result = []\\n        while queue:\\n            node = queue.pop(0)\\n            if node:\\n                result.append(str(node.val))\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            else:\\n                result.append(\"#\")\\n        return \",\".join(result)\\n\\n    def deserialize(self, data):\\n        if not data:\\n            return None\\n        values = data.split(\",\")\\n        root = TreeNode(int(values[0]))\\n        queue = [root]\\n        i = 1\\n        while queue:\\n            node = queue.pop(0)\\n            if values[i] != \"#\":\\n                left = TreeNode(int(values[i]))\\n                node.left = left\\n                queue.append(left)\\n            i += 1\\n            if values[i] != \"#\":\\n                right = TreeNode(int(values[i]))\\n                node.right = right\\n                queue.append(right)\\n            i += 1\\n        return root\\n```\\n\\n",
                "solutionTags": [
                    "Python3",
                    "Tree",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Design"
                ],
                "code": "```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root: return \"#\"\\n        return str(root.val) + \",\" + self.serialize(root.left) + \",\" + self.serialize(root.right)\\n\\n    def deserialize(self, data):\\n        def deserialize_helper(queue):\\n            val = queue.popleft()\\n            if val == \"#\":\\n                return None\\n            node = TreeNode(int(val))\\n            node.left = deserialize_helper(queue)\\n            node.right = deserialize_helper(queue)\\n            return node\\n        \\n        queue = deque(data.split(\",\"))\\n        return deserialize_helper(queue)\\n\\n```\n```\\nclass Codec:\\n    def serialize(self, root):\\n        if not root:\\n            return \"\"\\n        queue = [root]\\n        result = []\\n        while queue:\\n            node = queue.pop(0)\\n            if node:\\n                result.append(str(node.val))\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            else:\\n                result.append(\"#\")\\n        return \",\".join(result)\\n\\n    def deserialize(self, data):\\n        if not data:\\n            return None\\n        values = data.split(\",\")\\n        root = TreeNode(int(values[0]))\\n        queue = [root]\\n        i = 1\\n        while queue:\\n            node = queue.pop(0)\\n            if values[i] != \"#\":\\n                left = TreeNode(int(values[i]))\\n                node.left = left\\n                queue.append(left)\\n            i += 1\\n            if values[i] != \"#\":\\n                right = TreeNode(int(values[i]))\\n                node.right = right\\n                queue.append(right)\\n            i += 1\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2952853,
                "title": "c-striver-s-approach-level-order-traversal",
                "content": "![image](https://assets.leetcode.com/users/images/fd679e3b-5a13-46e4-bf1c-28b4a8b0d613_1672045191.7671754.png)\\n\\n**T->O(Number of Nodes) && S->O(Number of Nodes)**\\n\\n\\tclass Codec {\\n\\tpublic:\\n\\t\\t// Encodes a tree to a single string.\\n\\t\\tstring serialize(TreeNode* root) {\\n\\t\\t\\tstring str=\"\";\\n\\t\\t\\tif(!root) return str;\\n\\t\\t\\tqueue<TreeNode*> q;\\n\\t\\t\\tq.push(root);\\n\\t\\t\\twhile(!q.empty()){\\n\\t\\t\\t\\tTreeNode* node=q.front();\\n\\t\\t\\t\\tq.pop();\\n\\t\\t\\t\\tif(node) str+=to_string(node->val)+\\',\\';\\n\\t\\t\\t\\telse str+=\"#,\";\\n\\t\\t\\t\\tif(node){\\n\\t\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t\\t}     \\n\\t\\t\\t}\\n\\t\\t\\treturn str;\\n\\t\\t}\\n\\n\\t\\t// Decodes your encoded data to tree.\\n\\t\\tTreeNode* deserialize(string data) {\\n\\t\\t\\tif(!data.size()) return NULL;\\n\\t\\t\\tstringstream s(data);\\n\\t\\t\\tstring str;\\n\\t\\t\\tgetline(s,str,\\',\\');\\n\\t\\t\\tTreeNode* root= new TreeNode(stoi(str)); \\n\\t\\t\\tqueue<TreeNode*>q;\\n\\t\\t\\tq.push(root);\\n\\t\\t\\twhile(!q.empty()){\\n\\t\\t\\t\\tTreeNode* node=q.front();\\n\\t\\t\\t\\tq.pop();\\n\\n\\t\\t\\t\\tgetline(s,str,\\',\\');\\n\\t\\t\\t\\tif(str==\"#\") node->left=NULL;\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tnode->left=new TreeNode(stoi(str));\\n\\t\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgetline(s,str,\\',\\');\\n\\t\\t\\t\\tif(str==\"#\") node->right=NULL;\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tnode->right=new TreeNode(stoi(str));\\n\\t\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn root;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/fd679e3b-5a13-46e4-bf1c-28b4a8b0d613_1672045191.7671754.png)\\n\\n**T->O(Number of Nodes) && S->O(Number of Nodes)**\\n\\n\\tclass Codec {\\n\\tpublic:\\n\\t\\t// Encodes a tree to a single string.\\n\\t\\tstring serialize(TreeNode* root) {\\n\\t\\t\\tstring str=\"\";\\n\\t\\t\\tif(!root) return str;\\n\\t\\t\\tqueue<TreeNode*> q;\\n\\t\\t\\tq.push(root);\\n\\t\\t\\twhile(!q.empty()){\\n\\t\\t\\t\\tTreeNode* node=q.front();\\n\\t\\t\\t\\tq.pop();\\n\\t\\t\\t\\tif(node) str+=to_string(node->val)+\\',\\';\\n\\t\\t\\t\\telse str+=\"#,\";\\n\\t\\t\\t\\tif(node){\\n\\t\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t\\t}     \\n\\t\\t\\t}\\n\\t\\t\\treturn str;\\n\\t\\t}\\n\\n\\t\\t// Decodes your encoded data to tree.\\n\\t\\tTreeNode* deserialize(string data) {\\n\\t\\t\\tif(!data.size()) return NULL;\\n\\t\\t\\tstringstream s(data);\\n\\t\\t\\tstring str;\\n\\t\\t\\tgetline(s,str,\\',\\');\\n\\t\\t\\tTreeNode* root= new TreeNode(stoi(str)); \\n\\t\\t\\tqueue<TreeNode*>q;\\n\\t\\t\\tq.push(root);\\n\\t\\t\\twhile(!q.empty()){\\n\\t\\t\\t\\tTreeNode* node=q.front();\\n\\t\\t\\t\\tq.pop();\\n\\n\\t\\t\\t\\tgetline(s,str,\\',\\');\\n\\t\\t\\t\\tif(str==\"#\") node->left=NULL;\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tnode->left=new TreeNode(stoi(str));\\n\\t\\t\\t\\t\\tq.push(node->left);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgetline(s,str,\\',\\');\\n\\t\\t\\t\\tif(str==\"#\") node->right=NULL;\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tnode->right=new TreeNode(stoi(str));\\n\\t\\t\\t\\t\\tq.push(node->right);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn root;\\n\\t\\t}\\n\\t};",
                "codeTag": "Java"
            },
            {
                "id": 2822017,
                "title": "java-solution-easy-to-understand",
                "content": "# public class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        String str=\"\";\\n        ArrayList<String> arr=new ArrayList<>();\\n        traverse(root,arr);\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            str=str+arr.get(i);\\n        }\\n        return str;\\n    }\\n    public void traverse(TreeNode root,ArrayList<String> arr)\\n    {\\n        if(root==null)\\n        {\\n            arr.add(\"#\"+\",\");\\n            return;\\n        }\\n        arr.add(root.val+\",\");\\n        traverse(root.left,arr);\\n        traverse(root.right,arr);\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        String[] arr = data.split(\",\");\\n        Queue<String> q = new LinkedList<String>();\\n        for(String s : arr){\\n            q.add(s);\\n        }\\n        return helper(q);\\n    }\\n    public TreeNode helper(Queue<String> q){\\n        String s = q.poll();\\n        if(s.equals(\"#\")){\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(s));\\n        root.left = helper(q);\\n        root.right = helper(q);\\n        return root;\\n    }\\n}\\n\\n",
                "solutionTags": [
                    "Java",
                    "Queue"
                ],
                "code": "# public class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        String str=\"\";\\n        ArrayList<String> arr=new ArrayList<>();\\n        traverse(root,arr);\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            str=str+arr.get(i);\\n        }\\n        return str;\\n    }\\n    public void traverse(TreeNode root,ArrayList<String> arr)\\n    {\\n        if(root==null)\\n        {\\n            arr.add(\"#\"+\",\");\\n            return;\\n        }\\n        arr.add(root.val+\",\");\\n        traverse(root.left,arr);\\n        traverse(root.right,arr);\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        String[] arr = data.split(\",\");\\n        Queue<String> q = new LinkedList<String>();\\n        for(String s : arr){\\n            q.add(s);\\n        }\\n        return helper(q);\\n    }\\n    public TreeNode helper(Queue<String> q){\\n        String s = q.poll();\\n        if(s.equals(\"#\")){\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(s));\\n        root.left = helper(q);\\n        root.right = helper(q);\\n        return root;\\n    }\\n}\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 2748569,
                "title": "c-level-order-traversal",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n \\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root){return \"\";}\\n        string s=\"\";\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* r=q.front();\\n            q.pop();\\n            if(!r){s+=\"#,\";}\\n            else{s+=(to_string(r->val)+\",\");}\\n            if(r!=NULL){\\n                q.push(r->left);\\n                q.push(r->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0){return NULL;}\\n        stringstream x(data);\\n        string str=\"\";\\n        getline(x, str, \\',\\');\\n        TreeNode* root=new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* rt=q.front();\\n            q.pop();\\n            getline(x, str, \\',\\');\\n            if(str==\"#\"){\\n                rt->left=NULL;\\n            }\\n            else{\\n                TreeNode* lft=new TreeNode(stoi(str));\\n                rt->left=lft;\\n                q.push(lft);\\n            }\\n            getline(x, str, \\',\\');\\n            if(str==\"#\"){rt->right=NULL;}\\n            else{\\n                TreeNode* rgt=new TreeNode(stoi(str));\\n                rt->right=rgt;\\n                q.push(rgt);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n \\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root){return \"\";}\\n        string s=\"\";\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* r=q.front();\\n            q.pop();\\n            if(!r){s+=\"#,\";}\\n            else{s+=(to_string(r->val)+\",\");}\\n            if(r!=NULL){\\n                q.push(r->left);\\n                q.push(r->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0){return NULL;}\\n        stringstream x(data);\\n        string str=\"\";\\n        getline(x, str, \\',\\');\\n        TreeNode* root=new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* rt=q.front();\\n            q.pop();\\n            getline(x, str, \\',\\');\\n            if(str==\"#\"){\\n                rt->left=NULL;\\n            }\\n            else{\\n                TreeNode* lft=new TreeNode(stoi(str));\\n                rt->left=lft;\\n                q.push(lft);\\n            }\\n            getline(x, str, \\',\\');\\n            if(str==\"#\"){rt->right=NULL;}\\n            else{\\n                TreeNode* rgt=new TreeNode(stoi(str));\\n                rt->right=rgt;\\n                q.push(rgt);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n\\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 2404290,
                "title": "easy-c-code-bfs-traversal-intuition",
                "content": "```\\nclass Codec {\\npublic:\\n    //create string using BFS\\n    //make tree by traversing the string,use concept of stringstream()\\n    \\n    string serialize(TreeNode* root) {\\n        if(!root){\\n            return \"\";\\n        }\\n        //BFS Traversal\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        string str=\"\";\\n        while(q.size()>0){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            \\n            if(!curr){\\n                //if node is null\\n                str.append(\"#,\");\\n            }else{\\n                str.append(to_string(curr->val) + \\',\\');\\n                q.push(curr->left);\\n                q.push(curr->right);\\n            }\\n        }\\n\\n        return str;        \\n    }\\n\\n    TreeNode* deserialize(string data) {\\n        //we will use the concept of stringstream s();\\n        //ss will automatically move to the next char based on the delimeter when we will call getline(stream,str,delimeter) ;\\n        //create a root node with the first element\\n        //then again with the help of bfs we will keep setting the left and right node of each node\\n        if(data.length()==0)\\n            return NULL;\\n        stringstream ss(data);\\n        string str;\\n        getline(ss,str,\\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(q.size()>0){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n\\n            //leftNode\\n            getline(ss,str,\\',\\');\\n            if(str==\"#\"){\\n                curr->left = NULL;\\n            }else{\\n                TreeNode* leftNode = new TreeNode(stoi(str));\\n                curr->left = leftNode;\\n                q.push(leftNode);\\n            }\\n            \\n            //rightNode\\n            getline(ss,str,\\',\\');\\n            if(str==\"#\"){\\n                curr->right = NULL;\\n            }else{\\n                TreeNode* rightNode = new TreeNode(stoi(str));\\n                curr->right = rightNode;\\n                q.push(rightNode);\\n            }\\n        }\\n        \\n        return root;\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n    //create string using BFS\\n    //make tree by traversing the string,use concept of stringstream()\\n    \\n    string serialize(TreeNode* root) {\\n        if(!root){\\n            return \"\";\\n        }\\n        //BFS Traversal\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        string str=\"\";\\n        while(q.size()>0){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            \\n            if(!curr){\\n                //if node is null\\n                str.append(\"#,\");\\n            }else{\\n                str.append(to_string(curr->val) + \\',\\');\\n                q.push(curr->left);\\n                q.push(curr->right);\\n            }\\n        }\\n\\n        return str;        \\n    }\\n\\n    TreeNode* deserialize(string data) {\\n        //we will use the concept of stringstream s();\\n        //ss will automatically move to the next char based on the delimeter when we will call getline(stream,str,delimeter) ;\\n        //create a root node with the first element\\n        //then again with the help of bfs we will keep setting the left and right node of each node\\n        if(data.length()==0)\\n            return NULL;\\n        stringstream ss(data);\\n        string str;\\n        getline(ss,str,\\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        \\n        while(q.size()>0){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n\\n            //leftNode\\n            getline(ss,str,\\',\\');\\n            if(str==\"#\"){\\n                curr->left = NULL;\\n            }else{\\n                TreeNode* leftNode = new TreeNode(stoi(str));\\n                curr->left = leftNode;\\n                q.push(leftNode);\\n            }\\n            \\n            //rightNode\\n            getline(ss,str,\\',\\');\\n            if(str==\"#\"){\\n                curr->right = NULL;\\n            }else{\\n                TreeNode* rightNode = new TreeNode(stoi(str));\\n                curr->right = rightNode;\\n                q.push(rightNode);\\n            }\\n        }\\n        \\n        return root;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1976443,
                "title": "short-python-iterative-bfs-solution",
                "content": "The following solution serializes the tree to:\\n```\\nroot = [1,2,3,null,null,4,5,null,null,null,null]\\n```\\n\\n### Solution\\n\\n```python\\nclass Codec:\\n    def serialize(self, root):\\n        result, q = [], []\\n        if root: q.append(root)\\n        for n in q:        \\n            if n:\\n                result.append(str(n.val))\\n                q += n.left, n.right\\n            else:\\n                result.append(\"null\")\\n        return \",\".join(result)\\n                    \\n\\n    def deserialize(self, data):\\n        if len(data) == 0: return None        \\n        nodes, q, pos = data.split(\",\"), deque(), 1\\n        root = TreeNode(int(nodes[0]))\\n        q.append(root)\\n        while q:\\n            n = q.popleft()\\n            if nodes[pos] != \"null\":\\n                n.left = TreeNode(int(nodes[pos]))\\n                q.append(n.left)\\n            pos += 1\\n            if nodes[pos] != \"null\":\\n                n.right = TreeNode(int(nodes[pos]))\\n                q.append(n.right)\\n            pos += 1\\n            \\n        return root\\n```",
                "solutionTags": [
                    "Python",
                    "Breadth-First Search",
                    "Iterator"
                ],
                "code": "```\\nroot = [1,2,3,null,null,4,5,null,null,null,null]\\n```\n```python\\nclass Codec:\\n    def serialize(self, root):\\n        result, q = [], []\\n        if root: q.append(root)\\n        for n in q:        \\n            if n:\\n                result.append(str(n.val))\\n                q += n.left, n.right\\n            else:\\n                result.append(\"null\")\\n        return \",\".join(result)\\n                    \\n\\n    def deserialize(self, data):\\n        if len(data) == 0: return None        \\n        nodes, q, pos = data.split(\",\"), deque(), 1\\n        root = TreeNode(int(nodes[0]))\\n        q.append(root)\\n        while q:\\n            n = q.popleft()\\n            if nodes[pos] != \"null\":\\n                n.left = TreeNode(int(nodes[pos]))\\n                q.append(n.left)\\n            pos += 1\\n            if nodes[pos] != \"null\":\\n                n.right = TreeNode(int(nodes[pos]))\\n                q.append(n.right)\\n            pos += 1\\n            \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1953345,
                "title": "c-easy-to-understand-solution-time-complexity-o-n",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root){\\n            return \"NULL,\";\\n        }\\n        \\n        return to_string(root->val) + \",\" + serialize(root->left) + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream ss(data);\\n        return deserialize_helper(ss);\\n    }\\n    \\n    TreeNode* deserialize_helper(stringstream& ss){\\n        string curr;\\n        getline(ss, curr, \\',\\');\\n        \\n        if(curr == \"NULL\"){\\n            return nullptr;\\n        }\\n        \\n        TreeNode* root = new TreeNode(stoi(curr));\\n        root->left = deserialize_helper(ss);\\n        root->right = deserialize_helper(ss);\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(!root){\\n            return \"NULL,\";\\n        }\\n        \\n        return to_string(root->val) + \",\" + serialize(root->left) + serialize(root->right);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream ss(data);\\n        return deserialize_helper(ss);\\n    }\\n    \\n    TreeNode* deserialize_helper(stringstream& ss){\\n        string curr;\\n        getline(ss, curr, \\',\\');\\n        \\n        if(curr == \"NULL\"){\\n            return nullptr;\\n        }\\n        \\n        TreeNode* root = new TreeNode(stoi(curr));\\n        root->left = deserialize_helper(ss);\\n        root->right = deserialize_helper(ss);\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));",
                "codeTag": "Java"
            },
            {
                "id": 1794333,
                "title": "swift-simple-dfs-solution",
                "content": "```\\nclass Codec {\\n    func serialize(_ root: TreeNode?) -> String {\\n        if root == nil {\\n            return \"null,\"\\n        }\\n        let newNode = \"\\\\(root?.val ?? 0),\" + serialize(root?.left) + serialize(root?.right)\\n        return newNode\\n    }\\n    \\n    private func deserialize(_ queue: inout [String]) -> TreeNode? {\\n        let value = queue.removeFirst()\\n        if value == \"null\" {\\n            return nil\\n        }\\n        let node = TreeNode(Int(value) ?? 0)\\n        node.left = deserialize(&queue)\\n        node.right = deserialize(&queue)\\n        return node\\n    }\\n    \\n    func deserialize(_ data: String) -> TreeNode? {\\n        var queue: [String] = data.components(separatedBy: \",\")\\n        return deserialize(&queue)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Codec {\\n    func serialize(_ root: TreeNode?) -> String {\\n        if root == nil {\\n            return \"null,\"\\n        }\\n        let newNode = \"\\\\(root?.val ?? 0),\" + serialize(root?.left) + serialize(root?.right)\\n        return newNode\\n    }\\n    \\n    private func deserialize(_ queue: inout [String]) -> TreeNode? {\\n        let value = queue.removeFirst()\\n        if value == \"null\" {\\n            return nil\\n        }\\n        let node = TreeNode(Int(value) ?? 0)\\n        node.left = deserialize(&queue)\\n        node.right = deserialize(&queue)\\n        return node\\n    }\\n    \\n    func deserialize(_ data: String) -> TreeNode? {\\n        var queue: [String] = data.components(separatedBy: \",\")\\n        return deserialize(&queue)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1729674,
                "title": "c-very-simple-solution-no-need-comments-to-understand",
                "content": "TC: ser: O(n), deser: O(n) of Split +O(n) of loop splitted array = O(n)\\nSC: ser: O(1), deser: O(n) (splitted array, tree size)\\n\\n```\\n public string serialize(TreeNode root)\\n    {\\n        return root == null ? \"n\" : $\"{root.val},{serialize(root.left)},{serialize(root.right)}\";\\n    }\\n\\n    public TreeNode deserialize(string data)\\n    {\\n        return string.IsNullOrEmpty(data) ? null: InOrderListBuildTree(data.Split(\",\"), new IndexHelper());\\n    }\\n\\n    private TreeNode InOrderListBuildTree(string[] nums, IndexHelper index)\\n    {\\n        if (nums[index.i] == \"n\") return null;\\n        return new TreeNode(int.Parse(nums[index.i]))\\n        {\\n            left = InOrderListBuildTree(nums, index.Increase()),\\n            right = InOrderListBuildTree(nums, index.Increase())\\n        };\\n    }\\n\\t//Simplay wrap i and allow increasing in one line\\n    class IndexHelper { public int i = 0; public IndexHelper Increase() { i++; return this; } }\\n```\\n\\nHere is a Split implementation (O(n))\\n```\\nprivate string[] Split(string s, char sep)\\n{\\n\\tvar items = new List<string>();\\n\\n\\tfor (int i = 0, end; i < s.Length && ((end = s.IndexOf(\\',\\', i)) != -1 || (end = s.Length) >= 0); i = end + 1)\\n\\t{\\n\\t\\titems.Add(s.Substring(i, end - i));\\n\\t}\\n\\treturn items.ToArray();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n public string serialize(TreeNode root)\\n    {\\n        return root == null ? \"n\" : $\"{root.val},{serialize(root.left)},{serialize(root.right)}\";\\n    }\\n\\n    public TreeNode deserialize(string data)\\n    {\\n        return string.IsNullOrEmpty(data) ? null: InOrderListBuildTree(data.Split(\",\"), new IndexHelper());\\n    }\\n\\n    private TreeNode InOrderListBuildTree(string[] nums, IndexHelper index)\\n    {\\n        if (nums[index.i] == \"n\") return null;\\n        return new TreeNode(int.Parse(nums[index.i]))\\n        {\\n            left = InOrderListBuildTree(nums, index.Increase()),\\n            right = InOrderListBuildTree(nums, index.Increase())\\n        };\\n    }\\n\\t//Simplay wrap i and allow increasing in one line\\n    class IndexHelper { public int i = 0; public IndexHelper Increase() { i++; return this; } }\\n```\n```\\nprivate string[] Split(string s, char sep)\\n{\\n\\tvar items = new List<string>();\\n\\n\\tfor (int i = 0, end; i < s.Length && ((end = s.IndexOf(\\',\\', i)) != -1 || (end = s.Length) >= 0); i = end + 1)\\n\\t{\\n\\t\\titems.Add(s.Substring(i, end - i));\\n\\t}\\n\\treturn items.ToArray();\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1675161,
                "title": "preorder-c-time-o-n",
                "content": "**Serialize** : Do a preorder traversal and convert each node\\'s value into a string and push it in the answer string. If node is null, then push \\'#\\'. In both cases also push a space.\\n\\n**Deserialize:** : Traverse through the given string while keeping a pointer to current character. If character is \\'#\\', then that means we have to create a NULL node. So create that and move pointer two places forward (because of \\'#\\' & space). Else, store characters in a temporary string until we encounter a space and then convert this string into an integer.  Then, create a node with this value and move pointer one place forward. Now, recursively call for left and right .\\n\\n\\n```\\nclass Codec {\\npublic:\\n    void helper(TreeNode* root,string &s)\\n    {\\n        if(!root)\\n        {\\n            s+=\"# \";\\n            return ;\\n        }\\n        s+=to_string(root->val);\\n        s+=\\' \\';\\n        helper(root->left,s);\\n        helper(root->right,s);\\n    }\\n    \\n    string serialize(TreeNode* root) {\\n        string s;\\n        helper(root,s);\\n        return s;\\n    }\\n\\n    TreeNode* create(string s,int &i,int n)\\n    {\\n        if(s[i]==\\'#\\')\\n        {\\n            i+=2;\\n            return NULL;\\n        }\\n        string temp;\\n        while(s[i]!=\\' \\')\\n        {\\n            temp.push_back(s[i]);\\n            i++;\\n        }\\n        int x = stoi(temp);\\n        TreeNode* root = new TreeNode(x);\\n        i++;\\n        root->left = create(s,i,n);\\n        root->right = create(s,i,n);\\n        return root;\\n    }\\n\\n    TreeNode* deserialize(string s) {\\n        int n = s.length(),i=0;\\n        return create(s,i,n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n    void helper(TreeNode* root,string &s)\\n    {\\n        if(!root)\\n        {\\n            s+=\"# \";\\n            return ;\\n        }\\n        s+=to_string(root->val);\\n        s+=\\' \\';\\n        helper(root->left,s);\\n        helper(root->right,s);\\n    }\\n    \\n    string serialize(TreeNode* root) {\\n        string s;\\n        helper(root,s);\\n        return s;\\n    }\\n\\n    TreeNode* create(string s,int &i,int n)\\n    {\\n        if(s[i]==\\'#\\')\\n        {\\n            i+=2;\\n            return NULL;\\n        }\\n        string temp;\\n        while(s[i]!=\\' \\')\\n        {\\n            temp.push_back(s[i]);\\n            i++;\\n        }\\n        int x = stoi(temp);\\n        TreeNode* root = new TreeNode(x);\\n        i++;\\n        root->left = create(s,i,n);\\n        root->right = create(s,i,n);\\n        return root;\\n    }\\n\\n    TreeNode* deserialize(string s) {\\n        int n = s.length(),i=0;\\n        return create(s,i,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1606779,
                "title": "python-easy-code",
                "content": "\\tdef serialize(self, root):\\n        if not(root): return \"\"\\n        s=\"\"\\n        q=queue.Queue()\\n        q.put(root)\\n        while(not(q.empty())):\\n            curr=q.get()\\n            if curr:\\n                s+=str(curr.val)+\",\"\\n                q.put(curr.left)\\n                q.put(curr.right)\\n            else:\\n                s+=\"#,\"\\n        return s      \\n\\n    def deserialize(self, s):\\n        if len(s)==0:\\n            return None\\n        s=s.split(\",\")\\n        s=s[:-1]\\n        q=queue.Queue()\\n        root=TreeNode(int(s[0]))\\n        q.put(root)\\n        i=1\\n        while(not(q.empty())):\\n            curr=q.get()\\n            if len(s)>=i:\\n                if s[i]==\"#\":\\n                    curr.left=None\\n                    i+=1\\n                else:\\n                    curr.left=TreeNode(int(s[i]))\\n                    q.put(curr.left)\\n                    i+=1\\n                if s[i]==\"#\":\\n                    curr.right=None\\n                    i+=1\\n                else:\\n                    curr.right=TreeNode(int(s[i]))\\n                    q.put(curr.right)\\n                    i+=1\\n        return root",
                "solutionTags": [
                    "Python",
                    "Queue"
                ],
                "code": "\\tdef serialize(self, root):\\n        if not(root): return \"\"\\n        s=\"\"\\n        q=queue.Queue()\\n        q.put(root)\\n        while(not(q.empty())):\\n            curr=q.get()\\n            if curr:\\n                s+=str(curr.val)+\",\"\\n                q.put(curr.left)\\n                q.put(curr.right)\\n            else:\\n                s+=\"#,\"\\n        return s      \\n\\n    def deserialize(self, s):\\n        if len(s)==0:\\n            return None\\n        s=s.split(\",\")\\n        s=s[:-1]\\n        q=queue.Queue()\\n        root=TreeNode(int(s[0]))\\n        q.put(root)\\n        i=1\\n        while(not(q.empty())):\\n            curr=q.get()\\n            if len(s)>=i:\\n                if s[i]==\"#\":\\n                    curr.left=None\\n                    i+=1\\n                else:\\n                    curr.left=TreeNode(int(s[i]))\\n                    q.put(curr.left)\\n                    i+=1\\n                if s[i]==\"#\":\\n                    curr.right=None\\n                    i+=1\\n                else:\\n                    curr.right=TreeNode(int(s[i]))\\n                    q.put(curr.right)\\n                    i+=1\\n        return root",
                "codeTag": "Python3"
            },
            {
                "id": 1454308,
                "title": "c-easy-to-understand-code-recursion",
                "content": "class Codec{\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL) return \"\";\\n        \\n        string s =\"\";\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n            if(node==NULL) s.append(\"#,\");\\n            else s.append(to_string(node->val)+\",\");\\n            if(node!=NULL){\\n                q.push(node->left);\\n                q.push(node->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0) return NULL;\\n        stringstream s(data);\\n        string str;\\n        getline(s,str,\\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node=q.front();\\n            q.pop();\\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->left=NULL;\\n            }\\n            else{\\n                TreeNode* leftnode = new TreeNode(stoi(str));\\n                node->left=leftnode;\\n                q.push(leftnode);\\n            }\\n            \\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->right=NULL;\\n            }\\n            else{\\n                TreeNode* rightnode = new TreeNode(stoi(str));\\n                node->right=rightnode;\\n                q.push(rightnode);\\n            }\\n        }\\n        return root;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Codec{\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL) return \"\";\\n        \\n        string s =\"\";\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n            if(node==NULL) s.append(\"#,\");\\n            else s.append(to_string(node->val)+\",\");\\n            if(node!=NULL){\\n                q.push(node->left);\\n                q.push(node->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0) return NULL;\\n        stringstream s(data);\\n        string str;\\n        getline(s,str,\\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node=q.front();\\n            q.pop();\\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->left=NULL;\\n            }\\n            else{\\n                TreeNode* leftnode = new TreeNode(stoi(str));\\n                node->left=leftnode;\\n                q.push(leftnode);\\n            }\\n            \\n            getline(s,str,\\',\\');\\n            if(str==\"#\"){\\n                node->right=NULL;\\n            }\\n            else{\\n                TreeNode* rightnode = new TreeNode(stoi(str));\\n                node->right=rightnode;\\n                q.push(rightnode);\\n            }\\n        }\\n        return root;\\n    }\\n};",
                "codeTag": "Java"
            },
            {
                "id": 1423834,
                "title": "this-problem-is-broken",
                "content": "I gave a shot at this problem. Even though it is obvious that we are expected to explore the tree and find a structure which encode the tree and be transformed back into a binary tree, there\\'s a loophole in this problem and it comes from the way the `Codec` is instantiated and called. In the solution, there is the following comment:\\n```\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\\n```\\nNo check is being made on the outputs/inputs types. So basically, the solution:\\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        return root\\n        \\n\\n    def deserialize(self, data):\\n        return data\\n```\\nWorks more than well and be both faster and less memory-consumer than >99% of Python3 implementations.",
                "solutionTags": [],
                "code": "```\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\\n```\n```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        return root\\n        \\n\\n    def deserialize(self, data):\\n        return data\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1177671,
                "title": "python-dfs-faster-than-90-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/62e4fcf1-3059-4ef0-8779-9b8b9021cbcc_1619450658.2125103.png)\\n```\\nclass Codec:\\n    def serialize(self, root):\\n        ans = []\\n        def dfs(node):\\n            if node is None:\\n                ans.append(\\'#\\')\\n                return\\n            ans.append(node.val)\\n            dfs(node.left)\\n            dfs(node.right)\\n        dfs(root)\\n        return ans\\n    def deserialize(self, data):\\n        data = collections.deque(data)\\n        def dfs():\\n            if data:\\n                i = data.popleft()\\n            else: return None\\n            if i is \\'#\\': return None\\n            node = TreeNode(str(i))\\n            node.left = dfs()\\n            node.right = dfs()\\n            return node\\n        return dfs()\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Codec:\\n    def serialize(self, root):\\n        ans = []\\n        def dfs(node):\\n            if node is None:\\n                ans.append(\\'#\\')\\n                return\\n            ans.append(node.val)\\n            dfs(node.left)\\n            dfs(node.right)\\n        dfs(root)\\n        return ans\\n    def deserialize(self, data):\\n        data = collections.deque(data)\\n        def dfs():\\n            if data:\\n                i = data.popleft()\\n            else: return None\\n            if i is \\'#\\': return None\\n            node = TreeNode(str(i))\\n            node.left = dfs()\\n            node.right = dfs()\\n            return node\\n        return dfs()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1071715,
                "title": "simple-java-solution-using-queue",
                "content": "```\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root == null) return \"\";\\n        StringBuilder sb = new StringBuilder();\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        while(q.size() > 0) {\\n            TreeNode node = q.poll();\\n            if(node == null) {\\n                sb.append(\"# \");\\n                continue;\\n            } else {\\n                sb.append(node.val + \" \");\\n            }\\n            q.offer(node.left);\\n            q.offer(node.right);\\n        }\\n        \\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data.length() == 0) return null;\\n        String[] arr = data.split(\" \");\\n        TreeNode root = new TreeNode(Integer.parseInt(arr[0]));\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        for(int i=1; i<arr.length; i++) {\\n            TreeNode node = q.poll();\\n            if(!arr[i].equals(\"#\")) {\\n                node.left = new TreeNode(Integer.parseInt(arr[i]));\\n                q.offer(node.left);\\n            }\\n            if(!arr[++i].equals(\"#\")) {\\n                node.right = new TreeNode(Integer.parseInt(arr[i]));\\n                q.offer(node.right);\\n            }\\n        }\\n        \\n        return root;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root == null) return \"\";\\n        StringBuilder sb = new StringBuilder();\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        while(q.size() > 0) {\\n            TreeNode node = q.poll();\\n            if(node == null) {\\n                sb.append(\"# \");\\n                continue;\\n            } else {\\n                sb.append(node.val + \" \");\\n            }\\n            q.offer(node.left);\\n            q.offer(node.right);\\n        }\\n        \\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data.length() == 0) return null;\\n        String[] arr = data.split(\" \");\\n        TreeNode root = new TreeNode(Integer.parseInt(arr[0]));\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.offer(root);\\n        for(int i=1; i<arr.length; i++) {\\n            TreeNode node = q.poll();\\n            if(!arr[i].equals(\"#\")) {\\n                node.left = new TreeNode(Integer.parseInt(arr[i]));\\n                q.offer(node.left);\\n            }\\n            if(!arr[++i].equals(\"#\")) {\\n                node.right = new TreeNode(Integer.parseInt(arr[i]));\\n                q.offer(node.right);\\n            }\\n        }\\n        \\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1056936,
                "title": "simple-java-recursive-solution",
                "content": "```\\npublic class Codec {\\n\\n    private static final String NULL = \"NULL\";\\n    private static final String COMMA = \",\";\\n    \\n    // Encodes a tree to a single string.\\n    \\n    // Doing a pre-order traversal on the tree and returning a serialized string delimited by \",\"\\n    public String serialize(TreeNode root) {\\n        if (root == null) return NULL + COMMA;\\n        String leftSubTree = serialize(root.left);\\n        String rightSubTree = serialize(root.right);\\n        return root.val + COMMA + leftSubTree + rightSubTree;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        Queue<String> queue = new LinkedList<>();\\n        // Add all items delimited by \",\" in the queue\\n        queue.addAll(Arrays.asList(data.split(COMMA)));\\n        // Start deserialization recursively\\n        return deserializeHelper(queue);\\n    }\\n    \\n    private TreeNode deserializeHelper(Queue<String> queue){\\n        String str = queue.poll();\\n\\t\\t// This is the base condition\\n        if (str.equals(NULL)) return null;\\n        TreeNode node = new TreeNode(Integer.valueOf(str));\\n        // Until the left subtree reaches null, nodes will be added to the left sub-tree\\n        node.left = deserializeHelper(queue);\\n        // Once all nodes are assigned on the left subtree, the nodes will be assigned in the right subtree\\n        node.right = deserializeHelper(queue);\\n        return node;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Queue"
                ],
                "code": "```\\npublic class Codec {\\n\\n    private static final String NULL = \"NULL\";\\n    private static final String COMMA = \",\";\\n    \\n    // Encodes a tree to a single string.\\n    \\n    // Doing a pre-order traversal on the tree and returning a serialized string delimited by \",\"\\n    public String serialize(TreeNode root) {\\n        if (root == null) return NULL + COMMA;\\n        String leftSubTree = serialize(root.left);\\n        String rightSubTree = serialize(root.right);\\n        return root.val + COMMA + leftSubTree + rightSubTree;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        Queue<String> queue = new LinkedList<>();\\n        // Add all items delimited by \",\" in the queue\\n        queue.addAll(Arrays.asList(data.split(COMMA)));\\n        // Start deserialization recursively\\n        return deserializeHelper(queue);\\n    }\\n    \\n    private TreeNode deserializeHelper(Queue<String> queue){\\n        String str = queue.poll();\\n\\t\\t// This is the base condition\\n        if (str.equals(NULL)) return null;\\n        TreeNode node = new TreeNode(Integer.valueOf(str));\\n        // Until the left subtree reaches null, nodes will be added to the left sub-tree\\n        node.left = deserializeHelper(queue);\\n        // Once all nodes are assigned on the left subtree, the nodes will be assigned in the right subtree\\n        node.right = deserializeHelper(queue);\\n        return node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 857483,
                "title": "truly-o-n-solution-99-98-explained",
                "content": "**Tree format**: `<Tree> := (), or <Tree> := (<Value><Tree><Tree>)`\\n\\n**Serialization**: Build string representation using `StringBuilder` (concatenating `String`s is expensive) and **pre-order traversal**.\\n\\n**Deserialization**:\\nInstead of iterating over the serialized input to find the matching closing bracket, I handle this in `O(n)` during the \"pre-processing\" stage:\\nI build an array mapping the index of any **opening** bracket to its corresponding **closing** bracket, using a `Stack`.\\n\\nBecause the format is known, the recursive method only needs to look up the closing index for its left subtree, using this array.\\n\\n```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder(); // appending char to a StringBuilder is O(1)\\n        this.serializeHelper(sb, root);\\n        return sb.toString();\\n    }\\n    \\n    private void serializeHelper(StringBuilder sb, TreeNode root) {\\n        sb.append(\\'(\\');\\n        if(root != null) { // recursive pre-order traversal\\n            sb.append(root.val);\\n            this.serializeHelper(sb, root.left);\\n            this.serializeHelper(sb, root.right);\\n        }\\n        sb.append(\\')\\');\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        char[] tree = data.toCharArray();\\n        int[] matchingBraces = new int[tree.length]; // O(1) lookup of matching closing bracket (eliminates the need to iterate over \"tree\")\\n        Stack<Integer> openingIdxs = new Stack<>(); // pop/push to match corresponding brackets\\n        for(int i = 0; i < tree.length; i++) {\\n            if(tree[i] == \\'(\\') {\\n                openingIdxs.push(i);\\n            } else if(tree[i] == \\')\\') {\\n                matchingBraces[openingIdxs.pop()] = i;\\n            }\\n        }\\n        return this.deserializeHelper(tree, matchingBraces, 0, tree.length - 1);\\n    }\\n    \\n    private TreeNode deserializeHelper(char[] tree, int[] closingBraces, int lo, int hi) {\\n        if(hi - lo == 1) {\\n            return null;\\n        }\\n        int value = 0;\\n        boolean negativeValue = false;\\n        if(tree[lo + 1] == \\'-\\') {\\n            negativeValue = true;\\n            lo++;\\n        }\\n        while(tree[++lo] != \\'(\\') {\\n            value *= 10;\\n            value += tree[lo] - \\'0\\';\\n        }\\n        if(negativeValue) {\\n            value *= -1;\\n        }\\n        TreeNode root = new TreeNode(value);\\n        int leftEnd = closingBraces[lo]; // O(1) lookup\\n        root.left = this.deserializeHelper(tree, closingBraces, lo, leftEnd);\\n        root.right = this.deserializeHelper(tree, closingBraces, leftEnd + 1, hi - 1);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder(); // appending char to a StringBuilder is O(1)\\n        this.serializeHelper(sb, root);\\n        return sb.toString();\\n    }\\n    \\n    private void serializeHelper(StringBuilder sb, TreeNode root) {\\n        sb.append(\\'(\\');\\n        if(root != null) { // recursive pre-order traversal\\n            sb.append(root.val);\\n            this.serializeHelper(sb, root.left);\\n            this.serializeHelper(sb, root.right);\\n        }\\n        sb.append(\\')\\');\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        char[] tree = data.toCharArray();\\n        int[] matchingBraces = new int[tree.length]; // O(1) lookup of matching closing bracket (eliminates the need to iterate over \"tree\")\\n        Stack<Integer> openingIdxs = new Stack<>(); // pop/push to match corresponding brackets\\n        for(int i = 0; i < tree.length; i++) {\\n            if(tree[i] == \\'(\\') {\\n                openingIdxs.push(i);\\n            } else if(tree[i] == \\')\\') {\\n                matchingBraces[openingIdxs.pop()] = i;\\n            }\\n        }\\n        return this.deserializeHelper(tree, matchingBraces, 0, tree.length - 1);\\n    }\\n    \\n    private TreeNode deserializeHelper(char[] tree, int[] closingBraces, int lo, int hi) {\\n        if(hi - lo == 1) {\\n            return null;\\n        }\\n        int value = 0;\\n        boolean negativeValue = false;\\n        if(tree[lo + 1] == \\'-\\') {\\n            negativeValue = true;\\n            lo++;\\n        }\\n        while(tree[++lo] != \\'(\\') {\\n            value *= 10;\\n            value += tree[lo] - \\'0\\';\\n        }\\n        if(negativeValue) {\\n            value *= -1;\\n        }\\n        TreeNode root = new TreeNode(value);\\n        int leftEnd = closingBraces[lo]; // O(1) lookup\\n        root.left = this.deserializeHelper(tree, closingBraces, lo, leftEnd);\\n        root.right = this.deserializeHelper(tree, closingBraces, leftEnd + 1, hi - 1);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 807180,
                "title": "python-o-n-by-dfs-w-comment",
                "content": "Python O(n) by DFS with preorder trace\\n\\n---\\n\\n```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        # -----------------------------------\\n        def dfs(node):\\n\\n            if not node:\\n                # base case:\\n                # empty node or leaf node\\n                dfs.path.append(\\'X\\')\\n\\n            else:\\n                # general case:\\n                # generate path preorder traversal\\n                dfs.path.append( str(node.val) )\\n\\n                dfs( node.left )\\n                dfs( node.right )\\n        # -----------------------------------\\n\\n        dfs.path = []\\n        dfs(node=root)\\n        return \\' \\'.join(dfs.path)\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n\\n        node_values = iter( data.split() )\\n\\n        # --------------------------------\\n        def rebuild( node_values ):\\n\\n            next_val = next( node_values )\\n\\n            if next_val == \\'X\\':\\n                # base case:\\n                # empty node or leaf node\\n                return None\\n            \\n            else:\\n                # general case:\\n                # rebuild with preorder path\\n                root = TreeNode(next_val)\\n\\n                root.left = rebuild( node_values )\\n                root.right = rebuild( node_values )\\n\\n                return root\\n        # --------------------------------\\n        return rebuild(node_values)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        # -----------------------------------\\n        def dfs(node):\\n\\n            if not node:\\n                # base case:\\n                # empty node or leaf node\\n                dfs.path.append(\\'X\\')\\n\\n            else:\\n                # general case:\\n                # generate path preorder traversal\\n                dfs.path.append( str(node.val) )\\n\\n                dfs( node.left )\\n                dfs( node.right )\\n        # -----------------------------------\\n\\n        dfs.path = []\\n        dfs(node=root)\\n        return \\' \\'.join(dfs.path)\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n\\n        node_values = iter( data.split() )\\n\\n        # --------------------------------\\n        def rebuild( node_values ):\\n\\n            next_val = next( node_values )\\n\\n            if next_val == \\'X\\':\\n                # base case:\\n                # empty node or leaf node\\n                return None\\n            \\n            else:\\n                # general case:\\n                # rebuild with preorder path\\n                root = TreeNode(next_val)\\n\\n                root.left = rebuild( node_values )\\n                root.right = rebuild( node_values )\\n\\n                return root\\n        # --------------------------------\\n        return rebuild(node_values)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 626813,
                "title": "go-recursive-solution-level-order-traversal",
                "content": "```\\nimport \"strconv\"\\n\\ntype Codec struct {\\n    root *TreeNode\\n    input []string\\n}\\n\\nfunc Constructor() Codec {\\n    x := Codec{root: nil, input: []string{}}\\n    return x\\n}\\n\\n// Serializes a tree to a single string.\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    return this.serialize_helper(root, \"\")    \\n}\\n// Builds up the string\\nfunc (this *Codec) serialize_helper(root *TreeNode, res string) string {\\n    if root == nil {\\n        return res + \"null,\"\\n    } else {\\n        res += strconv.Itoa(root.Val) + \",\"\\n        res = this.serialize_helper(root.Left, res)\\n        res = this.serialize_helper(root.Right, res)\\n    }\\n    return res\\n}\\n\\n// Deserializes your encoded data to tree.\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    this.input = strings.Split(data, \",\")\\n    return this.deserialize_helper()\\n}\\n\\nfunc (this *Codec) deserialize_helper() *TreeNode {\\n    if this.input[0] == \"null\" {\\n        this.input = this.input[1:]\\n        return nil\\n    }\\n    val, _ := strconv.Atoi(this.input[0])\\n    this.input = this.input[1:]\\n    x := TreeNode{Val: val, Left: nil, Right: nil}\\n    x.Left = this.deserialize_helper()\\n    x.Right = this.deserialize_helper()\\n    return &x\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nimport \"strconv\"\\n\\ntype Codec struct {\\n    root *TreeNode\\n    input []string\\n}\\n\\nfunc Constructor() Codec {\\n    x := Codec{root: nil, input: []string{}}\\n    return x\\n}\\n\\n// Serializes a tree to a single string.\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    return this.serialize_helper(root, \"\")    \\n}\\n// Builds up the string\\nfunc (this *Codec) serialize_helper(root *TreeNode, res string) string {\\n    if root == nil {\\n        return res + \"null,\"\\n    } else {\\n        res += strconv.Itoa(root.Val) + \",\"\\n        res = this.serialize_helper(root.Left, res)\\n        res = this.serialize_helper(root.Right, res)\\n    }\\n    return res\\n}\\n\\n// Deserializes your encoded data to tree.\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    this.input = strings.Split(data, \",\")\\n    return this.deserialize_helper()\\n}\\n\\nfunc (this *Codec) deserialize_helper() *TreeNode {\\n    if this.input[0] == \"null\" {\\n        this.input = this.input[1:]\\n        return nil\\n    }\\n    val, _ := strconv.Atoi(this.input[0])\\n    this.input = this.input[1:]\\n    x := TreeNode{Val: val, Left: nil, Right: nil}\\n    x.Left = this.deserialize_helper()\\n    x.Right = this.deserialize_helper()\\n    return &x\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 613333,
                "title": "python3-bfs-based-solution",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nfrom collections import deque\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return None\\n        \\n        serialize = []\\n        q = deque([root])\\n        \\n        while q:\\n            root = q.popleft()\\n            \\n            if root:\\n                serialize.append(root.val)\\n                q.append(root.left)\\n                q.append(root.right)\\n            else:\\n                serialize.append(None)\\n        \\n        return str(serialize)\\n        \\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not data:\\n            return None\\n        \\n        data = data.strip(\"[]\").split(\",\")\\n        n = len(data)\\n        for i in range(n):\\n            data[i] = data[i].replace(\" \", \"\")\\n            if data[i] == \"None\":\\n                data[i] = None\\n            else:\\n                data[i] = int(data[i])\\n        \\n        root = TreeNode(data.pop(0))\\n        pointer = root\\n        q = deque([root])\\n        \\n        while q and data:\\n            root = q.popleft()\\n            \\n            if data:\\n                val = data.pop(0)\\n                if val is not None:\\n                    root.left = TreeNode(val)\\n                    q.append(root.left)\\n            if data:\\n                val = data.pop(0)\\n                if val is not None:\\n                    root.right = TreeNode(val)\\n                    q.append(root.right)\\n        \\n        return pointer\\n     \\n# Your Codec object will be instantiated and called as such:\\n# codec = Codec()\\n# codec.deserialize(codec.serialize(root))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Breadth-First Search",
                    "Binary Tree"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nfrom collections import deque\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return None\\n        \\n        serialize = []\\n        q = deque([root])\\n        \\n        while q:\\n            root = q.popleft()\\n            \\n            if root:\\n                serialize.append(root.val)\\n                q.append(root.left)\\n                q.append(root.right)\\n            else:\\n                serialize.append(None)\\n        \\n        return str(serialize)\\n        \\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not data:\\n            return None\\n        \\n        data = data.strip(\"[]\").split(\",\")\\n        n = len(data)\\n        for i in range(n):\\n            data[i] = data[i].replace(\" \", \"\")\\n            if data[i] == \"None\":\\n                data[i] = None\\n            else:\\n                data[i] = int(data[i])\\n        \\n        root = TreeNode(data.pop(0))\\n        pointer = root\\n        q = deque([root])\\n        \\n        while q and data:\\n            root = q.popleft()\\n            \\n            if data:\\n                val = data.pop(0)\\n                if val is not None:\\n                    root.left = TreeNode(val)\\n                    q.append(root.left)\\n            if data:\\n                val = data.pop(0)\\n                if val is not None:\\n                    root.right = TreeNode(val)\\n                    q.append(root.right)\\n        \\n        return pointer\\n     \\n# Your Codec object will be instantiated and called as such:\\n# codec = Codec()\\n# codec.deserialize(codec.serialize(root))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 565943,
                "title": "very-simple-c-solution",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        stringstream ss;\\n        ToSerialize(root, ss);\\n        return ss.str();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream ss(data);\\n        return Todeserialize(ss);\\n    }\\n    //\\nprivate:\\n    void ToSerialize(TreeNode* root, stringstream& s){\\n        if(root == NULL){\\n            s << \"@ \";\\n            return;\\n        }\\n        s << root->val << \" \";\\n        ToSerialize(root->left, s);\\n        ToSerialize(root->right, s);\\n    }\\n    TreeNode* Todeserialize(stringstream& ss){\\n        string t;\\n        ss >> t;\\n        if(t == \"@\"){\\n            return NULL;\\n        }\\n        TreeNode* root = new TreeNode(stoi(t));\\n        root->left = Todeserialize(ss);\\n        root->right = Todeserialize(ss);\\n        return root;\\n    }\\n    \\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec codec;\\n// codec.deserialize(codec.serialize(root));",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        stringstream ss;\\n        ToSerialize(root, ss);\\n        return ss.str();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        stringstream ss(data);\\n        return Todeserialize(ss);\\n    }\\n    //\\nprivate:\\n    void ToSerialize(TreeNode* root, stringstream& s){\\n        if(root == NULL){\\n            s << \"@ \";\\n            return;\\n        }\\n        s << root->val << \" \";\\n        ToSerialize(root->left, s);\\n        ToSerialize(root->right, s);\\n    }\\n    TreeNode* Todeserialize(stringstream& ss){\\n        string t;\\n        ss >> t;\\n        if(t == \"@\"){\\n            return NULL;\\n        }\\n        TreeNode* root = new TreeNode(stoi(t));\\n        root->left = Todeserialize(ss);\\n        root->right = Todeserialize(ss);\\n        return root;\\n    }\\n    \\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec codec;\\n// codec.deserialize(codec.serialize(root));",
                "codeTag": "Java"
            },
            {
                "id": 531469,
                "title": "72-ms-faster-than-99-44-of-javascript",
                "content": "### Pre-order Traverse\\n- Time complexity:\\n    - **O(N)** for `serialize`\\n    - **O(N)** for `deserialize`\\n- Space complexity:\\n    - **O(N)** for `serialize`\\n    - **O(H)** for `deserialize`\\n```JavaScript\\n/**\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    const stack = [root], result = [];\\n    while (stack.length) {\\n        const curr = stack.pop();\\n        if (curr) {\\n            result.push(curr.val);\\n            stack.push(curr.right);\\n            stack.push(curr.left);\\n        } else {\\n            result.push(\\'#\\');\\n        }\\n    }\\n    return result.join(\\',\\')\\n};\\n/**\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    data = data.split(\\',\\');\\n    let idx = -1;\\n    const dfs = () => {\\n        if (isNaN(data[++idx])) {\\n            return null;\\n        }\\n        const root = new TreeNode(data[idx]);\\n        root.left = dfs();\\n        root.right = dfs();\\n        return root;\\n    }\\n    return dfs();\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```JavaScript\\n/**\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    const stack = [root], result = [];\\n    while (stack.length) {\\n        const curr = stack.pop();\\n        if (curr) {\\n            result.push(curr.val);\\n            stack.push(curr.right);\\n            stack.push(curr.left);\\n        } else {\\n            result.push(\\'#\\');\\n        }\\n    }\\n    return result.join(\\',\\')\\n};\\n/**\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    data = data.split(\\',\\');\\n    let idx = -1;\\n    const dfs = () => {\\n        if (isNaN(data[++idx])) {\\n            return null;\\n        }\\n        const root = new TreeNode(data[idx]);\\n        root.left = dfs();\\n        root.right = dfs();\\n        return root;\\n    }\\n    return dfs();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 433639,
                "title": "easy-understand-cpp-solution",
                "content": "```\\n\\nclass Codec {\\npublic:\\n    string serialize(TreeNode * root) {\\n        string ret;\\n        if(!root)\\n            return \"# \";\\n        ret += to_string(root->val) + \" \";\\n        ret += serialize(root->left);\\n        ret += serialize(root->right);\\n        return ret;\\n    }\\n    TreeNode * deserialize(string data) {\\n        istringstream ss(data);\\n        return decode(ss);\\n    }\\n    \\nprivate:\\n    TreeNode *decode(istringstream &ss) {\\n        string cur;\\n        ss >> cur;\\n        if(cur[0] == \\'#\\' || cur.empty())\\n            return NULL;\\n        TreeNode *root = new TreeNode(stoi(cur));\\n        root->left = decode(ss);\\n        root->right = decode(ss);\\n        return root;\\n    }\\n    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Codec {\\npublic:\\n    string serialize(TreeNode * root) {\\n        string ret;\\n        if(!root)\\n            return \"# \";\\n        ret += to_string(root->val) + \" \";\\n        ret += serialize(root->left);\\n        ret += serialize(root->right);\\n        return ret;\\n    }\\n    TreeNode * deserialize(string data) {\\n        istringstream ss(data);\\n        return decode(ss);\\n    }\\n    \\nprivate:\\n    TreeNode *decode(istringstream &ss) {\\n        string cur;\\n        ss >> cur;\\n        if(cur[0] == \\'#\\' || cur.empty())\\n            return NULL;\\n        TreeNode *root = new TreeNode(stoi(cur));\\n        root->left = decode(ss);\\n        root->right = decode(ss);\\n        return root;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 410885,
                "title": "c-96-98-using-bfs",
                "content": "```\\n#include <queue>\\n\\nconst char DELIM = \\'#\\';\\nconst char NULL_FLAG = \\'!\\';\\n\\nclass Codec \\n{\\npublic:   \\n    // Encodes a tree to a single string.\\n    std::string serialize(TreeNode* root) \\n    {\\n        std::string result = \"\";\\n        std::queue<TreeNode*> _bfs;\\n        if(!root)\\n            return result;\\n        else\\n        {\\n            _bfs.push(root);\\n            while(!_bfs.empty())\\n            {\\n                TreeNode* current = _bfs.front();\\n                _bfs.pop();\\n                if(current)\\n                {\\n                    result += std::to_string(current->val);\\n                    _bfs.push(current->left);\\n                    _bfs.push(current->right);\\n                }\\n                else\\n                    result += NULL_FLAG;\\n                result += DELIM;\\n            }\\n        }\\n        return result;\\n    }\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) \\n    {\\n        int index = 0;\\n        TreeNode* root = nullptr;\\n        if(data.empty())\\n            return root;\\n        else\\n        {\\n            std::queue<TreeNode*> _bfs; \\n            processNext(data,index,_bfs,root);\\n            while(!_bfs.empty())\\n            {\\n                TreeNode* current = _bfs.front();\\n                _bfs.pop();\\n                processNext(data,index,_bfs,current->left);\\n                processNext(data,index,_bfs,current->right);\\n            }\\n            return root;\\n        }\\n    }\\nprivate:  \\n    void processNext(const std::string& data, int& i, queue<TreeNode*>& _bfs, TreeNode*& p)\\n    {   \\n        int initial = i;\\n        i = data.find(DELIM, i);\\n        ++i;\\n        \\n        string temp = data.substr(initial, i-initial-1);\\n        if(temp[0] != NULL_FLAG)\\n        {\\n            p = new TreeNode(stoi(temp));\\n            _bfs.push(p);\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Breadth-First Search"
                ],
                "code": "```\\n#include <queue>\\n\\nconst char DELIM = \\'#\\';\\nconst char NULL_FLAG = \\'!\\';\\n\\nclass Codec \\n{\\npublic:   \\n    // Encodes a tree to a single string.\\n    std::string serialize(TreeNode* root) \\n    {\\n        std::string result = \"\";\\n        std::queue<TreeNode*> _bfs;\\n        if(!root)\\n            return result;\\n        else\\n        {\\n            _bfs.push(root);\\n            while(!_bfs.empty())\\n            {\\n                TreeNode* current = _bfs.front();\\n                _bfs.pop();\\n                if(current)\\n                {\\n                    result += std::to_string(current->val);\\n                    _bfs.push(current->left);\\n                    _bfs.push(current->right);\\n                }\\n                else\\n                    result += NULL_FLAG;\\n                result += DELIM;\\n            }\\n        }\\n        return result;\\n    }\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) \\n    {\\n        int index = 0;\\n        TreeNode* root = nullptr;\\n        if(data.empty())\\n            return root;\\n        else\\n        {\\n            std::queue<TreeNode*> _bfs; \\n            processNext(data,index,_bfs,root);\\n            while(!_bfs.empty())\\n            {\\n                TreeNode* current = _bfs.front();\\n                _bfs.pop();\\n                processNext(data,index,_bfs,current->left);\\n                processNext(data,index,_bfs,current->right);\\n            }\\n            return root;\\n        }\\n    }\\nprivate:  \\n    void processNext(const std::string& data, int& i, queue<TreeNode*>& _bfs, TreeNode*& p)\\n    {   \\n        int initial = i;\\n        i = data.find(DELIM, i);\\n        ++i;\\n        \\n        string temp = data.substr(initial, i-initial-1);\\n        if(temp[0] != NULL_FLAG)\\n        {\\n            p = new TreeNode(stoi(temp));\\n            _bfs.push(p);\\n        }\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 353278,
                "title": "javascript-bfs",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    if (!root) return \\'\\';\\n\\n    const queue = [root];\\n    const resArr = [];\\n    \\n    while (queue.length > 0) {\\n        let currQueue = queue.length;\\n        \\n        while (currQueue--) {\\n            const node = queue.shift();\\n            \\n            if (!node) {\\n                resArr.push(\\'null\\');\\n                continue;\\n            }\\n            \\n            resArr.push(node.val);\\n            queue.push(node.left);\\n            queue.push(node.right);\\n        }\\n    }\\n    \\n    return resArr.join(\\',\\');\\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    if (!data || data.length === 0) return null;\\n    \\n    const valArr = data.split(\\',\\');\\n\\n    if (valArr.length === 1) return new TreeNode(valArr.shift());\\n    \\n    const root = new TreeNode(valArr.shift());\\n    \\n    const queue = [root];\\n    \\n    for (let i = 0; i < valArr.length; i++) {\\n        const leaf = queue.shift();\\n        \\n        if (valArr[i] !== \\'null\\') {\\n            const leftLeaf = new TreeNode(valArr[i]);\\n            leaf.left = leftLeaf;\\n            queue.push(leftLeaf);\\n        }\\n        \\n        if (valArr[++i] !== \\'null\\') {\\n            const rightLeaf = new TreeNode(valArr[i]);\\n            leaf.right = rightLeaf;\\n            queue.push(rightLeaf);\\n        }\\n    }\\n        \\n    return root;\\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    if (!root) return \\'\\';\\n\\n    const queue = [root];\\n    const resArr = [];\\n    \\n    while (queue.length > 0) {\\n        let currQueue = queue.length;\\n        \\n        while (currQueue--) {\\n            const node = queue.shift();\\n            \\n            if (!node) {\\n                resArr.push(\\'null\\');\\n                continue;\\n            }\\n            \\n            resArr.push(node.val);\\n            queue.push(node.left);\\n            queue.push(node.right);\\n        }\\n    }\\n    \\n    return resArr.join(\\',\\');\\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    if (!data || data.length === 0) return null;\\n    \\n    const valArr = data.split(\\',\\');\\n\\n    if (valArr.length === 1) return new TreeNode(valArr.shift());\\n    \\n    const root = new TreeNode(valArr.shift());\\n    \\n    const queue = [root];\\n    \\n    for (let i = 0; i < valArr.length; i++) {\\n        const leaf = queue.shift();\\n        \\n        if (valArr[i] !== \\'null\\') {\\n            const leftLeaf = new TreeNode(valArr[i]);\\n            leaf.left = leftLeaf;\\n            queue.push(leftLeaf);\\n        }\\n        \\n        if (valArr[++i] !== \\'null\\') {\\n            const rightLeaf = new TreeNode(valArr[i]);\\n            leaf.right = rightLeaf;\\n            queue.push(rightLeaf);\\n        }\\n    }\\n        \\n    return root;\\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 335827,
                "title": "java-solution",
                "content": "```\\npublic class Codec {\\n    private static final String spliter = \",\";\\n    private static final String NN = \"X\";\\n    \\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        buildString(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    private void buildString(TreeNode node, StringBuilder sb) {\\n        if (node == null) {\\n            sb.append(NN).append(spliter);\\n        } else {\\n            sb.append(node.val).append(spliter);\\n            buildString(node.left, sb);\\n            buildString(node.right,sb);\\n        }\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        Deque<String> nodes = new LinkedList<>();\\n        nodes.addAll(Arrays.asList(data.split(spliter)));\\n        return buildTree(nodes);\\n    }\\n    \\n    private TreeNode buildTree(Deque<String> nodes) {\\n        String val = nodes.remove();\\n        if (val.equals(NN)) return null;\\n        else {\\n            TreeNode node = new TreeNode(Integer.valueOf(val));\\n            node.left = buildTree(nodes);\\n            node.right = buildTree(nodes);\\n            return node;\\n        }\\n    }\\n}\\n```\\n\\nRuntime: 10 ms, faster than 87.19% of Java online submissions for Serialize and Deserialize Binary Tree.\\nMemory Usage: 39.4 MB, less than 68.87% of Java online submissions for Serialize and Deserialize Binary Tree.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Codec {\\n    private static final String spliter = \",\";\\n    private static final String NN = \"X\";\\n    \\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuilder sb = new StringBuilder();\\n        buildString(root, sb);\\n        return sb.toString();\\n    }\\n    \\n    private void buildString(TreeNode node, StringBuilder sb) {\\n        if (node == null) {\\n            sb.append(NN).append(spliter);\\n        } else {\\n            sb.append(node.val).append(spliter);\\n            buildString(node.left, sb);\\n            buildString(node.right,sb);\\n        }\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        Deque<String> nodes = new LinkedList<>();\\n        nodes.addAll(Arrays.asList(data.split(spliter)));\\n        return buildTree(nodes);\\n    }\\n    \\n    private TreeNode buildTree(Deque<String> nodes) {\\n        String val = nodes.remove();\\n        if (val.equals(NN)) return null;\\n        else {\\n            TreeNode node = new TreeNode(Integer.valueOf(val));\\n            node.left = buildTree(nodes);\\n            node.right = buildTree(nodes);\\n            return node;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 317194,
                "title": "how-to-resolve-expected-unqualified-id-before-public-error",
                "content": "**Update 06/25/19: This bug has been resolved.**\\n\\n---\\n\\nI tried multiple submissions in C++, and I kept getting the compile error ```expected unqualified-id before \\'public\\'```.\\n\\nI was able to resolve this by deleting these last three commented-out lines:\\n```\\n// Your Codec object will be instantiated and called as such:\\n// Codec codec;\\n// codec.deserialize(codec.serialize(root));\\n```\\n\\nStrange problem.",
                "solutionTags": [
                    "C"
                ],
                "code": "```expected unqualified-id before \\'public\\'```\n```\\n// Your Codec object will be instantiated and called as such:\\n// Codec codec;\\n// codec.deserialize(codec.serialize(root));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 165565,
                "title": "two-python-solutions-using-preorder-traversal-and-bfs",
                "content": "### Solution Using Preorder Traversal\\n\\n```python\\nclass Codec:\\n        \\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root: return \\'null,\\'\\n        return \\'{},\\'.format(root.val) + self.serialize(root.left) + self.serialize(root.right)\\n            \\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        data = data.strip(\\',\\').split(\\',\\')\\n        self.counter = 0\\n        return self.build_tree(data)\\n    \\n    def build_tree(self, data):\\n        if self.counter >= len(data) or data[self.counter] == \\'null\\':\\n            self.counter += 1\\n            return None\\n        \\n        node = TreeNode(data[self.counter])\\n        self.counter += 1\\n        node.left = self.build_tree(data)\\n        node.right = self.build_tree(data)\\n        return node\\n```\\n\\n### Solution Using BFS\\n\\n```python\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return \"\"\\n        \\n        ans = []\\n        queue = [root]\\n        while any(queue):\\n            node = queue.pop(0)\\n            if node:\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            ans.append(node.val if node else None)\\n        \\n        return str(ans)\\n                \\n            \\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not data:\\n            return None\\n        \\n        data = ast.literal_eval(data)\\n        length = 1\\n        root = None\\n        counter = 0\\n        prev_layer = []\\n        current_layer = []\\n        for index in range(len(data)):\\n            if length == 0:\\n                length = len(current_layer) * 2\\n                prev_layer, current_layer = current_layer, []\\n                counter = 0\\n                \\n            if data[index] is not None:\\n                current_layer.append(TreeNode(data[index]))\\n                if prev_layer:\\n                    if counter % 2 == 0:\\n                        prev_layer[counter // 2].left = current_layer[-1]\\n                    else:\\n                        prev_layer[counter // 2].right = current_layer[-1]\\n                else:\\n                    root = current_layer[0]\\n            \\n            counter += 1\\n            length -= 1\\n        \\n        return root\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Codec:\\n        \\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root: return \\'null,\\'\\n        return \\'{},\\'.format(root.val) + self.serialize(root.left) + self.serialize(root.right)\\n            \\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        data = data.strip(\\',\\').split(\\',\\')\\n        self.counter = 0\\n        return self.build_tree(data)\\n    \\n    def build_tree(self, data):\\n        if self.counter >= len(data) or data[self.counter] == \\'null\\':\\n            self.counter += 1\\n            return None\\n        \\n        node = TreeNode(data[self.counter])\\n        self.counter += 1\\n        node.left = self.build_tree(data)\\n        node.right = self.build_tree(data)\\n        return node\\n```\n```python\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        if not root:\\n            return \"\"\\n        \\n        ans = []\\n        queue = [root]\\n        while any(queue):\\n            node = queue.pop(0)\\n            if node:\\n                queue.append(node.left)\\n                queue.append(node.right)\\n            ans.append(node.val if node else None)\\n        \\n        return str(ans)\\n                \\n            \\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not data:\\n            return None\\n        \\n        data = ast.literal_eval(data)\\n        length = 1\\n        root = None\\n        counter = 0\\n        prev_layer = []\\n        current_layer = []\\n        for index in range(len(data)):\\n            if length == 0:\\n                length = len(current_layer) * 2\\n                prev_layer, current_layer = current_layer, []\\n                counter = 0\\n                \\n            if data[index] is not None:\\n                current_layer.append(TreeNode(data[index]))\\n                if prev_layer:\\n                    if counter % 2 == 0:\\n                        prev_layer[counter // 2].left = current_layer[-1]\\n                    else:\\n                        prev_layer[counter // 2].right = current_layer[-1]\\n                else:\\n                    root = current_layer[0]\\n            \\n            counter += 1\\n            length -= 1\\n        \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74257,
                "title": "please-don-t-kill-me-p",
                "content": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    TreeNode* serialize(TreeNode* root) {\\n        return root;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(TreeNode* data) {\\n        return data;        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    TreeNode* serialize(TreeNode* root) {\\n        return root;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(TreeNode* data) {\\n        return data;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74345,
                "title": "iterative-solution-using-queue-c-same-as-leetcode",
                "content": "The idea is level order traversal:\\n1. Serialize: First, add root to the queue. Then, for each node, append its value to the result string, and then add its left and right children to queue. If the node is NULL, simply skip to the next node. Loop until the queue is empty.\\nNotice that this will result some NULLs at the end of the result, which is ok. Just erase all these NULLs before return.\\n2. Deserialize: This time I'm using two queues. First, convert the serialized data to the data queue. Second, add root to the Node queue; then, for each node popped from the Node queue, I also pop two values from the data queue (if not empty); if the first data is real data, create the current node's left child and push it to the Node queue; do the same thing for the second data; loop until the data queue is empty.\\n\\nC++:\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        queue<TreeNode *> q;\\n        string s;\\n        if (root) q.push(root);\\n        while (!q.empty()) {\\n            TreeNode *n = q.front();\\n            q.pop();\\n            if (n) {\\n                q.push(n->left);\\n                q.push(n->right);\\n                s += to_string(n->val) + \",\";\\n            } else {\\n                s += \"n,\";\\n            }\\n        }\\n        if (s.length()) s.erase(s.find_last_not_of(\"n,\")+1);\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if (data.empty()) return NULL;\\n        queue<string> qData;\\n        int i = 0, j;\\n        do {\\n            j = data.find(',', i);\\n            if (j != string::npos) qData.push(data.substr(i, j-i));\\n            else qData.push(data.substr(i));\\n            i = j+1;\\n        } while (j != string::npos);\\n        \\n        queue<TreeNode *> qNodes;\\n        TreeNode *root = new TreeNode(stoi(qData.front()));\\n        TreeNode *curr = NULL;\\n        qNodes.push(root);\\n        qData.pop();\\n        while (!qData.empty()) {\\n            string val1 = \"\", val2 = \"\";\\n            val1 = qData.front();\\n            qData.pop();\\n            if (!qData.empty()) {\\n                val2 = qData.front();\\n                qData.pop();\\n            }\\n            curr = qNodes.front();\\n            qNodes.pop();\\n            if (val1 != \"\" && val1 != \"n\") {\\n                curr->left = new TreeNode(stoi(val1));\\n                qNodes.push(curr->left);\\n            }\\n            if (val2 != \"\" && val2 != \"n\") {\\n                curr->right = new TreeNode(stoi(val2));\\n                qNodes.push(curr->right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Queue",
                    "Iterator"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        queue<TreeNode *> q;\\n        string s;\\n        if (root) q.push(root);\\n        while (!q.empty()) {\\n            TreeNode *n = q.front();\\n            q.pop();\\n            if (n) {\\n                q.push(n->left);\\n                q.push(n->right);\\n                s += to_string(n->val) + \",\";\\n            } else {\\n                s += \"n,\";\\n            }\\n        }\\n        if (s.length()) s.erase(s.find_last_not_of(\"n,\")+1);\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if (data.empty()) return NULL;\\n        queue<string> qData;\\n        int i = 0, j;\\n        do {\\n            j = data.find(',', i);\\n            if (j != string::npos) qData.push(data.substr(i, j-i));\\n            else qData.push(data.substr(i));\\n            i = j+1;\\n        } while (j != string::npos);\\n        \\n        queue<TreeNode *> qNodes;\\n        TreeNode *root = new TreeNode(stoi(qData.front()));\\n        TreeNode *curr = NULL;\\n        qNodes.push(root);\\n        qData.pop();\\n        while (!qData.empty()) {\\n            string val1 = \"\", val2 = \"\";\\n            val1 = qData.front();\\n            qData.pop();\\n            if (!qData.empty()) {\\n                val2 = qData.front();\\n                qData.pop();\\n            }\\n            curr = qNodes.front();\\n            qNodes.pop();\\n            if (val1 != \"\" && val1 != \"n\") {\\n                curr->left = new TreeNode(stoi(val1));\\n                qNodes.push(curr->left);\\n            }\\n            if (val2 != \"\" && val2 != \"n\") {\\n                curr->right = new TreeNode(stoi(val2));\\n                qNodes.push(curr->right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74357,
                "title": "postorder-recursion-easy-understanding-c-o-n",
                "content": "\\t/*\\n\\t  *     1\\n\\t  *    / \\\\\\n\\t  *   2   3\\n\\t  *      / \\\\\\n\\t  *     4   5\\n\\t  * ==> #,#,2,#,#,4,#,#,5,3,1\\n\\t  */\\n\\tclass Codec {\\n\\tprivate:\\n\\t    TreeNode* deserializeHelper(string& data) {\\n\\t        if (data.back() == '#') {\\n\\t            data.pop_back();\\n\\t            if (data.size())\\n\\t                data.pop_back();\\n\\t            return nullptr;\\n\\t        }\\n\\t        int n = 0;\\n\\t        for (int i = data.size() - 1, j = 1; i >= 0 && data[i] != ','; i--, j *= 10) {\\n\\t            if (data[i] == '-')\\n\\t                n = -n;                \\n\\t            else\\n\\t                n += (data[i] -'0') * j;\\n\\t            data.pop_back();\\n\\t        }\\n\\t        if (data.size())\\n\\t            data.pop_back();\\n\\t        TreeNode* root = new TreeNode(n);\\n\\t        root->right = deserializeHelper(data);\\n\\t        root->left = deserializeHelper(data);\\n\\t        return root;\\n\\t    }\\n\\tpublic:\\n\\n\\t    // Encodes a tree to a single string.\\n\\t    string serialize(TreeNode* root) {\\n\\t        if (!root)\\n\\t            return \"#\";\\n\\t        string left = serialize(root->left);\\n\\t        string right = serialize(root->right);\\n\\t        return left + ',' + right + ',' + to_string(root->val);\\n\\t    }\\n\\n\\t    // Decodes your encoded data to tree.\\n\\t    TreeNode* deserialize(string data) {\\n\\t        string copy = data;\\n\\t        return deserializeHelper(copy);\\n\\t    }\\n\\t};",
                "solutionTags": [],
                "code": "\\t/*\\n\\t  *     1\\n\\t  *    / \\\\\\n\\t  *   2   3\\n\\t  *      / \\\\\\n\\t  *     4   5\\n\\t  * ==> #,#,2,#,#,4,#,#,5,3,1\\n\\t  */\\n\\tclass Codec {\\n\\tprivate:\\n\\t    TreeNode* deserializeHelper(string& data) {\\n\\t        if (data.back() == '#') {\\n\\t            data.pop_back();\\n\\t            if (data.size())\\n\\t                data.pop_back();\\n\\t            return nullptr;\\n\\t        }\\n\\t        int n = 0;\\n\\t        for (int i = data.size() - 1, j = 1; i >= 0 && data[i] != ','; i--, j *= 10) {\\n\\t            if (data[i] == '-')\\n\\t                n = -n;                \\n\\t            else\\n\\t                n += (data[i] -'0') * j;\\n\\t            data.pop_back();\\n\\t        }\\n\\t        if (data.size())\\n\\t            data.pop_back();\\n\\t        TreeNode* root = new TreeNode(n);\\n\\t        root->right = deserializeHelper(data);\\n\\t        root->left = deserializeHelper(data);\\n\\t        return root;\\n\\t    }\\n\\tpublic:\\n\\n\\t    // Encodes a tree to a single string.\\n\\t    string serialize(TreeNode* root) {\\n\\t        if (!root)\\n\\t            return \"#\";\\n\\t        string left = serialize(root->left);\\n\\t        string right = serialize(root->right);\\n\\t        return left + ',' + right + ',' + to_string(root->val);\\n\\t    }\\n\\n\\t    // Decodes your encoded data to tree.\\n\\t    TreeNode* deserialize(string data) {\\n\\t        string copy = data;\\n\\t        return deserializeHelper(copy);\\n\\t    }\\n\\t};",
                "codeTag": "Java"
            },
            {
                "id": 74386,
                "title": "23ms-pre-order-traversal-based-solution-in-java",
                "content": "    class Codec {\\n        private static final String ROOTNULL = \" \";\\n        private static final String PARTITION = \",\";\\n        \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) \\n        {\\n            if(root == null){\\n                return ROOTNULL;\\n            } else {\\n                return root.val+PARTITION+serialize(root.left)+PARTITION+serialize(root.right);\\n            }\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data)\\n        {\\n            int cnt;\\n            String value = \"\";\\n            String[] strArray = data.split(PARTITION);\\n            \\n            MyStringArray queue = new MyStringArray();\\n            queue.strArray = strArray;\\n            queue.curIndex = 0;\\n        \\n            return deserializeData(queue);\\n        }\\n        \\n        private TreeNode deserializeData(MyStringArray queue){\\n            if(queue.strArray[ queue.curIndex ].equals(ROOTNULL)){\\n                queue.curIndex++;\\n                return null;\\n            } else {\\n                TreeNode root = new TreeNode(Integer.parseInt(queue.strArray[ queue.curIndex ]));\\n                queue.curIndex++;\\n                root.left = deserializeData(queue);\\n                root.right = deserializeData(queue);\\n                \\n                return root;\\n            }\\n        }\\n    };\\n    \\n    class MyStringArray{\\n        public String[] strArray;\\n        public int curIndex;\\n    }",
                "solutionTags": [],
                "code": "    class Codec {\\n        private static final String ROOTNULL = \" \";\\n        private static final String PARTITION = \",\";\\n        \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) \\n        {\\n            if(root == null){\\n                return ROOTNULL;\\n            } else {\\n                return root.val+PARTITION+serialize(root.left)+PARTITION+serialize(root.right);\\n            }\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data)\\n        {\\n            int cnt;\\n            String value = \"\";\\n            String[] strArray = data.split(PARTITION);\\n            \\n            MyStringArray queue = new MyStringArray();\\n            queue.strArray = strArray;\\n            queue.curIndex = 0;\\n        \\n            return deserializeData(queue);\\n        }\\n        \\n        private TreeNode deserializeData(MyStringArray queue){\\n            if(queue.strArray[ queue.curIndex ].equals(ROOTNULL)){\\n                queue.curIndex++;\\n                return null;\\n            } else {\\n                TreeNode root = new TreeNode(Integer.parseInt(queue.strArray[ queue.curIndex ]));\\n                queue.curIndex++;\\n                root.left = deserializeData(queue);\\n                root.right = deserializeData(queue);\\n                \\n                return root;\\n            }\\n        }\\n    };\\n    \\n    class MyStringArray{\\n        public String[] strArray;\\n        public int curIndex;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 74394,
                "title": "java-3ms-beats-99-82",
                "content": "Basic idea here is run a pre-order traversal and dump nodes as you go.\\n\\nKey optimizations are:\\n\\n * Use two characters (4 bytes total) to represent each integer.\\n\\n * Write directly to a character array, and grow the array as needed. (Kinda like how ArrayList works internally.) \\n\\n * Use Integer.MIN_VALUE to represent NULL. This works fine with the test cases, but you'd want to be careful with that strategy in the real world!\\n\\n-\\n\\n    /**\\n     * Definition for a binary tree node.\\n     * public class TreeNode {\\n     *     int val;\\n     *     TreeNode left;\\n     *     TreeNode right;\\n     *     TreeNode(int x) { val = x; }\\n     * }\\n     */\\n    public class Codec {\\n        \\n        char[] chars;\\n        int length, c;\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            length = 128;\\n            chars = new char[length];\\n            c = 0;\\n            sdfs(root);\\n            return new String(chars).substring(0,c);\\n        }\\n        \\n        void sdfs(TreeNode root){\\n            add(root);\\n            if(root == null) return;\\n            sdfs(root.left);\\n            sdfs(root.right);\\n        }\\n        \\n        void add(TreeNode root){\\n            int v;\\n            if(root == null){\\n                v = Integer.MIN_VALUE;\\n            }else{\\n                v = root.val;\\n            }\\n            if(c == length) grow();\\n            chars[c++] = (char) (v >>> 16);\\n            chars[c++] = (char) v;\\n        }\\n        \\n        void grow(){\\n            int nl = length * 2;\\n            char[] n = new char[nl];\\n            System.arraycopy(chars,0,n,0,length);\\n            chars = n;\\n            length = nl;\\n        }\\n        \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            chars = data.toCharArray();\\n            c = 0;\\n            TreeNode root = next();\\n            ddfs(root);\\n            return root;\\n        }\\n        \\n        void ddfs(TreeNode root){\\n            if(root == null) return;\\n            root.left = next();\\n            ddfs(root.left);\\n            root.right = next();\\n            ddfs(root.right);\\n        }\\n        \\n        TreeNode next(){\\n            if(c == length) return null;\\n            char a = chars[c++];\\n            char b = chars[c++];\\n            int v = (((int) a) << 16) | b;\\n            if(v == Integer.MIN_VALUE) return null;\\n            return new TreeNode(v);\\n        }\\n    }\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec = new Codec();\\n    // codec.deserialize(codec.serialize(root));",
                "solutionTags": [
                    "Java"
                ],
                "code": "Basic idea here is run a pre-order traversal and dump nodes as you go.\\n\\nKey optimizations are:\\n\\n * Use two characters (4 bytes total) to represent each integer.\\n\\n * Write directly to a character array, and grow the array as needed. (Kinda like how ArrayList works internally.) \\n\\n * Use Integer.MIN_VALUE to represent NULL. This works fine with the test cases, but you'd want to be careful with that strategy in the real world!\\n\\n-\\n\\n    /**\\n     * Definition for a binary tree node.\\n     * public class TreeNode {\\n     *     int val;\\n     *     TreeNode left;\\n     *     TreeNode right;\\n     *     TreeNode(int x) { val = x; }\\n     * }\\n     */\\n    public class Codec {\\n        \\n        char[] chars;\\n        int length, c;\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            length = 128;\\n            chars = new char[length];\\n            c = 0;\\n            sdfs(root);\\n            return new String(chars).substring(0,c);\\n        }\\n        \\n        void sdfs(TreeNode root){\\n            add(root);\\n            if(root == null) return;\\n            sdfs(root.left);\\n            sdfs(root.right);\\n        }\\n        \\n        void add(TreeNode root){\\n            int v;\\n            if(root == null){\\n                v = Integer.MIN_VALUE;\\n            }else{\\n                v = root.val;\\n            }\\n            if(c == length) grow();\\n            chars[c++] = (char) (v >>> 16);\\n            chars[c++] = (char) v;\\n        }\\n        \\n        void grow(){\\n            int nl = length * 2;\\n            char[] n = new char[nl];\\n            System.arraycopy(chars,0,n,0,length);\\n            chars = n;\\n            length = nl;\\n        }\\n        \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            chars = data.toCharArray();\\n            c = 0;\\n            TreeNode root = next();\\n            ddfs(root);\\n            return root;\\n        }\\n        \\n        void ddfs(TreeNode root){\\n            if(root == null) return;\\n            root.left = next();\\n            ddfs(root.left);\\n            root.right = next();\\n            ddfs(root.right);\\n        }\\n        \\n        TreeNode next(){\\n            if(c == length) return null;\\n            char a = chars[c++];\\n            char b = chars[c++];\\n            int v = (((int) a) << 16) | b;\\n            if(v == Integer.MIN_VALUE) return null;\\n            return new TreeNode(v);\\n        }\\n    }\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec = new Codec();\\n    // codec.deserialize(codec.serialize(root));",
                "codeTag": "Java"
            },
            {
                "id": 74381,
                "title": "very-intuitive-solution-in-c-well-explained",
                "content": "Using pre-order to serialise and deserialise will be an instinctive solution and meantime we can take advantage of the conciseness of recursion to focus on the serialisation and deserialisation instead of too many details, especially in C. \\n\\nHere are two different versions, the first is to use a customised split function to split the serialised string first before actually deserialise while the second is just using pointer to move around to handle the number splitted by comma.\\n\\n- space cost O(n);\\n- time cost O(n) since we just traverse  the string several times.\\n\\n\\n----------\\n\\n    #define LEN 100    \\n    char* serialize(struct TreeNode* root)\\n    {\\n        if(!root) return \"X,\";\\n        char *t = (char*)malloc(sizeof(char)*LEN);\\n        int size = 0;\\n        int val = root->val;\\n        while(val) //collect the string and convert it number in reverse order;\\n        {\\n            t[size++] = val%10 + '0';\\n            val /= 10;\\n        }\\n        for(int i = 0; i < size/2; i++) //since it's reversed, then reverse it again to make it normal;\\n        {\\n            char c = t[size-i-1]; t[size-i-1]=t[i]; t[i]=c;\\n        }\\n        t[size++] = ','; //add splitter;\\n        t[size] = '\\\\0'; //terminate the string;\\n        char *left = serialize(root->left); //collect left and right children;\\n        char *right = serialize(root->right);\\n        int leftSize = strlen(left);\\n        int rightSize = strlen(right);\\n        t = (char*)realloc(t, sizeof(char)*(size+leftSize+rightSize+2));\\n        strcat(t, left);\\n        strcat(t, right);\\n        return  t;\\n    }\\n    \\n    char** split(char* s, int* size) //split a string by ',';\\n    {\\n        char** arr = (char**)malloc(sizeof(char*));\\n        *size = 0;\\n        char* t = (char*)malloc(sizeof(char)*30);\\n        int index = 0;\\n        for(int i = 0; s[i]; i++)\\n        {\\n            if(s[i] != ',')\\n                t[index++] = s[i];\\n            else\\n            {\\n                t[index] = '\\\\0';\\n                *size += 1;\\n                arr = (char**)realloc(arr, sizeof(char*)*(*size));\\n                arr[*size-1] = t;\\n                t = (char*)malloc(sizeof(char)*30);\\n                index = 0;\\n            }\\n        }\\n        return arr;\\n    }\\n    \\n    struct TreeNode* helper(char*** arr) //using the pointer of the array to move it for recursion;\\n    {\\n        if(strcmp(**arr, \"X\") == 0) return NULL;\\n        int num = 0;\\n        for(int i = 0; (**arr)[i]; i++)\\n            num = 10*num + (**arr)[i]-'0';\\n        struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n        root->val = num;\\n        *arr += 1; //move to skip the current number;\\n        root->left = helper(arr);\\n        *arr += 1; //skip the left number;\\n        root->right = helper(arr);\\n        return root;\\n    }\\n    struct TreeNode* deserialize(char *s)\\n    {\\n        int size = 0;\\n        char** arr = split(s, &size);\\n        return helper(&arr);\\n    }\\n\\n\\n----------\\n\\nThe first version can be a little tedious, let's now take a look at the version 2 which only move the string pointer around to avoid the splitting operation and as a result it will also definitely quicker.\\n\\n----------\\n\\n    #define LEN 100\\n    \\n    char* serialize(struct TreeNode* root)\\n    {\\n        if(!root) return \"X,\";\\n        char *t = (char*)malloc(sizeof(char)*LEN);\\n        int size = 0;\\n        int val = root->val;\\n        while(val) //collect the string and convert it number in reverse order;\\n        {\\n            t[size++] = val%10 + '0';\\n            val /= 10;\\n        }\\n        for(int i = 0; i < size/2; i++) //since it's reversed, then reverse it again to make it normal;\\n        {\\n            char c = t[size-i-1]; t[size-i-1]=t[i]; t[i]=c;\\n        }\\n        t[size++] = ','; //add splitter;\\n        t[size] = '\\\\0'; //terminate the string;\\n        char *left = serialize(root->left); //collect left and right children;\\n        char *right = serialize(root->right);\\n        int leftSize = strlen(left);\\n        int rightSize = strlen(right);\\n        t = (char*)realloc(t, sizeof(char)*(size+leftSize+rightSize+2));\\n        strcat(t, left);\\n        strcat(t, right);\\n        return  t;\\n    }\\n    \\n    struct TreeNode* helper(char** s)\\n    {\\n        if(**s == 'X') return NULL; \\n        int num = 0;\\n        int count = 0;\\n        while(**s != ',') //collect number and meantime skip the current number;\\n            num = 10*num + *((*s)++) - '0';\\n        *s += 1; //skip the comma ',';\\n        struct TreeNode *root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n        root->val = num;\\n        root->left = helper(s);\\n        while((*(*s)++) != ','); //skip the left value;\\n        root->right = helper(s);\\n        retrn root;\\n    }\\n    \\n    struct TreeNode* deserialize(char* s)\\n    {\\n        return helper(&s);\\n    }",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "Using pre-order to serialise and deserialise will be an instinctive solution and meantime we can take advantage of the conciseness of recursion to focus on the serialisation and deserialisation instead of too many details, especially in C. \\n\\nHere are two different versions, the first is to use a customised split function to split the serialised string first before actually deserialise while the second is just using pointer to move around to handle the number splitted by comma.\\n\\n- space cost O(n);\\n- time cost O(n) since we just traverse  the string several times.\\n\\n\\n----------\\n\\n    #define LEN 100    \\n    char* serialize(struct TreeNode* root)\\n    {\\n        if(!root) return \"X,\";\\n        char *t = (char*)malloc(sizeof(char)*LEN);\\n        int size = 0;\\n        int val = root->val;\\n        while(val) //collect the string and convert it number in reverse order;\\n        {\\n            t[size++] = val%10 + '0';\\n            val /= 10;\\n        }\\n        for(int i = 0; i < size/2; i++) //since it's reversed, then reverse it again to make it normal;\\n        {\\n            char c = t[size-i-1]; t[size-i-1]=t[i]; t[i]=c;\\n        }\\n        t[size++] = ','; //add splitter;\\n        t[size] = '\\\\0'; //terminate the string;\\n        char *left = serialize(root->left); //collect left and right children;\\n        char *right = serialize(root->right);\\n        int leftSize = strlen(left);\\n        int rightSize = strlen(right);\\n        t = (char*)realloc(t, sizeof(char)*(size+leftSize+rightSize+2));\\n        strcat(t, left);\\n        strcat(t, right);\\n        return  t;\\n    }\\n    \\n    char** split(char* s, int* size) //split a string by ',';\\n    {\\n        char** arr = (char**)malloc(sizeof(char*));\\n        *size = 0;\\n        char* t = (char*)malloc(sizeof(char)*30);\\n        int index = 0;\\n        for(int i = 0; s[i]; i++)\\n        {\\n            if(s[i] != ',')\\n                t[index++] = s[i];\\n            else\\n            {\\n                t[index] = '\\\\0';\\n                *size += 1;\\n                arr = (char**)realloc(arr, sizeof(char*)*(*size));\\n                arr[*size-1] = t;\\n                t = (char*)malloc(sizeof(char)*30);\\n                index = 0;\\n            }\\n        }\\n        return arr;\\n    }\\n    \\n    struct TreeNode* helper(char*** arr) //using the pointer of the array to move it for recursion;\\n    {\\n        if(strcmp(**arr, \"X\") == 0) return NULL;\\n        int num = 0;\\n        for(int i = 0; (**arr)[i]; i++)\\n            num = 10*num + (**arr)[i]-'0';\\n        struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n        root->val = num;\\n        *arr += 1; //move to skip the current number;\\n        root->left = helper(arr);\\n        *arr += 1; //skip the left number;\\n        root->right = helper(arr);\\n        return root;\\n    }\\n    struct TreeNode* deserialize(char *s)\\n    {\\n        int size = 0;\\n        char** arr = split(s, &size);\\n        return helper(&arr);\\n    }\\n\\n\\n----------\\n\\nThe first version can be a little tedious, let's now take a look at the version 2 which only move the string pointer around to avoid the splitting operation and as a result it will also definitely quicker.\\n\\n----------\\n\\n    #define LEN 100\\n    \\n    char* serialize(struct TreeNode* root)\\n    {\\n        if(!root) return \"X,\";\\n        char *t = (char*)malloc(sizeof(char)*LEN);\\n        int size = 0;\\n        int val = root->val;\\n        while(val) //collect the string and convert it number in reverse order;\\n        {\\n            t[size++] = val%10 + '0';\\n            val /= 10;\\n        }\\n        for(int i = 0; i < size/2; i++) //since it's reversed, then reverse it again to make it normal;\\n        {\\n            char c = t[size-i-1]; t[size-i-1]=t[i]; t[i]=c;\\n        }\\n        t[size++] = ','; //add splitter;\\n        t[size] = '\\\\0'; //terminate the string;\\n        char *left = serialize(root->left); //collect left and right children;\\n        char *right = serialize(root->right);\\n        int leftSize = strlen(left);\\n        int rightSize = strlen(right);\\n        t = (char*)realloc(t, sizeof(char)*(size+leftSize+rightSize+2));\\n        strcat(t, left);\\n        strcat(t, right);\\n        return  t;\\n    }\\n    \\n    struct TreeNode* helper(char** s)\\n    {\\n        if(**s == 'X') return NULL; \\n        int num = 0;\\n        int count = 0;\\n        while(**s != ',') //collect number and meantime skip the current number;\\n            num = 10*num + *((*s)++) - '0';\\n        *s += 1; //skip the comma ',';\\n        struct TreeNode *root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n        root->val = num;\\n        root->left = helper(s);\\n        while((*(*s)++) != ','); //skip the left value;\\n        root->right = helper(s);\\n        retrn root;\\n    }\\n    \\n    struct TreeNode* deserialize(char* s)\\n    {\\n        return helper(&s);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 74373,
                "title": "really-nice-problem-and-clean-solution",
                "content": "In the hints, it use the level-order to store the elements, which is a bit hard to implement.\\n\\nBut it will be easy to implement with the pre-order-traversal based idea.\\n\\nAlso using the \" \" as the seperator is convinient for our deserialize operator. \\n\\n\\nU should make it clear that the \\n \\n       istringstream  is used to read string\\n       ostringstream  is used to write string \\n\\nHere is the final code:\\n\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            ostringstream in;\\n            serialize(root, in);\\n            return in.str();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            istringstream out(data);\\n            return deserialize(out);\\n        }\\n        \\n        void serialize(TreeNode* root, ostringstream& in){\\n            if(!root)  in<<\"# \";\\n            else{\\n                in<<root->val<<\" \";\\n                serialize(root->left, in);\\n                serialize(root->right, in);\\n            }\\n        }\\n        \\n        TreeNode* deserialize(istringstream& data){\\n            string temp;\\n            data>>temp;\\n            if(temp==\"#\")  return nullptr;\\n            TreeNode* root=new TreeNode(stoi(temp));\\n            root->left=deserialize(data);\\n            root->right=deserialize(data);\\n            return root;\\n        }\\n    };",
                "solutionTags": [],
                "code": "In the hints, it use the level-order to store the elements, which is a bit hard to implement.\\n\\nBut it will be easy to implement with the pre-order-traversal based idea.\\n\\nAlso using the \" \" as the seperator is convinient for our deserialize operator. \\n\\n\\nU should make it clear that the \\n \\n       istringstream  is used to read string\\n       ostringstream  is used to write string \\n\\nHere is the final code:\\n\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            ostringstream in;\\n            serialize(root, in);\\n            return in.str();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            istringstream out(data);\\n            return deserialize(out);\\n        }\\n        \\n        void serialize(TreeNode* root, ostringstream& in){\\n            if(!root)  in<<\"# \";\\n            else{\\n                in<<root->val<<\" \";\\n                serialize(root->left, in);\\n                serialize(root->right, in);\\n            }\\n        }\\n        \\n        TreeNode* deserialize(istringstream& data){\\n            string temp;\\n            data>>temp;\\n            if(temp==\"#\")  return nullptr;\\n            TreeNode* root=new TreeNode(stoi(temp));\\n            root->left=deserialize(data);\\n            root->right=deserialize(data);\\n            return root;\\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 74418,
                "title": "my-java-answer-using-the-leetcode-way",
                "content": "    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        StringBuilder sb = new StringBuilder();\\n        Queue<TreeNode> q = new LinkedList<TreeNode>();\\n        TreeNode nullNode = new TreeNode(0); // notice that you cannot push a null value into a queue in java, so we invent a sentry\\n        q.offer(root);\\n        TreeNode cur = null;\\n        while (q.size() > 0) {\\n            cur = q.poll();\\n            if (cur != nullNode) {\\n                sb.append(cur.val + \",\");\\n                q.offer(cur.left != null ? cur.left : nullNode);\\n                q.offer(cur.right != null ? cur.right : nullNode);\\n            } else\\n                sb.append(\"null,\");\\n        }\\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data.equals(\"\")) return null;\\n        String[] strs = data.split(\",\");\\n        TreeNode root = new TreeNode(Integer.parseInt(strs[0]));\\n        Queue<TreeNode> q = new LinkedList<TreeNode>();\\n        q.offer(root);\\n        Boolean left = true;\\n        TreeNode cur = null;\\n        for (int i = 1;i < strs.length;++i) {\\n            if (left)\\n                cur = q.poll();\\n            if (!strs[i].equals(\"null\")) {\\n                if (left) {\\n                    cur.left = new TreeNode(Integer.parseInt(strs[i]));\\n                    q.offer(cur.left);\\n                } else {\\n                    cur.right = new TreeNode(Integer.parseInt(strs[i]));\\n                    q.offer(cur.right);\\n                }\\n            }\\n            left = !left;\\n        }\\n        return root;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        StringBuilder sb = new StringBuilder();\\n        Queue<TreeNode> q = new LinkedList<TreeNode>();\\n        TreeNode nullNode = new TreeNode(0); // notice that you cannot push a null value into a queue in java, so we invent a sentry\\n        q.offer(root);\\n        TreeNode cur = null;\\n        while (q.size() > 0) {\\n            cur = q.poll();\\n            if (cur != nullNode) {\\n                sb.append(cur.val + \",\");\\n                q.offer(cur.left != null ? cur.left : nullNode);\\n                q.offer(cur.right != null ? cur.right : nullNode);\\n            } else\\n                sb.append(\"null,\");\\n        }\\n        return sb.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if (data.equals(\"\")) return null;\\n        String[] strs = data.split(\",\");\\n        TreeNode root = new TreeNode(Integer.parseInt(strs[0]));\\n        Queue<TreeNode> q = new LinkedList<TreeNode>();\\n        q.offer(root);\\n        Boolean left = true;\\n        TreeNode cur = null;\\n        for (int i = 1;i < strs.length;++i) {\\n            if (left)\\n                cur = q.poll();\\n            if (!strs[i].equals(\"null\")) {\\n                if (left) {\\n                    cur.left = new TreeNode(Integer.parseInt(strs[i]));\\n                    q.offer(cur.left);\\n                } else {\\n                    cur.right = new TreeNode(Integer.parseInt(strs[i]));\\n                    q.offer(cur.right);\\n                }\\n            }\\n            left = !left;\\n        }\\n        return root;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 74411,
                "title": "clean-python-code",
                "content": "    class Codec(object):\\n        def buildNode(self, val):\\n            return TreeNode(int(val)) if val != 'x' else None\\n        \\n        # return something like 1:2:3:x:x:4:5:x:x:x:x\\n        def serialize(self, root):\\n            queue = [root]\\n            [map(queue.append, (node.left, node.right)) for node in queue if node]\\n            return ':'.join(map(lambda n: n and str(n.val) or 'x', queue))\\n    \\n        def deserialize(self, data):\\n            queue, i, data = collections.deque(), 0, data.split(':')\\n    \\n            while i < len(data):\\n                if not queue:\\n                    root = self.buildNode(data[i])\\n                    queue.append(root)\\n                    i += 1\\n                    continue\\n    \\n                for _ in xrange(len(queue)):\\n                    node = queue.popleft()\\n                    node.left, node.right = [\\n                        self.buildNode(data[i + j]) for j in xrange(2)]\\n    \\n                    [queue.append(c) for c in (node.left, node.right) if c]\\n                    i += 2\\n    \\n            return root",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Codec(object):\\n        def buildNode(self, val):\\n            return TreeNode(int(val)) if val != 'x' else None\\n        \\n        # return something like 1:2:3:x:x:4:5:x:x:x:x\\n        def serialize(self, root):\\n            queue = [root]\\n            [map(queue.append, (node.left, node.right)) for node in queue if node]\\n            return ':'.join(map(lambda n: n and str(n.val) or 'x', queue))\\n    \\n        def deserialize(self, data):\\n            queue, i, data = collections.deque(), 0, data.split(':')\\n    \\n            while i < len(data):\\n                if not queue:\\n                    root = self.buildNode(data[i])\\n                    queue.append(root)\\n                    i += 1\\n                    continue\\n    \\n                for _ in xrange(len(queue)):\\n                    node = queue.popleft()\\n                    node.left, node.right = [\\n                        self.buildNode(data[i + j]) for j in xrange(2)]\\n    \\n                    [queue.append(c) for c in (node.left, node.right) if c]\\n                    i += 2\\n    \\n            return root",
                "codeTag": "Java"
            },
            {
                "id": 74422,
                "title": "java-bfs-based-accepted-solution-using-queue",
                "content": "\\nSerialize: - comma separated values in BFS order. \\nSimply traverse the tree in BFS order and enqueue all children. In case of leaves we push special node with -INF value. When we pop an item append the value of this node to string buffer unless this is a special node, in which case we append null to the buffer.\\n\\nDeserialize:-\\nWe start from root and start another BFS traverse to rebuild the tree. Each time we pop an item we scan 2 tokens from serialized string to get 2 child's. We create left and right child nodes for the popped node unless they are \"null\". \\n\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            if(root == null){\\n                return \"null\";\\n            }\\n            \\n            StringBuffer serTree = new StringBuffer();\\n            Queue<TreeNode> queue = new LinkedList<TreeNode>();\\n            queue.add(root);\\n            TreeNode node;\\n            \\n            while(!queue.isEmpty()){\\n                node = queue.poll();\\n                if(node.val == Integer.MIN_VALUE){\\n                    serTree.append(\"null,\");\\n                    continue;\\n                }\\n                else{\\n                    serTree.append(node.val+\",\");\\n                }\\n                \\n                if(node.left != null){\\n                    queue.add(node.left);\\n                }\\n                else{\\n                    queue.add(new TreeNode(Integer.MIN_VALUE));\\n                }\\n                \\n                if(node.right != null){\\n                    queue.add(node.right);\\n                }\\n                else{\\n                    queue.add(new TreeNode(Integer.MIN_VALUE));\\n                }\\n            }\\n            \\n            return serTree.toString();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            if(data == null || data.isEmpty() || data.startsWith(\"null\")){\\n                return null;\\n            }\\n            \\n            String[] nodes = data.split(\",\");\\n            if(nodes.length == 0){\\n                return null;\\n            }   \\n            \\n            TreeNode root = new TreeNode(0);\\n            Queue<TreeNode> queue = new LinkedList<TreeNode>();\\n            queue.add(root);\\n            \\n            TreeNode node;\\n            int i = 0;\\n            while(!queue.isEmpty()){\\n                node = queue.poll();\\n                node.val = Integer.parseInt(nodes[node.val]);\\n    \\n                int left = i+1;\\n                int right = i+2;\\n                \\n                if(left < nodes.length-1 && !nodes[left].equals(\"null\")){\\n                    TreeNode leftNode = new TreeNode(left);\\n                    node.left = leftNode;\\n                    queue.add(leftNode);\\n                }\\n                if(right < nodes.length-1 && !nodes[right].equals(\"null\")){\\n                    TreeNode rightNode = new TreeNode(right);\\n                    node.right = rightNode;\\n                    queue.add(rightNode);\\n                }\\n                \\n                i+=2;\\n            }\\n            \\n            return root;\\n        }\\n    }",
                "solutionTags": [],
                "code": "\\nSerialize: - comma separated values in BFS order. \\nSimply traverse the tree in BFS order and enqueue all children. In case of leaves we push special node with -INF value. When we pop an item append the value of this node to string buffer unless this is a special node, in which case we append null to the buffer.\\n\\nDeserialize:-\\nWe start from root and start another BFS traverse to rebuild the tree. Each time we pop an item we scan 2 tokens from serialized string to get 2 child's. We create left and right child nodes for the popped node unless they are \"null\". \\n\\n\\n    public class Codec {\\n    \\n        // Encodes a tree to a single string.\\n        public String serialize(TreeNode root) {\\n            if(root == null){\\n                return \"null\";\\n            }\\n            \\n            StringBuffer serTree = new StringBuffer();\\n            Queue<TreeNode> queue = new LinkedList<TreeNode>();\\n            queue.add(root);\\n            TreeNode node;\\n            \\n            while(!queue.isEmpty()){\\n                node = queue.poll();\\n                if(node.val == Integer.MIN_VALUE){\\n                    serTree.append(\"null,\");\\n                    continue;\\n                }\\n                else{\\n                    serTree.append(node.val+\",\");\\n                }\\n                \\n                if(node.left != null){\\n                    queue.add(node.left);\\n                }\\n                else{\\n                    queue.add(new TreeNode(Integer.MIN_VALUE));\\n                }\\n                \\n                if(node.right != null){\\n                    queue.add(node.right);\\n                }\\n                else{\\n                    queue.add(new TreeNode(Integer.MIN_VALUE));\\n                }\\n            }\\n            \\n            return serTree.toString();\\n        }\\n    \\n        // Decodes your encoded data to tree.\\n        public TreeNode deserialize(String data) {\\n            if(data == null || data.isEmpty() || data.startsWith(\"null\")){\\n                return null;\\n            }\\n            \\n            String[] nodes = data.split(\",\");\\n            if(nodes.length == 0){\\n                return null;\\n            }   \\n            \\n            TreeNode root = new TreeNode(0);\\n            Queue<TreeNode> queue = new LinkedList<TreeNode>();\\n            queue.add(root);\\n            \\n            TreeNode node;\\n            int i = 0;\\n            while(!queue.isEmpty()){\\n                node = queue.poll();\\n                node.val = Integer.parseInt(nodes[node.val]);\\n    \\n                int left = i+1;\\n                int right = i+2;\\n                \\n                if(left < nodes.length-1 && !nodes[left].equals(\"null\")){\\n                    TreeNode leftNode = new TreeNode(left);\\n                    node.left = leftNode;\\n                    queue.add(leftNode);\\n                }\\n                if(right < nodes.length-1 && !nodes[right].equals(\"null\")){\\n                    TreeNode rightNode = new TreeNode(right);\\n                    node.right = rightNode;\\n                    queue.add(rightNode);\\n                }\\n                \\n                i+=2;\\n            }\\n            \\n            return root;\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 74455,
                "title": "preorder-such-as-creating-bt-method",
                "content": "    /**\\n     * Definition for a binary tree node.\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            string encode;\\n            dfs(root, encode);\\n            return encode;\\n        }\\n        void dfs(TreeNode* root, string& encode){\\n            if(!root){\\n                encode+=\"*,\";\\n                return ;\\n            }\\n            encode+=to_string(root->val)+\",\";\\n            dfs(root->left, encode);\\n            dfs(root->right, encode);\\n        }\\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            int i = 0;\\n            TreeNode* root;\\n            Create(root, i, data);\\n            return root;\\n        }\\n        void Create(TreeNode*& root, int& i, string& data){\\n            if(data[i]=='*'){\\n                root=NULL;\\n                i+=2;\\n            }\\n            else{\\n                int num=0;\\n                bool flag=0;\\n                if(data[i]=='-'){\\n                    flag=1;\\n                    i++;\\n                }else if(data[i]=='+'){\\n                    i++;\\n                }\\n                while(i<data.size() && isdigit(data[i])) num=num*10+data[i]-'0', i++;\\n                i++;\\n                root=new TreeNode(!flag ? num : -num);\\n                Create(root->left, i, data);\\n                Create(root->right, i, data);\\n            }\\n        }\\n    };\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec;\\n    // codec.deserialize(codec.serialize(root));\\n\\n\\nsimilar to LC serialize BT, level order, code easy but long, I think it need at least 20 minutes for coding.\\n\\n\\n    /**\\n     * Definition for a binary tree node.\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            string ans;\\n            queue<TreeNode*> q;\\n            if(!root){\\n                ans+=\"*,\";\\n            }else{\\n                ans+=to_string(root->val)+\",\";\\n                q.push(root);\\n            }\\n            while(!q.empty()){\\n                auto cur = q.front(); q.pop();\\n                if(cur->left){\\n                    ans+=to_string(cur->left->val)+\",\";\\n                    q.push(cur->left);\\n                }else{\\n                    ans+=\"*,\";\\n                }\\n                if(cur->right){\\n                    ans+=to_string(cur->right->val)+\",\";\\n                    q.push(cur->right);\\n                }else{\\n                    ans+=\"*,\";\\n                }\\n            }\\n            return ans;\\n        }\\n        int extract(string data, int& i){\\n            bool flag=0;\\n            if(data[i]=='-'){\\n                flag=1;\\n                i++;\\n            }else if(data[i]=='+'){\\n                i++;\\n            }\\n            int num=0;\\n            while(i<data.size() && isdigit(data[i])) num=num*10+data[i]-'0', i++;\\n            i++;\\n            return !flag ? num : -num;\\n        }\\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            int i=0;\\n            queue<TreeNode*> q;\\n            TreeNode* root;\\n            if(data[i]=='*'){\\n                root=NULL;\\n                i+=2;\\n            }else{\\n                int num = extract(data, i);\\n                root=new TreeNode(num);\\n                q.push(root);\\n            }\\n            while(!q.empty()){\\n                auto cur = q.front(); q.pop();\\n                if(data[i]=='*'){\\n                    cur->left=NULL;\\n                    i+=2;\\n                }else{\\n                    int num= extract(data, i);\\n                    cur->left=new TreeNode(num);\\n                    q.push(cur->left);\\n                }\\n                if(data[i]=='*'){\\n                    cur->right=NULL;\\n                    i+=2;\\n                }else{\\n                    int num= extract(data, i);\\n                    cur->right=new TreeNode(num);\\n                    q.push(cur->right);\\n                }\\n            }\\n            return root;\\n        }\\n    };\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec;\\n    // codec.deserialize(codec.serialize(root));",
                "solutionTags": [],
                "code": "    /**\\n     * Definition for a binary tree node.\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            string encode;\\n            dfs(root, encode);\\n            return encode;\\n        }\\n        void dfs(TreeNode* root, string& encode){\\n            if(!root){\\n                encode+=\"*,\";\\n                return ;\\n            }\\n            encode+=to_string(root->val)+\",\";\\n            dfs(root->left, encode);\\n            dfs(root->right, encode);\\n        }\\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            int i = 0;\\n            TreeNode* root;\\n            Create(root, i, data);\\n            return root;\\n        }\\n        void Create(TreeNode*& root, int& i, string& data){\\n            if(data[i]=='*'){\\n                root=NULL;\\n                i+=2;\\n            }\\n            else{\\n                int num=0;\\n                bool flag=0;\\n                if(data[i]=='-'){\\n                    flag=1;\\n                    i++;\\n                }else if(data[i]=='+'){\\n                    i++;\\n                }\\n                while(i<data.size() && isdigit(data[i])) num=num*10+data[i]-'0', i++;\\n                i++;\\n                root=new TreeNode(!flag ? num : -num);\\n                Create(root->left, i, data);\\n                Create(root->right, i, data);\\n            }\\n        }\\n    };\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec;\\n    // codec.deserialize(codec.serialize(root));\\n\\n\\nsimilar to LC serialize BT, level order, code easy but long, I think it need at least 20 minutes for coding.\\n\\n\\n    /**\\n     * Definition for a binary tree node.\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Codec {\\n    public:\\n    \\n        // Encodes a tree to a single string.\\n        string serialize(TreeNode* root) {\\n            string ans;\\n            queue<TreeNode*> q;\\n            if(!root){\\n                ans+=\"*,\";\\n            }else{\\n                ans+=to_string(root->val)+\",\";\\n                q.push(root);\\n            }\\n            while(!q.empty()){\\n                auto cur = q.front(); q.pop();\\n                if(cur->left){\\n                    ans+=to_string(cur->left->val)+\",\";\\n                    q.push(cur->left);\\n                }else{\\n                    ans+=\"*,\";\\n                }\\n                if(cur->right){\\n                    ans+=to_string(cur->right->val)+\",\";\\n                    q.push(cur->right);\\n                }else{\\n                    ans+=\"*,\";\\n                }\\n            }\\n            return ans;\\n        }\\n        int extract(string data, int& i){\\n            bool flag=0;\\n            if(data[i]=='-'){\\n                flag=1;\\n                i++;\\n            }else if(data[i]=='+'){\\n                i++;\\n            }\\n            int num=0;\\n            while(i<data.size() && isdigit(data[i])) num=num*10+data[i]-'0', i++;\\n            i++;\\n            return !flag ? num : -num;\\n        }\\n        // Decodes your encoded data to tree.\\n        TreeNode* deserialize(string data) {\\n            int i=0;\\n            queue<TreeNode*> q;\\n            TreeNode* root;\\n            if(data[i]=='*'){\\n                root=NULL;\\n                i+=2;\\n            }else{\\n                int num = extract(data, i);\\n                root=new TreeNode(num);\\n                q.push(root);\\n            }\\n            while(!q.empty()){\\n                auto cur = q.front(); q.pop();\\n                if(data[i]=='*'){\\n                    cur->left=NULL;\\n                    i+=2;\\n                }else{\\n                    int num= extract(data, i);\\n                    cur->left=new TreeNode(num);\\n                    q.push(cur->left);\\n                }\\n                if(data[i]=='*'){\\n                    cur->right=NULL;\\n                    i+=2;\\n                }else{\\n                    int num= extract(data, i);\\n                    cur->right=new TreeNode(num);\\n                    q.push(cur->right);\\n                }\\n            }\\n            return root;\\n        }\\n    };\\n    \\n    // Your Codec object will be instantiated and called as such:\\n    // Codec codec;\\n    // codec.deserialize(codec.serialize(root));",
                "codeTag": "Java"
            },
            {
                "id": 3724745,
                "title": "beginner-friendly-approach-easy-to-understand-c",
                "content": "# Serialization\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe serialize() function takes the root of a binary tree as input and returns a string representing the serialized form of the tree.\\n\\nThe algorithm uses a stringstream (ostringstream) to construct the serialized string. It performs a pre-order traversal of the binary tree and appends the node values to the stringstream. If a node is NULL, it appends \"N\" to represent a null node.\\n\\nThe serialized string is obtained by calling the str() function on the stringstream.\\n# Deserialization\\n<!-- Describe your approach to solving the problem. -->\\nThe deserialize() function takes a serialized string as input and returns the root of the deserialized binary tree.\\n\\nThe algorithm uses a stringstream (istringstream) to read the serialized string. It performs a recursive function call (decode()) to construct the binary tree from the serialized string.\\n\\nThe decode() function reads the next value from the stringstream. If the value is \"N\", it returns NULL to represent a null node. Otherwise, it creates a new node with the value and recursively calls decode() to construct the left and right subtrees.\\n\\nThe decode() function returns the constructed node, and the process continues until the entire tree is reconstructed.\\n# Complexity Analysis\\nThe time complexity of both serialization and deserialization is O(n), where n is the number of nodes in the binary tree. Each node is visited once during the serialization and deserialization processes.\\n\\nThe space complexity is O(n) for both serialization and deserialization. In the worst case, the recursion depth can be equal to the number of nodes in the binary tree, resulting in O(n) space usage for the function call stack. Additionally, the serialized string requires O(n) space to store the tree\\'s values.\\n\\n# Code\\n```\\n/*\\n    Design an algorithm to serialize & deserialize a binary tree\\n\\n    Use stringstream to concisely handle negatives, nulls, etc.\\n\\n    Time: O(n) serialize, O(n) deserialize\\n    Space: O(n) serialize, O(n) deserialize\\n*/\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        ostringstream out;\\n        encode(root, out);\\n        return out.str();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        return decode(in);\\n    }\\n    \\nprivate:\\n    \\n    void encode(TreeNode* root, ostringstream& out) {\\n        if (root == NULL) {\\n            out << \"N \";\\n            return;\\n        }\\n        \\n        out << root->val << \" \";\\n        \\n        encode(root->left, out);\\n        encode(root->right, out);\\n    }\\n    \\n    TreeNode* decode(istringstream& in) {\\n        string value = \"\";\\n        in >> value;\\n        \\n        if (value == \"N\") {\\n            return NULL;\\n        }\\n        \\n        TreeNode* root = new TreeNode(stoi(value));\\n        \\n        root->left = decode(in);\\n        root->right = decode(in);\\n        \\n        return root;\\n    }\\n    \\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/*\\n    Design an algorithm to serialize & deserialize a binary tree\\n\\n    Use stringstream to concisely handle negatives, nulls, etc.\\n\\n    Time: O(n) serialize, O(n) deserialize\\n    Space: O(n) serialize, O(n) deserialize\\n*/\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        ostringstream out;\\n        encode(root, out);\\n        return out.str();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        istringstream in(data);\\n        return decode(in);\\n    }\\n    \\nprivate:\\n    \\n    void encode(TreeNode* root, ostringstream& out) {\\n        if (root == NULL) {\\n            out << \"N \";\\n            return;\\n        }\\n        \\n        out << root->val << \" \";\\n        \\n        encode(root->left, out);\\n        encode(root->right, out);\\n    }\\n    \\n    TreeNode* decode(istringstream& in) {\\n        string value = \"\";\\n        in >> value;\\n        \\n        if (value == \"N\") {\\n            return NULL;\\n        }\\n        \\n        TreeNode* root = new TreeNode(stoi(value));\\n        \\n        root->left = decode(in);\\n        root->right = decode(in);\\n        \\n        return root;\\n    }\\n    \\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3698323,
                "title": "hack",
                "content": "# Intuition\\nWeak Testing\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nHack\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nTreeNode* save;\\nclass Codec {\\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        save=root;\\n        return \"\";\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        return save;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nTreeNode* save;\\nclass Codec {\\npublic:\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        save=root;\\n        return \"\";\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        return save;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3559314,
                "title": "serialize-and-deserialize-binary-tree-java-recursion-85-32-faster",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n     int cnt=0;\\n    TreeNode convertVecToTree(int size,String[] vec){\\n        if(cnt>=size || vec[cnt].equals(\"N\")){\\n            cnt++;\\n            return null;\\n        } \\n        TreeNode root= new TreeNode(Integer.parseInt(vec[cnt]));\\n        cnt++;\\n        root.left=convertVecToTree(size,vec);\\n        root.right=convertVecToTree(size,vec);\\n        return root;\\n        \\n    }\\n    void serializeTree(TreeNode root,StringBuffer s){\\n        if(root==null){\\n            s.append(\\',\\');\\n            s.append(\\'N\\');\\n            return;\\n        }\\n        if(s.length()==0) s.append(Integer.toString(root.val));\\n       else  s.append(\",\"+Integer.toString(root.val));\\n        serializeTree(root.left,s);\\n        serializeTree(root.right,s);\\n    }\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root==null) return \"\";\\n        StringBuffer s= new StringBuffer();\\n        serializeTree(root,s);\\n        String ans=s.toString();\\n        // System.out.println(ans);\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data==\"\") return null;\\n        String[] vec=data.split(\",\");\\n        TreeNode root=convertVecToTree(vec.length,vec);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n     int cnt=0;\\n    TreeNode convertVecToTree(int size,String[] vec){\\n        if(cnt>=size || vec[cnt].equals(\"N\")){\\n            cnt++;\\n            return null;\\n        } \\n        TreeNode root= new TreeNode(Integer.parseInt(vec[cnt]));\\n        cnt++;\\n        root.left=convertVecToTree(size,vec);\\n        root.right=convertVecToTree(size,vec);\\n        return root;\\n        \\n    }\\n    void serializeTree(TreeNode root,StringBuffer s){\\n        if(root==null){\\n            s.append(\\',\\');\\n            s.append(\\'N\\');\\n            return;\\n        }\\n        if(s.length()==0) s.append(Integer.toString(root.val));\\n       else  s.append(\",\"+Integer.toString(root.val));\\n        serializeTree(root.left,s);\\n        serializeTree(root.right,s);\\n    }\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root==null) return \"\";\\n        StringBuffer s= new StringBuffer();\\n        serializeTree(root,s);\\n        String ans=s.toString();\\n        // System.out.println(ans);\\n        return ans;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data==\"\") return null;\\n        String[] vec=data.split(\",\");\\n        TreeNode root=convertVecToTree(vec.length,vec);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534018,
                "title": "python-easy-bfs-queue",
                "content": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if root==None:\\n            return \"\"\\n        q=deque([root])\\n        s=\"\"\\n        while q:\\n            node=q.popleft()\\n            if node:\\n                s+=str(node.val)+\" \"\\n                q.append(node.left)\\n                q.append(node.right)\\n            else:\\n                s+=\"# \"\\n        return s       \\n\\n    def deserialize(self, data):\\n        n=len(data)\\n        if n==0:\\n            return None\\n        data=data.split(\" \")\\n        t=root=TreeNode(data[0])\\n        data.pop()\\n        q=deque([root])\\n        i=1\\n        while q:\\n            node=q.popleft()\\n            s=data[i]\\n            if s!=\\'#\\':\\n                node.left=TreeNode(s)\\n                q.append(node.left)\\n            else:\\n                node.left=None\\n            i+=1\\n            s=data[i]\\n            if s!=\\'#\\':\\n                node.right=TreeNode(s)\\n                q.append(node.right)\\n            else:\\n                node.right=None  \\n            i+=1\\n        return t\\n```\\n**An upvote will be encouarging**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Breadth-First Search",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\nclass Codec:\\n\\n    def serialize(self, root):\\n        if root==None:\\n            return \"\"\\n        q=deque([root])\\n        s=\"\"\\n        while q:\\n            node=q.popleft()\\n            if node:\\n                s+=str(node.val)+\" \"\\n                q.append(node.left)\\n                q.append(node.right)\\n            else:\\n                s+=\"# \"\\n        return s       \\n\\n    def deserialize(self, data):\\n        n=len(data)\\n        if n==0:\\n            return None\\n        data=data.split(\" \")\\n        t=root=TreeNode(data[0])\\n        data.pop()\\n        q=deque([root])\\n        i=1\\n        while q:\\n            node=q.popleft()\\n            s=data[i]\\n            if s!=\\'#\\':\\n                node.left=TreeNode(s)\\n                q.append(node.left)\\n            else:\\n                node.left=None\\n            i+=1\\n            s=data[i]\\n            if s!=\\'#\\':\\n                node.right=TreeNode(s)\\n                q.append(node.right)\\n            else:\\n                node.right=None  \\n            i+=1\\n        return t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497317,
                "title": "using-queue-and-breath-first-search-java",
                "content": "\\n\\n# Code\\n```\\npublic class Codec {\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder res = new StringBuilder();\\n        q.add(root);\\n        while (!q.isEmpty()) {\\n            TreeNode node = q.poll();\\n            if (node == null) {\\n                res.append(\"n \");\\n                continue;\\n            }\\n            res.append(node.val + \" \");\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n        return res.toString();\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        if (data == \"\") return null;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        String[] values = data.split(\" \");\\n        TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n        q.add(root);\\n        for (int i = 1; i < values.length; i++) {\\n            TreeNode parent = q.poll();\\n            if (!values[i].equals(\"n\")) {\\n                TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                parent.left = left;\\n                q.add(left);\\n            }\\n            if (!values[++i].equals(\"n\")) {\\n                TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                parent.right = right;\\n                q.add(right);\\n            }\\n        }\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Codec {\\n    public String serialize(TreeNode root) {\\n        if (root == null) return \"\";\\n        Queue<TreeNode> q = new LinkedList<>();\\n        StringBuilder res = new StringBuilder();\\n        q.add(root);\\n        while (!q.isEmpty()) {\\n            TreeNode node = q.poll();\\n            if (node == null) {\\n                res.append(\"n \");\\n                continue;\\n            }\\n            res.append(node.val + \" \");\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n        return res.toString();\\n    }\\n\\n    public TreeNode deserialize(String data) {\\n        if (data == \"\") return null;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        String[] values = data.split(\" \");\\n        TreeNode root = new TreeNode(Integer.parseInt(values[0]));\\n        q.add(root);\\n        for (int i = 1; i < values.length; i++) {\\n            TreeNode parent = q.poll();\\n            if (!values[i].equals(\"n\")) {\\n                TreeNode left = new TreeNode(Integer.parseInt(values[i]));\\n                parent.left = left;\\n                q.add(left);\\n            }\\n            if (!values[++i].equals(\"n\")) {\\n                TreeNode right = new TreeNode(Integer.parseInt(values[i]));\\n                parent.right = right;\\n                q.add(right);\\n            }\\n        }\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3350547,
                "title": "c-easy-solution-using-level-order-traversal",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThink of Level Order Traversal.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\n- O(N)\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) \\n    {\\n        if(!root)\\n        {\\n            return \"\";\\n        }    \\n        string s = \"\";\\n        queue<TreeNode *>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode * temp =  q.front();\\n            q.pop();\\n            if(temp == NULL)\\n            {\\n                s.append(\"#,\");\\n            }\\n            else\\n            {\\n                s.append(to_string(temp->val)+\\',\\');\\n            }\\n            if(temp)\\n            {\\n                q.push(temp->left);\\n                q.push(temp->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) \\n    {\\n        if(data.size() == 0)\\n        {\\n            return NULL;\\n        }    \\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode * root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode * temp = q.front();\\n            q.pop();\\n            getline(s, str, \\',\\');\\n            if(str == \"#\")\\n            {\\n                temp->left = NULL;\\n            }\\n            else\\n            {\\n                TreeNode * leftNode = new TreeNode(stoi(str));\\n                temp->left = leftNode;\\n                q.push(leftNode);\\n            }\\n            getline(s, str, \\',\\');\\n            if(str == \"#\")\\n            {\\n                temp->right = NULL;\\n            }\\n            else\\n            {\\n                TreeNode * rightNode = new TreeNode(stoi(str));\\n                temp->right = rightNode;\\n                q.push(rightNode);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) \\n    {\\n        if(!root)\\n        {\\n            return \"\";\\n        }    \\n        string s = \"\";\\n        queue<TreeNode *>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode * temp =  q.front();\\n            q.pop();\\n            if(temp == NULL)\\n            {\\n                s.append(\"#,\");\\n            }\\n            else\\n            {\\n                s.append(to_string(temp->val)+\\',\\');\\n            }\\n            if(temp)\\n            {\\n                q.push(temp->left);\\n                q.push(temp->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) \\n    {\\n        if(data.size() == 0)\\n        {\\n            return NULL;\\n        }    \\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode * root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode * temp = q.front();\\n            q.pop();\\n            getline(s, str, \\',\\');\\n            if(str == \"#\")\\n            {\\n                temp->left = NULL;\\n            }\\n            else\\n            {\\n                TreeNode * leftNode = new TreeNode(stoi(str));\\n                temp->left = leftNode;\\n                q.push(leftNode);\\n            }\\n            getline(s, str, \\',\\');\\n            if(str == \"#\")\\n            {\\n                temp->right = NULL;\\n            }\\n            else\\n            {\\n                TreeNode * rightNode = new TreeNode(stoi(str));\\n                temp->right = rightNode;\\n                q.push(rightNode);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3331989,
                "title": "serialize-using-level-order-traversal",
                "content": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL) return \"\";\\n        string s=\"\";\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* a=q.front();\\n            q.pop();\\n            if(a==NULL) s+=\"#,\";\\n            else{\\n                s+=to_string(a->val)+\\',\\';\\n                q.push(a->left);\\n                q.push(a->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0) return NULL;\\n        stringstream s(data);\\n        string str;\\n        getline(s,str,\\',\\');\\n        TreeNode* root=new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* a=q.front();\\n            q.pop();\\n            getline(s,str,\\',\\');\\n            if(str==\"#\") a->left=NULL;\\n            else{\\n                a->left=new TreeNode(stoi(str));\\n                q.push(a->left);\\n            }\\n            getline(s,str,\\',\\');\\n            if(str==\"#\") a->right=NULL;\\n            else{\\n                a->right=new TreeNode(stoi(str));\\n                q.push(a->right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL) return \"\";\\n        string s=\"\";\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* a=q.front();\\n            q.pop();\\n            if(a==NULL) s+=\"#,\";\\n            else{\\n                s+=to_string(a->val)+\\',\\';\\n                q.push(a->left);\\n                q.push(a->right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0) return NULL;\\n        stringstream s(data);\\n        string str;\\n        getline(s,str,\\',\\');\\n        TreeNode* root=new TreeNode(stoi(str));\\n        queue<TreeNode*> q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* a=q.front();\\n            q.pop();\\n            getline(s,str,\\',\\');\\n            if(str==\"#\") a->left=NULL;\\n            else{\\n                a->left=new TreeNode(stoi(str));\\n                q.push(a->left);\\n            }\\n            getline(s,str,\\',\\');\\n            if(str==\"#\") a->right=NULL;\\n            else{\\n                a->right=new TreeNode(stoi(str));\\n                q.push(a->right);\\n            }\\n        }\\n        return root;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3318351,
                "title": "using-level-order-traversal-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root==null) return \"\";\\n        Queue<TreeNode>q=new LinkedList<>();\\n        StringBuilder res=new StringBuilder();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode node=q.poll();\\n            if(node==null){\\n                res.append(\"# \");\\n                continue;\\n            }\\n            res.append(node.val+\" \");\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n        System.out.println(res.toString());\\n        return res.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data==\"\") return null;\\n        Queue<TreeNode>q=new LinkedList<>();\\n        String[] s=data.split(\" \");\\n        TreeNode root=new TreeNode(Integer.parseInt(s[0]));\\n        q.add(root);\\n        for(int i=1;i<s.length;i++){\\n            TreeNode parent=q.poll();\\n            if(!s[i].equals(\"#\")){\\n                TreeNode left=new TreeNode(Integer.parseInt(s[i]));\\n                parent.left=left;\\n                q.add(left);\\n            }\\n            if(!s[++i].equals(\"#\")){\\n                TreeNode right=new TreeNode(Integer.parseInt(s[i]));\\n                parent.right=right;\\n                q.add(right);\\n            }\\n        }\\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root==null) return \"\";\\n        Queue<TreeNode>q=new LinkedList<>();\\n        StringBuilder res=new StringBuilder();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode node=q.poll();\\n            if(node==null){\\n                res.append(\"# \");\\n                continue;\\n            }\\n            res.append(node.val+\" \");\\n            q.add(node.left);\\n            q.add(node.right);\\n        }\\n        System.out.println(res.toString());\\n        return res.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data==\"\") return null;\\n        Queue<TreeNode>q=new LinkedList<>();\\n        String[] s=data.split(\" \");\\n        TreeNode root=new TreeNode(Integer.parseInt(s[0]));\\n        q.add(root);\\n        for(int i=1;i<s.length;i++){\\n            TreeNode parent=q.poll();\\n            if(!s[i].equals(\"#\")){\\n                TreeNode left=new TreeNode(Integer.parseInt(s[i]));\\n                parent.left=left;\\n                q.add(left);\\n            }\\n            if(!s[++i].equals(\"#\")){\\n                TreeNode right=new TreeNode(Integer.parseInt(s[i]));\\n                parent.right=right;\\n                q.add(right);\\n            }\\n        }\\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3292762,
                "title": "easiest-solution-cpp",
                "content": "CODE\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL)\\n            return \"\";\\n        \\n        string s;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* node=q.front();\\n            q.pop();\\n            if(node==NULL)\\n            {\\n                s.append(\"#,\");\\n            }\\n            else\\n            {\\n                s.append(to_string(node->val)+\\',\\');\\n            }\\n            if(node!=NULL)\\n            {\\n                q.push(node->left);\\n                q.push(node->right);\\n            }     \\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0)\\n            return NULL;\\n        \\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root=new TreeNode(stoi(str));\\n            queue<TreeNode*>q;\\n            q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* node=q.front();\\n            q.pop();\\n            \\n              getline(s, str, \\',\\');\\n            if(str==\"#\")\\n            {\\n                node->left=NULL;\\n            }\\n            else\\n            {\\n                TreeNode* l=new TreeNode(stoi(str));\\n                node->left=l;\\n                q.push(l);\\n            }\\n            \\n             getline(s, str, \\',\\');\\n            if(str==\"#\")\\n            {\\n                node->right=NULL;\\n            }\\n            else\\n            {\\n                TreeNode* r=new TreeNode(stoi(str));\\n                node->right=r;\\n                q.push(r);\\n            }\\n            \\n        }\\n        return root;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "Tree",
                    "Binary Tree"
                ],
                "code": "```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        if(root==NULL)\\n            return \"\";\\n        \\n        string s;\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* node=q.front();\\n            q.pop();\\n            if(node==NULL)\\n            {\\n                s.append(\"#,\");\\n            }\\n            else\\n            {\\n                s.append(to_string(node->val)+\\',\\');\\n            }\\n            if(node!=NULL)\\n            {\\n                q.push(node->left);\\n                q.push(node->right);\\n            }     \\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size()==0)\\n            return NULL;\\n        \\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root=new TreeNode(stoi(str));\\n            queue<TreeNode*>q;\\n            q.push(root);\\n        while(!q.empty())\\n        {\\n            TreeNode* node=q.front();\\n            q.pop();\\n            \\n              getline(s, str, \\',\\');\\n            if(str==\"#\")\\n            {\\n                node->left=NULL;\\n            }\\n            else\\n            {\\n                TreeNode* l=new TreeNode(stoi(str));\\n                node->left=l;\\n                q.push(l);\\n            }\\n            \\n             getline(s, str, \\',\\');\\n            if(str==\"#\")\\n            {\\n                node->right=NULL;\\n            }\\n            else\\n            {\\n                TreeNode* r=new TreeNode(stoi(str));\\n                node->right=r;\\n                q.push(r);\\n            }\\n            \\n        }\\n        return root;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3090698,
                "title": "java-easy-solution-level-order-traversal",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    \\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root==null)  return \"\";\\n        Queue<TreeNode>q=new LinkedList<>();\\n        StringBuilder res=new StringBuilder();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode temp=q.poll();\\n            if(temp==null) {   \\n                res.append(\"# \");\\n                continue;\\n            }\\n            res.append(temp.val+\" \");\\n            q.add(temp.left);\\n            q.add(temp.right);\\n        }\\n        return res.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data==\"\") return null;\\n        String ans[]=data.split(\" \");\\n        Queue<TreeNode>q2=new LinkedList<>();\\n        TreeNode root=new TreeNode(Integer.parseInt(ans[0]));\\n        q2.add(root);\\n        for(int i=1;i<ans.length;i++){\\n            TreeNode temp=q2.poll();\\n            if(!ans[i].equals(\"#\")){\\n                TreeNode left=new TreeNode(Integer.parseInt(ans[i]));\\n                temp.left=left;\\n                q2.add(left);\\n            }\\n            if(!ans[++i].equals(\"#\")){\\n                TreeNode right=new TreeNode(Integer.parseInt(ans[i]));\\n                temp.right=right;\\n                q2.add(right);\\n            }\\n        }\\n\\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    \\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        if(root==null)  return \"\";\\n        Queue<TreeNode>q=new LinkedList<>();\\n        StringBuilder res=new StringBuilder();\\n        q.add(root);\\n        while(!q.isEmpty()){\\n            TreeNode temp=q.poll();\\n            if(temp==null) {   \\n                res.append(\"# \");\\n                continue;\\n            }\\n            res.append(temp.val+\" \");\\n            q.add(temp.left);\\n            q.add(temp.right);\\n        }\\n        return res.toString();\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        if(data==\"\") return null;\\n        String ans[]=data.split(\" \");\\n        Queue<TreeNode>q2=new LinkedList<>();\\n        TreeNode root=new TreeNode(Integer.parseInt(ans[0]));\\n        q2.add(root);\\n        for(int i=1;i<ans.length;i++){\\n            TreeNode temp=q2.poll();\\n            if(!ans[i].equals(\"#\")){\\n                TreeNode left=new TreeNode(Integer.parseInt(ans[i]));\\n                temp.left=left;\\n                q2.add(left);\\n            }\\n            if(!ans[++i].equals(\"#\")){\\n                TreeNode right=new TreeNode(Integer.parseInt(ans[i]));\\n                temp.right=right;\\n                q2.add(right);\\n            }\\n        }\\n\\n        return root;\\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3069587,
                "title": "bypass-the-code-not-recommended-for-learners-just-2-lines-python",
                "content": "```\\ngg = None\\nclass Codec:\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        global gg\\n        gg = root\\n        return \\'\\'\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        return gg\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Recursion",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "```\\ngg = None\\nclass Codec:\\n    def serialize(self, root):\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\n        global gg\\n        gg = root\\n        return \\'\\'\\n        \\n\\n    def deserialize(self, data):\\n        \"\"\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \"\"\"\\n        return gg\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2943840,
                "title": "js-faster-than-98",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nRuntime 99 ms, Beats 98.16%\\n\\n- Space complexity:\\nMemory 52.9 MB, Beats 87.71%\\n\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    const arr = [];\\n    treeToArr(root, arr);\\n    return JSON.stringify(arr);\\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    const arr = JSON.parse(data);\\n    const dummy = new TreeNode();\\n    arrToTree(dummy, arr, 0, true);\\n    return dummy.left;\\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n\\n const treeToArr = (node, arr) => {\\n    if (!node) {\\n        arr.push(null);\\n        return;\\n    }\\n    arr.push(node.val);\\n    treeToArr(node.left, arr);\\n    treeToArr(node.right, arr);\\n};\\n\\nconst arrToTree = (node, arr, index, isLeft) => {\\n    if (index === arr.length) {\\n        return index;\\n    }\\n    if (arr[index] === null) {\\n        return index;\\n    }\\n    const newNode = new TreeNode(arr[index]);\\n    if (isLeft) {\\n        node.left = newNode;\\n    } else {\\n        node.right = newNode;\\n    }\\n    \\n    index = arrToTree(newNode, arr, index + 1, true);\\n    index = arrToTree(newNode, arr, index + 1, false);\\n    return index;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    const arr = [];\\n    treeToArr(root, arr);\\n    return JSON.stringify(arr);\\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    const arr = JSON.parse(data);\\n    const dummy = new TreeNode();\\n    arrToTree(dummy, arr, 0, true);\\n    return dummy.left;\\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n\\n const treeToArr = (node, arr) => {\\n    if (!node) {\\n        arr.push(null);\\n        return;\\n    }\\n    arr.push(node.val);\\n    treeToArr(node.left, arr);\\n    treeToArr(node.right, arr);\\n};\\n\\nconst arrToTree = (node, arr, index, isLeft) => {\\n    if (index === arr.length) {\\n        return index;\\n    }\\n    if (arr[index] === null) {\\n        return index;\\n    }\\n    const newNode = new TreeNode(arr[index]);\\n    if (isLeft) {\\n        node.left = newNode;\\n    } else {\\n        node.right = newNode;\\n    }\\n    \\n    index = arrToTree(newNode, arr, index + 1, true);\\n    index = arrToTree(newNode, arr, index + 1, false);\\n    return index;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2803058,
                "title": "java-solution-using-preorder-traversal-and-queue",
                "content": "Please upvote if you like the solution.\\n```\\n // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuffer output = new StringBuffer();\\n        traverse(root,output);\\n        System.out.println(\"output \"+output.toString());\\n        return output.toString();\\n    }\\n    public void traverse(TreeNode root, StringBuffer output){\\n        if(root == null){\\n            output.append(\"#\"+\",\");\\n            return;\\n        }\\n        output.append(root.val+\",\");\\n        traverse(root.left,output);\\n        traverse(root.right,output);\\n    }\\n    \\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] arr = data.split(\",\");\\n        Queue<String> q = new LinkedList<String>();\\n        for(String s : arr){\\n            q.add(s);\\n        }\\n        return helper(q);\\n    }\\n    TreeNode helper(Queue<String> q){\\n        String s = q.poll();\\n        if(s.equals(\"#\")){\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(s));\\n        root.left = helper(q);\\n        root.right = helper(q);\\n        return root;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        StringBuffer output = new StringBuffer();\\n        traverse(root,output);\\n        System.out.println(\"output \"+output.toString());\\n        return output.toString();\\n    }\\n    public void traverse(TreeNode root, StringBuffer output){\\n        if(root == null){\\n            output.append(\"#\"+\",\");\\n            return;\\n        }\\n        output.append(root.val+\",\");\\n        traverse(root.left,output);\\n        traverse(root.right,output);\\n    }\\n    \\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        String[] arr = data.split(\",\");\\n        Queue<String> q = new LinkedList<String>();\\n        for(String s : arr){\\n            q.add(s);\\n        }\\n        return helper(q);\\n    }\\n    TreeNode helper(Queue<String> q){\\n        String s = q.poll();\\n        if(s.equals(\"#\")){\\n            return null;\\n        }\\n        TreeNode root = new TreeNode(Integer.parseInt(s));\\n        root.left = helper(q);\\n        root.right = helper(q);\\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1576073,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1566973,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1566256,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1748154,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1567244,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1576283,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1569962,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 2002602,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1931882,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1886547,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1576073,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1566973,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1566256,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1748154,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1567244,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1576283,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1569962,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 2002602,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1931882,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1886547,
                "content": [
                    {
                        "username": "calnastic",
                        "content": "My first ever submission with good speed and mem usage \\uD83D\\uDE0A. \\n\\n![image](https://assets.leetcode.com/users/images/d76751a9-9ee2-4f2c-9a90-6a5a27befe56_1639235914.627587.png)\\n"
                    },
                    {
                        "username": "root89",
                        "content": "\\uD83E\\uDD23 what is happening! "
                    },
                    {
                        "username": "mclarenGt",
                        "content": "leetcode just got fooled \\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "tandalesamarth",
                        "content": "That\\'s Great!!! But how does it work?"
                    },
                    {
                        "username": "alin99",
                        "content": "LOL"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/22b3574b-52e2-44b4-b1f2-aa3cea54192c_1597602087.8698933.png)\\n\\n![image](https://assets.leetcode.com/users/images/c411c484-bcc5-42bd-a9d8-e5d867879a91_1597602097.357675.png)\\n"
                    },
                    {
                        "username": "Snooperlock",
                        "content": "Most of the solutions are done with PreOrder traversal. Is it possible to solve it with InOrder or Postorder traversal?"
                    },
                    {
                        "username": "quilir",
                        "content": "Postorder = reversed preorder, so it will work if preorder works.\n\nFor inorder, I guess you could do a bit verbose encoding \"(L)N(R)\" for each node, where N is node number, L is left subtree, R is right subtree. You can skip \"()\" if that child does not exist. For tree from the task description it would be \"(2)1((4)3(5))\"\nYou can do decoding recursively - find middle node, decode left subtree recursively, decode right subtree recursively, attatch them as children to the middle node"
                    },
                    {
                        "username": "qiushile",
                        "content": "use levelorder"
                    },
                    {
                        "username": "Rishabh_yaduwanshi",
                        "content": "As leetcode presents the level order traversal of the tree,it seems quite intriguing  to serialize the tree by level order traversal. As level order and Dfs solutions have their own pros and cones but skipping creation of a whole memory stack just to perform a simple step makes level order traversal my choice here and yes a pure level order based solution exists,but the parent-child relation obtained in the array representation of complete binary tree fails here,so don\\'t use it.\\nconsider the 0-indexed array [1,2,3,null,null,4,5,6] \\nin this array index 7 claims index 3 as it\\'s parent using the formula (index-1)/2 but there is null at that index this happens because in a complete binary tree the value at index 3 would have inserted it\\'s child at index 7 but since there existed no child the gap between 5 and 6 is never filled producing the failure."
                    },
                    {
                        "username": "egg325",
                        "content": "[@Hariharan98](/Hariharan98) I have a solution with level order traversal but I get memory limit exceeded on the very last test case sadly. I treated it as a complete binary tree where I simply placed a null node (marked by \"x\") in the string whenever no node was present. This way you can use the parent child index relationship"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "[@Hariharan98](/Hariharan98) In Leet code\\'s string representation the end of a tree branch is represented with only one null element. Rest of the children null element are not present. This makes it very difficult to establish the parent child relationship. A pre-order traversal based solution seems best to me. If anyone solved it using Leet code\\'s level order based serialization please let me know."
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent a lot of time trying to do it with level order traversal. I came right off the level order traversal question (Typical to a man holding a hammer everything looks like a nail thing :P). I struggled quite a bit with the deserializing part, I could never get the recursive function right. I don\\'t think the parent child information is lost in this case it simply doesn\\'t obey the (index - 1)/2 formula because of null nodes. I still believe a solution based on level order is possible."
                    },
                    {
                        "username": "dashenswen",
                        "content": "The idea of using preorder is brilliant, I think the process is similar to inorder and postorder. But I can not write a right solution. Does there exist solution using inorder?\\nIn other word. why does preorder work? why does other solutions seem not working?"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "<-- please vote\\n\\n![image](https://assets.leetcode.com/users/images/cdc9baaf-9525-495a-8404-e368a6a8ad8e_1643033772.4265125.png)\\n"
                    },
                    {
                        "username": "csgod",
                        "content": "why is bfs considered easier than dfs for this problem? Perhaps unrelated but also for dfs when should you use a stack over recursion? Is it possible to solve this problem with a stack?"
                    },
                    {
                        "username": "Saik77",
                        "content": "Yeah, I think we can solve this question using stack and instead of using DFS we can use BFS(level order traversal);"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "I was getting 431 MS runtime, and was sad because I worked hard on making my algorithm efficient. I looked at my code to try to figure out what I was doing inefficiently. The only thing I could see was I was building the serialized string using concatenation. I knew that StringBuilder was more efficient but I didn\\'t think it was a big deal. Well I re-wrote it to use a StringBuilder.... and it ran at 83 ms, beats 99.16%. Moral of the story... Build strings with StringBuilder. "
                    },
                    {
                        "username": "psionl0",
                        "content": "This has been a very interesting exercise for me."
                    },
                    {
                        "username": "trashw1n",
                        "content": "Initially it can be confusing as to how a preorder traversal can uniquely identify a binary tree. Turns out that it can do so ONLY if we include null nodes in the preorder traversal serialization."
                    }
                ]
            },
            {
                "id": 1573417,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1572898,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1574902,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 2057366,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1998412,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1919751,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1898545,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1872679,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1841126,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1833585,
                "content": [
                    {
                        "username": "Denace",
                        "content": "I am not clear on what it means to pass `state` to any of our functions. \\n\\nIn the official solution, we have a helper function like this: `def rserialize(root, string)`\\n\\nDoesn\\'t this count as passing state? Because, we are passing a string in each function call and this string  contains the updated state of the serialized tree.\\n\\nCould you please explain what it means to pass/not pass state with the help of a few examples? \\n\\nThanks!\\n\\n"
                    },
                    {
                        "username": "edaengineer",
                        "content": "All solutions here seem to serialize using pre or post order traversal. **Is it possible to use only inorder traversal to do so??**"
                    },
                    {
                        "username": "sakura97",
                        "content": "Only inorder traversal cannot serialize trees"
                    },
                    {
                        "username": "Louis1992",
                        "content": "Leetcode\\u4E0A\\u6709\\u597D\\u51E0\\u4E2A\\u5173\\u4E8E\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u7684\\u95EE\\u9898\\uFF0C\\u5206\\u522B\\u662F297/428/449. \\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5404\\u6709\\u8054\\u7CFB\\u3002\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u662F\\u4E00\\u4E2A\\u8001\\u751F\\u5E38\\u8C08\\u7684\\u95EE\\u9898\\uFF0C\\u4F46\\u662F\\u53C8\\u662F\\u4E00\\u4E2A\\u5F88\\u91CD\\u8981\\u7684\\u4E3B\\u9898\\u3002\\u6211\\u5728\\u4EE5\\u524D\\u9762\\u82F9\\u679C\\u7684\\u65F6\\u5019\\u5C31\\u88AB\\u95EE\\u5230\\uFF1A\\u5982\\u679C\\u5E8F\\u5217\\u5316\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\uFF0C\\u6BCF\\u4E2A\\u8282\\u70B9\\u7684data\\u662F\\'a\\'-\\'z\\'\\u6216\\u8005\\'A\\'-\\'Z\\'\\u3002\\u5F53\\u65F6\\u6211\\u7684\\u662F\\u5728\\u9762\\u8BD5\\u5B98\\u7684\\u63D0\\u793A\\u4E0B\\u624D\\u60F3\\u51FA\\u4ED6\\u60F3\\u8981\\u6211\\u5B9E\\u73B0\\u7684\\u65B9\\u6CD5\\u3002\\u6240\\u4EE5\\u501F\\u8FD9\\u4E2A\\u673A\\u4F1A\\u5206\\u4EAB\\u7ED9\\u5927\\u5BB6\\u3002\\n\\nThere are some tree serialization problems in Leetcode. They are Leetcode 297/428/449. Tree serialization and deserialization is a very common problem. There was an Apple interview question: How to serialize a binary tree if each node is a character \\'a\\'-\\'z\\' or \\'A\\'-\\'Z\\'. I gave the optimal solution after some hints. So I share it here.\\n\\n\\u4E2D\\u6587\\u89E3\\u7B54: https://youtu.be/8_JSg4RWvhY\\n\\nEnglish Solution: https://youtu.be/iZHDx-k2Mxw\\n"
                    },
                    {
                        "username": "chandandanjo",
                        "content": "I AM NOOB\\n\\n    def serialize(self, root):\\n        return str(root)\\n\\n    def rec(self,data):\\n        if data == \\'None\\':\\n            return None\\n        return TreeNode(val=data[\\'val\\'], left=self.rec(data[\\'left\\']), right=self.rec(data[\\'right\\']))\\n        \\n    def deserialize(self, data):\\n        parsedData = data.replace(\\'TreeNode\\', \\'\\').replace(\\'val\\',\\'\"val\"\\').replace(\\'left\\',\\'\"left\"\\').replace(\\'right\\',\\'\"right\"\\').replace(\\'None\\', \\'\"None\"\\')\\n        parsedData = json.loads(parsedData)\\n        tree = self.rec(parsedData)\\n        return tree"
                    },
                    {
                        "username": "kuwiraW",
                        "content": " `#define MAX 10000\\nstruct Queue{\\n    struct TreeNode* q[MAX];\\n    int front;\\n    int rear;\\n    char* str;\\n};\\nvoid addQueue(struct Queue* Q, struct TreeNode* node){\\n    Q->q[Q->rear] = node;\\n    Q->rear = Q->rear + 1;\\n    return;\\n}\\nstruct TreeNode* removeQueue(struct Queue* Q){\\n    struct TreeNode* temp = Q->q[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n    \\n}\\nchar removeStr(struct Queue* Q){\\n    if(Q->front>=Q->rear) return \\'\\\\0\\';\\n    char temp = Q->str[Q->front];\\n    Q->front = Q->front + 1;\\n    return temp;\\n}\\nbool isEmpty(struct Queue* Q){\\n    if(Q->front >= Q->rear) return true;\\n    return false;\\n}\\nint qSize(struct Queue* Q){\\n    return Q->rear - Q->front;\\n}\\nvoid LOT(struct TreeNode* root,char* s){\\n    struct Queue Q1;\\n    Q1.front = 0;\\n    Q1.rear = 0;\\n    int index = 0;\\n    addQueue(&Q1,root);\\n    while(!isEmpty(&Q1)){\\n        int size = qSize(&Q1);\\n        for (int i = 0; i < size; i++)\\n        {\\n            root = removeQueue(&Q1);\\n            if(root->left!=NULL)addQueue(&Q1,root->left);\\n            if(root->right!=NULL)addQueue(&Q1,root->right);\\n            s[index]=root->val + \\'0\\';\\n            index++;\\n        }\\n        \\n    }\\n    s[index]=\\'\\\\0\\';\\n\\n}\\nstruct TreeNode* helper(struct Queue* Q){\\n    char temp = removeStr(Q);\\n    if(temp == \\'\\\\0\\') return NULL;\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    printf(\"\\\\nChar : %c\",temp);\\n    new->val = temp - \\'0\\';\\n    new->left = helper(Q);\\n    new->right = helper(Q);\\n    return new;\\n    return NULL;\\n}\\nchar* serialize(struct TreeNode* root) {\\n    if(!root) return NULL;\\n    char* s = (char*)malloc(sizeof(char)*MAX);\\n    LOT(root,s);\\n    return s;\\n}\\nstruct TreeNode* deserialize(char* data) {\\n    struct TreeNode* root;\\n    if(data == NULL) return NULL;\\n    struct Queue* Q = (struct Queue*)malloc(sizeof(struct Queue));\\n    Q->front = 0;\\n    Q->rear = 0;\\n    Q->str = (char*)malloc(sizeof(char)*MAX);\\n    int i;\\n    int len = strlen(data);\\n    for(i = 0; i < len; i++){\\n        Q->str[i] = data[i];\\n    }\\n    Q->rear = i;\\n    root = helper(Q);\\n    return root;\\n}`\\nInput : [1,2,3,4,5,6,7]\\nOutput : [1,2,null,3,null,4,null,5,null,6,null,7]\\nExpected : [1,2,3,4,5,6,7]\\nI cant figure it why my output is wrong with expected???"
                    },
                    {
                        "username": "Nirupam_iitd",
                        "content": "void mainf(TreeNode* root, string& str)\\n    {\\n        if(root==nullptr)\\n        {\\n            if(str.size()==0)\\n            {\\n            str=str+\"null\";\\n            }\\n        else\\n            {\\n            str=str+\",\"+\"null\";\\n            }\\n            return;\\n        }\\n        if(str.size()==0)\\n        {\\n            str=str+to_string(root->val);\\n        }\\n        else\\n        {\\n            str=str+\",\"+to_string(root->val);\\n        }\\n        mainf(root->left, str);\\n        mainf(root->right, str);\\n        return;\\n    }\\n    string serialize(TreeNode* root) \\n    {\\n        string str; \\n        mainf(root, str); \\n        cout<<str<<endl;\\n        return str;      \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* mainf1(string &data, int &i)\\n    {\\n        if( i ==0 and data[i]==\\'n\\' || i>= data.size())\\n        {\\n            return nullptr;\\n        }\\n        if(data[i]==\\'n\\')\\n        {\\n            i=i+5;\\n            return nullptr;\\n        }\\n        int num=0;;\\n        if(data[i]==\\'-\\')\\n        {\\n            i=i+1;\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n            // num= data[i]-\\'0\\';\\n            num=-num;\\n        }\\n        else\\n        {\\n            while(i< data.size() and data[i]!=\\',\\')\\n            {\\n                num= num *10 + data[i]-\\'0\\';\\n                i++;\\n            }\\n        }\\n        TreeNode * root= new TreeNode (num);\\n        i=i+1;\\n        root->left= mainf1(data, i);\\n        root->right= mainf1(data, i);\\n        return root;\\n    }\\n    TreeNode* deserialize(string data) \\n    {\\n        int i=0;\\n        return mainf1(data, i);\\n    }  \\nGetting memory limit exceeded for the second last test case, How to resolve this problem?"
                    },
                    {
                        "username": "mayursonowal7",
                        "content": "Use preorder and inorder no?\\nlike \"{preorder_list},{inorder_list}\" and then build the tree from these two lists? seems intuitive for me since I already did problem 105 lol"
                    },
                    {
                        "username": "lumos_01",
                        "content": "It won\\'t work because in this question we can have duplicate values unlike problem 105."
                    },
                    {
                        "username": "kratos462",
                        "content": "Why this question marked as hard?"
                    },
                    {
                        "username": "psionl0",
                        "content": "It\\'s straightforward if you do a pre-order traversal but more challenging if you want to get the same serialization that leet does."
                    },
                    {
                        "username": "ajbil3112",
                        "content": "to understand how stringstream and getline are working in level order traversal code refer this -> In the provided code, stringstream is used to convert a string of comma-separated values into a binary tree data structure. The getline function is then used to extract individual values from the string.\\n\\nA stringstream is a stream class in C++ that operates on strings. It allows you to read values from a string just like you would from standard input or a file stream. You can think of it as an in-memory stream.\\n\\nThe getline function is a method of the stringstream class that is used to read a line of text from the stream. In this case, the delimiter used is a comma. The getline function extracts characters from the input sequence until it reaches the delimiter or the end of the stream.\\n\\nNow, let\\'s take a closer look at how the serialize and deserialize functions work using stringstream and getline.\\n\\nserialize function:\\n\\nThe function takes a TreeNode pointer as input and returns a string that represents the binary tree.\\nIf the root node is NULL, an empty string is returned.\\nA queue is created to traverse the tree level-by-level.\\nThe root node is pushed to the queue and then the while loop starts. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. If curr is NULL, # is appended to the string and the loop continues.\\nc. If curr is not NULL, the value of the current node is appended to the string using to_string(curr->val) and a comma, ,.\\nd. If curr is not NULL, its left and right children are pushed into the queue.\\nOnce the queue is empty, the final string is returned.\\ndeserialize function:\\n\\nThe function takes a string as input and returns the root node of the binary tree.\\nIf the input string is empty, NULL is returned.\\nA stringstream object is created with the input string.\\nThe first value in the string is extracted using getline and stored in str.\\nA queue is created to build the tree level-by-level.\\nA new node is created using the first value extracted from the string and set as the root of the tree.\\nThe root node is pushed to the queue.\\nThe while loop starts to build the tree level-by-level. In each iteration of the loop:\\na. The front node of the queue is extracted and stored in curr.\\nb. The next value in the string is extracted using getline and stored in str. If the value is #, the left child of the curr node is set to NULL.\\nc. If the value is not #, a new node is created using the extracted value and set as the left child of the curr node. The new node is then pushed to the queue.\\nd. The next value in the string is extracted using getline and stored in str. If the value is #, the right child of the curr node is set to NULL.\\ne. If the value is not #, a new node is created using the extracted value and set as the right child of the curr node. The new node is then pushed to the queue.\\nOnce the queue is empty, the root node of the binary tree is returned.\\nIn summary, the stringstream and getline functions are used to convert a binary tree to a string and back again. The stringstream is used to convert the string into an in-memory stream, which can then"
                    },
                    {
                        "username": "sans_sehgal",
                        "content": "Line 25: Char 37: runtime error: member access within misaligned address 0xbebebebebebebebe for type \\'TreeNode\\', which requires 8 byte alignment (__TreeNodeUtils__.cpp)\\n0xbebebebebebebebe: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior __TreeNodeUtils__.cpp:30:37\\n\\nGetting this error, does anyone know what it means? "
                    },
                    {
                        "username": "psionl0",
                        "content": "In C this often means that a pointer or variable is being used that hasn\\'t been initialized properly."
                    }
                ]
            },
            {
                "id": 1831919,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1808272,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1805427,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1793260,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1765296,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1746744,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1722819,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1715196,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1682789,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            },
            {
                "id": 1575668,
                "content": [
                    {
                        "username": "easy_problems_hunter",
                        "content": "When you pass an empty data_list to rdeserialize, why wouldn\\'t you get index out of range error with this line:  \"if l[0] == \\'None\\':\"  ?\\n"
                    },
                    {
                        "username": "bhaskar253",
                        "content": "There is an issue with the way of testing, I am able to solve this problem with below code which shouldn\\'t be accepted.\\n ```\\npublic class Codec {\\n    private static TreeNode back;\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        back = null;\\n        List<Integer> in = new ArrayList<>();\\n        inorder(root, in);\\n        back = root;\\n        return in.toString();\\n    }\\n\\n    private void inorder(TreeNode root, List<Integer> list) {\\n        if (root == null) return;\\n        inorder(root.left, list);\\n        list.add(root.val);\\n        inorder(root.right, list);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        return back;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "trip1312",
                        "content": "Thats because there is basically no testing for this problem. \\n\\n```\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\\n``` \\nYou can literally just return what is passed into both functions and it will pass. "
                    },
                    {
                        "username": "airick_73",
                        "content": "I was planning on reconstructing the tree from a preorder traversal list and inorder traversal list but then I failed at testcase: [1,2,3,null,null,4,5,6,7] . According to how leet code makes trees this would be represented as   \n------1      \n---- /--\\    \n----2---3  \n--------/ \\ \n-------4--5\n------/-\\   \n-----6--7   \npreorder[1,2,3,4,5,6,7]\ninorder[2,1,6,4,7,3,5] \nBut when I tried running these two lists through https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discussion/ it said that those two lists do not represent a valid binary tree? I believe I have constructed the tree correctly and the traversals are also correct. Would anyone be able to tell me where I have made an error? I appreciate any insight. "
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@airick_73](/airick_73) \\ndid the preorder - inorder solution work with you ?\\nbecause it says in the discreption :\\n        \"\"\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \"\"\"\\ndo I have to return str( preorder_list, inorder_list ) or just return preorder_list, inorder_list\\nwithout converting them to a string?"
                    },
                    {
                        "username": "airick_73",
                        "content": "Okay I\\'ve realized my error. I was using BFS as a means to create a preorder traversal but using BFS would produce a level order traversal. To produce preorder and inorder are both variants of DFS: https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"
                    },
                    {
                        "username": "Rishabh_ku2022",
                        "content": "[1,2,3,null,null,4,5,6,7] ..I am unable to visualize binary tree of this test case can any one help? "
                    },
                    {
                        "username": "psionl0",
                        "content": "```\n     1\n   /   \\\n 2      3\n      /  \\\n    4     5\n  /   \\\n6      7\n```"
                    },
                    {
                        "username": "tongdosa",
                        "content": "I guess it will be like this:\\n1,2,3\\n2,null,null\\n3,4,5\\n4,6,7"
                    },
                    {
                        "username": "airick_73",
                        "content": "Check this out: https://github.com/gaastonsr/treevis it is a tool to help visualize trees I think you will find it is just what you need!"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "Can anyone please help me why this O(n) solution is giving me TLE. I\\'m stuck in this question for hours. I will be grateful to you.. \\n\\nMy solution is basically using level order traversal for serializing as well as deserializing a tree?\\nI don\\'t understand why this is giving me TLE?\\n```\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root) return s;\\n        queue<TreeNode*> que;\\n        que.push(root);\\n        while(!que.empty()){\\n            TreeNode* temp = que.front(); que.pop();\\n            if(!temp) s = s + \"N \";\\n            else{\\n                s = s + to_string(temp->val) + \" \";\\n                que.push(temp->left);\\n                que.push(temp->right);\\n            }\\n        }\\n        int n = s.length();\\n        while(s[--n] == \\' \\' || s[--n] == \\'N\\') s.pop_back();\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data == \"\") return 0;\\n        queue<TreeNode* > que;\\n        istringstream ss(data);\\n        string word;\\n        ss >> word;\\n        TreeNode * root = new TreeNode(stoi(word));\\n        que.push(root);\\n        int i = 0, n = 0;\\n        while(ss >> word){\\n            n++; \\n            TreeNode *temp = que.front(), *aux;\\n            if(word == \"N\") aux = 0;\\n            else{ aux = new TreeNode(stoi(word));\\n                que.push(aux);\\n            }\\n            if(n % 2 == 1) temp->left = aux;\\n            else{\\n                temp->right = aux;\\n                que.pop();\\n            }    \\n        }\\n        return root;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "vrn11",
                        "content": "Since most people here have solution with preorder traversal.\\nHere is my solution with level order traversal:\\n\\n `public class Codec {\\n\\n    private const string NullStr = \"null\";\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        if (root == null)\\n            {\\n                return string.Empty;\\n            }\\n\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n            List<string> serializedNodes = new List<string>();\\n            queue.Enqueue(root);\\n\\n            while (queue.Count() > 0)\\n            {\\n                TreeNode node = queue.Dequeue();\\n                string nodeValue = NullStr;\\n\\n                if (node != null)\\n                {\\n                    nodeValue = node.val.ToString();\\n                    queue.Enqueue(node.left);\\n                    queue.Enqueue(node.right);\\n                }\\n\\n                serializedNodes.Add(nodeValue);\\n            }\\n\\n            return String.Join(\",\", serializedNodes);\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string serializedTree) {\\n        if(string.IsNullOrEmpty(serializedTree))\\n                return null;\\n\\n            // split\\n            string[] serializedNodes = serializedTree.Split(\\',\\');\\n\\n            //iterate over the serialized nodes.\\n            int indexInSerializedNodesArray = 0;\\n            Queue<TreeNode> queue = new Queue<TreeNode>();\\n\\n            TreeNode root = new TreeNode() { left = null, right = null, val = int.Parse(serializedNodes[indexInSerializedNodesArray++]) };\\n            queue.Enqueue(root);\\n\\n            int nodesAtLevel = 1;\\n\\n            while (indexInSerializedNodesArray < serializedNodes.Length)\\n            {\\n                int nodesAtNextLevel = 0;\\n                for (int i = 0; i < nodesAtLevel; i++)\\n                {\\n                    TreeNode node = queue.Dequeue();\\n                    TreeNode left = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n                    TreeNode right = GetNodeFromSerializedNodesArray(serializedNodes, indexInSerializedNodesArray++);\\n\\n                    nodesAtNextLevel += AddChildren(node, left, right, queue);\\n                }\\n\\n                nodesAtLevel = nodesAtNextLevel;\\n            }\\n\\n            return root;\\n    }\\n\\n\\n        private int AddChildren(TreeNode node, TreeNode left, TreeNode right,Queue<TreeNode> queue)\\n        {\\n            int numberOfChildrenAdded = 0;\\n            if(left != null)\\n            {\\n                queue.Enqueue(left);\\n                node.left = left;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            if(right != null)\\n            {\\n                queue.Enqueue(right);\\n                node.right = right;\\n                numberOfChildrenAdded++;\\n            }\\n\\n            return numberOfChildrenAdded;\\n        }\\n\\n        private TreeNode GetNodeFromSerializedNodesArray(string [] serializedNodes, int index)\\n        {\\n            TreeNode node = null;\\n\\n            if(index < serializedNodes.Length && serializedNodes[index] != NullStr)\\n            {\\n                node = new TreeNode() { val = int.Parse(serializedNodes[index]) };\\n            }\\n\\n            return node;\\n        }\\n}`"
                    },
                    {
                        "username": "freakin_rkb",
                        "content": "terminate called after throwing an instance of \\'std::invalid_argument\\'\\n  what():  stoi\\n\\n\\nhere is my code:\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        string s = \"\";\\n        if(!root){\\n            return \"\";\\n        }\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* curr = q.front();\\n            q.pop();\\n            if(curr == NULL){\\n                s.append(\"#, \");\\n            }\\n            else{\\n                s.append(to_string(curr -> val)+\\',\\');\\n            }\\n            if(curr != NULL){\\n                q.push(curr -> left);\\n                q.push(curr -> right);\\n            }\\n        }\\n        return s;\\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        if(data.size() == 0){\\n             return NULL;\\n        }\\n        stringstream s(data);\\n        string str;\\n        getline(s, str, \\',\\');\\n        TreeNode* root = new TreeNode(stoi(str));\\n        queue<TreeNode*>q;\\n        q.push(root);\\n        while(!q.empty()){\\n            TreeNode* node = q.front();\\n            q.pop();\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> left = NULL;\\n        }\\n        else{\\n            TreeNode* lefts = new TreeNode(stoi(str));\\n            node -> left = lefts;\\n            q.push(lefts);\\n        }\\n        getline(s, str, \\',\\');\\n        if(str == \"#\"){\\n            node -> right = NULL;\\n        }\\n        else{\\n        TreeNode* rights = new TreeNode(stoi(str));\\n            node -> right = rights;\\n            q.push(rights);\\n        }\\n        }\\n        return root;\\n    }\\n};"
                    },
                    {
                        "username": "wooden_marsupial",
                        "content": "Why does Leetcode example misses leaf node for 4 and 5?\n\nTheir encoded string is the following:\n` [1,2,3,null,null,4,5]`\n\nwhile I think the correct one should be:\n` [1,2,3,null,null,4,null,null,5,null,null]`\n\nIs it even possible to solve the problem encoding the tree as in their string?"
                    },
                    {
                        "username": "cagils",
                        "content": "Leetcode only puts null in the inbetween elements, in other words only for the levels less than the highest level, since more nulls at the end is not necessary"
                    },
                    {
                        "username": "siva_17",
                        "content": "<b>Confused on the usecase , need help :</b>\\nHow is this valid usecase ?\\n[1,2]\\n\\n1 as root , 2 as left child / right child then there should be one null right ?\\nso it should be [1,null,2] or [1,2,null] ?\\nOr Im missing something ?\\nThanks in advance !"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "The last children of a certain depth are often omitted, so it is [1,2,null] , but the null is not shown."
                    },
                    {
                        "username": "sherlockieee",
                        "content": "There are a bunch of Medium questions that took me more than than this."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "me too, my code gets accepted for this one, but gets TLE on 449. Serialize and Deserialize BST. I would say that one is harder than this one, but maybe I am just missing something. "
                    }
                ]
            }
        ]
    },
    {
        "title": "Integer Replacement",
        "question_content": "<p>Given a positive integer <code>n</code>,&nbsp;you can apply one of the following&nbsp;operations:</p>\n\n<ol>\n\t<li>If <code>n</code> is even, replace <code>n</code> with <code>n / 2</code>.</li>\n\t<li>If <code>n</code> is odd, replace <code>n</code> with either <code>n + 1</code> or <code>n - 1</code>.</li>\n</ol>\n\n<p>Return <em>the minimum number of operations needed for</em> <code>n</code> <em>to become</em> <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 87920,
                "title": "a-couple-of-java-solutions-with-explanations",
                "content": "I really think it should be tagged medium because there are many subtleties and good understanding of binary arithmetic is required.\\n\\nThe first step towards solution is to realize that you're allowed to remove the LSB only if it's zero. And to reach the target as fast as possible, removing digits is the best way to go. Hence, even numbers are better than odd. This is quite obvious.\\n\\nWhat is not so obvious is what to do with odd numbers. One may think that you just need to remove as many 1's as possible to increase the evenness of the number. Wrong! Look at this example:\\n\\n    111011 -> 111010 -> 11101 -> 11100 -> 1110 -> 111 -> 1000 -> 100 -> 10 -> 1\\n\\nAnd yet, this is not the best way because\\n\\n    111011 -> 111100 -> 11110 -> 1111 -> 10000 -> 1000 -> 100 -> 10 -> 1\\n\\nSee? Both ```111011 -> 111010``` and ```111011 -> 111100``` remove the same number of 1's, but the second way is better.\\n\\nSo, we just need to remove as many 1's as possible, doing +1 in case of a tie? Not quite. The infamous test with n=3 fails for that strategy because ```11 -> 10 -> 1``` is better than ```11 -> 100 -> 10 -> 1```. Fortunately, that's the only exception (or at least I can't think of any other, and there are none in the tests).\\n\\nSo the logic is:\\n\\n1. If ```n``` is even, halve it.\\n2. If ```n=3``` or ```n-1``` has less 1's than ```n+1```, decrement ```n```.\\n3. Otherwise, increment ```n```.\\n\\nHere is an example of such a solution in Java:\\n\\n    public int integerReplacement(int n) {\\n        int c = 0;\\n        while (n != 1) {\\n            if ((n & 1) == 0) {\\n                n >>>= 1;\\n            } else if (n == 3 || Integer.bitCount(n + 1) > Integer.bitCount(n - 1)) {\\n                --n;\\n            } else {\\n                ++n;\\n            }\\n            ++c;\\n        }\\n        return c;\\n    }\\n\\nOf course, doing ```bitCount``` on every iteration is not the best way. It is enough to examine the last two digits to figure out whether incrementing or decrementing will give more 1's. Indeed, if a number ends with 01, then certainly decrementing is the way to go. Otherwise, if it ends with 11, then certainly incrementing is at least as good as decrementing (```*011 -> *010 / *100```) or even better (if there are three or more 1's). This leads to the following solution:\\n\\n    public int integerReplacement(int n) {\\n        int c = 0;\\n        while (n != 1) {\\n            if ((n & 1) == 0) {\\n                n >>>= 1;\\n            } else if (n == 3 || ((n >>> 1) & 1) == 0) {\\n                --n;\\n            } else {\\n                ++n;\\n            }\\n            ++c;\\n        }\\n        return c;\\n    }\\n\\nAn alternative approach to intuitive algorithm was very well put by @dettier in a [discussion](https://discuss.leetcode.com/topic/58330/is-this-greedy-solution-correct/6): you should create as many trailing zeroes as you can. This way you can avoid the tie-breaking trap (there can be no ties), but you'll still have to handle the n=3 exception separately.",
                "solutionTags": [],
                "code": "```111011 -> 111010```\n```111011 -> 111100```\n```11 -> 10 -> 1```\n```11 -> 100 -> 10 -> 1```\n```n```\n```n=3```\n```n-1```\n```n+1```\n```n```\n```n```\n```bitCount```\n```*011 -> *010 / *100```",
                "codeTag": "Unknown"
            },
            {
                "id": 87928,
                "title": "java-12-line-4-5-ms-iterative-solution-with-explanations-no-other-data-structures",
                "content": "When n is even, the operation is fixed. The procedure is unknown when it is odd. When n is odd it can be written into the form n = 2k+1 (k is a non-negative integer.). That is, n+1 = 2k+2 and n-1 = 2k. Then, (n+1)/2 = k+1 and (n-1)/2 = k. So one of (n+1)/2 and (n-1)/2 is even, the other is odd. And the \"best\" case of this problem is to divide as much as possible. Because of that, always pick n+1 or n-1 based on if it can be divided by 4. The only special case of that is when n=3 you would like to pick n-1 rather than n+1.   \\n   \\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) return 32; //n = 2^31-1;\\n        int count = 0;\\n        while (n > 1){\\n            if (n % 2 == 0) n  /= 2;\\n            else{\\n                if ( (n + 1) % 4 == 0 && (n - 1 != 2) ) n++;\\n                else n--;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }",
                "solutionTags": [],
                "code": "When n is even, the operation is fixed. The procedure is unknown when it is odd. When n is odd it can be written into the form n = 2k+1 (k is a non-negative integer.). That is, n+1 = 2k+2 and n-1 = 2k. Then, (n+1)/2 = k+1 and (n-1)/2 = k. So one of (n+1)/2 and (n-1)/2 is even, the other is odd. And the \"best\" case of this problem is to divide as much as possible. Because of that, always pick n+1 or n-1 based on if it can be divided by 4. The only special case of that is when n=3 you would like to pick n-1 rather than n+1.   \\n   \\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) return 32; //n = 2^31-1;\\n        int count = 0;\\n        while (n > 1){\\n            if (n % 2 == 0) n  /= 2;\\n            else{\\n                if ( (n + 1) % 4 == 0 && (n - 1 != 2) ) n++;\\n                else n--;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 87948,
                "title": "python-o-log-n-time-o-1-space-with-explanation-and-proof",
                "content": "Denote f(n) the minimum number of jumps from n to 1.\\nBy definition, we have the recurrence\\nf(1) = 0, f(2n) = 1 + f(n), f(2n + 1) = min(f(2n) + 1, f(2n + 2) + 1).\\nFirst notice that this sequence is well defined because f(2n + 2) = f(n + 1) + 1, so f(2n + 1) = min(f(2n) + 1, f(n + 1) + 2). Every element is defined by some element before it.\\nWe want to show (*):\\nIf n % 4 = 3 and n != 3, then f(n) = f(n + 1) + 1.\\nIf n % 4 = 1 or n = 3, then f(n) = f(n - 1) + 1.\\nThis gives us an O(log n) time, O(1) space solution.\\n\\n```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        rtn = 0\\n        while n > 1:\\n            rtn += 1\\n            if n % 2 == 0:\\n                n //= 2\\n            elif n % 4 == 1 or n == 3:\\n                n -= 1\\n            else:\\n                n += 1\\n        return rtn\\n```\\nIn this code, n will drop to at most n / 2 in at most 2 iterations, so the number of iterations is at most 2 * log(n). In each iteration, the time complexity is constant. So the overall time complexity is O(log n). The space complexity is obviously 1. Correctness is guaranteed by (*).\\n\\n\\nLemma 1. f(k+1) <= f(k) + 1\\nProve by induction:\\nf(2) = 1 <= 0 + 1 = f(1) + 1\\nAssume this hold for any 1 <= k' < k,\\nIf k is even, f(k + 1) = min(f(k) + 1, f(k + 2) + 1) <= f(k) + 1;\\nIf k is odd, denote k = 2l + 1 (l >= 1), then f(k + 1) = f(2l + 2) = 1 + f(l + 1) <= 1 + 1 + f(l) = 1 + f(2l) = 1 + f(k - 1). Also, f(k + 1) = 1 + f(l + 1) = f(2l + 2) = f(k + 1) <= f(k + 1) + 1. Hence, f(k + 1) <= min(f(k - 1) + 1, f(k + 1) + 1) = f(k) <= f(k) + 1.\\n\\nLemma 2. f(k) <= 1 + f(k + 1), k >= 1\\nProve by induction:\\nf(1) = 0 <= 1 + f(2)\\nAssume this hold for any 1 <= k' < k,\\nIf k is odd, f(k) = min(1 + f(k - 1), 1 + f(k + 1)) <= 1 + f(k + 1)\\nIf k is even, denote k = 2l (l >= 1), then f(k) = f(2l) = 1 + f(l)\\n1 + f(l) <= 3 + f(l) = 2 + f(2l) = 1 + (1 + f(2l))\\n1 + f(l) <= 1 + 1 + f(l + 1) <= 3 + f(l + 1) = 2 + f(2l + 2) = 1 + (1 + f(2l + 2))\\n=> f(k) = 1 + f(l) <= 1 + min(1 + f(2l), 1 + f(2l + 2)) = 1 + f(2l + 1) = 1 + f(k + 1).\\n\\nProof of (*):\\n1) If n % 4 = 3 and n != 3, denote n = 4k + 3 where k >= 1.\\nf(n - 1) = f(4k + 2) = 1 + f(2k + 1) = 1 + min(f(2k) + 1, f(2k + 2) + 1) = min(f(2k) + 2, f(2k + 2) + 2)\\nf(2k) + 2 = f(k) + 3 >= f(k + 1) + 2 = 1 + f(2k + 2)\\nand f(2k + 2) + 2 > f(2k + 2) + 1, so f(n - 1) >= 1 + f(2k + 2) = f(4k + 4) = f(n + 1) => f(n) = min(f(n - 1) + 1, f(n + 1) + 1) = f(n + 1) + 1.\\n\\n2) If n = 3, it's obvious that f(3) = min(f(2) + 1, f(2) + 2) = f(2) + 1.\\n3) If n % 4 = 1 and n > 1, denote n = 4k + 1 where k >= 1.\\nf(n - 1) = f(4k) = 1 + f(2k)\\n1 + f(2k) < 2 + f(2k)\\n1 + f(2k) = 2 + f(k) <= 3 + f(k + 1) = 2 + f(2k + 2)\\n=> f(n - 1) = 1 + f(2k) <= min(2 + f(2k), 2 + f(2k + 2)) = 1 + min(f(2k) + 1, f(2k + 2) + 1) = 1 + f(2k + 1) = f(4k + 2) = f(n + 1)\\n=> f(n) = min(f(n - 1) + 1, f(n + 1) + 1) = f(n - 1) + 1.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        rtn = 0\\n        while n > 1:\\n            rtn += 1\\n            if n % 2 == 0:\\n                n //= 2\\n            elif n % 4 == 1 or n == 3:\\n                n -= 1\\n            else:\\n                n += 1\\n        return rtn\\n```",
                "codeTag": "Java"
            },
            {
                "id": 88016,
                "title": "c-0ms-11-lines-dp-solution",
                "content": "To me this is a very typical DP problem, so my initial approach was an O(n) DP solution as below, but it failed with LTE:\\n```\\nint integerReplacement(int n) {\\n        int dp[n + 1]; memset(dp, 0, sizeof(dp));\\n        for (int i = 2; i <= n; i++) {\\n            dp[i] = 1 + (i & 1 == 0 ? dp[i / 2] : min(dp[i - 1], 1 + dp[i / 2 + 1]));\\n        }\\n        return dp[n];\\n}\\n```\\nFortunately DP can always be done in a recursion way (with a hash table), and this gives me a chance to decrease the run time to somewhere between O(logn) and O(n):\\n```\\nclass Solution {\\nprivate:\\n    unordered_map<int, int> visited;\\n\\npublic:\\n    int integerReplacement(int n) {        \\n        if (n == 1) { return 0; }\\n        if (visited.count(n) == 0) {\\n            if (n & 1 == 1) {\\n                visited[n] = 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\\n            } else {\\n                visited[n] = 1 + integerReplacement(n / 2);\\n            }\\n        }\\n        return visited[n];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nint integerReplacement(int n) {\\n        int dp[n + 1]; memset(dp, 0, sizeof(dp));\\n        for (int i = 2; i <= n; i++) {\\n            dp[i] = 1 + (i & 1 == 0 ? dp[i / 2] : min(dp[i - 1], 1 + dp[i / 2 + 1]));\\n        }\\n        return dp[n];\\n}\\n```\n```\\nclass Solution {\\nprivate:\\n    unordered_map<int, int> visited;\\n\\npublic:\\n    int integerReplacement(int n) {        \\n        if (n == 1) { return 0; }\\n        if (visited.count(n) == 0) {\\n            if (n & 1 == 1) {\\n                visited[n] = 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\\n            } else {\\n                visited[n] = 1 + integerReplacement(n / 2);\\n            }\\n        }\\n        return visited[n];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87942,
                "title": "0-ms-c-recursion-solution-with-explanation",
                "content": "All you need is determine replace `n` with `n + 1` or `n - 1`, when n is odd. since,\\n- if n is even, you get no choice, just replace it with `n / 2`.\\n- if n is odd, you can either `add 1` or `reduce 1`. \\n\\nIf `n + 1 % 4 == 0`, replace `n` with `n + 1` will short the path. Otherwise, replace `n` with `n - 1` is always the right direction.\\n\\n **Examle:**\\n```\\nInput:\\n31\\n\\n- 1. Replace 31 with 32:\\n31 -> 32 -> 16 -> 8 -> 4 -> 2 -> 1\\n\\n- 2. Replace 31 with 30:\\n31 -> 30 -> 15 -> 16 -> 8 -> 4 -> 2 -> 1\\n\\nOutput:\\n6\\n```\\n\\n **Code:**\\n```c++\\nclass Solution \\n{\\n    // date: 2016-09-11     location: Vista Del Lago III Apartments\\n    int res = 0;\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        if (n == 1)\\n            return res;\\n        if (n == 3)\\n        {\\n            res += 2;\\n            return res;\\n        }\\n        if (n == INT_MAX)\\n            return 32;\\n        if (n & 1)     // odd\\n        {\\n            res ++;\\n            if ((n + 1) % 4 == 0)\\n                integerReplacement(n + 1);\\n            else\\n                integerReplacement(n - 1);\\n        }\\n        else     // even\\n        {\\n            res ++;\\n            integerReplacement(n / 2);\\n        }\\n        return res;\\n    }\\n};\\n```\\n\\n\\nmake it shorter:\\n```c++\\nclass Solution \\n{\\n    // date: 2016-09-11     location: Vista Del Lago III Apartments\\n    int res = 0;\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        if (n == 1)\\n            return res;\\n        if (n == 3)\\n        {\\n            res += 2;\\n            return res;\\n        }\\n        if (n == INT_MAX)\\n            return 32;\\n        \\n        res ++;\\n        if (n & 1)\\n            if ((n + 1) % 4 == 0)\\n                integerReplacement(n + 1);\\n            else\\n                integerReplacement(n - 1);\\n        else\\n            integerReplacement(n / 2);\\n            \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nInput:\\n31\\n\\n- 1. Replace 31 with 32:\\n31 -> 32 -> 16 -> 8 -> 4 -> 2 -> 1\\n\\n- 2. Replace 31 with 30:\\n31 -> 30 -> 15 -> 16 -> 8 -> 4 -> 2 -> 1\\n\\nOutput:\\n6\\n```\n```c++\\nclass Solution \\n{\\n    // date: 2016-09-11     location: Vista Del Lago III Apartments\\n    int res = 0;\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        if (n == 1)\\n            return res;\\n        if (n == 3)\\n        {\\n            res += 2;\\n            return res;\\n        }\\n        if (n == INT_MAX)\\n            return 32;\\n        if (n & 1)     // odd\\n        {\\n            res ++;\\n            if ((n + 1) % 4 == 0)\\n                integerReplacement(n + 1);\\n            else\\n                integerReplacement(n - 1);\\n        }\\n        else     // even\\n        {\\n            res ++;\\n            integerReplacement(n / 2);\\n        }\\n        return res;\\n    }\\n};\\n```\n```c++\\nclass Solution \\n{\\n    // date: 2016-09-11     location: Vista Del Lago III Apartments\\n    int res = 0;\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        if (n == 1)\\n            return res;\\n        if (n == 3)\\n        {\\n            res += 2;\\n            return res;\\n        }\\n        if (n == INT_MAX)\\n            return 32;\\n        \\n        res ++;\\n        if (n & 1)\\n            if ((n + 1) % 4 == 0)\\n                integerReplacement(n + 1);\\n            else\\n                integerReplacement(n - 1);\\n        else\\n            integerReplacement(n / 2);\\n            \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 88057,
                "title": "python-top-down-approach-memoization-saves-hundreds-of-ms-345ms-36ms",
                "content": "First recursive solution without memo: 345ms \\n```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 1:\\n            return 0\\n        if n % 2:\\n            return 1 + min(self.integerReplacement(n+1), self.integerReplacement(n-1))\\n        else:\\n            return 1 + self.integerReplacement(n/2)\\n```\\n\\nWrite a helper function with memo: 36ms\\n```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        memo = {1:0}\\n        return self.recRep(n, memo)\\n        \\n    def recRep(self, n, memo):\\n        if n in memo:\\n            return memo[n]\\n        if n % 2:\\n            memo[n] = 1 + min(self.recRep(n+1, memo), self.recRep(n-1, memo))\\n            return memo[n]\\n        else:\\n            memo[n] = 1 + self.recRep(n/2, memo)\\n            return memo[n]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 1:\\n            return 0\\n        if n % 2:\\n            return 1 + min(self.integerReplacement(n+1), self.integerReplacement(n-1))\\n        else:\\n            return 1 + self.integerReplacement(n/2)\\n```\n```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        memo = {1:0}\\n        return self.recRep(n, memo)\\n        \\n    def recRep(self, n, memo):\\n        if n in memo:\\n            return memo[n]\\n        if n % 2:\\n            memo[n] = 1 + min(self.recRep(n+1, memo), self.recRep(n-1, memo))\\n            return memo[n]\\n        else:\\n            memo[n] = 1 + self.recRep(n/2, memo)\\n            return memo[n]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 625874,
                "title": "java-unique-recursion-solution",
                "content": "ok! lets do this!\\nfirst of all\\nwhat does the question ask!\\n**WE NEED TO GO FROM A NUMBER \"N\" TO 1 IN MINIMUM NUMBER OF STEPS!**\\nwe are allowed to \\n1> replace n by n/2 if n is even\\n2>replace n by n+1 or n-1 when n is odd\\n\\n# INTUITION -1(correct)\\nBY intuition what comes to mind is  we need to maximise the number of times we  reach an even number because then we are able to reduce the number by half of the original number\\n\\n# INTUITION -2 (incorrect)\\nwe need   to reach 1 hence its better if we reduce the number everytime rather than increasing it  when we get to odd number !\\n\\nintuition 1 is absolutely correct\\n\\nbut there is a problem with intuition 2 for numbers of the form\\na=2^i - 1 (for i>3)\\n\\nlet me explain:\\nif i=4\\nthen a =15\\n\\nwe have two choices:\\n\\n15->14->7->6->3->2->1 (7 steps)\\n\\n15-16->8>4>2->1 (6 steps)\\n\\nwow!\\nwhat a weird behaviour!!\\n\\nanyways this is the main ascpect of the question, that its not always beneficial to reduce the number by 1.\\n\\n\\n# Solution:\\n\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n    return replace((long)n);\\n    }\\n    \\n    int replace(long n)\\n    {\\n       int ans=0;\\n        if(n<=1)\\n        {\\n            return 0;\\n        }\\n        \\n        if(n%2==0)\\n        {\\n            ans=1+replace(n/2);\\n        }\\n        else\\n        {\\n            ans=1+Math.min(replace(n+1),replace(n-1));\\n        }\\n        return ans;\\n        \\n}\\n}\\n```\\n\\nexplanation:\\nso basically we are using recursion to find out whether it is beneficial to use n+1 or n-1 to make our decision!\\n\\n\\n\\nP.S\\nI SEE A LOT OF PEOPLE DOING VERY COMPLEX BIT MANIPULATIONS AND USING BIT COUNT LIBRARIES!\\nI PERSONALLY FEEL MY APPROACH IS MORE INTUITIVE AND EASY TO UNDERSTAND!\\n\\nHOPE IT HELPS:\\nPLEASE UPVOTE IF THIS POST HELPED YOU!",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n    return replace((long)n);\\n    }\\n    \\n    int replace(long n)\\n    {\\n       int ans=0;\\n        if(n<=1)\\n        {\\n            return 0;\\n        }\\n        \\n        if(n%2==0)\\n        {\\n            ans=1+replace(n/2);\\n        }\\n        else\\n        {\\n            ans=1+Math.min(replace(n+1),replace(n-1));\\n        }\\n        return ans;\\n        \\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 377253,
                "title": "easy-peasy-python-comments-bit-manipulation",
                "content": "\\tdef integerReplacement(self, n):\\n        # Basically, There are four cases in the trailing digits:\\n        # 00 01 10 11 which represents n % 4 == 0, 1, 2, 3\\n        # For any odd number, it has remaining of 1 or 3 after mod with 4. If it\\'s 1, decrease it, if it\\'s 3 increase it.\\n        # if last two digits are 011(3), then add, because 011+1 == 100, hence a bit is removed, so better?\\n        # but if it was 011111, then 011111+1 = 100000, more bits are removed?\\n        # hence, adding is always better than or equal to subtracting\\n        # if it is 01 then remove, 01-1 = 0.\\n        # n == 3 is a special case, when n == 3, decrementing by 1 gives less replacement, even 3%4 == 3\\n        # 3-1 = 2, 2//2 = 1, hence 2 replacement\\n        # but if I do 3+1 = 4, 4//2 = 2, 2//2 = 1, three operations\\n\\t\\t\\n\\t\\t\\n        cnt = 0\\n        while n != 1:\\n            if n % 2 == 0:\\n                n = n //2\\n            elif n % 4 == 1 or n == 3:\\n                n -= 1\\n            else:\\n                n += 1\\n            cnt += 1\\n        \\n        return cnt",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "\\tdef integerReplacement(self, n):\\n        # Basically, There are four cases in the trailing digits:\\n        # 00 01 10 11 which represents n % 4 == 0, 1, 2, 3\\n        # For any odd number, it has remaining of 1 or 3 after mod with 4. If it\\'s 1, decrease it, if it\\'s 3 increase it.\\n        # if last two digits are 011(3), then add, because 011+1 == 100, hence a bit is removed, so better?\\n        # but if it was 011111, then 011111+1 = 100000, more bits are removed?\\n        # hence, adding is always better than or equal to subtracting\\n        # if it is 01 then remove, 01-1 = 0.\\n        # n == 3 is a special case, when n == 3, decrementing by 1 gives less replacement, even 3%4 == 3\\n        # 3-1 = 2, 2//2 = 1, hence 2 replacement\\n        # but if I do 3+1 = 4, 4//2 = 2, 2//2 = 1, three operations\\n\\t\\t\\n\\t\\t\\n        cnt = 0\\n        while n != 1:\\n            if n % 2 == 0:\\n                n = n //2\\n            elif n % 4 == 1 or n == 3:\\n                n -= 1\\n            else:\\n                n += 1\\n            cnt += 1\\n        \\n        return cnt",
                "codeTag": "Python3"
            },
            {
                "id": 88013,
                "title": "my-java-solution-with-memorization-search-handling-overflow-test-case",
                "content": "Same idea with other recursive solutions, but two ticky points here.\\n1. With the helper of  hashmap, we don't need to search for one intermediate result multiple times\\n2. To hand the overflow for test case INT.MAX, use ``` 1 + (n - 1) / 2 ``` instead of ``` (n + 1) / 2```. The idea comes from solving some binary search questions. To avoid overflow, we use ``` int mid = start + (end - start) / 2 ``` instead of ``` int mid = (start + end) / 2```\\n\\n```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\\n        map.put(1, 0);\\n        map.put(2, 1);\\n\\n        return helper(n, map);\\n    }\\n    \\n    private int helper(int n, Map<Integer, Integer> map) {\\n        if (map.containsKey(n)) {\\n            return map.get(n);\\n        }\\n        \\n        int steps = -1;\\n        if (n % 2 == 0) {\\n            steps = helper(n / 2, map) + 1;\\n        } else {\\n            steps = Math.min(helper((n - 1), map) + 1, helper(1 + (n - 1) / 2, map) + 2);\\n        }\\n        \\n        map.put(n, steps);\\n        \\n        return steps;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "``` 1 + (n - 1) / 2 ```\n``` (n + 1) / 2```\n``` int mid = start + (end - start) / 2 ```\n``` int mid = (start + end) / 2```\n```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\\n        map.put(1, 0);\\n        map.put(2, 1);\\n\\n        return helper(n, map);\\n    }\\n    \\n    private int helper(int n, Map<Integer, Integer> map) {\\n        if (map.containsKey(n)) {\\n            return map.get(n);\\n        }\\n        \\n        int steps = -1;\\n        if (n % 2 == 0) {\\n            steps = helper(n / 2, map) + 1;\\n        } else {\\n            steps = Math.min(helper((n - 1), map) + 1, helper(1 + (n - 1) / 2, map) + 2);\\n        }\\n        \\n        map.put(n, steps);\\n        \\n        return steps;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87966,
                "title": "java-3ms-bit-manipulation-solution",
                "content": "For this problem, if we look at the binary form of each number, we can get the idea that for each '1' (except for the first '1') it counts to two steps, for each '0', it counts to one step.\\nSo our goal is to use +1 or -1 to reduce steps.\\n\\nFor example,\\n13 = 1101\\nIf we plus one, we can get 1110; if we reduce one, we can get 1100; \\n1110 needs 2+2+1 = 5 steps, while 1100 only needs 2+1+1 = 4 steps, so we choose n-1 in this step. \\n\\nUse long to avoid overflow (if n is Integer.MAX_VALUE).\\n```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        long N = n;\\n        long small,big;\\n        int cnt = 0;\\n        while( N != 1){\\n        \\tsmall = (N  & ( N -1));\\n        \\tbig = ( N & (N + 1));\\n        \\tif( (N & 1) == 0){\\n        \\t\\tN >>= 1;\\n        \\t}\\n        \\telse if ( (small & (small-1)) <= (big & (big-1))){\\n        \\t\\tN = N - 1;\\n        \\t}\\n        \\telse{\\n        \\t\\tN = N +1;\\n        \\t}\\n        \\tcnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        long N = n;\\n        long small,big;\\n        int cnt = 0;\\n        while( N != 1){\\n        \\tsmall = (N  & ( N -1));\\n        \\tbig = ( N & (N + 1));\\n        \\tif( (N & 1) == 0){\\n        \\t\\tN >>= 1;\\n        \\t}\\n        \\telse if ( (small & (small-1)) <= (big & (big-1))){\\n        \\t\\tN = N - 1;\\n        \\t}\\n        \\telse{\\n        \\t\\tN = N +1;\\n        \\t}\\n        \\tcnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 256422,
                "title": "simple-python-greedy-solution-beats-100",
                "content": "If its even: no choice, divide by 2\\nIf odd: either n + 1 or n - 1 must be a multiple of 4, ignoring trivial cases. take that path because it will always shrink faster (can redivide by 2 again). \\n\\nonly edge case is n == 3 where taking the 4th multiple path is slower.\\n\\n```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        moves = 0\\n        while n != 1:\\n            if n % 2 == 0:\\n                n = n/2\\n                moves += 1\\n                continue\\n            if n == 3:\\n                return moves + 2\\n            if (n + 1) % 4 == 0:      \\n                n = n + 1\\n            elif (n - 1) % 4 == 0:\\n                n = n - 1\\n            moves += 1\\n        return moves\\n\\t",
                "solutionTags": [],
                "code": "If its even: no choice, divide by 2\\nIf odd: either n + 1 or n - 1 must be a multiple of 4, ignoring trivial cases. take that path because it will always shrink faster (can redivide by 2 again). \\n\\nonly edge case is n == 3 where taking the 4th multiple path is slower.\\n\\n```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        moves = 0\\n        while n != 1:\\n            if n % 2 == 0:\\n                n = n/2\\n                moves += 1\\n                continue\\n            if n == 3:\\n                return moves + 2\\n            if (n + 1) % 4 == 0:      \\n                n = n + 1\\n            elif (n - 1) % 4 == 0:\\n                n = n - 1\\n            moves += 1\\n        return moves\\n\\t",
                "codeTag": "Java"
            },
            {
                "id": 87952,
                "title": "a-formal-complete-prove-of-the-theory-easy-to-understand",
                "content": "Theorem to prove:\\n**For any odd number k >= 3, f(k-1) <= f(k) and f(k+1) <= f(k)**, where f denotes \"integerReplacement(int n)\".\\nIn another words, for two adjacent numbers the even one needs less or equal steps to get to 1 than that of the odd one.\\n\\nThis can be proven by induction:\\n1. for 2,3,4,5,6 we have f(2) = 1, f(3) = 2, f(4) = 2, f(5) = 3, f(6) = 3 which agree with the statement\\n2. for and odd number k let's prove f(k-1) <= f(k) (f(k+1) < f(k) can be proven in the same manner):\\nfor k-1: k-1 -> (k-1)/2\\nfor k: a. k -> k-1 -> (k-1)/2 OR\\n         b. k -> k+1->(k+1)/2\\nif we take path a, it's obvious that k takes one more step than k-1 to get (k-1)/2 so f(k-1) < f(k)\\nif  we take path b, \\n          if (k+1)/2 is even and (k-1)/2 is odd, then for k-1 we can also take two step to reach (k+1)/2 by k-1 ->       (k-1)/2 - > (k+1)/2, so f(k-1) = f(k)\\n          if (k+1)/2 is odd number, by induction we know f[(k-1)/2] <= f[(k+1)/2], so overall f(k-1) < f(k) (because it takes one step from k-1 to (k-1)/2 but two steps from k to (k+1)/2)\\nSo in all the cases f(k-1) <= f(k)\\n\\nCorollary:\\nFor our problem: if we have an odd number we need increase or decrease to make it be 4n. The reason is for an odd number after two steps it could become an odd or even number differed by 1 and the theorm above tell us you better become an even number after two steps.\\nWhy 3 is an exception? The theorem only applies for odd numbers >= 3 because f(2) > f(1) is an exception!!\\n```\\n    public int integerReplacement(int n) {\\n        if(n==Integer.MAX_VALUE) return 32;\\n        if (n <= 2) return n-1;\\n        if (n == 3) return 2;\\n        if (n % 2 == 0) return integerReplacement(n/2)+1;\\n        else return (n&2) == 0 ? integerReplacement(n-1)+1 : integerReplacement(n+1)+1;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int integerReplacement(int n) {\\n        if(n==Integer.MAX_VALUE) return 32;\\n        if (n <= 2) return n-1;\\n        if (n == 3) return 2;\\n        if (n % 2 == 0) return integerReplacement(n/2)+1;\\n        else return (n&2) == 0 ? integerReplacement(n-1)+1 : integerReplacement(n+1)+1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 88047,
                "title": "java-bfs-solution-tail-recursion",
                "content": "```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        assert n > 0;\\n        Queue<Long> queue = new LinkedList<>();\\n        queue.offer((long)n);\\n        return bfs(queue, 0);\\n    }\\n    \\n    private int bfs(Queue<Long> oldqueue, int level) {\\n        Queue<Long> newqueue = new LinkedList<>();\\n        while (!oldqueue.isEmpty()) {\\n            long n = oldqueue.poll();\\n            if (n == 1) {\\n                return level;\\n            }\\n            if (n % 2 == 0) {\\n                newqueue.offer(n / 2);\\n            } else {\\n                newqueue.offer(n + 1);\\n                newqueue.offer(n - 1);\\n            }\\n        }\\n        return bfs(newqueue, level + 1);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        assert n > 0;\\n        Queue<Long> queue = new LinkedList<>();\\n        queue.offer((long)n);\\n        return bfs(queue, 0);\\n    }\\n    \\n    private int bfs(Queue<Long> oldqueue, int level) {\\n        Queue<Long> newqueue = new LinkedList<>();\\n        while (!oldqueue.isEmpty()) {\\n            long n = oldqueue.poll();\\n            if (n == 1) {\\n                return level;\\n            }\\n            if (n % 2 == 0) {\\n                newqueue.offer(n / 2);\\n            } else {\\n                newqueue.offer(n + 1);\\n                newqueue.offer(n - 1);\\n            }\\n        }\\n        return bfs(newqueue, level + 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1694641,
                "title": "java-bit-manipulation-100-faster",
                "content": "**Explanation -**\\n       The key idea is **NOT** to do the operations one by one. **Lets consider cases-**\\n\\t   \\n1.  **Odd Numbers -** Instead of randomly adding or subtracting **1** from the number, try to think **1-step** ahead, when you add or subtract 1 from any odd number, you get an even number, **BUT** after dividing that number by 2 - **You get EVEN result for a case & ODD for the other**. Consider - \\n\\n**Eg: 21**   \\n\\n         (21+1) = 22              and                   (21-1) = 20\\n         22/2 = 11 (Odd)\\t\\t\\t                     20/2 = 10 (Even) \\n**Thus here we need to SUBTRACT 1 from the number**\\n\\n2. **Even Numbers -** Here if we keep dividing by 2 on each step, we will get **TLE** so instead **divide the number by - HIGHEST POWER OF 2** that divides that number and add the power to the number of steps.\\n\\n\\n**Here is the Java Code to implement the above logic -**\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n//         Base Case\\n        if(n==1) return 0;\\n        int c = 0;\\n//         Actual loop\\n        while(n!=1){\\n//             Condition for odd\\n            if(n%2!=0){\\n                int sub = n-1;\\n                if((sub/2)%2==0 || (sub/2)==1) n-=1;\\n                else n+=1;\\n                c++;\\n            }\\n\\t\\t\\t// Condition for Even Case\\n            else if(n%2==0){\\n                // Check the highest power of 2 to divide n\\n                for(int i=31; i>=1; i--){\\n                    if(n%(1<<i)==0){\\n                        n = n/(1<<i);\\n                        c+=i;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```\\n\\n**Upvote if you like the Explanation & Solution !!**",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n//         Base Case\\n        if(n==1) return 0;\\n        int c = 0;\\n//         Actual loop\\n        while(n!=1){\\n//             Condition for odd\\n            if(n%2!=0){\\n                int sub = n-1;\\n                if((sub/2)%2==0 || (sub/2)==1) n-=1;\\n                else n+=1;\\n                c++;\\n            }\\n\\t\\t\\t// Condition for Even Case\\n            else if(n%2==0){\\n                // Check the highest power of 2 to divide n\\n                for(int i=31; i>=1; i--){\\n                    if(n%(1<<i)==0){\\n                        n = n/(1<<i);\\n                        c+=i;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 88053,
                "title": "3-lines-python-recursive-ac-solution",
                "content": "```\\nclass Solution(object):\\n    def integerReplacement(self, n, counter=0):\\n    \\tif n == 1: return counter\\n    \\tif not n%2: return self.integerReplacement(n/2, counter+1)\\n    \\telse: return min(self.integerReplacement(n+1, counter+1), self.integerReplacement(n-1, counter+1))\\n```\\n**EDIT:**\\nPlease refer to more improvements by @WKVictor's post under this topic.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def integerReplacement(self, n, counter=0):\\n    \\tif n == 1: return counter\\n    \\tif not n%2: return self.integerReplacement(n/2, counter+1)\\n    \\telse: return min(self.integerReplacement(n+1, counter+1), self.integerReplacement(n-1, counter+1))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3735364,
                "title": "c-recursion-memoization-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nEverything is given in description. Just keep in mind that if you are optimising your recursion function then it might give you runtime error (if you are considering vector & blindly converting recursive code to memoization or dp. Because, when n is odd, you need dp of size (n+2)). So, for safety purpose, I have used map.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(logn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\nlong long integerReplace(long long n, unordered_map<long long, int> &dp){\\n    if(n<=1)\\n    return 0;\\n\\n    if(dp.find(n)!=dp.end())\\n    return dp[n];\\n        \\n    if(n%2==0)\\n    return dp[n]=1+integerReplace(n/2,dp);\\n    \\n    return dp[n]= 1+min(integerReplace(n+1,dp),integerReplace(n-1,dp));\\n}\\n    int integerReplacement(int n) {\\n        unordered_map<long long,int> dp;\\n        return integerReplace(n, dp);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\nlong long integerReplace(long long n, unordered_map<long long, int> &dp){\\n    if(n<=1)\\n    return 0;\\n\\n    if(dp.find(n)!=dp.end())\\n    return dp[n];\\n        \\n    if(n%2==0)\\n    return dp[n]=1+integerReplace(n/2,dp);\\n    \\n    return dp[n]= 1+min(integerReplace(n+1,dp),integerReplace(n-1,dp));\\n}\\n    int integerReplacement(int n) {\\n        unordered_map<long long,int> dp;\\n        return integerReplace(n, dp);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 88039,
                "title": "simple-java-solution",
                "content": "```\\npublic int integerReplacement(int n) {\\n\\tif(n==1) return 0;\\n\\telse if(n%2==0) return 1+integerReplacement(n/2);\\n\\telse return 2+Math.min(integerReplacement((n/2)+1), integerReplacement(n/2));\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int integerReplacement(int n) {\\n\\tif(n==1) return 0;\\n\\telse if(n%2==0) return 1+integerReplacement(n/2);\\n\\telse return 2+Math.min(integerReplacement((n/2)+1), integerReplacement(n/2));\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 87933,
                "title": "could-you-anyone-offer-an-elegant-solution-to-deal-with-2147483647",
                "content": "```\\npublic int integerReplacement(int n) {\\n        if (n == 1) return 0;\\n        if (n == 2147483647) {\\n            return Math.min(1 + integerReplacement(2147483647 - 1), 2 + integerReplacement((2147483646 / 2) + 1));\\n        }\\n        if (n % 2 == 0) {\\n            return (1 + integerReplacement(n / 2));\\n        } else {\\n            return (1 + Math.min(integerReplacement(n - 1), integerReplacement(n + 1)));\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int integerReplacement(int n) {\\n        if (n == 1) return 0;\\n        if (n == 2147483647) {\\n            return Math.min(1 + integerReplacement(2147483647 - 1), 2 + integerReplacement((2147483646 / 2) + 1));\\n        }\\n        if (n % 2 == 0) {\\n            return (1 + integerReplacement(n / 2));\\n        } else {\\n            return (1 + Math.min(integerReplacement(n - 1), integerReplacement(n + 1)));\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3365970,
                "title": "c-easy-to-understand-simple",
                "content": "YOU CAN UPVOTE THIS SOLUTION THIS MORE HELPFULL FOR ME..\\n````\\nclass Solution {\\npublic:\\n    int solve(unordered_map<unsigned int,int> &dp,unsigned int n){\\n        if(n==1){\\n            return 0;\\n        }\\n        if(dp.find(n) != dp.end()){\\n            return dp[n];\\n        }\\n        if(n&1){\\n            return dp[n] = min(solve(dp,n+1),solve(dp,n-1))+1;\\n        }else{\\n            return dp[n] = solve(dp,n/2)+1;\\n        }\\n    }\\n    int integerReplacement(int n) {\\n        unordered_map<unsigned int,int> dp;\\n        return solve(dp,n);\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Memoization"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    int solve(unordered_map<unsigned int,int> &dp,unsigned int n){\\n        if(n==1){\\n            return 0;\\n        }\\n        if(dp.find(n) != dp.end()){\\n            return dp[n];\\n        }\\n        if(n&1){\\n            return dp[n] = min(solve(dp,n+1),solve(dp,n-1))+1;\\n        }else{\\n            return dp[n] = solve(dp,n/2)+1;\\n        }\\n    }\\n    int integerReplacement(int n) {\\n        unordered_map<unsigned int,int> dp;\\n        return solve(dp,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3258459,
                "title": "397-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe solution uses dynamic programming and memoization to avoid repeating subproblems.\\n\\nThe main function, integerReplacement, initializes a memoization dictionary and calls the recursive helper function with the input n and the memoization dictionary. It then returns the result of the helper function.\\n\\nThe helper function is the recursive function that actually solves the problem. It has three cases:\\n\\n1. Base case: if n is 1, return 0. This is the stopping condition for the recursion.\\n2. Check if the result is already memoized in the memo dictionary. If it is, return the memoized value.\\n3. If n is even, divide it by 2 and make a recursive call to the helper function with n/2. Store the result in the memo dictionary.\\n4. If n is odd, make two recursive calls for n+1 and n-1 and return the minimum of the two values plus 1. Store the result in the memo dictionary.\\n\\nThe helper function returns the memoized result, which is the minimum number of operations needed for n to become 1.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the solution is O(log n) because we are dividing the input n by 2 at each recursive call, which means that the number of recursive calls is proportional to log n.\\n\\n- Space complexity:\\nThe space complexity of the solution is also O(log n) because we are using a memoization dictionary to store the intermediate results of the recursive calls. The size of the dictionary is proportional to the number of recursive calls, which is also proportional to log n.\\n\\n# Code\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        # Initialize the memoization dictionary\\n        memo = {}\\n        # Call the recursive function\\n        return self.helper(n, memo)\\n\\n    def helper(self, n, memo):\\n        # Base case: if n is 1, return 0\\n        if n == 1:\\n            return 0\\n        # Check if the result is already memoized\\n        if n in memo:\\n            return memo[n]\\n        # If n is even, divide it by 2 and make a recursive call\\n        if n % 2 == 0:\\n            memo[n] = 1 + self.helper(n // 2, memo)\\n        # If n is odd, make two recursive calls for n+1 and n-1 and return the minimum of the two values\\n        else:\\n            memo[n] = 1 + min(self.helper(n + 1, memo), self.helper(n - 1, memo))\\n        # Return the memoized result\\n        return memo[n]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Dynamic Programming",
                    "Greedy",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        # Initialize the memoization dictionary\\n        memo = {}\\n        # Call the recursive function\\n        return self.helper(n, memo)\\n\\n    def helper(self, n, memo):\\n        # Base case: if n is 1, return 0\\n        if n == 1:\\n            return 0\\n        # Check if the result is already memoized\\n        if n in memo:\\n            return memo[n]\\n        # If n is even, divide it by 2 and make a recursive call\\n        if n % 2 == 0:\\n            memo[n] = 1 + self.helper(n // 2, memo)\\n        # If n is odd, make two recursive calls for n+1 and n-1 and return the minimum of the two values\\n        else:\\n            memo[n] = 1 + min(self.helper(n + 1, memo), self.helper(n - 1, memo))\\n        # Return the memoized result\\n        return memo[n]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2064619,
                "title": "simple-solution",
                "content": "```\\n// ll = long long\\n\\nll fun(ll n) {\\n        if(n==1) return 0;\\n        \\n        if(n%2) return (1 + min( fun(n+1), fun(n-1) ) );\\n        else return (1 + fun(n/2));\\n    }\\n        \\n    int integerReplacement(int n) {\\n        ll t = n;\\n        ll ans = fun(t);\\n        return (int)ans;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n// ll = long long\\n\\nll fun(ll n) {\\n        if(n==1) return 0;\\n        \\n        if(n%2) return (1 + min( fun(n+1), fun(n-1) ) );\\n        else return (1 + fun(n/2));\\n    }\\n        \\n    int integerReplacement(int n) {\\n        ll t = n;\\n        ll ans = fun(t);\\n        return (int)ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2509261,
                "title": "java-while-loop-faster-than-100-java-submissions",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int count=0;\\n        while(n>1){\\n            if(n==2147483647)\\n                return 32;\\n            if(n==3)\\n                return count+2;\\n            if(n%2==0)\\n                n=n/2;\\n            else{\\n                if(((n+1)/2)%2 == 0)\\n                    n++;\\n                else\\n                    n--;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int count=0;\\n        while(n>1){\\n            if(n==2147483647)\\n                return 32;\\n            if(n==3)\\n                return count+2;\\n            if(n%2==0)\\n                n=n/2;\\n            else{\\n                if(((n+1)/2)%2 == 0)\\n                    n++;\\n                else\\n                    n--;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1705525,
                "title": "mathematical-and-greedy-approach-beats-100",
                "content": "Thought process:\\nif n is even then we will do n =n/2 at each iteration\\nelse \\n:\\nStanding at a odd number I can see that , either the previous number is divisible by 4 or the next one is divisible by 4 if the odd number is greater than 3, so try to move towards the number which is divisible by 4 so that it reduces more times than the other one; why reduces because the number is gonna be divisible by 2 again, in the next iteration . \\nSome extra care for INT_MAX because n++ doesn\\'t fit in INTEGER range , so I applied the above described intution manually twice for INT_MAX which is easily understandable\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        if(n==1)return 0; \\n        int ans=0; \\n         if(n==INT_MAX){\\n             n--; \\n             ans+=2; \\n             n=n/2;\\n             n++; \\n         }\\n        while(n>1){\\n            if(n%2==0){n=n/2;} \\n            else if(n==3){\\n                 n--; \\n            }\\n            else {\\n                if((n-1)%4==0){\\n                    n--; \\n                }\\n                else {\\n                    n++; \\n                }\\n            }\\n            ans++; \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        if(n==1)return 0; \\n        int ans=0; \\n         if(n==INT_MAX){\\n             n--; \\n             ans+=2; \\n             n=n/2;\\n             n++; \\n         }\\n        while(n>1){\\n            if(n%2==0){n=n/2;} \\n            else if(n==3){\\n                 n--; \\n            }\\n            else {\\n                if((n-1)%4==0){\\n                    n--; \\n                }\\n                else {\\n                    n++; \\n                }\\n            }\\n            ans++; \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1374335,
                "title": "easy-way-to-solve-this-problem-no-dp-no-recursion-only-bitmask-concept",
                "content": "**Lets take an example**\\nn = 47\\n\\nLets take two path\\nn = 47-> 48 ->24->12->6->3->2->1 (**7 Steps** in Total)\\nand\\nn = 47 ->46->23->22->11->10->5->4->2->1 (**9 Steps** in total)\\n\\nso we need to choose carefully and look at detail\\n\\n47 -> 101111\\n48 -> 110000\\n46 -> 101110\\n\\nnow right shift (divide by 2) multiple times we will observe that occurance of 1 at LSB (Odd) is more in 46 is more than 48. So, it is better to choose 48. So we will count no of zeros (unset bits) in right side of bit representation in both the cases of n-1 and n+1. The one with most zeros will be chosen.\\n\\n\\n***CODE***\\n```\\nint integerReplacement(int n) {\\n        \\n        if(n==INT_MAX) return 32;\\n        int count  = 0;\\n        while(n>3){\\n            if(n%2==0){\\n                // if n is even\\n                n=n>>1;\\n            }else{\\n                // if n is odd\\n                int increment = n+1;\\n                int decrement = n-1;\\n                int unsetBits = 0;\\n                \\n                while(!(increment&1)){\\n                    unsetBits++;\\n                    increment = increment>>1;\\n                }\\n                while(!(decrement&1)){\\n                    unsetBits--;\\n                    decrement = decrement>>1;\\n                }\\n                if(unsetBits>0){\\n                    n = n+1;\\n                }else{\\n                    n = n-1;\\n                }\\n            }\\n            count++;\\n        }\\n        \\n        if(n<=3) count+=(n-1);\\n        \\n        return count;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bitmask"
                ],
                "code": "```\\nint integerReplacement(int n) {\\n        \\n        if(n==INT_MAX) return 32;\\n        int count  = 0;\\n        while(n>3){\\n            if(n%2==0){\\n                // if n is even\\n                n=n>>1;\\n            }else{\\n                // if n is odd\\n                int increment = n+1;\\n                int decrement = n-1;\\n                int unsetBits = 0;\\n                \\n                while(!(increment&1)){\\n                    unsetBits++;\\n                    increment = increment>>1;\\n                }\\n                while(!(decrement&1)){\\n                    unsetBits--;\\n                    decrement = decrement>>1;\\n                }\\n                if(unsetBits>0){\\n                    n = n+1;\\n                }else{\\n                    n = n-1;\\n                }\\n            }\\n            count++;\\n        }\\n        \\n        if(n<=3) count+=(n-1);\\n        \\n        return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 845173,
                "title": "java-no-recursion-beats-100",
                "content": "The only decision point with `n > 1` is when the low-order bit is `1`. There are three cases:\\n1. The bits of `n` end with `01`. Here we should always subtract one and then right-shift twice (3 steps) instead of adding one, right-shifting, adding/subtracting one, and right-shifting (4 steps).\\n2. The bits of `n` end with `11`, and `n > 3`. Here we should add one, because each carry after the first will save a step in the future (at least one step saved); and the final carry will add one step, for a net benefit of at worst 0 steps.\\n3. `n = 3`. In this special case, the second carry after adding one does **not** save a step, because we are not trying to eliminate the `1` in the second-to-lowest-order bit. So we should subtract.\\n\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) {\\n            return 32;\\n        }\\n        int steps = 0;\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n >>>= 1;\\n            } else {\\n                if ((n & 2) == 0 || n == 3) {\\n                    n--;\\n                } else {\\n                    n++;\\n                }\\n            }\\n            steps++;\\n        }\\n        return steps;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) {\\n            return 32;\\n        }\\n        int steps = 0;\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n >>>= 1;\\n            } else {\\n                if ((n & 2) == 0 || n == 3) {\\n                    n--;\\n                } else {\\n                    n++;\\n                }\\n            }\\n            steps++;\\n        }\\n        return steps;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 774032,
                "title": "clean-python-high-speed-bit-manipulation",
                "content": "**Clean Python | High Speed | Bit Manipulation**\\n\\nThe Python code below corresponds to a fast algorithm that achieves 100% speed on LeetCode. The solution is based on the following idea:\\n\\n1. If \"n\" is even, we should always divide by \"2\". This helps the process to achieve O(log n) time complexity.\\n\\n2. If \"n\" is odd, in normal cases we should subtract 1 immediately, since adding \"1\" and then dividing leads to a higher number. However, there is one important **edge case**....\\n\\n3. When \"n\" is odd, but its binary representation ends with \"...11\", we should actually add 1 to \"n\". This happens because adding \"1\" will create a multiple of 4 or even higher (8, 16 ... 2^x ). So afterwards, we will get at least 2 consecutive divisions instead of one. If we subtracted one, we can prove that that we would waste at least one step.\\n\\n4. Step 3 only applies when n>3. If n==3, we should subtract one and divide, as usual.\\n\\nI hope the explanation was helpful. Cheers,\\n\\n```\\nclass Solution:\\n    def integerReplacement(self, n):\\n        res = 0\\n        while n>1:\\n            res += 1\\n            if n&1:\\n                if n&2 and n>3:\\n                    n   += 1\\n                    res += 2\\n                    n  >>= 2\\n                else:\\n                    n  -= 1\\n            else:\\n                n >>= 1\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n):\\n        res = 0\\n        while n>1:\\n            res += 1\\n            if n&1:\\n                if n&2 and n>3:\\n                    n   += 1\\n                    res += 2\\n                    n  >>= 2\\n                else:\\n                    n  -= 1\\n            else:\\n                n >>= 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 663134,
                "title": "two-solution-in-python",
                "content": "Bit-manipulation: Runtime 28ms\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        cnt = 0\\n        while n != 1:\\n            if n%2 == 0:\\n                n//=2\\n            elif n%4 == 1 or n == 3:\\n                n -= 1\\n            else:\\n                n += 1\\n            cnt += 1\\n        return cnt\\n```\\n\\nRecursive + Memoization: Runtime 28ms\\n\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        def helper(n, memo):\\n            if n in memo:\\n                return memo[n]\\n            elif n%2:\\n                memo[n] = 1 + min(helper(n-1,memo), helper(n+1,memo))\\n                return memo[n]\\n            else:\\n                memo[n] = 1 + helper(n//2, memo)\\n                return memo[n]\\n       \\n        memo = {1:0}\\n        return helper(n, memo)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Bit Manipulation",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        cnt = 0\\n        while n != 1:\\n            if n%2 == 0:\\n                n//=2\\n            elif n%4 == 1 or n == 3:\\n                n -= 1\\n            else:\\n                n += 1\\n            cnt += 1\\n        return cnt\\n```\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        def helper(n, memo):\\n            if n in memo:\\n                return memo[n]\\n            elif n%2:\\n                memo[n] = 1 + min(helper(n-1,memo), helper(n+1,memo))\\n                return memo[n]\\n            else:\\n                memo[n] = 1 + helper(n//2, memo)\\n                return memo[n]\\n       \\n        memo = {1:0}\\n        return helper(n, memo)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2428147,
                "title": "simplest-c-solution-recursion",
                "content": "```\\nint solve(unsigned int n, int even, int odd1, int odd2){\\n        // base case\\n        if(n <= 1)\\n            return 0;\\n        if(n%2 == 0)\\n            even = (1 + solve(n/2, even, odd1, odd2));\\n        else{\\n            odd1 = (1 + solve(n-1, even, odd1, odd2));\\n            odd2 = (1 + solve(n+1, even, odd1, odd2));\\n        }\\n        int odd = min(odd1, odd2);\\n        return even + odd;\\n    }\\n    \\n    int integerReplacement(int n) {\\n        int even = 0;\\n        int odd1 = 0;\\n        int odd2 = 0;\\n        return solve(n, even, odd1, odd2);\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nint solve(unsigned int n, int even, int odd1, int odd2){\\n        // base case\\n        if(n <= 1)\\n            return 0;\\n        if(n%2 == 0)\\n            even = (1 + solve(n/2, even, odd1, odd2));\\n        else{\\n            odd1 = (1 + solve(n-1, even, odd1, odd2));\\n            odd2 = (1 + solve(n+1, even, odd1, odd2));\\n        }\\n        int odd = min(odd1, odd2);\\n        return even + odd;\\n    }\\n    \\n    int integerReplacement(int n) {\\n        int even = 0;\\n        int odd1 = 0;\\n        int odd2 = 0;\\n        return solve(n, even, odd1, odd2);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2377225,
                "title": "c-recursion-memoization-short-code",
                "content": "***Why not Greedy?***\\n\\n***We can not have Greedy approach to solve this question because we will mis out on something in future that could be more beneficial. So Instead of having a Greedy approach we have to try all possible ways and that\\'s possible by using Recursion***\\n***Example to support my explaination n=11\\nIf we apply greedy at every point (always try to decrease either by n/2 or n-1),***\\n\\n***1) 11->10->5->4->2->1 (Greedy Approach) (Total steps=6)***\\n***2) 11->12->6->3->2->1 (Non-Greedy) (Total steps=6***\\n***So it is not sure that by follwing greedy we will get the correct ans.***\\n\\n\\n# Method-1 [Recursion - Bruetforce]\\n![image](https://assets.leetcode.com/users/images/5d4e4bda-e60a-487c-adc7-7a0678e4b8d7_1659595648.1805315.png)\\n\\n**n==number of Nodes in the Recursion Tree \\nd=Depth of the Recurion Tree\\nT->O(2^n) && S->O(d) [Recursion Stack Space]**\\n \\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint f(long int n){\\n\\t\\t\\tif(n==1)return 0;\\n\\t\\t\\tint b=INT_MAX,p=INT_MAX,m=INT_MAX;\\n\\t\\t\\tif(n%2==0) b=1+f(n/2);\\n\\t\\t\\telse{\\n\\t\\t\\t\\tp=1+f(n+1);\\n\\t\\t\\t\\tm=1+f(n-1);\\n\\t\\t\\t}\\n\\t\\t\\treturn min(b,min(p,m));\\n\\t\\t}\\n\\n\\t\\tint integerReplacement(int n) {\\n\\t\\t\\treturn f(n);    \\n\\t\\t}\\n\\t};\\n\\n# Method-2 [Memoization]\\n![image](https://assets.leetcode.com/users/images/fb0ecfb6-9065-4701-bf2e-eab4400d391a_1659867605.2388954.png)\\n\\n**n==number of Nodes in the Recursion Tree \\nd=Depth of the Recurion Tree\\nT->O(n) && S->O(d) [Recursion Stack Space] + O(n) [Space for dp map]**\\n\\n**In this question map is used instead of vectcor because max possible size of a vector can be 1e7 but here test cases are till 1e9. Thus we have to make a map to memoize it.**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tmap<int,int>dp;\\n\\t\\tint f(long int n){\\n\\t\\t\\tif(n==1)return 0;\\n\\t\\t\\tif(dp[n]!=0)return dp[n];\\n\\t\\t\\tint b=INT_MAX,p=INT_MAX,m=INT_MAX;\\n\\t\\t\\tif(n%2==0) b=1+f(n/2);\\n\\t\\t\\telse{\\n\\t\\t\\t\\tp=1+f(n+1);\\n\\t\\t\\t\\tm=1+f(n-1);\\n\\t\\t\\t}\\n\\t\\t\\treturn dp[n]=min(b,min(p,m));\\n\\t\\t}\\n\\n\\t\\tint integerReplacement(int n) {\\n\\t\\t\\treturn f(n);  \\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Memoization"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint f(long int n){\\n\\t\\t\\tif(n==1)return 0;\\n\\t\\t\\tint b=INT_MAX,p=INT_MAX,m=INT_MAX;\\n\\t\\t\\tif(n%2==0) b=1+f(n/2);\\n\\t\\t\\telse{\\n\\t\\t\\t\\tp=1+f(n+1);\\n\\t\\t\\t\\tm=1+f(n-1);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2282587,
                "title": "c-recursion-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    long long int f(long long int n)\\n    {\\n        if(n==1)\\n            return 0;\\n\\n        if(n%2==0 )\\n        {\\n             return 1+ f(n/2);\\n        }\\n        \\n        else\\n        {\\n            return 1+ min (f(n+1) , f(n-1));\\n        }\\n   \\n    }\\n    int integerReplacement(int n) {\\n        return f(n);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "class Solution {\\npublic:\\n    long long int f(long long int n)\\n    {\\n        if(n==1)\\n            return 0;\\n\\n        if(n%2==0 )\\n        {\\n             return 1+ f(n/2);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1146196,
                "title": "java-4ms-recursion-3-liner-0ms-100-with-memoization",
                "content": "The idea is to decrease the `n` as quick as possible. \\nIf `n` is even, we divide it by 2 and we get `n / 2`.\\nIf `n` is odd, we use two step: +1 or -1 then divide it by 2, and we can get `n / 2` or `n / 2 + 1`. We recurse on them and use the smaller one.\\nWe never have to increase `n`, so no overflow issue.\\n\\n3-liner (4 ms):\\n```\\npublic int integerReplacement(int n) {\\n\\tif (n == 1) return 0;\\n\\tif (n % 2 == 0) return integerReplacement(n / 2) + 1;\\n\\treturn Math.min(integerReplacement(n / 2),  integerReplacement(n / 2 + 1)) + 2;\\n}\\n```\\n\\nWith memoization (0 ms):\\n```\\npublic int integerReplacement(int n) {\\n\\tMap<Integer, Integer> map = new HashMap<>();\\n\\tmap.put(1, 0);\\n\\treturn memoization(n, map);\\n}\\n\\nprivate int memoization(int n, Map<Integer, Integer> map) {\\n\\tif (map.containsKey(n)) return map.get(n);\\n\\tint res = 0;\\n\\tif (n % 2 == 0) res = memoization(n / 2, map) + 1;\\n\\telse res = Math.min(memoization(n / 2, map), memoization(n / 2 + 1, map)) + 2;\\n\\tmap.put(n, res);\\n\\treturn res;\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\npublic int integerReplacement(int n) {\\n\\tif (n == 1) return 0;\\n\\tif (n % 2 == 0) return integerReplacement(n / 2) + 1;\\n\\treturn Math.min(integerReplacement(n / 2),  integerReplacement(n / 2 + 1)) + 2;\\n}\\n```\n```\\npublic int integerReplacement(int n) {\\n\\tMap<Integer, Integer> map = new HashMap<>();\\n\\tmap.put(1, 0);\\n\\treturn memoization(n, map);\\n}\\n\\nprivate int memoization(int n, Map<Integer, Integer> map) {\\n\\tif (map.containsKey(n)) return map.get(n);\\n\\tint res = 0;\\n\\tif (n % 2 == 0) res = memoization(n / 2, map) + 1;\\n\\telse res = Math.min(memoization(n / 2, map), memoization(n / 2 + 1, map)) + 2;\\n\\tmap.put(n, res);\\n\\treturn res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 840506,
                "title": "python-simplest-4-line-recursive-solution",
                "content": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        \\n        def rec(n):\\n            if n&(n-1) == 0:\\n                return int(log2(n))\\n            return rec(int(n/2))+1 if n%2==0 else min(rec(n-1), rec(n+1))+1\\n        \\n        return rec(n)\\n```",
                "solutionTags": [
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        \\n        def rec(n):\\n            if n&(n-1) == 0:\\n                return int(log2(n))\\n            return rec(int(n/2))+1 if n%2==0 else min(rec(n-1), rec(n+1))+1\\n        \\n        return rec(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 738817,
                "title": "c-simple-solution-with-explanation",
                "content": "We have two operation, **divide by two if n is even** and **increment or decrement by 1 if n is odd**. This a greedy solution because wheneven we will encounter an even number we will divide by 2 because it will reduce the number of operation.\\nWe face a problem when n is odd because there are two choices **add 1** or **minus 1**. Solution is we should choose that operation after which we get an even number and dividing it by two is also an even number. Please read the above line carefully then go through this example. Consider we have n=19. Should I add 1 or subtract 1. Let\\'s do both of them.\\n**Subtract 1** we get n=18 which is even divide it by 2 we get 9.\\n**Add 1** we get n=20 which is even divide it by 2 we get 10.\\nFrom the above example it is clear that Adding 1 is favourable because after two operation ( add 1 then divide it by 2) we get an even number which can be further divided by 2. On the other hand after subtracting 1 and dividing it by 2 we get an odd number we will have to perform two operation again. So here adding was favourabel or we can say incrementing is favourable.\\nHow should we find out whether we should add 1 or subtract 1. Suppose n is odd and is equal to **2m+1** .previous number is **2m** and next number is **2m+2** we can see that both are even.\\nDividing both by **2** we get **m** and **m+1**, these are consecutive numbers so one of them should be even and then we can proceed.\\nException is there for **n=3**.\\n\\n```c++\\nSolution {\\npublic:\\n    int integerReplacement(int n) {\\n        int op=0;\\n        if(n==3)return 2;\\n        long long n1=n;\\n        while(n1>1)\\n        {\\n            if(n1%2==0)n1/=2;\\n            else\\n            {\\n                long long int t=(n1-1)/2;\\n                if(t%2==0)\\n                    n1-=1;\\n                else\\n                    n1+=1;\\n            }\\n            if(n1==3)\\n                return n1+op;\\n            op++;\\n        }\\n        return op;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```c++\\nSolution {\\npublic:\\n    int integerReplacement(int n) {\\n        int op=0;\\n        if(n==3)return 2;\\n        long long n1=n;\\n        while(n1>1)\\n        {\\n            if(n1%2==0)n1/=2;\\n            else\\n            {\\n                long long int t=(n1-1)/2;\\n                if(t%2==0)\\n                    n1-=1;\\n                else\\n                    n1+=1;\\n            }\\n            if(n1==3)\\n                return n1+op;\\n            op++;\\n        }\\n        return op;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 734335,
                "title": "cpp-soution-easy-to-understand-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(long long int n) {\\n        \\n        int c=0;\\n        while(n!=1) {\\n           // cout<<n<<\" \";\\n          if(n%2==0) n/=2;\\n          else \\n          { \\n                  if(((n-1)/2)%2==0||(n-1)/2==1) n-=1;\\n              else\\n                  n++;\\n          }\\n            c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(long long int n) {\\n        \\n        int c=0;\\n        while(n!=1) {\\n           // cout<<n<<\" \";\\n          if(n%2==0) n/=2;\\n          else \\n          { \\n                  if(((n-1)/2)%2==0||(n-1)/2==1) n-=1;\\n              else\\n                  n++;\\n          }\\n            c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 502367,
                "title": "python-100-8ms-easy-to-read-a-simple-logic-in-one-while-loop-explained",
                "content": "A very simple logic, just 4 possible cases:\\n\\n1. if it\\'s an even number - always divide by 2.\\n2. if it\\'s an odd number, we can make it even by either +1 or -1.  How can we tell? A very simple test. If n+1 % 4 == 0, that means after that we\\'ll be able to divide it by 2 at least twice, so it\\'s worth adding 1. Otherwise, we reduce the number by 1.\\n3. The is an edge case - 3. 3 ->4->2->1 is 3 steps while 3->2->1 is 2. So we check that exception before any other odd numbers and force end of the loop by setting n=1 and incrementing c by 1 and then by 1 again.\\n\\nThat\\'s it.\\n\\n```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        c = 0        \\n        while n>1:\\n            if n==3: return c+2            \\n            if n%2 == 0: n //= 2\\n            else: n += -1 if (n+1)%4 else 1\\n            c += 1        \\n        return c\\n```\\n\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        c = 0        \\n        while n>1:\\n            if n==3: return c+2            \\n            if n%2 == 0: n //= 2\\n            else: n += -1 if (n+1)%4 else 1\\n            c += 1        \\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 262597,
                "title": "java-easy-2ms-beats-99-34",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) return integerReplacement(n-1);\\n        if (n == 1) return 0;\\n        if (n%2==0) return integerReplacement(n/2)+1;  \\n        return Math.min(integerReplacement(n-1), integerReplacement(n+1))+1;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) return integerReplacement(n-1);\\n        if (n == 1) return 0;\\n        if (n%2==0) return integerReplacement(n/2)+1;  \\n        return Math.min(integerReplacement(n-1), integerReplacement(n+1))+1;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3428097,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        return helper(long(n));\\n    }\\n    int helper(long n) \\n    {\\n        int count = 0;\\n        while(n > 1)\\n         {\\n            if(n % 2 == 0)\\n                n /= 2;\\n            else if(((n+1) % 4) == 0 && n+1 != 4)\\n                n += 1;\\n            else \\n                n -= 1;\\n            ++count;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        return helper(long(n));\\n    }\\n    int helper(long n) \\n    {\\n        int count = 0;\\n        while(n > 1)\\n         {\\n            if(n % 2 == 0)\\n                n /= 2;\\n            else if(((n+1) % 4) == 0 && n+1 != 4)\\n                n += 1;\\n            else \\n                n -= 1;\\n            ++count;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2908059,
                "title": "java-easy-to-understand-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int ans = 0;\\n        while (n != 1) {\\n            if ((n & 1) == 0) {\\n                n >>>= 1;\\n            } else if (n != 3 && (n & 3) == 3) {\\n                ++n;\\n            } else {\\n                --n;\\n            }\\n            ++ans;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int ans = 0;\\n        while (n != 1) {\\n            if ((n & 1) == 0) {\\n                n >>>= 1;\\n            } else if (n != 3 && (n & 3) == 3) {\\n                ++n;\\n            } else {\\n                --n;\\n            }\\n            ++ans;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2646641,
                "title": "java-100-faster-easy-explanation-elegant-solution",
                "content": "```\\nint count = 0;\\nif (n == 2147483647) {\\n\\tn = 1073741824;\\n\\tcount = 2;\\n}\\nwhile (n != 1) {\\n\\tif (n == 3 || n % 2 == 1 && (n - 1) % 4 == 0)\\n\\t\\tn = n - 1;\\n\\telse if (n % 2 == 1)\\n\\t\\tn = n + 1;\\n\\telse\\n\\t\\tn = n / 2;\\n\\tcount++;\\n}\\nreturn count;\\n```\\n\\n# **explantion**\\n\\n```\\nint count = 0;\\nif (n == 2147483647) {\\n\\tn = 1073741824;\\n\\tcount = 2;\\n//            this is exceptional case where I was stuck during leetCode submission so i hardcode it\\n//            2147483647 --> it is max number in integer type so if we increase 1 then it is out of range.\\n//            2147483647 + 1 = 2147483648 -->count 1\\n//            2147483648 / %4 == 0 --> 2147483648 / 2 = 1073741824 -> count = 2;\\n}\\n\\nwhile (n != 1) {\\n\\tif (n == 3 || n % 2 == 1 && (n - 1) % 4 == 0)\\n\\t\\tn -= 1;\\n//            if(n%2)==1 means n is odd, also if(n-1)%4==0 means (n-1)/2 is also even\\n//            i.e n=21--> if(n%2)==1 than n=21 is odd, also if(n-1)%4==0 than (21-)1=20, 20/2=10 is also even.\\n//            so we can directly make n-->n-1\\n\\n\\telse if (n % 2 == 1)\\n\\t\\tn += 1;\\n//            if((n - 1) % 4 == 0) doesn\\'t fulfill then below condition we add n-->n+1\\n\\n\\telse\\n\\t\\tn /=2;\\n//            else if n is already even than directly n-->n/2\\n\\n\\tcount++;\\n//            for each step we increase our count with +1\\n}\\nreturn count;\\n```\\n**If you have any question, feel free to ask. If you like the solution or the explanation, Please UPVOTE !**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nint count = 0;\\nif (n == 2147483647) {\\n\\tn = 1073741824;\\n\\tcount = 2;\\n}\\nwhile (n != 1) {\\n\\tif (n == 3 || n % 2 == 1 && (n - 1) % 4 == 0)\\n\\t\\tn = n - 1;\\n\\telse if (n % 2 == 1)\\n\\t\\tn = n + 1;\\n\\telse\\n\\t\\tn = n / 2;\\n\\tcount++;\\n}\\nreturn count;\\n```\n```\\nint count = 0;\\nif (n == 2147483647) {\\n\\tn = 1073741824;\\n\\tcount = 2;\\n//            this is exceptional case where I was stuck during leetCode submission so i hardcode it\\n//            2147483647 --> it is max number in integer type so if we increase 1 then it is out of range.\\n//            2147483647 + 1 = 2147483648 -->count 1\\n//            2147483648 / %4 == 0 --> 2147483648 / 2 = 1073741824 -> count = 2;\\n}\\n\\nwhile (n != 1) {\\n\\tif (n == 3 || n % 2 == 1 && (n - 1) % 4 == 0)\\n\\t\\tn -= 1;\\n//            if(n%2)==1 means n is odd, also if(n-1)%4==0 means (n-1)/2 is also even\\n//            i.e n=21--> if(n%2)==1 than n=21 is odd, also if(n-1)%4==0 than (21-)1=20, 20/2=10 is also even.\\n//            so we can directly make n-->n-1\\n\\n\\telse if (n % 2 == 1)\\n\\t\\tn += 1;\\n//            if((n - 1) % 4 == 0) doesn\\'t fulfill then below condition we add n-->n+1\\n\\n\\telse\\n\\t\\tn /=2;\\n//            else if n is already even than directly n-->n/2\\n\\n\\tcount++;\\n//            for each step we increase our count with +1\\n}\\nreturn count;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2384574,
                "title": "java-100-simple-logic-by-checking-n-1-2-is-odd-or-even",
                "content": "Eg. 23 can become 22 or 24. Check by dividing 22 / 2 results in odd, if yes take the right path(n+1).\\n```\\nclass Solution {\\n    public int integerReplacement(int n1) {\\n        int steps = 0;\\n        long n = (long) n1;\\n        while (n != 1) {\\n            if(n % 2 == 0) {\\n                n = n / 2;\\n            } else {\\n                long left = (n - 1) / 2;\\n                if(left == 1 || left % 2 == 0) {\\n                    n = n - 1;\\n                } else {\\n                    n = n + 1;\\n                }\\n            }\\n            steps++;\\n        }\\n        \\n        return steps;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n1) {\\n        int steps = 0;\\n        long n = (long) n1;\\n        while (n != 1) {\\n            if(n % 2 == 0) {\\n                n = n / 2;\\n            } else {\\n                long left = (n - 1) / 2;\\n                if(left == 1 || left % 2 == 0) {\\n                    n = n - 1;\\n                } else {\\n                    n = n + 1;\\n                }\\n            }\\n            steps++;\\n        }\\n        \\n        return steps;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1772492,
                "title": "greedy-approach-best-solution-100-beats",
                "content": "#### All you need to determine  replace n with  with n+1 or n-1 when n is odd . Since\\n\\n*   **When n is even you have no choice just replace n by  n/2 and increment the count by 1.**\\n*  **If n is odd you have two choice either you have to decrement by 1 or increment by 1.** \\n*   **So  when n is odd we have check (n-1)/2 is even or not if it is even we do n-- or odd we do n++.**\\n  \\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        \\n        int count = 0;\\n        long long n1 = n ;\\n        \\n        while(n1 != 1){\\n            \\n            if(n1 % 2 == 0){\\n                n1 /= 2;\\n            }\\n            else{\\n                int temp = (n1 - 1)/2;\\n                if(temp == 1 || temp % 2 == 0)\\n                    n1--;\\n                else\\n                    n1++;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        \\n        int count = 0;\\n        long long n1 = n ;\\n        \\n        while(n1 != 1){\\n            \\n            if(n1 % 2 == 0){\\n                n1 /= 2;\\n            }\\n            else{\\n                int temp = (n1 - 1)/2;\\n                if(temp == 1 || temp % 2 == 0)\\n                    n1--;\\n                else\\n                    n1++;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1683413,
                "title": "ez-c-2-solutions-recursive-dynamic-programming-approach",
                "content": "This is with Recursion. TIME :  **7ms**\\n```\\nclass Solution {\\npublic:\\n   long  calc(long n)\\n    {        \\n        int c=0;        \\n        if(n==1)\\n            return c;\\n        if(n%2==0)\\n        c=calc(n/2)+1;\\n        else            \\n            c=min(calc(n-1),calc(n+1))+1;\\n      \\n        return c;\\n    }\\n    int integerReplacement(int n) {\\n       return calc((long)n);\\n    }\\n};\\n```\\n\\nThis is with memoization.  TIME : **3ms**\\n\\n```\\nclass Solution {\\npublic:\\n       map<int,int>dp;\\n   long calc(long n)\\n    {        \\n        if(n==1)\\n            return dp[n];\\n       if(dp[n]==NULL)\\n       {\\n        if(n%2==0)\\n        dp[n]=calc(n/2)+1;\\n        else            \\n        dp[n]=min(calc(n-1),calc(n+1))+1;  \\n       }       \\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n       return calc((long)n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   long  calc(long n)\\n    {        \\n        int c=0;        \\n        if(n==1)\\n            return c;\\n        if(n%2==0)\\n        c=calc(n/2)+1;\\n        else            \\n            c=min(calc(n-1),calc(n+1))+1;\\n      \\n        return c;\\n    }\\n    int integerReplacement(int n) {\\n       return calc((long)n);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n       map<int,int>dp;\\n   long calc(long n)\\n    {        \\n        if(n==1)\\n            return dp[n];\\n       if(dp[n]==NULL)\\n       {\\n        if(n%2==0)\\n        dp[n]=calc(n/2)+1;\\n        else            \\n        dp[n]=min(calc(n-1),calc(n+1))+1;  \\n       }       \\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n       return calc((long)n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1600363,
                "title": "c-solution-0-ms-100-faster-simple-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    int min=INT_MAX;\\n    void solve(long n, int c)\\n    {\\n        if(n==1)\\n        {\\n            if(c<min)\\n                min=c;\\n            return;\\n        }\\n        else\\n        {\\n            c++;\\n            if(n%2==0)\\n                solve(n/2, c);\\n            else\\n            {\\n                solve(n-1, c);\\n                solve(n+1, c);\\n            }\\n        }\\n    }\\n    int integerReplacement(int n) {\\n        int c=0;\\n        solve(n, c);\\n        return min;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int min=INT_MAX;\\n    void solve(long n, int c)\\n    {\\n        if(n==1)\\n        {\\n            if(c<min)\\n                min=c;\\n            return;\\n        }\\n        else\\n        {\\n            c++;\\n            if(n%2==0)\\n                solve(n/2, c);\\n            else\\n            {\\n                solve(n-1, c);\\n                solve(n+1, c);\\n            }\\n        }\\n    }\\n    int integerReplacement(int n) {\\n        int c=0;\\n        solve(n, c);\\n        return min;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1370936,
                "title": "time-complexity-o-log-n-and-space-o-1-greedy-approach-using-last-set-bit-concept",
                "content": "If the number is even we simply divide by 2 and continue, but if the number is odd, we can either go forward or backwards, and to decide that, we can greedily check which one of the two has greater last set bit. We can find the last set bit using the formula n&(-n). The exception is for 3, in which we go backwards.\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        cnt = 0\\n        while n>1:\\n            if n&1:\\n                if (n-1)&(1-n) >= (n+1)&(-1-n) or n == 3:\\n                    n -= 1\\n                else:\\n                    n += 1\\n            else:\\n                n >>= 1\\n            cnt += 1\\n        return cnt\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        cnt = 0\\n        while n>1:\\n            if n&1:\\n                if (n-1)&(1-n) >= (n+1)&(-1-n) or n == 3:\\n                    n -= 1\\n                else:\\n                    n += 1\\n            else:\\n                n >>= 1\\n            cnt += 1\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1354101,
                "title": "python-top-down-dp-solution-faster-than-91",
                "content": "Base case: dp[1] = 0\\nRecurrence: dp[2k] = 1 + dp[k], dp[2k+1] = 1 + min(dp[2k], dp[2k+2]) = 2 + min(dp[k], dp[k+1])\\n```\\n    def integerReplacement(self, n: int) -> int:\\n        def recursive(n):\\n            if n in dp:\\n                return dp[n]\\n            k = n // 2\\n            if n % 2 == 0:\\n                dp[n] = 1 + recursive(k)\\n            else:\\n                dp[n] = 2 + min(recursive(k), recursive(k + 1))\\n            return dp[n]\\n        \\n        dp = {1: 0}\\n        return recursive(n)\\n```",
                "solutionTags": [],
                "code": "```\\n    def integerReplacement(self, n: int) -> int:\\n        def recursive(n):\\n            if n in dp:\\n                return dp[n]\\n            k = n // 2\\n            if n % 2 == 0:\\n                dp[n] = 1 + recursive(k)\\n            else:\\n                dp[n] = 2 + min(recursive(k), recursive(k + 1))\\n            return dp[n]\\n        \\n        dp = {1: 0}\\n        return recursive(n)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1173548,
                "title": "c-based-on-an-observation-from-bitwise-representation",
                "content": "This code is based on observation from bitwise manipulations. If the bit representation of an odd number *n* ends with (....111), it is better to deal with n+1 (so that it becomes 1000) than to deal with *n-1*. On the other hand, if it does not end with (...111), it is better to deal with *n-1*. Therefore, my original version is to look at *(n & 7)* and see whether it is 7 or not. But I see the code cannot pass the testcase 13563 (actually, I tried 111111111 and found it has a problem when it proceeded to 13563) whose bit representation ends with 11111011. This motivates me to modify the criterion from *(n & 7)* to *(n & 3)*.\\n\\nRuntime: 0 ms, faster than 100.00% of C++ online submissions for Integer Replacement.\\nMemory Usage: 5.7MB, less than 94.74% of C++ online submissions for Integer Replacement.\\n\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(unsigned int n) {\\n        int count{0};\\n        while (n > 3) {\\n            if (n % 2 == 0) {\\n                n /= 2;                \\n            }\\n            else if ((n & 3) < 3) {  // i.e. n & (11)_2\\n                --n;\\n            }\\n            else {\\n                ++n;\\n            }\\n            ++count;\\n        }\\n        if (n <= 3) count += (n-1);\\n        return count;\\n    }        \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(unsigned int n) {\\n        int count{0};\\n        while (n > 3) {\\n            if (n % 2 == 0) {\\n                n /= 2;                \\n            }\\n            else if ((n & 3) < 3) {  // i.e. n & (11)_2\\n                --n;\\n            }\\n            else {\\n                ++n;\\n            }\\n            ++count;\\n        }\\n        if (n <= 3) count += (n-1);\\n        return count;\\n    }        \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 843444,
                "title": "java-simplest-4-line-recursive-solution",
                "content": "```\\nclass Solution {\\n    long rec(long n) {\\n        if ((n&n-1) == 0) {\\n            return (long)(Math.log(n) / Math.log(2));\\n        }\\n        return (n%2==0) ? rec(n/2)+1 : Math.min(rec(n+1), rec(n-1))+1;\\n    }\\n    public int integerReplacement(int n) {\\n        return (int)rec((long)n);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    long rec(long n) {\\n        if ((n&n-1) == 0) {\\n            return (long)(Math.log(n) / Math.log(2));\\n        }\\n        return (n%2==0) ? rec(n/2)+1 : Math.min(rec(n+1), rec(n-1))+1;\\n    }\\n    public int integerReplacement(int n) {\\n        return (int)rec((long)n);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 497136,
                "title": "easiest-js-solution-4-line",
                "content": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar integerReplacement = function (n, c = 0) {\\n  if (n === 1) return c\\n  \\n  if (n % 2 === 0) {\\n    return integerReplacement(n / 2, c + 1)\\n  } else {\\n    return Math.min(integerReplacement(n + 1, c + 1), integerReplacement(n - 1, c + 1))\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar integerReplacement = function (n, c = 0) {\\n  if (n === 1) return c\\n  \\n  if (n % 2 === 0) {\\n    return integerReplacement(n / 2, c + 1)\\n  } else {\\n    return Math.min(integerReplacement(n + 1, c + 1), integerReplacement(n - 1, c + 1))\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 230943,
                "title": "4-ms-java-solution-using-recursion",
                "content": "```class Solution {\\n    public int integerReplacement(int n) {\\n        if(n == 1){return 0;}\\n        if(n == Integer.MAX_VALUE){\\n            n--;\\n            return integerReplacement(n);\\n        }\\n        if(n%2 == 0){\\n            n = n/2;\\n            return 1+integerReplacement(n);\\n        }\\n        if(n%2! = 0){\\n            return 1+Math.min(integerReplacement(n+1), integerReplacement(n-1));\\n        }\\n        return 1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```class Solution {\\n    public int integerReplacement(int n) {\\n        if(n == 1){return 0;}\\n        if(n == Integer.MAX_VALUE){\\n            n--;\\n            return integerReplacement(n);\\n        }\\n        if(n%2 == 0){\\n            n = n/2;\\n            return 1+integerReplacement(n);\\n        }\\n        if(n%2! = 0){\\n            return 1+Math.min(integerReplacement(n+1), integerReplacement(n-1));\\n        }\\n        return 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 122048,
                "title": "recursion-does-not-works-here-python-3",
                "content": "my code is below:\\n\\nsimple recursion of python 3, it works well on pycharm, but it does not work at leetcode, it shows that they cannot found the so called function integerReplacement(), even if I just use the default name\\n\\nclass Solution:\\n    def integerReplacement(self, n):\\n        if n == 1: return 0\\n        if n == 2: return 1\\n        if n == 3:\\n            return 2\\n        else:\\n            if n % 2 == 0:\\n                return 1+integerReplacement(self,n / 2)\\n            else:\\n                return 1+min(integerReplacement(self,n + 1), integerReplacement(self, n - 1))",
                "solutionTags": [],
                "code": "my code is below:\\n\\nsimple recursion of python 3, it works well on pycharm, but it does not work at leetcode, it shows that they cannot found the so called function integerReplacement(), even if I just use the default name\\n\\nclass Solution:\\n    def integerReplacement(self, n):\\n        if n == 1: return 0\\n        if n == 2: return 1\\n        if n == 3:\\n            return 2\\n        else:\\n            if n % 2 == 0:\\n                return 1+integerReplacement(self,n / 2)\\n            else:\\n                return 1+min(integerReplacement(self,n + 1), integerReplacement(self, n - 1))",
                "codeTag": "Java"
            },
            {
                "id": 88062,
                "title": "is-this-greedy-solution-correct",
                "content": "This solution is accepted by the online judge system. But I cannot figure out why.\\n\\n\\n```javascript\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar integerReplacement = function(n) {\\n    if (n < 4) return [0, 0, 1, 2][n];\\n    switch (n % 4) {\\n        case 0: case 2: return integerReplacement(n / 2) + 1;\\n        case 1: return integerReplacement((n - 1) / 4) + 3;\\n        case 3: return integerReplacement((n + 1) / 4) + 3;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar integerReplacement = function(n) {\\n    if (n < 4) return [0, 0, 1, 2][n];\\n    switch (n % 4) {\\n        case 0: case 2: return integerReplacement(n / 2) + 1;\\n        case 1: return integerReplacement((n - 1) / 4) + 3;\\n        case 3: return integerReplacement((n + 1) / 4) + 3;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3726753,
                "title": "very-easy-dp-approach-c-beats-100",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nEverything is given in the problem description, just implement the **recursive function** and Memoize the code, to avoid TLE.\\n# Complexity\\n- Time complexity:O(Log(N))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    unordered_map<long long,long long> dp;\\n    long long solve(long long n)\\n    {\\n        if(n==1) return 0;\\n        if(dp.find(n)!=dp.end()) return dp[n];\\n        if(n%2==0) return dp[n] = 1+solve(n/2);\\n        return dp[n] = min(1+solve(n+1),1+solve(n-1));\\n    }\\n    int integerReplacement(int N) {\\n        long long n = N;\\n        return solve(n); \\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/6e5a84cf-8ff9-4852-94e8-7f1b5bd46ed7_1688639315.0774443.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    unordered_map<long long,long long> dp;\\n    long long solve(long long n)\\n    {\\n        if(n==1) return 0;\\n        if(dp.find(n)!=dp.end()) return dp[n];\\n        if(n%2==0) return dp[n] = 1+solve(n/2);\\n        return dp[n] = min(1+solve(n+1),1+solve(n-1));\\n    }\\n    int integerReplacement(int N) {\\n        long long n = N;\\n        return solve(n); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3614937,
                "title": "java-hashmap-solution-using-memoization",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have three different cases to account for:\\n- n == 1 (Base case)\\n- n % 2 == 0 (n is even)\\n- n % 2 != 0 (n is odd)\\n\\n## Key points:\\n- n is stated to be a positive integer (n > 0) => We <b>don\\'t</b> need to validate input (i.e. What happens if we pass in a negative? What if we don\\'t pass in an integer?)\\n- We want the <b>minimum</b> of steps\\n- With recursion we may want to introduce <b>memoization</b> in order to reduce the amount of repeated work \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Create a HashMap to store memoized results (Key = n, Value = number of \\'steps\\' at n to reach 1)\\n- If n == 1 (Base case)\\n    - We return 0 (no steps are needed to reach \\'1\\')\\n- Check if n is in our map, if so return map.get(n)\\n- Else if n % 2 == 0 (n is even)\\n    - We divide n by 2 and pass the result into our recursive function\\n    - We add 1 to our count to account for the \\'step\\' we just took\\n    - Place result in HashMap\\n- Else (n is odd)\\n    - We add 1 to n and we subtract 1 from n and pass each of these results into our recursive function\\n    - We return the minimum of the above result\\n    - We add 1 to our count to account for the \\'step\\' we just took\\n    - Place result in HashMap\\n- Return map.get(n)\\n    \\n# Complexity\\n- Time complexity: $$O(N)$$. Each number, starting at 2 up to and including N, is visited, computed and then stored for O(1) access later on.\\n\\n- Space complexity: $$O(N)$$. The size of the stack in memory is proportional to N. Also, the memoization hash table is used, which occupies O(N)space.\\n\\n# Code\\n```\\nclass Solution {\\n  Map<Integer, Integer> map = new HashMap<>();\\n  public int integerReplacement(int n){\\n    if (n == Integer.MAX_VALUE) return 32; //n = 2^31-1;\\n    if(n == 1) return 0;\\n    if(map.containsKey(n)) {\\n      return map.get(n);\\n    } else if(n % 2 == 0) {\\n      map.put(n, integerReplacement(n/2) + 1);\\n    } else {\\n      map.put(n, Math.min(integerReplacement(n+1), integerReplacement(n-1)) + 1);\\n    }\\n    return map.get(n);\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  Map<Integer, Integer> map = new HashMap<>();\\n  public int integerReplacement(int n){\\n    if (n == Integer.MAX_VALUE) return 32; //n = 2^31-1;\\n    if(n == 1) return 0;\\n    if(map.containsKey(n)) {\\n      return map.get(n);\\n    } else if(n % 2 == 0) {\\n      map.put(n, integerReplacement(n/2) + 1);\\n    } else {\\n      map.put(n, Math.min(integerReplacement(n+1), integerReplacement(n-1)) + 1);\\n    }\\n    return map.get(n);\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3559928,
                "title": "simple-c-solution-using-memoization",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(unsigned int n,unordered_map<unsigned int,int> &dp){\\n        if(n==1){\\n            return 0;\\n        }\\n        if(dp.find(n)!=dp.end()){\\n            return dp[n];\\n        }\\n        if(n%2){\\n            return dp[n] = min(solve(n-1,dp),solve(n+1,dp))+1;\\n        }\\n        else{\\n            return dp[n] = solve(n/2,dp)+1;\\n        }\\n    }\\n    int integerReplacement(int n) {\\n        unordered_map<unsigned int,int> dp;\\n        return solve(n,dp);\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int solve(unsigned int n,unordered_map<unsigned int,int> &dp){\\n        if(n==1){\\n            return 0;\\n        }\\n        if(dp.find(n)!=dp.end()){\\n            return dp[n];\\n        }\\n        if(n%2){\\n            return dp[n] = min(solve(n-1,dp),solve(n+1,dp))+1;\\n        }\\n        else{\\n            return dp[n] = solve(n/2,dp)+1;\\n        }\\n    }\\n    int integerReplacement(int n) {\\n        unordered_map<unsigned int,int> dp;\\n        return solve(n,dp);\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3136582,
                "title": "java-c-python-easiest-solution-intuitive-without-binary-arithmetic-oms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nif n is odd...we first check  if we increment it by 1 is its half divisible by 2...this is bcoz if its divisible by 2 we get to divide it in the next step which reduces the size of n to n/2 which is alot of reduction...on the contrary if its half isnt divisble by 2 it will lead to extra operations\\n\\non the other hand when n is 3 this approach does give an exception...bcoz using the above approach we first increment n to 4 then divide it by to then decrement it which is a total of 3 operations(3+1..4/2...2-1)...but 3-1-1 is taking only 2 operations to reach 1...thus we make 3 a base case\\n\\nother than this 2147483647 is a base case as it gives TLE\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int count = 0;\\n        while(n != 1){\\n            if(n == 2147483647) return 32;\\n            if(n == 3) return count+2;\\n            if(n % 2 == 0) n /= 2;\\n            else if(((n + 1)/2)%2 == 0) n += 1;\\n            else n-=1;\\n                count++;\\n            }\\n            return count;\\n        }\\n        \\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int count = 0;\\n        while(n != 1){\\n            if(n == 2147483647) return 32;\\n            if(n == 3) return count+2;\\n            if(n % 2 == 0) n /= 2;\\n            else if(((n + 1)/2)%2 == 0) n += 1;\\n            else n-=1;\\n                count++;\\n            }\\n            return count;\\n        }\\n        \\n    }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2863116,
                "title": "simple-python-solution",
                "content": "```\\nclass Solution:\\n    def dp(self,n):\\n        if n<1:\\n            return float(\"infinity\")\\n        if n==1:\\n            return 0\\n        if n%2==0:\\n            return self.dp(n//2)+1\\n        else:\\n            x=self.dp(n+1)+1\\n            y=self.dp(n-1)+1\\n            return min(x,y)\\n    def integerReplacement(self, n: int) -> int:\\n        return self.dp(n)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def dp(self,n):\\n        if n<1:\\n            return float(\"infinity\")\\n        if n==1:\\n            return 0\\n        if n%2==0:\\n            return self.dp(n//2)+1\\n        else:\\n            x=self.dp(n+1)+1\\n            y=self.dp(n-1)+1\\n            return min(x,y)\\n    def integerReplacement(self, n: int) -> int:\\n        return self.dp(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2644141,
                "title": "easy-understand-python-solution-with-explanation-beats-91-of-the-python-solution",
                "content": "# Intuition\\nAs the problem statement states that we have only two operations that we could make, In one operation where it is an even number we are allowed to reduce it n//2, But the real con=mplexity of the problem lies in the odd number where we have to **choose the minimum of the eitheir options.** So it spretty intuitive that we go for each one and find what is the minimum of them.\\n\\n# Approach\\nSo my approach is that we cache the computations we are making to avoid the time complexity jumping off. And use recursion for considering the both cases. \\n\\n# Complexity\\n- Time complexity:\\nTime Complexity becomes O(logn) with base 2\\n\\n- Space complexity:\\nO(n)\\nfor caching\\n                            Hope this helps\\n# Code\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        dp={}\\n        dp[0]=0\\n        dp[1]=0\\n        moves=0\\n        def recur(n):\\n            if n in dp:\\n                return dp[n]\\n            if n%2==0:\\n                dp[n]=1+recur(n//2)\\n            else:\\n                dp[n]=1+min(recur(n-1),recur(n+1))\\n            return dp[n]\\n        return recur(n)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        dp={}\\n        dp[0]=0\\n        dp[1]=0\\n        moves=0\\n        def recur(n):\\n            if n in dp:\\n                return dp[n]\\n            if n%2==0:\\n                dp[n]=1+recur(n//2)\\n            else:\\n                dp[n]=1+min(recur(n-1),recur(n+1))\\n            return dp[n]\\n        return recur(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2251672,
                "title": "c-solution-with-explanation-bit-manipulation",
                "content": "The condition when we have to divide by 2 is pretty straight-forward. The only thing we have to figure out is when to add 1 vs when to subtract 1. \\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        int result = 0;\\n        long long num = n; \\n        while(num > 1){\\n            if(num & 1) {\\n                cout << num;\\n                \\n\\t\\t\\t\\t// ----------------- Explanation -----------------\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//\\t   Adding 1 :- \\n\\t\\t\\t\\t//     Adding 1 will be helpful when there are multiple 1\\'s at the ending because adding 1 \\n\\t\\t\\t\\t//     will flip multiple bits from end reducing our work in further iterations.\\n\\t\\t\\t\\t//     Example:- 23 (10111) + 1(00001) = 24(11000)\\n\\t\\t\\t\\t//     In next 3 iterations we\\'ll have to take single step of dividing it by 2.\\n\\t\\t\\t\\t//     ---- Edge Case ----\\n\\t\\t\\t\\t//     3 is an edge case because there adding 1 will take us to 4 which will then take us to 2.\\n\\t\\t\\t\\t//     whereas we could have directly gone to 2 by subtracting 1, so we\\'ll have to consider that.\\n\\t\\t\\t\\t//     Condition can be written as: if((num & 2) && (num > 3 || (num & (num + 1))))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// \\t   Subtracting 1:-\\n                //     In this case the the 2nd last bit is already 0, adding 1 will be a bad idea as we\\'ll\\n                //     have to take 2 steps in next iteration as well, so without disturbing the 2nd last bit\\n                //     we just flip the last bit by subtracting 1.\\n\\t\\t\\t\\t//     Example:- 21 (10101) - 1(00001) = 24(10100)\\n\\t\\t\\t\\t//     The next 2 iteration we\\'ll have just single step of dividing by 2.\\n                \\n                num += ((num & 2) && (num > 3 || (num & (num + 1)))) ? 1 : -1;\\n                cout << num << endl;\\n            }\\n            else\\n                num = num >> 1;\\n            result++;\\n        }\\n        return result;\\n    }\\n};\\n```\\n\\n**Hope this helps. If you have any queries or suggestions do let me know. \\nIf you do like the solution please upvote.**",
                "solutionTags": [
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        int result = 0;\\n        long long num = n; \\n        while(num > 1){\\n            if(num & 1) {\\n                cout << num;\\n                \\n\\t\\t\\t\\t// ----------------- Explanation -----------------\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//\\t   Adding 1 :- \\n\\t\\t\\t\\t//     Adding 1 will be helpful when there are multiple 1\\'s at the ending because adding 1 \\n\\t\\t\\t\\t//     will flip multiple bits from end reducing our work in further iterations.\\n\\t\\t\\t\\t//     Example:- 23 (10111) + 1(00001) = 24(11000)\\n\\t\\t\\t\\t//     In next 3 iterations we\\'ll have to take single step of dividing it by 2.\\n\\t\\t\\t\\t//     ---- Edge Case ----\\n\\t\\t\\t\\t//     3 is an edge case because there adding 1 will take us to 4 which will then take us to 2.\\n\\t\\t\\t\\t//     whereas we could have directly gone to 2 by subtracting 1, so we\\'ll have to consider that.\\n\\t\\t\\t\\t//     Condition can be written as: if((num & 2) && (num > 3 || (num & (num + 1))))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// \\t   Subtracting 1:-\\n                //     In this case the the 2nd last bit is already 0, adding 1 will be a bad idea as we\\'ll\\n                //     have to take 2 steps in next iteration as well, so without disturbing the 2nd last bit\\n                //     we just flip the last bit by subtracting 1.\\n\\t\\t\\t\\t//     Example:- 21 (10101) - 1(00001) = 24(10100)\\n\\t\\t\\t\\t//     The next 2 iteration we\\'ll have just single step of dividing by 2.\\n                \\n                num += ((num & 2) && (num > 3 || (num & (num + 1)))) ? 1 : -1;\\n                cout << num << endl;\\n            }\\n            else\\n                num = num >> 1;\\n            result++;\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1812651,
                "title": "java-0ms-faster-than-100-picture-explanation-and-intuition",
                "content": "We assume the every number in three forms\\n1 4x+1\\n2 4x+2\\n3 4x+3\\n\\nif number is 4x+2 it is even so we just divide it by 2\\n\\n* --->If it is 4x+3 :\\n![image](https://assets.leetcode.com/users/images/b6172259-ff2b-47df-b0de-e2fe639e2540_1646217551.1041272.png)\\n\\n\\n\\n* --->If it is 4x+1\\n![image](https://assets.leetcode.com/users/images/1021d85b-9ea6-4d58-8106-55403fe0d912_1646216052.4498491.png)\\n\\n* ----> The only corner case is when the number is 3 the above method doesnot work . So we will add 2 to the count and break the loop.\\n\\n        \\n\\t  while(l>1) {\\n\\t\\t\\n\\t\\t  if(l==3) { count = count +2; break ; }\\n\\t\\t  \\n\\t\\t  if(l % 2 ==0) l = l / 2;\\n\\t\\t\\t  \\n\\t\\t  else if(l % 4 == 1)  l = l - 1; \\n\\t\\t\\t\\t  \\n\\t\\t  else if(l % 4 == 3) l = l + 1;\\n\\t\\t  \\n\\t\\t  count += 1;\\n\\t  }\\n\\t  \\n\\t  return count ;\\n",
                "solutionTags": [],
                "code": "We assume the every number in three forms\\n1 4x+1\\n2 4x+2\\n3 4x+3\\n\\nif number is 4x+2 it is even so we just divide it by 2\\n\\n* --->If it is 4x+3 :\\n![image](https://assets.leetcode.com/users/images/b6172259-ff2b-47df-b0de-e2fe639e2540_1646217551.1041272.png)\\n\\n\\n\\n* --->If it is 4x+1\\n![image](https://assets.leetcode.com/users/images/1021d85b-9ea6-4d58-8106-55403fe0d912_1646216052.4498491.png)\\n\\n* ----> The only corner case is when the number is 3 the above method doesnot work . So we will add 2 to the count and break the loop.\\n\\n        \\n\\t  while(l>1) {\\n\\t\\t\\n\\t\\t  if(l==3) { count = count +2; break ; }\\n\\t\\t  \\n\\t\\t  if(l % 2 ==0) l = l / 2;\\n\\t\\t\\t  \\n\\t\\t  else if(l % 4 == 1)  l = l - 1; \\n\\t\\t\\t\\t  \\n\\t\\t  else if(l % 4 == 3) l = l + 1;\\n\\t\\t  \\n\\t\\t  count += 1;\\n\\t  }\\n\\t  \\n\\t  return count ;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1804356,
                "title": "0-ms-c-easy-solution",
                "content": "Steps :\\n1. if n is even , Simply divide it by 2\\n2. if n is odd ,  we have to replace it by either n+1 or n-1 , which results in minimum number of operation. To decide this check which one of the following  (n+1)/2 or (n-1)/2 results in even number , replace it by that operation.\\n\\n**Example :**\\n\\n3 -> 2 ->1 , ans  = 2\\n4 -> 2 ->1 , ans = 2\\n10 -> 5 ->4 ->2->1 , ans = 4\\n11 -> 12 -> 6 ->3 ->2 ->1 ,  ans = 5\\n50 -> 25 ->24 ->12 -> 6->3 ->2->1 , ans = 7\\n\\n**Solution:**\\n\\n```\\nclass Solution {\\npublic:\\n\\n    int integerReplacement(int num) {\\n     \\n     int op = 0;\\n     long long n = num; \\n        while(n>1){\\n       \\n            if(n==3){\\n                op = op+2;\\n                break;\\n            }\\n            if(n%2==0){\\n                n = n>>1;\\n              \\n            }\\n            else{\\n                long long n1 = (n+1)/2;\\n               \\n                if(n1%2==0){\\n                    n = n+1;\\n                }\\n                else{\\n                    n = n-1;\\n                }\\n            }\\n              ++op;\\n        }\\n        \\n        return op;\\n        \\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int integerReplacement(int num) {\\n     \\n     int op = 0;\\n     long long n = num; \\n        while(n>1){\\n       \\n            if(n==3){\\n                op = op+2;\\n                break;\\n            }\\n            if(n%2==0){\\n                n = n>>1;\\n              \\n            }\\n            else{\\n                long long n1 = (n+1)/2;\\n               \\n                if(n1%2==0){\\n                    n = n+1;\\n                }\\n                else{\\n                    n = n-1;\\n                }\\n            }\\n              ++op;\\n        }\\n        \\n        return op;\\n        \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1562591,
                "title": "recursion-memoization-100-faster",
                "content": "class Solution {\\npublic:\\n\\n    int intergerRep(long long n,unordered_map<long long,long long> &dp){\\n        //Base cases\\n        if(n==1){\\n            return 0;\\n        }\\n        if(n==0){\\n            return 1;\\n        }\\n        \\n        //check if already calculated\\n        if(dp[n]){\\n            //if calculated then return it\\n            return dp[n];\\n        }\\n        \\n        //if not calculated then calculate using choices\\n        \\n        //choices\\n        if(n%2==0){//if even\\n            return  dp[n] = 1+ intergerRep(n/2,dp);\\n        }else{//if odd\\n            return  dp[n] = (1 + min(intergerRep(n-1,dp),intergerRep(n+1,dp)));\\n        }\\n        \\n    }\\n    \\n    int integerReplacement(int n) {\\n        \\n       unordered_map<long long , long long > dp;//to store ovelapping subproblems \\n       \\n       return intergerRep(n,dp);\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n\\n    int intergerRep(long long n,unordered_map<long long,long long> &dp){\\n        //Base cases\\n        if(n==1){\\n            return 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1545772,
                "title": "c-greedy-solution-100-faster",
                "content": "class Solution {\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        long long m=n;\\n        int cnt=0;\\n        while(m!=1)\\n        {\\n            if(m%2==0)m/=2;\\n            else\\n            {\\n                if(m==3)\\n                {\\n                    m=2;\\n                }    \\n                else\\n                {\\n                    if((m+1)%4==0)\\n                    {\\n                        m+=1;\\n                    }\\n                    else m-=1;\\n                }\\n            }\\n            cnt++;\\n        }\\n        return cnt;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int integerReplacement(int n) \\n    {\\n        long long m=n;\\n        int cnt=0;\\n        while(m!=1)\\n        {\\n            if(m%2==0)m/=2;\\n            else\\n            {\\n                if(m==3)\\n                {\\n                    m=2;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1232631,
                "title": "simple-c",
                "content": "```class Solution {\\npublic:\\n    long integerReplacement(long n){\\n        if(n==1)return 0;\\n        if(n&1)\\n            return 1+min(integerReplacement(n+1),integerReplacement(n-1));\\n        return 1+integerReplacement(n/2);\\n    }\\n    int integerReplacement(int n) {\\n        return integerReplacement(long(n));\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    long integerReplacement(long n){\\n        if(n==1)return 0;\\n        if(n&1)\\n            return 1+min(integerReplacement(n+1),integerReplacement(n-1));\\n        return 1+integerReplacement(n/2);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1185136,
                "title": "java-0-ms-based-on-2-least-significant-bits-along-with-comments",
                "content": "class Solution {\\n    public int integerReplacement(int n) {\\n        int count =0;\\n        // bitmask - *0,01,11 (possible 2 least significant bits)\\n        while(n >1){\\n        if((n & 1) ==0 || n == Integer.MAX_VALUE) //*0, one edge case for overflow issue\\n            n = n >> 1;\\n        else if(n ==3 || (n % 4) ==1 )  //01\\n            n -=1;   //making bitmask to 00\\n        else //11\\n           n +=1;  //making bitmask to 00\\n        count++;\\n     }\\n        return count;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int integerReplacement(int n) {\\n        int count =0;\\n        // bitmask - *0,01,11 (possible 2 least significant bits)\\n        while(n >1){\\n        if((n & 1) ==0 || n == Integer.MAX_VALUE) //*0, one edge case for overflow issue\\n            n = n >> 1;\\n        else if(n ==3 || (n % 4) ==1 )  //01\\n            n -=1;   //making bitmask to 00\\n        else //11\\n           n +=1;  //making bitmask to 00\\n        count++;\\n     }",
                "codeTag": "Java"
            },
            {
                "id": 1137197,
                "title": "c-100-faster",
                "content": "int integerReplacement(int n){\\n    int count= 0;\\n        unsigned int k;\\n        k=n;\\n      while(k>1){\\n          if((k%2)==0){\\n              k = k/2;\\n          }\\n          else if(k%4==1 ||k==3){\\n              k = k-1;\\n          }\\n          else{\\n              k+=1;\\n          }\\n          count++;\\n      } \\n        return count;\\n}",
                "solutionTags": [
                    "C"
                ],
                "code": "int integerReplacement(int n){\\n    int count= 0;\\n        unsigned int k;\\n        k=n;\\n      while(k>1){\\n          if((k%2)==0){\\n              k = k/2;\\n          }\\n          else if(k%4==1 ||k==3){\\n              k = k-1;\\n          }\\n          else{\\n              k+=1;\\n          }\\n          count++;\\n      } \\n        return count;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1028648,
                "title": "swift-o-logn-solution-with-comments",
                "content": "```\\nclass Solution {\\n    func integerReplacement(_ n: Int) -> Int {\\n        var res = 0, n = n\\n        while n != 1 {\\n            if n % 2 == 0 {\\n                n /= 2\\n                // when n is odd we are trying to see which operation removes the most zeros and perform that\\n                // the last two bits can either be 11 or 01 when the number is odd\\n                // the other 2 possibilities 00 and 10 are even numbers\\n                // for 11, adding 1 is better as it would make it 00 and for 01 subtracting 1 would be make 00\\n                // we can test if the last two bits are 11 by performing an & operation with 3 if the result is 1\\n                // then the last two bits are 01 \\n            } else if n == 3 || (n & 3 == 1) {\\n                n -= 1\\n            } else {\\n                n += 1\\n            }\\n            res += 1\\n        }\\n        return res\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func integerReplacement(_ n: Int) -> Int {\\n        var res = 0, n = n\\n        while n != 1 {\\n            if n % 2 == 0 {\\n                n /= 2\\n                // when n is odd we are trying to see which operation removes the most zeros and perform that\\n                // the last two bits can either be 11 or 01 when the number is odd\\n                // the other 2 possibilities 00 and 10 are even numbers\\n                // for 11, adding 1 is better as it would make it 00 and for 01 subtracting 1 would be make 00\\n                // we can test if the last two bits are 11 by performing an & operation with 3 if the result is 1\\n                // then the last two bits are 01 \\n            } else if n == 3 || (n & 3 == 1) {\\n                n -= 1\\n            } else {\\n                n += 1\\n            }\\n            res += 1\\n        }\\n        return res\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 898189,
                "title": "c-0ms-with-proof-by-mathematical-induction",
                "content": "Code:\\n```\\nint integerReplacement(int n) {\\n\\treturn unsignedVer((unsigned)n);\\n}\\nint unsignedVer(unsigned n) {\\n\\tint steps = 0;\\n\\twhile (n % 2==0) {\\n\\t\\t++steps;\\n\\t\\tn /= 2;\\n\\t}\\n\\tif (n == 1) return steps;\\n\\tif (n == 3) return steps + 2;\\n\\treturn steps + 3 + integerReplacement((n+1)>>2);\\n}\\n```\\nProof:\\nF(n) is the return value of the function. Prove by induction that\\n\\n- |F(k)-F(k+1)| <= 1\\n\\nWhen parameter is less than 2N, suppose the result is true, then\\n\\n- F(2N) = 1 + F(N)\\n- F(2N+1) = 1 + min(F(N), F(N+1))\\n- F(2N+2) = 1 + F(N+1)\\n\\nEasy to check the result is true. So we can find,\\n\\n- F(4k+1) = min(2 + F(2k), 2 + F(2k+1)) = min(3 + F(k), 4 + F(k+1)) = 3 + F(k)\\n- F(4k+3) = 3 + F(k+1)\\n\\nor equivalently, F(2n+1) = 3 + F( floor( (n+1)/4 ) )\\n",
                "solutionTags": [],
                "code": "```\\nint integerReplacement(int n) {\\n\\treturn unsignedVer((unsigned)n);\\n}\\nint unsignedVer(unsigned n) {\\n\\tint steps = 0;\\n\\twhile (n % 2==0) {\\n\\t\\t++steps;\\n\\t\\tn /= 2;\\n\\t}\\n\\tif (n == 1) return steps;\\n\\tif (n == 3) return steps + 2;\\n\\treturn steps + 3 + integerReplacement((n+1)>>2);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 873728,
                "title": "c-recursive-dp-bitwise-math-solution",
                "content": "**Rcursive DP Solution:**\\n\\nRuntime: 4 ms, faster than 52.98% of C++ online submissions for Integer Replacement.\\nMemory Usage: 10.5 MB, less than 7.60% of C++ online submissions for Integer Replacement.\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    unordered_map<int,int>dp;\\n    \\n    int replaceInteger(int n)\\n    {\\n        // retun already calculated result\\n        if(dp.count(n)) return dp[n];\\n        \\n        // If n is odd get 1 + min value between n+1 and n-1 recursive result\\n        if(n&1==1)\\n            dp[n] = 1 + min(replaceInteger(n+1),replaceInteger(n-1));\\n        \\n        // If n is even 1 + recursive result of n/2\\n        else\\n            dp[n] = 1 + replaceInteger(n/2);\\n\\n        return dp[n];\\n    }\\n    \\n    int integerReplacement(int n) {\\n        \\n        // Base condition for n=1 result 0 \\n        dp[1] = 0;\\n        \\n        // Base condition for n=INT_MAX result 32         \\n        dp[INT_MAX] = 32;\\n        \\n        return replaceInteger(n);\\n    }\\n};\\n```\\n\\n**Bitwise Math Solution:**\\n\\nRuntime: 0 ms, faster than 100.00% of C++ online submissions for Integer Replacement.\\nMemory Usage: 6.2 MB, less than 29.94% of C++ online submissions for Integer Replacement.\\n\\n```\\nclass Solution {\\npublic:\\n\\n    int integerReplacement(int n) {\\n \\n        // Base case n=INT_MAX result 32\\n        if(n==INT_MAX) return 32;\\n        \\n        // count of minimum replacement\\n        int count = 0;\\n        \\n        // Loop until n=1\\n        while(n!=1)\\n        {\\n            // If n is odd\\n            if(n&1==1)\\n            {\\n                // As our task is to find minimum replacement count we want to make n small in each step as much as we can,\\n                // Note: both x = n-1 and y = n+1 are even but we should choose one of them who has x/2 == even or y/2==even\\n                // cause in this way we can furthur reduce value of x or y in to x/2 or y/2 if x/2 or y/2 is even\\n                // So if (n-1)/2 is even then we reduce n by 1 \\n                // n = 3 is an exception case\\n                if((((n-1)>>1)&1)!=1 || n==3)   n--;\\n                \\n                // If n+1/2 is even then we increase n by 1\\n                else n++;                \\n            }\\n            \\n            // If n is even then divide n by 2\\n            else n = n>>1;\\n            \\n            count++;\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    unordered_map<int,int>dp;\\n    \\n    int replaceInteger(int n)\\n    {\\n        // retun already calculated result\\n        if(dp.count(n)) return dp[n];\\n        \\n        // If n is odd get 1 + min value between n+1 and n-1 recursive result\\n        if(n&1==1)\\n            dp[n] = 1 + min(replaceInteger(n+1),replaceInteger(n-1));\\n        \\n        // If n is even 1 + recursive result of n/2\\n        else\\n            dp[n] = 1 + replaceInteger(n/2);\\n\\n        return dp[n];\\n    }\\n    \\n    int integerReplacement(int n) {\\n        \\n        // Base condition for n=1 result 0 \\n        dp[1] = 0;\\n        \\n        // Base condition for n=INT_MAX result 32         \\n        dp[INT_MAX] = 32;\\n        \\n        return replaceInteger(n);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\n    int integerReplacement(int n) {\\n \\n        // Base case n=INT_MAX result 32\\n        if(n==INT_MAX) return 32;\\n        \\n        // count of minimum replacement\\n        int count = 0;\\n        \\n        // Loop until n=1\\n        while(n!=1)\\n        {\\n            // If n is odd\\n            if(n&1==1)\\n            {\\n                // As our task is to find minimum replacement count we want to make n small in each step as much as we can,\\n                // Note: both x = n-1 and y = n+1 are even but we should choose one of them who has x/2 == even or y/2==even\\n                // cause in this way we can furthur reduce value of x or y in to x/2 or y/2 if x/2 or y/2 is even\\n                // So if (n-1)/2 is even then we reduce n by 1 \\n                // n = 3 is an exception case\\n                if((((n-1)>>1)&1)!=1 || n==3)   n--;\\n                \\n                // If n+1/2 is even then we increase n by 1\\n                else n++;                \\n            }\\n            \\n            // If n is even then divide n by 2\\n            else n = n>>1;\\n            \\n            count++;\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 801961,
                "title": "simple-c",
                "content": "only thing to find is if we add 1 or substract 1 for the odd no:\\nif (n+1%4 ==0): n=n+1 otherwise n=n-1; \\n\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(long long int n) {\\n        if(n==0)\\n            return 1;\\n        if(n==1)\\n            return 0;\\n\\t\\t\\tlong long int count=0; \\n        while(n!=1){\\n            if(n%2==0){\\n                n=n/2;\\n            }\\n            else{\\n                if(n==3)\\n                    n=2;\\n                else if((n+1) % 4==0)\\n                    n=n+1;\\n                else\\n                    n=n-1;\\n            }\\n            count++;\\n        }\\n       return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(long long int n) {\\n        if(n==0)\\n            return 1;\\n        if(n==1)\\n            return 0;\\n\\t\\t\\tlong long int count=0; \\n        while(n!=1){\\n            if(n%2==0){\\n                n=n/2;\\n            }\\n            else{\\n                if(n==3)\\n                    n=2;\\n                else if((n+1) % 4==0)\\n                    n=n+1;\\n                else\\n                    n=n-1;\\n            }\\n            count++;\\n        }\\n       return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 744439,
                "title": "simple-recursive-solution-nothing-fancy",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE)\\n            return 32;\\n        \\n        return helper(n,0);\\n    }\\n    \\n    public int helper(int n,int replacements) {\\n        if (n == 1)\\n            return replacements;\\n        \\n        if (n % 2 == 1)\\n            return Math.min(helper(n + 1,replacements + 1),helper(n - 1,replacements + 1));\\n        else\\n            return helper(n / 2,replacements + 1);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE)\\n            return 32;\\n        \\n        return helper(n,0);\\n    }\\n    \\n    public int helper(int n,int replacements) {\\n        if (n == 1)\\n            return replacements;\\n        \\n        if (n % 2 == 1)\\n            return Math.min(helper(n + 1,replacements + 1),helper(n - 1,replacements + 1));\\n        else\\n            return helper(n / 2,replacements + 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 706015,
                "title": "python3-o-n-solution-integer-replacement",
                "content": "After implementing the original solution I realized I was implementing addition manually which is dumb. So I came up with the updated version.\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        ans = 0\\n        while n > 1:\\n            if n % 2:\\n                if n > 3 and n & 1 == 1 and (n >> 1) & 1 == 1:\\n                    n += 1\\n                else:\\n                    n -= 1\\n                ans += 1\\n            n //= 2\\n            ans += 1\\n        return ans\\n```\\n\\nOriginal solution:\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        ans = 0\\n        groups = [[k, len(list(g))] for k, g in itertools.groupby(map(int, bin(n)[2:]))]\\n        for i in range(len(groups)-1, 0, -1):\\n            k, glen = groups[i]\\n            if not glen:\\n                continue\\n            if not k:\\n                ans += glen\\n            elif glen == 1:\\n                ans += 2\\n            else:\\n                if groups[i-1][1] == 1:\\n                    ans += glen + 1\\n                    groups[i-1][1] = 0\\n                    groups[i-2][1] += 1\\n                else:\\n                    ans += glen + 2\\n        if groups[0][1] == 1:\\n            return ans\\n        return ans + groups[0][1] + int(groups[0][1] > 2)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        ans = 0\\n        while n > 1:\\n            if n % 2:\\n                if n > 3 and n & 1 == 1 and (n >> 1) & 1 == 1:\\n                    n += 1\\n                else:\\n                    n -= 1\\n                ans += 1\\n            n //= 2\\n            ans += 1\\n        return ans\\n```\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        ans = 0\\n        groups = [[k, len(list(g))] for k, g in itertools.groupby(map(int, bin(n)[2:]))]\\n        for i in range(len(groups)-1, 0, -1):\\n            k, glen = groups[i]\\n            if not glen:\\n                continue\\n            if not k:\\n                ans += glen\\n            elif glen == 1:\\n                ans += 2\\n            else:\\n                if groups[i-1][1] == 1:\\n                    ans += glen + 1\\n                    groups[i-1][1] = 0\\n                    groups[i-2][1] += 1\\n                else:\\n                    ans += glen + 2\\n        if groups[0][1] == 1:\\n            return ans\\n        return ans + groups[0][1] + int(groups[0][1] > 2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 588664,
                "title": "c-bit-manipulation-solution-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n\\tint integerReplacement(long n) {\\n\\t\\tint count = 0;\\n\\t\\twhile (1 != n) {\\n\\n\\t\\t\\t// If n is even, replace n with n / 2.\\n\\t\\t\\tif (0 == n % 2)\\n\\t\\t\\t\\tn >>= 12;\\n\\n\\t\\t\\t/*\\n\\t\\t\\tNow we need to decide which number to add 1, and which number to subtract 1.\\n\\t\\t\\t\\n\\t\\t\\tCase 1 - For 0bZZZZZZZZZ01 case, if we add +1 then we get a even number(0bZZZZZZZZZ10), but again on dividing we get\\n\\t\\t\\t\\t\\ta odd number(0bZZZZZZZZZZ1) then there is no point of adding +1, so we should add \\'-1\\' to it, to get a even\\n\\t\\t\\t\\t\\tnumber (0bZZZZZZZZZ00) and this time it will give us even number for next 2 steps will have minimum steps and\\n\\t\\t\\t\\t\\thence ideal.\\n\\n\\t\\t\\tCase 2 - For 0bZZZZZZZZZ11 case, if after adding +1 to the number we can a even number (0bZZZZZZZZZ00) on next 2 \\n\\t\\t\\t\\t\\titerations will have minimum steps and hence ideal.\\n\\t\\t\\t\\n\\t\\t\\tCorner case\\n\\t\\t\\t\\tCheck for n==3 is corner case. 3 is the only case where we don\\'t need to add +1, \\n\\t\\t\\t\\tbecause 3 + 1 = 4 - > 2 -> 1 (Steps - 3)\\n\\t\\t\\t\\tbut, optimal is 3 -1 -> 2 -> 1 (Steps - 2)\\n\\t\\t\\t*/\\n\\t\\t\\t\\n\\t\\t\\t// check for 0bZZZZZZZZZ01 or 0b000000011\\n\\t\\t\\telse if ((3 == n) || (0 == (n & (1 << 1))))\\n\\t\\t\\t\\tn = n - 1;\\n\\t\\t\\t// for 0bZZZZZZZZZ11 case \\n\\t\\t\\telse\\n\\t\\t\\t\\tn = n + 1;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\treturn count;\\n\\t}\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n\\tint integerReplacement(long n) {\\n\\t\\tint count = 0;\\n\\t\\twhile (1 != n) {\\n\\n\\t\\t\\t// If n is even, replace n with n / 2.\\n\\t\\t\\tif (0 == n % 2)\\n\\t\\t\\t\\tn >>= 12;\\n\\n\\t\\t\\t/*\\n\\t\\t\\tNow we need to decide which number to add 1, and which number to subtract 1.\\n\\t\\t\\t\\n\\t\\t\\tCase 1 - For 0bZZZZZZZZZ01 case, if we add +1 then we get a even number(0bZZZZZZZZZ10), but again on dividing we get\\n\\t\\t\\t\\t\\ta odd number(0bZZZZZZZZZZ1) then there is no point of adding +1, so we should add \\'-1\\' to it, to get a even\\n\\t\\t\\t\\t\\tnumber (0bZZZZZZZZZ00) and this time it will give us even number for next 2 steps will have minimum steps and\\n\\t\\t\\t\\t\\thence ideal.\\n\\n\\t\\t\\tCase 2 - For 0bZZZZZZZZZ11 case, if after adding +1 to the number we can a even number (0bZZZZZZZZZ00) on next 2 \\n\\t\\t\\t\\t\\titerations will have minimum steps and hence ideal.\\n\\t\\t\\t\\n\\t\\t\\tCorner case\\n\\t\\t\\t\\tCheck for n==3 is corner case. 3 is the only case where we don\\'t need to add +1, \\n\\t\\t\\t\\tbecause 3 + 1 = 4 - > 2 -> 1 (Steps - 3)\\n\\t\\t\\t\\tbut, optimal is 3 -1 -> 2 -> 1 (Steps - 2)\\n\\t\\t\\t*/\\n\\t\\t\\t\\n\\t\\t\\t// check for 0bZZZZZZZZZ01 or 0b000000011\\n\\t\\t\\telse if ((3 == n) || (0 == (n & (1 << 1))))\\n\\t\\t\\t\\tn = n - 1;\\n\\t\\t\\t// for 0bZZZZZZZZZ11 case \\n\\t\\t\\telse\\n\\t\\t\\t\\tn = n + 1;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\treturn count;\\n\\t}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 561988,
                "title": "python-solution-with-easy-explanation-greedy-and-dp",
                "content": "# Greedy Solution\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        count = 0\\n        while n > 1:\\n            count += 1\\n            if n & 1 == 0:\\n                n //=2\\n            else:\\n                if n == 3:\\n                    n -= 1\\n                elif n & 3 == 3:\\n                    n += 1\\n                else:\\n                    n -= 1\\n        return count\\n        \\n```\\n\\nIdea is pretty simple \\nIf number is even : ....1010 ( Any binary representation ends in 0 ) , its better to remove last bit and make it 1 step closer to 1 , hence, n // 2.\\n\\nWhat not very clear is what if its odd : ...01 or ...11 ( Ending in 01 / 11 . These are the only two possible representations for odd numbers ) \\nIf we have ...01 , adding 1 will make it ...10 ( no gain ) , subtracting will make it 00 ( gained by removing 1 bit ) , Hence for this case subtraction is better\\nIf we have ...11, adding 1 will make it  ..100( we removed ***atleast*** 2 1\\'s and will gain just 1 ( atleast 1 gain ) , subtracting will make it ...10 ( just gain of 1) . So in this case Adding will always perform same/better than subtracting . \\nAnd n == 3 is a special case ( Seperate Handling for that )\\n\\n\\n*********\\n\\n# DP Solution\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        return self.helper(n,0)\\n    def helper(self,num,steps_to_1):\\n        if num == 1:\\n            return steps_to_1\\n    \\n        if num % 2 == 0:\\n            return self.helper(num//2,steps_to_1+1)\\n        else:\\n            return min( self.helper(num+1, steps_to_1+1), self.helper(num-1,steps_to_1+1)  )\\n```\\n\\nFirst code shows Recursive Solution and Second one shows modifications done to First Solution to make it DP ( Memoization ) Solution \\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        self.cache = dict() # down to up steps , up to down steps is tracked using steps_to_1\\n        return self.helper(n,0)\\n    def helper(self,num,steps_to_1):\\n        \\n        if num in self.cache:\\n            return self.cache[num] + steps_to_1\\n        if num == 1:\\n            return steps_to_1\\n    \\n        if num % 2 == 0:\\n            rv = self.helper(num//2,steps_to_1+1)    \\n        else:\\n            rv = min( self.helper(num+1, steps_to_1+1), self.helper(num-1,steps_to_1+1)  )\\n            \\n        self.cache[num] = rv-steps_to_1\\n        return rv\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        count = 0\\n        while n > 1:\\n            count += 1\\n            if n & 1 == 0:\\n                n //=2\\n            else:\\n                if n == 3:\\n                    n -= 1\\n                elif n & 3 == 3:\\n                    n += 1\\n                else:\\n                    n -= 1\\n        return count\\n        \\n```\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        return self.helper(n,0)\\n    def helper(self,num,steps_to_1):\\n        if num == 1:\\n            return steps_to_1\\n    \\n        if num % 2 == 0:\\n            return self.helper(num//2,steps_to_1+1)\\n        else:\\n            return min( self.helper(num+1, steps_to_1+1), self.helper(num-1,steps_to_1+1)  )\\n```\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        self.cache = dict() # down to up steps , up to down steps is tracked using steps_to_1\\n        return self.helper(n,0)\\n    def helper(self,num,steps_to_1):\\n        \\n        if num in self.cache:\\n            return self.cache[num] + steps_to_1\\n        if num == 1:\\n            return steps_to_1\\n    \\n        if num % 2 == 0:\\n            rv = self.helper(num//2,steps_to_1+1)    \\n        else:\\n            rv = min( self.helper(num+1, steps_to_1+1), self.helper(num-1,steps_to_1+1)  )\\n            \\n        self.cache[num] = rv-steps_to_1\\n        return rv\\n```",
                "codeTag": "Java"
            },
            {
                "id": 554464,
                "title": "easy-to-understand-java-soln-beats-100-in-runtime-memory",
                "content": "# Idea\\n\\nWhen `n` is even there is only one choice - divide by 2.\\n\\nOtherwise we have two choices: add 1 or sub 1. Divide & rule gives best result if we choose between +/- such that the outcome is divisible by 4. \\n\\n*There is one exception to this rule. When n == 3. For these cases we use precomuted results stored in an array.*\\n\\n*Also to pass the test case where n == Integer.MAX_VALUE, I am making use of an auxilary method.*\\n\\nEnjoy!\\n\\n```\\nclass Solution {\\n    int[] sol = new int[]{0,0,1,2,2};\\n    \\n    public int integerReplacement(int n) {\\n        if(n==Integer.MAX_VALUE) {\\n            return 2+integerReplacements(n/2 + 1);\\n        }\\n        return integerReplacements(n);\\n    }\\n    \\n    public int integerReplacements(int n) {\\n        if(n < 5) return sol[n];\\n        if((n&1) == 1) {\\n            if((n + 1) % 4 == 0) {\\n                return 2+integerReplacements((n+1)/2);\\n            } else {\\n                return 2+integerReplacements((n-1)/2);\\n            }\\n        }\\n        return 1+integerReplacements(n/2);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    int[] sol = new int[]{0,0,1,2,2};\\n    \\n    public int integerReplacement(int n) {\\n        if(n==Integer.MAX_VALUE) {\\n            return 2+integerReplacements(n/2 + 1);\\n        }\\n        return integerReplacements(n);\\n    }\\n    \\n    public int integerReplacements(int n) {\\n        if(n < 5) return sol[n];\\n        if((n&1) == 1) {\\n            if((n + 1) % 4 == 0) {\\n                return 2+integerReplacements((n+1)/2);\\n            } else {\\n                return 2+integerReplacements((n-1)/2);\\n            }\\n        }\\n        return 1+integerReplacements(n/2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 498813,
                "title": "java-bit-manipulation-with-explanation",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        long N = n;  // boundary\\n        int res = 0;\\n        \\n        while(N != 1){\\n            if(N % 2 == 0){     // if even \\n                N >>= 1;      // shift one bit right. This action is same as dividing the number by 2.  0010 >> 1 = 0001  ( 2 / 2 = 1 )\\n                res++;\\n            }\\n            else{  // if odd\\n                if(N == 3){   // special case 3: 0011 -1 = 0010; 0010 >> 1 = 0001\\n                    res += 2;  // so we add two steps\\n                    break;\\n                }\\n                N = ( (N & 2) == 2 ? N+1 : N-1);   //if the second bit of N is 1, we need to perform N+1, else perform N-1\\n                res++;\\n            }   \\n        }\\n        return res;\\n    }\\n}\\n```\\nHow do we know whether it is N+1 or N-1??\\n\\nExample: 9 can be represented by 1001.\\nThe second digit of the number 0\\napproach 1: (N+1)\\n1001 - 1 = 1000\\n1000 >> 1 = 0100\\n0100 >> 1 = 0010\\n0010 >> 1 = 0001\\n4 steps\\n\\napproach 2: (N+1)\\n1001 + 1 = 1001\\n1001 -1 = 1000\\n1000 >> 1 = 0100\\n0100 >> 1 = 0010\\n0010 >> 1 = 0001\\n5 steps\\n\\nwe choose the minimum steps, so 4.\\n\\nThe first bit indicates whether the number is odd or even ( 1 or 0 ).\\nIn this case, we can focus on handling the odd number. Should we add 1 to it or -1 to it?\\nThe second bit indicates whether the number would become 1 or 0 if we do N+1 or N-1.\\nIf the second bit is 1, for example, 1001. if we do N+1, then we will have 1010, which becomes an even integer.\\nIf the secon bit is 0, for example,1001. If we do N - 1, then we will have 1000, which becomes an even integer.\\nLet\\'s compare 1010 and 1000. Apparently, 1010 will take one more step than 1000 to reach our goal, right?\\n1010 >> 1 = 0101, then 0101 - 1 = 0100, then 0100 >> 1 = 0010, then 0010 >> 1 = 0001\\n1000 >> 1 = 0100, then 0100 >> 1 = 0010, then 0010 >> 1 = 0001 \\nThat is why, if the second bit is 1, we need to perform N+1\\nif the second bit is 0 , we need to perform N-1, which I believe is the key to solve/understand this problem.\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        long N = n;  // boundary\\n        int res = 0;\\n        \\n        while(N != 1){\\n            if(N % 2 == 0){     // if even \\n                N >>= 1;      // shift one bit right. This action is same as dividing the number by 2.  0010 >> 1 = 0001  ( 2 / 2 = 1 )\\n                res++;\\n            }\\n            else{  // if odd\\n                if(N == 3){   // special case 3: 0011 -1 = 0010; 0010 >> 1 = 0001\\n                    res += 2;  // so we add two steps\\n                    break;\\n                }\\n                N = ( (N & 2) == 2 ? N+1 : N-1);   //if the second bit of N is 1, we need to perform N+1, else perform N-1\\n                res++;\\n            }   \\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 427599,
                "title": "java-solutions-beats-100",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int count = 0;\\n        while(n != 1){\\n            if((n & 1) == 1) { //odd\\n               if(n == 3 || ((n >>> 1) & 1) == 0){ // if previous bit is zero -> -1, else -> +1\\n                   n--;\\n               } else{\\n                   n++;\\n               }\\n                \\n            } else { //even\\n                n >>>= 1; // unsigned\\n            }\\n            count ++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int count = 0;\\n        while(n != 1){\\n            if((n & 1) == 1) { //odd\\n               if(n == 3 || ((n >>> 1) & 1) == 0){ // if previous bit is zero -> -1, else -> +1\\n                   n--;\\n               } else{\\n                   n++;\\n               }\\n                \\n            } else { //even\\n                n >>>= 1; // unsigned\\n            }\\n            count ++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 341165,
                "title": "simple-python-bitwise-solution",
                "content": "```py\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        i=0\\n        while n>1:\\n            if n&1==0:\\n                n>>=1\\n            else:\\n                if (n>>1)&1==0 or n==3:\\n                    n-=1\\n                else:\\n                    n+=1\\n            i+=1\\n        return i\\n",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "```py\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        i=0\\n        while n>1:\\n            if n&1==0:\\n                n>>=1\\n            else:\\n                if (n>>1)&1==0 or n==3:\\n                    n-=1\\n                else:\\n                    n+=1\\n            i+=1\\n        return i\\n",
                "codeTag": "Java"
            },
            {
                "id": 158887,
                "title": "2-lines-recursive-java-without-long-or-integer-max-value",
                "content": "```\\n    public int integerReplacement(int n) {\\n        if(n == 1) return 0;\\n        return 1 + (n%2==0? integerReplacement(n/2) : (Math.min(integerReplacement(n/2+1)+1,integerReplacement(n-1))));\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int integerReplacement(int n) {\\n        if(n == 1) return 0;\\n        return 1 + (n%2==0? integerReplacement(n/2) : (Math.min(integerReplacement(n/2+1)+1,integerReplacement(n-1))));\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 87984,
                "title": "python-solution-with-cache-beating-98-06",
                "content": "```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        def helper(n, d):\\n            if n in d:\\n                return d[n]\\n            \\n            if n%2 == 0:\\n                d[n] = helper(n/2, d) + 1\\n            else:\\n                d[n] = 1 + min(helper(n + 1, d), helper(n - 1, d))\\n            return d[n]\\n                \\n        d = {1: 0}\\n        return helper(n, d)\\n````",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def integerReplacement(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        def helper(n, d):\\n            if n in d:\\n                return d[n]\\n            \\n            if n%2 == 0:\\n                d[n] = helper(n/2, d) + 1\\n            else:\\n                d[n] = 1 + min(helper(n + 1, d), helper(n - 1, d))\\n            return d[n]\\n                \\n        d = {1: 0}\\n        return helper(n, d)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 88026,
                "title": "4ms-java-solution",
                "content": "```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        int i = 0;\\n\\tlong a = n;\\n\\twhile (a != 1){\\n\\t\\tif (a == 3) return i + 2;\\n\\t\\tif ((a & 1) == 0){\\n\\t\\t\\t++i;\\n\\t\\t\\ta = a >> 1;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif ((a & 2) == 2){\\n\\t\\t\\t++a;\\n\\t\\t\\t++i;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\t--a;\\n\\t\\t\\t++i;\\n\\t\\t}\\n\\t}\\n\\treturn i;\\n    }\\n}\\n```\\nxxxxxxxxxx0      ->    n = n / 2\\n0000000011    ->     n = n - 1\\nxxxx1xxxx11    ->     n = n + 1\\nxxxxxxxxx01    ->     n = n - 1\\nIn fact, I do not know why this is correct...",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int integerReplacement(int n) {\\n        int i = 0;\\n\\tlong a = n;\\n\\twhile (a != 1){\\n\\t\\tif (a == 3) return i + 2;\\n\\t\\tif ((a & 1) == 0){\\n\\t\\t\\t++i;\\n\\t\\t\\ta = a >> 1;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif ((a & 2) == 2){\\n\\t\\t\\t++a;\\n\\t\\t\\t++i;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\t--a;\\n\\t\\t\\t++i;\\n\\t\\t}\\n\\t}\\n\\treturn i;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 88035,
                "title": "java-4ms-iterative-greedy-explained-in-detail",
                "content": "if n > 1, you need to divide by 2 to decade faster. No matter you add or minus 1, your target is to make it even and then divide by 2.\\n\\nHere, if n is even, then divide by 2. \\n\\nOtherwise, if n is odd, then it depends on m = n / 2. if m is odd, we will add or minus 1 in next step. If m is even, then we will save one step instead.\\n\\n```However n = 3 is the outlier because the difference of 1 matters, see below.```\\n\\nFor instance: n = 39\\nm = n / 2 = 19, we can\\n```39 -> 40 -> 20```\\n```39 -> 38 -> 19 -> 20 or 18``` in the next step.\\n\\nAs you can see, if we use ```divide by 2``` to **mark** a step, then for every step, the mid result of choosing + or - 1 will have a difference of 1 (e.g. 20 and 19). We can treat them as if they are of no difference. However 19 will require an extra step in next step.\\n\\n```\\npublic int integerReplacement(int n) {\\n        int cnt = 0;\\n        while (n > 1) {\\n            cnt++;\\n            if ((n & 1) != 0) {\\n                cnt++;\\n                n >>= 1;\\n                if (n != 1 && (n & 1) != 0) n++;\\n            } else {\\n                n >>= 1;\\n            }\\n        }\\n        \\n        return cnt;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy",
                    "Iterator"
                ],
                "code": "```However n = 3 is the outlier because the difference of 1 matters, see below.```\n```39 -> 40 -> 20```\n```39 -> 38 -> 19 -> 20 or 18```\n```divide by 2```\n```\\npublic int integerReplacement(int n) {\\n        int cnt = 0;\\n        while (n > 1) {\\n            cnt++;\\n            if ((n & 1) != 0) {\\n                cnt++;\\n                n >>= 1;\\n                if (n != 1 && (n & 1) != 0) n++;\\n            } else {\\n                n >>= 1;\\n            }\\n        }\\n        \\n        return cnt;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 88050,
                "title": "share-my-0ms-c-code",
                "content": "We can use bit-operation to accelerate and use long long to avoid overflow.\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        return countRec(n,0);\\n    }\\nprivate:\\n    int countRec(int n,int count){\\n        if(n==1)\\n            return count;\\n        if(n==3)\\n            return count+2;\\n        if((n&1)==0){\\n            return countRec((n>>1),count+1);\\n        }\\n        long long a=(long long)n+1;\\n        if((a&3)==0){\\n            a=a>>1;\\n            return countRec((int)a,count+2);\\n        }\\n        return countRec(n-1,count+1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        return countRec(n,0);\\n    }\\nprivate:\\n    int countRec(int n,int count){\\n        if(n==1)\\n            return count;\\n        if(n==3)\\n            return count+2;\\n        if((n&1)==0){\\n            return countRec((n>>1),count+1);\\n        }\\n        long long a=(long long)n+1;\\n        if((a&3)==0){\\n            a=a>>1;\\n            return countRec((int)a,count+2);\\n        }\\n        return countRec(n-1,count+1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 88060,
                "title": "share-my-6ms-c-code",
                "content": "Only use int type, no special treatment for INT_MAX\\n```\\nint myRP(int n, int k) {\\n    if (n == 1) return k;\\n    if (n % 2) {\\n        int result1 = myRP(((n - 1)>>1) + 1, k + 2);\\n        int result2 = myRP(n - 1, k + 1);\\n        return result1 < result2 ? result1 : result2;\\n    } else {\\n        return myRP(n>>1, k + 1);\\n    }\\n}\\n\\nint integerReplacement(int n) {\\n    return myRP(n, 0);\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint myRP(int n, int k) {\\n    if (n == 1) return k;\\n    if (n % 2) {\\n        int result1 = myRP(((n - 1)>>1) + 1, k + 2);\\n        int result2 = myRP(n - 1, k + 1);\\n        return result1 < result2 ? result1 : result2;\\n    } else {\\n        return myRP(n>>1, k + 1);\\n    }\\n}\\n\\nint integerReplacement(int n) {\\n    return myRP(n, 0);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3952304,
                "title": "bfs-solution-c",
                "content": "# Approach\\nUse BFS and perform operations accordingly.\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n) (approximately)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n\\n        queue<long long int>q;\\n        q.push(n);\\n\\n        // to avoid revisiting elements \\n        // because throught bfs we are going to reach any element in min. operations\\n        unordered_set<int>s;\\n\\n        int steps = 0;\\n        while(!q.empty()){\\n            int size = q.size();\\n            \\n            while(size--){\\n                long long int curr = q.front(); q.pop();\\n                // current element is the target\\n                if(curr == 1) return steps;\\n                \\n                if(curr%2 == 0){\\n                    //if the element we are going to insert is 1\\n                    if(curr/2 == 1) return steps+1;\\n                    if(!s.count(curr/2)){\\n                        q.push(curr/2);\\n                        s.insert(curr/2);\\n                    }\\n                }\\n                else{\\n                    //if the element we are going to insert is 1\\n                    if(curr+1==1 || curr-1==1) return steps+1;\\n                    if(!s.count(curr+1)) q.push(curr+1);\\n                    if(!s.count(curr-1)) q.push(curr-1);\\n                    \\n                    s.insert(curr+1); s.insert(curr-1);\\n                }\\n            }\\n            steps++;\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n\\n        queue<long long int>q;\\n        q.push(n);\\n\\n        // to avoid revisiting elements \\n        // because throught bfs we are going to reach any element in min. operations\\n        unordered_set<int>s;\\n\\n        int steps = 0;\\n        while(!q.empty()){\\n            int size = q.size();\\n            \\n            while(size--){\\n                long long int curr = q.front(); q.pop();\\n                // current element is the target\\n                if(curr == 1) return steps;\\n                \\n                if(curr%2 == 0){\\n                    //if the element we are going to insert is 1\\n                    if(curr/2 == 1) return steps+1;\\n                    if(!s.count(curr/2)){\\n                        q.push(curr/2);\\n                        s.insert(curr/2);\\n                    }\\n                }\\n                else{\\n                    //if the element we are going to insert is 1\\n                    if(curr+1==1 || curr-1==1) return steps+1;\\n                    if(!s.count(curr+1)) q.push(curr+1);\\n                    if(!s.count(curr-1)) q.push(curr-1);\\n                    \\n                    s.insert(curr+1); s.insert(curr-1);\\n                }\\n            }\\n            steps++;\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3873387,
                "title": "simple-python3-solution-30-ms-faster-than-99-solutions",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(log(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(log(n))$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` python3 []\\nfrom functools import cache\\n\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        @cache\\n        def dp(k):\\n            if k == 1:\\n                return 0\\n            if k % 2 == 0:\\n                return 1 + dp(k // 2)\\n            return 1 + min(dp(k - 1), dp(k + 1))\\n        \\n        return dp(n)\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "``` python3 []\\nfrom functools import cache\\n\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        @cache\\n        def dp(k):\\n            if k == 1:\\n                return 0\\n            if k % 2 == 0:\\n                return 1 + dp(k // 2)\\n            return 1 + min(dp(k - 1), dp(k + 1))\\n        \\n        return dp(n)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3811018,
                "title": "java-recursive-and-memoization-approach-using-hashmap",
                "content": "# Code\\n```\\nclass Solution {\\n    Map<Integer, Integer> dp = new HashMap<>();\\n    public int integerReplacement(int n) {\\n        return helper(n);\\n    }\\n\\n    // Recursive Approach\\n    public int helper(int n){\\n        if(n >= Integer.MAX_VALUE) return 32;\\n        if(n == 1) return 0;\\n        if(n < 3) return 1;\\n        if(n < 5) return 2;\\n        if(n % 2 == 0) return 1 + helper(n/2);\\n        else return Math.min(1 + helper(n + 1), 1 + helper(n - 1));\\n    }\\n\\n    // Memoization Approach using hashMap\\n    public int helperMem(int n){\\n        dp.put(Integer.MAX_VALUE, 32);\\n        dp.put(1, 0);\\n        if(dp.containsKey(n)) return dp.get(n);\\n        if(n % 2 == 0) dp.put(n, helperMem(n/2) + 1);\\n        else dp.put(n, Math.min(1 + helperMem(n + 1), 1 + helperMem(n - 1)));\\n        return dp.get(n);\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Greedy",
                    "Memoization",
                    "Hash Function"
                ],
                "code": "```\\nclass Solution {\\n    Map<Integer, Integer> dp = new HashMap<>();\\n    public int integerReplacement(int n) {\\n        return helper(n);\\n    }\\n\\n    // Recursive Approach\\n    public int helper(int n){\\n        if(n >= Integer.MAX_VALUE) return 32;\\n        if(n == 1) return 0;\\n        if(n < 3) return 1;\\n        if(n < 5) return 2;\\n        if(n % 2 == 0) return 1 + helper(n/2);\\n        else return Math.min(1 + helper(n + 1), 1 + helper(n - 1));\\n    }\\n\\n    // Memoization Approach using hashMap\\n    public int helperMem(int n){\\n        dp.put(Integer.MAX_VALUE, 32);\\n        dp.put(1, 0);\\n        if(dp.containsKey(n)) return dp.get(n);\\n        if(n % 2 == 0) dp.put(n, helperMem(n/2) + 1);\\n        else dp.put(n, Math.min(1 + helperMem(n + 1), 1 + helperMem(n - 1)));\\n        return dp.get(n);\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3734513,
                "title": "3ms-greedy-solution-o-log-n-time-o-1-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(log N)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(unsigned int n) {\\n        int cnt=0;\\n        while(n!=1)\\n        {\\n            if(n&(n-1)==0)\\n                n>>=1;\\n            else if(n&(n+1)==0 && n!=3)\\n                ++n;\\n            else if(n%2==0)\\n                n>>=1;\\n            else\\n            {\\n                if(((n-1)/2)%2==0 || (n-1)/2==1)\\n                --n;\\n                else ++n;\\n            }\\n            ++cnt;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(unsigned int n) {\\n        int cnt=0;\\n        while(n!=1)\\n        {\\n            if(n&(n-1)==0)\\n                n>>=1;\\n            else if(n&(n+1)==0 && n!=3)\\n                ++n;\\n            else if(n%2==0)\\n                n>>=1;\\n            else\\n            {\\n                if(((n-1)/2)%2==0 || (n-1)/2==1)\\n                --n;\\n                else ++n;\\n            }\\n            ++cnt;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3708517,
                "title": "simple-recursion",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    long long solve(long long n)\\n{\\n    if(n <= 0){\\n        return 1e9;\\n    }\\n    if (n == 1)\\n    {\\n        return 0;\\n    }\\n\\n    if (n & 1)\\n    {\\n        return 1 + min(solve(n - 1), solve(n + 1));\\n    }\\n    else\\n    {\\n        return 1 + solve(n / 2);\\n    }\\n}\\n\\nint integerReplacement(int n)\\n{\\n    return solve(n);\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long solve(long long n)\\n{\\n    if(n <= 0){\\n        return 1e9;\\n    }\\n    if (n == 1)\\n    {\\n        return 0;\\n    }\\n\\n    if (n & 1)\\n    {\\n        return 1 + min(solve(n - 1), solve(n + 1));\\n    }\\n    else\\n    {\\n        return 1 + solve(n / 2);\\n    }\\n}\\n\\nint integerReplacement(int n)\\n{\\n    return solve(n);\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3390744,
                "title": "easily-understandable-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n   int k=0;\\n    int integerReplacement(int n) {\\n        if(n==INT_MAX) return 32;\\n        if(n==1) return k;\\n        if(n==3) { k=k+2; return k; }\\n        if(n%2==1)\\n        {\\n            k++;\\n            if((n+1)%4==0)\\n               integerReplacement(n+1);\\n            else\\n               integerReplacement(n-1);\\n        }\\n        else\\n        {\\n          k++;\\n          integerReplacement(n/2);\\n        }\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   int k=0;\\n    int integerReplacement(int n) {\\n        if(n==INT_MAX) return 32;\\n        if(n==1) return k;\\n        if(n==3) { k=k+2; return k; }\\n        if(n%2==1)\\n        {\\n            k++;\\n            if((n+1)%4==0)\\n               integerReplacement(n+1);\\n            else\\n               integerReplacement(n-1);\\n        }\\n        else\\n        {\\n          k++;\\n          integerReplacement(n/2);\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3226759,
                "title": "c-greedy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        return helper(long(n));\\n    }\\n\\n    int helper(long n) {\\n        int count = 0;\\n\\n        while(n > 1) {\\n            if(n % 2 == 0)\\n                n /= 2;\\n            else if(((n+1) % 4) == 0 && n+1 != 4)\\n                n += 1;\\n            else \\n                n -= 1;\\n            ++count;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        return helper(long(n));\\n    }\\n\\n    int helper(long n) {\\n        int count = 0;\\n\\n        while(n > 1) {\\n            if(n % 2 == 0)\\n                n /= 2;\\n            else if(((n+1) % 4) == 0 && n+1 != 4)\\n                n += 1;\\n            else \\n                n -= 1;\\n            ++count;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014501,
                "title": "go-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nOne way to do this would be to manually compute the number of operations needed for a few small integers and try to identify a pattern. For example, we can see that it takes 0 operations to replace 1 with 1, 1 operation to replace 2 with 1 (by dividing it by 2), and 3 operations to replace 3 with 1 (by subtracting 1 twice).\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUnderstand the problem statement and the constraints of the problem. In this case, we are given an integer n and are asked to find the minimum number of operations needed to replace n with 1, where an operation is either dividing n by 2 (if it is even) or replacing it with either n + 1 or n - 1 (if it is odd). The constraints are 1 <= n <= 2^31 - 1.\\nIdentify the pattern in the number of operations needed to replace different integers with 1. One way to do this is to manually compute the number of operations needed for a few small integers and try to identify a pattern. For example, we can see that it takes 0 operations to replace 1 with 1, 1 operation to replace 2 with 1 (by dividing it by 2), and 3 operations to replace 3 with 1 (by subtracting 1 twice).\\nCome up with a formula or an algorithm that takes an integer as input and returns the minimum number of operations needed to replace it with 1. One approach is to divide the problem into two cases:\\nIf the integer is even, it is always optimal to divide it by 2, as this will get us closer to 1 in the fewest number of steps.\\nIf the integer is odd, we need to decide whether to add 1 or subtract 1. We can do this by examining the last two bits of the integer. If the integer ends in 01, it is optimal to subtract 1. If the integer ends in 11, it is optimal to add 1. If the integer ends in 1 (i.e., it is 3), either operation is optimal.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this algorithm is O(n), where n is the number of operations needed to replace the integer with 1. \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1), as the algorithm only uses a fixed amount of space independent of the input.\\n# Code\\n```\\nfunc integerReplacement(n int) int {\\n    operationsCount:=0\\n    for n>1{\\n        //if number is even, then divide by 2\\n        if n&1==0{\\n            n>>=1\\n        //if number is odd, and ends in 011, then add by 1\\n        }else if n!=3 && n&3==3{\\n            n++\\n        //if number is odd, and ends in 001, then subtract by 1\\n        }else{\\n            n--\\n        }\\n        operationsCount++\\n    }\\n    return operationsCount\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc integerReplacement(n int) int {\\n    operationsCount:=0\\n    for n>1{\\n        //if number is even, then divide by 2\\n        if n&1==0{\\n            n>>=1\\n        //if number is odd, and ends in 011, then add by 1\\n        }else if n!=3 && n&3==3{\\n            n++\\n        //if number is odd, and ends in 001, then subtract by 1\\n        }else{\\n            n--\\n        }\\n        operationsCount++\\n    }\\n    return operationsCount\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2692654,
                "title": "c-easy-recursive-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int solve(long n)\\n    {\\n        if(n == 1)\\n        {\\n            return 1;\\n        }\\n        if(n%2 == 0)\\n        {\\n            return 1 + solve(n/2);\\n        }\\n        else \\n        {\\n            return 1 + min(solve(n+1),solve(n-1));\\n        }\\n    }\\n    \\n    int integerReplacement(int n) {\\n        int x = solve(n);\\n        return x-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int solve(long n)\\n    {\\n        if(n == 1)\\n        {\\n            return 1;\\n        }\\n        if(n%2 == 0)\\n        {\\n            return 1 + solve(n/2);\\n        }\\n        else \\n        {\\n            return 1 + min(solve(n+1),solve(n-1));\\n        }\\n    }\\n    \\n    int integerReplacement(int n) {\\n        int x = solve(n);\\n        return x-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2668307,
                "title": "0ms-faster-than-100-o-logn",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        int cnt=0;\\n        while(n!=1){\\n            if(n%2==0){\\n                n=n/2;\\n            }else{\\n                if(n==INT_MAX){\\n                    cnt++;\\n                    n/=2;\\n                    n++;\\n                }\\n                else if(n==3)n--;\\n                else if((n+1)%4)n--;\\n                else n++;                \\n            }\\n            cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        int cnt=0;\\n        while(n!=1){\\n            if(n%2==0){\\n                n=n/2;\\n            }else{\\n                if(n==INT_MAX){\\n                    cnt++;\\n                    n/=2;\\n                    n++;\\n                }\\n                else if(n==3)n--;\\n                else if((n+1)%4)n--;\\n                else n++;                \\n            }\\n            cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2383160,
                "title": "c-recursion-o-logn-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        \\n        return helper(n);\\n    }\\n\\n    int helper(long n)\\n    {\\n        if(n == 1)\\n            return 0;\\n        \\n        if(n % 2)\\n            return 1 + min(helper(n - 1), helper(n + 1));\\n        \\n        return 1 + helper(n / 2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        \\n        return helper(n);\\n    }\\n\\n    int helper(long n)\\n    {\\n        if(n == 1)\\n            return 0;\\n        \\n        if(n % 2)\\n            return 1 + min(helper(n - 1), helper(n + 1));\\n        \\n        return 1 + helper(n / 2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2341714,
                "title": "0-ms-solution-by-finding-factors-of-two",
                "content": "If the value is even,we don\\'t have any option other than dividing it by two.But if it is odd,we find the number of times 2 is a factor for both the n-1 and n+1 values.More the factors,lesser will be the steps to reach 1 and hence the orientation of calculation will bend towards the number having more factors of two.\\n**FEEL FREE TO DISCUSS IN CASE OF ANY DOUBT**\\n```class Solution {\\npublic:\\n    int fac(int x){\\n        int factoftwo=0;\\n        while(x%2==0){\\n         factoftwo++;\\n         x/=2\\n        }\\n        return factoftwo;\\n    }\\npublic:\\n    int integerReplacement(int n) {\\n       int copy=n;\\n        int count=0;\\n        if(n==INT_MAX){return 32;}\\n        while(copy!=1){\\n            if(copy==3){\\n                count+=2;\\n                break;\\n            }\\n            if(copy%2==0){\\n                copy/=2;\\n            }\\n            else{\\n                int small=fac(copy-1);\\n                int greater=fac(copy+1);\\n                if(small>greater){\\n                    copy-=1;\\n                }\\n                else{\\n                    copy+=1;\\n                }\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    int fac(int x){\\n        int factoftwo=0;\\n        while(x%2==0){\\n         factoftwo++;\\n         x/=2\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2307610,
                "title": "beats-100-other-solutions",
                "content": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        def recurse(val):\\n            if val <= 1:\\n                return 0\\n            # print(\"VAL: \",val)\\n            if val in dp:\\n                return dp[val]\\n            \\n            even = sys.maxsize\\n            oddP = sys.maxsize\\n            oddM = sys.maxsize\\n            \\n            if val % 2 == 0:\\n                even = recurse(val//2)\\n            elif val % 2 != 0:\\n                if val+1 < 2*n:\\n                    oddP = recurse((val+1)//2) + 1\\n                oddM = recurse(val-1)\\n            dp[val] = min(even,oddP,oddM)+1\\n            return min(even,oddP,oddM)+1\\n        dp = {}\\n        return recurse(n)\\n\\n#         dp = [-1]*(n+1)\\n#         dp[0] = 0\\n#         dp[1] = 0\\n#         for i in range(2,n+1):\\n#             even = sys.maxsize\\n#             oddP = sys.maxsize\\n#             oddM = sys.maxsize\\n            \\n#             if i % 2 == 0 and dp[i//2] != -1:\\n#                 even = dp[i//2]\\n#             if i % 2 != 0:   \\n#                 if dp[i-1] != -1:\\n#                     oddM = dp[i-1]\\n\\n#                 if i+1 < 2*n:\\n#                     if dp[(i+1)//2] != -1:\\n#                         oddP = dp[(i+1)//2]+1\\n            \\n#             dp[i] = min(even,oddP,oddM) + 1\\n#         return dp[n]\\n\\n#         def helper(n, cache={}):\\n#             if n < 1:\\n#                 return float(\\'inf\\')\\n#             if n == 1:\\n#                 return 0\\n#             if n in cache:\\n#                 return cache[n]\\n#             if n % 2 == 0:\\n#                 cache[n] = 1 + helper(n // 2)\\n#                 return cache[n]\\n#             else:\\n#                 cache[n] =  1 + min(helper(n+1), helper(n-1))  \\n#                 return cache[n]\\n        \\n#         return helper(n)\\n```",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        def recurse(val):\\n            if val <= 1:\\n                return 0\\n            # print(\"VAL: \",val)\\n            if val in dp:\\n                return dp[val]\\n            \\n            even = sys.maxsize\\n            oddP = sys.maxsize\\n            oddM = sys.maxsize\\n            \\n            if val % 2 == 0:\\n                even = recurse(val//2)\\n            elif val % 2 != 0:\\n                if val+1 < 2*n:\\n                    oddP = recurse((val+1)//2) + 1\\n                oddM = recurse(val-1)\\n            dp[val] = min(even,oddP,oddM)+1\\n            return min(even,oddP,oddM)+1\\n        dp = {}\\n        return recurse(n)\\n\\n#         dp = [-1]*(n+1)\\n#         dp[0] = 0\\n#         dp[1] = 0\\n#         for i in range(2,n+1):\\n#             even = sys.maxsize\\n#             oddP = sys.maxsize\\n#             oddM = sys.maxsize\\n            \\n#             if i % 2 == 0 and dp[i//2] != -1:\\n#                 even = dp[i//2]\\n#             if i % 2 != 0:   \\n#                 if dp[i-1] != -1:\\n#                     oddM = dp[i-1]\\n\\n#                 if i+1 < 2*n:\\n#                     if dp[(i+1)//2] != -1:\\n#                         oddP = dp[(i+1)//2]+1\\n            \\n#             dp[i] = min(even,oddP,oddM) + 1\\n#         return dp[n]\\n\\n#         def helper(n, cache={}):\\n#             if n < 1:\\n#                 return float(\\'inf\\')\\n#             if n == 1:\\n#                 return 0\\n#             if n in cache:\\n#                 return cache[n]\\n#             if n % 2 == 0:\\n#                 cache[n] = 1 + helper(n // 2)\\n#                 return cache[n]\\n#             else:\\n#                 cache[n] =  1 + min(helper(n+1), helper(n-1))  \\n#                 return cache[n]\\n        \\n#         return helper(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2277175,
                "title": "0ms-100-fast-bfs-hasmap-approach",
                "content": "class Solution {\\npublic:\\n    int integerReplacement(int n) {\\n      map<long long int ,long long int>mpp;\\n        queue<long long int >q;\\n        q.push(n);\\n        while(!q.empty())\\n        {\\n            auto t =q.front();\\n            q.pop();\\n            if(t%2==0)\\n            {\\n                if(!mpp.count(t/2))\\n                {\\n                    mpp[t/2] = mpp[t]+1;\\n                    q.push(t/2);\\n                }\\n            }\\n            else\\n            {\\n                if(!mpp.count(t-1))\\n                {\\n                    q.push(t-1);\\n                    mpp[t-1] = mpp[t]+1;\\n                }\\n                if(!mpp.count(t+1))\\n                {\\n                    q.push(t+1);\\n                    mpp[t+1]=mpp[t]+1;\\n                }\\n            }\\n            if(mpp.count(0))\\n            {\\n                return mpp[0]-1;\\n            }\\n        }\\n        return mpp[0]-1;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int integerReplacement(int n) {\\n      map<long long int ,long long int>mpp;\\n        queue<long long int >q;\\n        q.push(n);\\n        while(!q.empty())\\n        {\\n            auto t =q.front();\\n            q.pop();\\n            if(t%2==0)\\n            {\\n                if(!mpp.count(t/2))\\n                {\\n                    mpp[t/2] = mpp[t]+1;\\n                    q.push(t/2);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2231282,
                "title": "python-solution-with-explanation-no-recursion-no-dp-7-liner",
                "content": "**Approach**\\n\\n1. Till n > 1, do\\n    - if n is even, update n to n / 2\\n\\t\\t\\n\\t\\t```\\n\\t\\tif n & 1 == 0: n >>= 1\\n\\t\\t```\\n\\t- if its odd, the check if its 3 or its modulo to 4 gives 1, then decrement n otherwise increment by 1.\\n\\t\\t\\n\\t\\t```\\n\\t\\tif n == 3 or n % 4 == 1: n -= 1\\n\\t\\telse: n += 1\\n\\t\\t```\\n\\n**Complete Solution**\\n```\\ncount = 0\\nwhile n > 1:\\n\\tif n & 1 == 0: n >>= 1\\n\\telif n == 3 or n % 4 == 1: n -= 1\\n\\telse: n += 1\\n\\tcount += 1\\nreturn count\\n\\n# 41 ms\\n# TC - O(log n)\\n# SC - O(1)\\n```",
                "solutionTags": [
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```\\n\\t\\tif n & 1 == 0: n >>= 1\\n\\t\\t```\n```\\n\\t\\tif n == 3 or n % 4 == 1: n -= 1\\n\\t\\telse: n += 1\\n\\t\\t```\n```\\ncount = 0\\nwhile n > 1:\\n\\tif n & 1 == 0: n >>= 1\\n\\telif n == 3 or n % 4 == 1: n -= 1\\n\\telse: n += 1\\n\\tcount += 1\\nreturn count\\n\\n# 41 ms\\n# TC - O(log n)\\n# SC - O(1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2147196,
                "title": "0ms-easy-c-solution-bit-manupulation",
                "content": "```\\nclass Solution {\\npublic:\\n#based on rightmost significant bit we can say which will reach 1 faster exceptional case when n=3\\n    int count(long long n){\\n        return log(n & -n)+1;\\n    }\\n    int integerReplacement(long long n) {\\n        if(n==1) return 0;\\n        if(n&1){\\n            if(count(n-1)>=count(n+1) || n==3) return 1+integerReplacement(n-1);\\n            else return 1+integerReplacement(n+1);\\n        }else\\n            return 1+integerReplacement(n/2);\\n        \\n        return 0;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n#based on rightmost significant bit we can say which will reach 1 faster exceptional case when n=3\\n    int count(long long n){\\n        return log(n & -n)+1;\\n    }\\n    int integerReplacement(long long n) {\\n        if(n==1) return 0;\\n        if(n&1){\\n            if(count(n-1)>=count(n+1) || n==3) return 1+integerReplacement(n-1);\\n            else return 1+integerReplacement(n+1);\\n        }else\\n            return 1+integerReplacement(n/2);\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2097693,
                "title": "c-bit-manipulation-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int num) {\\n        int cnt = 0;\\n        long long n = num;\\n        while(n!=1){\\n            if(n&1){\\n                int p = __builtin_popcountll(n);\\n                int np = __builtin_popcountll(n+1);\\n                if(np<p and n!=3){\\n                    n++;\\n                }else{\\n                    n--;\\n                }\\n            }else{\\n                n/=2;\\n            }\\n            cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int num) {\\n        int cnt = 0;\\n        long long n = num;\\n        while(n!=1){\\n            if(n&1){\\n                int p = __builtin_popcountll(n);\\n                int np = __builtin_popcountll(n+1);\\n                if(np<p and n!=3){\\n                    n++;\\n                }else{\\n                    n--;\\n                }\\n            }else{\\n                n/=2;\\n            }\\n            cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2068149,
                "title": "javascript-dp",
                "content": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar integerReplacement = function (n) {\\n  return helper(n, {});\\n};\\n\\nfunction helper(n, cache) {\\n  if (n === 1) return 0;\\n  if (cache[n] !== undefined) return cache[n];\\n\\n  let result = 0;\\n  if (n % 2 === 0) {\\n    result += 1 + helper(n / 2, cache);\\n  } else {\\n    result += 1 + Math.min(helper(n - 1, cache), helper(n + 1, cache));\\n  }\\n\\n  return (cache[n] = result);\\n}\\n```",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar integerReplacement = function (n) {\\n  return helper(n, {});\\n};\\n\\nfunction helper(n, cache) {\\n  if (n === 1) return 0;\\n  if (cache[n] !== undefined) return cache[n];\\n\\n  let result = 0;\\n  if (n % 2 === 0) {\\n    result += 1 + helper(n / 2, cache);\\n  } else {\\n    result += 1 + Math.min(helper(n - 1, cache), helper(n + 1, cache));\\n  }\\n\\n  return (cache[n] = result);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1952966,
                "title": "easy-solution",
                "content": "```\\nvar integerReplacement = function(n) {\\n    let count=0;\\n    while(n>1){\\n       if(n%2===0){n/=2;}\\n       else{\\n         if(n!==3 && (n+1)%4===0){n++;}\\n         else{n--;}\\n       } \\n      count++;  \\n    }\\n    return count;  \\n};        \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar integerReplacement = function(n) {\\n    let count=0;\\n    while(n>1){\\n       if(n%2===0){n/=2;}\\n       else{\\n         if(n!==3 && (n+1)%4===0){n++;}\\n         else{n--;}\\n       } \\n      count++;  \\n    }\\n    return count;  \\n};        \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1938977,
                "title": "java-1ms-memoization-dynamic-programming",
                "content": "Straight Forward!\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        return minOperations((long)n, new HashMap<>());\\n    }\\n    \\n    private int minOperations(long n, HashMap<Long, Integer> dp) {\\n        if(n == 1) return 0;\\n        if(n < 1) return Integer.MAX_VALUE;\\n        if(dp.containsKey(n)) return dp.get(n);\\n        \\n        int curr = 0;\\n        if(n % 2 == 0) {\\n            curr = 1 + minOperations(n / 2, dp);\\n        } else {\\n            curr = 1 + Math.min(minOperations(n + 1, dp), minOperations(n - 1, dp));\\n        }\\n        dp.put(n, curr);\\n        return curr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        return minOperations((long)n, new HashMap<>());\\n    }\\n    \\n    private int minOperations(long n, HashMap<Long, Integer> dp) {\\n        if(n == 1) return 0;\\n        if(n < 1) return Integer.MAX_VALUE;\\n        if(dp.containsKey(n)) return dp.get(n);\\n        \\n        int curr = 0;\\n        if(n % 2 == 0) {\\n            curr = 1 + minOperations(n / 2, dp);\\n        } else {\\n            curr = 1 + Math.min(minOperations(n + 1, dp), minOperations(n - 1, dp));\\n        }\\n        dp.put(n, curr);\\n        return curr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1916793,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\n    unordered_map<int, int> dp;\\n    int helper(long long n)\\n    {\\n        if(n == 1) \\n            return 0;\\n        if(dp[n]) \\n            return dp[n];\\n        if(n%2)\\n            return dp[n] = 1 + min(helper(n-1), helper(n+1));\\n        else\\n            return dp[n] = 1 + helper(n/2);\\n    }\\npublic:    \\n    int integerReplacement(int n) {\\n        return helper(n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    unordered_map<int, int> dp;\\n    int helper(long long n)\\n    {\\n        if(n == 1) \\n            return 0;\\n        if(dp[n]) \\n            return dp[n];\\n        if(n%2)\\n            return dp[n] = 1 + min(helper(n-1), helper(n+1));\\n        else\\n            return dp[n] = 1 + helper(n/2);\\n    }\\npublic:    \\n    int integerReplacement(int n) {\\n        return helper(n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1907558,
                "title": "java-easy-recursion",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == 1) {\\n            return 0;\\n        }\\n        if (n % 2 == 0) {\\n            return 1 + integerReplacement(n / 2);\\n        }\\n        return 2 + Math.min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == 1) {\\n            return 0;\\n        }\\n        if (n % 2 == 0) {\\n            return 1 + integerReplacement(n / 2);\\n        }\\n        return 2 + Math.min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1884300,
                "title": "c-simple-recursion",
                "content": "class Solution {\\npublic:\\n\\n    int integerReplacement(unsigned n) {\\n        if(n==1)\\n        return 0;\\n        if(n%2==0)\\n        return 1+integerReplacement(n/2);\\n        return min(1+integerReplacement(n+1),1+integerReplacement(n-1)); \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int integerReplacement(unsigned n) {\\n        if(n==1)\\n        return 0;\\n        if(n%2==0)\\n        return 1+integerReplacement(n/2);\\n        return min(1+integerReplacement(n+1),1+integerReplacement(n-1)); \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1744341,
                "title": "0ms-100-faster-c-solution",
                "content": "```\\nunordered_map<long long int,long long int> mp;\\n        long long int solve(long long int n)\\n        {\\n                if(n==1)\\n                {\\n                        return 0;\\n                }\\n                if(mp.find(n)!=mp.end())\\n                {\\n                        return mp[n];\\n                }\\n                int ans=0;\\n                if(n%2==0)\\n                {\\n                        ans=1+solve(n/2);\\n                }\\n                else\\n                {\\n                        ans=1+min(solve(n+1),solve(n-1));\\n                }\\n                mp[n]=ans;\\n                return ans;\\n        }\\n    int integerReplacement(int n) {\\n        \\n        long long int ans=solve(n);\\n            return ans;\\n```",
                "solutionTags": [
                    "Memoization"
                ],
                "code": "```\\nunordered_map<long long int,long long int> mp;\\n        long long int solve(long long int n)\\n        {\\n                if(n==1)\\n                {\\n                        return 0;\\n                }\\n                if(mp.find(n)!=mp.end())\\n                {\\n                        return mp[n];\\n                }\\n                int ans=0;\\n                if(n%2==0)\\n                {\\n                        ans=1+solve(n/2);\\n                }\\n                else\\n                {\\n                        ans=1+min(solve(n+1),solve(n-1));\\n                }\\n                mp[n]=ans;\\n                return ans;\\n        }\\n    int integerReplacement(int n) {\\n        \\n        long long int ans=solve(n);\\n            return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1734711,
                "title": "dynamic-programming-java-solution-easy",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        return helper(n,new HashMap<>());\\n    }\\n    public int helper(int n,Map<Integer,Integer> map ){\\n        if(n==1)\\n            return 0; \\n        if(map.containsKey(n))\\n            return map.get(n);\\n        int ans =0;\\n        if(n%2==0){\\n            ans = 1+helper(n/2,map);\\n        }\\n        else {\\n            ans = Math.min(helper(n+1,map),helper(n-1,map))+1;\\n        }\\n        map.put(n,ans);\\n        return map.get(n);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        return helper(n,new HashMap<>());\\n    }\\n    public int helper(int n,Map<Integer,Integer> map ){\\n        if(n==1)\\n            return 0; \\n        if(map.containsKey(n))\\n            return map.get(n);\\n        int ans =0;\\n        if(n%2==0){\\n            ans = 1+helper(n/2,map);\\n        }\\n        else {\\n            ans = Math.min(helper(n+1,map),helper(n-1,map))+1;\\n        }\\n        map.put(n,ans);\\n        return map.get(n);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1731692,
                "title": "5-line-0ms-solution",
                "content": "Integers are of 4 types 4*n, 4*n+1,4*n+2,4*n+3.\\nso when we encounter 4*n or 4*n+2 we divide by 2 in other two cases we can observe that when integer is of type 4*n+1 (n-1) is the best choice to go with and in other case n+1 is the way to go.\\n```\\nlong long int integerReplacement(long long int n) {\\n        if(n==1)return 0;\\n        else if(n==3)return 2;\\n       else if((n&3)==2 or (n&3)==0)return 1+integerReplacement(n/2);\\n       else if((n&3)==1)return 1+integerReplacement(n-1);\\n        else return 1+integerReplacement(n+1);\\n    }\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "Integers are of 4 types 4*n, 4*n+1,4*n+2,4*n+3.\\nso when we encounter 4*n or 4*n+2 we divide by 2 in other two cases we can observe that when integer is of type 4*n+1 (n-1) is the best choice to go with and in other case n+1 is the way to go.\\n```\\nlong long int integerReplacement(long long int n) {\\n        if(n==1)return 0;\\n        else if(n==3)return 2;\\n       else if((n&3)==2 or (n&3)==0)return 1+integerReplacement(n/2);\\n       else if((n&3)==1)return 1+integerReplacement(n-1);\\n        else return 1+integerReplacement(n+1);\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1682334,
                "title": "python3-easy-lru-cache-none",
                "content": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        @lru_cache(None)\\n        def dfs(t):\\n            if t==1:\\n                return 0\\n            count=0\\n            if t%2==0:\\n                count=1+dfs(t//2)\\n            else:\\n                count=1+min(dfs(t-1),dfs(t+1))\\n            return count\\n        return dfs(n)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        @lru_cache(None)\\n        def dfs(t):\\n            if t==1:\\n                return 0\\n            count=0\\n            if t%2==0:\\n                count=1+dfs(t//2)\\n            else:\\n                count=1+min(dfs(t-1),dfs(t+1))\\n            return count\\n        return dfs(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1680666,
                "title": "i-was-doing-something-different-was-close-or-not-too-close-i-m-not-too-smart-to-do-that-now",
                "content": "Pasting the code so that someone maybe could do that, or I someday could do that in future.\\n\\n```\\ndef integerReplacement(num, count=0):\\n    if num == 1:\\n        return count\\n    if num % 2 == 0:\\n        return integerReplacement(num//2, count+1)\\n    if num % 2 != 0 and num + 1 % 4 == 1: #by playing with \\'and\\' and with num == 3 we could get our desired answer but it falied sometimes\\n        return integerReplacement(num-1, count+1)\\n    if num % 2 != 0 and num - 1 % 4 == 0:\\n        return integerReplacement(num+1, count+1)\\n```\\nThen I have to do it by like this\\n\\n```\\ndef integerReplace(num):\\n\\tcount = 0\\n\\twhile count > 1:\\n\\t\\tif num % 2 == 0:\\n\\t\\t\\tnum = num // 2\\n\\t\\telif num == 3 or num % 4 == 1:\\n\\t\\t\\tnum -= 1\\n\\t\\telse:\\n\\t\\t\\tnum += 1\\n\\t\\tcount += 1\\n\\t\\n\\treturn count\\n```",
                "solutionTags": [],
                "code": "```\\ndef integerReplacement(num, count=0):\\n    if num == 1:\\n        return count\\n    if num % 2 == 0:\\n        return integerReplacement(num//2, count+1)\\n    if num % 2 != 0 and num + 1 % 4 == 1: #by playing with \\'and\\' and with num == 3 we could get our desired answer but it falied sometimes\\n        return integerReplacement(num-1, count+1)\\n    if num % 2 != 0 and num - 1 % 4 == 0:\\n        return integerReplacement(num+1, count+1)\\n```\n```\\ndef integerReplace(num):\\n\\tcount = 0\\n\\twhile count > 1:\\n\\t\\tif num % 2 == 0:\\n\\t\\t\\tnum = num // 2\\n\\t\\telif num == 3 or num % 4 == 1:\\n\\t\\t\\tnum -= 1\\n\\t\\telse:\\n\\t\\t\\tnum += 1\\n\\t\\tcount += 1\\n\\t\\n\\treturn count\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1668677,
                "title": "python3-c-solution",
                "content": "**Python**\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        ans = 0\\n        while n != 1:\\n            ans += 1\\n            if n&1 == 0: n >>= 1\\n            elif n == 3 or (n>>1)&1 == 0: n -= 1\\n            else: n += 1\\n        return ans\\n```\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        if(n == INT_MAX) return 32;\\n        int i;\\n        for(i = 0; n != 1; i++){\\n            if((n&1) == 0) {n>>=1;}\\n            else if(n == 3 || ((n>>1)&1) == 0) {n-=1;}\\n            else {n+=1;} \\n        }\\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Python3",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        ans = 0\\n        while n != 1:\\n            ans += 1\\n            if n&1 == 0: n >>= 1\\n            elif n == 3 or (n>>1)&1 == 0: n -= 1\\n            else: n += 1\\n        return ans\\n```\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        if(n == INT_MAX) return 32;\\n        int i;\\n        for(i = 0; n != 1; i++){\\n            if((n&1) == 0) {n>>=1;}\\n            else if(n == 3 || ((n>>1)&1) == 0) {n-=1;}\\n            else {n+=1;} \\n        }\\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1660126,
                "title": "c-recursive",
                "content": "```\\n int solve(int n){\\n        if(n==1){\\n            return 0;\\n        }\\n       int ans=0;\\n       if(n%2==0)\\n               return ans=(solve(n/2)+1);\\n       else{\\n           if((n-1 & n-2)==0)\\n               return ans=(solve(n-1)+1);          \\n           else if((n+1 & n)==0)\\n               return  ans= (solve(n+1)+1);\\n            else\\n                 return ans=min(solve(n-1),solve(n+1))+1;        \\n           }\\n        return ans;\\n        \\n    }\\n    int integerReplacement(int n) {\\n       if(n==INT_MAX)\\n           return 32;\\n       return solve(n);\\n    }\\n```",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```\\n int solve(int n){\\n        if(n==1){\\n            return 0;\\n        }\\n       int ans=0;\\n       if(n%2==0)\\n               return ans=(solve(n/2)+1);\\n       else{\\n           if((n-1 & n-2)==0)\\n               return ans=(solve(n-1)+1);          \\n           else if((n+1 & n)==0)\\n               return  ans= (solve(n+1)+1);\\n            else\\n                 return ans=min(solve(n-1),solve(n+1))+1;        \\n           }\\n        return ans;\\n        \\n    }\\n    int integerReplacement(int n) {\\n       if(n==INT_MAX)\\n           return 32;\\n       return solve(n);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1656676,
                "title": "100-faster-easy-to-understand-c-recursive-code",
                "content": "```\\nint integerReplacement(long int n) {\\n        int val = 0;\\n        if(n == 1)\\n        {\\n            return val;\\n        }\\n        if(n % 2 == 0)\\n        {\\n            val = integerReplacement(n / 2);\\n        }\\n        else\\n        {\\n            val = min(integerReplacement(n - 1),integerReplacement(n + 1));\\n        }\\n        val = val + 1;\\n        return val;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint integerReplacement(long int n) {\\n        int val = 0;\\n        if(n == 1)\\n        {\\n            return val;\\n        }\\n        if(n % 2 == 0)\\n        {\\n            val = integerReplacement(n / 2);\\n        }\\n        else\\n        {\\n            val = min(integerReplacement(n - 1),integerReplacement(n + 1));\\n        }\\n        val = val + 1;\\n        return val;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1625559,
                "title": "c-solution-greedy-approach-extra-edge-case-of-n-3-tc-o-n-sc-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) \\n    {\\n      int op=0;\\n        if(n==INT_MAX)\\n        {\\n            --n;\\n        }\\n        \\n        while(n!=1)\\n        {\\n            if(n==3) \\n            {\\n                op+=2;\\n                break;\\n            }\\n            if(n%2==0) n/=2;\\n            else if(((n+1)/2)%2==0) ++n;\\n            else --n;\\n            ++op;\\n        }\\n        \\n        return op;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) \\n    {\\n      int op=0;\\n        if(n==INT_MAX)\\n        {\\n            --n;\\n        }\\n        \\n        while(n!=1)\\n        {\\n            if(n==3) \\n            {\\n                op+=2;\\n                break;\\n            }\\n            if(n%2==0) n/=2;\\n            else if(((n+1)/2)%2==0) ++n;\\n            else --n;\\n            ++op;\\n        }\\n        \\n        return op;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1570420,
                "title": "no-recursion-no-memoization-faster-than-100-handle-just-one-stupid-edge-case",
                "content": "```\\n  int integerReplacement(int n) {\\n        int ans=0;\\n        if(n==3)\\n            return 2;\\n        if(n==INT_MAX)\\n        {\\n            n=n-1;\\n            \\n        }\\n        bool flag=false;\\n        while(n>1){\\n            if(n==3)\\n            {\\n                flag=true;\\n                break;\\n            }\\n            if(n%2==0)\\n                n=n/2;\\n            else{\\n                if(((n-1)/2)%2==0)\\n                    n=n-1;\\n                else\\n                    n=n+1;\\n            }\\n            ans++;\\n        }\\n        if(flag)\\n        return ans+2;\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\n  int integerReplacement(int n) {\\n        int ans=0;\\n        if(n==3)\\n            return 2;\\n        if(n==INT_MAX)\\n        {\\n            n=n-1;\\n            \\n        }\\n        bool flag=false;\\n        while(n>1){\\n            if(n==3)\\n            {\\n                flag=true;\\n                break;\\n            }\\n            if(n%2==0)\\n                n=n/2;\\n            else{\\n                if(((n-1)/2)%2==0)\\n                    n=n-1;\\n                else\\n                    n=n+1;\\n            }\\n            ans++;\\n        }\\n        if(flag)\\n        return ans+2;\\n        return ans;\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1546192,
                "title": "python-fast-recursive-solution",
                "content": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        if n <= 3:\\n            return n - 1\\n        if n % 2:\\n            if (n - 1) % 4:\\n                return 1 + self.integerReplacement(n + 1)\\n            return 1 + self.integerReplacement(n - 1)                \\n        return 1 + self.integerReplacement(n // 2)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        if n <= 3:\\n            return n - 1\\n        if n % 2:\\n            if (n - 1) % 4:\\n                return 1 + self.integerReplacement(n + 1)\\n            return 1 + self.integerReplacement(n - 1)                \\n        return 1 + self.integerReplacement(n // 2)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1510660,
                "title": "rust-solution-0ms-100-o-1-space-no-recursion-no-dp-no-bfs-commented",
                "content": "```\\nimpl Solution {\\n    pub fn integer_replacement(n: i32) -> i32 {\\n        let mut n = n as u32;\\n        let mut result = 0;\\n        \\n        while n > 1 {\\n            // Uncomment to see progress\\n            // println!(\"{}: {:>10} {:032b}\", result, n, n);\\n            // Even\\n            if n & 1 == 0 {\\n\\t\\t\\t\\t// We can divide by 2 as many times as we have trailing 0s\\n                let n_trailing_zeros = n.trailing_zeros();\\n                n >>= n_trailing_zeros;\\n\\t\\t\\t\\tresult += n_trailing_zeros as i32;\\n                \\n            // Odd\\n            } else {\\n\\t\\t\\t\\t// We want as many trailing 0s as possible after adding/subtracting 1\\n\\t\\t\\t\\t// For an odd number we have at least one trailing 1\\n\\t\\t\\t\\t// If n & 2 == 0 we have exactly 1 trailing 1, so subtracting yields more 0s\\n\\t\\t\\t\\t// With more than one trailing 1, adding would yield more 0s\\n\\t\\t\\t\\t// n == 3 is an exception because there are no higher order digits in play,\\n\\t\\t\\t\\t// so we don\\'t care about having more trailing 0s in that case\\n                if n == 3 || n & 2 == 0 {\\n                    n -= 1;\\n                } else {\\n                    n += 1;\\n                }\\n                \\n                result += 1;\\n            }\\n        }\\n        \\n        result\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn integer_replacement(n: i32) -> i32 {\\n        let mut n = n as u32;\\n        let mut result = 0;\\n        \\n        while n > 1 {\\n            // Uncomment to see progress\\n            // println!(\"{}: {:>10} {:032b}\", result, n, n);\\n            // Even\\n            if n & 1 == 0 {\\n\\t\\t\\t\\t// We can divide by 2 as many times as we have trailing 0s\\n                let n_trailing_zeros = n.trailing_zeros();\\n                n >>= n_trailing_zeros;\\n\\t\\t\\t\\tresult += n_trailing_zeros as i32;\\n                \\n            // Odd\\n            } else {\\n\\t\\t\\t\\t// We want as many trailing 0s as possible after adding/subtracting 1\\n\\t\\t\\t\\t// For an odd number we have at least one trailing 1\\n\\t\\t\\t\\t// If n & 2 == 0 we have exactly 1 trailing 1, so subtracting yields more 0s\\n\\t\\t\\t\\t// With more than one trailing 1, adding would yield more 0s\\n\\t\\t\\t\\t// n == 3 is an exception because there are no higher order digits in play,\\n\\t\\t\\t\\t// so we don\\'t care about having more trailing 0s in that case\\n                if n == 3 || n & 2 == 0 {\\n                    n -= 1;\\n                } else {\\n                    n += 1;\\n                }\\n                \\n                result += 1;\\n            }\\n        }\\n        \\n        result\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1468737,
                "title": "c-0ms-100-easy-small-recursive-solution",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Integer Replacement.\\nMemory Usage: 9.6 MB, less than 26.37% of C++ online submissions for Integer Replacement.\\n```\\nclass Solution {\\npublic:\\n  unordered_map<int,int> table;\\n  \\n  int integerReplacement(int n) {      \\n    if(n == 1) return 0;\\n    if(table.count(n)) return table[n];\\n    \\n    if(n%2 == 0) return table[n] = integerReplacement(n>>1) + 1;\\n    return table[n] = min(integerReplacement(n-1) + 1, integerReplacement((n>>1)+1) + 2);  \\n  }\\n};\\n```\\n **we can write last line as : return table[n] = min(integerReplacement(n-1) , integerReplacement(n+1) ) + 1;  but we will have trouble with INT_MAX**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  unordered_map<int,int> table;\\n  \\n  int integerReplacement(int n) {      \\n    if(n == 1) return 0;\\n    if(table.count(n)) return table[n];\\n    \\n    if(n%2 == 0) return table[n] = integerReplacement(n>>1) + 1;\\n    return table[n] = min(integerReplacement(n-1) + 1, integerReplacement((n>>1)+1) + 2);  \\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1461098,
                "title": "simple-bfs-approach-with-easy-explanations",
                "content": "Now as the question states **We have been provided with a value n and we have to reduce it to 1 by either dividing it by 2 if its even or by adding or subtracting 1 from it if its odd in 1 operation** now we have to return the minimum number of operation required \\nSo lets make it more simple lets use some basic concept of ***Directed* *Graph*** i.e \\nif **N** is **even** then we can only go to **N/2** but if **N** is odd then we can go to to 2 different point either **N-1** or **N+1** and in going from one point to other we need **1 operation** so its a **weighted directed graph** now we can use any shortest path finding algorithm here to find the minimum number of operations \\nSince its a **\\'0/1 based graph** so simple **BFS** will work like magic here is how\\n```\\nint integerReplacement(int n) {\\n        queue<pair<long long,long long>> q;\\n        q.push({n,0});  //inserting the source with initial dist 0\\n        map<long long, long long> m;\\n        while(!q.empty()){\\n            pair<long long,long long> p=q.front();\\n            long long u=p.first;\\n            long long d=p.second;\\n            m[u]=1;\\n            if(u==1) return d;\\n            q.pop();\\n\\t\\t\\t//will be checking for their adjacent child\\n            if(u%2==0){\\n                if(m[u/2]==0){\\n                q.push({u/2, d+1}); \\n                m[u/2]=1;\\n                }\\n            }else{\\n                if(m[u+1]==0){\\n                q.push({u+1, d+1});\\n                m[u+1]=1;\\n                }\\n                if(m[u-1]==0){\\n                q.push({u-1, d+1});\\n                    m[u-1]=1;\\n                }\\n            }\\n        }\\n        return {};\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint integerReplacement(int n) {\\n        queue<pair<long long,long long>> q;\\n        q.push({n,0});  //inserting the source with initial dist 0\\n        map<long long, long long> m;\\n        while(!q.empty()){\\n            pair<long long,long long> p=q.front();\\n            long long u=p.first;\\n            long long d=p.second;\\n            m[u]=1;\\n            if(u==1) return d;\\n            q.pop();\\n\\t\\t\\t//will be checking for their adjacent child\\n            if(u%2==0){\\n                if(m[u/2]==0){\\n                q.push({u/2, d+1}); \\n                m[u/2]=1;\\n                }\\n            }else{\\n                if(m[u+1]==0){\\n                q.push({u+1, d+1});\\n                m[u+1]=1;\\n                }\\n                if(m[u-1]==0){\\n                q.push({u-1, d+1});\\n                    m[u-1]=1;\\n                }\\n            }\\n        }\\n        return {};\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1458166,
                "title": "java-28-faster-than-others-but-simple-recursion-code",
                "content": "```    \\npublic int integerReplacement(int n) {\\n        if(n == 1){\\n            return 0;\\n        }\\n        \\n        if (n == Integer.MAX_VALUE) \\n            return 32;\\n        \\n        if(n % 2 == 0){\\n            return 1 + integerReplacement(n/2);\\n        } else {\\n            return 1 + Math.min(integerReplacement(n-1), integerReplacement(n+1));\\n        }\\n    }\\n\\t\\n",
                "solutionTags": [],
                "code": "```    \\npublic int integerReplacement(int n) {\\n        if(n == 1){\\n            return 0;\\n        }\\n        \\n        if (n == Integer.MAX_VALUE) \\n            return 32;\\n        \\n        if(n % 2 == 0){\\n            return 1 + integerReplacement(n/2);\\n        } else {\\n            return 1 + Math.min(integerReplacement(n-1), integerReplacement(n+1));\\n        }\\n    }\\n\\t\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1457651,
                "title": "c-solution-faster-than-100-o-logn",
                "content": "Just do as said in the problem statement. Use map for memoization. \\n```\\nclass Solution {\\npublic:\\n    map<int,long long int> dp;\\n   \\n    long long int solve(long long int n){\\n        if(n==1) return 0;\\n        if(dp[n]!=0) return dp[n];\\n        \\n        if(n%2) return dp[n] = min(solve((n-1)/2)+(long long)2, solve((n+1)/2)+(long long)2);\\n        else return dp[n] =  solve(n/2)+1;\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        \\n        dp[1]=0;\\n        return solve(n);\\n    }\\n};",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\npublic:\\n    map<int,long long int> dp;\\n   \\n    long long int solve(long long int n){\\n        if(n==1) return 0;\\n        if(dp[n]!=0) return dp[n];\\n        \\n        if(n%2) return dp[n] = min(solve((n-1)/2)+(long long)2, solve((n+1)/2)+(long long)2);\\n        else return dp[n] =  solve(n/2)+1;\\n        return dp[n];\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1387802,
                "title": "c-4-ms-5-lines-recursion-no-dp",
                "content": "Please note that I changed the function signature to long long from int\\n\\n```\\nint integerReplacement(long long n) {\\n        if(n==1)\\n            return 0;\\n        if(n&1)\\n            return 1+min(integerReplacement(n+1),integerReplacement(n-1));\\n        return 1+integerReplacement(n/2);\\n}\\n```\\n\\nI expect it to be pretty fast even for large numbers. But, I am not sure how to analyze the exact time complexity of this solution. Also, I don\\'t expect to see a lot of overlaps in the sub-problem, hence this was the reason why, I did\\'nt memoize it in the first place.\\n\\nAny help in analyzing the Time Complexity, (even loose Big-Oh bound will do) will be highly appreciated. Thanks!\\n\\n![image](https://assets.leetcode.com/users/images/cfba325e-baa3-47a4-84e6-c88030ecfdf9_1629056463.751391.png)\\n",
                "solutionTags": [],
                "code": "```\\nint integerReplacement(long long n) {\\n        if(n==1)\\n            return 0;\\n        if(n&1)\\n            return 1+min(integerReplacement(n+1),integerReplacement(n-1));\\n        return 1+integerReplacement(n/2);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1383634,
                "title": "quick-java-solution",
                "content": "```\\nHashMap<Integer,Integer> dp = new HashMap<Integer,Integer>();\\n    public int integerReplacement(int n) {\\n        if(dp.containsKey(n))return dp.get(n);\\n        if(n == 2)return 1;\\n        if(n == 1)return 0;\\n        if(n%2 == 0)dp.put(n,integerReplacement(n/2)+1);\\n        else dp.put(n,Math.min(integerReplacement(n/2),integerReplacement(n/2+1))+2);\\n        return dp.get(n);\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nHashMap<Integer,Integer> dp = new HashMap<Integer,Integer>();\\n    public int integerReplacement(int n) {\\n        if(dp.containsKey(n))return dp.get(n);\\n        if(n == 2)return 1;\\n        if(n == 1)return 0;\\n        if(n%2 == 0)dp.put(n,integerReplacement(n/2)+1);\\n        else dp.put(n,Math.min(integerReplacement(n/2),integerReplacement(n/2+1))+2);\\n        return dp.get(n);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1351927,
                "title": "python-recursion-memo-easy",
                "content": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        \\n        dp={1:0}\\n        \\n        def abhi(n):\\n            \\n            if n in dp:return dp[n]\\n            \\n            if n%2==0:\\n                dp[n] = 1+abhi(n//2)\\n            else:\\n                dp[n] = 1+ min( abhi(n+1), abhi(n-1))\\n                \\n            return dp[n]\\n        \\n        return abhi(n)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        \\n        dp={1:0}\\n        \\n        def abhi(n):\\n            \\n            if n in dp:return dp[n]\\n            \\n            if n%2==0:\\n                dp[n] = 1+abhi(n//2)\\n            else:\\n                dp[n] = 1+ min( abhi(n+1), abhi(n-1))\\n                \\n            return dp[n]\\n        \\n        return abhi(n)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1339255,
                "title": "c-dp-beats-100",
                "content": "Using DP cause there may be repetiton of numbers we land at. use ```long``` to avoid going out of bounds of int.\\n```\\nclass Solution {\\npublic:\\n    \\n    unordered_map<long,long> memo;\\n    int dp(long n){\\n        \\n        if(n == 1)\\n            return 0;\\n        \\n        if(memo.find(n) != memo.end())\\n            return memo[n];\\n        \\n        if(n%2 == 0){\\n            memo[n] = dp(n/2)+1;\\n            return memo[n];\\n        }\\n        \\n        memo[n] = (long)min(dp(n+1),dp(n-1))+1;\\n        return memo[n];\\n    }\\n    \\n    int integerReplacement(int n) {\\n        return (int)dp(n);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```long```\n```\\nclass Solution {\\npublic:\\n    \\n    unordered_map<long,long> memo;\\n    int dp(long n){\\n        \\n        if(n == 1)\\n            return 0;\\n        \\n        if(memo.find(n) != memo.end())\\n            return memo[n];\\n        \\n        if(n%2 == 0){\\n            memo[n] = dp(n/2)+1;\\n            return memo[n];\\n        }\\n        \\n        memo[n] = (long)min(dp(n+1),dp(n-1))+1;\\n        return memo[n];\\n    }\\n    \\n    int integerReplacement(int n) {\\n        return (int)dp(n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1291762,
                "title": "c-easy-solution-explained-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    int replace(long int n)\\n    {\\n\\t\\t// if 1, simply return 0\\n        if(n==1)\\n        {\\n           return 0;\\n        }\\n\\t\\t\\n\\t\\t// if n is even, replace by n/2 \\n        if(n%2==0)\\n            return replace(n/2)+1;\\n\\t\\t\\t\\n\\t\\t// if n odd then see which replacement gives minimum steps n-1 or n+1, pick that one and add 1 to it to get total\\n        else \\n            return min(replace(n-1), replace(n+1))+1;\\n        \\n    }\\n\\t\\n    int integerReplacement(int n) {\\n        return replace(n);\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int replace(long int n)\\n    {\\n\\t\\t// if 1, simply return 0\\n        if(n==1)\\n        {\\n           return 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1237164,
                "title": "easy-c-two-solns-dp-bit-manipulation-100-fastes-explanation-insde",
                "content": "//DP\\n```\\nclass Solution {\\npublic:\\n    unordered_map<int,int> mp;\\n    int sol(long n){\\n        if(n==1)return 0;\\n        if(mp.count(n))return mp[n];\\n        if(n&1)return mp[n]=1+min(sol(n-1),sol(n+1));\\n        else return mp[n]=1+sol(n/2);\\n    }\\n    int integerReplacement(int n) {\\n        return sol(n);\\n    }\\n};\\n```\\n// Bit Manipulation\\n```\\nclass Solution {\\npublic:\\n    //if least significant bit(lsb) is 0, just divide it by 2\\n    //if two lsb is 01, subtract -1 to make it 00 ans divide by 2\\n    // if two lsb is 11, say 1011 then add 1 and divide by two as it will have 4 operations\\n\\t//otherwise subtracting 1 will have 5 operation, 3 is exception (for two lsb \"11\") as subtracting one will\\n\\t//give two operation only\\n    int integerReplacement(int a) {\\n        int ans=0;\\n        long n=(long)a;\\n        while(n>1){\\n            if((n&1)==0)n>>=1;\\n            else if(n>3 && (n&3)==3)n++;\\n            else n--;\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    unordered_map<int,int> mp;\\n    int sol(long n){\\n        if(n==1)return 0;\\n        if(mp.count(n))return mp[n];\\n        if(n&1)return mp[n]=1+min(sol(n-1),sol(n+1));\\n        else return mp[n]=1+sol(n/2);\\n    }\\n    int integerReplacement(int n) {\\n        return sol(n);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    //if least significant bit(lsb) is 0, just divide it by 2\\n    //if two lsb is 01, subtract -1 to make it 00 ans divide by 2\\n    // if two lsb is 11, say 1011 then add 1 and divide by two as it will have 4 operations\\n\\t//otherwise subtracting 1 will have 5 operation, 3 is exception (for two lsb \"11\") as subtracting one will\\n\\t//give two operation only\\n    int integerReplacement(int a) {\\n        int ans=0;\\n        long n=(long)a;\\n        while(n>1){\\n            if((n&1)==0)n>>=1;\\n            else if(n>3 && (n&3)==3)n++;\\n            else n--;\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1191467,
                "title": "several-python-solutions-with-explanations",
                "content": "**Solution1 - BFS**\\n\\nFollow the requirement to decrease `n` and push all paths into a `queue` and when the `num` becomes `1`, return the `step`. Also, to save a time, we can use memorization to record the visited num:\\n```python\\ndef integerReplacement(self, n: int) -> int:\\n\\tqueue = collections.deque([[n, 0]])\\n\\tvisited = set()\\n\\twhile queue:\\n\\t\\tnum, step = queue.popleft()\\n\\t\\tif num in visited:\\n\\t\\t\\tcontinue\\n\\t\\tif num == 1:\\n\\t\\t\\treturn step\\n\\t\\tvisited.add(num)\\n\\t\\tif num % 2 == 0:\\n\\t\\t\\tqueue.append([num//2, step+1])\\n\\t\\telse:\\n\\t\\t\\tqueue.extend([[num-1, step+1], [num+1, step+1]])\\n```\\n\\n**Solution2 - Greedy**\\n\\n* If n is even, no choice but n //= 2\\n* If n is odd, we select a way to decrease faster:\\n    * If (n+1) % 4 == 0, n += 1\\n    * If (n-1) % 4 == 0, n -= 1\\n\\nSpecial case, n == 3: 3 -> 2 -> 1 (2 steps)\\n```python\\ndef integerReplacement2(self, n: int) -> int:\\n\\tstep = 0\\n\\twhile n != 1:\\n\\t\\tif n % 2 == 0:\\n\\t\\t\\tn //= 2\\n\\t\\telif n == 3:\\n\\t\\t\\treturn step + 2\\n\\t\\telif (n+1) % 4 == 0:\\n\\t\\t\\tn += 1\\n\\t\\telse:\\n\\t\\t\\tn -= 1\\n\\t\\tstep += 1\\n\\treturn step\\n```\\n\\n**Solution3 - Recursive**\\n\\n`f(2n) = f(n) + 1`\\n`f(2n+1) = 1 + min(f(2n), f(2n+2) = 1 + min(f(n)+1, f(n+1)+1) = 2 + min(f(n), f(n+1)`\\n```python\\ndef integerReplacement3(self, n: int) -> int:\\n\\tdef helper(n):\\n\\t\\tif n == 1:\\n\\t\\t\\treturn 0\\n\\t\\telif n % 2 == 0:\\n\\t\\t\\treturn 1 + helper(n//2)\\n\\t\\telse:\\n\\t\\t\\t# return 1 + min(helper(n+1), helper(n-1))\\n\\t\\t\\treturn 2 + min(helper(n//2), helper(n//2 + 1))\\n\\n\\treturn helper(n)\\n```\\n\\nPlease vote if you think helpful!",
                "solutionTags": [],
                "code": "```python\\ndef integerReplacement(self, n: int) -> int:\\n\\tqueue = collections.deque([[n, 0]])\\n\\tvisited = set()\\n\\twhile queue:\\n\\t\\tnum, step = queue.popleft()\\n\\t\\tif num in visited:\\n\\t\\t\\tcontinue\\n\\t\\tif num == 1:\\n\\t\\t\\treturn step\\n\\t\\tvisited.add(num)\\n\\t\\tif num % 2 == 0:\\n\\t\\t\\tqueue.append([num//2, step+1])\\n\\t\\telse:\\n\\t\\t\\tqueue.extend([[num-1, step+1], [num+1, step+1]])\\n```\n```python\\ndef integerReplacement2(self, n: int) -> int:\\n\\tstep = 0\\n\\twhile n != 1:\\n\\t\\tif n % 2 == 0:\\n\\t\\t\\tn //= 2\\n\\t\\telif n == 3:\\n\\t\\t\\treturn step + 2\\n\\t\\telif (n+1) % 4 == 0:\\n\\t\\t\\tn += 1\\n\\t\\telse:\\n\\t\\t\\tn -= 1\\n\\t\\tstep += 1\\n\\treturn step\\n```\n```python\\ndef integerReplacement3(self, n: int) -> int:\\n\\tdef helper(n):\\n\\t\\tif n == 1:\\n\\t\\t\\treturn 0\\n\\t\\telif n % 2 == 0:\\n\\t\\t\\treturn 1 + helper(n//2)\\n\\t\\telse:\\n\\t\\t\\t# return 1 + min(helper(n+1), helper(n-1))\\n\\t\\t\\treturn 2 + min(helper(n//2), helper(n//2 + 1))\\n\\n\\treturn helper(n)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1156593,
                "title": "c-easy-to-understand-recursive-solution",
                "content": "I personally think, there is an error in a test case. When n = INT_MAX, answer should have been 1+func(n-1), but the code is working fine with func(n-1).\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        if(n == 1)\\n            return 0;\\n        if(n%2 == 0)\\n            return 1+integerReplacement(n/2);\\n        else\\n        {\\n            if(n == INT_MAX)\\n                return integerReplacement(n-1);\\n            else\\n                return 1 + min(integerReplacement(n+1), integerReplacement(n-1));\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        if(n == 1)\\n            return 0;\\n        if(n%2 == 0)\\n            return 1+integerReplacement(n/2);\\n        else\\n        {\\n            if(n == INT_MAX)\\n                return integerReplacement(n-1);\\n            else\\n                return 1 + min(integerReplacement(n+1), integerReplacement(n-1));\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1127971,
                "title": "easy-python-and-c-solution-same-approach-on-both",
                "content": "python solution:\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        c=0\\n        while (n!=1):\\n            if (n%2==0):\\n                n=n//2\\n            elif n==3:\\n                n=n-1\\n            elif (n&3==3):\\n                n=n+1\\n            elif (n&3==1):\\n                n=n-1\\n            c+=1\\n        return c\\n```\\nC solution \\n```\\n\\n\\nint integerReplacement(long long int n){\\n    int x=0;\\n    while(n!=1){\\n        if (n%2==0){\\n            n=n/2;\\n        }\\n        else if (n==3){\\n            n=n-1;\\n        }\\n        else if((n&3)==3){\\n            n=n+1;\\n        }\\n        else if ((n&3)==1){\\n            n=n-1;\\n        }\\n        x+=1;\\n    }\\n    return x;\\n\\n}\\n```\\nPlease upvote if you find this helpful \\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        c=0\\n        while (n!=1):\\n            if (n%2==0):\\n                n=n//2\\n            elif n==3:\\n                n=n-1\\n            elif (n&3==3):\\n                n=n+1\\n            elif (n&3==1):\\n                n=n-1\\n            c+=1\\n        return c\\n```\n```\\n\\n\\nint integerReplacement(long long int n){\\n    int x=0;\\n    while(n!=1){\\n        if (n%2==0){\\n            n=n/2;\\n        }\\n        else if (n==3){\\n            n=n-1;\\n        }\\n        else if((n&3)==3){\\n            n=n+1;\\n        }\\n        else if ((n&3)==1){\\n            n=n-1;\\n        }\\n        x+=1;\\n    }\\n    return x;\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1112430,
                "title": "java-0ms-bit-manipulation",
                "content": "```\\nIf the last two bits of `n` is:\\n  ?0 => right shift one bit (use `>>>` to avoid issue casused by integer overflow)\\n  01 => n--\\n  11 => if (n == 3) { n-- } else { n++ }\\n```\\nThe Code:\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int ops = 0;\\n        while (n != 1) {\\n            if ((n & 1) == 0) {\\n                n >>>= 1;\\n            } else if (n > 3 && (n & 3) == 3) {\\n                n += 1;\\n            } else {\\n                n -= 1;\\n            }\\n            ops++;\\n        }\\n        return ops;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "```\\nIf the last two bits of `n` is:\\n  ?0 => right shift one bit (use `>>>` to avoid issue casused by integer overflow)\\n  01 => n--\\n  11 => if (n == 3) { n-- } else { n++ }\\n```\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        int ops = 0;\\n        while (n != 1) {\\n            if ((n & 1) == 0) {\\n                n >>>= 1;\\n            } else if (n > 3 && (n & 3) == 3) {\\n                n += 1;\\n            } else {\\n                n -= 1;\\n            }\\n            ops++;\\n        }\\n        return ops;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1094343,
                "title": "python-simple-bfs",
                "content": "```\\n    def integerReplacement(self, n: int) -> int:\\n        queue=[]\\n        queue.append(n)\\n        count=-1\\n        while(True):\\n            count+=1\\n            l=len(queue)\\n            while(l>0):\\n                l-=1\\n                s=queue.pop(0)\\n                if s==1:\\n                    return count\\n                if s%2==0:\\n                    queue.append(s//2)\\n                else:\\n                    queue.append(s+1)\\n                    queue.append(s-1)\\n        \\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def integerReplacement(self, n: int) -> int:\\n        queue=[]\\n        queue.append(n)\\n        count=-1\\n        while(True):\\n            count+=1\\n            l=len(queue)\\n            while(l>0):\\n                l-=1\\n                s=queue.pop(0)\\n                if s==1:\\n                    return count\\n                if s%2==0:\\n                    queue.append(s//2)\\n                else:\\n                    queue.append(s+1)\\n                    queue.append(s-1)\\n        \\n",
                "codeTag": "Python3"
            },
            {
                "id": 1074599,
                "title": "simple-bfs-algorithm-c",
                "content": "```\\n\\tint integerReplacement(int n) {\\n        queue<pair<long long,long long> > q;\\n        q.push({n,0});\\n        while(!q.empty())\\n        {\\n            auto pii = q.front();\\n            q.pop();\\n            long long val = pii.first;\\n            long long idx = pii.second;\\n            if(val==1)\\n            {\\n                return idx;\\n            }\\n            if(val&1)\\n            {\\n                q.push({val+1,idx+1});\\n                q.push({val-1,idx+1});\\n            }\\n            else\\n                q.push({val/2,idx+1});\\n        }\\n        return 0;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Breadth-First Search"
                ],
                "code": "```\\n\\tint integerReplacement(int n) {\\n        queue<pair<long long,long long> > q;\\n        q.push({n,0});\\n        while(!q.empty())\\n        {\\n            auto pii = q.front();\\n            q.pop();\\n            long long val = pii.first;\\n            long long idx = pii.second;\\n            if(val==1)\\n            {\\n                return idx;\\n            }\\n            if(val&1)\\n            {\\n                q.push({val+1,idx+1});\\n                q.push({val-1,idx+1});\\n            }\\n            else\\n                q.push({val/2,idx+1});\\n        }\\n        return 0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1028173,
                "title": "c-faster-than-100-bit-manipulation",
                "content": "```\\n/*-----------------IDEA---------------\\nIf number is odd\\n    If number in 32-bit repesentaion is \\'abccd....11\\'(rightmost 2nd bit is 1) then we add 1 because by adding one we will convert all righmost contineous 1 bits to 0, and more contineous rightmost bits be 0, we can get more contineous even numbers, so we can contineous keep dividing it by 2\\n    \\n    else if number in 32-bit repesentaion is \\'abccd....01\\'(rightmost 2nd bit is 0) so we will subtract 1, so that most of right bits remains zero, so and more contineous rightmost bits be 0, we can get more contineous even numbers, so we can contineous keep dividing it by 2\\n    \\nALTHOUGH 3 is exeptional because in bit representaion it is 00....011(2nd rightmost bit is one), but total number to make 3->1 increases if we add 1. So, we handle this case seprately\\n*/\\nclass Solution {\\npublic:\\n    int integerReplacement(unsigned int n) {\\n        \\n        int res =0;\\n        while(n!=1)\\n        {\\n            if(n==3) //Handling 3 saperatly\\n            {\\n                res+=2;\\n                break;\\n            }\\n            if( !(n & (n-1)) )  //Checking if number is 2^n\\n            {\\n                res += log2(n);\\n                break;\\n            }\\n            if(n&1) //If odd\\n            {\\n                if(n&(1<<1))    //checking if last second bit is 1\\n                    n++;\\n                else\\n                    n--;\\n            }\\n            else    //If Even\\n                n=n>>1;\\n            res++;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/*-----------------IDEA---------------\\nIf number is odd\\n    If number in 32-bit repesentaion is \\'abccd....11\\'(rightmost 2nd bit is 1) then we add 1 because by adding one we will convert all righmost contineous 1 bits to 0, and more contineous rightmost bits be 0, we can get more contineous even numbers, so we can contineous keep dividing it by 2\\n    \\n    else if number in 32-bit repesentaion is \\'abccd....01\\'(rightmost 2nd bit is 0) so we will subtract 1, so that most of right bits remains zero, so and more contineous rightmost bits be 0, we can get more contineous even numbers, so we can contineous keep dividing it by 2\\n    \\nALTHOUGH 3 is exeptional because in bit representaion it is 00....011(2nd rightmost bit is one), but total number to make 3->1 increases if we add 1. So, we handle this case seprately\\n*/\\nclass Solution {\\npublic:\\n    int integerReplacement(unsigned int n) {\\n        \\n        int res =0;\\n        while(n!=1)\\n        {\\n            if(n==3) //Handling 3 saperatly\\n            {\\n                res+=2;\\n                break;\\n            }\\n            if( !(n & (n-1)) )  //Checking if number is 2^n\\n            {\\n                res += log2(n);\\n                break;\\n            }\\n            if(n&1) //If odd\\n            {\\n                if(n&(1<<1))    //checking if last second bit is 1\\n                    n++;\\n                else\\n                    n--;\\n            }\\n            else    //If Even\\n                n=n>>1;\\n            res++;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 978870,
                "title": "bit-wise-solution-time-complexity-approximate-log-n-with-explainaatoin",
                "content": "Divide a number by 2 ,simply implies that right shift f that number by 1 ( num >>1)\\neg. 9=1001\\n     9>>1 = 100\\nSo according to this question  , when we encounter even number then simply divide that number by 2\\nie. num = num/2;\\n**let\\'s assume after increment or decrement in num it becomes num***\\n**But when we encounter odd number then we have two option either num++ or num-- , in both cases after increment or decrement , we will get a even number , But which one should i choose ?**\\nwe can not divide odd number but we can determine that what we get in next step after doing changes in **num** to get **num*** and  divide num* by 2 just using right shift operater.\\nand **it should be more beneficial to get even number than odd .**\\neg. 9=1001 \\n    **case -1**\\n\\t 9>>1=100 (4) (it means after right shift , we get 4 , which is even )\\n\\t  here , we **decrease** 9 (num--) to get 8 and divide it by 2 to get 4. \\n\\t  **case -2**\\n\\t  if we **increase** 9 to get 10 then after dividing by 2 , we get 5 which is odd (not beneficial)\\n**conclusion** - we can determine,what we will  get in out next to next step just simply \\n\\t\\t\\t\\t\\t\\t\\t**check 2nd bit from right if it is set then we wil get odd number(in next to next step) , do not                                     decrease(in this case increase) otherwise decrease  **\\n\\t\\t\\t\\t\\t\\teg. 9 = 10 0 1 (in my next to next step , we will get even number if we decease (9->8->4)\\n\\t\\t\\t\\tbut in 11 = 10 1 1 (if we decrease then in our next to next step , we will get odd number(11->10->5 ) \\n\\t\\t\\t\\tin this case , number should be increased)\\n\\nclass Solution {\\npublic:\\n    int integerReplacement(int num) {\\n        long long int count=0,n=num;\\n        while(n>1){\\n            if((n&1)==0){\\n                count++;\\n                n=n/2;\\n            }\\n            else{\\n                if(n==3){\\n                    count+=2;\\n                    break;\\n                }\\n                else{\\n                    count++;\\n                    if((n>>1)&1)\\n                        n++;\\n                    else\\n                        n--;\\n                }\\n            }\\n        }\\n        return count;\\n    }    \\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int integerReplacement(int num) {\\n        long long int count=0,n=num;\\n        while(n>1){\\n            if((n&1)==0){\\n                count++;\\n                n=n/2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 964798,
                "title": "runtime-0-ms-faster-than-100-00-simple-java-recursion-with-memoization",
                "content": "**Logic:** \\n* If the number **n** is divisible by 2, we will divide it by 2 and call the recursive function with **n/2**. \\n* If the number **n** is not divisible by 2, we will call the recursive function with input **n-1** and **n+1**.\\n* We will store the values in a map corresponding to already computed values of **n**.\\n```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) \\n            return 32; \\n        if(n==1)\\n            return 0;\\n        if(n==2)\\n            return 1;\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        map.put(0, 0);\\n        map.put(1, 0);\\n        map.put(2, 1);\\n        return count(n, map);\\n    }\\n    \\n    private int count(int n, HashMap<Integer, Integer> map){\\n        if(n % 2 == 0){\\n            if(map.getOrDefault(n/2, 0) == 0){\\n                map.put(n/2, count(n/2, map));\\n            }\\n            map.put(n, 1+map.get(n/2));\\n        } else{\\n            if(map.getOrDefault(n-1, 0) == 0){\\n                map.put(n-1, count(n-1, map));\\n            }\\n            if(map.getOrDefault(n+1, 0) == 0){\\n                map.put(n+1, count(n+1, map));\\n            }\\n            map.put(n, 1+Math.min(map.get(n-1), map.get(n+1)));\\n        }\\n        return map.get(n);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        if (n == Integer.MAX_VALUE) \\n            return 32; \\n        if(n==1)\\n            return 0;\\n        if(n==2)\\n            return 1;\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        map.put(0, 0);\\n        map.put(1, 0);\\n        map.put(2, 1);\\n        return count(n, map);\\n    }\\n    \\n    private int count(int n, HashMap<Integer, Integer> map){\\n        if(n % 2 == 0){\\n            if(map.getOrDefault(n/2, 0) == 0){\\n                map.put(n/2, count(n/2, map));\\n            }\\n            map.put(n, 1+map.get(n/2));\\n        } else{\\n            if(map.getOrDefault(n-1, 0) == 0){\\n                map.put(n-1, count(n-1, map));\\n            }\\n            if(map.getOrDefault(n+1, 0) == 0){\\n                map.put(n+1, count(n+1, map));\\n            }\\n            map.put(n, 1+Math.min(map.get(n-1), map.get(n+1)));\\n        }\\n        return map.get(n);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 950447,
                "title": "simple-logarithmic-solution",
                "content": "I have seen people come up with intricate solutions whereas it is actually an easy problem. Simple is best. Always pick the simplest solution possible.\\n**Algorithm :**  \\n1. Initialize moves as 0\\n2. While n is greater than one perform following steps - \\n         \\n          if n % 2 == 0, perform division\\n          else if n == 3 or  n % 4 == 1, perform decrement\\n          else perform increment\\n\\t\\t  Perform moves++ for each iteration\\n3. return moves\\n\\nCode:\\n```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        moves = 0\\n        while n > 1:\\n            if n % 2 == 0:\\n                n //= 2\\n                \\n            elif n == 3 or n % 4 == 1:\\n                n -= 1\\n            \\n            else:\\n                n += 1\\n                \\n            moves += 1\\n            \\n        return moves\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def integerReplacement(self, n: int) -> int:\\n        moves = 0\\n        while n > 1:\\n            if n % 2 == 0:\\n                n //= 2\\n                \\n            elif n == 3 or n % 4 == 1:\\n                n -= 1\\n            \\n            else:\\n                n += 1\\n                \\n            moves += 1\\n            \\n        return moves\\n```",
                "codeTag": "Java"
            },
            {
                "id": 916030,
                "title": "java-simple-recursion-with-bit-manipulation",
                "content": "This solution does not uses any of the check condition used in other discussions, making it easier to understand.\\n```\\n\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        \\n        return helper(n, 0);\\n    }\\n    \\n    int helper(int n , int step){\\n       \\n            \\n        while((n&1) == 0){\\n            n>>>=1;\\n            step++;\\n        }\\n        if(n==1)return step;\\n        return Math.min(helper(n-1, step+1), helper(n+1, step+1));\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        \\n        return helper(n, 0);\\n    }\\n    \\n    int helper(int n , int step){\\n       \\n            \\n        while((n&1) == 0){\\n            n>>>=1;\\n            step++;\\n        }\\n        if(n==1)return step;\\n        return Math.min(helper(n-1, step+1), helper(n+1, step+1));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 872493,
                "title": "c-bit-manipulation-soln",
                "content": "class Solution {\\npublic:\\n    int integerReplacement(int N) {\\n         //one of the test cases has input as final limit of integer.\\n\\t\\tlong n=N;                         \\n        \\n        int c=0;\\n\\n\\t\\twhile(n>1)\\n        {\\n            \\n            \\n            \\n            if(((n>>0)&1)==0)\\n            {\\n                if(n==2)\\n            {\\n                c=c+1;\\n                break;\\n            }\\n                c++;\\n                n=n/2;\\n            }\\n            else\\n            {\\n                if(n==3)\\n                 {\\n                c=c+2;\\n                break;\\n                }\\n                c++;\\n                if(((n>>1)&1)==1)\\n                {\\n                    n++;\\n                }\\n                else\\n                    n--;\\n                \\n            }\\n        }\\n        return c;\\n        \\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int integerReplacement(int N) {\\n         //one of the test cases has input as final limit of integer.\\n\\t\\tlong n=N;                         \\n        \\n        int c=0;\\n\\n\\t\\twhile(n>1)\\n        {\\n            \\n            \\n            \\n            if(((n>>0)&1)==0)\\n            {\\n                if(n==2)\\n            {\\n                c=c+1;\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 803412,
                "title": "3-lines-python",
                "content": "```python\\nclass Solution:\\n    @lru_cache(maxsize = None)\\n    def integerReplacement(self, n: int) -> int:\\n        if n == 1 or n < 1: return 0\\n        elif n&1 == 0:  return self.integerReplacement(n//2) + 1\\n        return min( self.integerReplacement((n+1)//2), self.integerReplacement((n-1)//2)) + 2\\n            \\n            \\n\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    @lru_cache(maxsize = None)\\n    def integerReplacement(self, n: int) -> int:\\n        if n == 1 or n < 1: return 0\\n        elif n&1 == 0:  return self.integerReplacement(n//2) + 1\\n        return min( self.integerReplacement((n+1)//2), self.integerReplacement((n-1)//2)) + 2\\n            \\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 765665,
                "title": "100-fast-simple-java-solution-without-using-recursion",
                "content": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        \\n        if (n == Integer.MAX_VALUE) return 32; \\n        if(n==1)return 0;\\n        if(n==2)return 1;\\n        if(n==3)return 2;\\n        \\n        int c = 0;\\n        \\n        while(n>1){\\n            \\n            if(n%2==0)\\n                n=n/2;            \\n            else{\\n                if((n+1)%4==0 && n!=3)\\n                    ++n;\\n                else\\n                    --n;                \\n            }\\n\\t\\t\\t++c;\\n        }\\n        return c;                \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public int integerReplacement(int n) {\\n        \\n        if (n == Integer.MAX_VALUE) return 32; \\n        if(n==1)return 0;\\n        if(n==2)return 1;\\n        if(n==3)return 2;\\n        \\n        int c = 0;\\n        \\n        while(n>1){\\n            \\n            if(n%2==0)\\n                n=n/2;            \\n            else{\\n                if((n+1)%4==0 && n!=3)\\n                    ++n;\\n                else\\n                    --n;                \\n            }\\n\\t\\t\\t++c;\\n        }\\n        return c;                \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 695239,
                "title": "0ms-java-solution-better-than-100-and-easiest-to-understand",
                "content": "```\\n\\n```class Solution {\\n    //int dp[];\\n    HashMap<Integer,Integer> h;\\n    public int helper(int n){\\n        if(n<1){\\n            return Integer.MAX_VALUE-10000;\\n        }\\n        if(n==1){\\n            return 0;\\n        }\\n        if(h.containsKey(n)){\\n            return h.get(n);\\n        }\\n        if(n%2==0){\\n            int k=1+helper(n/2);\\n            h.put(n,k);\\n            return k;\\n        }\\n        int k=1+Math.min(helper(n-1),helper(n+1));\\n        h.put(n,k);\\n        return k;\\n    }\\n    public int integerReplacement(int n) {\\n        //dp=new int[n+10];\\n        h=new HashMap();\\n        if(n==2147483647){\\n            return 32;\\n        }\\n        return helper(n);\\n    }\\n}",
                "solutionTags": [],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 694631,
                "title": "cpp-solution-in-o-number-of-bits-and-o-1-space",
                "content": "class Solution {\\npublic:\\n  \\n    int integerReplacement(int t) {\\n        int count = 0;\\n        long long int n = t;\\n        while(n>1)\\n        {\\n            if(n%2 == 0)\\n            {\\n                n = n/2;\\n            }\\n            else{\\n                if((((n/4)%2) != 0) && (((n/2)%2) !=0))\\n                {\\n                    n = n+1;\\n                }\\n                else if((n/2)%2 != 0 && ((n/8)%2)!=0)\\n                {\\n                    n = n+1;\\n                }\\n                else{\\n                    n = n-1;\\n                }\\n            }\\n            count++;\\n         }\\n        \\n        return count;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n  \\n    int integerReplacement(int t) {\\n        int count = 0;\\n        long long int n = t;\\n        while(n>1)\\n        {\\n            if(n%2 == 0)\\n            {\\n                n = n/2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 672418,
                "title": "c-no-branching-fast",
                "content": "The idea with this solution, is that we avoid branching, so we dont suffer from branch misprediction in the loop, so it should be faster. Given we\\'re working with 32 bits, this is more of an academic exercise that a useful one.\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(long n) {\\n        auto result = 0;\\n        while (n>4) {\\n            n = (n >> 1-(n&1)) + (n&1)*((n&2)-1);\\n            ++result;\\n        }\\n        return result + (n==0) + (n>1) + (n>2);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(long n) {\\n        auto result = 0;\\n        while (n>4) {\\n            n = (n >> 1-(n&1)) + (n&1)*((n&2)-1);\\n            ++result;\\n        }\\n        return result + (n==0) + (n>1) + (n>2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 632360,
                "title": "simple-easy-to-understand-java-recursive-solution",
                "content": "```\\npublic int integerReplacement(int n) {\\n        if(n == Integer.MAX_VALUE) return 32;\\n        return minops(n, 0);\\n    }\\n    private int minops(int n, int count){\\n        if(n == 1) return count;\\n        if(n % 2 == 0) return minops(n / 2, count + 1);\\n        return Math.min(minops(n + 1, count + 1), minops(n - 1, count + 1));\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int integerReplacement(int n) {\\n        if(n == Integer.MAX_VALUE) return 32;\\n        return minops(n, 0);\\n    }\\n    private int minops(int n, int count){\\n        if(n == 1) return count;\\n        if(n % 2 == 0) return minops(n / 2, count + 1);\\n        return Math.min(minops(n + 1, count + 1), minops(n - 1, count + 1));\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 520826,
                "title": "very-simple-recursion-answer-c",
                "content": "```\\npublic class Solution {\\n    public int IntegerReplacement(int n) \\n    {\\n        return Dfs(n);\\n    }\\n    \\n    public int Dfs(long n)\\n    {\\n        if(n == 1) return 0;\\n        if(n % 2 == 0) return 1 + Dfs(n / 2);\\n        else return 1 + Math.Min(Dfs(n + 1), Dfs(n - 1));\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int IntegerReplacement(int n) \\n    {\\n        return Dfs(n);\\n    }\\n    \\n    public int Dfs(long n)\\n    {\\n        if(n == 1) return 0;\\n        if(n % 2 == 0) return 1 + Dfs(n / 2);\\n        else return 1 + Math.Min(Dfs(n + 1), Dfs(n - 1));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 462812,
                "title": "rust-0ms-2-4mb-without-recursion",
                "content": "Actually we don\\'t need to search. The key point is to apply \"n/2\" as much as possible. Let\\'s look at the binary representation of these numbers.\\n* when n ends with 0: n = 00..11..10, we divide n by 2.\\n* but when n ends with 1, there are two situations:\\n\\t * ends with single 1: 0001, we apply n-1, so it can quickly decrease to 1.\\n\\t * ends with multiple 1: 00111: in this situation, if we apply n-1, there\\'s only one 0 in the end of binary, but if we apply n+1, we\\'ll get 00..010..0, we can apply multiple n/2 to it.\\n\\t* The only exception is n = 3, where 011->100\\'s profit is less than 011->010.\\n\\n```rust\\npub fn integer_replacement(n: i32) -> i32 {\\n\\tlet mut res = 0;\\n\\tlet mut n = n as i64;\\n\\twhile n != 1 {\\n\\t\\tif n == 3 {\\n\\t\\t\\tres += 2;\\n\\t\\t\\tn = 1;\\n\\t\\t} else if n % 2 == 0 {\\n\\t\\t\\tn /= 2;\\n\\t\\t\\tres += 1;\\n\\t\\t} else if n % 4 == 1 {\\n\\t\\t\\tn -= 1;\\n\\t\\t\\tres += 1;\\n\\t\\t} else {\\n\\t\\t\\tn += 1;\\n\\t\\t\\tres += 1;\\n\\t\\t}\\n\\t}\\n\\tres\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\npub fn integer_replacement(n: i32) -> i32 {\\n\\tlet mut res = 0;\\n\\tlet mut n = n as i64;\\n\\twhile n != 1 {\\n\\t\\tif n == 3 {\\n\\t\\t\\tres += 2;\\n\\t\\t\\tn = 1;\\n\\t\\t} else if n % 2 == 0 {\\n\\t\\t\\tn /= 2;\\n\\t\\t\\tres += 1;\\n\\t\\t} else if n % 4 == 1 {\\n\\t\\t\\tn -= 1;\\n\\t\\t\\tres += 1;\\n\\t\\t} else {\\n\\t\\t\\tn += 1;\\n\\t\\t\\tres += 1;\\n\\t\\t}\\n\\t}\\n\\tres\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 447828,
                "title": "c-0ms-beat-100-python-12ms-beat-100",
                "content": "C++ solution,\\n```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        int steps = 0;\\n        long long m = n;\\n        \\n        while (m - 1) {\\n            if ((m & 1) == 0)\\n                m >>= 1;\\n            else if ((m + 1)%4 == 0 && m != 3)\\n                m += 1;\\n            else\\n                m -= 1;\\n            \\n            ++steps;\\n        }\\n    \\n        return steps;\\n    }\\n};\\n```\\n\\nPython solution,\\n```\\nclass Solution:\\n    def integerReplacement(self, n):\\n        steps, m = 0, n\\n\\n        while m - 1:\\n            if (m & 1) == 0:\\n                m >>= 1\\n            elif (m + 1)%4 == 0 and m != 3:\\n                m += 1\\n            else:\\n                m -= 1\\n\\n            steps += 1\\n\\n        return steps\\n```",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int integerReplacement(int n) {\\n        int steps = 0;\\n        long long m = n;\\n        \\n        while (m - 1) {\\n            if ((m & 1) == 0)\\n                m >>= 1;\\n            else if ((m + 1)%4 == 0 && m != 3)\\n                m += 1;\\n            else\\n                m -= 1;\\n            \\n            ++steps;\\n        }\\n    \\n        return steps;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def integerReplacement(self, n):\\n        steps, m = 0, n\\n\\n        while m - 1:\\n            if (m & 1) == 0:\\n                m >>= 1\\n            elif (m + 1)%4 == 0 and m != 3:\\n                m += 1\\n            else:\\n                m -= 1\\n\\n            steps += 1\\n\\n        return steps\\n```",
                "codeTag": "Java"
            },
            {
                "id": 407631,
                "title": "python-simple-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef integerReplacement(self, n: int) -> int:\\n\\t\\t\\tcount = 0\\n\\t\\t\\twhile(n!=1):\\n\\t\\t\\t\\tif n==3:\\n\\t\\t\\t\\t\\tcount+=2\\n\\t\\t\\t\\t\\treturn count\\n\\t\\t\\t\\twhile(n%2!=0):\\n\\t\\t\\t\\t\\tif n%4==3:\\n\\t\\t\\t\\t\\t\\tn+=1\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tn-=1\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\t\\twhile(n%2==0):\\n\\t\\t\\t\\t\\tn=n/2\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\treturn count",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef integerReplacement(self, n: int) -> int:\\n\\t\\t\\tcount = 0\\n\\t\\t\\twhile(n!=1):\\n\\t\\t\\t\\tif n==3:\\n\\t\\t\\t\\t\\tcount+=2\\n\\t\\t\\t\\t\\treturn count\\n\\t\\t\\t\\twhile(n%2!=0):\\n\\t\\t\\t\\t\\tif n%4==3:\\n\\t\\t\\t\\t\\t\\tn+=1\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tn-=1\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\t\\twhile(n%2==0):\\n\\t\\t\\t\\t\\tn=n/2\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\treturn count",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1567970,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1819660,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1910331,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2030384,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2000660,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2000241,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1988515,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1977279,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1908904,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1812403,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1567970,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1819660,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1910331,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2030384,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2000660,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 2000241,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1988515,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1977279,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1908904,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1812403,
                "content": [
                    {
                        "username": "Ryho",
                        "content": "Just a little observation, this appears to be a baby version of the unsolved **3n+1 problem**, whose conjectured answer is known as the [Collatz Conjecture](https://en.wikipedia.org/wiki/Collatz_conjecture).\\n\\nThe only difference is that for odd numbers `n` you replace with `3n+1`.  It's conjectured that you can always get to 1 by following the rules, but to this day it remains unproved.\\n\\nFortunately this one is much easier. :)"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "Wow, it literally is! Thanks for sharing this resource. Infact the Greedy solution is based on this observation that the series always ends in 4->2->1."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "My Recursive Code is Working Fine but runtime error for memorization any suggestions ?? .\\nclass Solution {\\npublic:\\n    long long solve(long long n ,vector<long long>&dp){\\n        if(n<=1)return 0;\\n        if(dp[n]!=-1)return dp[n];\\n        if(n%2==0)return dp[n]=1+solve(n/2,dp);\\n        else{\\n            return   dp[n]=1+min(solve(n+1,dp),solve(n-1,dp));\\n        }\\n    }\\n    int integerReplacement(int n) {\\n            int c=0;\\n            vector<long long>dp(n+1,-1);\\n           return solve(n,dp);  \\n            // return c;\\n    }\\n};"
                    },
                    {
                        "username": "ayushanand18",
                        "content": "should use map because if n is INT_MAX, then it will not be able to allocate that much space."
                    },
                    {
                        "username": "21bcs069",
                        "content": "size of dp vector should be n+2 , when n is odd "
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "If you are facing the issue \"runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' \" \\n\\nYou can use long long or int unsigned  as data type instead of int for the parameter n "
                    },
                    {
                        "username": "frozennuts",
                        "content": "Djikstra is my girl friend"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Nice problem to practice recursion and memoization!"
                    },
                    {
                        "username": "parthdharmale008",
                        "content": "the below code shows all test cases passed but still error comes as memory limit exceeded, can someone please help?\\nclass Solution {\\npublic:\\n    int solve(vector<int>& dp,int n){\\n        if(n == 1) return 0;\\n\\n        if(dp[n] != -1) return dp[n];\\n\\n        if(n&1){\\n            dp[n] = min(solve(dp, n-1), solve(dp, n+1)) + 1;\\n        }else{\\n            dp[n] = solve(dp, n/2) + 1;\\n        }\\n        return dp[n];\\n    }\\n    int integerReplacement(int n) {\\n        if( n == 2147483647) return 32;\\n\\n        vector<int> dp(n+2, -1);\\n        return solve(dp, n);\\n    }\\n};"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "it takes unneccesory too much space. rather use unordered map\\n"
                    },
                    {
                        "username": "battousai007",
                        "content": "can anyone explain the bitwise approach\\n"
                    },
                    {
                        "username": "0icy",
                        "content": "why is bit mainpulation given as related topics?"
                    },
                    {
                        "username": "Goblin_Cyanide",
                        "content": "BFS Gang"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "class Solution {\\npublic:\\n  int integerReplacement(int n) {\\n        if(n==2147483647)\\n            return integerReplacement(n-1);\\n        if(n==1)\\n            return 0;\\n        if(n%2==0)\\n            return integerReplacement(n/2)+1;\\n        else\\n        {\\n            if(n==3||n%4==1)\\n            {\\n                return integerReplacement(n-1)+1;\\n            }\\n            else\\n            {\\n                return integerReplacement(n+1)+1;\\n            }\\n        }\\n    }\\n};"
                    }
                ]
            }
        ]
    },
    {
        "title": "Random Point in Non-overlapping Rectangles",
        "question_content": "<p>You are given an array of non-overlapping axis-aligned rectangles <code>rects</code> where <code>rects[i] = [a<sub>i</sub>, b<sub>i</sub>, x<sub>i</sub>, y<sub>i</sub>]</code> indicates that <code>(a<sub>i</sub>, b<sub>i</sub>)</code> is the bottom-left corner point of the <code>i<sup>th</sup></code> rectangle and <code>(x<sub>i</sub>, y<sub>i</sub>)</code> is the top-right corner point of the <code>i<sup>th</sup></code> rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.</p>\n\n<p>Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.</p>\n\n<p><strong>Note</strong> that an integer point is a point that has integer coordinates.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[][] rects)</code> Initializes the object with the given rectangles <code>rects</code>.</li>\n\t<li><code>int[] pick()</code> Returns a random integer point <code>[u, v]</code> inside the space covered by one of the given rectangles.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/24/lc-pickrandomrec.jpg\" style=\"width: 419px; height: 539px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\n<strong>Output</strong>\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rects.length &lt;= 100</code></li>\n\t<li><code>rects[i].length == 4</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= a<sub>i</sub> &lt; x<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= b<sub>i</sub> &lt; y<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>x<sub>i</sub> - a<sub>i</sub> &lt;= 2000</code></li>\n\t<li><code>y<sub>i</sub> - b<sub>i</sub> &lt;= 2000</code></li>\n\t<li>All the rectangles do not overlap.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 316890,
                "title": "trying-to-explain-why-the-intuitive-solution-wont-work",
                "content": "### Problem\\nThe intuitive solution is randomly pick one rectangle from the `rects` and then create a random point within it. But this approach wont work. It took me a while to understand, I am trying to explain it:\\n\\n![image](https://assets.leetcode.com/users/dqi2/image_1561169986.png)\\n\\nAs shown in the picture above, you have two rectangles.  Lets declare `S1` to be the set of points within rectanle 1, and `S2` to be point set within rectable 2. So, mathematically we have:\\n```\\nS1 = {p11, p12, p13, ........................, p1n}\\nS2 = {p21, p22, p23, ......, p2m}\\nn > m\\n```\\nObviously, you can see that `rectangle 1` is larger than `rectangle 2` and therefore `S1` has bigger size `(n > m)`. \\nAccording to the problem, `\"randomly and uniformily picks an integer point in the space covered by the rectangles\"`. It is very difficult to understand,  lets translated it into another way of expression. \\n\\nIt is saying that, now I am providing you a new set `S = S1 + S2`, where `S = {p11, p12, ............, p1n, p21, p22, ........., p2m}` , **within this new set of points** that are merged together, randomly pick a point from it. What do you think of the probability of getting `p1i` and `p2j` right now ?  They are exactly the same, which is `1 / (n + m)`.\\n\\nNow, we can answer why the intuitive solution wont work. If you first randomy pick a rectangle, you have 50% to get either `S1` or `S2`,  how ever, once you select on rectangle, you have selected `S1` as your candidate point set, no matter how many time you try to pick you will never get the points in the second set `S2`. If size of S1 and S2 are the same, that would be ok, but if `S1` is bigger than `S2`, you will run into a problem. \\n\\nFor example, the chance of getting `S1` and `S2` are both `1 / 2`, so far so good. How ever, within `S1` and `S2`, the chance of getting point `p1i` and `p2j` are `1 / n` and `1 / m`. So the final chance of getting `p1i` and `p2j` are:\\n```\\nprobability_of_getting_p1i = 1 / (2 * n)\\nprobability_of_getting_p2j = 1 / (2 * m)\\n\\nWhere n is the size of S1, and m is size of S2\\n```\\nThe probability depends on the size of two rectangle.\\n\\n### Solution\\nSo how can we solve the problem that descibed in previous section ?  One way is to really merge all the point set of every rectangle and radnomly pick one from them, but this may  not be a good idea since it requires very hight space somplexity. What if we make the chance of getting reactangle`S1` higher than rectangle `S2` (from rects) base on the size of each of them.\\nfor example, for simplification, lets assume:\\n```\\nn = size_of_s1 = 70\\nm = size_of_s2 = 30\\n\\nn + m = 100\\n```\\n\\nif we can have the chance of getting `S1` to be `70 %` and chance of getting `S2` to be `30 %`, the chance of getting `p1i` from `S1` is `1 / 70`, and chance of getting `p2j` from `S2` is `1 / 30`, we have:\\n```\\nprobality_of_getting_p1i = (70 / 100) * (1 / 70) = 1 / 100\\n\\nprobability_of_getting_p2j = (30 / 100) * (1 / 30) = 1 / 100\\n```\\n\\nproblem sovled !\\n\\nSo, our mission **is to implement an algorithm that allows us to have higher chance to pick the larger rectangle**, and then generate a random point with it. Lets use code pseudo to make a rough design, still base on the previous example, imagine you have a map:\\n\\n```\\n\\nmap = \\n{\\n\\t30: S1,\\n\\t30 + 70: S2\\n}\\n\\nor \\n\\nmap = \\n{\\n  30: S1,\\n  100: S2\\n}\\n\\n\\nrandomNumer = random(0, 100)\\n\\nif  30 < randomNumber <= 100:\\n\\treturn S2\\nelse\\n\\treturn S1\\n\\n```\\n\\nIf we can design an algorithm like that, we will have 70% chance gitting S2, and 30% chance hitting S1. With number of intervals already known, we can simply use `if .. else` block or `switch` to implement this, but the problem did not specify how many rects, so the popular solution uses `TreeMap` .\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nS1 = {p11, p12, p13, ........................, p1n}\\nS2 = {p21, p22, p23, ......, p2m}\\nn > m\\n```\n```\\nprobability_of_getting_p1i = 1 / (2 * n)\\nprobability_of_getting_p2j = 1 / (2 * m)\\n\\nWhere n is the size of S1, and m is size of S2\\n```\n```\\nn = size_of_s1 = 70\\nm = size_of_s2 = 30\\n\\nn + m = 100\\n```\n```\\nprobality_of_getting_p1i = (70 / 100) * (1 / 70) = 1 / 100\\n\\nprobability_of_getting_p2j = (30 / 100) * (1 / 30) = 1 / 100\\n```\n```\\n\\nmap = \\n{\\n\\t30: S1,\\n\\t30 + 70: S2\\n}\\n\\nor \\n\\nmap = \\n{\\n  30: S1,\\n  100: S2\\n}\\n\\n\\nrandomNumer = random(0, 100)\\n\\nif  30 < randomNumber <= 100:\\n\\treturn S2\\nelse\\n\\treturn S1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 805232,
                "title": "python-short-solution-with-binary-search-explained",
                "content": "Basically, this problem is extention of problem **528. Random Pick with Weight**, let me explain why. Here we have several rectangles and we need to choose point from these rectangles. We can do in in two steps:\\n\\n1. Choose rectangle. Note, that the bigger number of points in these rectangle the more should be our changes. Imagine, we have two rectangles with 10 and 6 points. Then we need to choose first rectangle with probability `10/16` and second with probability `6/16`.\\n2. Choose point inside this rectangle. We need to choose coordinate `x` and coordinate `y` uniformly.\\n\\nWhen we `initailze` we count weights as `(x2-x1+1)*(y2-y1+1)` because we also need to use boundary. Then we evaluate cumulative sums and normalize.\\n\\nFor `pick` function, we use **binary search** to find the right place, using uniform distribution from `[0,1]` and then we use uniform discrete distribution to choose coordinates `x` and `y`. \\n\\n**Complexity**: Time and space complexity of `__init__` is `O(n)`, where `n` is number of rectangles. Time complexity of `pick` is `O(log n)`, because we use binary search. Space complexity of `pick` is `O(1)`.\\n\\n**Remark**: Note, that there is solution with `O(1)` time/space complexity for `pick`, using smart mathematical trick, see my solution of problem **528**: https://leetcode.com/problems/random-pick-with-weight/discuss/671439/Python-Smart-O(1)-solution-with-detailed-explanation\\n\\n\\n```\\nclass Solution:\\n    def __init__(self, rects):\\n        w = [(x2-x1+1)*(y2-y1+1) for x1,y1,x2,y2 in rects]\\n        self.weights = [i/sum(w) for i in accumulate(w)]\\n        self.rects = rects\\n\\n    def pick(self):\\n        n_rect = bisect.bisect(self.weights, random.random())\\n        x1, y1, x2, y2 = self.rects[n_rect] \\n        return [random.randint(x1, x2),random.randint(y1, y2)]\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def __init__(self, rects):\\n        w = [(x2-x1+1)*(y2-y1+1) for x1,y1,x2,y2 in rects]\\n        self.weights = [i/sum(w) for i in accumulate(w)]\\n        self.rects = rects\\n\\n    def pick(self):\\n        n_rect = bisect.bisect(self.weights, random.random())\\n        x1, y1, x2, y2 = self.rects[n_rect] \\n        return [random.randint(x1, x2),random.randint(y1, y2)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 154130,
                "title": "java-solution-randomly-pick-a-rectangle-then-pick-a-point-inside",
                "content": "```\\nclass Solution {\\n    TreeMap<Integer, Integer> map;\\n    int[][] arrays;\\n    int sum;\\n    Random rnd= new Random();\\n    \\n    public Solution(int[][] rects) {\\n        arrays = rects;\\n        map = new TreeMap<>();\\n        sum = 0;\\n        \\n        for(int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n\\t\\t\\t\\t\\t\\t\\n            // the right part means the number of points can be picked in this rectangle\\n            sum += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n\\t\\t\\t\\n            map.put(sum, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        // nextInt(sum) returns a num in [0, sum -1]. After added by 1, it becomes [1, sum]\\n        int c = map.ceilingKey( rnd.nextInt(sum) + 1);\\n        \\n        return pickInRect(arrays[map.get(c)]);\\n    }\\n    \\n    private int[] pickInRect(int[] rect) {\\n        int left = rect[0], right = rect[2], bot = rect[1], top = rect[3];\\n        \\n        return new int[]{left + rnd.nextInt(right - left + 1), bot + rnd.nextInt(top - bot + 1) };\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    TreeMap<Integer, Integer> map;\\n    int[][] arrays;\\n    int sum;\\n    Random rnd= new Random();\\n    \\n    public Solution(int[][] rects) {\\n        arrays = rects;\\n        map = new TreeMap<>();\\n        sum = 0;\\n        \\n        for(int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n\\t\\t\\t\\t\\t\\t\\n            // the right part means the number of points can be picked in this rectangle\\n            sum += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n\\t\\t\\t\\n            map.put(sum, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        // nextInt(sum) returns a num in [0, sum -1]. After added by 1, it becomes [1, sum]\\n        int c = map.ceilingKey( rnd.nextInt(sum) + 1);\\n        \\n        return pickInRect(arrays[map.get(c)]);\\n    }\\n    \\n    private int[] pickInRect(int[] rect) {\\n        int left = rect[0], right = rect[2], bot = rect[1], top = rect[3];\\n        \\n        return new int[]{left + rnd.nextInt(right - left + 1), bot + rnd.nextInt(top - bot + 1) };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 155452,
                "title": "java-treemap-solution-only-one-random-per-pick",
                "content": "```\\nclass Solution {\\n    private int[][] rects;\\n    private Random r;\\n    private TreeMap<Integer, Integer> map;\\n    private int area;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        r = new Random();\\n        map = new TreeMap<>();\\n        area = 0;\\n        for (int i = 0; i < rects.length; i++) {\\n            area += (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            map.put(area, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int randInt = r.nextInt(area);\\n        int key = map.higherKey(randInt);\\n        int[] rect = rects[map.get(key)];\\n        int x = rect[0] + (key - randInt - 1) % (rect[2] - rect[0] + 1);\\n        int y = rect[1] + (key - randInt - 1) / (rect[2] - rect[0] + 1);\\n        return new int[]{x, y};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    private int[][] rects;\\n    private Random r;\\n    private TreeMap<Integer, Integer> map;\\n    private int area;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        r = new Random();\\n        map = new TreeMap<>();\\n        area = 0;\\n        for (int i = 0; i < rects.length; i++) {\\n            area += (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            map.put(area, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int randInt = r.nextInt(area);\\n        int key = map.higherKey(randInt);\\n        int[] rect = rects[map.get(key)];\\n        int x = rect[0] + (key - randInt - 1) % (rect[2] - rect[0] + 1);\\n        int y = rect[1] + (key - randInt - 1) / (rect[2] - rect[0] + 1);\\n        return new int[]{x, y};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 154795,
                "title": "c-concise-solution-using-binary-search-pick-with-a-weight",
                "content": "First pick a random rectangle with a weight of their areas.\\nThen pick a random point inside the rectangle.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> v;\\n    vector<vector<int>> rects;\\n    \\n    int area(vector<int>& r) {\\n        return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n    }\\n    \\n    Solution(vector<vector<int>> _) {\\n        rects = _;\\n        for (auto& r : rects) {\\n            v.push_back(area(r) + (v.empty() ? 0 : v.back()));\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        // https://leetcode.com/problems/random-pick-with-weight/description/\\n        int rnd = rand() % v.back();\\n        auto it = upper_bound(v.begin(), v.end(), rnd);\\n        int idx = it - v.begin();\\n        \\n        // pick a random point in rect[idx]\\n        auto r = rects[idx];\\n        return {\\n            rand() % (r[2] - r[0] + 1) + r[0],\\n            rand() % (r[3] - r[1] + 1) + r[1]\\n        };\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> v;\\n    vector<vector<int>> rects;\\n    \\n    int area(vector<int>& r) {\\n        return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n    }\\n    \\n    Solution(vector<vector<int>> _) {\\n        rects = _;\\n        for (auto& r : rects) {\\n            v.push_back(area(r) + (v.empty() ? 0 : v.back()));\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        // https://leetcode.com/problems/random-pick-with-weight/description/\\n        int rnd = rand() % v.back();\\n        auto it = upper_bound(v.begin(), v.end(), rnd);\\n        int idx = it - v.begin();\\n        \\n        // pick a random point in rect[idx]\\n        auto r = rects[idx];\\n        return {\\n            rand() % (r[2] - r[0] + 1) + r[0],\\n            rand() % (r[3] - r[1] + 1) + r[1]\\n        };\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 154147,
                "title": "python-weighted-probability-solution",
                "content": "```\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        self.rects, self.ranges, sm = rects, [], 0\\n        for x1, y1, x2, y2 in rects:\\n            sm += (x2 - x1 + 1) * (y2 - y1 + 1)\\n            self.ranges.append(sm)\\n\\n    def pick(self):\\n        x1, y1, x2, y2 = self.rects[bisect.bisect_left(self.ranges, random.randint(1, self.ranges[-1]))]\\n        return [random.randint(x1, x2), random.randint(y1, y2)]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        self.rects, self.ranges, sm = rects, [], 0\\n        for x1, y1, x2, y2 in rects:\\n            sm += (x2 - x1 + 1) * (y2 - y1 + 1)\\n            self.ranges.append(sm)\\n\\n    def pick(self):\\n        x1, y1, x2, y2 = self.rects[bisect.bisect_left(self.ranges, random.randint(1, self.ranges[-1]))]\\n        return [random.randint(x1, x2), random.randint(y1, y2)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 170503,
                "title": "c-solution-using-reservoir-sampling-with-explanation-concise-and-easy-to-understand",
                "content": "I found no other guys solved this problem using reservoir sampling method. Take a look at my solution.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> rects;\\n    \\n    Solution(vector<vector<int>> rects) : rects(rects) {\\n    }\\n    \\n    vector<int> pick() {\\n        int sum_area = 0;\\n        vector<int> selected;\\n        \\n        /* Step 1 - select a random rectangle considering the area of it. */\\n        for (auto r : rects) {\\n            /*\\n             * What we need to be aware of here is that the input may contain\\n             * lines that are not rectangles. For example, [1, 2, 1, 5], [3, 2, 3, -2].\\n             * \\n             * So, we work around it by adding +1 here. It does not affect\\n             * the final result of reservoir sampling.\\n             */\\n            int area = (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n            sum_area += area;\\n            \\n            if (rand() % sum_area < area)\\n                selected = r;\\n        }\\n        \\n        /* Step 2 - select a random (x, y) coordinate within the selected rectangle. */\\n        int x = rand() % (selected[2] - selected[0] + 1) + selected[0];\\n        int y = rand() % (selected[3] - selected[1] + 1) + selected[1];\\n        \\n        return { x, y };\\n    }\\n};\\n```\\n\\nThis problem is VERY BAD in the sense that the input actually contains something that is not a rectangle at all. It is different from what the title claims.\\n\\nIn the code above, reservoir sampling technique was used when we select a random rectangle in proportional to their area. Following resources will help you understand it:\\n* https://en.wikipedia.org/wiki/Reservoir_sampling\\n* https://www.youtube.com/watch?v=A1iwzSew5QY\\n\\n**However, using reservoir sampling may not be an optimal solution.** It is because of that picking a random rectangle by using reservoir sampling consumes high costs of O(n) time complexity each time, where n is the number of rectangles. So, overall time complexity goes up to O(nm), where m is the number of calls to pick(). On the other hand, its space complexity is O(1), because additional spaces are not required.\\n\\nAs other guys did, if we use binary search on the prefix sum of the weights, time complexity reduces to O(m log n), where m is the number of calls to pick() and n is the number of rectangles. However, its space complexity is O(n), requiring additional spaces for prefix sum of weight.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> rects;\\n    \\n    Solution(vector<vector<int>> rects) : rects(rects) {\\n    }\\n    \\n    vector<int> pick() {\\n        int sum_area = 0;\\n        vector<int> selected;\\n        \\n        /* Step 1 - select a random rectangle considering the area of it. */\\n        for (auto r : rects) {\\n            /*\\n             * What we need to be aware of here is that the input may contain\\n             * lines that are not rectangles. For example, [1, 2, 1, 5], [3, 2, 3, -2].\\n             * \\n             * So, we work around it by adding +1 here. It does not affect\\n             * the final result of reservoir sampling.\\n             */\\n            int area = (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n            sum_area += area;\\n            \\n            if (rand() % sum_area < area)\\n                selected = r;\\n        }\\n        \\n        /* Step 2 - select a random (x, y) coordinate within the selected rectangle. */\\n        int x = rand() % (selected[2] - selected[0] + 1) + selected[0];\\n        int y = rand() % (selected[3] - selected[1] + 1) + selected[1];\\n        \\n        return { x, y };\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805195,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> v;\\n    vector<vector<int>> rects;\\n    // I add the +1 here because in some inputs they contain lines also like \\n\\t// [ 1,2,1,3 ] ( rectangle with height 0 or width 0 but this also contains 2 points )\\n\\t// to also add these points I add +1.\\n    int area(vector<int>& r) {\\n        return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n    }\\n    \\n    Solution(vector<vector<int>> rect) {\\n        rects = rect;\\n        int totalArea=0;\\n        for (auto r: rects) {\\n            totalArea+=area(r);\\n            v.push_back(totalArea);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        // pick a random reactangle in rects\\n        int rnd = rand() % v.back();\\n        int idx = upper_bound(v.begin(), v.end(), rnd) - v.begin();\\n        \\n        // pick a random point in rects[idx]\\n        auto r = rects[idx];\\n        int x = rand() % (r[2] - r[0] + 1) + r[0];\\n        int y = rand() % (r[3] - r[1] + 1) + r[1];\\n        return { x, y };\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> v;\\n    vector<vector<int>> rects;\\n    // I add the +1 here because in some inputs they contain lines also like \\n\\t// [ 1,2,1,3 ] ( rectangle with height 0 or width 0 but this also contains 2 points )\\n\\t// to also add these points I add +1.\\n    int area(vector<int>& r) {\\n        return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n    }\\n    \\n    Solution(vector<vector<int>> rect) {\\n        rects = rect;\\n        int totalArea=0;\\n        for (auto r: rects) {\\n            totalArea+=area(r);\\n            v.push_back(totalArea);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        // pick a random reactangle in rects\\n        int rnd = rand() % v.back();\\n        int idx = upper_bound(v.begin(), v.end(), rnd) - v.begin();\\n        \\n        // pick a random point in rects[idx]\\n        auto r = rects[idx];\\n        int x = rand() % (r[2] - r[0] + 1) + r[0];\\n        int y = rand() % (r[3] - r[1] + 1) + r[1];\\n        return { x, y };\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805547,
                "title": "java-accepted-clean-and-concise-commented",
                "content": "* **Please upvote if helpful**\\n\\n```\\nclass Solution {\\n    \\n    Random random;\\n    TreeMap<Integer,int[]> map;\\n    int areaSum = 0;\\n    \\n    public Solution(int[][] rects) {\\n        this.random = new Random();\\n        this.map = new TreeMap<>();\\n        \\n        for(int i = 0; i < rects.length; i++){\\n            int [] rectangeCoordinates = rects[i];\\n            int length = rectangeCoordinates[2] - rectangeCoordinates[0] + 1 ; // +1 as we need to consider edges also.\\n            int breadth = rectangeCoordinates[3] - rectangeCoordinates[1] + 1 ;\\n            \\n            areaSum += length * breadth;\\n            \\n            map.put(areaSum,rectangeCoordinates);\\n            \\n        }\\n        \\n    }\\n    \\n    public int[] pick() {\\n        int key = map.ceilingKey(random.nextInt(areaSum) + 1); //Don\\'t forget to +1 here, because we need [1,area] while nextInt generates [0,area-1]\\n        \\n        int [] rectangle = map.get(key);\\n        \\n        int length = rectangle[2] - rectangle[0] + 1 ; // +1 as we need to consider edges also.\\n        int breadth = rectangle[3] - rectangle[1] + 1 ;\\n        \\n        int x = rectangle[0] + random.nextInt(length); //return random length from starting position of x\\n        int y = rectangle[1] + random.nextInt(breadth); // return random breadth from starting position of y\\n        \\n        return new int[]{x,y};\\n        \\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    Random random;\\n    TreeMap<Integer,int[]> map;\\n    int areaSum = 0;\\n    \\n    public Solution(int[][] rects) {\\n        this.random = new Random();\\n        this.map = new TreeMap<>();\\n        \\n        for(int i = 0; i < rects.length; i++){\\n            int [] rectangeCoordinates = rects[i];\\n            int length = rectangeCoordinates[2] - rectangeCoordinates[0] + 1 ; // +1 as we need to consider edges also.\\n            int breadth = rectangeCoordinates[3] - rectangeCoordinates[1] + 1 ;\\n            \\n            areaSum += length * breadth;\\n            \\n            map.put(areaSum,rectangeCoordinates);\\n            \\n        }\\n        \\n    }\\n    \\n    public int[] pick() {\\n        int key = map.ceilingKey(random.nextInt(areaSum) + 1); //Don\\'t forget to +1 here, because we need [1,area] while nextInt generates [0,area-1]\\n        \\n        int [] rectangle = map.get(key);\\n        \\n        int length = rectangle[2] - rectangle[0] + 1 ; // +1 as we need to consider edges also.\\n        int breadth = rectangle[3] - rectangle[1] + 1 ;\\n        \\n        int x = rectangle[0] + random.nextInt(length); //return random length from starting position of x\\n        int y = rectangle[1] + random.nextInt(breadth); // return random breadth from starting position of y\\n        \\n        return new int[]{x,y};\\n        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805166,
                "title": "python-probability-monte-carlo",
                "content": "This is a straightforward idea from probability theory. Say you have two rectangles, the first one contains 7 points inside and the second one contains 3. A randomly drawn point has a probability of coming from the first rectangle equal to 0.7. So you calculate the number of points in each rectangle, and then use the inverse CDF* rule to simulate a random draw of rectangles based on the number of points they contain. (So you select the first rectangle with probability 0.7 in the example above.) Once you pick the rectangle, choose any point uniformly at random.\\n\\nCDF rule is at the core of simulations, Monte Carlo methods, and many machine learning algorithms.\\n\\nTime: `O(K)` where `K` is the number of rectangles. This is where we calculate the weights in the constructor.\\nSpace: `O(K)` as we store the rectangle coordinates.\\n\\n*CDF: Cumulative distribution function\\n\\n```\\nimport random\\nimport bisect\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        #\\n        weig, c = [], 0\\n        for rect in rects:\\n            x1, y1, x2, y2 = rect\\n            c += (x2-x1+1)*(y2-y1+1)\\n            weig.append(c)\\n        self.weigc = [e/c for e in weig]\\n        \\n        \\n    def pick(self) -> List[int]:\\n        u = random.random()\\n        ix = bisect.bisect_left(self.weigc, u)\\n        x1, y1, x2, y2 = self.rects[ix]\\n        x = random.randint(x1,x2)\\n        y = random.randint(y1,y2)\\n        return [x,y]\\n```",
                "solutionTags": [],
                "code": "```\\nimport random\\nimport bisect\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        #\\n        weig, c = [], 0\\n        for rect in rects:\\n            x1, y1, x2, y2 = rect\\n            c += (x2-x1+1)*(y2-y1+1)\\n            weig.append(c)\\n        self.weigc = [e/c for e in weig]\\n        \\n        \\n    def pick(self) -> List[int]:\\n        u = random.random()\\n        ix = bisect.bisect_left(self.weigc, u)\\n        x1, y1, x2, y2 = self.rects[ix]\\n        x = random.randint(x1,x2)\\n        y = random.randint(y1,y2)\\n        return [x,y]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805466,
                "title": "c-easy-solution-with-explanation",
                "content": "If you are unable to solve this question, I would highly suggest you try this one first:\\nhttps://leetcode.com/problems/random-pick-with-weight/\\n\\nIf you had solved the above question, you would understand that here the probablity of picking up a random rectangle is proportional to the number if points enclosed in the rectangle (Area). In short the number of points enclosed by the rectangle is its weight (area). \\n\\nNow let\\'s break this problem into 2 subproblems:\\n1. Pick a random rectangle based on weight (area).\\n2. Pick a random point in the rectangle obtained in the first step.\\n\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> np;\\n    vector<vector<int>> Rects;\\n    Solution(vector<vector<int>>& rects) {\\n        Rects = rects;\\n        for(auto rect : rects){\\n            int l1 = rect[2] - rect[0] + 1;\\n            int l2 = rect[3] - rect[1] + 1;\\n            int val = np.size() ? np.back() + (l1*l2) : l1*l2; \\n            np.push_back(val);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int m = np.back();\\n        int r = rand() % m;\\n        auto it = upper_bound(np.begin(), np.end(), r);\\n        int rect = it - np.begin();  //end of step 1\\n\\t\\t//step 2 begins\\n        vector<int> R = Rects[rect];\\n        int x = rand() % (R[2]-R[0]+1) + R[0];\\n        int y = rand() % (R[3]-R[1]+1) + R[1];\\n        return {x, y};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> np;\\n    vector<vector<int>> Rects;\\n    Solution(vector<vector<int>>& rects) {\\n        Rects = rects;\\n        for(auto rect : rects){\\n            int l1 = rect[2] - rect[0] + 1;\\n            int l2 = rect[3] - rect[1] + 1;\\n            int val = np.size() ? np.back() + (l1*l2) : l1*l2; \\n            np.push_back(val);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int m = np.back();\\n        int r = rand() % m;\\n        auto it = upper_bound(np.begin(), np.end(), r);\\n        int rect = it - np.begin();  //end of step 1\\n\\t\\t//step 2 begins\\n        vector<int> R = Rects[rect];\\n        int x = rand() % (R[2]-R[0]+1) + R[0];\\n        int y = rand() % (R[3]-R[1]+1) + R[1];\\n        return {x, y};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 228372,
                "title": "c-easy-and-slow-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> rect;\\n    vector<int> r_area;\\n    int total_area;\\n    Solution(vector<vector<int>> rects) {\\n        rect = rects;\\n        int total = 0;\\n        for (int i = 0; i < rects.size(); i++) {\\n            total += (rects[i][2] - rects[i][0]+1)*(rects[i][3] - rects[i][1]+1);\\n            r_area.push_back(total);\\n        }\\n        total_area = total;\\n    }\\n    \\n    vector<int> pick() {\\n        int random_area = rand()%total_area+1;\\n        int i = 0;\\n        for (; i < r_area.size(); i++) {\\n            if (random_area <= r_area[i]) break;\\n        }\\n        int dis_x = rand()%(rect[i][2] - rect[i][0]+1);\\n        int dis_y = rand()%(rect[i][3] - rect[i][1]+1);\\n        return {rect[i][0] + dis_x, rect[i][1] + dis_y};\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * vector<int> param_1 = obj.pick();\\n */",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<vector<int>> rect;\\n    vector<int> r_area;\\n    int total_area;\\n    Solution(vector<vector<int>> rects) {\\n        rect = rects;\\n        int total = 0;\\n        for (int i = 0; i < rects.size(); i++) {\\n            total += (rects[i][2] - rects[i][0]+1)*(rects[i][3] - rects[i][1]+1);\\n            r_area.push_back(total);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 805432,
                "title": "random-point-testcase-32-35-fault",
                "content": "I cannot understand why the testcase 32 fails.\\nAll points inside rectangles. Whats wrong ?\\n\\n```\\nclass Solution {\\n    int[][] rects;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n    }\\n\\n    public int[] pick() {\\n        int [] res = new int[2];\\n        Random random = new Random();\\n\\n        int maxWidth  = 0;\\n        for (int i = 0 ; i < rects.length; i++) {\\n            maxWidth = maxWidth + Math.abs(rects[i][2] - rects[i][0]);\\n        }\\n\\n        int x = random.nextInt(maxWidth);\\n\\n        int rectWidth = 0;\\n        int rectNum = 0;\\n        for (int i = 0 ; i < rects.length; i++) {\\n            rectWidth = Math.abs(rects[i][2] - rects[i][0]);\\n            x = x - rectWidth;\\n            if (x <= 0) {\\n                res[0] = rects[i][2] - Math.abs(x);\\n                rectNum = i;\\n                break;\\n            }\\n        }\\n\\n        int y = 0;\\n        int rectHeight = Math.abs(rects[rectNum][3] - rects[rectNum][1]);\\n        if ( rectHeight > 0 ) y = random.nextInt(Math.abs(rects[rectNum][3] - rects[rectNum][1]));\\n\\n        res[1] = rects[rectNum][1] + y;\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    int[][] rects;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n    }\\n\\n    public int[] pick() {\\n        int [] res = new int[2];\\n        Random random = new Random();\\n\\n        int maxWidth  = 0;\\n        for (int i = 0 ; i < rects.length; i++) {\\n            maxWidth = maxWidth + Math.abs(rects[i][2] - rects[i][0]);\\n        }\\n\\n        int x = random.nextInt(maxWidth);\\n\\n        int rectWidth = 0;\\n        int rectNum = 0;\\n        for (int i = 0 ; i < rects.length; i++) {\\n            rectWidth = Math.abs(rects[i][2] - rects[i][0]);\\n            x = x - rectWidth;\\n            if (x <= 0) {\\n                res[0] = rects[i][2] - Math.abs(x);\\n                rectNum = i;\\n                break;\\n            }\\n        }\\n\\n        int y = 0;\\n        int rectHeight = Math.abs(rects[rectNum][3] - rects[rectNum][1]);\\n        if ( rectHeight > 0 ) y = random.nextInt(Math.abs(rects[rectNum][3] - rects[rectNum][1]));\\n\\n        res[1] = rects[rectNum][1] + y;\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 154063,
                "title": "java-10-lines-treemap-sorted-with-area",
                "content": "I borrow the idea from [880. Random Pick with Weight\\n](https://leetcode.com/problems/random-pick-with-weight/discuss/154024/JAVA-8-lines-TreeMap)But this time we use area as key.\\n```\\nclass Solution {\\n    TreeMap<Integer, int[]> map= new TreeMap<>();\\n    Random rnd= new Random();\\n    int area= 0;\\n    public Solution(int[][] rects) {\\n        for (int[] r: rects){\\n            int x1=r[0], y1=r[1], x2=r[2], y2=r[3];\\n            area+=(x2-x1+1)*(y2-y1+1); \\\\\\\\Don\\'t forget to +1 here, because e.g 1~5 has 5 valid numbers\\n            map.put(area, r);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int key= map.ceilingKey(rnd.nextInt(area)+1); \\\\\\\\Don\\'t forget to +1 here, because we need [1,area] while nextInt generates [0,area-1]\\n        int[] curRec= map.get(key);\\n        int x1=curRec[0], y1=curRec[1], x2=curRec[2], y2=curRec[3], length=x2-x1, width=y2-y1;\\n        int x=x1+rnd.nextInt(length+1), y=y1+rnd.nextInt(width+1);\\n        return new int[]{x, y};\\n    }\\n}\\n```\\nHappy Coding!",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    TreeMap<Integer, int[]> map= new TreeMap<>();\\n    Random rnd= new Random();\\n    int area= 0;\\n    public Solution(int[][] rects) {\\n        for (int[] r: rects){\\n            int x1=r[0], y1=r[1], x2=r[2], y2=r[3];\\n            area+=(x2-x1+1)*(y2-y1+1); \\\\\\\\Don\\'t forget to +1 here, because e.g 1~5 has 5 valid numbers\\n            map.put(area, r);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int key= map.ceilingKey(rnd.nextInt(area)+1); \\\\\\\\Don\\'t forget to +1 here, because we need [1,area] while nextInt generates [0,area-1]\\n        int[] curRec= map.get(key);\\n        int x1=curRec[0], y1=curRec[1], x2=curRec[2], y2=curRec[3], length=x2-x1, width=y2-y1;\\n        int x=x1+rnd.nextInt(length+1), y=y1+rnd.nextInt(width+1);\\n        return new int[]{x, y};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2866872,
                "title": "c-solutions",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> rects;\\n    \\n    Solution(vector<vector<int>> rects) : rects(rects) {\\n    }\\n    \\n    vector<int> pick() {\\n        int sum_area = 0;\\n        vector<int> selected;\\n        \\n        /* Step 1 - select a random rectangle considering the area of it. */\\n        for (auto r : rects) {\\n            /*\\n             * What we need to be aware of here is that the input may contain\\n             * lines that are not rectangles. For example, [1, 2, 1, 5], [3, 2, 3, -2].\\n             * \\n             * So, we work around it by adding +1 here. It does not affect\\n             * the final result of reservoir sampling.\\n             */\\n            int area = (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n            sum_area += area;\\n            \\n            if (rand() % sum_area < area)\\n                selected = r;\\n        }\\n        \\n        /* Step 2 - select a random (x, y) coordinate within the selected rectangle. */\\n        int x = rand() % (selected[2] - selected[0] + 1) + selected[0];\\n        int y = rand() % (selected[3] - selected[1] + 1) + selected[1];\\n        \\n        return { x, y };\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> rects;\\n    \\n    Solution(vector<vector<int>> rects) : rects(rects) {\\n    }\\n    \\n    vector<int> pick() {\\n        int sum_area = 0;\\n        vector<int> selected;\\n        \\n        /* Step 1 - select a random rectangle considering the area of it. */\\n        for (auto r : rects) {\\n            /*\\n             * What we need to be aware of here is that the input may contain\\n             * lines that are not rectangles. For example, [1, 2, 1, 5], [3, 2, 3, -2].\\n             * \\n             * So, we work around it by adding +1 here. It does not affect\\n             * the final result of reservoir sampling.\\n             */\\n            int area = (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n            sum_area += area;\\n            \\n            if (rand() % sum_area < area)\\n                selected = r;\\n        }\\n        \\n        /* Step 2 - select a random (x, y) coordinate within the selected rectangle. */\\n        int x = rand() % (selected[2] - selected[0] + 1) + selected[0];\\n        int y = rand() % (selected[3] - selected[1] + 1) + selected[1];\\n        \\n        return { x, y };\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805335,
                "title": "python-readable-commented-solution-without-using-bisect",
                "content": "The idea is simple;\\n\\n1. Choose a rect, then choose a point inside it.\\n2. The bigger the rectangle, the higher the probability of it getting chosen\\n\\n```\\nimport random\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n\\n        \\n        # I am more of a list comprehensions guy, but if you prefer to\\n        # put more effort with the keyboard, here\\'s an unrolled version.\\n        \\n        # self.weights = []\\n        # for rect in rects:\\n        #     x1, y1, x2, y2 = rect\\n        #     area = (x2-x1+1)*(y2-y1+1)\\n        #     self.weights.append(area)\\n        \\n        self.weights = [(x2-x1+1)*(y2-y1+1) for x1, y1, x2, y2 in rects]\\n        \\n            \\n        # library functions are always faster\\n        # it beats the runtime of using an extra variable \\n        # to calculate sum_of_weights in the loop above\\n        # even if that means, we have to iterate once more.\\n        # Such is the world of python :D\\n        sum_of_weights = sum(self.weights)\\n        \\n        self.weights = [x/sum_of_weights for x in self.weights]\\n            \\n\\n    def pick(self) -> List[int]:\\n        rect = random.choices(\\n            population=self.rects,\\n            weights=self.weights,\\n            k=1\\n        )[0]  # random.choices returns a list, we extract the first (and only) element.\\n\\n        x1, y1, x2, y2 = rect  # tuple unpacking\\n        \\n        rnd_x = random.randint(x1, x2)\\n        rnd_y = random.randint(y1, y2)\\n        return [rnd_x, rnd_y]\\n        \\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport random\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n\\n        \\n        # I am more of a list comprehensions guy, but if you prefer to\\n        # put more effort with the keyboard, here\\'s an unrolled version.\\n        \\n        # self.weights = []\\n        # for rect in rects:\\n        #     x1, y1, x2, y2 = rect\\n        #     area = (x2-x1+1)*(y2-y1+1)\\n        #     self.weights.append(area)\\n        \\n        self.weights = [(x2-x1+1)*(y2-y1+1) for x1, y1, x2, y2 in rects]\\n        \\n            \\n        # library functions are always faster\\n        # it beats the runtime of using an extra variable \\n        # to calculate sum_of_weights in the loop above\\n        # even if that means, we have to iterate once more.\\n        # Such is the world of python :D\\n        sum_of_weights = sum(self.weights)\\n        \\n        self.weights = [x/sum_of_weights for x in self.weights]\\n            \\n\\n    def pick(self) -> List[int]:\\n        rect = random.choices(\\n            population=self.rects,\\n            weights=self.weights,\\n            k=1\\n        )[0]  # random.choices returns a list, we extract the first (and only) element.\\n\\n        x1, y1, x2, y2 = rect  # tuple unpacking\\n        \\n        rnd_x = random.randint(x1, x2)\\n        rnd_y = random.randint(y1, y2)\\n        return [rnd_x, rnd_y]\\n        \\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805311,
                "title": "python-o-n-by-pool-sampling-w-visualization",
                "content": "**Hint**:\\n\\nThink of **pool sampling**.\\n\\nTotal **n** pools, and total **P** points\\n\\n![image](https://assets.leetcode.com/users/images/09745dec-53dc-400f-8b83-b710ec195706_1598089506.3815591.png)\\n\\nEach **rectangle** acts as **pool_i** with points **p_i**  by itself,\\nwhere p_i = ( x_i_2 - x_i_1 + 1) * ( y_i_2 - y_i_1 + 1 )\\n\\n![image](https://assets.leetcode.com/users/images/dffe86ac-b80f-4271-a317-861aaf148f15_1598089224.7017436.png)\\n\\n\\nSo, p_1 + p_2 + ... + p_n = P, and\\neach pool_i has a **weight** of **p_i / P** during **pool sampling**.\\n\\nThen, generate a random number **r** from 1 to P\\n\\nCompute the **pool index** (i.e., **rectangle index**) from r by bisection\\n\\nThen compute the **corresponding x, y coordinate** in that pool from r by modulo and division.\\n\\n---\\n\\n```\\nfrom random import randint\\nfrom bisect import bisect_left\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        \\n        self.rectangles = rects\\n        \\n        # record prefix sum of points number (i.e., acts like the CDF)\\n        self.prefix_points_sum = []\\n        \\n        for x1, y1, x2, y2 in rects:\\n            \\n            # compute current number of points\\n            cur_points = ( x2 - x1 + 1 ) * ( y2 - y1 + 1)\\n            \\n            # update to prefix table\\n            if self.prefix_points_sum:\\n                self.prefix_points_sum.append( self.prefix_points_sum[-1] + cur_points )\\n                \\n            else:\\n                self.prefix_points_sum.append( cur_points )\\n        \\n            \\n\\n    def pick(self) -> List[int]:\\n        \\n        total_num_of_points = self.prefix_points_sum[-1]\\n        \\n        # get a random point serial, sampling from 1 ~ total number of points\\n        random_point_serial = randint(1, total_num_of_points)\\n        \\n        # get the rectangle index by looking up prefix table with bisection\\n        idx_of_rectangle = bisect_left(self.prefix_points_sum, random_point_serial)\\n        \\n        # get the point range of that rectangle by index\\n        x1, y1, x2, y2 = self.rectangles[idx_of_rectangle]\\n        \\n        # compute the offset value between prefix sum and random point serial\\n        offset = self.prefix_points_sum[idx_of_rectangle] - random_point_serial\\n        \\n        # compute corresponding x, y points coordination in that rectangle\\n        x = offset % ( x2 - x1 + 1) + x1\\n        y = offset // ( x2 - x1 + 1) + y1\\n        \\n        return [x, y]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nfrom random import randint\\nfrom bisect import bisect_left\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        \\n        self.rectangles = rects\\n        \\n        # record prefix sum of points number (i.e., acts like the CDF)\\n        self.prefix_points_sum = []\\n        \\n        for x1, y1, x2, y2 in rects:\\n            \\n            # compute current number of points\\n            cur_points = ( x2 - x1 + 1 ) * ( y2 - y1 + 1)\\n            \\n            # update to prefix table\\n            if self.prefix_points_sum:\\n                self.prefix_points_sum.append( self.prefix_points_sum[-1] + cur_points )\\n                \\n            else:\\n                self.prefix_points_sum.append( cur_points )\\n        \\n            \\n\\n    def pick(self) -> List[int]:\\n        \\n        total_num_of_points = self.prefix_points_sum[-1]\\n        \\n        # get a random point serial, sampling from 1 ~ total number of points\\n        random_point_serial = randint(1, total_num_of_points)\\n        \\n        # get the rectangle index by looking up prefix table with bisection\\n        idx_of_rectangle = bisect_left(self.prefix_points_sum, random_point_serial)\\n        \\n        # get the point range of that rectangle by index\\n        x1, y1, x2, y2 = self.rectangles[idx_of_rectangle]\\n        \\n        # compute the offset value between prefix sum and random point serial\\n        offset = self.prefix_points_sum[idx_of_rectangle] - random_point_serial\\n        \\n        # compute corresponding x, y points coordination in that rectangle\\n        x = offset % ( x2 - x1 + 1) + x1\\n        y = offset // ( x2 - x1 + 1) + y1\\n        \\n        return [x, y]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 164527,
                "title": "is-1-0-3-0-a-valid-rectangle",
                "content": "From Description:\\n\\nExample 2:\\n```\\nInput: \\n[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\\nOutput: \\n[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]\\n```\\n\\nIs [1,0,3,0] a valid rectangle?",
                "solutionTags": [],
                "code": "```\\nInput: \\n[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\\nOutput: \\n[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 343155,
                "title": "no-treemap-use-reservoir-sampling-java-solution-one-pass",
                "content": "```\\nclass Solution {\\n    Random random;\\n    int[][] rects;\\n    public Solution(int[][] rects) {\\n        random = new Random();\\n        this.rects = rects;\\n    }\\n    \\n    public int[] pick() {\\n        int sum = 0;\\n        // the idx of rect that will be selected\\n        int idx = 0;\\n        for (int i = 0; i < rects.length; i++) {\\n            int[] r = rects[i];\\n            int w = r[2] - r[0] + 1;\\n            int l = r[3] - r[1] + 1;\\n            // count of points\\n            int count = w * l;\\n            sum += count;\\n            if (random.nextInt(sum) < count) idx = i;\\n        }\\n        \\n        int x = rects[idx][0] + random.nextInt(rects[idx][2] - rects[idx][0] + 1);\\n        int y = rects[idx][1] + random.nextInt(rects[idx][3] - rects[idx][1] + 1);\\n        \\n        return new int[] {x, y};\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    Random random;\\n    int[][] rects;\\n    public Solution(int[][] rects) {\\n        random = new Random();\\n        this.rects = rects;\\n    }\\n    \\n    public int[] pick() {\\n        int sum = 0;\\n        // the idx of rect that will be selected\\n        int idx = 0;\\n        for (int i = 0; i < rects.length; i++) {\\n            int[] r = rects[i];\\n            int w = r[2] - r[0] + 1;\\n            int l = r[3] - r[1] + 1;\\n            // count of points\\n            int count = w * l;\\n            sum += count;\\n            if (random.nextInt(sum) < count) idx = i;\\n        }\\n        \\n        int x = rects[idx][0] + random.nextInt(rects[idx][2] - rects[idx][0] + 1);\\n        int y = rects[idx][1] + random.nextInt(rects[idx][3] - rects[idx][1] + 1);\\n        \\n        return new int[] {x, y};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 155456,
                "title": "java-solution-with-just-call-one-random-for-each-pick-666",
                "content": "So for the first Random, we can get a Point which is already random and uniform, then We just need to represent it based on its Index in the corresponding Rect. \\n```\\n    int[][] rects;\\n    TreeMap<Integer, Integer> map;\\n    Random random;\\n    int sum = 0;\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        map = new TreeMap<>();\\n        random = new Random();\\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            sum += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            map.put(sum, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int randInt = random.nextInt(sum) + 1;\\n        int key = map.ceilingKey(randInt);\\n        int index = key - randInt;        if randInt is 5 and the key is 6, so the index = 1 means its second point in that Rect. \\n        int[] rect = rects[map.get(key)];\\n        int left = rect[0], bottom = rect[1], right = rect[2], top = rect[3];\\n        int x = left + index  % (right - left + 1);\\n        int y = bottom + index / (right - left + 1);\\n        return new int[]{x, y};\\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\n    int[][] rects;\\n    TreeMap<Integer, Integer> map;\\n    Random random;\\n    int sum = 0;\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        map = new TreeMap<>();\\n        random = new Random();\\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            sum += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            map.put(sum, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int randInt = random.nextInt(sum) + 1;\\n        int key = map.ceilingKey(randInt);\\n        int index = key - randInt;        if randInt is 5 and the key is 6, so the index = 1 means its second point in that Rect. \\n        int[] rect = rects[map.get(key)];\\n        int left = rect[0], bottom = rect[1], right = rect[2], top = rect[3];\\n        int x = left + index  % (right - left + 1);\\n        int y = bottom + index / (right - left + 1);\\n        return new int[]{x, y};\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 2071821,
                "title": "javascript-area-is-not-an-appropriate-weight",
                "content": "Here\\'s an intuitive thought:\\n\\n> If `rect A` is bigger than `rect B`, it should have a larger weight to get selected.\\n> While its `# of points` are also more, **each point** within it has a smaller chance for picked then.\\n\\nSounds fair, but that\\'s not completely right.\\n.\\n\\nTaking `rect A`=2x1, `rect B`=1x1 for example:\\n\\nThough A\\'s area is twice as B, there are **6 points in A** while **4 in B**.\\nSo the correct ratio should be `(2+1)*(1+1):(1+1)*(1+1)=6:4`\\nWhich can then distribute to all points uniformly.\\n.\\n.\\n**Conclusion**\\n\\nWe should take **\\\\# OF POINTS** within a rectangle (instead of area) as weight.\\n```\\nFor size=m*n, there are (m+1)*(n+1) points\\nwhich stands for possible choices in X&Y direction.\\n```\\n\\nThanks for your reading and **up-voting** :)\\n\\n**\\u2B50 Check [HERE](https://github.com/Lynn19950915/LeetCode_King) for my full Leetcode Notes ~**\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nFor size=m*n, there are (m+1)*(n+1) points\\nwhich stands for possible choices in X&Y direction.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 814509,
                "title": "find-right-interval-python-100",
                "content": "```\\nclass Solution:\\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\\n        dic={}\\n        for i in range(len(intervals)):\\n            dic[intervals[i][0]]=i\\n            \\n        m=max(dic.keys())\\n            \\n        output=[-1 for _ in range(len(intervals))]\\n        \\n        for i in range(len(intervals)):\\n            for j in range(intervals[i][1],m+1):\\n                if dic.get(j,-1)!=-1:\\n                    output[i]=dic[j]\\n                    break\\n        return output\\n            \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\\n        dic={}\\n        for i in range(len(intervals)):\\n            dic[intervals[i][0]]=i\\n            \\n        m=max(dic.keys())\\n            \\n        output=[-1 for _ in range(len(intervals))]\\n        \\n        for i in range(len(intervals)):\\n            for j in range(intervals[i][1],m+1):\\n                if dic.get(j,-1)!=-1:\\n                    output[i]=dic[j]\\n                    break\\n        return output\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 809032,
                "title": "sum-of-left-leaves-c-dfs-and-bfs-solutions",
                "content": "DFS\\n```\\nclass Solution {\\npublic:\\n\\tint sumOfLeftLeaves(TreeNode* root) {\\n\\t\\tif (!root) return 0;\\n\\t\\tif (root->left)\\n\\t\\t\\tif (!root->left->left && !root->left->right) // Check if the left node is a leaf\\n\\t\\t\\t\\treturn root->left->val + sumOfLeftLeaves(root->right);\\n\\n\\t\\treturn sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right);\\n\\t}\\n};\\n```\\n\\nBFS\\n```\\nclass Solution {\\npublic:\\n\\tint sumOfLeftLeaves(TreeNode* root) {\\n\\t\\tif (!root)\\n\\t\\t\\treturn 0;\\n\\t\\t\\n\\t\\tqueue<TreeNode*> nodeQueue;\\n\\t\\tnodeQueue.push(root);\\n\\t\\n\\t\\tint leftLeavesSum = 0;\\n\\t\\tTreeNode* currNode;\\n\\t\\twhile (!nodeQueue.empty()) {\\n\\t\\t\\tcurrNode = nodeQueue.front();\\n\\t\\t\\tnodeQueue.pop();\\n\\t\\t\\t\\n\\t\\t\\tif (currNode->left) {\\n\\t\\t\\t\\tif (!currNode->left->left && !currNode->left->right) { // Check if the left node is a leaf\\n\\t\\t\\t\\t\\tleftLeavesSum += currNode->left->val;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tnodeQueue.push(currNode->left);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (currNode->right)\\n\\t\\t\\t\\tnodeQueue.push(currNode->right);\\n\\t\\t}\\n\\t\\treturn leftLeavesSum;\\n\\t}\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n\\tint sumOfLeftLeaves(TreeNode* root) {\\n\\t\\tif (!root) return 0;\\n\\t\\tif (root->left)\\n\\t\\t\\tif (!root->left->left && !root->left->right) // Check if the left node is a leaf\\n\\t\\t\\t\\treturn root->left->val + sumOfLeftLeaves(root->right);\\n\\n\\t\\treturn sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right);\\n\\t}\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\tint sumOfLeftLeaves(TreeNode* root) {\\n\\t\\tif (!root)\\n\\t\\t\\treturn 0;\\n\\t\\t\\n\\t\\tqueue<TreeNode*> nodeQueue;\\n\\t\\tnodeQueue.push(root);\\n\\t\\n\\t\\tint leftLeavesSum = 0;\\n\\t\\tTreeNode* currNode;\\n\\t\\twhile (!nodeQueue.empty()) {\\n\\t\\t\\tcurrNode = nodeQueue.front();\\n\\t\\t\\tnodeQueue.pop();\\n\\t\\t\\t\\n\\t\\t\\tif (currNode->left) {\\n\\t\\t\\t\\tif (!currNode->left->left && !currNode->left->right) { // Check if the left node is a leaf\\n\\t\\t\\t\\t\\tleftLeavesSum += currNode->left->val;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tnodeQueue.push(currNode->left);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (currNode->right)\\n\\t\\t\\t\\tnodeQueue.push(currNode->right);\\n\\t\\t}\\n\\t\\treturn leftLeavesSum;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805358,
                "title": "c-easy-solution",
                "content": "```\\npublic class Solution {\\n    public int[][] SolutionPoints { get; set; }\\n    public SortedDictionary<int, int> RectangleByArea = new SortedDictionary<int, int>();\\n    public int NumberOfSolutions { get; set; }\\n    public Random Random = new Random();\\n    \\n    public Solution(int[][] rects)\\n    {\\n        SolutionPoints = rects;\\n        for (var i = 0 ; i < rects.Length ; i++)\\n        {\\n            var rect = rects[i];\\n            NumberOfSolutions += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            RectangleByArea.Add(NumberOfSolutions, i);\\n        }\\n    }\\n\\n    public int[] Pick()\\n    {\\n        var randomNumber = Random.Next(NumberOfSolutions) + 1;\\n        var rectangleIndex = RectangleByArea.First(x => x.Key >= randomNumber).Value;\\n\\n        return Pick(SolutionPoints[rectangleIndex]);\\n    }\\n    public int[] Pick(int[] rectangle)\\n    {\\n        var x = Random.Next(rectangle[0], rectangle[2] + 1);\\n        var y = Random.Next(rectangle[1], rectangle[3] + 1);\\n        return new[] { x, y };\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int[][] SolutionPoints { get; set; }\\n    public SortedDictionary<int, int> RectangleByArea = new SortedDictionary<int, int>();\\n    public int NumberOfSolutions { get; set; }\\n    public Random Random = new Random();\\n    \\n    public Solution(int[][] rects)\\n    {\\n        SolutionPoints = rects;\\n        for (var i = 0 ; i < rects.Length ; i++)\\n        {\\n            var rect = rects[i];\\n            NumberOfSolutions += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            RectangleByArea.Add(NumberOfSolutions, i);\\n        }\\n    }\\n\\n    public int[] Pick()\\n    {\\n        var randomNumber = Random.Next(NumberOfSolutions) + 1;\\n        var rectangleIndex = RectangleByArea.First(x => x.Key >= randomNumber).Value;\\n\\n        return Pick(SolutionPoints[rectangleIndex]);\\n    }\\n    public int[] Pick(int[] rectangle)\\n    {\\n        var x = Random.Next(rectangle[0], rectangle[2] + 1);\\n        var y = Random.Next(rectangle[1], rectangle[3] + 1);\\n        return new[] { x, y };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 446893,
                "title": "c-solution-using-std-discrete-distribution",
                "content": "- [discrete_distribution](https://en.cppreference.com/w/cpp/numeric/random/discrete_distribution) can be used to select a random rectangle with weighted probabilities.\\n- [uniform_int_distribution](https://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution) can be used to select random coordinates of a point inside the selected rectangle.\\n\\n```c++\\nclass Solution {\\n    vector<vector<int>> rects;\\n    mt19937 rng;\\n    discrete_distribution<int> dist;\\n    \\npublic:\\n    Solution(vector<vector<int>>& rects_): \\n        rects(rects_),\\n        rng(random_device()())\\n    {\\n        vector<int> weights(rects.size());\\n        for (int i = 0; i < rects.size(); ++i) {\\n            weights[i] = (rects[i][2]-rects[i][0]+1)*(rects[i][3]-rects[i][1]+1);\\n        }\\n        dist = discrete_distribution<int>(weights.begin(), weights.end());\\n    }\\n    \\n    vector<int> pick() {\\n        auto &r = rects[dist(rng)];\\n        int x = uniform_int_distribution<int>(r[0], r[2])(rng);\\n        int y = uniform_int_distribution<int>(r[1], r[3])(rng);\\n        return {x, y};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\n    vector<vector<int>> rects;\\n    mt19937 rng;\\n    discrete_distribution<int> dist;\\n    \\npublic:\\n    Solution(vector<vector<int>>& rects_): \\n        rects(rects_),\\n        rng(random_device()())\\n    {\\n        vector<int> weights(rects.size());\\n        for (int i = 0; i < rects.size(); ++i) {\\n            weights[i] = (rects[i][2]-rects[i][0]+1)*(rects[i][3]-rects[i][1]+1);\\n        }\\n        dist = discrete_distribution<int>(weights.begin(), weights.end());\\n    }\\n    \\n    vector<int> pick() {\\n        auto &r = rects[dist(rng)];\\n        int x = uniform_int_distribution<int>(r[0], r[2])(rng);\\n        int y = uniform_int_distribution<int>(r[1], r[3])(rng);\\n        return {x, y};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3285205,
                "title": "497-space-95-52-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Initialize the Solution class with a list of non-overlapping axis-aligned rectangles rects.\\n\\n2. Inside the init function, calculate the total area covered by all the rectangles and store it in a variable called total_area.\\n\\n3. Create a list called areas to store the area of each rectangle cumulatively, starting from the first rectangle to the last.\\n\\n4. Loop through each rectangle in the input list rects and calculate the area of the rectangle using the formula: (xi - ai + 1) * (yi - bi + 1), where xi, yi are the top-right corner points of the ith rectangle and ai, bi are the bottom-left corner points of the ith rectangle.\\n\\n5. Add the area of each rectangle to the previous cumulative area, starting from the first rectangle, and append the result to the list areas.\\n\\n6. Inside the pick function, generate a random integer r between 1 and the total area covered by all the rectangles.\\n\\n7. Loop through each rectangle in the input list rects and compare the value of r with the cumulative area stored in the list areas for that rectangle. If r is less than or equal to the cumulative area, then the random point should be generated inside that rectangle.\\n\\n8. Generate two random integers x and y using the randint function from the random module, such that ai <= x <= xi and bi <= y <= yi, where ai, bi, xi, yi are the corner points of the current rectangle.\\n\\n9. Return the random point [x, y] as the output of the pick function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.areas = []\\n        self.total_area = 0\\n        \\n        # Calculate the total area covered by all the rectangles\\n        for rect in rects:\\n            area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)\\n            self.total_area += area\\n            self.areas.append(self.total_area)\\n        \\n    def pick(self) -> List[int]:\\n        # Generate a random integer between 0 and the total area covered by all the rectangles\\n        r = random.randint(1, self.total_area)\\n        \\n        # Loop through each rectangle, subtracting its area from r\\n        for i in range(len(self.rects)):\\n            if r <= self.areas[i]:\\n                # Once we find the rectangle, generate a random point inside it\\n                rect = self.rects[i]\\n                x = random.randint(rect[0], rect[2])\\n                y = random.randint(rect[1], rect[3])\\n                return [x, y]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Math",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.areas = []\\n        self.total_area = 0\\n        \\n        # Calculate the total area covered by all the rectangles\\n        for rect in rects:\\n            area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)\\n            self.total_area += area\\n            self.areas.append(self.total_area)\\n        \\n    def pick(self) -> List[int]:\\n        # Generate a random integer between 0 and the total area covered by all the rectangles\\n        r = random.randint(1, self.total_area)\\n        \\n        # Loop through each rectangle, subtracting its area from r\\n        for i in range(len(self.rects)):\\n            if r <= self.areas[i]:\\n                # Once we find the rectangle, generate a random point inside it\\n                rect = self.rects[i]\\n                x = random.randint(rect[0], rect[2])\\n                y = random.randint(rect[1], rect[3])\\n                return [x, y]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3045897,
                "title": "python-o-n-with-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem is asking us to pick a random point within a given list of rectangles. The key to solving this problem is to understand the concept of weighting. We can assign a weight to each rectangle based on the number of points it contains, and then use a random number generator to pick a rectangle based on its weight.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Create an instance variable weights that will store the weights of each rectangle.\\n- For each rectangle in the input list, calculate the number of points it contains and store it in weights.\\n- Calculate the total number of points in all rectangles and store it in the total variable.\\n- Create a prefix sum of weights to make it easier to pick a rectangle based on its weight.\\n- In the pick() method, use a bisect function to find the index of the rectangle that the random number falls within.\\n- Use a random number generator to pick a point within the selected rectangle.\\n# Complexity\\n- Time complexity: O(n) \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nwhere n is the number of rectangles. We need to iterate through the rectangles once to calculate their weights and create the prefix sum.\\n- Space complexity: O(n) \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nwhere n is the number of rectangles. We need to store the weights of each rectangle in an array.\\n# Code\\n```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.weights = []\\n        for rect in rects:\\n            self.weights.append((rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1))\\n        self.total = sum(self.weights)\\n        for i in range(1, len(self.weights)):\\n            self.weights[i] += self.weights[i - 1]\\n        self.weights = [0] + self.weights\\n        \\n\\n    def pick(self) -> List[int]:\\n        index = bisect.bisect_left(self.weights, random.randint(1, self.total))\\n        rect = self.rects[index - 1]\\n        return [random.randint(rect[0], rect[2]), random.randint(rect[1], rect[3])]\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.weights = []\\n        for rect in rects:\\n            self.weights.append((rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1))\\n        self.total = sum(self.weights)\\n        for i in range(1, len(self.weights)):\\n            self.weights[i] += self.weights[i - 1]\\n        self.weights = [0] + self.weights\\n        \\n\\n    def pick(self) -> List[int]:\\n        index = bisect.bisect_left(self.weights, random.randint(1, self.total))\\n        rect = self.rects[index - 1]\\n        return [random.randint(rect[0], rect[2]), random.randint(rect[1], rect[3])]\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 816490,
                "title": "implement-rand10-using-rand7-very-simple-explanation",
                "content": "```\\n\\n\\n\\nclass Solution:\\n    def rand10(self):\\n        \"\"\"\\n        :rtype: int\\n        \"\"\"\\n        #we can genearate numbers 8 to 56 using (c)= 7*rand7()+rand7()\\n        #with equal probalilty   we need to genearte    from one to 10\\n        # so all sholuld be gen with eq probailty\\n        #so to occur\"1\" there are numbers{11,21,...51} which are 5 choices when we do mod(10)\\n        # but for \"8\"   ther are {18,28,......48}  only 4 choices when we do mod(10)\\n        # but for \"10\"   ther are {18,28,......48}  only 4 choices when we do mod(10)\\n**      So here we have  probability different for number \"1\" and \"8\"\\n**        # inorder to make equal we take cut of from 11 to 50\\n        \\n         #so to occur\"1\" there are numbers{11,21,...41} which are 4 choiceswhen we do mod(10)\\n        # but for \"8\"   ther are {18,28,......48}  only 4 choices when we do mod(10)\\n        # but for \"10\"   ther are {20,......50}  only 4 choices when we do mod(10)\\n        # so all 1 to 10 will equally occur\\n        val=7*rand7()+rand7()\\n        print(val)\\n        while val>50 or val<11:\\n            print(val,\"sd\")\\n            val=7*rand7()+rand7()\\n            \\n        \\n        return val%10 if val%10!=0 else 10\\n        \\n```",
                "solutionTags": [],
                "code": "```\\n\\n\\n\\nclass Solution:\\n    def rand10(self):\\n        \"\"\"\\n        :rtype: int\\n        \"\"\"\\n        #we can genearate numbers 8 to 56 using (c)= 7*rand7()+rand7()\\n        #with equal probalilty   we need to genearte    from one to 10\\n        # so all sholuld be gen with eq probailty\\n        #so to occur\"1\" there are numbers{11,21,...51} which are 5 choices when we do mod(10)\\n        # but for \"8\"   ther are {18,28,......48}  only 4 choices when we do mod(10)\\n        # but for \"10\"   ther are {18,28,......48}  only 4 choices when we do mod(10)\\n**      So here we have  probability different for number \"1\" and \"8\"\\n**        # inorder to make equal we take cut of from 11 to 50\\n        \\n         #so to occur\"1\" there are numbers{11,21,...41} which are 4 choiceswhen we do mod(10)\\n        # but for \"8\"   ther are {18,28,......48}  only 4 choices when we do mod(10)\\n        # but for \"10\"   ther are {20,......50}  only 4 choices when we do mod(10)\\n        # so all 1 to 10 will equally occur\\n        val=7*rand7()+rand7()\\n        print(val)\\n        while val>50 or val<11:\\n            print(val,\"sd\")\\n            val=7*rand7()+rand7()\\n            \\n        \\n        return val%10 if val%10!=0 else 10\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 806030,
                "title": "python-3-weighting-by-area",
                "content": "I am a bit baffled by this problem in particular and how leetcode judges problems involving randomness in general. The code below selects a rectangle at random weighted by its area. This is necessary because to select some point with uniform probability means the selected point is more likely to land in a rectangle with a larger area. \\n\\nThe following code contains an error.\\n```\\nimport random\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.areas = [abs(r[0]-r[2])*abs(r[1]-r[3]) for r in rects]\\n\\n    def pick(self) -> List[int]:\\n        rect = random.choices(self.rects, weights=self.areas)[0]\\n        return [random.randint(rect[0], rect[2]), random.randint(rect[1], rect[3])]\\n```\\n\\nBut when I make the subtle correction `self.areas = [(abs(r[0]-r[2])+1)*(abs(r[1]-r[3])+1) for r in rects]`, the code passes all test cases. :-/ It\\'s horrendously slow in comparison to binary search, but it works.",
                "solutionTags": [],
                "code": "```\\nimport random\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.areas = [abs(r[0]-r[2])*abs(r[1]-r[3]) for r in rects]\\n\\n    def pick(self) -> List[int]:\\n        rect = random.choices(self.rects, weights=self.areas)[0]\\n        return [random.randint(rect[0], rect[2]), random.randint(rect[1], rect[3])]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805334,
                "title": "explained-javascript-solution-using-binary-search",
                "content": "```\\n/**\\n /**\\n * @param {number[][]} rects\\n */\\nvar Solution = function(rects) {\\n    this.rects = rects;\\n    this.map = {};\\n    this.sum = 0;\\n    // we put in the map the number of points that belong to each rect\\n    for(let i in rects) {\\n        const rect = rects[i];\\n        // the number of points can be picked in this rectangle\\n        this.sum += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n        this.map[this.sum] = i;\\n    }\\n    this.keys = Object.keys(this.map);\\n};\\n\\n/**\\n * @return {number[]}\\n */\\nSolution.prototype.pick = function() {\\n    // random point pick between [1, this.sum]\\n    const randomPointPick = Math.floor(Math.random() * this.sum) + 1;\\n    \\n    // we look for the randomPointPick in the keys of the map\\n    let pointInMap;\\n    // the keys exists in map\\n    if(this.map[randomPointPick]) pointInMap = randomPointPick;\\n    // the key is the first in the map (we do this check before doing binary search because its out of boundery)\\n    else if(randomPointPick < this.keys[0]) pointInMap = this.keys[0];\\n    let high = this.keys.length;\\n    let low = 1;\\n    // binary search to find the closest key that bigger than randomPointPick\\n    while(low <= high && !pointInMap) {\\n        const mid = Math.floor((low + (high-low)/2));\\n        if(randomPointPick > this.keys[mid-1] && randomPointPick < this.keys[mid]) {\\n            pointInMap = this.keys[mid];\\n            break;\\n        } else if (randomPointPick > this.keys[mid]){\\n            low = mid+1;\\n        } else {\\n            high = mid-1;\\n        }\\n    }\\n    \\n    // we have the point, now we can get which rect belong to that point\\n    const pointInRects = this.map[pointInMap];\\n    const chosen = this.rects[pointInRects];\\n    const rightX = chosen[2];\\n    const leftX = chosen[0];\\n    const topY = chosen[3];\\n    const bottomY = chosen[1];\\n    const pickX = Math.floor(Math.random() * (rightX-leftX+1)) + leftX;\\n    const pickY = Math.floor(Math.random() * (topY-bottomY+1)) + bottomY;\\n    return [pickX, pickY]\\n};\\n\\n/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(rects)\\n * var param_1 = obj.pick()\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n /**\\n * @param {number[][]} rects\\n */\\nvar Solution = function(rects) {\\n    this.rects = rects;\\n    this.map = {};\\n    this.sum = 0;\\n    // we put in the map the number of points that belong to each rect\\n    for(let i in rects) {\\n        const rect = rects[i];\\n        // the number of points can be picked in this rectangle\\n        this.sum += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n        this.map[this.sum] = i;\\n    }\\n    this.keys = Object.keys(this.map);\\n};\\n\\n/**\\n * @return {number[]}\\n */\\nSolution.prototype.pick = function() {\\n    // random point pick between [1, this.sum]\\n    const randomPointPick = Math.floor(Math.random() * this.sum) + 1;\\n    \\n    // we look for the randomPointPick in the keys of the map\\n    let pointInMap;\\n    // the keys exists in map\\n    if(this.map[randomPointPick]) pointInMap = randomPointPick;\\n    // the key is the first in the map (we do this check before doing binary search because its out of boundery)\\n    else if(randomPointPick < this.keys[0]) pointInMap = this.keys[0];\\n    let high = this.keys.length;\\n    let low = 1;\\n    // binary search to find the closest key that bigger than randomPointPick\\n    while(low <= high && !pointInMap) {\\n        const mid = Math.floor((low + (high-low)/2));\\n        if(randomPointPick > this.keys[mid-1] && randomPointPick < this.keys[mid]) {\\n            pointInMap = this.keys[mid];\\n            break;\\n        } else if (randomPointPick > this.keys[mid]){\\n            low = mid+1;\\n        } else {\\n            high = mid-1;\\n        }\\n    }\\n    \\n    // we have the point, now we can get which rect belong to that point\\n    const pointInRects = this.map[pointInMap];\\n    const chosen = this.rects[pointInRects];\\n    const rightX = chosen[2];\\n    const leftX = chosen[0];\\n    const topY = chosen[3];\\n    const bottomY = chosen[1];\\n    const pickX = Math.floor(Math.random() * (rightX-leftX+1)) + leftX;\\n    const pickY = Math.floor(Math.random() * (topY-bottomY+1)) + bottomY;\\n    return [pickX, pickY]\\n};\\n\\n/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(rects)\\n * var param_1 = obj.pick()\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 805305,
                "title": "python-1-liner",
                "content": "The solution uses library function choice from package random.\\n\\nFinal version after refactoring:\\n```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.r=[*zip(*[[r,(r[2]-r[0]+1)*(r[3]-r[1]+1)]for r in rects])]\\n    def pick(self) -> List[int]:\\n        return [[randint(r[0],r[2]), randint(r[1],r[3])] for r in choices(*self.r)][0]\\n``` \\n\\nPrevious version:\\n```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.r=[*zip(*reduce(lambda a,r:a+[[[(r[0],r[2]),(r[1],r[3])],(r[2]-r[0]+1)*(r[3]-r[1]+1)]],rects,[]))]\\n    def pick(self) -> List[int]:\\n        return [[randint(*x), randint(*y)] for x,y in choices(*self.r)][0]\\n```\\n\\nVersion before previous with 2 variables for rectangles and weights:\\n```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.r,self.w=zip(*reduce(lambda a,r:a+[[[(r[0],r[2]),(r[1],r[3])],(r[2]-r[0]+1)*(r[3]-r[1]+1)]],rects,[]))\\n \\n    def pick(self) -> List[int]:\\n        return [[randint(*x), randint(*y)] for x,y in choices(self.r, self.w)][0]\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.r=[*zip(*[[r,(r[2]-r[0]+1)*(r[3]-r[1]+1)]for r in rects])]\\n    def pick(self) -> List[int]:\\n        return [[randint(r[0],r[2]), randint(r[1],r[3])] for r in choices(*self.r)][0]\\n```\n```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.r=[*zip(*reduce(lambda a,r:a+[[[(r[0],r[2]),(r[1],r[3])],(r[2]-r[0]+1)*(r[3]-r[1]+1)]],rects,[]))]\\n    def pick(self) -> List[int]:\\n        return [[randint(*x), randint(*y)] for x,y in choices(*self.r)][0]\\n```\n```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.r,self.w=zip(*reduce(lambda a,r:a+[[[(r[0],r[2]),(r[1],r[3])],(r[2]-r[0]+1)*(r[3]-r[1]+1)]],rects,[]))\\n \\n    def pick(self) -> List[int]:\\n        return [[randint(*x), randint(*y)] for x,y in choices(self.r, self.w)][0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 233906,
                "title": "python-random-choices-with-weights",
                "content": "\\n(x2-x1+1)*(y2-y1+1)  stands for the number of points in rectangle [x1,y1,x2,y2]. So with the weights, we can ensure for every point the chance of being picked is evenly.\\n\\n```\\nclass Solution:\\n\\n    def __init__(self, rects: \\'List[List[int]]\\'):\\n        self.rects_weight = []\\n        self.rects = rects\\n        for [x1,y1,x2,y2] in rects:\\n            self.rects_weight.append((x2-x1+1)*(y2-y1+1))\\n        \\n    def pick(self) -> \\'List[int]\\':\\n        [x1,y1,x2,y2] = random.choices(self.rects, weights = self.rects_weight)[0]\\n        x = random.randrange(x1,x2+1)\\n        y = random.randrange(y1,y2+1)\\n        return [x,y]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: \\'List[List[int]]\\'):\\n        self.rects_weight = []\\n        self.rects = rects\\n        for [x1,y1,x2,y2] in rects:\\n            self.rects_weight.append((x2-x1+1)*(y2-y1+1))\\n        \\n    def pick(self) -> \\'List[int]\\':\\n        [x1,y1,x2,y2] = random.choices(self.rects, weights = self.rects_weight)[0]\\n        x = random.randrange(x1,x2+1)\\n        y = random.randrange(y1,y2+1)\\n        return [x,y]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 884167,
                "title": "c-beat-99",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    vector<vector<int>> data;\\n    int area = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        for (auto& x : rects) {\\n            area += (x[2] - x[0] + 1) * (x[3] - x[1] + 1);\\n            data.push_back({area, x[0], x[2] - x[0] + 1, x[1], x[3] - x[1] + 1});\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int num = rand() % area;\\n        int l = 0, r = data.size() - 1;\\n        while (l < r) {\\n            int m = l + (r - l) / 2;\\n            if (data[m][0] < num) l = m + 1;\\n            else r = m;\\n        }\\n        \\n        if (data[l][0] == num && l != data.size() - 1) ++l;\\n        \\n        vector<int>& y = data[l];\\n        \\n        return {rand() % y[2] + y[1], rand() % y[4] + y[3]};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    vector<vector<int>> data;\\n    int area = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        for (auto& x : rects) {\\n            area += (x[2] - x[0] + 1) * (x[3] - x[1] + 1);\\n            data.push_back({area, x[0], x[2] - x[0] + 1, x[1], x[3] - x[1] + 1});\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int num = rand() % area;\\n        int l = 0, r = data.size() - 1;\\n        while (l < r) {\\n            int m = l + (r - l) / 2;\\n            if (data[m][0] < num) l = m + 1;\\n            else r = m;\\n        }\\n        \\n        if (data[l][0] == num && l != data.size() - 1) ++l;\\n        \\n        vector<int>& y = data[l];\\n        \\n        return {rand() % y[2] + y[1], rand() % y[4] + y[3]};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 810669,
                "title": "minimum-cost-for-tickets-solution-c-easy",
                "content": "Cost[i] -> total amount spent till day i to travell at all the days before it.\\n\\n```\\nclass Solution {\\npublic:\\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\\n        set<int> dd(days.begin(),days.end());\\n        int cost[366];\\n        memset(cost,0,sizeof(cost));\\n        int one=costs[0],seven=costs[1],thirty=costs[2];\\n        for(int i=1;i<=365;i++)\\n        {\\n            cost[i]=cost[i-1];\\n            if(dd.find(i)!=dd.end())\\n            {\\n                cost[i] = min(cost[i-1>=0?i-1:0]+one,min(seven+cost[i-7>=0?i-7:0],thirty+cost[i-30>=0?i-30:0]));\\n            }\\n        }\\n        \\n        return cost[365];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\\n        set<int> dd(days.begin(),days.end());\\n        int cost[366];\\n        memset(cost,0,sizeof(cost));\\n        int one=costs[0],seven=costs[1],thirty=costs[2];\\n        for(int i=1;i<=365;i++)\\n        {\\n            cost[i]=cost[i-1];\\n            if(dd.find(i)!=dd.end())\\n            {\\n                cost[i] = min(cost[i-1>=0?i-1:0]+one,min(seven+cost[i-7>=0?i-7:0],thirty+cost[i-30>=0?i-30:0]));\\n            }\\n        }\\n        \\n        return cost[365];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 809199,
                "title": "sum-of-left-leaves-java-dfs-bfs",
                "content": "**DFS**\\n```\\nclass Solution {\\n\\n    public int sumOfLeftLeaves(TreeNode root) {\\n        if( root == null || (root.left == null && root.right == null) )\\n            return 0;\\n        return dfs(root,false);\\n    }\\n\\t\\n    static int dfs(TreeNode root,boolean isLeft){\\n        if( root == null )\\n            return 0;\\n        int sum = 0;\\n        if( isLeft && root.left == null && root.right == null )\\n            sum += root.val;\\n        if( root.left != null )\\n            sum += dfs(root.left,true);\\n        if( root.right != null )\\n            sum += dfs(root.right,false);\\n        return sum;\\n            \\n    }\\n}\\n```\\n**BFS**\\n```\\nclass Solution {\\n\\n    public int sumOfLeftLeaves(TreeNode root) {\\n        if( root == null || (root.left == null && root.right == null) )\\n            return 0;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        int sum = 0;\\n        while( !q.isEmpty() ){\\n            int len = q.size();\\n            for(int i=0;i<len;i++){\\n                TreeNode cur = q.poll();\\n                if( cur.left != null ){\\n                    if( cur.left.left == null && cur.left.right == null )\\n                        sum += cur.left.val;\\n                    else\\n                        q.add(cur.left);\\n                }\\n                if( cur.right != null )\\n                    q.add(cur.right);\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\n    public int sumOfLeftLeaves(TreeNode root) {\\n        if( root == null || (root.left == null && root.right == null) )\\n            return 0;\\n        return dfs(root,false);\\n    }\\n\\t\\n    static int dfs(TreeNode root,boolean isLeft){\\n        if( root == null )\\n            return 0;\\n        int sum = 0;\\n        if( isLeft && root.left == null && root.right == null )\\n            sum += root.val;\\n        if( root.left != null )\\n            sum += dfs(root.left,true);\\n        if( root.right != null )\\n            sum += dfs(root.right,false);\\n        return sum;\\n            \\n    }\\n}\\n```\n```\\nclass Solution {\\n\\n    public int sumOfLeftLeaves(TreeNode root) {\\n        if( root == null || (root.left == null && root.right == null) )\\n            return 0;\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        int sum = 0;\\n        while( !q.isEmpty() ){\\n            int len = q.size();\\n            for(int i=0;i<len;i++){\\n                TreeNode cur = q.poll();\\n                if( cur.left != null ){\\n                    if( cur.left.left == null && cur.left.right == null )\\n                        sum += cur.left.val;\\n                    else\\n                        q.add(cur.left);\\n                }\\n                if( cur.right != null )\\n                    q.add(cur.right);\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 806090,
                "title": "c-random-points-simple",
                "content": "Build a weighted list of rectangles where the weight is equal to each rectangle\\'s area. When picking a random point, first pick a rect from the weighted list and then pick a random point from within that rect.\\n```\\nclass Solution {\\npublic:\\n    vector<pair<int, vector<int>>> weightedRects;\\n    long long totalWeight = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        for (auto& rect : rects) {\\n            int area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            totalWeight += area;\\n            weightedRects.push_back(make_pair(area, rect));\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int weight = rand() % (totalWeight + 1);\\n        for (auto& entry : weightedRects) {\\n            if (weight <= entry.first) {\\n                auto& rect = entry.second;\\n                int px = rect[0] + rand() % (rect[2] - rect[0] + 1);\\n                int py = rect[1] + rand() % (rect[3] - rect[1] + 1);\\n                return {px, py};\\n            }\\n            weight -= entry.first;\\n        }\\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<pair<int, vector<int>>> weightedRects;\\n    long long totalWeight = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        for (auto& rect : rects) {\\n            int area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            totalWeight += area;\\n            weightedRects.push_back(make_pair(area, rect));\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int weight = rand() % (totalWeight + 1);\\n        for (auto& entry : weightedRects) {\\n            if (weight <= entry.first) {\\n                auto& rect = entry.second;\\n                int px = rect[0] + rand() % (rect[2] - rect[0] + 1);\\n                int py = rect[1] + rand() % (rect[3] - rect[1] + 1);\\n                return {px, py};\\n            }\\n            weight -= entry.first;\\n        }\\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805330,
                "title": "short-and-easy-solution-but-something-s-wrong-cannot-pass-3-testcases-used-random-choice",
                "content": "Hi, I tried solving it using random.choice(). Firstly, I made an array that had X and Y ranges in a list for each rectangle. Later, I simply used random.choice in selecting the rectangle and later on points by applying choice on selecting x_coordinate and y_coordinate.\\n\\nI don\\'t know how to explain the approach exactly, but you can see the working code here. 32/35 cases passed and logic seems somewhat correct to me. Can anyone help me find out what the issue is?\\n\\n```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        \\n        self.another_array_with_limits = []\\n        for rec in rects:\\n            X_and_Y_range = [[rec[0],rec[2]], [rec[1],rec[3]]] # [[x-range], [y_range]]\\n            self.another_array_with_limits.append(X_and_Y_range)\\n               \\n    def pick(self) -> List[int]:\\n        \\n        get_random_array = random.choice(self.another_array_with_limits)\\n        random_x = random.choice(range(get_random_array[0][0], get_random_array[0][1] + 1))\\n        random_y = random.choice(range(get_random_array[1][0], get_random_array[1][1] + 1))\\n        \\n        return [random_x, random_y]\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        \\n        self.another_array_with_limits = []\\n        for rec in rects:\\n            X_and_Y_range = [[rec[0],rec[2]], [rec[1],rec[3]]] # [[x-range], [y_range]]\\n            self.another_array_with_limits.append(X_and_Y_range)\\n               \\n    def pick(self) -> List[int]:\\n        \\n        get_random_array = random.choice(self.another_array_with_limits)\\n        random_x = random.choice(range(get_random_array[0][0], get_random_array[0][1] + 1))\\n        random_y = random.choice(range(get_random_array[1][0], get_random_array[1][1] + 1))\\n        \\n        return [random_x, random_y]\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 344456,
                "title": "c-solution",
                "content": "```\\npublic class Solution \\n{\\n    private int[][] rects;\\n    private int[] sums;\\n    private Random random;\\n\\n    public Solution(int[][] rects) \\n    {\\n        this.rects = rects;\\n        sums = new int[rects.Length];\\n        for(int i = 0; i <rects.Length; i++)\\n        {\\n            var area = RectAreaPoints(rects[i]);\\n            sums[i] = i == 0 ? area : sums[i - 1] + area;\\n        }\\n\\n        random = new Random();\\n    }\\n    \\n    public int[] Pick() \\n    {\\n        int index = random.Next(sums[sums.Length - 1]) + 1;\\n        int left = Array.BinarySearch(sums, index);\\n        if(left < 0) left = ~left;\\n        int rect_index = sums[left] - index;\\n        int rect_long = rects[left][2] - rects[left][0] + 1;\\n        return new int[]{rects[left][0] + rect_index % rect_long, rects[left][1] + rect_index / rect_long};\\n    }\\n    \\n    private int RectAreaPoints(int[] p)\\n    {\\n        return (p[2] - p[0] + 1) * (p[3] - p[1] + 1); \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{\\n    private int[][] rects;\\n    private int[] sums;\\n    private Random random;\\n\\n    public Solution(int[][] rects) \\n    {\\n        this.rects = rects;\\n        sums = new int[rects.Length];\\n        for(int i = 0; i <rects.Length; i++)\\n        {\\n            var area = RectAreaPoints(rects[i]);\\n            sums[i] = i == 0 ? area : sums[i - 1] + area;\\n        }\\n\\n        random = new Random();\\n    }\\n    \\n    public int[] Pick() \\n    {\\n        int index = random.Next(sums[sums.Length - 1]) + 1;\\n        int left = Array.BinarySearch(sums, index);\\n        if(left < 0) left = ~left;\\n        int rect_index = sums[left] - index;\\n        int rect_long = rects[left][2] - rects[left][0] + 1;\\n        return new int[]{rects[left][0] + rect_index % rect_long, rects[left][1] + rect_index / rect_long};\\n    }\\n    \\n    private int RectAreaPoints(int[] p)\\n    {\\n        return (p[2] - p[0] + 1) * (p[3] - p[1] + 1); \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 245955,
                "title": "python-3-solution-using-random-randint-and-bisect-bisect-left",
                "content": "```\\nimport bisect\\nimport random\\n\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        # number of points in each rectangle\\n        self.counts = [(x2 - x1 + 1) * (y2 - y1 + 1) \\n                       for x1, y1, x2, y2 in rects]\\n        self.total = sum(self.counts)\\n        # accumulated (prefix) count of points\\n        self.accumulate_counts = []\\n        accumulated = 0\\n        for count in self.counts:\\n            accumulated += count\\n            self.accumulate_counts.append(accumulated)\\n\\n    def pick(self) -> List[int]:\\n        # rand is in [1, n], including both ends\\n        rand = random.randint(1, self.total)\\n        # find rightmost index with value <= rand\\n        # e.g., for accumulate_count of [2, 5, 8], with rand inputs range [1, 8]\\n        # there are 3 groups {1,2 | 3,4,5 | 6,7,8}, corresponding to index [0, 1, 2] respectively\\n        rect_index = bisect.bisect_left(self.accumulate_counts, rand)\\n        # use rand to find point_index, too\\n        point_index = rand - self.accumulate_counts[rect_index] + self.counts[rect_index] - 1\\n        x1, y1, x2, y2 = self.rects[rect_index]\\n        i, j = divmod(point_index, y2 - y1 + 1)\\n        return [x1 + i, y1 + j]\\n```",
                "solutionTags": [],
                "code": "```\\nimport bisect\\nimport random\\n\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        # number of points in each rectangle\\n        self.counts = [(x2 - x1 + 1) * (y2 - y1 + 1) \\n                       for x1, y1, x2, y2 in rects]\\n        self.total = sum(self.counts)\\n        # accumulated (prefix) count of points\\n        self.accumulate_counts = []\\n        accumulated = 0\\n        for count in self.counts:\\n            accumulated += count\\n            self.accumulate_counts.append(accumulated)\\n\\n    def pick(self) -> List[int]:\\n        # rand is in [1, n], including both ends\\n        rand = random.randint(1, self.total)\\n        # find rightmost index with value <= rand\\n        # e.g., for accumulate_count of [2, 5, 8], with rand inputs range [1, 8]\\n        # there are 3 groups {1,2 | 3,4,5 | 6,7,8}, corresponding to index [0, 1, 2] respectively\\n        rect_index = bisect.bisect_left(self.accumulate_counts, rand)\\n        # use rand to find point_index, too\\n        point_index = rand - self.accumulate_counts[rect_index] + self.counts[rect_index] - 1\\n        x1, y1, x2, y2 = self.rects[rect_index]\\n        i, j = divmod(point_index, y2 - y1 + 1)\\n        return [x1 + i, y1 + j]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3515668,
                "title": "java-solution-with-comment-explanation",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    \\n    int[][] rects;\\n    TreeMap<Integer, Integer> weightedRectIndex = new TreeMap<>();\\n    int nPoints = 0;\\n    \\n    Random rng = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        int index = 0;\\n        for (int[] rect : rects) {\\n\\t\\t    // inserts cumulative weight key pointing to rectangle index\\n            weightedRectIndex.put(nPoints, index++);\\n            nPoints += width(rect) * height(rect);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n\\t    // generates random point within total weight\\n        int point = rng.nextInt(nPoints);\\n\\t\\t// finds appropriate rectangle\\n        var entry = weightedRectIndex.floorEntry(point);\\n\\t\\t// find point within the current rectangle\\n        int rectPoint = point - entry.getKey();\\n        int[] rect = rects[entry.getValue()];\\n        return new int[]{\\n            rect[0] + rectPoint % width(rect), \\n            rect[1] + rectPoint / width(rect)};\\n    }\\n    \\n    private int width(int[] rect) {\\n        return rect[2] - rect[0] + 1;\\n    }\\n    \\n    private int height(int[] rect) {\\n        return rect[3] - rect[1] + 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Binary Search",
                    "Reservoir Sampling"
                ],
                "code": "```\\nclass Solution {\\n    \\n    int[][] rects;\\n    TreeMap<Integer, Integer> weightedRectIndex = new TreeMap<>();\\n    int nPoints = 0;\\n    \\n    Random rng = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        int index = 0;\\n        for (int[] rect : rects) {\\n\\t\\t    // inserts cumulative weight key pointing to rectangle index\\n            weightedRectIndex.put(nPoints, index++);\\n            nPoints += width(rect) * height(rect);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n\\t    // generates random point within total weight\\n        int point = rng.nextInt(nPoints);\\n\\t\\t// finds appropriate rectangle\\n        var entry = weightedRectIndex.floorEntry(point);\\n\\t\\t// find point within the current rectangle\\n        int rectPoint = point - entry.getKey();\\n        int[] rect = rects[entry.getValue()];\\n        return new int[]{\\n            rect[0] + rectPoint % width(rect), \\n            rect[1] + rectPoint / width(rect)};\\n    }\\n    \\n    private int width(int[] rect) {\\n        return rect[2] - rect[0] + 1;\\n    }\\n    \\n    private int height(int[] rect) {\\n        return rect[3] - rect[1] + 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3507848,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    vector<vector<int>> r;\\n    vector<int> acc;\\n    Solution(vector<vector<int>>& rects){\\n\\n        std::ios_base::sync_with_stdio(false);\\n        cin.tie(0);\\n\\n        r = rects;\\n        int len = rects.size();\\n        acc = vector<int>(len, 0);\\n\\n        for(int i = 0; i < len; i++){\\n            const vector<int> &v = rects[i];\\n            acc[i] = ( i==0 ? 0: acc[i-1]) + (v[2] - v[0] + 1)*(v[3]-v[1]+1);\\n        }\\n        srand((unsigned)time(NULL));\\n    }\\n    vector<int> pick() {\\n        int target = rand()%acc.back();\\n\\n        int start = 0;\\n        int end = acc.size();\\n        while (start < end){\\n            int mid = (start+end)/2;\\n            int mval = acc[mid];\\n            if (target == mval){\\n                start = mid + 1;\\n                break;\\n            }\\n            else if (target > mval){\\n                start = mid + 1;\\n            }\\n            else{\\n                end = mid;\\n            }\\n        }\\n        const vector<int> &v = r[start];\\n        int dx = v[2] - v[0] + 1;\\n        int x = v[0] + rand()%dx;\\n        int dy = v[3] - v[1] + 1;\\n        int y = v[1] + rand()%dy;\\n        return {x,y};\\n    }\\n};\\n```\\n\\n```Python3 []\\nfrom typing import Generator\\n\\nclass Solution:\\n  def __init__(self, rects: List[List[int]]):\\n    self._rects = rects\\n    self._pg = self._pick_generator()\\n  \\n  def _pick_generator(self) -> Generator[List[int], None, None]:\\n    for a, b, x, y in self._rects:\\n      for i in range (a, x+1):\\n        for j in range (b, y+1):\\n          yield [i, j]\\n\\n  def pick(self) -> List[int]:\\n    try:\\n      return next(self._pg)\\n    except StopIteration:\\n      self._pg = self._pick_generator()\\n      return next(self._pg)\\n```\\n\\n```Java []\\nclass Solution {\\n  public Solution(int[][] rects) {\\n    this.rects = rects;\\n    areas = new int[rects.length];\\n    for (int i = 0; i < rects.length; ++i)\\n      areas[i] = getArea(rects[i]) + (i > 0 ? areas[i - 1] : 0);\\n  }\\n  public int[] pick() {\\n    final int target = rand.nextInt(areas[areas.length - 1]);\\n    final int index = firstGreater(areas, target);\\n    final int[] r = rects[index];\\n    return new int[] {\\n        rand.nextInt(r[2] - r[0] + 1) + r[0],\\n        rand.nextInt(r[3] - r[1] + 1) + r[1],\\n    };\\n  }\\n  private int[][] rects;\\n  private int[] areas;\\n  private Random rand = new Random();\\n\\n  private int getArea(int[] r) {\\n    return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n  }\\n  private int firstGreater(int[] areas, int target) {\\n    int l = 0;\\n    int r = areas.length;\\n    while (l < r) {\\n      final int m = (l + r) / 2;\\n      if (areas[m] > target)\\n        r = m;\\n      else\\n        l = m + 1;\\n    }\\n    return l;\\n  }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    vector<vector<int>> r;\\n    vector<int> acc;\\n    Solution(vector<vector<int>>& rects){\\n\\n        std::ios_base::sync_with_stdio(false);\\n        cin.tie(0);\\n\\n        r = rects;\\n        int len = rects.size();\\n        acc = vector<int>(len, 0);\\n\\n        for(int i = 0; i < len; i++){\\n            const vector<int> &v = rects[i];\\n            acc[i] = ( i==0 ? 0: acc[i-1]) + (v[2] - v[0] + 1)*(v[3]-v[1]+1);\\n        }\\n        srand((unsigned)time(NULL));\\n    }\\n    vector<int> pick() {\\n        int target = rand()%acc.back();\\n\\n        int start = 0;\\n        int end = acc.size();\\n        while (start < end){\\n            int mid = (start+end)/2;\\n            int mval = acc[mid];\\n            if (target == mval){\\n                start = mid + 1;\\n                break;\\n            }\\n            else if (target > mval){\\n                start = mid + 1;\\n            }\\n            else{\\n                end = mid;\\n            }\\n        }\\n        const vector<int> &v = r[start];\\n        int dx = v[2] - v[0] + 1;\\n        int x = v[0] + rand()%dx;\\n        int dy = v[3] - v[1] + 1;\\n        int y = v[1] + rand()%dy;\\n        return {x,y};\\n    }\\n};\\n```\n```Python3 []\\nfrom typing import Generator\\n\\nclass Solution:\\n  def __init__(self, rects: List[List[int]]):\\n    self._rects = rects\\n    self._pg = self._pick_generator()\\n  \\n  def _pick_generator(self) -> Generator[List[int], None, None]:\\n    for a, b, x, y in self._rects:\\n      for i in range (a, x+1):\\n        for j in range (b, y+1):\\n          yield [i, j]\\n\\n  def pick(self) -> List[int]:\\n    try:\\n      return next(self._pg)\\n    except StopIteration:\\n      self._pg = self._pick_generator()\\n      return next(self._pg)\\n```\n```Java []\\nclass Solution {\\n  public Solution(int[][] rects) {\\n    this.rects = rects;\\n    areas = new int[rects.length];\\n    for (int i = 0; i < rects.length; ++i)\\n      areas[i] = getArea(rects[i]) + (i > 0 ? areas[i - 1] : 0);\\n  }\\n  public int[] pick() {\\n    final int target = rand.nextInt(areas[areas.length - 1]);\\n    final int index = firstGreater(areas, target);\\n    final int[] r = rects[index];\\n    return new int[] {\\n        rand.nextInt(r[2] - r[0] + 1) + r[0],\\n        rand.nextInt(r[3] - r[1] + 1) + r[1],\\n    };\\n  }\\n  private int[][] rects;\\n  private int[] areas;\\n  private Random rand = new Random();\\n\\n  private int getArea(int[] r) {\\n    return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n  }\\n  private int firstGreater(int[] areas, int target) {\\n    int l = 0;\\n    int r = areas.length;\\n    while (l < r) {\\n      final int m = (l + r) / 2;\\n      if (areas[m] > target)\\n        r = m;\\n      else\\n        l = m + 1;\\n    }\\n    return l;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2806586,
                "title": "simple-solution-using-binary-search-and-math-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCount number of points in every rectangle and push till number points in su vector to search in which rectangle random point will lie .\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBinary Search\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int N;\\n    long int ar;\\n    vector<vector<int>> rec;\\n    vector<long int> su;\\n    Solution(vector<vector<int>>& rects) {\\n        N = rects.size();\\n        ar = 0;\\n        for(auto x: rects){\\n            ar += (x[2]-x[0]+1)*(x[3]-x[1]+1);\\n            su.push_back(ar);\\n        }\\n        rec = rects;\\n    }\\n    \\n    vector<int> pick() {\\n        int rval = (rand()%ar);\\n        int ithrec = upper_bound(su.begin(), su.end() , rval) - su.begin();\\n        long int x = rec[ithrec][2] - rec[ithrec][0] + 1; // number of x points \\n        long int y = rec[ithrec][3] - rec[ithrec][1] + 1; // number of y points\\n        // Now according to area\\n        // rval = su[ithrec] - rval;\\n        int fx = rec[ithrec][0] + (rand()%(x));\\n        int fy = rec[ithrec][1] + (rand()%(y));\\n        return {fx,fy};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int N;\\n    long int ar;\\n    vector<vector<int>> rec;\\n    vector<long int> su;\\n    Solution(vector<vector<int>>& rects) {\\n        N = rects.size();\\n        ar = 0;\\n        for(auto x: rects){\\n            ar += (x[2]-x[0]+1)*(x[3]-x[1]+1);\\n            su.push_back(ar);\\n        }\\n        rec = rects;\\n    }\\n    \\n    vector<int> pick() {\\n        int rval = (rand()%ar);\\n        int ithrec = upper_bound(su.begin(), su.end() , rval) - su.begin();\\n        long int x = rec[ithrec][2] - rec[ithrec][0] + 1; // number of x points \\n        long int y = rec[ithrec][3] - rec[ithrec][1] + 1; // number of y points\\n        // Now according to area\\n        // rval = su[ithrec] - rval;\\n        int fx = rec[ithrec][0] + (rand()%(x));\\n        int fy = rec[ithrec][1] + (rand()%(y));\\n        return {fx,fy};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2750206,
                "title": "python3-solution-explained-easy-to-understand",
                "content": "**Solution:**\\n1. First find the sum of the area of all the given rectangles\\n2. Create a probability list to determine which rectangle should be selected. A rectangle with higher probability will be selected. The ith element of the probability list is the area of the ith rectangle devided by the sum of the area of all rectangles.\\n3. Find the index of the highest probability rectangle which has the highest area by definition based on the probability list.\\n4. Finaly find the 4 points of the rectangle which are x1,x2, y1,y2 and take random integer between [x1,x2]  and [y1,y2] .\\n```\\ndef __init__(self, rects: List[List[int]]):\\n\\tw = 0\\n\\tself.rects = rects\\n\\tself.probability =[]\\n\\tself.indexes = []\\n\\tfor i in range(len(self.rects)):\\n\\t\\tself.indexes.append(i)\\n\\t\\tw += (self.rects[i][2]-self.rects[i][0] +1)*(self.rects[i][3]-self.rects[i][1] +1)\\n\\tfor i in range(len(self.rects)):\\n\\t\\tself.probability.append((self.rects[i][2]-self.rects[i][0] +1)*(self.rects[i][3]-self.rects[i][1] +1)/w)\\ndef pick(self) -> List[int]:\\n\\tindex = random.choices(self.indexes,weights = self.probability,k=1)[-1]\\n\\tx1,y1,x2,y2 = self.rects[index]\\n\\treturn [random.randint(x1,x2),random.randint(y1,y2)]",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Prefix Sum",
                    "Probability and Statistics"
                ],
                "code": "**Solution:**\\n1. First find the sum of the area of all the given rectangles\\n2. Create a probability list to determine which rectangle should be selected. A rectangle with higher probability will be selected. The ith element of the probability list is the area of the ith rectangle devided by the sum of the area of all rectangles.\\n3. Find the index of the highest probability rectangle which has the highest area by definition based on the probability list.\\n4. Finaly find the 4 points of the rectangle which are x1,x2, y1,y2 and take random integer between [x1,x2]  and [y1,y2] .\\n```\\ndef __init__(self, rects: List[List[int]]):\\n\\tw = 0\\n\\tself.rects = rects\\n\\tself.probability =[]\\n\\tself.indexes = []\\n\\tfor i in range(len(self.rects)):\\n\\t\\tself.indexes.append(i)\\n\\t\\tw += (self.rects[i][2]-self.rects[i][0] +1)*(self.rects[i][3]-self.rects[i][1] +1)\\n\\tfor i in range(len(self.rects)):\\n\\t\\tself.probability.append((self.rects[i][2]-self.rects[i][0] +1)*(self.rects[i][3]-self.rects[i][1] +1)/w)\\ndef pick(self) -> List[int]:\\n\\tindex = random.choices(self.indexes,weights = self.probability,k=1)[-1]\\n\\tx1,y1,x2,y2 = self.rects[index]\\n\\treturn [random.randint(x1,x2),random.randint(y1,y2)]",
                "codeTag": "Python3"
            },
            {
                "id": 2476059,
                "title": "python-binary-search-o-logn-per-pick",
                "content": "```\\nfrom itertools import accumulate\\nfrom random import randint\\nfrom bisect import bisect_left\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.acc = list(accumulate([ (x2-x1+1)*(y2-y1+1) for x1, y1, x2, y2 in rects ], initial = 0))\\n\\n    def pick(self) -> List[int]:\\n        r = randint(1, self.acc[-1])\\n        i = bisect_left(self.acc, r)\\n        delta = r - self.acc[i-1] - 1\\n        x1, y1, x2, y2 = self.rects[i-1]\\n        dx, dy = delta % (x2-x1+1), delta // (x2-x1+1) \\n        return (x1 + dx, y1 + dy)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom itertools import accumulate\\nfrom random import randint\\nfrom bisect import bisect_left\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.acc = list(accumulate([ (x2-x1+1)*(y2-y1+1) for x1, y1, x2, y2 in rects ], initial = 0))\\n\\n    def pick(self) -> List[int]:\\n        r = randint(1, self.acc[-1])\\n        i = bisect_left(self.acc, r)\\n        delta = r - self.acc[i-1] - 1\\n        x1, y1, x2, y2 = self.rects[i-1]\\n        dx, dy = delta % (x2-x1+1), delta // (x2-x1+1) \\n        return (x1 + dx, y1 + dy)",
                "codeTag": "Java"
            },
            {
                "id": 2418036,
                "title": "help-why-no-working-for-the-last-3-case-resolved-count-the-total-pts-inside-each-rec-not-area",
                "content": "Now I understand. In order to solve this problem, we assume that the proportion is on the number of total points each rectangle not the area.\\nThe difference is as follows\\nAssume the rectangle is [x1, y1, x2, y2] where (x1,y1) the bottom left corner and (x2,y2) the top right corner\\nThe area of the rectangle is (x2 - x1) * (y2 - y1) while the total points are (x2 - x1 + 1) * (y2 - y1 + 1)\\n\\n\\n```\\nfrom bisect import bisect_left\\nfrom random import randint\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.res = []\\n        self.tot = 0\\n        self.dic = {}\\n        for a, b, c, d in rects:\\n            area = (c - a + 1) * (d - b + 1)\\n            self.tot += area\\n            self.res.append(self.tot)\\n            self.dic[self.tot] = [a, b, c, d]\\n\\n    def pick(self) -> List[int]:\\n        random = randint(1, self.tot)\\n        idx = bisect_left(self.res, random)\\n        a, b, c, d = self.dic[self.res[idx]]\\n        return [randint(a, c), randint(b, d)]\\n\\n\\n```\\n------------------------------------------------------------------------\\n\\nI did the picking proportionally to the area. I tried several ways. One way is by randint, oneway is using choices with weight function of individual weight. None is working...Please help!\\n\\n\"\"\"\\nfrom bisect import bisect\\nfrom random import randint\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.x = [[a, c] for a,b,c,d in rects]\\n        self.y = [[b, d] for a,b,c,d in rects]\\n        sa, self.area = 0, []\\n        for a,b,c,d in rects:\\n            sa +=  (d -b) * (c - a)\\n            self.area.append(sa)\\n        \\n\\n    def pick(self) -> List[int]:\\n        idx = bisect(self.area, randint(1, self.area[-1])) - 1\\n        x1,x2 = self.x[idx]\\n        y1,y2 = self.y[idx]\\n        return randint(x1, x2), randint(y1,y2)\\n\"\"\"\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom bisect import bisect_left\\nfrom random import randint\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.res = []\\n        self.tot = 0\\n        self.dic = {}\\n        for a, b, c, d in rects:\\n            area = (c - a + 1) * (d - b + 1)\\n            self.tot += area\\n            self.res.append(self.tot)\\n            self.dic[self.tot] = [a, b, c, d]\\n\\n    def pick(self) -> List[int]:\\n        random = randint(1, self.tot)\\n        idx = bisect_left(self.res, random)\\n        a, b, c, d = self.dic[self.res[idx]]\\n        return [randint(a, c), randint(b, d)]\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1732412,
                "title": "java-100-solution",
                "content": "~~~java\\n\\nclass Solution {\\n    // 1. pick a rect\\n    // 2. pick a point inside this rect\\n    int[][] rects;\\n    int[] prefixWeights;\\n    Random rd;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        this.prefixWeights = new int[rects.length];\\n        this.rd = new Random();\\n        \\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            int width = rect[2] - rect[0] + 1;\\n            int height = rect[3] - rect[1] + 1;\\n            prefixWeights[i] = (i == 0 ? 0 : prefixWeights[i - 1]) + width * height;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int rdWeight = rd.nextInt(prefixWeights[prefixWeights.length - 1]);\\n        int rectIdx = findFirstGreater(rdWeight);\\n        int[] rect = rects[rectIdx];\\n        \\n        int width = rect[2] - rect[0] + 1;\\n        int height = rect[3] - rect[1] + 1;\\n        int total = width * height;\\n        int rdPoint = rd.nextInt(total);\\n        return new int[]{\\n            rect[0] + rdPoint % width,\\n            rect[1] + rdPoint / width\\n        };\\n    }\\n    \\n    private int findFirstGreater(int target) {\\n        int l = 0, r = prefixWeights.length - 1;\\n        while (l < r - 1) {\\n            int mid = l + (r - l) / 2;\\n            if (prefixWeights[mid] <= target) {\\n                l = mid + 1;\\n            } else {\\n                r = mid;\\n            }\\n        }\\n        return prefixWeights[l] > target ? l : r;\\n    }\\n}\\n\\n\\n~~~",
                "solutionTags": [],
                "code": "class Solution {\\n    // 1. pick a rect\\n    // 2. pick a point inside this rect\\n    int[][] rects;\\n    int[] prefixWeights;\\n    Random rd;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        this.prefixWeights = new int[rects.length];\\n        this.rd = new Random();\\n        \\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            int width = rect[2] - rect[0] + 1;\\n            int height = rect[3] - rect[1] + 1;\\n            prefixWeights[i] = (i == 0 ? 0 : prefixWeights[i - 1]) + width * height;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1673969,
                "title": "why-using-one-rand-failed-3-out-of-35-test-cases-while-using-3-rand-passed-all",
                "content": "Following is the version of using one rand() per pick, and it failed 3 test cases.\\n```\\nclass Solution {\\npublic:\\n    vector<int> prefix_sum;\\n    vector<vector<int>> rects_vec;\\n    int total = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        int cur = 0;\\n        for (int i = 0; i < rects.size(); ++i) {\\n            cur += (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            prefix_sum.push_back(cur);\\n        }\\n        rects_vec = rects;\\n        total = cur;\\n    }\\n    \\n    vector<int> pick() {\\n        int l = 0, r = prefix_sum.size() - 1, mid = 0;\\n        int rand_num = rand();\\n        int target = (rand_num % total) + 1;\\n\\t\\t\\n        while (l <= r) {\\n            mid = l + (r - l) / 2;\\n            if (prefix_sum[mid] < target) l = mid + 1;\\n            else r = mid - 1;\\n        }\\n \\n        return {rand_num % (rects_vec[l][2] - rects_vec[l][0] + 1) + rects_vec[l][0],\\n                rand_num % (rects_vec[l][3] - rects_vec[l][1] + 1) + rects_vec[l][1]};\\n    }\\n};\\n```\\n\\nThen I changed rand_num to rand(), it passes all the test cases, what could be the reason??? Really confused\\n```\\nclass Solution {\\npublic:\\n    vector<int> prefix_sum;\\n    vector<vector<int>> rects_vec;\\n    int total = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        int cur = 0;\\n        for (int i = 0; i < rects.size(); ++i) {\\n            cur += (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            prefix_sum.push_back(cur);\\n        }\\n        rects_vec = rects;\\n        total = cur;\\n    }\\n    \\n    vector<int> pick() {\\n        int l = 0, r = prefix_sum.size() - 1, mid = 0;\\n        int rand_num = rand();\\n        int target = (rand_num % total) + 1;\\n        \\n        while (l <= r) {\\n            mid = l + (r - l) / 2;\\n            if (prefix_sum[mid] < target) l = mid + 1;\\n            else r = mid - 1;\\n        }\\n \\n        return {rand() % (rects_vec[l][2] - rects_vec[l][0] + 1) + rects_vec[l][0],\\n                rand() % (rects_vec[l][3] - rects_vec[l][1] + 1) + rects_vec[l][1]};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> prefix_sum;\\n    vector<vector<int>> rects_vec;\\n    int total = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        int cur = 0;\\n        for (int i = 0; i < rects.size(); ++i) {\\n            cur += (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            prefix_sum.push_back(cur);\\n        }\\n        rects_vec = rects;\\n        total = cur;\\n    }\\n    \\n    vector<int> pick() {\\n        int l = 0, r = prefix_sum.size() - 1, mid = 0;\\n        int rand_num = rand();\\n        int target = (rand_num % total) + 1;\\n\\t\\t\\n        while (l <= r) {\\n            mid = l + (r - l) / 2;\\n            if (prefix_sum[mid] < target) l = mid + 1;\\n            else r = mid - 1;\\n        }\\n \\n        return {rand_num % (rects_vec[l][2] - rects_vec[l][0] + 1) + rects_vec[l][0],\\n                rand_num % (rects_vec[l][3] - rects_vec[l][1] + 1) + rects_vec[l][1]};\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> prefix_sum;\\n    vector<vector<int>> rects_vec;\\n    int total = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        int cur = 0;\\n        for (int i = 0; i < rects.size(); ++i) {\\n            cur += (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            prefix_sum.push_back(cur);\\n        }\\n        rects_vec = rects;\\n        total = cur;\\n    }\\n    \\n    vector<int> pick() {\\n        int l = 0, r = prefix_sum.size() - 1, mid = 0;\\n        int rand_num = rand();\\n        int target = (rand_num % total) + 1;\\n        \\n        while (l <= r) {\\n            mid = l + (r - l) / 2;\\n            if (prefix_sum[mid] < target) l = mid + 1;\\n            else r = mid - 1;\\n        }\\n \\n        return {rand() % (rects_vec[l][2] - rects_vec[l][0] + 1) + rects_vec[l][0],\\n                rand() % (rects_vec[l][3] - rects_vec[l][1] + 1) + rects_vec[l][1]};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1453111,
                "title": "python-binary-search",
                "content": "```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.search_space = []\\n\\n        for i, rect in enumerate(rects):\\n            a, b, c, d = rect\\n            self.search_space.append((d - b + 1) * (c - a + 1))\\n            if i != 0:\\n                self.search_space[i] += self.search_space[i - 1]\\n      \\n\\n    def pick(self) -> List[int]:\\n        randval = random.randint(0, self.search_space[-1] - 1)\\n\\n        low = 0\\n        high = len(self.search_space) - 1\\n\\n        while low < high:\\n            midpt = low + (high - low) // 2\\n\\n            if self.search_space[midpt] <= randval:\\n                low = midpt + 1\\n            else:\\n                high = midpt\\n\\n\\n        rect = self.rects[low]\\n        rect_range = randval\\n\\n        if low > 0:\\n            rect_range -= self.search_space[low - 1] \\n\\n\\n        a, b, c, d = rect\\n\\n        return [(rect_range % (c - a + 1)) + a, (rect_range // (c - a + 1)) + b]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.search_space = []\\n\\n        for i, rect in enumerate(rects):\\n            a, b, c, d = rect\\n            self.search_space.append((d - b + 1) * (c - a + 1))\\n            if i != 0:\\n                self.search_space[i] += self.search_space[i - 1]\\n      \\n\\n    def pick(self) -> List[int]:\\n        randval = random.randint(0, self.search_space[-1] - 1)\\n\\n        low = 0\\n        high = len(self.search_space) - 1\\n\\n        while low < high:\\n            midpt = low + (high - low) // 2\\n\\n            if self.search_space[midpt] <= randval:\\n                low = midpt + 1\\n            else:\\n                high = midpt\\n\\n\\n        rect = self.rects[low]\\n        rect_range = randval\\n\\n        if low > 0:\\n            rect_range -= self.search_space[low - 1] \\n\\n\\n        a, b, c, d = rect\\n\\n        return [(rect_range % (c - a + 1)) + a, (rect_range // (c - a + 1)) + b]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1307076,
                "title": "python-using-choices-with-weight",
                "content": "```\\nimport random\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.weights = []\\n        for i, r in enumerate(self.rects):\\n            x1, y1, x2, y2 = r\\n            self.weights.append((x2-x1+1)*(y2-y1+1))\\n    def pick(self) -> List[int]:\\n        points = []\\n        for i, r in enumerate(self.rects):\\n            x1, y1, x2, y2 = r\\n            x, y = random.randint(x1, x2), random.randint(y1, y2)\\n            points.append((x,y))\\n        # using weights is the weight the possibility based on area of each rect\\n        # bigger area will get higher chance\\n        return random.choices(points, weights=self.weights, cum_weights=None, k=1)[0]\\n```",
                "solutionTags": [],
                "code": "```\\nimport random\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.weights = []\\n        for i, r in enumerate(self.rects):\\n            x1, y1, x2, y2 = r\\n            self.weights.append((x2-x1+1)*(y2-y1+1))\\n    def pick(self) -> List[int]:\\n        points = []\\n        for i, r in enumerate(self.rects):\\n            x1, y1, x2, y2 = r\\n            x, y = random.randint(x1, x2), random.randint(y1, y2)\\n            points.append((x,y))\\n        # using weights is the weight the possibility based on area of each rect\\n        # bigger area will get higher chance\\n        return random.choices(points, weights=self.weights, cum_weights=None, k=1)[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 997629,
                "title": "c-solution-using-binary-search-with-explanation",
                "content": "```\\nclass Solution {\\n    //concept is simple\\n    //we need to pick the coordinates from the rectangle space\\n    //for that we will use rand() function to find out randomly any rectangle\\n    //but to which we will apply rand()\\n    //that should be cumulative sum of areas why?? because we can\\'t use area of any rect that\\'s not unique but cumulative sum is unique\\n    //area of any rectangle can be given by (x[2]-x[0]+1) * (x[3]-x[1]+1)\\n    //we will store this inside a rectangle to store the cumulative sum for each rectange\\nprivate:\\n    vector<vector<int>> rects;\\n    vector<pair<int,int>> sums;\\n    int sum = 0;\\n    \\n    //returns index of random sum if found returns that index else returns lowerBound(index with value not lesser than randomSum)\\n    int findIndexOfRandomSum(int randomSum) {\\n        int lowerBound = 0, upperBound = sums.size() - 1;\\n        while(lowerBound <= upperBound) {\\n            int middle = lowerBound + (upperBound - lowerBound)/2;\\n            int sumValue = sums[middle].first;\\n            if(sumValue > randomSum) {\\n                upperBound = middle - 1;\\n            } else if(sumValue < randomSum) {\\n                lowerBound = middle + 1;    \\n            } else {\\n                return middle;\\n            }   \\n        }\\n        return lowerBound;     \\n    }\\n    \\npublic:\\n    Solution(vector<vector<int>>& rects) {\\n        int size = rects.size();\\n        this->rects = rects;\\n        for(int i = 0; i < size; i++) {\\n            int x1 = rects[i][0], x2 = rects[i][2], y1 = rects[i][1], y2 = rects[i][3];\\n            sum += ((x2-x1+1)*(y2-y1+1));\\n            sums.push_back(make_pair(sum, i));\\n        }    \\n    }\\n    \\n    vector<int> pick() {\\n        int randomSum = rand()%(sum) + 1; //gives random value from 0 to sum inclusive all\\n        int index = findIndexOfRandomSum(randomSum);\\n        int x1 = rects[index][0], x2 = rects[index][2], y1 = rects[index][1], y2 = rects[index][3];\\n        vector<int> result;\\n        result.push_back(x1 + rand()%(x2-x1+1));\\n        result.push_back(y1+rand()%(y2-y1+1));\\n        return result;     \\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    //concept is simple\\n    //we need to pick the coordinates from the rectangle space\\n    //for that we will use rand() function to find out randomly any rectangle\\n    //but to which we will apply rand()\\n    //that should be cumulative sum of areas why?? because we can\\'t use area of any rect that\\'s not unique but cumulative sum is unique\\n    //area of any rectangle can be given by (x[2]-x[0]+1) * (x[3]-x[1]+1)\\n    //we will store this inside a rectangle to store the cumulative sum for each rectange\\nprivate:\\n    vector<vector<int>> rects;\\n    vector<pair<int,int>> sums;\\n    int sum = 0;\\n    \\n    //returns index of random sum if found returns that index else returns lowerBound(index with value not lesser than randomSum)\\n    int findIndexOfRandomSum(int randomSum) {\\n        int lowerBound = 0, upperBound = sums.size() - 1;\\n        while(lowerBound <= upperBound) {\\n            int middle = lowerBound + (upperBound - lowerBound)/2;\\n            int sumValue = sums[middle].first;\\n            if(sumValue > randomSum) {\\n                upperBound = middle - 1;\\n            } else if(sumValue < randomSum) {\\n                lowerBound = middle + 1;    \\n            } else {\\n                return middle;\\n            }   \\n        }\\n        return lowerBound;     \\n    }\\n    \\npublic:\\n    Solution(vector<vector<int>>& rects) {\\n        int size = rects.size();\\n        this->rects = rects;\\n        for(int i = 0; i < size; i++) {\\n            int x1 = rects[i][0], x2 = rects[i][2], y1 = rects[i][1], y2 = rects[i][3];\\n            sum += ((x2-x1+1)*(y2-y1+1));\\n            sums.push_back(make_pair(sum, i));\\n        }    \\n    }\\n    \\n    vector<int> pick() {\\n        int randomSum = rand()%(sum) + 1; //gives random value from 0 to sum inclusive all\\n        int index = findIndexOfRandomSum(randomSum);\\n        int x1 = rects[index][0], x2 = rects[index][2], y1 = rects[index][1], y2 = rects[index][3];\\n        vector<int> result;\\n        result.push_back(x1 + rand()%(x2-x1+1));\\n        result.push_back(y1+rand()%(y2-y1+1));\\n        return result;     \\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 863189,
                "title": "java-solution-explained-using-array",
                "content": "class Solution {\\n\\n    int arr[];\\n    Random rand;\\n    int cumulativeSum;\\n    int rectangles[][];\\n    public Solution(int[][] rects) {\\n        rectangles = rects;\\n        rand = new Random();\\n        int n = rects.length;\\n        arr = new int[n];\\n        cumulativeSum = 0;\\n        for(int i=0;i<n;i++) {\\n            int each[] = rects[i];\\n\\t\\t\\t// finding the number of points within this rectangle \\n            int curPoints = (each[2] - each[0] + 1) * (each[3] - each[1] + 1);\\n\\t\\t\\t\\n\\t\\t\\t// It will be easier to select index if we maintain cumulative probabilities.\\n\\t\\t\\t// Because binary search works on sorted array. \\n\\t\\t\\t// If we maintain only curPoints, then we need to sort that array. Then it takes a lot of time.\\n\\t\\t\\t// If we maintain cumulative curPoints then it will always be in sorted manner and then difference between two adjacent curPoints is more, then then there are more chances to get that index.\\n            cumulativeSum += curPoints;\\n            arr[i] = cumulativeSum;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n\\t\\n\\t\\t// Finding random integer between [1, cumulativeSum]\\n        int randSum = rand.nextInt(cumulativeSum + 1);\\n        \\n        int l = 0;\\n        int r = arr.length;\\n        \\n\\t\\t// Picking the upper bound\\n        while(l < r) {\\n            int m = l + (r-l)/2;\\n            \\n            if(arr[m] > randSum)\\n                r = m;\\n            else\\n                l = m+1;\\n        }\\n        \\n        int pickedRect[] = l < arr.length ? rectangles[l]: rectangles[l-1];\\n        \\n        int bl = pickedRect[0];\\n        int br = pickedRect[1];\\n        int tl = pickedRect[2];\\n        int tr = pickedRect[3];\\n        \\n\\t\\t// Picking the random point within the chosen rectangle\\n\\t\\t// We need to choose a point , let it be (x, y)\\n\\t\\t// x can run from pickedRect[0] to pickedRect[2]\\n\\t\\t// y can run from pickedRect[1] to pickedRect[3]\\n        return new int[]{bl + rand.nextInt(tl-bl+1), br + rand.nextInt(tr-br+1)};\\n        \\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\n    int arr[];\\n    Random rand;\\n    int cumulativeSum;\\n    int rectangles[][];\\n    public Solution(int[][] rects) {\\n        rectangles = rects;\\n        rand = new Random();\\n        int n = rects.length;\\n        arr = new int[n];\\n        cumulativeSum = 0;\\n        for(int i=0;i<n;i++) {\\n            int each[] = rects[i];\\n\\t\\t\\t// finding the number of points within this rectangle \\n            int curPoints = (each[2] - each[0] + 1) * (each[3] - each[1] + 1);\\n\\t\\t\\t\\n\\t\\t\\t// It will be easier to select index if we maintain cumulative probabilities.\\n\\t\\t\\t// Because binary search works on sorted array. \\n\\t\\t\\t// If we maintain only curPoints, then we need to sort that array. Then it takes a lot of time.\\n\\t\\t\\t// If we maintain cumulative curPoints then it will always be in sorted manner and then difference between two adjacent curPoints is more, then then there are more chances to get that index.\\n            cumulativeSum += curPoints;\\n            arr[i] = cumulativeSum;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 855594,
                "title": "go",
                "content": "```\\ntype Solution struct {\\n    list []rec\\n    sum int\\n}\\n\\ntype rec struct {\\n    bottomleft [2]int\\n    l int\\n    w int\\n    prefixPoints int\\n}\\n\\nfunc Constructor(rects [][]int) Solution {\\n    list := make([]rec, len(rects))\\n    sum := 0\\n    for i, v := range rects {\\n        a, b := v[2] - v[0] + 1, v[3] - v[1] + 1\\n        list[i] = rec{bottomleft: [2]int{v[0], v[1]},\\n                      l: a,\\n                      w: b,\\n                      prefixPoints: sum + a * b}\\n        sum += a * b\\n    }\\n    return Solution{list: list,\\n                    sum: sum}\\n}\\n\\n\\nfunc (this *Solution) Pick() []int {\\n    tar := rand.Intn(this.sum + 1)\\n    index := sort.Search(len(this.list), func(i int) bool {\\n        return this.list[i].prefixPoints >= tar\\n    })\\n    l := this.list[index].l\\n    w := this.list[index].w\\n    return []int{rand.Intn(l) + this.list[index].bottomleft[0], \\n                rand.Intn(w) + this.list[index].bottomleft[1],\\n                }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ntype Solution struct {\\n    list []rec\\n    sum int\\n}\\n\\ntype rec struct {\\n    bottomleft [2]int\\n    l int\\n    w int\\n    prefixPoints int\\n}\\n\\nfunc Constructor(rects [][]int) Solution {\\n    list := make([]rec, len(rects))\\n    sum := 0\\n    for i, v := range rects {\\n        a, b := v[2] - v[0] + 1, v[3] - v[1] + 1\\n        list[i] = rec{bottomleft: [2]int{v[0], v[1]},\\n                      l: a,\\n                      w: b,\\n                      prefixPoints: sum + a * b}\\n        sum += a * b\\n    }\\n    return Solution{list: list,\\n                    sum: sum}\\n}\\n\\n\\nfunc (this *Solution) Pick() []int {\\n    tar := rand.Intn(this.sum + 1)\\n    index := sort.Search(len(this.list), func(i int) bool {\\n        return this.list[i].prefixPoints >= tar\\n    })\\n    l := this.list[index].l\\n    w := this.list[index].w\\n    return []int{rand.Intn(l) + this.list[index].bottomleft[0], \\n                rand.Intn(w) + this.list[index].bottomleft[1],\\n                }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 845264,
                "title": "python-3-prefix-sum-binary-search-explanation",
                "content": "* Since the question asks us to sample a random point in the available space marked out by the rectangles **with a uniform probability**, we need to weight our choice of which rectangle to pick a random point from by its area.\\n\\t* Therefore this question can be reduced to a weighted probability selection question.\\n\\t* I.e. A bigger rectangle (in terms of area) should be proportionately more likely to be selected than a smaller one.\\n* For readability you can delegate methods to do with rectangles into a `Rectangle` class.\\n* We use a `prefixAreaSum` array that is just a prefix sum array of all rectangles\\' areas.\\n\\t* We will use this `prefixAreaSum` array as a way of choosing a specific rectangle to sample a random point from.\\n* We can weight our selection of rectangles by area by:\\n\\t1. Selecting a random number between 0 and the `totalAreaSum`.\\n\\t2. Searching for the nearest index that has that random number (using binary search, `bisect` in Python).\\n\\t3. Getting the rectangle corresponding to the index in the `prefixAreaSum` array and getting a random point from it.\\n```\\nfrom typing import Tuple\\nfrom random import randint\\nfrom bisect import bisect\\n\\nclass Rectangle:\\n    \\n    def __init__(self, x1: int, y1: int, x2: int, y2: int):\\n        self.x1 = x1\\n        self.y1 = y1\\n        self.x2 = x2\\n        self.y2 = y2\\n\\n    def getRandomPoint(self) -> Tuple[int, int]:\\n        return (randint(self.x1, self.x2), randint(self.y1, self.y2))\\n    \\n    def getArea(self) -> int:\\n        return (self.x2 - self.x1 + 1) * (self.y2 - self.y1 + 1)\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rectangles = [Rectangle(x1, y1, x2, y2) for x1, y1, x2, y2 in rects]\\n\\n        currentAreaSum = 0\\n        self.prefixAreaSum = []\\n        for rectangle in self.rectangles:\\n            currentAreaSum += rectangle.getArea()\\n            self.prefixAreaSum.append(currentAreaSum)\\n            \\n        self.totalAreaSum = self.prefixAreaSum[-1]\\n            \\n            \\n    def pick(self) -> List[int]:\\n        index = bisect(self.prefixAreaSum, randint(0, self.totalAreaSum))\\n        return self.rectangles[min(index, len(self.prefixAreaSum) - 1)].getRandomPoint()\\n```",
                "solutionTags": [],
                "code": "```\\nfrom typing import Tuple\\nfrom random import randint\\nfrom bisect import bisect\\n\\nclass Rectangle:\\n    \\n    def __init__(self, x1: int, y1: int, x2: int, y2: int):\\n        self.x1 = x1\\n        self.y1 = y1\\n        self.x2 = x2\\n        self.y2 = y2\\n\\n    def getRandomPoint(self) -> Tuple[int, int]:\\n        return (randint(self.x1, self.x2), randint(self.y1, self.y2))\\n    \\n    def getArea(self) -> int:\\n        return (self.x2 - self.x1 + 1) * (self.y2 - self.y1 + 1)\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rectangles = [Rectangle(x1, y1, x2, y2) for x1, y1, x2, y2 in rects]\\n\\n        currentAreaSum = 0\\n        self.prefixAreaSum = []\\n        for rectangle in self.rectangles:\\n            currentAreaSum += rectangle.getArea()\\n            self.prefixAreaSum.append(currentAreaSum)\\n            \\n        self.totalAreaSum = self.prefixAreaSum[-1]\\n            \\n            \\n    def pick(self) -> List[int]:\\n        index = bisect(self.prefixAreaSum, randint(0, self.totalAreaSum))\\n        return self.rectangles[min(index, len(self.prefixAreaSum) - 1)].getRandomPoint()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 821639,
                "title": "delete-node-in-a-bst-solution-c",
                "content": "class Solution {\\npublic:\\n    TreeNode* getSuccesor(TreeNode* curr){\\n        curr=curr->right;\\n        while(curr!=NULL && curr->left!=NULL){\\n            curr = curr->left;\\n        }\\n        return curr;\\n    }\\n    \\n    TreeNode* deleteNode(TreeNode* root, int key) {\\n        if(root==NULL){\\n            return root;\\n        }\\n        \\n        if(root->val>key){\\n            root->left = deleteNode(root->left,key);\\n        }\\n        else if(root->val<key){\\n            root->right = deleteNode(root->right,key);\\n        }\\n        else{\\n            if(root->left==NULL){\\n                TreeNode* temp = root->right;\\n                delete root;\\n                return temp;\\n            }\\n            else if(root->right==NULL){\\n                TreeNode* temp = root->left;\\n                delete root;\\n                return temp;\\n            }\\n            else{\\n                TreeNode* succ = getSuccesor(root);\\n                root->val = succ->val;\\n                root->right = deleteNode(root->right,succ->val);\\n            }\\n            \\n        }\\n        return root;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    TreeNode* getSuccesor(TreeNode* curr){\\n        curr=curr->right;\\n        while(curr!=NULL && curr->left!=NULL){\\n            curr = curr->left;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 816956,
                "title": "why-is-my-solution-false-for-rand10",
                "content": "So here I roll rand7() until i get an integer in a 1 to 5 range\\n\\nthen I roll again between a range of 1 to 6. if the number is between 1-3 we return the pick and if it\\'s between 4-6 we double the result\\n\\nTo me each number have equal chances to get picked, enlight me please\\n\\n```\\nclass Solution:\\n    def rand10(self):\\n        \"\"\"\\n        :rtype: int\\n        \"\"\"\\n        pick = 10\\n        while pick > 5:\\n            pick = rand7()\\n        double = 10\\n\\t\\twhile double > 6:\\n\\t\\t\\tdouble = rand7()\\n        if double > 3:\\n            return pick * 2\\n        return pick\\n    \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def rand10(self):\\n        \"\"\"\\n        :rtype: int\\n        \"\"\"\\n        pick = 10\\n        while pick > 5:\\n            pick = rand7()\\n        double = 10\\n\\t\\twhile double > 6:\\n\\t\\t\\tdouble = rand7()\\n        if double > 3:\\n            return pick * 2\\n        return pick\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 816458,
                "title": "rand10-c-very-simple",
                "content": "```\\nstatic int num = INT_MAX;\\nclass Solution {\\npublic:\\n    int rand10() {\\n        num = num - 7;\\n        return (num + rand7()) % 10 + 1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nstatic int num = INT_MAX;\\nclass Solution {\\npublic:\\n    int rand10() {\\n        num = num - 7;\\n        return (num + rand7()) % 10 + 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 814534,
                "title": "minimum-cost-for-tickets",
                "content": "Let OPT(i, j) is the minimum cost you need to spend to travel from day i-th to day j-th.\\nWe have 3 options to buy ticket at a day:\\n* Buy 1-day pass with the price costs[0]\\n* Buy 7-day pass with the price costs[1]\\n* Buy 30-day pass with the price costs[2]\\n\\nTherefore, we can set a target function as follow:\\n```\\nOPT(i, j) = min(costs[0] + OPT(i+1, j), \\n                costs[1] + OPT(i+7, j), \\n                costs[2] + OPT(i+30, j))\\n```\\n\\nFrom this target function, we can easily to write python code as\\n\\n```\\nimport bisect\\nimport functools\\nclass Solution:\\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\\n        def find_next_day(start: int, no_of_days: int) -> int:\\n            next_idx = bisect.bisect_left(days, days[start] + no_of_days)\\n        \\n            # print (f\\'{next_idx} {days}\\')\\n        \\n            if next_idx < len(days):\\n                while next_idx - 1 >= 0 and days[next_idx] == days[next_idx - 1]:\\n                    next_idx -= 1\\n        \\n            next_days = next_idx if next_idx < len(days) else -1\\n            \\n            return next_days\\n        \\n        @functools.lru_cache(maxsize=None)\\n        def solve(start: int) -> int:\\n            if start < 0 or start >= len(days):\\n                return 0\\n        \\n            one_day = costs[0] + solve(start + 1 if start + 1 < len(days) else -1)\\n        \\n            next_days = find_next_day(start, 7)\\n        \\n            seven_days = costs[1] + solve(next_days) \\n        \\n            next_days = find_next_day(start, 30)\\n        \\n            thiry_days = costs[2] + solve(next_days) \\n        \\n            return min(one_day, seven_days, thiry_days)\\n        \\n        return solve(0)\\n```",
                "solutionTags": [
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```\\nOPT(i, j) = min(costs[0] + OPT(i+1, j), \\n                costs[1] + OPT(i+7, j), \\n                costs[2] + OPT(i+30, j))\\n```\n```\\nimport bisect\\nimport functools\\nclass Solution:\\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\\n        def find_next_day(start: int, no_of_days: int) -> int:\\n            next_idx = bisect.bisect_left(days, days[start] + no_of_days)\\n        \\n            # print (f\\'{next_idx} {days}\\')\\n        \\n            if next_idx < len(days):\\n                while next_idx - 1 >= 0 and days[next_idx] == days[next_idx - 1]:\\n                    next_idx -= 1\\n        \\n            next_days = next_idx if next_idx < len(days) else -1\\n            \\n            return next_days\\n        \\n        @functools.lru_cache(maxsize=None)\\n        def solve(start: int) -> int:\\n            if start < 0 or start >= len(days):\\n                return 0\\n        \\n            one_day = costs[0] + solve(start + 1 if start + 1 < len(days) else -1)\\n        \\n            next_days = find_next_day(start, 7)\\n        \\n            seven_days = costs[1] + solve(next_days) \\n        \\n            next_days = find_next_day(start, 30)\\n        \\n            thiry_days = costs[2] + solve(next_days) \\n        \\n            return min(one_day, seven_days, thiry_days)\\n        \\n        return solve(0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 812789,
                "title": "python-ac-smart-fizzbuzz",
                "content": "```\\nclass Solution:\\n    def fizzBuzz(self, n: int) -> List[str]:\\n        ans = []\\n        for i in range(1,n+1):\\n            temp = \\'Fizz\\' * (i%3 < 1) + \\'Buzz\\' * (i%5 < 1)\\n            if temp == \"\":\\n                ans.append(str(i))\\n            else:\\n                ans.append(temp)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def fizzBuzz(self, n: int) -> List[str]:\\n        ans = []\\n        for i in range(1,n+1):\\n            temp = \\'Fizz\\' * (i%3 < 1) + \\'Buzz\\' * (i%5 < 1)\\n            if temp == \"\":\\n                ans.append(str(i))\\n            else:\\n                ans.append(temp)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 812322,
                "title": "fizz-buzz-beats-98-runtime-98-memory-c",
                "content": "Solution itself is quite trivial. Do not forget, that resizing vector slows down the runtime.\\n```\\nclass Solution {\\npublic:\\n    vector<string> fizzBuzz(int n) {\\n        std::vector<std::string> res(n);\\n        for(int i = 1; i <= n; ++i) {\\n            if (i % 15 == 0) {\\n                res[i - 1] = \"FizzBuzz\";\\n            } else if (i % 3 == 0) {\\n                res[i - 1] = \"Fizz\";\\n            } else if (i % 5 == 0) {\\n                res[i - 1] = \"Buzz\";\\n            } else {\\n                res[i - 1] = to_string(i);\\n            }\\n        }\\n        return(res);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<string> fizzBuzz(int n) {\\n        std::vector<std::string> res(n);\\n        for(int i = 1; i <= n; ++i) {\\n            if (i % 15 == 0) {\\n                res[i - 1] = \"FizzBuzz\";\\n            } else if (i % 3 == 0) {\\n                res[i - 1] = \"Fizz\";\\n            } else if (i % 5 == 0) {\\n                res[i - 1] = \"Buzz\";\\n            } else {\\n                res[i - 1] = to_string(i);\\n            }\\n        }\\n        return(res);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 810862,
                "title": "minimum-cost-for-tickets-dynamic-programming-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\\n        set<int> dd(days.begin(),days.end());\\n        int cost[366];\\n        memset(cost,0,sizeof(cost));\\n        int one=costs[0], seven=costs[1], thirty=costs[2];\\n        for(int i=1;i<=365;i++){\\n            cost[i] = cost[i-1];\\n            if(dd.find(i)!= dd.end()){\\n                cost[i] = min(cost[max(0,i-1)]+one, min(cost[max(0,i-7)]+seven, cost[max(0,i-30)]+thirty));\\n            }\\n        }\\n        return cost[365];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\\n        set<int> dd(days.begin(),days.end());\\n        int cost[366];\\n        memset(cost,0,sizeof(cost));\\n        int one=costs[0], seven=costs[1], thirty=costs[2];\\n        for(int i=1;i<=365;i++){\\n            cost[i] = cost[i-1];\\n            if(dd.find(i)!= dd.end()){\\n                cost[i] = min(cost[max(0,i-1)]+one, min(cost[max(0,i-7)]+seven, cost[max(0,i-30)]+thirty));\\n            }\\n        }\\n        return cost[365];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 807184,
                "title": "java-solution-with-explanation",
                "content": "```\\nclass Solution {\\n    Random random;\\n    TreeMap<Integer,int[]> map;\\n    int areaSum = 0;\\n    public Solution(int[][] rects) {\\n        random = new Random();\\n        map = new TreeMap<>();\\n        \\n        for(int i = 0; i < rects.length; i++){\\n            int[] rectangleCoordinates = rects[i];\\n            int length = rectangleCoordinates[2] - rectangleCoordinates[0] + 1;\\n            int breadth = rectangleCoordinates[3] - rectangleCoordinates[1] + 1;\\n            \\n            areaSum += length * breadth;\\n            \\n            map.put(areaSum,rectangleCoordinates);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        //random.nextInt gives a int in the range of 0 to areaSum and ceilingKey returns a key greater than or equal to the argument passed\\n        //to it.\\n        int key = map.ceilingKey(random.nextInt(areaSum) + 1);\\n        int[] rectangle = map.get(key);\\n        \\n        int length = rectangle[2] - rectangle[0] + 1;\\n        int breadth = rectangle[3] - rectangle[1] + 1;\\n        \\n        //length denotes the no of x coordinates we can have.\\n        //breadth denotes the no of y coordinates we can have\\n        \\n        //random.nextInt gives a random value from x1 - x2-1 which we can add to the current x and we can have a valid x .\\n        //random.nextInt gives a random value from y1 - y2-1 which we can add to the current y and we can have a valid y .\\n        \\n        int x = rectangle[0] + random.nextInt(length);\\n        int y = rectangle[1] + random.nextInt(breadth);\\n        \\n        return new int[]{x,y};\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    Random random;\\n    TreeMap<Integer,int[]> map;\\n    int areaSum = 0;\\n    public Solution(int[][] rects) {\\n        random = new Random();\\n        map = new TreeMap<>();\\n        \\n        for(int i = 0; i < rects.length; i++){\\n            int[] rectangleCoordinates = rects[i];\\n            int length = rectangleCoordinates[2] - rectangleCoordinates[0] + 1;\\n            int breadth = rectangleCoordinates[3] - rectangleCoordinates[1] + 1;\\n            \\n            areaSum += length * breadth;\\n            \\n            map.put(areaSum,rectangleCoordinates);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        //random.nextInt gives a int in the range of 0 to areaSum and ceilingKey returns a key greater than or equal to the argument passed\\n        //to it.\\n        int key = map.ceilingKey(random.nextInt(areaSum) + 1);\\n        int[] rectangle = map.get(key);\\n        \\n        int length = rectangle[2] - rectangle[0] + 1;\\n        int breadth = rectangle[3] - rectangle[1] + 1;\\n        \\n        //length denotes the no of x coordinates we can have.\\n        //breadth denotes the no of y coordinates we can have\\n        \\n        //random.nextInt gives a random value from x1 - x2-1 which we can add to the current x and we can have a valid x .\\n        //random.nextInt gives a random value from y1 - y2-1 which we can add to the current y and we can have a valid y .\\n        \\n        int x = rectangle[0] + random.nextInt(length);\\n        int y = rectangle[1] + random.nextInt(breadth);\\n        \\n        return new int[]{x,y};\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 807073,
                "title": "c-solution-prefixsum-binary-search",
                "content": "```\\npublic class Solution {\\n\\n    public Random random;\\n    public int[][] rects;\\n    \\n    public int[] areasPrefixSum;\\n    public int areaSum;\\n    \\n    public Solution(int[][] rects) {\\n        \\n        random = new Random();\\n        this.rects = rects;      \\n        areasPrefixSum = new int[rects.Length];\\n        \\n        for(int i = 0; i < rects.Length; i++)\\n        {           \\n            // area: total points can be picked from current rectangle\\n            int area= (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            \\n            // areasPrefixSum[i]: total number of points can be picked from 0-th retangle to i-th retangle\\n            areasPrefixSum[i] = i == 0 ? area: areasPrefixSum[i - 1] + area;\\n        }        \\n        \\n        areaSum = areasPrefixSum[rects.Length - 1];        \\n    }\\n    \\n    public int[] Pick() {\\n        \\n        int target = random.Next(0, areaSum) + 1;         \\n        int rectIndex = BinarySearch(areasPrefixSum, target);\\n\\n        int x = random.Next(rects[rectIndex][0], rects[rectIndex][2] + 1);\\n        int y = random.Next(rects[rectIndex][1], rects[rectIndex][3] + 1);\\n        \\n        return new int[]{x, y};\\n    }\\n    \\n    public int BinarySearch(int[] arr, int target)\\n    {\\n        int left = 0, right = arr.Length - 1;\\n        \\n        while(left <= right)\\n        {\\n            int mid = (right - left) + left / 2;\\n            if(arr[mid] == target)\\n                return mid;\\n            if(arr[mid] > target)\\n                right = mid - 1;\\n            else\\n                left = mid + 1;\\n        }\\n        \\n        return left;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public Random random;\\n    public int[][] rects;\\n    \\n    public int[] areasPrefixSum;\\n    public int areaSum;\\n    \\n    public Solution(int[][] rects) {\\n        \\n        random = new Random();\\n        this.rects = rects;      \\n        areasPrefixSum = new int[rects.Length];\\n        \\n        for(int i = 0; i < rects.Length; i++)\\n        {           \\n            // area: total points can be picked from current rectangle\\n            int area= (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            \\n            // areasPrefixSum[i]: total number of points can be picked from 0-th retangle to i-th retangle\\n            areasPrefixSum[i] = i == 0 ? area: areasPrefixSum[i - 1] + area;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 806669,
                "title": "swift-explanation",
                "content": "**A First Approach**\\nAn initial idea may be to select a rectangle at random then select a random point in that rectangle. However, we want to select a point uniformly at random from the entire space. Selecting a rectangle first, then selecting a point from that rectangle would give rectangles with small areas the same probability as rectangles with larger areas. Instead we need to find a method that gives rectangles with larger areas a higher probability. \\n\\n**A Correct Approach: Initialization**\\nInitialization\\n* We will store the total `area` of all the rectangles \\n* To handle rectangles with `0` width or height we will add `1` to each dimension \\n* We map the cumulative sum of the rectangles to the corresponding rectangle \\n\\nFor example, suppose we have rectangles `A, B, C` with area `2, 4, 8`. Then we would have `area = 14` and we would have \\n``` \\nareas = [2, 6, 14]\\nmap = [\\n 2: A, \\n 6: B, \\n 14: \\n]\\n```\\n\\n**A Correct Approach: Picking a Rectangle**\\n1. Select any point in `0 ... area` and call it `rand`\\n2. Select the first index in `areas` larger than or equal to `rand` \\n3. Select the corresponding rectangle using `map[areas[idx]]`\\n4. Select a random point from that rectangle\\n\\n**Solution**\\n```swift\\nclass Solution {\\n    \\n    // MARK: Properties \\n    \\n    var area = 0 \\n    var areas = [Int]()\\n    var map = [Int: [Int]]() \\n    \\n\\n    // MARK: Initializer \\n    \\n    init(_ rects: [[Int]]) {\\n        for idx in 0 ..< rects.count {\\n            let rect = rects[idx]\\n            area += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)\\n            areas.append(area)\\n            map[area] = rect\\n        }\\n    }\\n    \\n    func pick() -> [Int] {\\n        let rand = Int.random(in: 0 ... area)\\n        \\n        for idx in 0 ..< areas.count {\\n            if rand <= areas[idx] {\\n                let rect = map[areas[idx]]!\\n                return [\\n                    Int.random(in: rect[0] ... rect[2]),\\n                    Int.random(in: rect[1] ... rect[3])\\n                ]\\n            }\\n        }\\n        \\n        return [] \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "``` \\nareas = [2, 6, 14]\\nmap = [\\n 2: A, \\n 6: B, \\n 14: \\n]\\n```\n```swift\\nclass Solution {\\n    \\n    // MARK: Properties \\n    \\n    var area = 0 \\n    var areas = [Int]()\\n    var map = [Int: [Int]]() \\n    \\n\\n    // MARK: Initializer \\n    \\n    init(_ rects: [[Int]]) {\\n        for idx in 0 ..< rects.count {\\n            let rect = rects[idx]\\n            area += (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)\\n            areas.append(area)\\n            map[area] = rect\\n        }\\n    }\\n    \\n    func pick() -> [Int] {\\n        let rand = Int.random(in: 0 ... area)\\n        \\n        for idx in 0 ..< areas.count {\\n            if rand <= areas[idx] {\\n                let rect = map[areas[idx]]!\\n                return [\\n                    Int.random(in: rect[0] ... rect[2]),\\n                    Int.random(in: rect[1] ... rect[3])\\n                ]\\n            }\\n        }\\n        \\n        return [] \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 806342,
                "title": "most-unreadable-1-liner-just-for-fun",
                "content": "```class Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.W = list(itertools.accumulate((x[2]-x[0]+1)*(x[3]-x[1]+1) for x in rects))\\n        self.rects = rects\\n\\n    def pick(self) -> List[int]:\\n        return [(xr:=random.randint)((c := self.rects[(ans := bisect.bisect_left(self.W,xr(0,self.W[-1]) ))])[0],c[2]),xr(c[1],c[3])]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```class Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.W = list(itertools.accumulate((x[2]-x[0]+1)*(x[3]-x[1]+1) for x in rects))\\n        self.rects = rects\\n\\n    def pick(self) -> List[int]:\\n        return [(xr:=random.randint)((c := self.rects[(ans := bisect.bisect_left(self.W,xr(0,self.W[-1]) ))])[0],c[2]),xr(c[1],c[3])]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 806323,
                "title": "clean-straight-forward-java-solution-with-step-wise-explanation",
                "content": "1. Process the input co-ordinates and transform into rectangle objects. Calculate the area of the rectangle and keep a total sum of areas. Use TreeMap to simulate a ranged map where the rectangle occupies a range block proportional to its area. \\n2.  The pick would only be uniform if the solution ensures weighted bias based on the rectange area. In other words, a larger rectangle has more points to pick from compared to a rectangle with smaller area. \\n3.  Use random to pick a number between 1 and total sum of areas. The choice of TreeMap as the map implementation is intentional since it offers the *ceilingKey* function to round up to an end of the range / existent entry in the map. \\n4.  Once a range and its appropriate rectangle is picked, the pick function in the rectangle object returns one valid x,y co-ordinates within the area of the rectangle, including on its perimeter. \\n\\nPlease **up-vote** if you like the solution and the explanation. \\n\\n```\\n\\tprivate Random random = new Random();\\n\\tprivate TreeMap<Integer, Rectangle> rectangles;\\n\\tprivate int areaSum = 0;\\n    \\n    public Solution(int[][] rects) \\n    {\\n        areaSum = 0;\\n\\t\\trectangles = new TreeMap<Integer, Rectangle>();\\n\\t\\tfor (int[] rect : rects)\\n        {\\n        \\tRectangle rectangle = new Rectangle(rect);\\n        \\tareaSum = areaSum + rectangle.area;\\n        \\trectangles.put(areaSum, rectangle);\\n        }\\n    }\\n    \\n    public int[] pick() \\n    {\\n        Integer key = random.nextInt(areaSum) + 1;\\n        return rectangles.get(rectangles.ceilingKey(key)).pick();\\n    }\\n    \\n    private class Rectangle\\n    {\\n    \\tpublic Rectangle(int[] coordinates)\\n    \\t{\\n    \\t\\tleft = coordinates[0];\\n    \\t\\tbottom = coordinates[1];\\n    \\t\\tright = coordinates[2];\\n    \\t\\ttop = coordinates[3];\\n    \\t\\tarea = (right - left + 1) * (top - bottom + 1);    \\t\\t\\n    \\t}\\n    \\t\\n    \\tpublic int left, right; \\n    \\tpublic int top, bottom;\\n    \\tpublic int area;\\n    \\t\\n    \\tpublic int[] pick()\\n    \\t{\\n    \\t\\tint x = left + random.nextInt(right - left + 1);\\n    \\t\\tint y = bottom + random.nextInt(top - bottom + 1);\\n    \\t\\treturn new int[]{x, y};\\n    \\t}\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\tprivate Random random = new Random();\\n\\tprivate TreeMap<Integer, Rectangle> rectangles;\\n\\tprivate int areaSum = 0;\\n    \\n    public Solution(int[][] rects) \\n    {\\n        areaSum = 0;\\n\\t\\trectangles = new TreeMap<Integer, Rectangle>();\\n\\t\\tfor (int[] rect : rects)\\n        {\\n        \\tRectangle rectangle = new Rectangle(rect);\\n        \\tareaSum = areaSum + rectangle.area;\\n        \\trectangles.put(areaSum, rectangle);\\n        }\\n    }\\n    \\n    public int[] pick() \\n    {\\n        Integer key = random.nextInt(areaSum) + 1;\\n        return rectangles.get(rectangles.ceilingKey(key)).pick();\\n    }\\n    \\n    private class Rectangle\\n    {\\n    \\tpublic Rectangle(int[] coordinates)\\n    \\t{\\n    \\t\\tleft = coordinates[0];\\n    \\t\\tbottom = coordinates[1];\\n    \\t\\tright = coordinates[2];\\n    \\t\\ttop = coordinates[3];\\n    \\t\\tarea = (right - left + 1) * (top - bottom + 1);    \\t\\t\\n    \\t}\\n    \\t\\n    \\tpublic int left, right; \\n    \\tpublic int top, bottom;\\n    \\tpublic int area;\\n    \\t\\n    \\tpublic int[] pick()\\n    \\t{\\n    \\t\\tint x = left + random.nextInt(right - left + 1);\\n    \\t\\tint y = bottom + random.nextInt(top - bottom + 1);\\n    \\t\\treturn new int[]{x, y};\\n    \\t}\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 806203,
                "title": "python-readable-clean-solution-with-binary-search",
                "content": "```\\nimport random\\nclass Solution:\\n\\n    def numberOfPoints(self, rect):\\n        x1, y1, x2, y2 = rect\\n        return ((abs(x1-x2)+1) * (abs(y1-y2)+1)) \\n    \\n    def sampleFromRect(self, rect):\\n        x1, y1, x2, y2 = rect\\n        x = random.randint(x1, x2) \\n        y = random.randint(y1, y2) \\n        return [x, y]\\n    \\n    def chooseRect(self):\\n        x = random.randint(0,self.n_points)\\n        left  = 0\\n        right = len(self.rects) - 1\\n        while left < right:\\n            mid = (left + right) // 2\\n            if x < self.prefix_sum[mid] :\\n                right = mid\\n            else:\\n                left = left +1\\n        return self.rects[left]\\n            \\n    def generatePrefixSum(self):\\n        self.prefix_sum = [0] * len(self.rects)\\n        self.prefix_sum[0] = self.numberOfPoints(self.rects[0])   \\n        for i in range(1,len(self.rects)):\\n            self.prefix_sum[i] = self.prefix_sum[i-1] + self.numberOfPoints(self.rects[i])   \\n        self.n_points = self.prefix_sum[-1]\\n        print(self.prefix_sum )\\n    \\n    \\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.generatePrefixSum()\\n\\n    def pick(self) -> List[int]:\\n        rect = self.chooseRect()\\n        return self.sampleFromRect(rect)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nimport random\\nclass Solution:\\n\\n    def numberOfPoints(self, rect):\\n        x1, y1, x2, y2 = rect\\n        return ((abs(x1-x2)+1) * (abs(y1-y2)+1)) \\n    \\n    def sampleFromRect(self, rect):\\n        x1, y1, x2, y2 = rect\\n        x = random.randint(x1, x2) \\n        y = random.randint(y1, y2) \\n        return [x, y]\\n    \\n    def chooseRect(self):\\n        x = random.randint(0,self.n_points)\\n        left  = 0\\n        right = len(self.rects) - 1\\n        while left < right:\\n            mid = (left + right) // 2\\n            if x < self.prefix_sum[mid] :\\n                right = mid\\n            else:\\n                left = left +1\\n        return self.rects[left]\\n            \\n    def generatePrefixSum(self):\\n        self.prefix_sum = [0] * len(self.rects)\\n        self.prefix_sum[0] = self.numberOfPoints(self.rects[0])   \\n        for i in range(1,len(self.rects)):\\n            self.prefix_sum[i] = self.prefix_sum[i-1] + self.numberOfPoints(self.rects[i])   \\n        self.n_points = self.prefix_sum[-1]\\n        print(self.prefix_sum )\\n    \\n    \\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.generatePrefixSum()\\n\\n    def pick(self) -> List[int]:\\n        rect = self.chooseRect()\\n        return self.sampleFromRect(rect)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805603,
                "title": "what-s-wrong-with-my-solution-of-using-random-numbers",
                "content": "I am saving all the rectagles and then picking one rectangle from among them and then I am picking a x that is between the min and max x of that rectangle and then picking a y that is between the min and max of that rectangle. Could anyone point out to me what I am doing wrong here?\\n\\n```\\nclass Solution {\\n    int recta[][];\\n    Random r = new Random();\\n    public Solution(int[][] rects) {\\n        this.recta = new int[rects.length][5];\\n        for(int i = 0; i < rects.length; i++){\\n            this.recta[i][0] = rects[i][0];\\n            this.recta[i][1] = rects[i][1];\\n            this.recta[i][2] = rects[i][2];\\n            this.recta[i][3] = rects[i][3];\\n            int dist = (int)Math.pow(Math.abs(rects[i][0] - rects[i][2]), 2) + (int)Math.pow(Math.abs(rects[i][1] - rects[i][3]), 2);\\n            this.recta[i][4] = dist;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int tot = 0;\\n        for(int[] r : this.recta){\\n            tot += r[4];\\n        }\\n        // Now choose a random item\\n        int recNum = -1;\\n        double random = Math.random() * tot;\\n        for (int i = 0; i < this.recta.length; ++i)\\n        {\\n            random -= this.recta[i][4];\\n            if (random <= 0.0d)\\n            {\\n                recNum = i;\\n                break;\\n            }\\n        }\\n        \\n        int xMax = this.recta[recNum][0] > this.recta[recNum][2] ? this.recta[recNum][0] : this.recta[recNum][2] ;\\n        int xMin = this.recta[recNum][0] < this.recta[recNum][2] ? this.recta[recNum][0] : this.recta[recNum][2] ;\\n        int yMax = this.recta[recNum][1] > this.recta[recNum][1] ? this.recta[recNum][1] : this.recta[recNum][3] ;\\n        int yMin = this.recta[recNum][1] < this.recta[recNum][3] ? this.recta[recNum][1] : this.recta[recNum][3] ;\\n        \\n        \\n        \\n        int xR = Integer.MIN_VALUE;\\n        int yR = Integer.MIN_VALUE;\\n        if(xMax == xMin)\\n            xR = xMax;\\n        else\\n         xR = xMin + r.nextInt(xMax-xMin);\\n        if(yMax == yMin)\\n            yR = yMax;\\n        else\\n          yR = yMin + r.nextInt(yMax-yMin);\\n        int[] coor = new int[2];\\n        coor[0] = xR;\\n        coor[1] = yR;\\n        return coor;\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    int recta[][];\\n    Random r = new Random();\\n    public Solution(int[][] rects) {\\n        this.recta = new int[rects.length][5];\\n        for(int i = 0; i < rects.length; i++){\\n            this.recta[i][0] = rects[i][0];\\n            this.recta[i][1] = rects[i][1];\\n            this.recta[i][2] = rects[i][2];\\n            this.recta[i][3] = rects[i][3];\\n            int dist = (int)Math.pow(Math.abs(rects[i][0] - rects[i][2]), 2) + (int)Math.pow(Math.abs(rects[i][1] - rects[i][3]), 2);\\n            this.recta[i][4] = dist;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int tot = 0;\\n        for(int[] r : this.recta){\\n            tot += r[4];\\n        }\\n        // Now choose a random item\\n        int recNum = -1;\\n        double random = Math.random() * tot;\\n        for (int i = 0; i < this.recta.length; ++i)\\n        {\\n            random -= this.recta[i][4];\\n            if (random <= 0.0d)\\n            {\\n                recNum = i;\\n                break;\\n            }\\n        }\\n        \\n        int xMax = this.recta[recNum][0] > this.recta[recNum][2] ? this.recta[recNum][0] : this.recta[recNum][2] ;\\n        int xMin = this.recta[recNum][0] < this.recta[recNum][2] ? this.recta[recNum][0] : this.recta[recNum][2] ;\\n        int yMax = this.recta[recNum][1] > this.recta[recNum][1] ? this.recta[recNum][1] : this.recta[recNum][3] ;\\n        int yMin = this.recta[recNum][1] < this.recta[recNum][3] ? this.recta[recNum][1] : this.recta[recNum][3] ;\\n        \\n        \\n        \\n        int xR = Integer.MIN_VALUE;\\n        int yR = Integer.MIN_VALUE;\\n        if(xMax == xMin)\\n            xR = xMax;\\n        else\\n         xR = xMin + r.nextInt(xMax-xMin);\\n        if(yMax == yMin)\\n            yR = yMax;\\n        else\\n          yR = yMin + r.nextInt(yMax-yMin);\\n        int[] coor = new int[2];\\n        coor[0] = xR;\\n        coor[1] = yR;\\n        return coor;\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805581,
                "title": "javascript-hashmap-binary-search-es6-approach-included-with-time-and-space-comments-welcome",
                "content": "```\\n/*\\neach rectangle will have to have a number in a map {cumulative area : [Xrange, yrange]}\\nfind the range of x and y per rectangle\\nuse random number * length of range + low of range\\n\\n** need to pick randomly from sum of all areas. picking random rect and then random point inside rect won\\'t do that. if one area is disproportionately bigger, it should get chosen more often.\\n\\nwhat if we set rect number to it\\'s cumulative area -> cumulative to avoid collisions of same area rects. find random number that but <= key. in order to efficiently find the key, binary search through this.map.keys()\\n*/\\nclass Solution{\\n    constructor(rects){\\n        this.map = new Map(); //  {cumulative area : [[xLo,xHi], [yLo,yHi]]}\\n        this.area = 0;\\n        this.getRange(rects);\\n    }\\n    pick(){ \\n        // O(log N) for binary search through N rectangles for random key\\n        let random = Math.ceil(this.area * Math.random());\\n        let randomRectKey = this.getKey(random);\\n        let [xRange, yRange] = this.map.get(randomRectKey)\\n        let xLength = xRange[1]-xRange[0]+1\\n        let yLength = yRange[1]-yRange[0]+1\\n        let xRandom = Math.floor(Math.random() * xLength) + xRange[0];\\n        let yRandom = Math.floor(Math.random() * yLength) + yRange[0];\\n        return [xRandom, yRandom];\\n    }\\n    getRange(rects){\\n        // O(N) for N rectangles, construction of this.map\\n        for (const rect of rects){\\n            let x = rect[2] - rect[0] + 1\\n            let y = rect[3] - rect[1] + 1\\n            this.area += x*y\\n            this.map.set(this.area, []);\\n            this.map.get(this.area).push([rect[0],rect[2]]);\\n            this.map.get(this.area).push([rect[1],rect[3]]);\\n        }\\n        // console.log(this.map)\\n    }\\n    getKey(num){ \\n        // binary search for arr[left] just greater than num\\n        // O(log N) for N rectangles\\n        let arr = [...this.map.keys()];\\n        let left = 0\\n        let right = arr.length-1\\n        while (left < right){\\n            let mid = left + Math.floor((right-left)/2);\\n            if (arr[mid] === num) return arr[mid];\\n            if (arr[mid] < num){\\n                left = mid + 1\\n            } else {\\n                right = mid\\n            }\\n        }\\n        return arr[left];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\neach rectangle will have to have a number in a map {cumulative area : [Xrange, yrange]}\\nfind the range of x and y per rectangle\\nuse random number * length of range + low of range\\n\\n** need to pick randomly from sum of all areas. picking random rect and then random point inside rect won\\'t do that. if one area is disproportionately bigger, it should get chosen more often.\\n\\nwhat if we set rect number to it\\'s cumulative area -> cumulative to avoid collisions of same area rects. find random number that but <= key. in order to efficiently find the key, binary search through this.map.keys()\\n*/\\nclass Solution{\\n    constructor(rects){\\n        this.map = new Map(); //  {cumulative area : [[xLo,xHi], [yLo,yHi]]}\\n        this.area = 0;\\n        this.getRange(rects);\\n    }\\n    pick(){ \\n        // O(log N) for binary search through N rectangles for random key\\n        let random = Math.ceil(this.area * Math.random());\\n        let randomRectKey = this.getKey(random);\\n        let [xRange, yRange] = this.map.get(randomRectKey)\\n        let xLength = xRange[1]-xRange[0]+1\\n        let yLength = yRange[1]-yRange[0]+1\\n        let xRandom = Math.floor(Math.random() * xLength) + xRange[0];\\n        let yRandom = Math.floor(Math.random() * yLength) + yRange[0];\\n        return [xRandom, yRandom];\\n    }\\n    getRange(rects){\\n        // O(N) for N rectangles, construction of this.map\\n        for (const rect of rects){\\n            let x = rect[2] - rect[0] + 1\\n            let y = rect[3] - rect[1] + 1\\n            this.area += x*y\\n            this.map.set(this.area, []);\\n            this.map.get(this.area).push([rect[0],rect[2]]);\\n            this.map.get(this.area).push([rect[1],rect[3]]);\\n        }\\n        // console.log(this.map)\\n    }\\n    getKey(num){ \\n        // binary search for arr[left] just greater than num\\n        // O(log N) for N rectangles\\n        let arr = [...this.map.keys()];\\n        let left = 0\\n        let right = arr.length-1\\n        while (left < right){\\n            let mid = left + Math.floor((right-left)/2);\\n            if (arr[mid] === num) return arr[mid];\\n            if (arr[mid] < num){\\n                left = mid + 1\\n            } else {\\n                right = mid\\n            }\\n        }\\n        return arr[left];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805545,
                "title": "solution-without-binary-search",
                "content": "```\\nclass Solution {\\n    int[][] rects;\\n    int[] range;\\n    int totArea = 0;\\n    Random r = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        range = new int[rects.length];\\n        int id = 0; \\n        for(int[] rect : rects){\\n            int area = Math.abs((rect[2]-rect[0]+1) * (rect[3]-rect[1]+1));\\n            this.totArea = this.totArea + area;\\n            range[id++] = totArea;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        \\n        int[] res = new int[2];\\n        int area = r.nextInt(totArea+1);\\n        int index = 0;\\n        \\n        while(index < range.length && range[index] < area){\\n            index++;\\n        }\\n        \\n        int[] rect = rects[index];\\n     \\n        res[0] = rect[0] + (r.nextInt(rect[2]-rect[0]+1));\\n        res[1] = rect[1] + (r.nextInt(rect[3]-rect[1]+1));\\n\\n        return res;\\n        \\n    }\\n}\\n\\n\\n====================Binary Search Approch========================\\n\\n\\nclass Solution {\\n    int[][] rects;\\n    int[] range;\\n    int totArea = 0;\\n    Random r = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        range = new int[rects.length];\\n        int id = 0; \\n        for(int[] rect : rects){\\n            int area = Math.abs((rect[2]-rect[0]+1) * (rect[3]-rect[1]+1));\\n            this.totArea = this.totArea + area;\\n            range[id++] = totArea;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        \\n        int[] res = new int[2];\\n        int area = r.nextInt(totArea+1);\\n        \\n        /*\\n        \\n        Solution without binary search\\n        \\n        int index = 0;\\n        while(index < range.length && range[index] < area){\\n            index++;\\n        }\\n        \\n        */\\n        \\n        int index = bs(area, 0, range.length-1);\\n        \\n        int[] rect = rects[index];\\n     \\n        res[0] = rect[0] + (r.nextInt(rect[2]-rect[0]+1));\\n        res[1] = rect[1] + (r.nextInt(rect[3]-rect[1]+1));\\n\\n        return res;\\n        \\n    }\\n    \\n    public int bs(int area, int start , int end){\\n        \\n        int mid = 0;\\n        while(start != end){\\n            mid = ((end+start)/2);\\n            if(area >= range[mid]){\\n                 start = mid+1; \\n            }else{\\n               end = mid;\\n            }\\n        }\\n        return start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    int[][] rects;\\n    int[] range;\\n    int totArea = 0;\\n    Random r = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        range = new int[rects.length];\\n        int id = 0; \\n        for(int[] rect : rects){\\n            int area = Math.abs((rect[2]-rect[0]+1) * (rect[3]-rect[1]+1));\\n            this.totArea = this.totArea + area;\\n            range[id++] = totArea;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        \\n        int[] res = new int[2];\\n        int area = r.nextInt(totArea+1);\\n        int index = 0;\\n        \\n        while(index < range.length && range[index] < area){\\n            index++;\\n        }\\n        \\n        int[] rect = rects[index];\\n     \\n        res[0] = rect[0] + (r.nextInt(rect[2]-rect[0]+1));\\n        res[1] = rect[1] + (r.nextInt(rect[3]-rect[1]+1));\\n\\n        return res;\\n        \\n    }\\n}\\n\\n\\n====================Binary Search Approch========================\\n\\n\\nclass Solution {\\n    int[][] rects;\\n    int[] range;\\n    int totArea = 0;\\n    Random r = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        range = new int[rects.length];\\n        int id = 0; \\n        for(int[] rect : rects){\\n            int area = Math.abs((rect[2]-rect[0]+1) * (rect[3]-rect[1]+1));\\n            this.totArea = this.totArea + area;\\n            range[id++] = totArea;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        \\n        int[] res = new int[2];\\n        int area = r.nextInt(totArea+1);\\n        \\n        /*\\n        \\n        Solution without binary search\\n        \\n        int index = 0;\\n        while(index < range.length && range[index] < area){\\n            index++;\\n        }\\n        \\n        */\\n        \\n        int index = bs(area, 0, range.length-1);\\n        \\n        int[] rect = rects[index];\\n     \\n        res[0] = rect[0] + (r.nextInt(rect[2]-rect[0]+1));\\n        res[1] = rect[1] + (r.nextInt(rect[3]-rect[1]+1));\\n\\n        return res;\\n        \\n    }\\n    \\n    public int bs(int area, int start , int end){\\n        \\n        int mid = 0;\\n        while(start != end){\\n            mid = ((end+start)/2);\\n            if(area >= range[mid]){\\n                 start = mid+1; \\n            }else{\\n               end = mid;\\n            }\\n        }\\n        return start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805361,
                "title": "python-o-n-time-space-solution-w-explanation",
                "content": "**Thought process:**\\nThis problem asks us to find a way to generate a point inside n rectangles with uniform probability, we have a few options:\\nOption 1: a trivial solution is to keep track of all the valid integer points, when `pick()` is called just generate a random index and return the integer point at that index. space is `O(nm)` where n is max x coordinate and m is max y coordinate, not space-efficient!\\nOption2: instead of tracking all valid integer points, can we track a way to recreate valid integer points? What minimal information do we need to determine whether a integer point is valid?\\n* we need all of the rectangles\\' x and y borders at least, so space efficiency is lower bounded at `Omega(N)` where `N` is the number of rectangles.\\n\\nWith information on the rectangles boundaries, we can now pick a rectangle first. The probability of rectangle `i` getting chosen should be `numPoints(rectangle i)/numPoints(total)`--with the rectangle boundaries we have enough information to determine this! If there is a built-in weighted random number generator in your language, you can just use that, I am using Python3 so I have to write this logic manually. There is a couple implementations for this:\\n1. we can use a list with each rectangle index appearing n times to mock weight, but this would use `O(nm)` space like option 1. Not efficient!\\n2. we can map each rectangle to a range of ints, when a random number is generated we go through each range to identify the rectangle, this would be O(n) time/space where n is the number of rectangles. If you optimize this using binary search the time would be O(logN).\\n\\nOnce we pick a rectangle, it should be trivial to generate a random point in that rectangle.\\n\\n**Generalized algorithm:**\\n*On initialization:*\\n  - build a list of integer point index range for each rectangle, (for example, a rectangle containing 4 valid points would occupy the range(x, x+4)). This is for picking the triangle\\n \\n*On `pick()`:*\\n  * pick the rectangle using weighted random number, using the range map built during initialization\\n  * pick a point from the rectangle by randomly generating x and y within rectangle boundaries\\n\\n**Code:**\\n```\\nfrom random import randint\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rect_rngs = []\\n        range_start = 0\\n        for x1,y1,x2,y2 in rects:\\n            num_points_in_rect = (x2-x1+1) * (y2-y1+1)\\n            self.rect_rngs.append([[range_start,range_start+num_points_in_rect], [x1,y1,x2,y2]])\\n            range_start = range_start+num_points_in_rect\\n        self.total_points = range_start\\n    def pick(self) -> List[int]:\\n        def pick_rectangle():\\n            rnd_int = randint(0,self.total_points-1)\\n            for rng, rect in self.rect_rngs:\\n                if rng[0]<=rnd_int<rng[1]:\\n                    return rect\\n            raise ValueError(\"No matching rectangle found!\")\\n        x1,y1,x2,y2 = pick_rectangle()\\n        pick_x = randint(x1,x2) # randint(a,b) is inclusive!\\n        pick_y = randint(y1,y2)\\n        return [pick_x, pick_y]\\n```\\n\\nBinary search implementation of `pick`:\\n```\\n    def pick(self) -> List[int]:\\n        def pick_rectangle_binary(l,r, target):\\n            if l > r:\\n                raise ValueError(\"No matching rectangle found!\")\\n            middle = l + (r-l)//2            \\n            start = self.rect_rngs[middle][0][0]\\n            end = self.rect_rngs[middle][0][1]\\n            if start <= target < end:\\n                return self.rect_rngs[middle][1]\\n            if target < start:\\n                return pick_rectangle_binary(l,middle-1,target)\\n            else:\\n                return pick_rectangle_binary(middle+1,r,target)\\n        x1,y1,x2,y2 = pick_rectangle_binary(0,len(self.rect_rngs)-1,randint(0,self.total_points-1))\\n        pick_x = randint(x1,x2) # randint(a,b) is inclusive!\\n        pick_y = randint(y1,y2)\\n        return [pick_x, pick_y]\\n```\\n\\n**Space/time efficiency:**\\n`initialization`: Linear time/linear space\\n`pick`: Logarithmic time/constant extra space",
                "solutionTags": [],
                "code": "```\\nfrom random import randint\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rect_rngs = []\\n        range_start = 0\\n        for x1,y1,x2,y2 in rects:\\n            num_points_in_rect = (x2-x1+1) * (y2-y1+1)\\n            self.rect_rngs.append([[range_start,range_start+num_points_in_rect], [x1,y1,x2,y2]])\\n            range_start = range_start+num_points_in_rect\\n        self.total_points = range_start\\n    def pick(self) -> List[int]:\\n        def pick_rectangle():\\n            rnd_int = randint(0,self.total_points-1)\\n            for rng, rect in self.rect_rngs:\\n                if rng[0]<=rnd_int<rng[1]:\\n                    return rect\\n            raise ValueError(\"No matching rectangle found!\")\\n        x1,y1,x2,y2 = pick_rectangle()\\n        pick_x = randint(x1,x2) # randint(a,b) is inclusive!\\n        pick_y = randint(y1,y2)\\n        return [pick_x, pick_y]\\n```\n```\\n    def pick(self) -> List[int]:\\n        def pick_rectangle_binary(l,r, target):\\n            if l > r:\\n                raise ValueError(\"No matching rectangle found!\")\\n            middle = l + (r-l)//2            \\n            start = self.rect_rngs[middle][0][0]\\n            end = self.rect_rngs[middle][0][1]\\n            if start <= target < end:\\n                return self.rect_rngs[middle][1]\\n            if target < start:\\n                return pick_rectangle_binary(l,middle-1,target)\\n            else:\\n                return pick_rectangle_binary(middle+1,r,target)\\n        x1,y1,x2,y2 = pick_rectangle_binary(0,len(self.rect_rngs)-1,randint(0,self.total_points-1))\\n        pick_x = randint(x1,x2) # randint(a,b) is inclusive!\\n        pick_y = randint(y1,y2)\\n        return [pick_x, pick_y]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805226,
                "title": "represent-points-using-offsets-full-explanation-with-example",
                "content": "**Idea:**\\n\\n![image](https://assets.leetcode.com/users/images/673d8a56-c13f-47d1-ad63-dd2a7c3b9c35_1598084206.445497.png)\\n\\n* Consider above mentioned 3 rectangles. As you can see, rectangles contains `12, 9, 15` integer coordinates respectively.\\n* So, in total, we have 36 points to represent. We can represent them using indices `[0 ... 35]`. Let\\'s call them `pointId`\\n* Let\\'s make an array `offset` which mentions the starting of `pointIdx` that a particular rectangle contains. For example,\\n\\t* Rectangle 1 will contain pointId `0 to 11 (12 points in total),`, so `offset[0] = 0` (starting value of pointId for rectangle-1)\\n\\t* Rectangle 2 will contain pointId `12 to 20 (9 points in total)`, so `offset[1] = 12` (starting value of pointId for rectangle-2)\\n\\t* Rectangle 3 will contains pointId `21 to 35 (36 points in total)`, so `offset[2] = 21` (starting value of pointId for rectangle-3)\\n\\t* Hence, the `offset = [0, 12, 21]`\\n* Now, you can randomly select a pointId from `0` (inclusive) to `36` (exclusive).\\n* As you can see, `offset` is in increasing order, so we can perform binary search to find the right position of random pointId, which is basically the rectangle it belongs to.\\n* For example, let\\'s say random pointId is `20`, we can determine using binary search on `offset`, that it belongs to rectangle-2 (which has pointIds of range `12` to `20`)\\n* Now, take the start coordinates of rectangle-2 (using given grid), and determine the `8`th coordinate in that rectangle-2 (because 20 - 12 = 8).\\n\\n```\\nclass Solution {\\n\\n    int[][] rects;\\n    int[] offsets;\\n    int range;\\n    Random r;\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        this.offsets = new int[rects.length];\\n        this.range = 0;\\n        r = new Random();\\n        \\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            \\n            int x1 = rect[0],\\n                y1 = rect[1],\\n                x2 = rect[2],\\n                y2 = rect[3];\\n            \\n            offsets[i] = range;\\n            range += (x2 - x1 + 1) * (y2 - y1 + 1);\\n        }\\n        \\n    }\\n    \\n    public int[] pick() {\\n        int randIdx = r.nextInt(range), \\n            rectIdx = Arrays.binarySearch(offsets, randIdx); \\n        \\n        if (rectIdx < 0) {\\n            rectIdx = Math.abs(rectIdx + 2);\\n        }\\n        \\n        int[] rect = rects[rectIdx];\\n        \\n        int idx = randIdx - offsets[rectIdx], \\n            x = rect[0], \\n            y = rect[1],\\n            width = rect[2] - rect[0] + 1, \\n            height = rect[3] - rect[1] + 1, \\n            row = idx / width, \\n            col = idx % width; \\n        \\n        return new int[]{x + col, y + row};   \\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\n    int[][] rects;\\n    int[] offsets;\\n    int range;\\n    Random r;\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        this.offsets = new int[rects.length];\\n        this.range = 0;\\n        r = new Random();\\n        \\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            \\n            int x1 = rect[0],\\n                y1 = rect[1],\\n                x2 = rect[2],\\n                y2 = rect[3];\\n            \\n            offsets[i] = range;\\n            range += (x2 - x1 + 1) * (y2 - y1 + 1);\\n        }\\n        \\n    }\\n    \\n    public int[] pick() {\\n        int randIdx = r.nextInt(range), \\n            rectIdx = Arrays.binarySearch(offsets, randIdx); \\n        \\n        if (rectIdx < 0) {\\n            rectIdx = Math.abs(rectIdx + 2);\\n        }\\n        \\n        int[] rect = rects[rectIdx];\\n        \\n        int idx = randIdx - offsets[rectIdx], \\n            x = rect[0], \\n            y = rect[1],\\n            width = rect[2] - rect[0] + 1, \\n            height = rect[3] - rect[1] + 1, \\n            row = idx / width, \\n            col = idx % width; \\n        \\n        return new int[]{x + col, y + row};   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 805219,
                "title": "simple-short-and-clean-java-solution",
                "content": "we are using tree map to increase the chance of selecting a rectangle with larger area, then selecting a point in its area randomly.\\n```\\nclass Solution {\\n    int[][] rect;\\n    TreeMap<Integer,Integer> tm=new TreeMap<>();\\n    int sum=0;\\n    Random ran=new Random();\\n    public Solution(int[][] rects) {\\n        rect=rects;\\n        for(int k=0;k<rects.length;k++){\\n            sum+=(rect[k][2]-rect[k][0]+1)*(rect[k][3]-rect[k][1]+1);\\n            tm.put(sum,k);\\n        }\\n    }\\n    public int[] pick() {\\n        int k=tm.get(tm.ceilingKey(ran.nextInt(sum+1)));        // sum can also be picked\\n        int x=ran.nextInt(rect[k][2]-rect[k][0]+1)+rect[k][0];\\n        int y=ran.nextInt(rect[k][3]-rect[k][1]+1)+rect[k][1];\\n        return new int[]{x,y};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    int[][] rect;\\n    TreeMap<Integer,Integer> tm=new TreeMap<>();\\n    int sum=0;\\n    Random ran=new Random();\\n    public Solution(int[][] rects) {\\n        rect=rects;\\n        for(int k=0;k<rects.length;k++){\\n            sum+=(rect[k][2]-rect[k][0]+1)*(rect[k][3]-rect[k][1]+1);\\n            tm.put(sum,k);\\n        }\\n    }\\n    public int[] pick() {\\n        int k=tm.get(tm.ceilingKey(ran.nextInt(sum+1)));        // sum can also be picked\\n        int x=ran.nextInt(rect[k][2]-rect[k][0]+1)+rect[k][0];\\n        int y=ran.nextInt(rect[k][3]-rect[k][1]+1)+rect[k][1];\\n        return new int[]{x,y};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 804992,
                "title": "java-distribute-the-points-via-treemap",
                "content": "```\\nclass Solution {\\n    private TreeMap<Integer, Integer> map;\\n    private int[][] minmax;\\n    private int len;\\n    private int sum;\\n    \\n    public Solution(int[][] rects) {\\n        map = new TreeMap<>();\\n        len = rects.length;\\n        minmax = new int[len][4];\\n        sum = 0;\\n        for (int i = 0; i < len; i++) {\\n            minmax[i][0] = Math.min(rects[i][0], rects[i][2]);\\n            minmax[i][1] = Math.max(rects[i][0], rects[i][2]);\\n            minmax[i][2] = Math.min(rects[i][1], rects[i][3]);\\n            minmax[i][3] = Math.max(rects[i][1], rects[i][3]);\\n            sum += (rects[i][3] - rects[i][1] + 1) * (rects[i][2] - rects[i][0] + 1);\\n            map.put(sum, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int rand = 1 + (int)(Math.random() * sum);\\n        int index = map.get(map.ceilingKey(rand));\\n        int[] rect = minmax[index];\\n        int xrange = rect[1] - rect[0] + 1;\\n        int yrange = rect[3] - rect[2] + 1;\\n        return new int[]{rect[0] + (int)(Math.random() * xrange), rect[2] + (int)(Math.random() * yrange)};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    private TreeMap<Integer, Integer> map;\\n    private int[][] minmax;\\n    private int len;\\n    private int sum;\\n    \\n    public Solution(int[][] rects) {\\n        map = new TreeMap<>();\\n        len = rects.length;\\n        minmax = new int[len][4];\\n        sum = 0;\\n        for (int i = 0; i < len; i++) {\\n            minmax[i][0] = Math.min(rects[i][0], rects[i][2]);\\n            minmax[i][1] = Math.max(rects[i][0], rects[i][2]);\\n            minmax[i][2] = Math.min(rects[i][1], rects[i][3]);\\n            minmax[i][3] = Math.max(rects[i][1], rects[i][3]);\\n            sum += (rects[i][3] - rects[i][1] + 1) * (rects[i][2] - rects[i][0] + 1);\\n            map.put(sum, i);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int rand = 1 + (int)(Math.random() * sum);\\n        int index = map.get(map.ceilingKey(rand));\\n        int[] rect = minmax[index];\\n        int xrange = rect[1] - rect[0] + 1;\\n        int yrange = rect[3] - rect[2] + 1;\\n        return new int[]{rect[0] + (int)(Math.random() * xrange), rect[2] + (int)(Math.random() * yrange)};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 759693,
                "title": "java-treemap",
                "content": "```\\nclass Solution {\\n    TreeMap<Integer, Integer> map;\\n    int[][] rs;\\n    int sum = 0;\\n    Random rand = new Random();\\n    public Solution(int[][] rects) {\\n        map = new TreeMap<>();\\n        rs = rects;\\n        for (int i = 0; i < rs.length; i++) {\\n            map.put(sum, i);\\n            sum += (rs[i][2] - rs[i][0] + 1) * (rs[i][3] - rs[i][1] + 1);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int rd = rand.nextInt(sum), k = map.floorKey(rd), r[] = rs[map.get(k)], diff = rd - k, w = r[2] - r[0] + 1;\\n        return new int[]{r[0] + diff % w, r[1] + diff / w};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    TreeMap<Integer, Integer> map;\\n    int[][] rs;\\n    int sum = 0;\\n    Random rand = new Random();\\n    public Solution(int[][] rects) {\\n        map = new TreeMap<>();\\n        rs = rects;\\n        for (int i = 0; i < rs.length; i++) {\\n            map.put(sum, i);\\n            sum += (rs[i][2] - rs[i][0] + 1) * (rs[i][3] - rs[i][1] + 1);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int rd = rand.nextInt(sum), k = map.floorKey(rd), r[] = rs[map.get(k)], diff = rd - k, w = r[2] - r[0] + 1;\\n        return new int[]{r[0] + diff % w, r[1] + diff / w};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 756502,
                "title": "easy-to-understand-python-3-solution",
                "content": "The crux of the problem is understanding that the solution is also evaluated on the kind of random distribution your solution offers. A random distribution, uniform over the areas of the rectangles is expected. \\n\\nUses Python3\\'s random.choices() function that allows weighted sampling from a specified population. The important thing to note here is that while calculaating the areas, we compute area as:  (x2 - x1 + 1) x (y2 - y1 +1) instead of the (x2 - x1) x (y2 - y1 ). \\nThis is because a rectaangle of area 1 corresponds to 4 integer points, not just one integer point.\\n\\n```\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        self.rects = rects\\n        \\n        self.areas = []\\n        for _ in range(len(rects)):\\n            self.areas.append((rects[_][2] - rects[_][0] + 1)*(rects[_][3] - rects[_][1] + 1))\\n        \\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        temp = [i for i in range(len(self.rects))]\\n        rect = random.choices(population = temp, weights = self.areas)[0]\\n                \\n        x_min = self.rects[rect][0]\\n        x_max = self.rects[rect][2]\\n        \\n        y_min = self.rects[rect][1]\\n        y_max = self.rects[rect][3]\\n        \\n        p_x = random.randint(x_min, x_max)\\n        p_y = random.randint(y_min, y_max)\\n        \\n        return[p_x, p_y]\\n```\\n\\n\\nSame solution but shortened (minor improvements)\\n\\n```\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        self.rects = rects\\n        self.areas = [(rects[_][2] - rects[_][0] + 1)*(rects[_][3] - rects[_][1] + 1) for _ in range(len(rects))]\\n        \\n        \\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        rect = random.choices(population = range(len(self.rects)), weights = self.areas)[0]\\n        return[random.randint(self.rects[rect][0], self.rects[rect][2]), random.randint(self.rects[rect][1], self.rects[rect][3])]\\n\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        self.rects = rects\\n        \\n        self.areas = []\\n        for _ in range(len(rects)):\\n            self.areas.append((rects[_][2] - rects[_][0] + 1)*(rects[_][3] - rects[_][1] + 1))\\n        \\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        temp = [i for i in range(len(self.rects))]\\n        rect = random.choices(population = temp, weights = self.areas)[0]\\n                \\n        x_min = self.rects[rect][0]\\n        x_max = self.rects[rect][2]\\n        \\n        y_min = self.rects[rect][1]\\n        y_max = self.rects[rect][3]\\n        \\n        p_x = random.randint(x_min, x_max)\\n        p_y = random.randint(y_min, y_max)\\n        \\n        return[p_x, p_y]\\n```\n```\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        self.rects = rects\\n        self.areas = [(rects[_][2] - rects[_][0] + 1)*(rects[_][3] - rects[_][1] + 1) for _ in range(len(rects))]\\n        \\n        \\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        rect = random.choices(population = range(len(self.rects)), weights = self.areas)[0]\\n        return[random.randint(self.rects[rect][0], self.rects[rect][2]), random.randint(self.rects[rect][1], self.rects[rect][3])]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 673385,
                "title": "c-sweet-simple-solution-with-explanation",
                "content": "It\\'s similar to question#528. My Explanation is here:\\n```\\nhttps://leetcode.com/problems/random-pick-with-weight/discuss/672072/C%2B%2B%3A-Sweet-and-simple-solution\\n```\\nHere is my implementation. For any doubt feel free to comment. \\n```\\nclass Solution {\\n    vector<vector<int>> rect;\\n    vector<int> area;\\n    int n,tarea;\\npublic:\\n    Solution(vector<vector<int>>& rects) {\\n        n = rects.size();\\n        this->rect = rects;\\n        for(int i=0;i<n;i++){\\n            \\n            int x1 = rects[i][0], x2 = rects[i][2];\\n            int y1 = rects[i][1], y2 = rects[i][3];\\n            int dx = x2-x1+1, dy = y2-y1+1;\\n            int a = abs(dx*dy);\\n            i==0?area.push_back(a):area.push_back(a+area[i-1]);\\n        }\\n        tarea = area[n-1];\\n    }\\n    \\n    vector<int> pick(){\\n        int randArea = rand()%tarea;\\n        int idx = upper_bound(area.begin(),area.end(),randArea) - area.begin();\\n        int x1 = rect[idx][0], x2 = rect[idx][2];\\n        int y1 = rect[idx][1], y2 = rect[idx][3];\\n        int dx = x2-x1+1, dy = y2-y1+1;\\n        int X = x1 + rand()%dx;\\n        int Y = y1 + rand()%dy;\\n        return {X,Y};\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nhttps://leetcode.com/problems/random-pick-with-weight/discuss/672072/C%2B%2B%3A-Sweet-and-simple-solution\\n```\n```\\nclass Solution {\\n    vector<vector<int>> rect;\\n    vector<int> area;\\n    int n,tarea;\\npublic:\\n    Solution(vector<vector<int>>& rects) {\\n        n = rects.size();\\n        this->rect = rects;\\n        for(int i=0;i<n;i++){\\n            \\n            int x1 = rects[i][0], x2 = rects[i][2];\\n            int y1 = rects[i][1], y2 = rects[i][3];\\n            int dx = x2-x1+1, dy = y2-y1+1;\\n            int a = abs(dx*dy);\\n            i==0?area.push_back(a):area.push_back(a+area[i-1]);\\n        }\\n        tarea = area[n-1];\\n    }\\n    \\n    vector<int> pick(){\\n        int randArea = rand()%tarea;\\n        int idx = upper_bound(area.begin(),area.end(),randArea) - area.begin();\\n        int x1 = rect[idx][0], x2 = rect[idx][2];\\n        int y1 = rect[idx][1], y2 = rect[idx][3];\\n        int dx = x2-x1+1, dy = y2-y1+1;\\n        int X = x1 + rand()%dx;\\n        int Y = y1 + rand()%dy;\\n        return {X,Y};\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 544086,
                "title": "python-readable-simple-and-short",
                "content": "```python\\nfrom random import randint\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.cellSum = [0]\\n        \\n        # Count the number of cells in each rectangle and add to cellSum as a\\n        # cumulative sum.\\n        # cellSum is initialized to 0, the reason for this will become evident\\n        # later in the code.\\n        for rect in self.rects:\\n            # The +1 here exists to add one to the width and height.\\n            # Because we think of each point as a cell. This allows\\n            # us to return a random point in and on the rectange easily.\\n            height = abs(abs(rect[3]) - abs(rect[1])) + 1\\n            width = abs(abs(rect[0]) - abs(rect[2])) + 1\\n            self.cellSum.append(self.cellSum[-1] + (height * width))\\n\\n    def pick(self) -> List[int]:\\n        # Generate a random that falls in the cellSum.\\n        # The -1 here makes it so that the following\\n        # binary search does not go out of bounds.\\n        randomCell = randint(0, self.cellSum[-1] - 1)\\n        # Find the cell sum that prior to the random number.\\n        idx = self.closestSmaller(self.cellSum, randomCell)\\n        # Remove the cell sum so that we can find the point\\n        # in the rectangle at idx.\\n        randomCell -= self.cellSum[idx]\\n        # We are going to return a point in this rectangle.\\n        rect = self.rects[idx]\\n        # Compute the width of the rectangle so that\\n        # we may remove the number of rows that are full.\\n        width = abs(abs(rect[0]) - abs(rect[2])) + 1\\n        # Remove full rows and returnt the rowId\\n        rowId = rect[1] + randomCell // width\\n        # Identify the col by wrapping the width around.\\n        colId = rect[0] + randomCell % width\\n        \\n        return [colId, rowId]\\n        \\n    def closestSmaller(self, nums, target):\\n        low = 0\\n        high = len(nums) - 1\\n        idx = -1\\n        while low <= high:\\n            mid = low + (high - low) // 2\\n            if target >= nums[mid]:\\n                idx = mid\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return idx\\n    \\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "solutionTags": [],
                "code": "```python\\nfrom random import randint\\n\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.cellSum = [0]\\n        \\n        # Count the number of cells in each rectangle and add to cellSum as a\\n        # cumulative sum.\\n        # cellSum is initialized to 0, the reason for this will become evident\\n        # later in the code.\\n        for rect in self.rects:\\n            # The +1 here exists to add one to the width and height.\\n            # Because we think of each point as a cell. This allows\\n            # us to return a random point in and on the rectange easily.\\n            height = abs(abs(rect[3]) - abs(rect[1])) + 1\\n            width = abs(abs(rect[0]) - abs(rect[2])) + 1\\n            self.cellSum.append(self.cellSum[-1] + (height * width))\\n\\n    def pick(self) -> List[int]:\\n        # Generate a random that falls in the cellSum.\\n        # The -1 here makes it so that the following\\n        # binary search does not go out of bounds.\\n        randomCell = randint(0, self.cellSum[-1] - 1)\\n        # Find the cell sum that prior to the random number.\\n        idx = self.closestSmaller(self.cellSum, randomCell)\\n        # Remove the cell sum so that we can find the point\\n        # in the rectangle at idx.\\n        randomCell -= self.cellSum[idx]\\n        # We are going to return a point in this rectangle.\\n        rect = self.rects[idx]\\n        # Compute the width of the rectangle so that\\n        # we may remove the number of rows that are full.\\n        width = abs(abs(rect[0]) - abs(rect[2])) + 1\\n        # Remove full rows and returnt the rowId\\n        rowId = rect[1] + randomCell // width\\n        # Identify the col by wrapping the width around.\\n        colId = rect[0] + randomCell % width\\n        \\n        return [colId, rowId]\\n        \\n    def closestSmaller(self, nums, target):\\n        low = 0\\n        high = len(nums) - 1\\n        idx = -1\\n        while low <= high:\\n            mid = low + (high - low) // 2\\n            if target >= nums[mid]:\\n                idx = mid\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return idx\\n    \\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 385409,
                "title": "c-simple-solution-by-transfering-all-2d-rectangles-to-a-1d-line",
                "content": "My idea is to transfer all rectangles to a 1D line, then random pick up one point from the line. Finally convert the point in the line back to its\\' real position. \\n```\\nclass Solution {\\npublic:\\n    map<int,int> toRect;\\n    vector<vector<int>> rs;\\n    int total = 0;\\n    Solution(vector<vector<int>>& rects) : rs(rects){\\n        toRect[0] = 0;\\n        for(int i = 0;i<rs.size();i++){\\n            auto& x = rs[i];\\n            int area = (x[2] - x[0] + 1) * (x[3] - x[1] + 1);\\n            total += area;\\n            toRect[total] = i+1;\\n        }\\n    }\\n    \\n    vector<int> f(const vector<int>& r, int i){\\n        int width = r[2] - r[0] + 1;\\n        int _x = i % width;\\n        int _y = i / width; \\n        return {r[0] + _x, r[1] + _y};\\n    }\\n    \\n    vector<int> pick() {\\n        int r = rand() % total;\\n        auto ptr = toRect.upper_bound(r);\\n        ptr = next(ptr,-1);\\n        return f(rs[ptr->second],r - ptr->first);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    map<int,int> toRect;\\n    vector<vector<int>> rs;\\n    int total = 0;\\n    Solution(vector<vector<int>>& rects) : rs(rects){\\n        toRect[0] = 0;\\n        for(int i = 0;i<rs.size();i++){\\n            auto& x = rs[i];\\n            int area = (x[2] - x[0] + 1) * (x[3] - x[1] + 1);\\n            total += area;\\n            toRect[total] = i+1;\\n        }\\n    }\\n    \\n    vector<int> f(const vector<int>& r, int i){\\n        int width = r[2] - r[0] + 1;\\n        int _x = i % width;\\n        int _y = i / width; \\n        return {r[0] + _x, r[1] + _y};\\n    }\\n    \\n    vector<int> pick() {\\n        int r = rand() % total;\\n        auto ptr = toRect.upper_bound(r);\\n        ptr = next(ptr,-1);\\n        return f(rs[ptr->second],r - ptr->first);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 305971,
                "title": "anyone-know-what-it-wrong-with-this-c-easy",
                "content": "Failing 3 testcases from 35. I did not know what is wrong here.\\n```\\n        private static int[][] arrs;\\n        private static int arrsIndex = 0;\\n        private static Random rnd = new Random();\\n\\n        public static void Solution(int[][] rects)\\n        {\\n            arrs = rects.Where(r => r.Length != 0).ToArray();\\n        }\\n\\n        public static int[] pick()\\n        { \\n\\t\\t\\tarrsIndex = ++arrsIndex >= arrs.Length ? 0 : arrsIndex;\\n        \\n            int x = rnd.Next(arrs[arrsIndex][0], arrs[arrsIndex][2] + 1);\\n            int y = rnd.Next(arrs[arrsIndex][1], arrs[arrsIndex][3] + 1);\\n\\n            return new int[] {x, y};\\n        }\\n```",
                "solutionTags": [],
                "code": "```\\n        private static int[][] arrs;\\n        private static int arrsIndex = 0;\\n        private static Random rnd = new Random();\\n\\n        public static void Solution(int[][] rects)\\n        {\\n            arrs = rects.Where(r => r.Length != 0).ToArray();\\n        }\\n\\n        public static int[] pick()\\n        { \\n\\t\\t\\tarrsIndex = ++arrsIndex >= arrs.Length ? 0 : arrsIndex;\\n        \\n            int x = rnd.Next(arrs[arrsIndex][0], arrs[arrsIndex][2] + 1);\\n            int y = rnd.Next(arrs[arrsIndex][1], arrs[arrsIndex][3] + 1);\\n\\n            return new int[] {x, y};\\n        }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 166697,
                "title": "for-help-i-don-t-know-why-i-was-wrong",
                "content": "here is my answer. \\nit pass 32/35 testcase,\\nbut when use \\n**[[[82918473, -57180867, 82918476, -57180863],\\n[83793579, 18088559, 83793580, 18088560],\\n[66574245, 26243152, 66574246, 26243153],\\n[72983930, 11921716, 72983934, 11921720]]]**\\nit wiil be wrong.\\n\\n```\\nfrom random import *\\nclass Solution(object):\\n    \\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        areas = rects\\n        self.maps = list()\\n        for index,area in enumerate(areas):\\n            minX = area[0]\\n            maxX = area[2]\\n            minY = area[1]\\n            maxY = area[3]\\n            self.maps.append(dict({\"minX\": minX,\"maxX\":maxX,\"minY\":minY,\"maxY\":maxY}))\\n\\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        select_area = randint(0,len(self.maps) - 1)\\n        x = randint(self.maps[select_area].get(\"minX\"),self.maps[select_area].get(\"maxX\"))\\n        y = randint(self.maps[select_area].get(\"minY\"),self.maps[select_area].get(\"maxY\"))\\n        return [x,y]\\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```\\nThank you very much.",
                "solutionTags": [],
                "code": "```\\nfrom random import *\\nclass Solution(object):\\n    \\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        areas = rects\\n        self.maps = list()\\n        for index,area in enumerate(areas):\\n            minX = area[0]\\n            maxX = area[2]\\n            minY = area[1]\\n            maxY = area[3]\\n            self.maps.append(dict({\"minX\": minX,\"maxX\":maxX,\"minY\":minY,\"maxY\":maxY}))\\n\\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        select_area = randint(0,len(self.maps) - 1)\\n        x = randint(self.maps[select_area].get(\"minX\"),self.maps[select_area].get(\"maxX\"))\\n        y = randint(self.maps[select_area].get(\"minY\"),self.maps[select_area].get(\"maxY\"))\\n        return [x,y]\\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 155182,
                "title": "python3-o-log-n-solution-using-statistical-ideas",
                "content": "I am currently studying statistics, so thought it would be a nice practice to apply a bit of that here.\\n\\nWhat we want here, per requirement, is that every integer point has the same probability of being picked. Now, since points are distributed among rectangles we could use a sampling technique where we pick first a rectangle based on its \"weight\" (size), and then we use simple random sampling within such rectangle. I actually made the exercise of proving this implicit claim with two rectangles.\\n\\nSay we have 10 points, where 6 live in first rectangle and 4 live in the other one. We could think of a decision tree where first branching is done by picking the rectangle and second branching is done by picking the actual point within each rectangle (so first branch has 6 leaves and second branch has 4).\\n\\nSince we know that we want to use simple random sampling (SRS) within each rectangle, we know that:\\n\\nP(x_i | R_1) = 1/6 for i in {1,2,3,4,5,6}\\nP(x_i | R_2) = 1/4 for i in {7, 8, 9, 10}\\n\\nwhere x_i is the event of picking element x_i, and R_j is the event of picking rectangle 1 or 2.\\n\\nNow, using definition of conditional probability (used backwards) we know that the probability of reaching every leaf in decision tree is given by:\\n\\nP(R_j and x_i) = P(R_j) P(x_i | R_j)\\n\\nand we would like the following equality to hold, if every leaf in the decision tree is to be equally likely to be picked (as each leaf represents one of the integer points from our total set):\\n\\nP(R_1) P(x_i | R_1) = P(R_2) P(x_i | R_2)\\n\\nReplacing the constants we setup for our example, equality becomes:\\n\\nP(R_1) (1/6) = P(R_2) (1/4)\\n\\nSince we just have two rectangles P(R_2) = 1 - P(R_1), hence\\n\\nP(R_1) (1/6) = (1 - P(R_1)) (1/4)\\n\\nSolving that linear equation for P(R_1) will give us 0.6, hence leaving P(R_2) = 0.4. And that is precisely the intuitive \"weight\" we could think of assigning, if wanting to make probability proportional to the size of each rectangle. I did not do it, but suspect this proof-template could we extended to any probabilities and number of rectangles. So, let us buy for now that such sampling technique is valid.\\n\\nNow, one way of implementing it is to to compute the percentages out of the total that each rectangle contributes with, and think that as the desired probability to pick such rectangle. Then we could use an enumerative sampling algorithm like the one mentioned at page 27 of this presentation:\\n\\nhttp://www.eustat.eus/productosServicios/52.1_Unequal_prob_sampling.pdf\\n\\nIn such algorithm we compute the the cumulative sum of probabilities for each rectangle, using the order they have already in input param. Such cumulative probability could be thought as the high end of a probabilities range. Then the algorithm generates a uniformly random number in [0,1] and searches for the rectangle whose probability range contains such random number. We can do such search efficiently with a binary search.\\n\\nOnce we picked the rectangle, we proceed to generate a random number from there by using another result from Probability: in order to select a random point within a rectangle, we can think of two independent random variables for each axis. Hence, generating one tuple where first element is uniform random number for axis-X range, and second element is uniform random number for axis-Y range; should be equivalent to picking one point randomly from rectangle formed by cartesian product of those two ranges. See proof/comment from this discussion (The one starting with \"That statement is incorrect, direct product of two independent uniform measures is a uniform measure. This can be shown as follows ...\")\\n\\nhttps://stackoverflow.com/questions/6884003/generate-a-random-point-within-a-rectangle-uniformly\\n\\nAnd voil\\xE0, putting all that together gives following snippet. At the time of this writing, it beats all the Python3 solutions.\\n\\n```\\nfrom bisect import bisect_left\\nfrom random import random, randint\\n\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        self.rects = rects\\n        self.cump = []\\n        total = 0\\n        for x1,y1,x2,y2 in rects:\\n            w, h = x2 - x1 + 1, y2 - y1 + 1\\n            total += w * h\\n            self.cump.append(total)\\n        for i in range(len(self.cump)):\\n            self.cump[i] /= total\\n\\n    def pick(self):\\n        i = bisect_left(self.cump, random())\\n        x1,y1,x2,y2 = self.rects[i]\\n        x = randint(x1, x2)\\n        y = randint(y1, y2)\\n        return (x,y)\\n```",
                "solutionTags": [],
                "code": "```\\nfrom bisect import bisect_left\\nfrom random import random, randint\\n\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        self.rects = rects\\n        self.cump = []\\n        total = 0\\n        for x1,y1,x2,y2 in rects:\\n            w, h = x2 - x1 + 1, y2 - y1 + 1\\n            total += w * h\\n            self.cump.append(total)\\n        for i in range(len(self.cump)):\\n            self.cump[i] /= total\\n\\n    def pick(self):\\n        i = bisect_left(self.cump, random())\\n        x1,y1,x2,y2 = self.rects[i]\\n        x = randint(x1, x2)\\n        y = randint(y1, y2)\\n        return (x,y)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 154249,
                "title": "python-easy-solution",
                "content": "This is simply a Python implementation of the solution at: https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/discuss/154130/Java-randomly-pick-a-rectangle-then-pick-a-point-inside\\n\\nThe idea is simply to pick a rectangle and pick points in it randomly. \\nA dictionary is created to store the sum (total sum) and the corresponding rectangle index. A random sum is chosen and the corresponding key is chosen from the dictionary and random coordinates are generated.\\n\\n```\\nimport random\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        self.rects = rects\\n        self.d = {}\\n        self.sum = 0\\n        for i in range(len(rects)):\\n            self.sum += (rects[i][2] - rects[i][0]+1)*(rects[i][3]-rects[i][1]+1)\\n            self.d[self.sum] = i\\n            \\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        area = random.randint(1, self.sum)\\n        rect = self.getRect(area)\\n        \\n        # get a random point from this rectangle\\n        coordinates = self.rects[rect]\\n        rand_x = random.randint(coordinates[0], coordinates[2])\\n        rand_y = random.randint(coordinates[1], coordinates[3])\\n        return ([rand_x, rand_y])\\n\\n    def getRect(self, area):\\n        if area in self.d:\\n            return self.d[area]\\n        \\n        mini = []\\n        for key in self.d:\\n            if key > area:\\n                mini.append(key)\\n        return self.d[min(mini)]\\n# can be simply done as return self.d[min(key for key in self.d if key > area)] \\n```",
                "solutionTags": [],
                "code": "```\\nimport random\\nclass Solution:\\n\\n    def __init__(self, rects):\\n        \"\"\"\\n        :type rects: List[List[int]]\\n        \"\"\"\\n        self.rects = rects\\n        self.d = {}\\n        self.sum = 0\\n        for i in range(len(rects)):\\n            self.sum += (rects[i][2] - rects[i][0]+1)*(rects[i][3]-rects[i][1]+1)\\n            self.d[self.sum] = i\\n            \\n    def pick(self):\\n        \"\"\"\\n        :rtype: List[int]\\n        \"\"\"\\n        area = random.randint(1, self.sum)\\n        rect = self.getRect(area)\\n        \\n        # get a random point from this rectangle\\n        coordinates = self.rects[rect]\\n        rand_x = random.randint(coordinates[0], coordinates[2])\\n        rand_y = random.randint(coordinates[1], coordinates[3])\\n        return ([rand_x, rand_y])\\n\\n    def getRect(self, area):\\n        if area in self.d:\\n            return self.d[area]\\n        \\n        mini = []\\n        for key in self.d:\\n            if key > area:\\n                mini.append(key)\\n        return self.d[min(mini)]\\n# can be simply done as return self.d[min(key for key in self.d if key > area)] \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979250,
                "title": "java-best-solution-easy-to-understand",
                "content": "class Solution {\\n    private int[][] rects;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;    \\n    }\\n    \\n    public int[] pick() {\\n        int[] res = null;\\n        int count = 0;\\n\\n        // Reservoir Sampling on each rectangle\\n        for (int i = 0; i < rects.length; ++i) {\\n            int[] tmp = pickInSingleRectangle(rects[i][0], rects[i][1], rects[i][2], rects[i][3]);\\n            int curSize = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            if (ThreadLocalRandom.current().nextInt(count + curSize) < curSize) {\\n                res = tmp;\\n            }\\n            count += curSize;\\n        }\\n\\n        return res;\\n    }\\n\\n    // pick a point from certain rectangle\\n    private int[] pickInSingleRectangle(int a, int b, int x, int y) {\\n        int[] res = new int[2];\\n        res[0] = a + ThreadLocalRandom.current().nextInt(x - a + 1);\\n        res[1] = b + ThreadLocalRandom.current().nextInt(y - b + 1);\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    private int[][] rects;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;    \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3973934,
                "title": "python3-solution-with-random-utility",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nthe key idea solve the problem is drawing uniform probility arrording to rect area and after that draw a point inside the choised rect uniformly\\nwe cant utilize python3 random library choices, randint fo that job\\nps. also we can use dev own\\'s random  choices: use binary-search and randint!\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. choice a rect with unfrom distrbution\\n2. in that rect unformly draw a point\\n\\n\\n# Code\\n```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self._areas,self._rects,self._indexs=[],rects,[]\\n        for i,(xl,yl,xr,yr) in enumerate(self._rects):\\n            self._areas.append((yr-yl+1)*(xr-xl+1)),self._indexs.append(i)\\n        \\n    def pick(self) -> List[int]:\\n        (xl,yl,xr,yr)=self._rects[random.choices(self._indexs,self._areas,k=1)[0]]\\n        return (random.randint(xl,xr),random.randint(yl,yr))\\n        \\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "solutionTags": [
                    "Python3",
                    "Randomized"
                ],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self._areas,self._rects,self._indexs=[],rects,[]\\n        for i,(xl,yl,xr,yr) in enumerate(self._rects):\\n            self._areas.append((yr-yl+1)*(xr-xl+1)),self._indexs.append(i)\\n        \\n    def pick(self) -> List[int]:\\n        (xl,yl,xr,yr)=self._rects[random.choices(self._indexs,self._areas,k=1)[0]]\\n        return (random.randint(xl,xr),random.randint(yl,yr))\\n        \\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3866767,
                "title": "c-56ms-beats-100",
                "content": "# Intuition\\nLet\\'s imagine that we\\'ve written down all points from all rectangles, one-by-one, into an array `arr`. Then to pick a random point, we would generate a random number from 0 to `arr.size() - 1`.\\n\\nThis is too slow, so we\\'ll create an array `cost` of size `n`, and in each cell `i` we\\'ll write how many points does `i`-th rectangle contribute.\\n\\nSo the first rectangle will contribute points with indices (in `arr` numeration) `[0 ; cost[0] - 1]`, the second rectangle contributes points with indices `[cost[0] ; cost[0] + cost[1] - 1]`, and so on. The last rectange contributes points with indices `[cost[0] + cost[1] + ... + cost[n - 2] ; cost[0] + cost[1] + ... + cost[n - 1] - 1]`.\\n\\n# Approach\\nI believe the key difference between my solution and others\\' solutions is: I only generate one random number per `pick()` call. \\n\\n# Complexity\\n- Time complexity:\\n$$O(log(n))$$ per query\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    vector<long long> cost;\\n    vector<vector<int>> r;\\n    mt19937_64 mt;\\npublic:\\n    Solution(vector<vector<int>>& rects): mt(123) {\\n        r = rects;\\n\\n        for (auto &u: r)\\n        {\\n            long long x = u[2] - u[0] + 1;\\n            long long y = u[3] - u[1] + 1;\\n            cost.push_back((cost.empty() ? 0 : cost.back()) + x * y);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        auto g = mt() % cost.back();\\n        auto idx = upper_bound(cost.begin(), cost.end(), g) - cost.begin();\\n        if (idx > 0)\\n            g -= cost[idx - 1];\\n        return vector<int>{\\n            (int)(r[idx][0] + (g / (r[idx][3] - r[idx][1] + 1))),\\n\\n            (int)(r[idx][1] + (g % (r[idx][3] - r[idx][1] + 1)))\\n        };\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    vector<long long> cost;\\n    vector<vector<int>> r;\\n    mt19937_64 mt;\\npublic:\\n    Solution(vector<vector<int>>& rects): mt(123) {\\n        r = rects;\\n\\n        for (auto &u: r)\\n        {\\n            long long x = u[2] - u[0] + 1;\\n            long long y = u[3] - u[1] + 1;\\n            cost.push_back((cost.empty() ? 0 : cost.back()) + x * y);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        auto g = mt() % cost.back();\\n        auto idx = upper_bound(cost.begin(), cost.end(), g) - cost.begin();\\n        if (idx > 0)\\n            g -= cost[idx - 1];\\n        return vector<int>{\\n            (int)(r[idx][0] + (g / (r[idx][3] - r[idx][1] + 1))),\\n\\n            (int)(r[idx][1] + (g % (r[idx][3] - r[idx][1] + 1)))\\n        };\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3784468,
                "title": "primitive-and-straightforward-solution",
                "content": "# Intuition\\n1. Calculate a total area occupied by all rectangles\\n2. Generate a random number in range from 0 to total area\\n3. Deduce coordinates from the random value\\n\\n# Approach\\nIt is really as simple as mentioned before. With a few nuances. We aren\\'t really calculate area but a number of integers inside rectangles and it is the source of those +1 in area function.\\nFor deducing you should just decrement your random number until it is smaller than some area. After that you can easily deduce coordinates.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$ probably\\n\\n- Space complexity:\\n$$O(n)$$ probably\\n\\n# Code\\n```cpp\\nclass Solution {\\n#define log(x) cout << #x << \" = \" << x << \\'\\\\n\\'\\npublic:\\n    Solution(const vector<vector<int>>& rects) : m_rects(rects) {\\n        srand(time(0));\\n        for (const auto& rect : m_rects) {\\n            m_totarea += area(rect);\\n        }\\n    }\\n    Solution(vector<vector<int>>&& rects) : m_rects(move(rects)) {\\n        srand(time(0));\\n        for (const auto& rect : m_rects) {\\n            m_totarea += area(rect);\\n        }\\n    }\\n    \\n    int area(const vector<int>& rect) {\\n        return (abs(rect[2] - rect[0]) + 1) * (abs(rect[3] - rect[1]) + 1);\\n    }\\n\\n    vector<int> pick() {\\n        int y{0}, x{0};\\n        int dot{rand() % m_totarea};\\n        for (const auto& rect : m_rects) {\\n            const int area_{area(rect)};\\n            dot -= area_;\\n            if (dot < 0) {\\n                dot += area_;\\n                int line{abs(rect[3] - rect[1]) + 1};\\n                y = dot/line + rect[0];\\n                x = dot%line + rect[1];\\n                break;\\n            }\\n        }\\n        return {y, x};\\n    }\\nprivate:\\n    int m_totarea{0};\\n    vector<vector<int>> m_rects{};\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp\\nclass Solution {\\n#define log(x) cout << #x << \" = \" << x << \\'\\\\n\\'\\npublic:\\n    Solution(const vector<vector<int>>& rects) : m_rects(rects) {\\n        srand(time(0));\\n        for (const auto& rect : m_rects) {\\n            m_totarea += area(rect);\\n        }\\n    }\\n    Solution(vector<vector<int>>&& rects) : m_rects(move(rects)) {\\n        srand(time(0));\\n        for (const auto& rect : m_rects) {\\n            m_totarea += area(rect);\\n        }\\n    }\\n    \\n    int area(const vector<int>& rect) {\\n        return (abs(rect[2] - rect[0]) + 1) * (abs(rect[3] - rect[1]) + 1);\\n    }\\n\\n    vector<int> pick() {\\n        int y{0}, x{0};\\n        int dot{rand() % m_totarea};\\n        for (const auto& rect : m_rects) {\\n            const int area_{area(rect)};\\n            dot -= area_;\\n            if (dot < 0) {\\n                dot += area_;\\n                int line{abs(rect[3] - rect[1]) + 1};\\n                y = dot/line + rect[0];\\n                x = dot%line + rect[1];\\n                break;\\n            }\\n        }\\n        return {y, x};\\n    }\\nprivate:\\n    int m_totarea{0};\\n    vector<vector<int>> m_rects{};\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3682898,
                "title": "ok",
                "content": "```\\nclass Solution \\n{\\n    vector<vector<int>>& r;\\n    int v[101]{}, i{};\\npublic:\\n    Solution(vector<vector<int>>& r) : r(r)\\n    {      \\n        for(const auto & r : r)\\n            v[i+1]=v[i]+(r[2]-r[0]+1)*(r[3]-r[1]+1), ++i;\\n    }\\n    \\n    vector<int> pick() \\n    {\\n        auto k = upper_bound(begin(v),begin(v)+i, rand()%v[i])-begin(v)-1;\\n        return {r[k][0]+rand() % (r[k][2]-r[k][0]+1), r[k][1]+rand() % (r[k][3]-r[k][1]+1)};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\n    vector<vector<int>>& r;\\n    int v[101]{}, i{};\\npublic:\\n    Solution(vector<vector<int>>& r) : r(r)\\n    {      \\n        for(const auto & r : r)\\n            v[i+1]=v[i]+(r[2]-r[0]+1)*(r[3]-r[1]+1), ++i;\\n    }\\n    \\n    vector<int> pick() \\n    {\\n        auto k = upper_bound(begin(v),begin(v)+i, rand()%v[i])-begin(v)-1;\\n        return {r[k][0]+rand() % (r[k][2]-r[k][0]+1), r[k][1]+rand() % (r[k][3]-r[k][1]+1)};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3628007,
                "title": "reservoir-sampling-mutation-version",
                "content": "# Intuition\\nsome kind of mutation of Reservoir Sampling\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Initialization $$O(n)$$, pick $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    private int[][] rects;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;    \\n    }\\n    \\n    public int[] pick() {\\n        int[] res = null;\\n        int count = 0;\\n\\n        // Reservoir Sampling on each rectangle\\n        for (int i = 0; i < rects.length; ++i) {\\n            int[] tmp = pickInSingleRectangle(rects[i][0], rects[i][1], rects[i][2], rects[i][3]);\\n            int curSize = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            if (ThreadLocalRandom.current().nextInt(count + curSize) < curSize) {\\n                res = tmp;\\n            }\\n            count += curSize;\\n        }\\n\\n        return res;\\n    }\\n\\n    // pick a point from certain rectangle\\n    private int[] pickInSingleRectangle(int a, int b, int x, int y) {\\n        int[] res = new int[2];\\n        res[0] = a + ThreadLocalRandom.current().nextInt(x - a + 1);\\n        res[1] = b + ThreadLocalRandom.current().nextInt(y - b + 1);\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    private int[][] rects;\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;    \\n    }\\n    \\n    public int[] pick() {\\n        int[] res = null;\\n        int count = 0;\\n\\n        // Reservoir Sampling on each rectangle\\n        for (int i = 0; i < rects.length; ++i) {\\n            int[] tmp = pickInSingleRectangle(rects[i][0], rects[i][1], rects[i][2], rects[i][3]);\\n            int curSize = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            if (ThreadLocalRandom.current().nextInt(count + curSize) < curSize) {\\n                res = tmp;\\n            }\\n            count += curSize;\\n        }\\n\\n        return res;\\n    }\\n\\n    // pick a point from certain rectangle\\n    private int[] pickInSingleRectangle(int a, int b, int x, int y) {\\n        int[] res = new int[2];\\n        res[0] = a + ThreadLocalRandom.current().nextInt(x - a + 1);\\n        res[1] = b + ThreadLocalRandom.current().nextInt(y - b + 1);\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3625357,
                "title": "c-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo be honest, the description of the question is ambiguous. My first approach is simple: first, get a random index to find which rectangle area you will use, next just calculate two ranges, x and y, then generate two random integers from the range. But this question implies a condition: the possibility each point you generated from the rectangle area should be equal, but each rectangle\\'s area isn\\'t the same. So the previous approach can\\'t work. Now, we need to find a way to make the probabilities of getting a random point based on their outer rectangle\\'s area the same. In C++, we can use \"discrete_distribution<int> distribution\" to get the results with unequal probabilities.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#include <vector>\\n#include <random>\\n\\nusing namespace std;\\n\\nclass Solution \\n{\\npublic:\\n    Solution(vector<vector<int>>& rects) : rects(rects), totalArea(0)\\n    {\\n        probabilities.reserve(rects.size());\\n\\n        for (const auto& rect : rects) \\n        {\\n            int area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            totalArea += area;\\n            probabilities.push_back(area);\\n        }\\n\\n        \\n        for (auto& prob : probabilities) \\n        {\\n            prob /= totalArea;\\n        }\\n\\n        distribution = discrete_distribution<int>(probabilities.begin(), probabilities.end());\\n\\n        generator = mt19937(rd());\\n    }\\n    \\n    vector<int> pick()\\n    {\\n        int index = distribution(generator);\\n        const auto& rect = rects[index];\\n\\n        uniform_int_distribution<int> X(rect[0], rect[2]);\\n        uniform_int_distribution<int> Y(rect[1], rect[3]);\\n\\n        return {X(generator), Y(generator)};\\n    }\\n\\nprivate:\\n    vector<vector<int>> rects;\\n\\n    vector<double> probabilities;\\n\\n    int totalArea;\\n\\n    random_device rd;\\n\\n    mt19937 generator;\\n    \\n    discrete_distribution<int> distribution;\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Randomized"
                ],
                "code": "```\\n#include <vector>\\n#include <random>\\n\\nusing namespace std;\\n\\nclass Solution \\n{\\npublic:\\n    Solution(vector<vector<int>>& rects) : rects(rects), totalArea(0)\\n    {\\n        probabilities.reserve(rects.size());\\n\\n        for (const auto& rect : rects) \\n        {\\n            int area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            totalArea += area;\\n            probabilities.push_back(area);\\n        }\\n\\n        \\n        for (auto& prob : probabilities) \\n        {\\n            prob /= totalArea;\\n        }\\n\\n        distribution = discrete_distribution<int>(probabilities.begin(), probabilities.end());\\n\\n        generator = mt19937(rd());\\n    }\\n    \\n    vector<int> pick()\\n    {\\n        int index = distribution(generator);\\n        const auto& rect = rects[index];\\n\\n        uniform_int_distribution<int> X(rect[0], rect[2]);\\n        uniform_int_distribution<int> Y(rect[1], rect[3]);\\n\\n        return {X(generator), Y(generator)};\\n    }\\n\\nprivate:\\n    vector<vector<int>> rects;\\n\\n    vector<double> probabilities;\\n\\n    int totalArea;\\n\\n    random_device rd;\\n\\n    mt19937 generator;\\n    \\n    discrete_distribution<int> distribution;\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3536610,
                "title": "java",
                "content": "pick rect by area/total areas probablity, then pick int inside the rect\\n\\n# Code\\n```\\nclass Solution {    \\n\\n    int rects[][];\\n    double [] rectsProb;\\n\\n    public Solution(int[][] rects) {\\n        this.rects=rects;\\n        long totalArea = 0;\\n        long [] areas= new long[rects.length];\\n\\n        for (int i=0;i<rects.length;i++){\\n            areas[i] = ((long)(rects[i][2]-rects[i][0]+1))*(rects[i][3]-rects[i][1]+1);\\n            totalArea += areas[i];\\n        }\\n\\n        rectsProb= new double[rects.length];\\n        for (int i=0;i<rects.length;i++)\\n            rectsProb[i] = (0.0+areas[i])/totalArea;\\n    }\\n    \\n    public int[] pick() {\\n        Random r = new Random();\\n        double rectChooseByProb = r.nextDouble();\\n        int rectChoosen =-1;\\n        for (int i=0;i<rects.length;i++){ //could keep prefix sum to dp it O(logn) insead of (O(n)) dont think this is the point here \\n            rectChooseByProb -= rectsProb[i]; \\n            if (rectChooseByProb<=0.000001) {\\n                rectChoosen=i;\\n                break;\\n            }\\n        } // now chhose inside rect \"rectChoosen\"\\n        int x = rects[rectChoosen][2] - rects[rectChoosen][0] + 1;\\n        int y = rects[rectChoosen][3] - rects[rectChoosen][1] + 1 ;\\n        int xRand = r.nextInt(x), yRand= r.nextInt(y);\\n        return new int[]{xRand + rects[rectChoosen][0], yRand + rects[rectChoosen][1]};\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {    \\n\\n    int rects[][];\\n    double [] rectsProb;\\n\\n    public Solution(int[][] rects) {\\n        this.rects=rects;\\n        long totalArea = 0;\\n        long [] areas= new long[rects.length];\\n\\n        for (int i=0;i<rects.length;i++){\\n            areas[i] = ((long)(rects[i][2]-rects[i][0]+1))*(rects[i][3]-rects[i][1]+1);\\n            totalArea += areas[i];\\n        }\\n\\n        rectsProb= new double[rects.length];\\n        for (int i=0;i<rects.length;i++)\\n            rectsProb[i] = (0.0+areas[i])/totalArea;\\n    }\\n    \\n    public int[] pick() {\\n        Random r = new Random();\\n        double rectChooseByProb = r.nextDouble();\\n        int rectChoosen =-1;\\n        for (int i=0;i<rects.length;i++){ //could keep prefix sum to dp it O(logn) insead of (O(n)) dont think this is the point here \\n            rectChooseByProb -= rectsProb[i]; \\n            if (rectChooseByProb<=0.000001) {\\n                rectChoosen=i;\\n                break;\\n            }\\n        } // now chhose inside rect \"rectChoosen\"\\n        int x = rects[rectChoosen][2] - rects[rectChoosen][0] + 1;\\n        int y = rects[rectChoosen][3] - rects[rectChoosen][1] + 1 ;\\n        int xRand = r.nextInt(x), yRand= r.nextInt(y);\\n        return new int[]{xRand + rects[rectChoosen][0], yRand + rects[rectChoosen][1]};\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3502574,
                "title": "alias-method-o-n-precomputation-o-1-sampling",
                "content": "# Intuition\\nWith standard tools, we can randomly generate an integer with linear probability over a range (that is , every integer is equally likely to be selected). However, we would like to select among rectangles randomly, with a weight assigned to each rectangle proportional to its area. Once we choose a rectangle, we may choose any point inside it with equal probability. For example, if we have two rectangles, one with area 4 and another of area 2, we first select a rectangle to sample; we want to select the area 4 rectangle twice as often as the area 2 rectangle.\\n\\n# Approach\\n[Vose Alias Method](https://www.keithschwarz.com/darts-dice-coins/)\\n\\n#### Generate the Sample Table (Buckets)\\nWe create a list of \"buckets\", each containing a reference to a rectangle from the input, a probability of being selected (proportional to the rectangle\\'s area, normalized against the average area), and an \"alias\", initialized to Null and later updated during preprocessing. When sampling, we select a bucket randomly with equal probability. Then, if there is no alias specified on that bucket, we choose the rectangle associated with that bucket. Otherwise, we will generate a number in the range from 0 to 1: if the generated number is less or equal to the probability associated with the bucket, we will still choose the bucket\\'s rectangle. Otherwise, we will instead choose its \"alias\". Note that the amount of material in a bucket represents the associated probability. A bucket which is 1/4 full will point to its rectangle 1/4 of the time, and point to its alias 3/4 of the time.\\n\\n*Observation: In any list of numbers, if at least one item in the list is lower than the average of the list, then at least one other item must have a value greater than the average.*\\n\\nWe partition the buckets into two lists: \"underfull\" and \"overfull\". The \"fullness\" of a bucket is the likelihood of selection relative to the average. That is, if a rectangle has a lower than average area, the bucket which represents it will be placed into the \"underfull\" bucket list, and if it has a greater than average area, it is placed into the \"overfull\" list.\\n\\nWhile there are any buckets in these lists, we will repeatedly perform the following:\\n\\nRemove one bucket from each list. The goal is to \"fill up\" the underfull bucket up to the average level using the contents of the overfull bucket. Since the formerly-underfull bucket now contains material from another bucket, we will point the formerly-underfull bucket\\'s \"alias\" to the ovefull bucket\\'s rectangle and place the formerly-underfull bucket into the list of full buckets. From the overfull bucket, we will account for the material lost in transfer to the underfull bucket, then depending on how much material is left over, we place this bucket into the \"underfull\" or \"overfull\" list.\\n\\nWhen/if (due to rounding errata) there is just one bucket left in one of the lists, we will update its probability to that of the average (since this must be true, according to averages), and place it in the list of full buckets.\\n\\n### Sample From The Table\\nTo sample, we choose from the buckets with equal probability. If there is no alias, we choose that bucket\\'s rectangle. if there is an alias, we must generate a random number from 0 to 1. If the number is lower than the bucket\\'s probability, we choose the bucket\\'s rectangle, otherwise we choose its alias.\\n\\n# Complexity\\n- Time complexity:\\nPrecomputing alias table: O(n)\\nSampling: O(1)\\n\\n- Space complexity:\\nO(n) for the rectangles and buckets.\\n\\n# Code\\n```\\nuse std::time::SystemTime;\\n#[derive(Debug)]\\npub struct Solution {\\n    rects: Vec<Vec<i32>>,\\n    buckets: Vec<Bucket>,\\n    rngstate: u64,\\n}\\n\\n#[derive(Copy, Clone, Debug)]\\npub struct Bucket {\\n    //probability of choosing this bucket\\'s rectangle\\n    p: f64,\\n    //index into Solution::rects\\n    rect: usize,\\n    //we will sometimes choose this other rect instead\\n    alias: Option<usize>,\\n}\\n\\npub fn area(rect: &[i32]) -> i32 {\\n    match rect[..] {\\n        [a, b, x, y] => {\\n            //add one to account for points on the perimeter\\n            let w = (x - a) + 1;\\n            let h = (y - b) + 1;\\n            w * h\\n        }\\n        _ => 0,\\n    }\\n}\\n\\nimpl Solution {\\n    //xorshift64 https://en.wikipedia.org/wiki/Xorshift\\n    pub fn rand(&mut self) -> u64 {\\n        let mut x = self.rngstate;\\n        x ^= x << 13;\\n        x ^= x >> 7;\\n        x ^= x << 17;\\n        self.rngstate = x;\\n        x\\n    }\\n\\n    pub fn new(rects: Vec<Vec<i32>>) -> Self {\\n        let area_sum = rects.iter().map(|rect| area(rect)).sum::<i32>() as f64;\\n        let area_avg = area_sum / (rects.len() as f64);\\n        let mut underfull = vec![];\\n        let mut overfull = vec![];\\n        for (i, rect) in rects.iter().enumerate() {\\n            let area = area(rect) as f64;\\n            let p = area / area_avg;\\n            let bucket = Bucket {\\n                p,\\n                //since the buckets will be rearranged during computing of\\n                //sampling table, we point the bucket to the rect ahead of\\n                //time to preserve order\\n                rect: i,\\n                alias: None,\\n            };\\n            //since values are normalized according to the average, `1.0`\\n            //becomes the \"fullness\" limit\\n            if p >= 1.0 {\\n                overfull.push(bucket);\\n            } else {\\n                underfull.push(bucket);\\n            }\\n        }\\n        let mut buckets = vec![];\\n        loop {\\n            match (underfull.pop(), overfull.pop()) {\\n                (Some(mut under), Some(mut over)) => {\\n                    //how much to fill the lesser bucket with to reach average\\n                    let diff = 1.0 - under.p;\\n                    //subtract this amount from fuller bucket\\n                    over.p -= diff;\\n                    //the lesser bucket will remember which rectangle the\\n                    //fuller bucket represented\\n                    under.alias = Some(over.rect);\\n                    //since we filled the lesser bucket, it\\'s done processing\\n                    buckets.push(under);\\n                    //put the source bucket back into the processing area\\n                    if over.p >= 1.0 {\\n                        overfull.push(over);\\n                    } else {\\n                        underfull.push(over);\\n                    }\\n                }\\n                (None, Some(mut remaining)) | (Some(mut remaining), None) => {\\n                    remaining.p = 1.0;\\n                    buckets.push(remaining);\\n                    break;\\n                }\\n                (None, None) => break,\\n            }\\n        }\\n        Self {\\n            rects,\\n            //seed with current time\\n            rngstate: {\\n                let now = SystemTime::now();\\n                now.duration_since(SystemTime::UNIX_EPOCH)\\n                    .unwrap()\\n                    .as_millis() as u64\\n            },\\n            buckets,\\n        }\\n    }\\n\\n    pub fn pick(&mut self) -> Vec<i32> {\\n        //choose a random bucket\\n        let rand_i = self.rand() as usize % self.buckets.len();\\n        let rect = {\\n            let bucket = self.buckets[rand_i];\\n            let rect_i = match bucket.alias {\\n                None => bucket.rect,\\n                Some(alias_i) => {\\n                    //if the bucket has an alias, we choose it sometimes\\n                    //according to the rectangle\\'s area (from which p\\n                    //is derived)\\n                    let r = self.rand() as f64;\\n                    let rand = r / u64::MAX as f64;\\n                    if rand >= bucket.p {\\n                        alias_i\\n                    } else {\\n                        bucket.rect\\n                    }\\n                }\\n            };\\n            &self.rects[rect_i]\\n        };\\n        //choose a point uniformly in the selected rectangle\\n        match rect[..] {\\n            [a, b, x, y] => {\\n                let width = x - a;\\n                let height = y - b;\\n                let xoffset = (self.rand() as i32).rem_euclid(width + 1);\\n                let yoffset = (self.rand() as i32).rem_euclid(height + 1);\\n                let xrand = xoffset + a;\\n                let yrand = yoffset + b;\\n                vec![xrand, yrand]\\n            }\\n            _ => vec![],\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::time::SystemTime;\\n#[derive(Debug)]\\npub struct Solution {\\n    rects: Vec<Vec<i32>>,\\n    buckets: Vec<Bucket>,\\n    rngstate: u64,\\n}\\n\\n#[derive(Copy, Clone, Debug)]\\npub struct Bucket {\\n    //probability of choosing this bucket\\'s rectangle\\n    p: f64,\\n    //index into Solution::rects\\n    rect: usize,\\n    //we will sometimes choose this other rect instead\\n    alias: Option<usize>,\\n}\\n\\npub fn area(rect: &[i32]) -> i32 {\\n    match rect[..] {\\n        [a, b, x, y] => {\\n            //add one to account for points on the perimeter\\n            let w = (x - a) + 1;\\n            let h = (y - b) + 1;\\n            w * h\\n        }\\n        _ => 0,\\n    }\\n}\\n\\nimpl Solution {\\n    //xorshift64 https://en.wikipedia.org/wiki/Xorshift\\n    pub fn rand(&mut self) -> u64 {\\n        let mut x = self.rngstate;\\n        x ^= x << 13;\\n        x ^= x >> 7;\\n        x ^= x << 17;\\n        self.rngstate = x;\\n        x\\n    }\\n\\n    pub fn new(rects: Vec<Vec<i32>>) -> Self {\\n        let area_sum = rects.iter().map(|rect| area(rect)).sum::<i32>() as f64;\\n        let area_avg = area_sum / (rects.len() as f64);\\n        let mut underfull = vec![];\\n        let mut overfull = vec![];\\n        for (i, rect) in rects.iter().enumerate() {\\n            let area = area(rect) as f64;\\n            let p = area / area_avg;\\n            let bucket = Bucket {\\n                p,\\n                //since the buckets will be rearranged during computing of\\n                //sampling table, we point the bucket to the rect ahead of\\n                //time to preserve order\\n                rect: i,\\n                alias: None,\\n            };\\n            //since values are normalized according to the average, `1.0`\\n            //becomes the \"fullness\" limit\\n            if p >= 1.0 {\\n                overfull.push(bucket);\\n            } else {\\n                underfull.push(bucket);\\n            }\\n        }\\n        let mut buckets = vec![];\\n        loop {\\n            match (underfull.pop(), overfull.pop()) {\\n                (Some(mut under), Some(mut over)) => {\\n                    //how much to fill the lesser bucket with to reach average\\n                    let diff = 1.0 - under.p;\\n                    //subtract this amount from fuller bucket\\n                    over.p -= diff;\\n                    //the lesser bucket will remember which rectangle the\\n                    //fuller bucket represented\\n                    under.alias = Some(over.rect);\\n                    //since we filled the lesser bucket, it\\'s done processing\\n                    buckets.push(under);\\n                    //put the source bucket back into the processing area\\n                    if over.p >= 1.0 {\\n                        overfull.push(over);\\n                    } else {\\n                        underfull.push(over);\\n                    }\\n                }\\n                (None, Some(mut remaining)) | (Some(mut remaining), None) => {\\n                    remaining.p = 1.0;\\n                    buckets.push(remaining);\\n                    break;\\n                }\\n                (None, None) => break,\\n            }\\n        }\\n        Self {\\n            rects,\\n            //seed with current time\\n            rngstate: {\\n                let now = SystemTime::now();\\n                now.duration_since(SystemTime::UNIX_EPOCH)\\n                    .unwrap()\\n                    .as_millis() as u64\\n            },\\n            buckets,\\n        }\\n    }\\n\\n    pub fn pick(&mut self) -> Vec<i32> {\\n        //choose a random bucket\\n        let rand_i = self.rand() as usize % self.buckets.len();\\n        let rect = {\\n            let bucket = self.buckets[rand_i];\\n            let rect_i = match bucket.alias {\\n                None => bucket.rect,\\n                Some(alias_i) => {\\n                    //if the bucket has an alias, we choose it sometimes\\n                    //according to the rectangle\\'s area (from which p\\n                    //is derived)\\n                    let r = self.rand() as f64;\\n                    let rand = r / u64::MAX as f64;\\n                    if rand >= bucket.p {\\n                        alias_i\\n                    } else {\\n                        bucket.rect\\n                    }\\n                }\\n            };\\n            &self.rects[rect_i]\\n        };\\n        //choose a point uniformly in the selected rectangle\\n        match rect[..] {\\n            [a, b, x, y] => {\\n                let width = x - a;\\n                let height = y - b;\\n                let xoffset = (self.rand() as i32).rem_euclid(width + 1);\\n                let yoffset = (self.rand() as i32).rem_euclid(height + 1);\\n                let xrand = xoffset + a;\\n                let yrand = yoffset + b;\\n                vec![xrand, yrand]\\n            }\\n            _ => vec![],\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3279448,
                "title": "c-cinch-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> area;\\n    vector<vector<int>> v;\\n\\n    int solve(vector<int>& it){\\n        return (it[2]-it[0]+1)*(it[3]-it[1]+1);\\n    }\\n\\n    Solution(vector<vector<int>>& rects) {\\n        v = rects;\\n        int total_area=0;\\n        for(auto it : rects){\\n            total_area += solve(it); \\n            area.push_back(total_area);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int x = random()%area.back() + 1;\\n        int idx = lower_bound(area.begin(), area.end(), x) - area.begin();\\n\\n        auto r = v[idx];\\n        x = random()%(r[2] - r[0] + 1) + r[0];\\n        int y = random()%(r[3] - r[1] + 1) + r[1];\\n        return {x,y}; \\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> area;\\n    vector<vector<int>> v;\\n\\n    int solve(vector<int>& it){\\n        return (it[2]-it[0]+1)*(it[3]-it[1]+1);\\n    }\\n\\n    Solution(vector<vector<int>>& rects) {\\n        v = rects;\\n        int total_area=0;\\n        for(auto it : rects){\\n            total_area += solve(it); \\n            area.push_back(total_area);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int x = random()%area.back() + 1;\\n        int idx = lower_bound(area.begin(), area.end(), x) - area.begin();\\n\\n        auto r = v[idx];\\n        x = random()%(r[2] - r[0] + 1) + r[0];\\n        int y = random()%(r[3] - r[1] + 1) + r[1];\\n        return {x,y}; \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3279436,
                "title": "c-based-on-random-pick-with-weight",
                "content": "# Intuition\\nUsing Intuition of Leetcode 528. Random Pick with Weight, store the cumalative areas of rectangels as they come in areas array. And initialise global vector rec with the input.\\n\\n\\n# Approach\\nUse binary search to find the index of the random number we got.\\nGet a random number within that rectangle accordingly.\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> areas;\\n    vector<vector<int>> rec;\\n    Solution(vector<vector<int>>& rects) {\\n        rec = rects;\\n        vector<int> data = rects[0];\\n        int ans = (data[2]-data[0]+1)*(data[3]-data[1]+1);\\n        areas.push_back(ans);\\n        for(int i = 1; i< rects.size(); i++){\\n            vector<int> data = rects[i];\\n            int ans = (data[2]-data[0]+1)*(data[3]-data[1]+1);\\n            areas.push_back(ans+areas.back());\\n        }\\n    }\\n    int getindex(){\\n        int n = areas.back();\\n        int r = rand()%n +1;\\n        int i = 0;\\n        int j = areas.size();\\n        int index = 0;\\n        while(i<=j){\\n            int mid = (i+j)/2;\\n            if(areas[mid]==r){\\n                return mid;\\n            }\\n            if(areas[mid]>r){\\n                index = mid;\\n                j = mid-1;\\n            }\\n            else{\\n                i = mid+1;\\n            }\\n        }\\n        return index;\\n    }\\n    vector<int> pick() {\\n        int index = getindex();\\n        vector<int> data = rec[index];\\n        int x1 = data[0];\\n        int y1 = data[1];\\n        int x2 = data[2];\\n        int y2 = data[3];\\n        int x = rand()%(x2-x1+1) + x1;\\n        int y = rand()%(y2-y1+1) + y1;\\n        return {x, y};\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> areas;\\n    vector<vector<int>> rec;\\n    Solution(vector<vector<int>>& rects) {\\n        rec = rects;\\n        vector<int> data = rects[0];\\n        int ans = (data[2]-data[0]+1)*(data[3]-data[1]+1);\\n        areas.push_back(ans);\\n        for(int i = 1; i< rects.size(); i++){\\n            vector<int> data = rects[i];\\n            int ans = (data[2]-data[0]+1)*(data[3]-data[1]+1);\\n            areas.push_back(ans+areas.back());\\n        }\\n    }\\n    int getindex(){\\n        int n = areas.back();\\n        int r = rand()%n +1;\\n        int i = 0;\\n        int j = areas.size();\\n        int index = 0;\\n        while(i<=j){\\n            int mid = (i+j)/2;\\n            if(areas[mid]==r){\\n                return mid;\\n            }\\n            if(areas[mid]>r){\\n                index = mid;\\n                j = mid-1;\\n            }\\n            else{\\n                i = mid+1;\\n            }\\n        }\\n        return index;\\n    }\\n    vector<int> pick() {\\n        int index = getindex();\\n        vector<int> data = rec[index];\\n        int x1 = data[0];\\n        int y1 = data[1];\\n        int x2 = data[2];\\n        int y2 = data[3];\\n        int x = rand()%(x2-x1+1) + x1;\\n        int y = rand()%(y2-y1+1) + y1;\\n        return {x, y};\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3250889,
                "title": "go-prefix-sum-and-binary-search",
                "content": "```\\ntype Solution struct {\\n    n, total int\\n    rects [][]int\\n    prefixsum []int\\n}\\n\\n\\nfunc Constructor(rects [][]int) Solution {\\n    n := len(rects)\\n    prefixsum := make([]int, n)\\n\\n    for i, rect := range rects {\\n        length := rect[2] - rect[0] + 1\\n        width := rect[3] - rect[1] + 1\\n        area := length * width\\n        prefixsum[i] = area\\n\\n        if i > 0 {\\n            prefixsum[i] += prefixsum[i - 1]\\n        }\\n    }\\n\\n    return Solution{n, prefixsum[n - 1], rects, prefixsum}\\n}\\n\\n\\nfunc (this *Solution) Pick() []int {\\n    point := random(1, this.total)\\n    index := bSearch(this.prefixsum, point)\\n    rect := this.rects[index]\\n    return []int{random(rect[0], rect[2]), random(rect[1], rect[3])}\\n}\\n\\n\\nfunc random(min, max int) int {\\n    return min + rand.Intn(max - min + 1)\\n}\\n\\n\\nfunc bSearch(a []int, target int) int {\\n    lo, hi := 0, len(a) - 1\\n\\n    for lo < hi {\\n        mid := lo + ((hi - lo) >> 1)\\n\\n        if a[mid] < target {\\n            lo = mid + 1\\n        } else {\\n            hi = mid\\n        }\\n    }\\n\\n    return lo\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Solution struct {\\n    n, total int\\n    rects [][]int\\n    prefixsum []int\\n}\\n\\n\\nfunc Constructor(rects [][]int) Solution {\\n    n := len(rects)\\n    prefixsum := make([]int, n)\\n\\n    for i, rect := range rects {\\n        length := rect[2] - rect[0] + 1\\n        width := rect[3] - rect[1] + 1\\n        area := length * width\\n        prefixsum[i] = area\\n\\n        if i > 0 {\\n            prefixsum[i] += prefixsum[i - 1]\\n        }\\n    }\\n\\n    return Solution{n, prefixsum[n - 1], rects, prefixsum}\\n}\\n\\n\\nfunc (this *Solution) Pick() []int {\\n    point := random(1, this.total)\\n    index := bSearch(this.prefixsum, point)\\n    rect := this.rects[index]\\n    return []int{random(rect[0], rect[2]), random(rect[1], rect[3])}\\n}\\n\\n\\nfunc random(min, max int) int {\\n    return min + rand.Intn(max - min + 1)\\n}\\n\\n\\nfunc bSearch(a []int, target int) int {\\n    lo, hi := 0, len(a) - 1\\n\\n    for lo < hi {\\n        mid := lo + ((hi - lo) >> 1)\\n\\n        if a[mid] < target {\\n            lo = mid + 1\\n        } else {\\n            hi = mid\\n        }\\n    }\\n\\n    return lo\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3228751,
                "title": "c-solution-explained-with-illustration",
                "content": "# Intuition\\nThe general idea is very simple - listing all points avaliable in some certain order and store them in a list, whenever we call pick(), we generate a random index and return that point.\\n\\n# Approach\\nThere\\'s two things we need to discuss:\\n**1. what\\'s that \"certain order\"** \\n**2. how to store all points**\\n\\nIn each rectangle, we could iterate all points from left to right, bottom to top. And we follow the relative order among all rectangles(given by input).\\n![90a1f529ee79dd399219b8f03816f50.jpg](https://assets.leetcode.com/users/images/b7b83aca-3249-4287-a19d-e5f0ebe97fd6_1677327674.4030004.jpeg)\\n\\nListing all points and save them in a container is rather stupid due to the high time and space complexity. \\nWhy not store an index range for each rectangle. For instance, in the picture above, we know the green rectangle owns points indexed from 1 to 16, the blue one owns 17 to 28, so we could generate a table like this:\\n![image.png](https://assets.leetcode.com/users/images/6d745003-cea3-41ee-9e3c-e97ff30da9df_1677328183.0795298.png)\\nActually, we don\\'t need to save the left bound of each range -- when  trying to find out which rectangle a point is in, we could just find the first range whose right bound >= point index. For example, point at index 25 lies in rectangle 1, because 28 >= 25; point 58 stays within rectangle 2 because 58 >= 58.\\n\\nAs a result, the final table we save looks like this:\\n![image.png](https://assets.leetcode.com/users/images/bd3cd2e7-8b2e-488a-a560-80fd5dfd3647_1677329511.9538338.png)\\n\\n\\nThis structure could be represented by a tree-map (map<int,int>) in C++. DO NOT use a hash map - we need a structure maintaining the order of point indexes.\\n\\nThanks to C++ map\\'s \"upper_bound\" function, we can easily find the first key(left column of the table above) larger than some input within O(logn) time. \\n\\nOne special case is that when the input happens to be some key in the map, the map would return the next key. For instance, if input = 28, the map would return the 2-indexed rectangle. So we should check it first.\\n\\nAfter we locate the rectangle index, get the point is just piece of cake.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(log(n))\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    const vector<vector<int>>& allrects;\\n    int total_points;\\n    map<int, int> point_rect;\\npublic:\\n    Solution(vector<vector<int>>& rects): allrects(rects) {\\n        total_points = 0;\\n        for(int i=0;i<rects.size();++i) {\\n            total_points += getPointCount(rects[i]);\\n            point_rect[total_points] = i;\\n        }\\n    }\\n\\n    int getPointCount(const vector<int>& rect) {\\n        int width = rect[2] - rect[0] + 1;\\n        int height = rect[3] - rect[1] + 1;\\n        return width * height;\\n    }\\n    \\n    vector<int> pick() {\\n        int original = rand() % total_points + 1;\\n        map<int,int>::iterator it;\\n        auto temp = point_rect.find(original);\\n        if(temp != point_rect.end()) {\\n            it = temp;\\n        } else {\\n            it = point_rect.upper_bound(original);\\n        }\\n        int rect_index = it->second;\\n        const vector<int> rect = allrects[rect_index];\\n        int index_inside_rect = it->first - original;\\n        int width = rect[2] - rect[0] + 1;\\n        int y_offset = -index_inside_rect / width;\\n        int x_offset = -index_inside_rect % width;\\n        int y = rect[3] + y_offset;\\n        int x = rect[2] + x_offset;\\n        return {x,y}; \\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    const vector<vector<int>>& allrects;\\n    int total_points;\\n    map<int, int> point_rect;\\npublic:\\n    Solution(vector<vector<int>>& rects): allrects(rects) {\\n        total_points = 0;\\n        for(int i=0;i<rects.size();++i) {\\n            total_points += getPointCount(rects[i]);\\n            point_rect[total_points] = i;\\n        }\\n    }\\n\\n    int getPointCount(const vector<int>& rect) {\\n        int width = rect[2] - rect[0] + 1;\\n        int height = rect[3] - rect[1] + 1;\\n        return width * height;\\n    }\\n    \\n    vector<int> pick() {\\n        int original = rand() % total_points + 1;\\n        map<int,int>::iterator it;\\n        auto temp = point_rect.find(original);\\n        if(temp != point_rect.end()) {\\n            it = temp;\\n        } else {\\n            it = point_rect.upper_bound(original);\\n        }\\n        int rect_index = it->second;\\n        const vector<int> rect = allrects[rect_index];\\n        int index_inside_rect = it->first - original;\\n        int width = rect[2] - rect[0] + 1;\\n        int y_offset = -index_inside_rect / width;\\n        int x_offset = -index_inside_rect % width;\\n        int y = rect[3] + y_offset;\\n        int x = rect[2] + x_offset;\\n        return {x,y}; \\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084653,
                "title": "weighted-selection-of-rect-generate-point-in-selected-rect",
                "content": "```python\\nfrom dataclasses import dataclass\\nfrom functools import cached_property\\nfrom itertools import accumulate\\nfrom random import choices, randint\\n\\n\\n@dataclass\\nclass Rectangle:\\n    x: int\\n    y: int\\n    l: int\\n    b: int\\n\\n    def generate(self) -> list[int]:\\n        return [\\n            self.x + randint(0, self.l),\\n            self.y + randint(0, self.b)\\n        ]\\n\\n    @property\\n    def points(self) -> int:\\n        \"\"\"\\n        :return: number of points inside and on boundary of the rectangle \\n        \"\"\"\\n        return (self.l + 1) * (self.b + 1)\\n\\n\\nclass Solution:\\n    def __init__(self, rects: list[list[int]]):\\n        self.rects = [Rectangle(x1, y1, x2 - x1, y2 - y1) for x1, y1, x2, y2 in rects]\\n\\n    def pick(self) -> list[int]:\\n        return self.select_rect().generate()\\n\\n    def select_rect(self) -> Rectangle:\\n        return choices(self.rects, cum_weights=self.cum_weights, k=1)[0]\\n\\n    @cached_property\\n    def cum_weights(self) -> list[float]:\\n        rect_points = [r.points for r in self.rects]\\n        total_points = sum(rect_points)\\n        return list(accumulate(points / total_points for points in rect_points))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nfrom dataclasses import dataclass\\nfrom functools import cached_property\\nfrom itertools import accumulate\\nfrom random import choices, randint\\n\\n\\n@dataclass\\nclass Rectangle:\\n    x: int\\n    y: int\\n    l: int\\n    b: int\\n\\n    def generate(self) -> list[int]:\\n        return [\\n            self.x + randint(0, self.l),\\n            self.y + randint(0, self.b)\\n        ]\\n\\n    @property\\n    def points(self) -> int:\\n        \"\"\"\\n        :return: number of points inside and on boundary of the rectangle \\n        \"\"\"\\n        return (self.l + 1) * (self.b + 1)\\n\\n\\nclass Solution:\\n    def __init__(self, rects: list[list[int]]):\\n        self.rects = [Rectangle(x1, y1, x2 - x1, y2 - y1) for x1, y1, x2, y2 in rects]\\n\\n    def pick(self) -> list[int]:\\n        return self.select_rect().generate()\\n\\n    def select_rect(self) -> Rectangle:\\n        return choices(self.rects, cum_weights=self.cum_weights, k=1)[0]\\n\\n    @cached_property\\n    def cum_weights(self) -> list[float]:\\n        rect_points = [r.points for r in self.rects]\\n        total_points = sum(rect_points)\\n        return list(accumulate(points / total_points for points in rect_points))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3051647,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n   int total;\\n   vector<int>cum;\\n   vector<vector<int>>rects;\\n   int upper_bound(int target)\\n   {\\n       int low=0;\\n       int high=cum.size()-1;\\n       while(low<=high)\\n       {\\n           int mid=low+(high-low)/2;\\n           if (cum[mid]<=target) low=mid+1;\\n           else high=mid-1;\\n       }\\n       return low;\\n   }\\n    Solution(vector<vector<int>>& rects) \\n    {\\n        this->rects=rects;\\n        total=0;\\n        for (int i=0;i<rects.size();i++)\\n       {\\n           total+=(rects[i][3]-rects[i][1]+1)*(rects[i][2]-rects[i][0]+1);\\n           cum.push_back(total);\\n       }\\n    }\\n    \\n    vector<int> pick() {\\n        int num=rand()%total;\\n        int ind=upper_bound(num);\\n        vector<int>&rect=rects[ind];\\n        int x_pts=rect[2]-rect[0]+1;\\n        int y_pts=rect[3]-rect[1]+1;\\n        int total_pts=x_pts*y_pts;\\n        int start=cum[ind]-total_pts;\\n        int offset=num-start;\\n        return {rect[0]+offset%x_pts,rect[1]+offset/x_pts};\\n\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   int total;\\n   vector<int>cum;\\n   vector<vector<int>>rects;\\n   int upper_bound(int target)\\n   {\\n       int low=0;\\n       int high=cum.size()-1;\\n       while(low<=high)\\n       {\\n           int mid=low+(high-low)/2;\\n           if (cum[mid]<=target) low=mid+1;\\n           else high=mid-1;\\n       }\\n       return low;\\n   }\\n    Solution(vector<vector<int>>& rects) \\n    {\\n        this->rects=rects;\\n        total=0;\\n        for (int i=0;i<rects.size();i++)\\n       {\\n           total+=(rects[i][3]-rects[i][1]+1)*(rects[i][2]-rects[i][0]+1);\\n           cum.push_back(total);\\n       }\\n    }\\n    \\n    vector<int> pick() {\\n        int num=rand()%total;\\n        int ind=upper_bound(num);\\n        vector<int>&rect=rects[ind];\\n        int x_pts=rect[2]-rect[0]+1;\\n        int y_pts=rect[3]-rect[1]+1;\\n        int total_pts=x_pts*y_pts;\\n        int start=cum[ind]-total_pts;\\n        int offset=num-start;\\n        return {rect[0]+offset%x_pts,rect[1]+offset/x_pts};\\n\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3024240,
                "title": "c-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe keep \\n\\n- Sum of rectangles\\' areas to map the rectangle\\n- List of rectangles to map a point with the rectangle\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBinary search to find rectangle by random value; modulo arithmetics to find the point within the rectangle\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(log(n))$$ per each `Pick` call, where `n` is number of rectangles\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ where `n` is number of rectangles\\n\\n# Code\\n```\\npublic class Solution {\\n    private List<BigInteger> m_Squares = new List<BigInteger>();\\n    private List<(long x, long y, long w, long h)> m_Rects = new();\\n\\n    public Solution(int[][] rects) {\\n        BigInteger total = 0;\\n\\n        foreach (int[] rect in rects) {\\n            long w = rect[2] - rect[0] + 1;\\n            long h = rect[3] - rect[1] + 1;\\n\\n            m_Rects.Add((rect[0], rect[1], w, h));\\n            m_Squares.Add(total += w * h); \\n        }\\n    }\\n\\n    public (long x, long y) At(BigInteger value)\\n    {\\n            int index = m_Squares.BinarySearch(value);\\n\\n            index = index < 0 ? ~index : index + 1;\\n           \\n            var rect = m_Rects[index];\\n\\n            long at = (long)(index == 0\\n                ? value\\n                : value - m_Squares[index - 1]);\\n\\n            long y = rect.y + at / rect.w;\\n            long x = rect.x + at % rect.w;\\n\\n            return (x, y);\\n    }\\n\\n    public BigInteger Count => m_Squares[m_Squares.Count - 1];\\n    \\n    public int[] Pick() {\\n        BigInteger value = (BigInteger)(((double)Count) * Random.Shared.NextDouble());\\n\\n        var p = At(value);\\n\\n        return new int[] { (int)(p.x), (int)(p.y) };\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.Pick();\\n */\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    private List<BigInteger> m_Squares = new List<BigInteger>();\\n    private List<(long x, long y, long w, long h)> m_Rects = new();\\n\\n    public Solution(int[][] rects) {\\n        BigInteger total = 0;\\n\\n        foreach (int[] rect in rects) {\\n            long w = rect[2] - rect[0] + 1;\\n            long h = rect[3] - rect[1] + 1;\\n\\n            m_Rects.Add((rect[0], rect[1], w, h));\\n            m_Squares.Add(total += w * h); \\n        }\\n    }\\n\\n    public (long x, long y) At(BigInteger value)\\n    {\\n            int index = m_Squares.BinarySearch(value);\\n\\n            index = index < 0 ? ~index : index + 1;\\n           \\n            var rect = m_Rects[index];\\n\\n            long at = (long)(index == 0\\n                ? value\\n                : value - m_Squares[index - 1]);\\n\\n            long y = rect.y + at / rect.w;\\n            long x = rect.x + at % rect.w;\\n\\n            return (x, y);\\n    }\\n\\n    public BigInteger Count => m_Squares[m_Squares.Count - 1];\\n    \\n    public int[] Pick() {\\n        BigInteger value = (BigInteger)(((double)Count) * Random.Shared.NextDouble());\\n\\n        var p = At(value);\\n\\n        return new int[] { (int)(p.x), (int)(p.y) };\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.Pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2971434,
                "title": "try-try-and-succeeded",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.i = -1\\n        self.dp = defaultdict(float)\\n        self.lst = []\\n        total = 0\\n        for i,r in enumerate(rects):\\n            x1 = r[0]\\n            x2 = r[2]\\n            y1 = r[1]\\n            y2 = r[3]\\n            x = x2-x1+1\\n            y = y2-y1+1\\n            self.dp[i] = x*y\\n            total+= x*y\\n            self.dp = dict(sorted(self.dp.items(), key=lambda item: item[1], reverse=True))\\n            \\n            \\n        for d in self.dp:\\n            self.lst.append([d, (self.dp[d]/total)*100])\\n                \\n        print(self.lst)\\n        self.j = self.k = 0\\n        self.i = self.lst[self.j][0]\\n        self.noofpoints = self.lst[self.j][1] \\n        print(self.noofpoints)\\n        #print(self.dp)\\n    \\n    def pick(self) -> List[int]:\\n        import random\\n        \\n        if self.k <= self.noofpoints:\\n            self.k += 1\\n        else:\\n            if self.j < len(self.rects)-1:\\n                self.j+=1\\n            else:\\n                self.j = 0\\n            self.i = self.lst[self.j][0]    \\n            self.noofpoints = self.lst[self.j][1]\\n            self.k = 0\\n            \\n        #self.i = 0 #random.randrange(0, len(self.rects))\\n        #if self.i < len(self.rects)-1:\\n        #    self.i +=1\\n        #else:\\n        #    self.i = 0\\n        #self.i=3\\n        \\n        #print(self.i)\\n        x1 = self.rects[self.i][0]\\n        x2 = self.rects[self.i][2]\\n        y1 = self.rects[self.i][1]\\n        y2 = self.rects[self.i][3]\\n        x = random.randint(x1, x2)\\n        y = random.randint(y1, y2)\\n        \\n        \\n        return [x,y]\\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.i = -1\\n        self.dp = defaultdict(float)\\n        self.lst = []\\n        total = 0\\n        for i,r in enumerate(rects):\\n            x1 = r[0]\\n            x2 = r[2]\\n            y1 = r[1]\\n            y2 = r[3]\\n            x = x2-x1+1\\n            y = y2-y1+1\\n            self.dp[i] = x*y\\n            total+= x*y\\n            self.dp = dict(sorted(self.dp.items(), key=lambda item: item[1], reverse=True))\\n            \\n            \\n        for d in self.dp:\\n            self.lst.append([d, (self.dp[d]/total)*100])\\n                \\n        print(self.lst)\\n        self.j = self.k = 0\\n        self.i = self.lst[self.j][0]\\n        self.noofpoints = self.lst[self.j][1] \\n        print(self.noofpoints)\\n        #print(self.dp)\\n    \\n    def pick(self) -> List[int]:\\n        import random\\n        \\n        if self.k <= self.noofpoints:\\n            self.k += 1\\n        else:\\n            if self.j < len(self.rects)-1:\\n                self.j+=1\\n            else:\\n                self.j = 0\\n            self.i = self.lst[self.j][0]    \\n            self.noofpoints = self.lst[self.j][1]\\n            self.k = 0\\n            \\n        #self.i = 0 #random.randrange(0, len(self.rects))\\n        #if self.i < len(self.rects)-1:\\n        #    self.i +=1\\n        #else:\\n        #    self.i = 0\\n        #self.i=3\\n        \\n        #print(self.i)\\n        x1 = self.rects[self.i][0]\\n        x2 = self.rects[self.i][2]\\n        y1 = self.rects[self.i][1]\\n        y2 = self.rects[self.i][3]\\n        x = random.randint(x1, x2)\\n        y = random.randint(y1, y2)\\n        \\n        \\n        return [x,y]\\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2955323,
                "title": "c-rand-logn-on-pick",
                "content": "\\n```\\nclass Solution {\\n    vector<vector<int>> rects;\\n    vector<int> areas; \\npublic:\\n    Solution(vector<vector<int>>& rects) {\\n        areas.reserve(rects.size());\\n        transform(rects.begin(), rects.end(), back_inserter(areas), [](auto const& r) { return (r[2]-r[0]+1)*(r[3]-r[1]+1);} );\\n        partial_sum(areas.begin(), areas.end(), areas.begin());\\n        double total = areas.back();\\n        transform(areas.begin(), areas.end(), areas.begin(), [&total](auto const& a) { return int(a/total*100);} );\\n        this->rects.swap(rects);\\n        srand(time(NULL));\\n    }\\n    \\n    vector<int> pick() {\\n        int i = lower_bound(areas.begin(), areas.end(), rand() % 100) - areas.begin();\\n        int x = rand() % (rects[i][2] - rects[i][0] + 1) + rects[i][0];\\n        int y = rand() % (rects[i][3] - rects[i][1] + 1) + rects[i][1];\\n        return {x, y};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    vector<vector<int>> rects;\\n    vector<int> areas; \\npublic:\\n    Solution(vector<vector<int>>& rects) {\\n        areas.reserve(rects.size());\\n        transform(rects.begin(), rects.end(), back_inserter(areas), [](auto const& r) { return (r[2]-r[0]+1)*(r[3]-r[1]+1);} );\\n        partial_sum(areas.begin(), areas.end(), areas.begin());\\n        double total = areas.back();\\n        transform(areas.begin(), areas.end(), areas.begin(), [&total](auto const& a) { return int(a/total*100);} );\\n        this->rects.swap(rects);\\n        srand(time(NULL));\\n    }\\n    \\n    vector<int> pick() {\\n        int i = lower_bound(areas.begin(), areas.end(), rand() % 100) - areas.begin();\\n        int x = rand() % (rects[i][2] - rects[i][0] + 1) + rects[i][0];\\n        int y = rand() % (rects[i][3] - rects[i][1] + 1) + rects[i][1];\\n        return {x, y};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2927044,
                "title": "c-beats-100-time-binary-search",
                "content": "# Approach\\nArea of a rectangle is the total number of points which we should randomly choose from. Create a prefix sum array where `ps[i]` is the sum of areas of all rectangles up to `i`-th. Choose a point `k = rand()%ps[n-1]`, and use binary search on the `ps` array to determine which rectangle this point belongs to.  \\n\\n# Complexity\\n- Time complexity: $O(n \\\\log n)$\\n\\n- Space complexity: $O(n)$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int n;\\n    vector <int> ps;\\n    int area(vector<int> &r) {\\n        return ((r[2]-r[0]+1))*((r[3]-r[1]+1));\\n    }\\n    vector<vector<int>> rects;\\n    Solution(vector<vector<int>>& _rects) {\\n        rects = _rects;\\n        n = rects.size();\\n        ps.resize(n);\\n        ps[0] = area(rects[0]);\\n        for (int i = 1; i < n; i++) {\\n            ps[i] = ps[i-1] + area(rects[i]); \\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int k = rand()%ps[n-1]; \\n        int idx = lower_bound(ps.begin(), ps.end(), k+1) - ps.begin();\\n        k -= (idx > 0 ? ps[idx-1] : 0); \\n        int side = rects[idx][2]-rects[idx][0]+1; \\n        return {rects[idx][0] + k%side, rects[idx][1] + k/side}; \\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int n;\\n    vector <int> ps;\\n    int area(vector<int> &r) {\\n        return ((r[2]-r[0]+1))*((r[3]-r[1]+1));\\n    }\\n    vector<vector<int>> rects;\\n    Solution(vector<vector<int>>& _rects) {\\n        rects = _rects;\\n        n = rects.size();\\n        ps.resize(n);\\n        ps[0] = area(rects[0]);\\n        for (int i = 1; i < n; i++) {\\n            ps[i] = ps[i-1] + area(rects[i]); \\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int k = rand()%ps[n-1]; \\n        int idx = lower_bound(ps.begin(), ps.end(), k+1) - ps.begin();\\n        k -= (idx > 0 ? ps[idx-1] : 0); \\n        int side = rects[idx][2]-rects[idx][0]+1; \\n        return {rects[idx][0] + k%side, rects[idx][1] + k/side}; \\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2863064,
                "title": "just-a-runnalbe-solution",
                "content": "# Code\\n```\\nstruct Solution {\\n    rects: Vec<Vec<i32>>,\\n    c_areas: Vec<i32>,\\n}\\n\\nimpl Solution {\\n    fn new(rects: Vec<Vec<i32>>) -> Self {\\n        let mut c_areas = vec![0];\\n        for rect in &rects {\\n            let area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            c_areas.push(area + c_areas[c_areas.len() - 1]);\\n        }\\n        Solution {\\n            rects,\\n            c_areas,\\n        }\\n    }\\n\\n    fn pick(&self) -> Vec<i32> {\\n        use rand::Rng;\\n        let r = rand::thread_rng().gen_range(0 , self.c_areas[self.c_areas.len() - 1]) + 1;\\n        let i = self.c_areas.binary_search(&r).unwrap_or_else(|x| x) - 1;\\n        let rect = &self.rects[i];\\n        let x = rand::thread_rng().gen_range(rect[0] , rect[2] + 1);\\n        let y = rand::thread_rng().gen_range(rect[1] , rect[3] + 1);\\n        vec![x, y]\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nstruct Solution {\\n    rects: Vec<Vec<i32>>,\\n    c_areas: Vec<i32>,\\n}\\n\\nimpl Solution {\\n    fn new(rects: Vec<Vec<i32>>) -> Self {\\n        let mut c_areas = vec![0];\\n        for rect in &rects {\\n            let area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            c_areas.push(area + c_areas[c_areas.len() - 1]);\\n        }\\n        Solution {\\n            rects,\\n            c_areas,\\n        }\\n    }\\n\\n    fn pick(&self) -> Vec<i32> {\\n        use rand::Rng;\\n        let r = rand::thread_rng().gen_range(0 , self.c_areas[self.c_areas.len() - 1]) + 1;\\n        let i = self.c_areas.binary_search(&r).unwrap_or_else(|x| x) - 1;\\n        let rect = &self.rects[i];\\n        let x = rand::thread_rng().gen_range(rect[0] , rect[2] + 1);\\n        let y = rand::thread_rng().gen_range(rect[1] , rect[3] + 1);\\n        vec![x, y]\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2853366,
                "title": "c",
                "content": "```\\ntypedef struct {\\n    int** rects;    \\n    int   rectsSize;\\n    int*  cn;\\n    int size;\\n} Solution;\\n\\nint BFS(int* nums, int n, int val){\\n    int left = 0, right = n-1;\\n    int mid;\\n    while(left < right){\\n        mid = left + (right - left)/2;\\n        if(nums[mid] < val)\\n            left = mid + 1;\\n        else\\n            right = mid;\\n    }\\n    return left;\\n}\\n\\nSolution* solutionCreate(int** rects, int rectsSize, int* rectsColSize) {\\n    Solution* ret = malloc(sizeof(Solution));\\n    ret->cn = malloc( rectsSize  * sizeof(int));\\n    ret->size = 0;\\n    for(int i = 0; i < rectsSize; i++){\\n        int t = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n        \\n        if(i > 0)\\n            ret->cn[i] = ret->cn[i-1] + t;\\n        else\\n            ret->cn[i] = t;\\n        \\n        ret->size += t;\\n    }\\n    ret->rects = rects;\\n    ret->rectsSize = rectsSize;\\n    return ret;\\n}\\n\\nint* solutionPick(Solution* obj, int* retSize) {\\n    *retSize = 2; \\n    int* ans = malloc(2 * sizeof(int)) ;\\n    int x = rand() % obj->size + 1;\\n    int idx = BFS(obj->cn, obj->rectsSize, x);\\n    if(idx > 0)\\n        x -= obj->cn[idx-1];\\n    x--;\\n    int row = x/(obj->rects[idx][2] - obj->rects[idx][0] + 1);\\n    int col = x % (obj->rects[idx][2] - obj->rects[idx][0] + 1);\\n    //hight\\n    ans[1] = obj->rects[idx][1] + row;\\n    //width\\n    ans[0] = obj->rects[idx][0] + col;\\n    return ans;\\n}\\n\\nvoid solutionFree(Solution* obj) {\\n    free(obj->cn);\\n    free(obj);\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ntypedef struct {\\n    int** rects;    \\n    int   rectsSize;\\n    int*  cn;\\n    int size;\\n} Solution;\\n\\nint BFS(int* nums, int n, int val){\\n    int left = 0, right = n-1;\\n    int mid;\\n    while(left < right){\\n        mid = left + (right - left)/2;\\n        if(nums[mid] < val)\\n            left = mid + 1;\\n        else\\n            right = mid;\\n    }\\n    return left;\\n}\\n\\nSolution* solutionCreate(int** rects, int rectsSize, int* rectsColSize) {\\n    Solution* ret = malloc(sizeof(Solution));\\n    ret->cn = malloc( rectsSize  * sizeof(int));\\n    ret->size = 0;\\n    for(int i = 0; i < rectsSize; i++){\\n        int t = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n        \\n        if(i > 0)\\n            ret->cn[i] = ret->cn[i-1] + t;\\n        else\\n            ret->cn[i] = t;\\n        \\n        ret->size += t;\\n    }\\n    ret->rects = rects;\\n    ret->rectsSize = rectsSize;\\n    return ret;\\n}\\n\\nint* solutionPick(Solution* obj, int* retSize) {\\n    *retSize = 2; \\n    int* ans = malloc(2 * sizeof(int)) ;\\n    int x = rand() % obj->size + 1;\\n    int idx = BFS(obj->cn, obj->rectsSize, x);\\n    if(idx > 0)\\n        x -= obj->cn[idx-1];\\n    x--;\\n    int row = x/(obj->rects[idx][2] - obj->rects[idx][0] + 1);\\n    int col = x % (obj->rects[idx][2] - obj->rects[idx][0] + 1);\\n    //hight\\n    ans[1] = obj->rects[idx][1] + row;\\n    //width\\n    ans[0] = obj->rects[idx][0] + col;\\n    return ans;\\n}\\n\\nvoid solutionFree(Solution* obj) {\\n    free(obj->cn);\\n    free(obj);\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2829839,
                "title": "java-c-100-00-99-33-faster",
                "content": "Runtime: 52 ms, faster than 100.00%\\nMemory Usage: 48.3 MB, less than 98.86%\\n\\n\\tclass Solution \\n\\t{\\n\\t\\tprotected int[][] units;\\n\\t\\tprotected int totalSum = 0;\\n\\t\\tprotected Random rand = new Random();\\n\\n\\t\\tpublic Solution(int[][] rects) \\n\\t\\t{\\n\\t\\t\\t// we can use the built-in random function just for one time\\n\\t\\t\\t// and as a result we no longer need the \\'y2\\' value in the \\'pick\\' method\\n\\t\\t\\t// and also we can take advantage of this fact\\n\\n\\t\\t\\tunits = rects;\\n\\n\\t\\t\\tfor (int[] theRec: rects)\\n\\t\\t\\t{    \\n\\t\\t\\t\\t//theRec: [x1, y1, x2, y2]\\n\\t\\t\\t\\ttotalSum += (theRec[2] - theRec[0] + 1) * (theRec[3] - theRec[1] + 1);\\n\\t\\t\\t\\ttheRec[3] = totalSum;\\n\\t\\t\\t\\t//theRec: [x1, y1, x2, totalSum]\\n\\t\\t\\t}\\n\\n\\t\\t\\t++totalSum; // since rand.nextInt() is exclusive in the upper bound\\n\\t\\t}\\n\\n\\t\\tprotected int bisect_left(int target)\\n\\t\\t{     \\n\\t\\t\\tint left = 0, right = units.length, mid;\\n\\n\\t\\t\\twhile (left < right)\\n\\t\\t\\t{         \\n\\t\\t\\t\\tmid = (left + right) >> 1;   //(left + right) / 2\\n\\n\\t\\t\\t\\tif (units[mid][3] < target)\\n\\t\\t\\t\\t\\tleft = mid + 1;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tright = mid;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn left;\\n\\t\\t}\\n\\n\\t\\tpublic int[] pick() \\n\\t\\t{\\n\\t\\t\\tint rnd = rand.nextInt(1, totalSum);\\n\\t\\t\\tint indx = bisect_left(rnd);\\n\\t\\t\\tint[] theUnit = units[indx];\\n\\n\\t\\t\\tint a = rnd - (indx != 0 ? units[indx - 1][3] : 0) - 1;\\n\\t\\t\\tint b = theUnit[2] - theUnit[0] + 1;\\n\\n\\t\\t\\treturn new int[]\\n\\t\\t\\t{\\n\\t\\t\\t\\ttheUnit[0] + a % b,\\n\\t\\t\\t\\ttheUnit[1] + a / b\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\n\\n\\t/**\\n\\t * Your Solution object will be instantiated and called as such:\\n\\t * Solution obj = new Solution(rects);\\n\\t * int[] param_1 = obj.pick();\\n\\t */\\n\\t \\nRuntime: 79 ms, faster than 99.33%\\nMemory Usage: 66.8 MB, less than 100.00%\\n\\n\\tclass Solution \\n\\t{\\n\\tprotected:\\n\\t\\tvector<vector<int>>& units;\\n\\t\\tint totalSum = 0;\\n\\n\\t\\tint bisect_left(int target)\\n\\t\\t{     \\n\\t\\t\\tint left = 0, right = units.size(), mid;\\n\\n\\t\\t\\twhile (left < right)\\n\\t\\t\\t{         \\n\\t\\t\\t\\tmid = (left + right) >> 1;   //(left + right) / 2\\n\\n\\t\\t\\t\\tif (units[mid][3] < target)\\n\\t\\t\\t\\t\\tleft = mid + 1;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tright = mid;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn left;\\n\\t\\t}\\n\\n\\tpublic:\\n\\t\\tSolution(vector<vector<int>>& rects) : units(rects)\\n\\t\\t{\\n\\t\\t\\t// we can use the built-in rand function just for one time\\n\\t\\t\\t// and as a result we no longer need the \\'y2\\' value in the \\'pick\\' method\\n\\t\\t\\t// and also we can take advantage of this fact\\n\\n\\t\\t\\tfor (auto& theRec: rects)\\n\\t\\t\\t{    \\n\\t\\t\\t\\t//theRec: [x1, y1, x2, y2]\\n\\t\\t\\t\\ttotalSum += (theRec[2] - theRec[0] + 1) * (theRec[3] - theRec[1] + 1);\\n\\t\\t\\t\\ttheRec[3] = totalSum;\\n\\t\\t\\t\\t//theRec: [x1, y1, x2, totalSum]\\n\\t\\t\\t}\\n\\n\\t\\t\\tsrand(time(0));\\n\\t\\t}\\n\\n\\t\\tvector<int> pick() \\n\\t\\t{\\n\\t\\t\\tint rnd = rand() % totalSum + 1;\\n\\t\\t\\tint indx = bisect_left(rnd);\\n\\t\\t\\tauto& theUnit = units[indx];\\n\\n\\t\\t\\tint a = rnd - (indx ? units[indx - 1][3] : 0) - 1;\\n\\t\\t\\tint b = theUnit[2] - theUnit[0] + 1;\\n\\n\\t\\t\\treturn\\n\\t\\t\\t{\\n\\t\\t\\t\\ttheUnit[0] + a % b,\\n\\t\\t\\t\\ttheUnit[1] + a / b\\n\\t\\t\\t};\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n\\t * Your Solution object will be instantiated and called as such:\\n\\t * Solution* obj = new Solution(rects);\\n\\t * vector<int> param_1 = obj->pick();\\n\\t */",
                "solutionTags": [
                    "Java",
                    "C",
                    "Binary Tree"
                ],
                "code": "class Solution \\n\\t{\\n\\t\\tprotected int[][] units;\\n\\t\\tprotected int totalSum = 0;\\n\\t\\tprotected Random rand = new Random();\\n\\n\\t\\tpublic Solution(int[][] rects) \\n\\t\\t{\\n\\t\\t\\t// we can use the built-in random function just for one time\\n\\t\\t\\t// and as a result we no longer need the \\'y2\\' value in the \\'pick\\' method\\n\\t\\t\\t// and also we can take advantage of this fact\\n\\n\\t\\t\\tunits = rects;\\n\\n\\t\\t\\tfor (int[] theRec: rects)\\n\\t\\t\\t{    \\n\\t\\t\\t\\t//theRec: [x1, y1, x2, y2]\\n\\t\\t\\t\\ttotalSum += (theRec[2] - theRec[0] + 1) * (theRec[3] - theRec[1] + 1);\\n\\t\\t\\t\\ttheRec[3] = totalSum;\\n\\t\\t\\t\\t//theRec: [x1, y1, x2, totalSum]\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2828300,
                "title": "python-simple-100-00-faster-runtime-125-ms",
                "content": "Runtime: 157 ms, faster than 100.00%\\nMemory Usage: 17.5 MB, less than 14.29%\\n\\n\\tclass Solution(object):\\n\\t\\tdef __init__(self, rects):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type rects: List[List[int]]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tself.rects = rects\\n\\n\\t\\t\\t#Cumulative sum\\n\\t\\t\\tself.surfaces = [0] * len(rects)\\n\\t\\t\\ts = 0\\n\\t\\t\\tfor i, theRec in enumerate(rects):\\n\\t\\t\\t\\ts += (theRec[2] - theRec[0] + 1) * (theRec[3] - theRec[1] + 1)\\n\\t\\t\\t\\tself.surfaces[i] = s\\n\\n\\n\\t\\tdef pick(self):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:rtype: List[int]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tidx = bisect_left(self.surfaces, randint(1, self.surfaces[-1]))\\n\\t\\t\\ttheRec = self.rects[idx]\\n\\t\\t\\treturn randint(theRec[0], theRec[2]), randint(theRec[1], theRec[3])\\n\\n\\n\\n\\t# Your Solution object will be instantiated and called as such:\\n\\t# obj = Solution(rects)\\n\\t# param_1 = obj.pick()\\n\\t\\n\\t\\nRuntime: 125 ms, faster than 100.00%\\nMemory Usage: 17.1 MB, less than 100.00%\\n\\n\\n\\n\\tclass Solution(object):\\n\\t\\tdef __init__(self, rects):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type rects: List[List[int]]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t#we can use the \\'randint\\' just for one time\\n\\t\\t\\t#and as a result we no longer need the \\'y2\\' value in the \\'pick\\' method\\n\\t\\t\\t#and also we can take advantage of this fact\\n\\n\\t\\t\\tself.list = rects\\n\\t\\t\\tself.totalSum = 0\\n\\n\\t\\t\\tfor theRec in rects:\\n\\t\\t\\t\\t#theRec: [x1, y1, x2, y2]\\n\\t\\t\\t\\tself.totalSum += (theRec[2] - theRec[0] + 1) * (theRec[3] - theRec[1] + 1)\\n\\t\\t\\t\\ttheRec[1:], theRec[0] = theRec[:-1], self.totalSum\\n\\t\\t\\t\\t#theRec: [self.totalSum, x1, y1, x2]\\n\\n\\n\\t\\tdef pick(self):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:rtype: List[int]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\trnd = randint(1, self.totalSum)\\n\\t\\t\\tindx = bisect_left(self.list, [rnd])\\n\\t\\t\\ttheUnit = self.list[indx]\\n\\t\\t\\tq, r = divmod(rnd - (self.list[indx - 1][0] if indx else 0) - 1, theUnit[3] - theUnit[1] + 1)\\n\\t\\t\\treturn theUnit[1] + r, theUnit[2] + q\\n\\n\\n\\n\\t# Your Solution object will be instantiated and called as such:\\n\\t# obj = Solution(rects)\\n\\t# param_1 = obj.pick()",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "Runtime: 157 ms, faster than 100.00%\\nMemory Usage: 17.5 MB, less than 14.29%\\n\\n\\tclass Solution(object):\\n\\t\\tdef __init__(self, rects):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type rects: List[List[int]]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tself.rects = rects\\n\\n\\t\\t\\t#Cumulative sum\\n\\t\\t\\tself.surfaces = [0] * len(rects)\\n\\t\\t\\ts = 0\\n\\t\\t\\tfor i, theRec in enumerate(rects):\\n\\t\\t\\t\\ts += (theRec[2] - theRec[0] + 1) * (theRec[3] - theRec[1] + 1)\\n\\t\\t\\t\\tself.surfaces[i] = s\\n\\n\\n\\t\\tdef pick(self):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:rtype: List[int]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tidx = bisect_left(self.surfaces, randint(1, self.surfaces[-1]))\\n\\t\\t\\ttheRec = self.rects[idx]\\n\\t\\t\\treturn randint(theRec[0], theRec[2]), randint(theRec[1], theRec[3])\\n\\n\\n\\n\\t# Your Solution object will be instantiated and called as such:\\n\\t# obj = Solution(rects)\\n\\t# param_1 = obj.pick()\\n\\t\\n\\t\\nRuntime: 125 ms, faster than 100.00%\\nMemory Usage: 17.1 MB, less than 100.00%\\n\\n\\n\\n\\tclass Solution(object):\\n\\t\\tdef __init__(self, rects):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type rects: List[List[int]]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t#we can use the \\'randint\\' just for one time\\n\\t\\t\\t#and as a result we no longer need the \\'y2\\' value in the \\'pick\\' method\\n\\t\\t\\t#and also we can take advantage of this fact\\n\\n\\t\\t\\tself.list = rects\\n\\t\\t\\tself.totalSum = 0\\n\\n\\t\\t\\tfor theRec in rects:\\n\\t\\t\\t\\t#theRec: [x1, y1, x2, y2]\\n\\t\\t\\t\\tself.totalSum += (theRec[2] - theRec[0] + 1) * (theRec[3] - theRec[1] + 1)\\n\\t\\t\\t\\ttheRec[1:], theRec[0] = theRec[:-1], self.totalSum\\n\\t\\t\\t\\t#theRec: [self.totalSum, x1, y1, x2]\\n\\n\\n\\t\\tdef pick(self):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:rtype: List[int]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\trnd = randint(1, self.totalSum)\\n\\t\\t\\tindx = bisect_left(self.list, [rnd])\\n\\t\\t\\ttheUnit = self.list[indx]\\n\\t\\t\\tq, r = divmod(rnd - (self.list[indx - 1][0] if indx else 0) - 1, theUnit[3] - theUnit[1] + 1)\\n\\t\\t\\treturn theUnit[1] + r, theUnit[2] + q\\n\\n\\n\\n\\t# Your Solution object will be instantiated and called as such:\\n\\t# obj = Solution(rects)\\n\\t# param_1 = obj.pick()",
                "codeTag": "Java"
            },
            {
                "id": 2763116,
                "title": "c-solution-with-comment",
                "content": "```\\nclass Solution {\\npublic:\\n    int n; //number of rectangles\\n    std::vector<std::vector<int>> myRects;\\n    std::vector<int> vArea;\\n    int total;\\n    \\n    int myBinarySearch(int x){\\n        // 1<=x<=total\\n        // return the smallest index i such that x<=vArea[i]\\n        if (x <= vArea[0]) return 0;\\n        \\n        int left = 0; \\n        int right = vArea.size()-1;\\n        int mid;\\n        while (left<right){\\n            if (right-left==1) break;\\n            \\n            mid = (left+right)/2;\\n            if (vArea[mid] < x){\\n                left = mid;\\n            }else if (vArea[mid] >= x){\\n                right = mid;\\n            }\\n        }\\n        return right;\\n    }\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        srand(time(NULL));\\n        myRects = rects;\\n        n = rects.size();\\n        int currArea;\\n        int accArea = 0;\\n        for (int i=0; i<n; i++){\\n            //currArea counts number of integral points in rects[i]\\n            currArea= (rects[i][2]-rects[i][0]+1)*(rects[i][3]-rects[i][1]+1);\\n            //accArea counts the accumulated number of integral points up to rects[i]\\n            accArea += currArea;\\n            vArea.push_back(accArea);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        //randomly pick a rectangle in rects: rects[index]\\n        /* \\n        Suppose vArea = {v0, v1, ..., vN=total},\\n        meaning that rects[0] has v0 integral points inside,\\n        rects[1] has (v1-v0) integral points inside and so on.\\n        \\n        We pick a random number 1<=r<=toal\\n        if (r=1,2,...,v0), then index=0\\n        if (r=v0+1,...,v1), then index=1\\n        if (r=v1+1,...,v2), then index=2 ...(and so on)\\n        */\\n        total = vArea.back();\\n        int r = 1 + (rand()%total);\\n        int index = myBinarySearch(r);\\n        //\\n        //randomly pick a point in rects[index]\\n        int a = myRects[index][0];\\n        int b = myRects[index][1];\\n        int x = myRects[index][2];\\n        int y = myRects[index][3];\\n        \\n        int xRand = a + rand()%(x-a+1);\\n        int yRand = b + rand()%(y-b+1);\\n        \\n        return std::vector<int>{xRand, yRand};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int n; //number of rectangles\\n    std::vector<std::vector<int>> myRects;\\n    std::vector<int> vArea;\\n    int total;\\n    \\n    int myBinarySearch(int x){\\n        // 1<=x<=total\\n        // return the smallest index i such that x<=vArea[i]\\n        if (x <= vArea[0]) return 0;\\n        \\n        int left = 0; \\n        int right = vArea.size()-1;\\n        int mid;\\n        while (left<right){\\n            if (right-left==1) break;\\n            \\n            mid = (left+right)/2;\\n            if (vArea[mid] < x){\\n                left = mid;\\n            }else if (vArea[mid] >= x){\\n                right = mid;\\n            }\\n        }\\n        return right;\\n    }\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        srand(time(NULL));\\n        myRects = rects;\\n        n = rects.size();\\n        int currArea;\\n        int accArea = 0;\\n        for (int i=0; i<n; i++){\\n            //currArea counts number of integral points in rects[i]\\n            currArea= (rects[i][2]-rects[i][0]+1)*(rects[i][3]-rects[i][1]+1);\\n            //accArea counts the accumulated number of integral points up to rects[i]\\n            accArea += currArea;\\n            vArea.push_back(accArea);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        //randomly pick a rectangle in rects: rects[index]\\n        /* \\n        Suppose vArea = {v0, v1, ..., vN=total},\\n        meaning that rects[0] has v0 integral points inside,\\n        rects[1] has (v1-v0) integral points inside and so on.\\n        \\n        We pick a random number 1<=r<=toal\\n        if (r=1,2,...,v0), then index=0\\n        if (r=v0+1,...,v1), then index=1\\n        if (r=v1+1,...,v2), then index=2 ...(and so on)\\n        */\\n        total = vArea.back();\\n        int r = 1 + (rand()%total);\\n        int index = myBinarySearch(r);\\n        //\\n        //randomly pick a point in rects[index]\\n        int a = myRects[index][0];\\n        int b = myRects[index][1];\\n        int x = myRects[index][2];\\n        int y = myRects[index][3];\\n        \\n        int xRand = a + rand()%(x-a+1);\\n        int yRand = b + rand()%(y-b+1);\\n        \\n        return std::vector<int>{xRand, yRand};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2761112,
                "title": "go-point-index-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nEvery point of every rect can be given an index.\\nIf the total count of the points is known one call to random number generator is enough to know both the rect and the point on the rect.\\nOnce the random point is picked, go through each rect to find which one has that point, and then where on the rect the point is.   \\n\\n\\n# Code\\n```\\ntype Solution struct {\\n    pointCount int\\n    rects [][]int\\n}\\n\\nfunc Constructor(rects [][]int) Solution {\\n    pointCount := 0\\n    for _, r := range rects {\\n        pointCount += (r[2]-r[0]+1)*(r[3]-r[1]+1)\\n    }\\n    return Solution {\\n        pointCount: pointCount,\\n        rects: rects,\\n    }    \\n}\\n\\nfunc (this *Solution) Pick() []int {\\n    n := rand.Intn(this.pointCount)\\n\\n    idx := 0\\n    for _, r := range this.rects {\\n        width := r[2]-r[0]+1\\n        height := r[3]-r[1]+1\\n        points := width*height\\n\\n        // is the point somewhere on the r rect?\\n        if idx + points > n {\\n            n -= idx // point index on this rect\\n            x := n%width+r[0]\\n            y := n/width+r[1]\\n            return []int{x,y}\\n        }\\n\\n        idx += points\\n    }\\n\\n    return nil\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Solution struct {\\n    pointCount int\\n    rects [][]int\\n}\\n\\nfunc Constructor(rects [][]int) Solution {\\n    pointCount := 0\\n    for _, r := range rects {\\n        pointCount += (r[2]-r[0]+1)*(r[3]-r[1]+1)\\n    }\\n    return Solution {\\n        pointCount: pointCount,\\n        rects: rects,\\n    }    \\n}\\n\\nfunc (this *Solution) Pick() []int {\\n    n := rand.Intn(this.pointCount)\\n\\n    idx := 0\\n    for _, r := range this.rects {\\n        width := r[2]-r[0]+1\\n        height := r[3]-r[1]+1\\n        points := width*height\\n\\n        // is the point somewhere on the r rect?\\n        if idx + points > n {\\n            n -= idx // point index on this rect\\n            x := n%width+r[0]\\n            y := n/width+r[1]\\n            return []int{x,y}\\n        }\\n\\n        idx += points\\n    }\\n\\n    return nil\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2732621,
                "title": "solved-help-me-pls-what-mistake-did-i-make-in-my-solution",
                "content": "32 / 35 test cases passed.\\n\\n```\\npublic class Solution\\n    {\\n        List<(int area, int[] points)> _rectsList = new();\\n        readonly int _totalArea = 0;\\n\\n        Random rnd;\\n        public Solution(int[][] rects)\\n        {\\n            rnd = new();\\n\\n            foreach (var rect in rects)\\n            {\\n                var area = (rect[2] - rect[0]) * (rect[3] - rect[1]);\\n                _totalArea += area;\\n                _rectsList.Add((_totalArea, rect));\\n            }\\n        }\\n\\n        public int[] Pick()\\n        {\\n            var rndArea = rnd.NextDouble() * _totalArea;\\n\\n            if (rndArea >= 0 && rndArea <= _rectsList[0].area)\\n            {\\n                return new int[]\\n                {\\n                    rnd.Next(_rectsList[0].points[0], _rectsList[0].points[2]),\\n                    rnd.Next(_rectsList[0].points[1], _rectsList[0].points[3])\\n                };\\n            }\\n\\n            for (int i = 1; i < _rectsList.Count; i++)\\n            {\\n                if (rndArea > _rectsList[i - 1].area && rndArea <= _rectsList[i].area)\\n                {\\n                    return new int[]\\n                    {\\n                        rnd.Next(_rectsList[i].points[0], _rectsList[i].points[2]),\\n                        rnd.Next(_rectsList[i].points[1], _rectsList[i].points[3])\\n                    };\\n                }\\n            }\\n\\n            return null;\\n        }\\n    }\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n    {\\n        List<(int area, int[] points)> _rectsList = new();\\n        readonly int _totalArea = 0;\\n\\n        Random rnd;\\n        public Solution(int[][] rects)\\n        {\\n            rnd = new();\\n\\n            foreach (var rect in rects)\\n            {\\n                var area = (rect[2] - rect[0]) * (rect[3] - rect[1]);\\n                _totalArea += area;\\n                _rectsList.Add((_totalArea, rect));\\n            }\\n        }\\n\\n        public int[] Pick()\\n        {\\n            var rndArea = rnd.NextDouble() * _totalArea;\\n\\n            if (rndArea >= 0 && rndArea <= _rectsList[0].area)\\n            {\\n                return new int[]\\n                {\\n                    rnd.Next(_rectsList[0].points[0], _rectsList[0].points[2]),\\n                    rnd.Next(_rectsList[0].points[1], _rectsList[0].points[3])\\n                };\\n            }\\n\\n            for (int i = 1; i < _rectsList.Count; i++)\\n            {\\n                if (rndArea > _rectsList[i - 1].area && rndArea <= _rectsList[i].area)\\n                {\\n                    return new int[]\\n                    {\\n                        rnd.Next(_rectsList[i].points[0], _rectsList[i].points[2]),\\n                        rnd.Next(_rectsList[i].points[1], _rectsList[i].points[3])\\n                    };\\n                }\\n            }\\n\\n            return null;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2717422,
                "title": "why-this-solution-isn-t-working",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    \\n    long long totalArea, rectNumber, totalRectangle, i;\\n    vector<vector<int >> rectangles;\\n    vector<long long> pref;\\n    Solution(vector<vector<int>> rects) {\\n        // we are given a rectangle and is asked to return a random point inside rectangle such that all points are equally likely to be returned\\n        \\n        // first we can think of using rand() pre defined function to generate a random number but here all the points or values are not equally likely to occur so\\n        // now we can think of generating points linearly..... here all the points will be equally likely to occur\\n        // what I meant by linearly generating points is\\n        // we will linearly iterate from \\n        // 0 to (total area - 1) then again (0 to (total area - 1)) and so onn..\\n        // and then we will generate a point corresponding to that value\\n        \\n        \\n        i = -1; \\n        totalRectangle = rects.size();\\n        rectNumber = 0;\\n        totalArea = 0;\\n        \\n        for(int j = 0; j < totalRectangle; j++){\\n            if(rects[j][0] > rects[j][2])\\n            swap(rects[j][0],rects[j][2]);\\n        \\n        if(rects[j][1] > rects[j][3])\\n            swap(rects[j][1],rects[j][3]);\\n            \\n            totalArea += (long long)(rects[j][2] - rects[j][0] + 1) * (rects[j][3] - rects[j][1] + 1);\\n            pref.push_back(totalArea);\\n        }\\n            \\n        \\n        rectangles = rects;\\n    }\\n    void swap(int &a, int &b)\\n    {\\n        int c = a;\\n        a = b;\\n        b = c;\\n    }\\n    vector<int> pick() {\\n        \\n        if(rectangles[rectNumber][0] > rectangles[rectNumber][2])\\n            swap(rectangles[rectNumber][0],rectangles[rectNumber][2]);\\n        \\n        if(rectangles[rectNumber][1] > rectangles[rectNumber][3])\\n            swap(rectangles[rectNumber][1],rectangles[rectNumber][3]);\\n        \\n        i++;\\n        long long j = i, area = pref[0];\\n        \\n        if(i == pref[rectNumber])\\n            rectNumber = (rectNumber+1 )%totalRectangle;\\n        \\n        if(rectNumber != 0){\\n           j -= pref[rectNumber - 1]; \\n            area = pref[rectNumber] - pref[rectNumber - 1];\\n        }\\n        \\n        vector<int> v(2);\\n        \\n        v[0] = rectangles[rectNumber][0] + j/(rectangles[rectNumber][2]-rectangles[rectNumber][0] + 1);\\n        v[1] = rectangles[rectNumber][1]+ j%(rectangles[rectNumber][2]-rectangles[rectNumber][0] + 1);\\n        return v;\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    \\n    long long totalArea, rectNumber, totalRectangle, i;\\n    vector<vector<int >> rectangles;\\n    vector<long long> pref;\\n    Solution(vector<vector<int>> rects) {\\n        // we are given a rectangle and is asked to return a random point inside rectangle such that all points are equally likely to be returned\\n        \\n        // first we can think of using rand() pre defined function to generate a random number but here all the points or values are not equally likely to occur so\\n        // now we can think of generating points linearly..... here all the points will be equally likely to occur\\n        // what I meant by linearly generating points is\\n        // we will linearly iterate from \\n        // 0 to (total area - 1) then again (0 to (total area - 1)) and so onn..\\n        // and then we will generate a point corresponding to that value\\n        \\n        \\n        i = -1; \\n        totalRectangle = rects.size();\\n        rectNumber = 0;\\n        totalArea = 0;\\n        \\n        for(int j = 0; j < totalRectangle; j++){\\n            if(rects[j][0] > rects[j][2])\\n            swap(rects[j][0],rects[j][2]);\\n        \\n        if(rects[j][1] > rects[j][3])\\n            swap(rects[j][1],rects[j][3]);\\n            \\n            totalArea += (long long)(rects[j][2] - rects[j][0] + 1) * (rects[j][3] - rects[j][1] + 1);\\n            pref.push_back(totalArea);\\n        }\\n            \\n        \\n        rectangles = rects;\\n    }\\n    void swap(int &a, int &b)\\n    {\\n        int c = a;\\n        a = b;\\n        b = c;\\n    }\\n    vector<int> pick() {\\n        \\n        if(rectangles[rectNumber][0] > rectangles[rectNumber][2])\\n            swap(rectangles[rectNumber][0],rectangles[rectNumber][2]);\\n        \\n        if(rectangles[rectNumber][1] > rectangles[rectNumber][3])\\n            swap(rectangles[rectNumber][1],rectangles[rectNumber][3]);\\n        \\n        i++;\\n        long long j = i, area = pref[0];\\n        \\n        if(i == pref[rectNumber])\\n            rectNumber = (rectNumber+1 )%totalRectangle;\\n        \\n        if(rectNumber != 0){\\n           j -= pref[rectNumber - 1]; \\n            area = pref[rectNumber] - pref[rectNumber - 1];\\n        }\\n        \\n        vector<int> v(2);\\n        \\n        v[0] = rectangles[rectNumber][0] + j/(rectangles[rectNumber][2]-rectangles[rectNumber][0] + 1);\\n        v[1] = rectangles[rectNumber][1]+ j%(rectangles[rectNumber][2]-rectangles[rectNumber][0] + 1);\\n        return v;\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2680159,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> np;\\n    vector<vector<int>> Rects;\\n    Solution(vector<vector<int>>& rects) {\\n        Rects = rects;\\n        for(auto rect : rects){\\n            int l = rect[2] - rect[0] + 1;\\n            int w = rect[3] - rect[1] + 1;\\n            int val = np.size() ? np.back() + (l*w) : l*w; \\n            np.push_back(val);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int m = np.back();\\n        int r = rand() % m;\\n        auto it = upper_bound(np.begin(), np.end(), r);\\n        int rect = it - np.begin(); \\n\\t\\t\\n        vector<int> R = Rects[rect];\\n        int x = rand() % (R[2]-R[0]+1) + R[0];\\n        int y = rand() % (R[3]-R[1]+1) + R[1];\\n        return {x, y};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> np;\\n    vector<vector<int>> Rects;\\n    Solution(vector<vector<int>>& rects) {\\n        Rects = rects;\\n        for(auto rect : rects){\\n            int l = rect[2] - rect[0] + 1;\\n            int w = rect[3] - rect[1] + 1;\\n            int val = np.size() ? np.back() + (l*w) : l*w; \\n            np.push_back(val);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int m = np.back();\\n        int r = rand() % m;\\n        auto it = upper_bound(np.begin(), np.end(), r);\\n        int rect = it - np.begin(); \\n\\t\\t\\n        vector<int> R = Rects[rect];\\n        int x = rand() % (R[2]-R[0]+1) + R[0];\\n        int y = rand() % (R[3]-R[1]+1) + R[1];\\n        return {x, y};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2642512,
                "title": "python-binary-search-solution",
                "content": "# Code\\n```\\nimport random\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.res=[(0,)]\\n        for i,j,k,l in rects:\\n            area=self.res[-1][0]+(l-j+1)*(k-i+1)\\n            self.res.append((area, i, j, k-i+1))\\n    def pick(self) -> List[int]:\\n        num=random.random()\\n        area=int(num*(self.res[-1][0]))\\n        index=bisect_left(self.res, (area+1,))\\n        diff=area-self.res[index-1][0]\\n        x=self.res[index][1]+diff%self.res[index][-1]\\n        y=self.res[index][2]+diff//self.res[index][-1]\\n        return [x, y]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport random\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.res=[(0,)]\\n        for i,j,k,l in rects:\\n            area=self.res[-1][0]+(l-j+1)*(k-i+1)\\n            self.res.append((area, i, j, k-i+1))\\n    def pick(self) -> List[int]:\\n        num=random.random()\\n        area=int(num*(self.res[-1][0]))\\n        index=bisect_left(self.res, (area+1,))\\n        diff=area-self.res[index-1][0]\\n        x=self.res[index][1]+diff%self.res[index][-1]\\n        y=self.res[index][2]+diff//self.res[index][-1]\\n        return [x, y]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2553813,
                "title": "python-readable-and-concise-solution-using-random-choices",
                "content": "The thought process here was:\\n1) If we choose with uniform distribution from both dimensions of a rectangle, we would have a uniform distribution over the whole rectangle\\n2) We also need to choose rectangles, but to ensure a uniform probability over the area covered by both rectangles, we should make a weighted choice\\n3) Dang, I forgot points and lines (rectangles without an area, but still valid for point choice)\\n\\n```\\nfrom random import randint, choices\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        \\n        # get the areas of each rectangle\\n        # add one to rectangles which don\\'t have any area\\n        # because they are a \"point\" or \"line\" which we\\n        # should still consider\\n        areas = [(x - a + 1)*(y-b + 1) for a, b, x, y in self.rects]\\n        \\n        # get the sum of areas\\n        summed = sum(areas)\\n        \\n        # make the probabilities\\n        self.prob = [area/summed for area in areas]\\n\\n    def pick(self) -> List[int]:\\n        \\n        # choose a rectangle according to the probabilites\\n        rect = choices(self.rects, weights=self.prob)[0]\\n        \\n        # choose a random x\\n        x = randint(rect[0], rect[2])\\n        \\n        # choose a random y\\n        y = randint(rect[1], rect[3])\\n        \\n        return (x, y)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom random import randint, choices\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        \\n        # get the areas of each rectangle\\n        # add one to rectangles which don\\'t have any area\\n        # because they are a \"point\" or \"line\" which we\\n        # should still consider\\n        areas = [(x - a + 1)*(y-b + 1) for a, b, x, y in self.rects]\\n        \\n        # get the sum of areas\\n        summed = sum(areas)\\n        \\n        # make the probabilities\\n        self.prob = [area/summed for area in areas]\\n\\n    def pick(self) -> List[int]:\\n        \\n        # choose a rectangle according to the probabilites\\n        rect = choices(self.rects, weights=self.prob)[0]\\n        \\n        # choose a random x\\n        x = randint(rect[0], rect[2])\\n        \\n        # choose a random y\\n        y = randint(rect[1], rect[3])\\n        \\n        return (x, y)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2547053,
                "title": "intuition-with-detailed-explanation-a-modern-c-impl",
                "content": "92 prcntle speed and 91 prcntle memory with no usage of - rand() % size - which internally has a little bias.\\n\\n# Intuition\\n\\nConsider rectangles with area r1, r2, r3, r4, ..., rn.\\n\\n1.  Probability of picking a point from rectangle 1 is ```1/n . 1/r1```\\ni.e. choose the rectangle with probability 1/n followed by probability of chosing a point from the rectangle.\\n\\n2.  So picking a point from each rectangle have probabilities ```1/(n.r1), 1/(n.r2), ..., 1/(n.rn)```.\\n\\n3. Clearly, this is not a uniform distribution unless all rectangles have equal area.\\n\\n4. **So the idea here is to adjust the probability of picking the rectangle such that effect of the varying areas are nullified.**\\n\\n5. This can be done by changing the probability of picking rectangle  r1 to ```r1/(r1+r2+...+rn) ```\\n\\n6. i.e. we need a non-uniform/weighted probability distribution to select the random rectangle.\\n\\n7.  Now, the probability for picking a point from rectangle 1 has changed to ```r1/(r1+r2+...+rn) . 1/r1 = 1/(r1+r2+...+rn).```\\n8. Similarly for rectangle r2 ```r2/(r1+r2+..+rn) . 1/r2 = 1/(r1+r2+..+rn)```.\\n\\n9. Making the required distribution uniform with probability ```1/(r1+r2+..rn)```.\\n10. Note this only holds if none of the rectangles overlap or even share the side with each other.\\n\\n# Notes\\n1. There is already another linked problem explaining how to achieve a weighted/non-uniform probability distribution using cumulative sums in O(log(n)).\\n\\n2. This is the discrete version of the inverse transform sampling in statistics - for more reference to theory.\\n\\n```\\nclass Solution {\\npublic:\\n    Solution(vector<vector<int>>& rects_input)\\n        : rects(std::move(rects_input)),\\n          mt(std::random_device{}())\\n    {\\n        auto cum_wt = 0;\\n        for(auto const& rect : rects)\\n        {\\n            cum_rect_wts.emplace_back(cum_wt += (static_cast<std::uint64_t>((rect[2] - rect[0] + 1)) * (rect[3] - rect[1] + 1)));\\n        }\\n    }\\n    \\n    vector<int> pick() noexcept\\n    {\\n        auto rand_rect_wt = std::uniform_int_distribution{1ul, cum_rect_wts.back()}(mt);\\n        auto rect_index = std::distance(cum_rect_wts.begin(),\\n                                        std::lower_bound(cum_rect_wts.begin(), cum_rect_wts.end(), rand_rect_wt));\\n        auto& rect = rects[rect_index];\\n        return {std::uniform_int_distribution{rect[0], rect[2]}(mt),\\n                std::uniform_int_distribution{rect[1], rect[3]}(mt)};\\n    }\\nprivate:\\n    std::vector<std::uint64_t> cum_rect_wts;\\n    std::vector<std::vector<int>> rects;\\n    std::mt19937 mt;\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```1/n . 1/r1```\n```1/(n.r1), 1/(n.r2), ..., 1/(n.rn)```\n```r1/(r1+r2+...+rn) ```\n```r1/(r1+r2+...+rn) . 1/r1 = 1/(r1+r2+...+rn).```\n```r2/(r1+r2+..+rn) . 1/r2 = 1/(r1+r2+..+rn)```\n```1/(r1+r2+..rn)```\n```\\nclass Solution {\\npublic:\\n    Solution(vector<vector<int>>& rects_input)\\n        : rects(std::move(rects_input)),\\n          mt(std::random_device{}())\\n    {\\n        auto cum_wt = 0;\\n        for(auto const& rect : rects)\\n        {\\n            cum_rect_wts.emplace_back(cum_wt += (static_cast<std::uint64_t>((rect[2] - rect[0] + 1)) * (rect[3] - rect[1] + 1)));\\n        }\\n    }\\n    \\n    vector<int> pick() noexcept\\n    {\\n        auto rand_rect_wt = std::uniform_int_distribution{1ul, cum_rect_wts.back()}(mt);\\n        auto rect_index = std::distance(cum_rect_wts.begin(),\\n                                        std::lower_bound(cum_rect_wts.begin(), cum_rect_wts.end(), rand_rect_wt));\\n        auto& rect = rects[rect_index];\\n        return {std::uniform_int_distribution{rect[0], rect[2]}(mt),\\n                std::uniform_int_distribution{rect[1], rect[3]}(mt)};\\n    }\\nprivate:\\n    std::vector<std::uint64_t> cum_rect_wts;\\n    std::vector<std::vector<int>> rects;\\n    std::mt19937 mt;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2484875,
                "title": "c-binarysearch-prefixsum",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<long long> a;\\n\\t\\tvector<vector<int>> rects;\\n\\t\\tSolution(vector<vector<int>>& rects) {\\n\\t\\t\\tfunction<long long(vector<int>)> np=[&](vector<int> a){\\n\\t\\t\\t\\treturn 1LL*(a[2]-a[0]+1)*(a[3]-a[1]+1);\\n\\t\\t\\t};\\n\\t\\t\\tfor(int i=0;i<rects.size();i++) {\\n\\t\\t\\t\\ta.push_back(np(rects[i])+(a.size()==0?0:a.back()));\\n\\t\\t\\t}\\n\\t\\t\\tthis->rects=rects;\\n\\t\\t}\\n\\n\\t\\tvector<int> pick() {\\n\\t\\t\\tlong long r=rand()%a.back();\\n\\t\\t\\tint l=upper_bound(a.begin(),a.end(),r)-a.begin();\\n\\t\\t\\tint kx=rects[l][0]+rand()%(rects[l][2]-rects[l][0]+1);\\n\\t\\t\\tint ky=rects[l][1]+rand()%(rects[l][3]-rects[l][1]+1);\\n\\t\\t\\treturn {kx,ky};\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C",
                    "Binary Tree",
                    "Prefix Sum"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<long long> a;\\n\\t\\tvector<vector<int>> rects;\\n\\t\\tSolution(vector<vector<int>>& rects) {\\n\\t\\t\\tfunction<long long(vector<int>)> np=[&](vector<int> a){\\n\\t\\t\\t\\treturn 1LL*(a[2]-a[0]+1)*(a[3]-a[1]+1);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2450968,
                "title": "rant",
                "content": "Lost half of my brain cells trying to understand what this problem wants me to do. To the fallen heroic neurons - you will be missed",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2333072,
                "title": "tc-32-35-showing-the-wrong-answer-but-why",
                "content": "class Solution {\\n  int rect[][];\\n    public Solution(int[][] rects) {\\n        rect=new int[rects.length][rects[0].length];\\n        for(int i=0;i<rect.length;i++)\\n        {\\n            for(int j=0;j<rect[0].length;j++)\\n                rect[i][j]=rects[i][j];\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int arr[]=new int[2];\\n        int i= (int)(Math.random()*rect.length);\\n         arr[0]=(rect[i][2]-rect[i][0])/2+rect[i][0];\\n        arr[1]=(rect[i][3]-rect[i][1])/2+rect[i][1];\\n        return arr;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Matrix"
                ],
                "code": "class Solution {\\n  int rect[][];\\n    public Solution(int[][] rects) {\\n        rect=new int[rects.length][rects[0].length];\\n        for(int i=0;i<rect.length;i++)\\n        {\\n            for(int j=0;j<rect[0].length;j++)\\n                rect[i][j]=rects[i][j];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2292198,
                "title": "python-simple-prefix-sum",
                "content": "\\n    def __init__(self, rects):\\n        self.rects = rects\\n        \\n        self.prefix_sum, running_sum = [], 0\\n        \\n        for x1, y1, x2, y2 in rects:\\n            running_sum += (x2 - x1 + 1)*(y2 - y1 + 1)\\n            self.prefix_sum.append(running_sum)\\n            \\n        self.total_sum = running_sum\\n\\n    def pick(self):\\n        target = self.total_sum*random.random()\\n        \\n        low, high = 0, len(self.prefix_sum) -1\\n        \\n        while low <= high:\\n            mid = (low + high)//2\\n            \\n            if target > self.prefix_sum[mid]:\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n                \\n        x1, y1, x2, y2 = self.rects[low]\\n        \\n        return [random.randint(x1,x2), random.randint(y1,y2)]",
                "solutionTags": [],
                "code": "\\n    def __init__(self, rects):\\n        self.rects = rects\\n        \\n        self.prefix_sum, running_sum = [], 0\\n        \\n        for x1, y1, x2, y2 in rects:\\n            running_sum += (x2 - x1 + 1)*(y2 - y1 + 1)\\n            self.prefix_sum.append(running_sum)\\n            \\n        self.total_sum = running_sum\\n\\n    def pick(self):\\n        target = self.total_sum*random.random()\\n        \\n        low, high = 0, len(self.prefix_sum) -1\\n        \\n        while low <= high:\\n            mid = (low + high)//2\\n            \\n            if target > self.prefix_sum[mid]:\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n                \\n        x1, y1, x2, y2 = self.rects[low]\\n        \\n        return [random.randint(x1,x2), random.randint(y1,y2)]",
                "codeTag": "Python3"
            },
            {
                "id": 2270823,
                "title": "python-binary-search-solution",
                "content": "```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        area = [(r[2]-r[0]+1)*(r[3]-r[1]+1) for r in rects]\\n        area = list(accumulate(area))\\n        self.weights = [a/area[-1] for a in area]\\n        self.xy = rects\\n\\n    def pick(self) -> List[int]:\\n        p = random.random()\\n        i = bisect.bisect(self.weights, p)\\n        x1, y1, x2, y2  = self.xy[i]\\n        return [random.randint(x1, x2), random.randint(y1, y2)]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        area = [(r[2]-r[0]+1)*(r[3]-r[1]+1) for r in rects]\\n        area = list(accumulate(area))\\n        self.weights = [a/area[-1] for a in area]\\n        self.xy = rects\\n\\n    def pick(self) -> List[int]:\\n        p = random.random()\\n        i = bisect.bisect(self.weights, p)\\n        x1, y1, x2, y2  = self.xy[i]\\n        return [random.randint(x1, x2), random.randint(y1, y2)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2133116,
                "title": "hex-python-prefix-sum",
                "content": "## Solution\\n- Calculate prefixes and arrays.\\n- The last bit in the prefix sum array stores the total number of coordinate points at this time, so we choose a random number within this range.\\n- See which interval the number is in the prefix and array, each interval represents a different rectangle. Since their weights are different, the subscript of each rectangle is selected according to its prefix and the number in the array. As shown in the figure below, the probability of selecting rectangle one is 9/37, the probability of selecting rectangle two is 12/37, and the probability of selecting square three is 16/37.\\n- When a rectangle has been selected fairly after the above process is completed, we then randomly return a point in its rectangle according to the method in step disassembly\\n\\n```python\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.presum = [0]\\n        for ai, bi, xi, yi in rects:\\n            self.presum.append(self.presum[-1]+(xi-ai+1) * (yi-bi+1))\\n\\n    def pick(self) -> List[int]:\\n        val = random.randint(1, self.presum[-1])\\n        idx = bisect.bisect_left(self.presum, val) -1\\n        ai, bi, xi, yi = self.rects[idx]\\n        return [random.randint(ai, xi), random.randint(bi, yi)]\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "solutionTags": [
                    "Python3",
                    "Prefix Sum"
                ],
                "code": "```python\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.presum = [0]\\n        for ai, bi, xi, yi in rects:\\n            self.presum.append(self.presum[-1]+(xi-ai+1) * (yi-bi+1))\\n\\n    def pick(self) -> List[int]:\\n        val = random.randint(1, self.presum[-1])\\n        idx = bisect.bisect_left(self.presum, val) -1\\n        ai, bi, xi, yi = self.rects[idx]\\n        return [random.randint(ai, xi), random.randint(bi, yi)]\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2128903,
                "title": "python-choices-with-weights",
                "content": "Fist random choose the  Rectangle with area weights, then random choose a point from the Rectangle:\\n\\n```python\\nclass Solution:\\n    \"\"\"\\n    1 <= rects.length <= 100\\n    rects[i].length == 4\\n    -10^9 <= ai < xi <= 10^9\\n    -10^9 <= bi < yi <= 10^9\\n    xi - ai <= 2000\\n    yi - bi <= 2000\\n    All the rectangles do not overlap.\\n    At most 10^4 calls will be made to pick.\\n    \"\"\"\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.n_range = list(range(len(self.rects)))\\n        self.weights = [(x[2] - x[0] + 1) * (x[3] - x[1] + 1) for x in rects]\\n\\n    def pick(self) -> List[int]:\\n        rect = self.rects[choices(self.n_range, self.weights, k=1)[0]]\\n        return [randint(rect[0], rect[2]), randint(rect[1], rect[3])]\\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    \"\"\"\\n    1 <= rects.length <= 100\\n    rects[i].length == 4\\n    -10^9 <= ai < xi <= 10^9\\n    -10^9 <= bi < yi <= 10^9\\n    xi - ai <= 2000\\n    yi - bi <= 2000\\n    All the rectangles do not overlap.\\n    At most 10^4 calls will be made to pick.\\n    \"\"\"\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.n_range = list(range(len(self.rects)))\\n        self.weights = [(x[2] - x[0] + 1) * (x[3] - x[1] + 1) for x in rects]\\n\\n    def pick(self) -> List[int]:\\n        rect = self.rects[choices(self.n_range, self.weights, k=1)[0]]\\n        return [randint(rect[0], rect[2]), randint(rect[1], rect[3])]\\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2128153,
                "title": "resevoir-sampling-good-question-based-on-probability",
                "content": "class Solution {\\npublic:\\n\\n    vector<vector<int>> rects;\\n    Solution(vector<vector<int>>& rects) {\\n        this->rects = rects;\\n    }\\n    \\n    vector<int> pick() {\\n        int res = 0;\\n        vector<int> arr = rects[0];\\n        for(auto rect : rects){\\n            int area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            res += area;\\n            if(rand() % res < area){\\n                arr = rect;\\n            }\\n        }\\n        int x = rand() % (arr[2] - arr[0] + 1) + arr[0];\\n        int y = rand() % (arr[3] - arr[1] + 1) + arr[1];\\n        \\n        return {x, y};\\n    }\\n};\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n\\n    vector<vector<int>> rects;\\n    Solution(vector<vector<int>>& rects) {\\n        this->rects = rects;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2094773,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> prefix;\\n    vector<vector<int>> rects;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        this->rects = rects;\\n        prefix.push_back(getArea(rects[0]));\\n        for(int i = 1; i < rects.size(); i++){\\n            prefix.push_back(prefix.back() + getArea(rects[i]));\\n        }\\n    }\\n    \\n    static int getArea(vector<int>& rect){\\n        return (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n    }\\n    \\n    vector<int> getRandomPoint(vector<int>& rect){\\n        vector<int> randPoint;\\n        int randX = rect[0] + rand() % (rect[2] - rect[0] + 1);\\n        int randY = rect[1] + rand() % (rect[3] - rect[1] + 1);\\n        randPoint.push_back(randX);\\n        randPoint.push_back(randY);\\n        return randPoint;\\n    }\\n    \\n    vector<int> pick() {\\n        int randIndex = rand() % (prefix.back() + 1);\\n        int rectIndex = lower_bound(prefix.begin(), prefix.end(), randIndex) - prefix.begin();\\n        return getRandomPoint(rects[rectIndex]);\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> prefix;\\n    vector<vector<int>> rects;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        this->rects = rects;\\n        prefix.push_back(getArea(rects[0]));\\n        for(int i = 1; i < rects.size(); i++){\\n            prefix.push_back(prefix.back() + getArea(rects[i]));\\n        }\\n    }\\n    \\n    static int getArea(vector<int>& rect){\\n        return (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n    }\\n    \\n    vector<int> getRandomPoint(vector<int>& rect){\\n        vector<int> randPoint;\\n        int randX = rect[0] + rand() % (rect[2] - rect[0] + 1);\\n        int randY = rect[1] + rand() % (rect[3] - rect[1] + 1);\\n        randPoint.push_back(randX);\\n        randPoint.push_back(randY);\\n        return randPoint;\\n    }\\n    \\n    vector<int> pick() {\\n        int randIndex = rand() % (prefix.back() + 1);\\n        int rectIndex = lower_bound(prefix.begin(), prefix.end(), randIndex) - prefix.begin();\\n        return getRandomPoint(rects[rectIndex]);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2026784,
                "title": "c-easy-and-clean-binary-search-prefix-sum-reservoir-sampling-algorithm",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> prefix;\\n    vector<vector<int>> rec;\\n    Solution(vector<vector<int>> &rec): rec(rec){\\n        prefix.push_back((rec[0][2] - rec[0][0] + 1)*(rec[0][3] - rec[0][1] + 1));\\n        for(int i = 1; i < rec.size(); i++)\\n        {\\n            prefix.push_back(prefix.back() + (rec[i][2] - rec[i][0] + 1)*(rec[i][3] - rec[i][1] + 1));\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        // https://leetcode.com/problems/random-pick-with-weight/description/\\n        // probabily of choosing a rectangle depends on its area\\n        int r = rand()%(prefix.back());// generates in [0, area)\\n        int i = upper_bound(prefix.begin(), prefix.end(), r) - prefix.begin();\\n        // Now find the random point in choosen rectangle\\n        int a = rand() %(rec[i][2] - rec[i][0] + 1) + rec[i][0], b =  rand() %(rec[i][3] - rec[i][1] + 1) + rec[i][1];        \\n        return {a,b};\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> prefix;\\n    vector<vector<int>> rec;\\n    Solution(vector<vector<int>> &rec): rec(rec){\\n        prefix.push_back((rec[0][2] - rec[0][0] + 1)*(rec[0][3] - rec[0][1] + 1));\\n        for(int i = 1; i < rec.size(); i++)\\n        {\\n            prefix.push_back(prefix.back() + (rec[i][2] - rec[i][0] + 1)*(rec[i][3] - rec[i][1] + 1));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1977465,
                "title": "python-numpy",
                "content": "```\\nfrom numpy.random import choice as ch\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects=rects\\n        arr=[2*(a[2]-a[0]+1)*(a[3]-a[1]+1) for a in self.rects]\\n        s=sum(arr)\\n        self.arr=[i/s for i in arr]\\n    def pick(self) -> List[int]:\\n        tmp=ch([str(random.randint(a[0],a[2]))+\"#\"+str(random.randint(a[1],a[3])) for a in self.rects],p=self.arr)\\n        return tmp.split(\\'#\\')\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "solutionTags": [],
                "code": "```\\nfrom numpy.random import choice as ch\\nclass Solution:\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects=rects\\n        arr=[2*(a[2]-a[0]+1)*(a[3]-a[1]+1) for a in self.rects]\\n        s=sum(arr)\\n        self.arr=[i/s for i in arr]\\n    def pick(self) -> List[int]:\\n        tmp=ch([str(random.randint(a[0],a[2]))+\"#\"+str(random.randint(a[1],a[3])) for a in self.rects],p=self.arr)\\n        return tmp.split(\\'#\\')\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(rects)\\n# param_1 = obj.pick()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1965341,
                "title": "c-solution-with-only-one-rand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> v;\\n    vector<vector<int>> rects;\\n    int area(vector<int>& r) {\\n        return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n    }\\n\\n    Solution(vector<vector<int>> rects) : rects(rects) {\\n        int totalArea = 0;\\n        for (auto r : rects) {\\n            totalArea += area(r);\\n            v.push_back(totalArea);\\n        }\\n    }\\n\\n    vector<int> pick() {\\n        // pick a random reactangle in rects\\n        int rnd = rand() % v.back();\\n        int idx = upper_bound(v.begin(), v.end(), rnd) - v.begin();\\n\\n        if (idx != 0) rnd -= v[idx - 1];\\n        // pick a random point in rects[idx]\\n        auto r = rects[idx];\\n        int x = rnd % (r[2] - r[0] + 1) + r[0];\\n        int y = rnd / (r[2] - r[0] + 1) + r[1];\\n        return { x, y };\\n    }\\n};\\n```\\nHere is my code. Basic idea is same to others, that we random select a rect based on its size. But we only need exactly one rand(), because the random number we get is already represent a point in a rect. What we need to do is reconstructing the position.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> v;\\n    vector<vector<int>> rects;\\n    int area(vector<int>& r) {\\n        return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\\n    }\\n\\n    Solution(vector<vector<int>> rects) : rects(rects) {\\n        int totalArea = 0;\\n        for (auto r : rects) {\\n            totalArea += area(r);\\n            v.push_back(totalArea);\\n        }\\n    }\\n\\n    vector<int> pick() {\\n        // pick a random reactangle in rects\\n        int rnd = rand() % v.back();\\n        int idx = upper_bound(v.begin(), v.end(), rnd) - v.begin();\\n\\n        if (idx != 0) rnd -= v[idx - 1];\\n        // pick a random point in rects[idx]\\n        auto r = rects[idx];\\n        int x = rnd % (r[2] - r[0] + 1) + r[0];\\n        int y = rnd / (r[2] - r[0] + 1) + r[1];\\n        return { x, y };\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1923494,
                "title": "python-easy-understanding-solution-with-comment",
                "content": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects  \\n        self.weights = []                                   # self.weights record the \"points\" one rectangle have respectively\\n        \\n        for i in range(len(rects)):\\n            num_points = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1)\\n            self.weights.append(num_points)\\n\\n    def pick(self) -> List[int]:\\n        rect = random.choices(self.rects, self.weights)[0]  # Random choose rectangle weighted by its points.\\n        x = random.randint(rect[0], rect[2])                # rect[0], rect[2] are left and right bound respectively\\n        y = random.randint(rect[1], rect[3])                # rect[1], rect[3] are bottom and top bound respectively\\n        \\n        return [x, y]",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects  \\n        self.weights = []                                   # self.weights record the \"points\" one rectangle have respectively\\n        \\n        for i in range(len(rects)):\\n            num_points = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1)\\n            self.weights.append(num_points)\\n\\n    def pick(self) -> List[int]:\\n        rect = random.choices(self.rects, self.weights)[0]  # Random choose rectangle weighted by its points.\\n        x = random.randint(rect[0], rect[2])                # rect[0], rect[2] are left and right bound respectively\\n        y = random.randint(rect[1], rect[3])                # rect[1], rect[3] are bottom and top bound respectively\\n        \\n        return [x, y]",
                "codeTag": "Java"
            },
            {
                "id": 1890241,
                "title": "java-prefixsum-binary-search",
                "content": "```\\nclass Solution {\\n    int[] prefixSum;\\n    int n;\\n    int[][] rects;\\n    Random random;\\n    public Solution(int[][] rects) {\\n        this.n = rects.length;\\n        this.prefixSum = new int[n];\\n        this.rects = rects;\\n        this.random = new Random();\\n        \\n        for (var i=0; i<n; i++){\\n            prefixSum[i] = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            if (i > 0){\\n                prefixSum[i] += prefixSum[i-1];\\n            }\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int[] picked = pickRectangle();\\n        int index = picked[0], target = picked[1];\\n        \\n        int a = rects[index][0];\\n        int b = rects[index][1];\\n        int x = rects[index][2];\\n        int y = rects[index][3];\\n        int n = target - (index == 0 ? 0 : prefixSum[index - 1]) - 1; // 0 <= n < area of the rectangle\\n        \\n        int width = x - a + 1;\\n        return new int[]{ a + n % width, b + n / width };\\n    }\\n    \\n    // return int[]{index, target}\\n    public int[] pickRectangle(){\\n        int target = random.nextInt(prefixSum[n-1]) + 1;\\n        int start = 0, end = n-1;\\n        if (prefixSum[start] >= target){\\n            return new int[]{start, target};\\n        }\\n        // result in (start, end]\\n        while (start < end){\\n            if (start + 1 == end){\\n                return new int[]{end, target};\\n            }\\n            int middle = start + (end - start) / 2;\\n            if (prefixSum[middle] >= target){\\n                end = middle;\\n            } else {\\n                start = middle;\\n            }\\n        }\\n        return new int[]{};\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    int[] prefixSum;\\n    int n;\\n    int[][] rects;\\n    Random random;\\n    public Solution(int[][] rects) {\\n        this.n = rects.length;\\n        this.prefixSum = new int[n];\\n        this.rects = rects;\\n        this.random = new Random();\\n        \\n        for (var i=0; i<n; i++){\\n            prefixSum[i] = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);\\n            if (i > 0){\\n                prefixSum[i] += prefixSum[i-1];\\n            }\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int[] picked = pickRectangle();\\n        int index = picked[0], target = picked[1];\\n        \\n        int a = rects[index][0];\\n        int b = rects[index][1];\\n        int x = rects[index][2];\\n        int y = rects[index][3];\\n        int n = target - (index == 0 ? 0 : prefixSum[index - 1]) - 1; // 0 <= n < area of the rectangle\\n        \\n        int width = x - a + 1;\\n        return new int[]{ a + n % width, b + n / width };\\n    }\\n    \\n    // return int[]{index, target}\\n    public int[] pickRectangle(){\\n        int target = random.nextInt(prefixSum[n-1]) + 1;\\n        int start = 0, end = n-1;\\n        if (prefixSum[start] >= target){\\n            return new int[]{start, target};\\n        }\\n        // result in (start, end]\\n        while (start < end){\\n            if (start + 1 == end){\\n                return new int[]{end, target};\\n            }\\n            int middle = start + (end - start) / 2;\\n            if (prefixSum[middle] >= target){\\n                end = middle;\\n            } else {\\n                start = middle;\\n            }\\n        }\\n        return new int[]{};\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(rects);\\n * int[] param_1 = obj.pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1874605,
                "title": "c-weighted-sampling-prefix-sum-std-upper-bound-clean-code",
                "content": "```C++\\nint Rand(int max) {\\n  return std::rand() % max;\\n}\\n\\nstruct Point{\\n  int x;\\n  int y;\\n};\\n\\nstruct Rect{\\n  Point bottomLeft;\\n  Point upperRight;\\n  \\n  int Width() const {\\n    return (upperRight.x - bottomLeft.x + 1);\\n  }\\n  \\n  int Height() const {\\n    return (upperRight.y - bottomLeft.y + 1);\\n  }\\n  \\n  int Area() const {\\n    return Width() * Height();\\n  }\\n  \\n  Point PointByIdx(int idx) const {\\n    if(idx < 0 || idx >= Area()) {\\n      assert(false);\\n    }\\n    \\n    const auto width = Width();\\n    const auto rowOffset = idx / width;\\n    const auto colOffset = idx % width;\\n    return Point{bottomLeft.x + colOffset, bottomLeft.y + rowOffset};\\n  }\\n  \\n};\\n\\nclass Solution {\\npublic:\\n    Solution(vector<vector<int>>& rectsRaw) {\\n      rects.reserve(rectsRaw.size());\\n      std::transform(rectsRaw.begin(), rectsRaw.end(), std::back_inserter(rects), [](const std::vector<int>& rectRaw){\\n        return Rect{Point{rectRaw[0], rectRaw[1]}, Point{rectRaw[2], rectRaw[3]}};\\n      });\\n\\n      areaPrefixSum.reserve(rectsRaw.size() + 1);\\n      areaPrefixSum.push_back(0);\\n      \\n      for(auto i = 0; i < rects.size(); ++i) {\\n        areaPrefixSum.push_back(areaPrefixSum.back() + rects[i].Area());\\n      }\\n      \\n      std::srand(std::time(0));\\n    }\\n    \\n    vector<int> pick() const {\\n      const auto randIdx = RandPointIdx();\\n      auto randIt = --std::upper_bound(areaPrefixSum.begin(), areaPrefixSum.end(), randIdx);\\n      const int rectIdx = randIt - areaPrefixSum.begin();\\n      const auto offset = randIdx - *randIt;\\n      const auto result = rects[rectIdx].PointByIdx(offset);\\n      return std::vector{result.x, result.y};\\n    }\\n  \\nprivate:\\n  int RandPointIdx() const {\\n    return Rand(areaPrefixSum.back());\\n  }\\n  std::vector<Rect> rects{};\\n  std::vector<int> areaPrefixSum{};\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [],
                "code": "```C++\\nint Rand(int max) {\\n  return std::rand() % max;\\n}\\n\\nstruct Point{\\n  int x;\\n  int y;\\n};\\n\\nstruct Rect{\\n  Point bottomLeft;\\n  Point upperRight;\\n  \\n  int Width() const {\\n    return (upperRight.x - bottomLeft.x + 1);\\n  }\\n  \\n  int Height() const {\\n    return (upperRight.y - bottomLeft.y + 1);\\n  }\\n  \\n  int Area() const {\\n    return Width() * Height();\\n  }\\n  \\n  Point PointByIdx(int idx) const {\\n    if(idx < 0 || idx >= Area()) {\\n      assert(false);\\n    }\\n    \\n    const auto width = Width();\\n    const auto rowOffset = idx / width;\\n    const auto colOffset = idx % width;\\n    return Point{bottomLeft.x + colOffset, bottomLeft.y + rowOffset};\\n  }\\n  \\n};\\n\\nclass Solution {\\npublic:\\n    Solution(vector<vector<int>>& rectsRaw) {\\n      rects.reserve(rectsRaw.size());\\n      std::transform(rectsRaw.begin(), rectsRaw.end(), std::back_inserter(rects), [](const std::vector<int>& rectRaw){\\n        return Rect{Point{rectRaw[0], rectRaw[1]}, Point{rectRaw[2], rectRaw[3]}};\\n      });\\n\\n      areaPrefixSum.reserve(rectsRaw.size() + 1);\\n      areaPrefixSum.push_back(0);\\n      \\n      for(auto i = 0; i < rects.size(); ++i) {\\n        areaPrefixSum.push_back(areaPrefixSum.back() + rects[i].Area());\\n      }\\n      \\n      std::srand(std::time(0));\\n    }\\n    \\n    vector<int> pick() const {\\n      const auto randIdx = RandPointIdx();\\n      auto randIt = --std::upper_bound(areaPrefixSum.begin(), areaPrefixSum.end(), randIdx);\\n      const int rectIdx = randIt - areaPrefixSum.begin();\\n      const auto offset = randIdx - *randIt;\\n      const auto result = rects[rectIdx].PointByIdx(offset);\\n      return std::vector{result.x, result.y};\\n    }\\n  \\nprivate:\\n  int RandPointIdx() const {\\n    return Rand(areaPrefixSum.back());\\n  }\\n  std::vector<Rect> rects{};\\n  std::vector<int> areaPrefixSum{};\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1807736,
                "title": "c-weighted-area-array",
                "content": "```\\nclass Solution {\\npublic:\\n    vector< int > m_rectangleAreas;\\n    vector< vector< int > > m_rectangles;\\n    \\n    Solution(vector<vector<int>>& rects) : m_rectangles( rects ) {\\n        int accumArea = 0;\\n        for ( int i = 0; i < rects.size(); ++i ) {\\n            const vector< int > & curRect = rects[ i ];\\n            const int dx = ( curRect[ 2 ] - curRect[ 0 ] ) + 1;\\n            const int dy = ( curRect[ 3 ] - curRect[ 1 ] ) + 1;\\n            accumArea += ( dx * dy );\\n            m_rectangleAreas.push_back( accumArea );\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        vector< int > ans( 2, 0 );\\n        const int maxAccumArea = m_rectangleAreas.back();\\n        const int rngRoll = rand() % maxAccumArea;\\n        auto it = upper_bound( m_rectangleAreas.begin(), m_rectangleAreas.end(), rngRoll );\\n        const int index = distance( m_rectangleAreas.begin(), it );\\n        const int prevAreaAccum = ( index > 0 ) ? *( it - 1 ) : 0;\\n        const vector< int > & targetRectangle = m_rectangles[ index ];\\n        const int startX = targetRectangle[ 0 ];\\n        const int startY = targetRectangle[ 1 ];\\n        const int endX = targetRectangle[ 2 ];\\n        const int diffArea = rngRoll - prevAreaAccum;\\n        const int dx = ( endX - startX ) + 1;\\n        // deal with the left over area to get a random point\\n        // treat this like a row major 2d array\\n        const int yOffset = diffArea / dx;\\n        const int xOffset = diffArea - ( yOffset * dx );\\n        ans[ 0 ] = startX + xOffset;\\n        ans[ 1 ] = startY + yOffset;        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector< int > m_rectangleAreas;\\n    vector< vector< int > > m_rectangles;\\n    \\n    Solution(vector<vector<int>>& rects) : m_rectangles( rects ) {\\n        int accumArea = 0;\\n        for ( int i = 0; i < rects.size(); ++i ) {\\n            const vector< int > & curRect = rects[ i ];\\n            const int dx = ( curRect[ 2 ] - curRect[ 0 ] ) + 1;\\n            const int dy = ( curRect[ 3 ] - curRect[ 1 ] ) + 1;\\n            accumArea += ( dx * dy );\\n            m_rectangleAreas.push_back( accumArea );\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        vector< int > ans( 2, 0 );\\n        const int maxAccumArea = m_rectangleAreas.back();\\n        const int rngRoll = rand() % maxAccumArea;\\n        auto it = upper_bound( m_rectangleAreas.begin(), m_rectangleAreas.end(), rngRoll );\\n        const int index = distance( m_rectangleAreas.begin(), it );\\n        const int prevAreaAccum = ( index > 0 ) ? *( it - 1 ) : 0;\\n        const vector< int > & targetRectangle = m_rectangles[ index ];\\n        const int startX = targetRectangle[ 0 ];\\n        const int startY = targetRectangle[ 1 ];\\n        const int endX = targetRectangle[ 2 ];\\n        const int diffArea = rngRoll - prevAreaAccum;\\n        const int dx = ( endX - startX ) + 1;\\n        // deal with the left over area to get a random point\\n        // treat this like a row major 2d array\\n        const int yOffset = diffArea / dx;\\n        const int xOffset = diffArea - ( yOffset * dx );\\n        ans[ 0 ] = startX + xOffset;\\n        ans[ 1 ] = startY + yOffset;        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1695100,
                "title": "c",
                "content": "(```)  class Solution {\\npublic:\\n    \\n   vector<vector<int>> points;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        \\n        points = rects;\\n    }\\n    \\n    vector<int> pick() {\\n        \\n        int sum = 0, area;\\n        \\n        vector<int> v;\\n        \\n        for(auto x : points)\\n        {\\n            area = (x[2]-x[0]+1)*(x[3]-x[1]+1);\\n            \\n            sum = sum + area;\\n            \\n            if(rand()%sum < area)\\n            {\\n                v = x;\\n            }\\n        }\\n        \\n        int res = v[0]+ rand()%(v[2]-v[0]+1);\\n        \\n        int res1 = v[1] + rand()%(v[3]-v[1]+1);\\n        \\n        vector<int> ans;\\n        \\n        ans.push_back(res);\\n        ans.push_back(res1);\\n        \\n        return ans;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    \\n   vector<vector<int>> points;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        \\n        points = rects;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1689926,
                "title": "problem-solution-in-java-python-c-and-c-programming",
                "content": "https://programs.programmingoneonone.com/2022/01/leetcode-random-point-in-non-overlapping-rectangles-problem-solution.html",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1673711,
                "title": "scala-solution-with-sortedmap",
                "content": "```scala\\nclass Solution(_rects: Array[Array[Int]]) {\\n  val rnd = scala.util.Random\\n  def getRnd(mx:Int) = rnd.nextInt.abs % mx\\n  val prefixSums = collection.immutable.SortedMap.from(\\n    _rects.map{r=>(r(2)-r(0)+1)*(r(3)-r(1)+1)}\\n    .foldLeft(List(0)){case (list,area) =>\\n      ((list.head) + area) +: list\\n    }.reverse.tail.zipWithIndex\\n  )\\n  // println(s\"  prefixSums=$prefixSums\")\\n  val sum = prefixSums.keys.last  // last key is max for sorted map\\n  def pick(): Array[Int] = {\\n    val r = _rects(prefixSums.iteratorFrom(getRnd(sum+1)).next._2)  // select rectangle\\n    Array(r(0)+getRnd((r(2)-r(0)+1)), r(1)+getRnd((r(3)-r(1)+1)))    // select points\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```scala\\nclass Solution(_rects: Array[Array[Int]]) {\\n  val rnd = scala.util.Random\\n  def getRnd(mx:Int) = rnd.nextInt.abs % mx\\n  val prefixSums = collection.immutable.SortedMap.from(\\n    _rects.map{r=>(r(2)-r(0)+1)*(r(3)-r(1)+1)}\\n    .foldLeft(List(0)){case (list,area) =>\\n      ((list.head) + area) +: list\\n    }.reverse.tail.zipWithIndex\\n  )\\n  // println(s\"  prefixSums=$prefixSums\")\\n  val sum = prefixSums.keys.last  // last key is max for sorted map\\n  def pick(): Array[Int] = {\\n    val r = _rects(prefixSums.iteratorFrom(getRnd(sum+1)).next._2)  // select rectangle\\n    Array(r(0)+getRnd((r(2)-r(0)+1)), r(1)+getRnd((r(3)-r(1)+1)))    // select points\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1672376,
                "title": "java-o-n-per-query-where-n-is-number-of-rectangles",
                "content": "Each point in all rectangles (incl. borders) must have the same probability of selection.\\n- let\\'s compute all rectangles combined area\\n- for every query, let\\'s generate random number in [0,totalArea). \\n- find exact rectangle  where randomly generated number-point belong to\\n- calculate horizontal and vertical offsets in that rectangle\\n- return absolute coordinates\\n```\\n    class Solution {\\n        private Random random = new Random();\\n        private int[][] rects;\\n        private int len;\\n        private int totalArea;\\n        private int[] ret = new int[2];\\n        public Solution(int[][] rects) {\\n            this.rects = rects;\\n            len = rects.length;\\n            for(int i=0;i<len;i++)\\n                totalArea+=(rects[i][3]-rects[i][1]+1)*(rects[i][2]-rects[i][0]+1);\\n        }\\n        public int[] pick() {\\n            int r = random.nextInt(totalArea), prevArea=0,currArea=0;\\n            for(int i=0;i<len;i++){\\n                currArea += (rects[i][3]-rects[i][1]+1)*(rects[i][2]-rects[i][0]+1);\\n                if(r<currArea){\\n                     r -= prevArea;\\n                     int rowOffset = r/(rects[i][2]-rects[i][0]+1);\\n                     int columnOffset = r-rowOffset*(rects[i][2]-rects[i][0]+1);\\n                     ret[0]=rects[i][0]+columnOffset;\\n                     ret[1]=rects[i][1]+rowOffset;\\n                     return ret;\\n                }\\n                prevArea=currArea;\\n            }\\n            return null;\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    class Solution {\\n        private Random random = new Random();\\n        private int[][] rects;\\n        private int len;\\n        private int totalArea;\\n        private int[] ret = new int[2];\\n        public Solution(int[][] rects) {\\n            this.rects = rects;\\n            len = rects.length;\\n            for(int i=0;i<len;i++)\\n                totalArea+=(rects[i][3]-rects[i][1]+1)*(rects[i][2]-rects[i][0]+1);\\n        }\\n        public int[] pick() {\\n            int r = random.nextInt(totalArea), prevArea=0,currArea=0;\\n            for(int i=0;i<len;i++){\\n                currArea += (rects[i][3]-rects[i][1]+1)*(rects[i][2]-rects[i][0]+1);\\n                if(r<currArea){\\n                     r -= prevArea;\\n                     int rowOffset = r/(rects[i][2]-rects[i][0]+1);\\n                     int columnOffset = r-rowOffset*(rects[i][2]-rects[i][0]+1);\\n                     ret[0]=rects[i][0]+columnOffset;\\n                     ret[1]=rects[i][1]+rowOffset;\\n                     return ret;\\n                }\\n                prevArea=currArea;\\n            }\\n            return null;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1659606,
                "title": "java-simple-solution-faster-than-100-00-of-java-online-submissions",
                "content": "So, the basic idea is:\\n1. Print points rectangle by rectangle.\\n2. Choose 1st rectangle and print all its points. Lets say rectangle leftmost and rightmost co-ordinates are: (x1, y1) and (x2, y2).\\n\\ta) print co-ordinates of bottom row of the rectangle: Start from (x1, y1) and increment x1 till point (x2, y1).\\n\\tb) Once the bottom row co-ordinates are all printed, then take next row from the bottom and print that row completely (x1, y1+1) to (x2, y1+1).\\n\\tc) Once all points for that rectangle is printed, choose next rectangle.\\n\\td) After all rectangle points are printed, choose the first rectangle again.\\n\\n```\\nclass Solution {\\n\\n    public int[][] rects;\\n    public int x=Integer.MIN_VALUE, y;\\n    public int rect=0;\\n    public int rectangleCount;\\n    \\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        rectangleCount = rects.length;\\n    }\\n    \\n    public int[] pick() {\\n\\t\\n        // for first run, choose first rectangle co-ordinates.\\n        if(x==Integer.MIN_VALUE) {\\n            x = rects[rect][0];\\n            y = rects[rect][1];\\n        }\\n\\t\\t\\n        // print all points for that row.\\n        else if(x+1 <= rects[rect][2] && y <= rects[rect][3]) {\\n            x = x + 1;\\n        }\\n\\t\\t\\n        // If all the row points are printed, choose row just above to previous bottom row.\\n        else if (x+1 > rects[rect][2] && y+1 <= rects[rect][3]) {\\n            y = y + 1;\\n            x = rects[rect][0];\\n        }\\n\\t\\t\\n        // If all points of that rectangle is done, choose next rectangle.\\n        else if (x+1 > rects[rect][2] && y+1 > rects[rect][3]) {\\n            rect = (rect+1) % rectangleCount;\\n            x = rects[rect][0];\\n            y = rects[rect][1];\\n        }\\n        return new int[] {x, y};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\n    public int[][] rects;\\n    public int x=Integer.MIN_VALUE, y;\\n    public int rect=0;\\n    public int rectangleCount;\\n    \\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        rectangleCount = rects.length;\\n    }\\n    \\n    public int[] pick() {\\n\\t\\n        // for first run, choose first rectangle co-ordinates.\\n        if(x==Integer.MIN_VALUE) {\\n            x = rects[rect][0];\\n            y = rects[rect][1];\\n        }\\n\\t\\t\\n        // print all points for that row.\\n        else if(x+1 <= rects[rect][2] && y <= rects[rect][3]) {\\n            x = x + 1;\\n        }\\n\\t\\t\\n        // If all the row points are printed, choose row just above to previous bottom row.\\n        else if (x+1 > rects[rect][2] && y+1 <= rects[rect][3]) {\\n            y = y + 1;\\n            x = rects[rect][0];\\n        }\\n\\t\\t\\n        // If all points of that rectangle is done, choose next rectangle.\\n        else if (x+1 > rects[rect][2] && y+1 > rects[rect][3]) {\\n            rect = (rect+1) % rectangleCount;\\n            x = rects[rect][0];\\n            y = rects[rect][1];\\n        }\\n        return new int[] {x, y};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1593791,
                "title": "java-treemap-solution",
                "content": "This is similar to the binary search approaches but uses a TreeMap for querying. This is probably less efficient overall (nlogn to build it in addition to the logn queries?) but thought I\\'d include it for display anyway since I prefer starting with TreeMap API to coding binary search by hand.\\n```\\nclass Solution {\\n    \\n    int[][] rects;\\n    TreeMap<Integer, Integer> weightedRectIndex = new TreeMap<>();\\n    int nPoints = 0;\\n    \\n    Random rng = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        int index = 0;\\n        for (int[] rect : rects) {\\n\\t\\t    // inserts cumulative weight key pointing to rectangle index\\n            weightedRectIndex.put(nPoints, index++);\\n            nPoints += width(rect) * height(rect);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n\\t    // generates random point within total weight\\n        int point = rng.nextInt(nPoints);\\n\\t\\t// finds appropriate rectangle\\n        var entry = weightedRectIndex.floorEntry(point);\\n\\t\\t// find point within the current rectangle\\n        int rectPoint = point - entry.getKey();\\n        int[] rect = rects[entry.getValue()];\\n        return new int[]{\\n            rect[0] + rectPoint % width(rect), \\n            rect[1] + rectPoint / width(rect)};\\n    }\\n    \\n    private int width(int[] rect) {\\n        return rect[2] - rect[0] + 1;\\n    }\\n    \\n    private int height(int[] rect) {\\n        return rect[3] - rect[1] + 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Tree"
                ],
                "code": "```\\nclass Solution {\\n    \\n    int[][] rects;\\n    TreeMap<Integer, Integer> weightedRectIndex = new TreeMap<>();\\n    int nPoints = 0;\\n    \\n    Random rng = new Random();\\n\\n    public Solution(int[][] rects) {\\n        this.rects = rects;\\n        int index = 0;\\n        for (int[] rect : rects) {\\n\\t\\t    // inserts cumulative weight key pointing to rectangle index\\n            weightedRectIndex.put(nPoints, index++);\\n            nPoints += width(rect) * height(rect);\\n        }\\n    }\\n    \\n    public int[] pick() {\\n\\t    // generates random point within total weight\\n        int point = rng.nextInt(nPoints);\\n\\t\\t// finds appropriate rectangle\\n        var entry = weightedRectIndex.floorEntry(point);\\n\\t\\t// find point within the current rectangle\\n        int rectPoint = point - entry.getKey();\\n        int[] rect = rects[entry.getValue()];\\n        return new int[]{\\n            rect[0] + rectPoint % width(rect), \\n            rect[1] + rectPoint / width(rect)};\\n    }\\n    \\n    private int width(int[] rect) {\\n        return rect[2] - rect[0] + 1;\\n    }\\n    \\n    private int height(int[] rect) {\\n        return rect[3] - rect[1] + 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1592733,
                "title": "c-simple-solution-with-memory-and-bst",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> rects;\\n    vector<int> weights = {};\\n    int area_total = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        this->rects = rects;\\n        int area;\\n        for (auto& rect: rects) {\\n            area = (rect[2]-rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            area_total += area;\\n            weights.push_back(area_total);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int w = rand() % area_total;\\n        int left = 0, right = weights.size(), mid;\\n        while(left != right) {\\n            mid = (left+right)/2;\\n            if (w >= weights[mid]) {\\n                left = mid+1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        return pickRandomPoint(rects[left]);\\n    }\\n    \\n    vector<int> pickRandomPoint(vector<int> rect) {\\n        int x = rand() % (rect[2] - rect[0] + 1);\\n        int y = rand() % (rect[3] - rect[1] + 1);\\n        return {rect[0] + x, rect[1] + y};\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> rects;\\n    vector<int> weights = {};\\n    int area_total = 0;\\n    \\n    Solution(vector<vector<int>>& rects) {\\n        this->rects = rects;\\n        int area;\\n        for (auto& rect: rects) {\\n            area = (rect[2]-rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            area_total += area;\\n            weights.push_back(area_total);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int w = rand() % area_total;\\n        int left = 0, right = weights.size(), mid;\\n        while(left != right) {\\n            mid = (left+right)/2;\\n            if (w >= weights[mid]) {\\n                left = mid+1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        return pickRandomPoint(rects[left]);\\n    }\\n    \\n    vector<int> pickRandomPoint(vector<int> rect) {\\n        int x = rand() % (rect[2] - rect[0] + 1);\\n        int y = rand() % (rect[3] - rect[1] + 1);\\n        return {rect[0] + x, rect[1] + y};\\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(rects);\\n * vector<int> param_1 = obj->pick();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525124,
                "title": "c-solution-using-map",
                "content": "```\\nclass Solution {\\npublic:\\n    map<int, vector<int>> domains;\\n    int total_area;\\n    Solution(vector<vector<int>>& rects) {\\n        int start=0;\\n        for(auto rect : rects)\\n        {\\n            vector<int> domain{rect[0], rect[1], rect[2]-rect[0]+1, rect[3]-rect[1]+1};\\n            domains[start]=domain;\\n            start+=domain[2]*domain[3];\\n        }\\n        total_area=start;\\n    }\\n    \\n    vector<int> pick() {\\n        int rand_index=rand();\\n        //while(rand_index>=(RAND_MAX/total_area*total_area)) rand_index=rand(); // this could make it more evenly distributed between 0~total_area\\n        rand_index%=total_area;\\n        auto it=domains.upper_bound(rand_index);\\n        int start_index=(--it)->first;\\n        vector<int> rect=it->second;\\n        int x=rect[0]+(rand_index-start_index)%rect[2];\\n        int y=rect[1]+(rand_index-start_index)/rect[2];\\n        return vector<int>{x, y};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    map<int, vector<int>> domains;\\n    int total_area;\\n    Solution(vector<vector<int>>& rects) {\\n        int start=0;\\n        for(auto rect : rects)\\n        {\\n            vector<int> domain{rect[0], rect[1], rect[2]-rect[0]+1, rect[3]-rect[1]+1};\\n            domains[start]=domain;\\n            start+=domain[2]*domain[3];\\n        }\\n        total_area=start;\\n    }\\n    \\n    vector<int> pick() {\\n        int rand_index=rand();\\n        //while(rand_index>=(RAND_MAX/total_area*total_area)) rand_index=rand(); // this could make it more evenly distributed between 0~total_area\\n        rand_index%=total_area;\\n        auto it=domains.upper_bound(rand_index);\\n        int start_index=(--it)->first;\\n        vector<int> rect=it->second;\\n        int x=rect[0]+(rand_index-start_index)%rect[2];\\n        int y=rect[1]+(rand_index-start_index)/rect[2];\\n        return vector<int>{x, y};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1514598,
                "title": "c-solution-using-rand-binary-search-prefix-sum",
                "content": "```\\nclass Solution {\\nprivate:\\n    vector<int>wts;\\n    vector<vector<int>>rects;\\n    \\n    int getArea(vector<int>& rect){\\n        return (rect[3] - rect[1] + 1) * (rect[2] - rect[0] + 1); \\n    }\\n    \\n    vector<int> getRandom(vector<int>& rect){\\n        int x_diff = rect[2] - rect[0];\\n        int y_diff = rect[3] - rect[1];\\n        int x = rect[0] + rand() % (x_diff + 1);\\n        int y = rect[1] + rand() % (y_diff + 1);\\n        vector<int> randPoint;\\n        randPoint.push_back(x);\\n        randPoint.push_back(y);\\n        return randPoint;\\n    }\\n    \\npublic:\\n    Solution(vector<vector<int>>& rects) : rects(rects) {\\n        int i, j;\\n        wts.push_back(getArea(rects[0]) - 1);\\n        for(i = 1; i < rects.size(); i++){\\n            j = wts[i - 1];\\n            wts.push_back(getArea(rects[i]) + j);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int i;\\n        int j = rand() % wts.back();\\n        auto it = upper_bound(wts.begin(), wts.end(), j);\\n        if(it == wts.begin()){\\n            i = 0;\\n        }\\n        else{\\n            auto prev = it - 1;\\n            if(*prev == j){\\n                i = prev - wts.begin();\\n            }\\n            else{\\n                i = it - wts.begin();\\n            }\\n        }\\n        return getRandom(rects[i]);\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\nprivate:\\n    vector<int>wts;\\n    vector<vector<int>>rects;\\n    \\n    int getArea(vector<int>& rect){\\n        return (rect[3] - rect[1] + 1) * (rect[2] - rect[0] + 1); \\n    }\\n    \\n    vector<int> getRandom(vector<int>& rect){\\n        int x_diff = rect[2] - rect[0];\\n        int y_diff = rect[3] - rect[1];\\n        int x = rect[0] + rand() % (x_diff + 1);\\n        int y = rect[1] + rand() % (y_diff + 1);\\n        vector<int> randPoint;\\n        randPoint.push_back(x);\\n        randPoint.push_back(y);\\n        return randPoint;\\n    }\\n    \\npublic:\\n    Solution(vector<vector<int>>& rects) : rects(rects) {\\n        int i, j;\\n        wts.push_back(getArea(rects[0]) - 1);\\n        for(i = 1; i < rects.size(); i++){\\n            j = wts[i - 1];\\n            wts.push_back(getArea(rects[i]) + j);\\n        }\\n    }\\n    \\n    vector<int> pick() {\\n        int i;\\n        int j = rand() % wts.back();\\n        auto it = upper_bound(wts.begin(), wts.end(), j);\\n        if(it == wts.begin()){\\n            i = 0;\\n        }\\n        else{\\n            auto prev = it - 1;\\n            if(*prev == j){\\n                i = prev - wts.begin();\\n            }\\n            else{\\n                i = it - wts.begin();\\n            }\\n        }\\n        return getRandom(rects[i]);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1459608,
                "title": "change-description",
                "content": "I would change the description of the points to left-bottom and right-top, instead of bottom-left and top-right, to make it clear it\\'s x, y and not y, x. It\\'s unorthodox but it\\'s confusing as is.",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1375218,
                "title": "javascript-es6-pick-rect-pick-point-in-rect",
                "content": "```\\nclass Solution {\\n    constructor(rects) {\\n        this.rects = rects;\\n        this.rectsWeights = rects.map(([x1, y1, x2, y2]) => (x2 - x1 + 1) * (y2 - y1 + 1));\\n        this.rectsWeightsPrefixSum = [];\\n        for (let i = 0, curr = 0; i < this.rectsWeights.length; i++) {\\n            curr += this.rectsWeights[i];\\n            this.rectsWeightsPrefixSum.push(curr);\\n        }\\n    };\\n                                                              \\n                                                             \\n    pickRect() {\\n        const upperBound = (value, arr, left = 0, right = arr.length - 1) => {\\n            if (left === right) {\\n                return left;\\n            }\\n            const guess = Math.floor((right  + left) / 2);\\n            if (arr[guess] <= value) {\\n                return upperBound(value, arr, guess + 1, right);\\n            } else {\\n                return upperBound(value, arr, left, guess);\\n            }\\n        }\\n        const last = (arr) => arr[arr.length - 1];\\n        const randomWeightSum = Math.random() * last(this.rectsWeightsPrefixSum);\\n        const rectIndex = upperBound(randomWeightSum, this.rectsWeightsPrefixSum);\\n        return this.rects[rectIndex];\\n    }\\n    \\n    pick() {\\n        const [x1, y1, x2, y2] = this.pickRect();\\n        const x = x1 + Math.floor(Math.random() * (x2 - x1 + 1));\\n        const y = y1 + Math.floor(Math.random() * (y2 - y1 + 1));\\n        return [x, y];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    constructor(rects) {\\n        this.rects = rects;\\n        this.rectsWeights = rects.map(([x1, y1, x2, y2]) => (x2 - x1 + 1) * (y2 - y1 + 1));\\n        this.rectsWeightsPrefixSum = [];\\n        for (let i = 0, curr = 0; i < this.rectsWeights.length; i++) {\\n            curr += this.rectsWeights[i];\\n            this.rectsWeightsPrefixSum.push(curr);\\n        }\\n    };\\n                                                              \\n                                                             \\n    pickRect() {\\n        const upperBound = (value, arr, left = 0, right = arr.length - 1) => {\\n            if (left === right) {\\n                return left;\\n            }\\n            const guess = Math.floor((right  + left) / 2);\\n            if (arr[guess] <= value) {\\n                return upperBound(value, arr, guess + 1, right);\\n            } else {\\n                return upperBound(value, arr, left, guess);\\n            }\\n        }\\n        const last = (arr) => arr[arr.length - 1];\\n        const randomWeightSum = Math.random() * last(this.rectsWeightsPrefixSum);\\n        const rectIndex = upperBound(randomWeightSum, this.rectsWeightsPrefixSum);\\n        return this.rects[rectIndex];\\n    }\\n    \\n    pick() {\\n        const [x1, y1, x2, y2] = this.pickRect();\\n        const x = x1 + Math.floor(Math.random() * (x2 - x1 + 1));\\n        const y = y1 + Math.floor(Math.random() * (y2 - y1 + 1));\\n        return [x, y];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1333114,
                "title": "pick-rectangle-with-binary-search-and-weights-then-pick-point-in-rectangle",
                "content": "Make use of similar logic in: https://leetcode.com/problems/random-pick-with-weight/\\n\\n\\t// Pick random rectangle with weights in prefix sum array, and then pick random point: Ot(log2(n)), Os(n)\\n    class Solution {\\n\\n        // Ot(n)\\n        public Solution(int[][] rects) {\\n            assert rects.length > 0;\\n            this.rects = rects;\\n\\n            // Build prefix sum array, with rectangle area as weight\\n            sums = new int[rects.length + 1];\\n            for (int i = 1; i <= rects.length; i++) {\\n                int[] rect = rects[i - 1];\\n                sums[i] = sums[i - 1] + (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            }\\n        }\\n\\n        // Ot(log2(n))\\n        public int[] pick() {\\n            // Pick random index by weight in prefix sum array\\n            int index = randomIndexByWeight();\\n\\n            // Pick random point in selected rectangle\\n            int x = rand.nextInt(rects[index][2] - rects[index][0] + 1) + rects[index][0],\\n                y = rand.nextInt(rects[index][3] - rects[index][1] + 1) + rects[index][1];\\n            return new int[]{x, y};\\n        }\\n\\n        // Ot(log2(n))\\n        private int randomIndexByWeight() {\\n            // Generate target in [0, max sum)\\n            int target = rand.nextInt(sums[sums.length - 1]);\\n\\n            // Right-bound binary search to find last sum <= target\\n            int left = 0, right = sums.length - 2;\\n            while (left < right) {\\n                int mid = right - (right - left) / 2;\\n                if (sums[mid] <= target) {\\n                    left = mid;\\n                } else {\\n                    right = mid - 1;\\n                }\\n            }\\n\\n            return left;\\n        }\\n\\n        private int[][] rects;\\n        private int[] sums;\\n        private Random rand = new Random();\\n    }",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\n        // Ot(n)\\n        public Solution(int[][] rects) {\\n            assert rects.length > 0;\\n            this.rects = rects;\\n\\n            // Build prefix sum array, with rectangle area as weight\\n            sums = new int[rects.length + 1];\\n            for (int i = 1; i <= rects.length; i++) {\\n                int[] rect = rects[i - 1];\\n                sums[i] = sums[i - 1] + (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1115646,
                "title": "testcase-problem",
                "content": "I was getting my code to work and changed test case from\\n```\\n... [1,1,5,5] ...\\n```\\nto\\n```\\n... [1,1,5,-5] ...\\n```\\nand got the following runtime error:\\n```\\nLine 21: ValueError: empty range for randrange() (0,-25, -25)\\n```\\nAt first I thought it meant my \"Line 21\" but as I added writeln()s,\\nI noticed that my line 21 had become\\n```\\nlet x,y;\\n```\\nwith the same error.\\n- - -\\nUpdate:  I went ahead and copy pasted the other two working JS entries\\nand they both worked fine until I changed 5 to -5. then they each crashed at a different point.\\nI also re-read the Directions.  There was a pointed mention that the rectangles\\nare non-overlapping.  But the test case that I altered only had the one rectangle.\\nAnd the Directions also intimate that areas of zero and rectangles using negative\\nvalues are acceptable.\\n```\\n   |\\n   | ****\\n-----****---------------------\\n   | ****\\n   | ****\\n   | ****\\n   | ****\\n   |\\n```\\nThat\\'s sort of what I think the rectangle should look like.  It feels \"legit\".\\n\\n",
                "solutionTags": [],
                "code": "```\\n... [1,1,5,5] ...\\n```\n```\\n... [1,1,5,-5] ...\\n```\n```\\nLine 21: ValueError: empty range for randrange() (0,-25, -25)\\n```\n```\\nlet x,y;\\n```\n```\\n   |\\n   | ****\\n-----****---------------------\\n   | ****\\n   | ****\\n   | ****\\n   | ****\\n   |\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1104379,
                "title": "python-160-ms-binary-search-prefix-sum",
                "content": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.sizes = [0]\\n        for rect in rects:\\n            self.sizes.append((rect[2]-rect[0] + 1) * (rect[3]-rect[1] + 1) + self.sizes[-1])\\n\\n    def pick(self) -> List[int]:\\n        idx = random.randint(0, self.sizes[-1] - 1)\\n        pos = bisect.bisect(self.sizes, idx)\\n        rect = self.rects[pos-1]\\n        x_size = rect[2] -rect[0] + 1\\n        offset = idx - self.sizes[pos-1]\\n        \\n        return [rect[0] + offset % x_size, rect[1] + offset // x_size]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rects = rects\\n        self.sizes = [0]\\n        for rect in rects:\\n            self.sizes.append((rect[2]-rect[0] + 1) * (rect[3]-rect[1] + 1) + self.sizes[-1])\\n\\n    def pick(self) -> List[int]:\\n        idx = random.randint(0, self.sizes[-1] - 1)\\n        pos = bisect.bisect(self.sizes, idx)\\n        rect = self.rects[pos-1]\\n        x_size = rect[2] -rect[0] + 1\\n        offset = idx - self.sizes[pos-1]\\n        \\n        return [rect[0] + offset % x_size, rect[1] + offset // x_size]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1014049,
                "title": "java-binary-search-with-weights-array",
                "content": "~~~\\n\\nclass Solution {\\n    int[] weights;\\n    int[][] rects;\\n    Random rd;\\n\\n    public Solution(int[][] rects) {\\n        this.weights = new int[rects.length];\\n        this.rects = rects;\\n        this.rd = new Random();\\n        \\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            \\n            int count = (1 + rect[2] - rect[0]) * (1 + rect[3] - rect[1]);\\n            \\n            weights[i] = (i == 0 ? 0 : weights[i - 1]) + count;\\n        }\\n    }\\n    \\n    public int[] pick() {\\n        int picked = 1 + rd.nextInt(weights[weights.length - 1]);\\n        \\n        int idx = findGreaterOrEqual(picked);\\n        \\n        return getRandomPoint(idx);\\n    }\\n    \\n    private int findGreaterOrEqual(int target) {\\n        int left = 0, right = weights.length - 1;\\n        while (left + 1 < right) {\\n            int mid = left + (right - left) / 2;\\n            if (weights[mid] >= target) {\\n                right = mid;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n        return weights[left] >= target ? left : right;\\n    }\\n    \\n    private int[] getRandomPoint(int idx) {\\n        int[] r = rects[idx];\\n        int left = r[0], right = r[2], bot = r[1], top = r[3];\\n        \\n        return new int[]{left + rd.nextInt(right - left + 1), \\n                         bot + rd.nextInt(top - bot + 1)};\\n    }\\n}\\n\\n\\n~~~",
                "solutionTags": [],
                "code": "class Solution {\\n    int[] weights;\\n    int[][] rects;\\n    Random rd;\\n\\n    public Solution(int[][] rects) {\\n        this.weights = new int[rects.length];\\n        this.rects = rects;\\n        this.rd = new Random();\\n        \\n        for (int i = 0; i < rects.length; i++) {\\n            int[] rect = rects[i];\\n            \\n            int count = (1 + rect[2] - rect[0]) * (1 + rect[3] - rect[1]);\\n            \\n            weights[i] = (i == 0 ? 0 : weights[i - 1]) + count;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 970527,
                "title": "javascript-js-clean-solution-beat-100",
                "content": "```js\\n/**\\n * @param {number[][]} rects\\n */\\nvar Solution = function(rects) {\\n    this.rects = rects;\\n    let sumArea = 0,\\n        areaList = [],\\n        area;\\n    \\n    rects.forEach(rect => {\\n        area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n        sumArea += area;\\n        areaList.push(area);\\n        \\n    })\\n    \\n    this.sumArea = sumArea;\\n    this.areaList = areaList;\\n};\\n\\n/**\\n * @return {number[]}\\n */\\nSolution.prototype.pick = function() {\\n    let area = Math.random() * this.sumArea;\\n    let i = 0;\\n    while(area - this.areaList[i] > 0) {\\n        area -= this.areaList[i];\\n        i++;\\n    }\\n    \\n    const rect = this.rects[i];\\n    \\n    return [rect[0]+Math.floor(Math.random()*(rect[2]-rect[0]+1)), rect[1]+Math.floor(Math.random()*(rect[3]-rect[1]+1))]\\n    \\n};\\n\\n/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(rects)\\n * var param_1 = obj.pick()\\n */\\n ```\\n \\n The tricky point is how to generate a random number inclusive on both ends.",
                "solutionTags": [],
                "code": "```js\\n/**\\n * @param {number[][]} rects\\n */\\nvar Solution = function(rects) {\\n    this.rects = rects;\\n    let sumArea = 0,\\n        areaList = [],\\n        area;\\n    \\n    rects.forEach(rect => {\\n        area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);\\n        sumArea += area;\\n        areaList.push(area);\\n        \\n    })\\n    \\n    this.sumArea = sumArea;\\n    this.areaList = areaList;\\n};\\n\\n/**\\n * @return {number[]}\\n */\\nSolution.prototype.pick = function() {\\n    let area = Math.random() * this.sumArea;\\n    let i = 0;\\n    while(area - this.areaList[i] > 0) {\\n        area -= this.areaList[i];\\n        i++;\\n    }\\n    \\n    const rect = this.rects[i];\\n    \\n    return [rect[0]+Math.floor(Math.random()*(rect[2]-rect[0]+1)), rect[1]+Math.floor(Math.random()*(rect[3]-rect[1]+1))]\\n    \\n};\\n\\n/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(rects)\\n * var param_1 = obj.pick()\\n */\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 970099,
                "title": "easy-understand-python-with-comments",
                "content": "from random import choice\\nfrom random import randint\\nfrom bisect import bisect_left\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):  \\n        d = {}\\n        self.rects = rects\\n        for i in range(len(rects)):#calculate the number of points in each rectangle \\n            x1, y1, x2, y2 = rects[i]\\n            d[i] = (x2-x1+1)*(y2-y1+1)\\n\\n        self.l = [d[0]]\\n        for j in range(1,len(rects)):#construct weight list\\n            self.l.append(d[j]+self.l[-1])\\n\\n    def pick(self) -> List[int]:\\n        k = randint(0,self.l[-1])# randomly get a number below the sum\\n        index =bisect_left(self.l, k)#find the corresponding rectangle \\n        area = self.rects[index]\\n\\n        return [choice(range(area[0], area[2]+1)),choice(range(area[1], area[3]+1)) ]",
                "solutionTags": [],
                "code": "class Solution:\\n\\n    def __init__(self, rects: List[List[int]]):  \\n        d = {}",
                "codeTag": "Java"
            },
            {
                "id": 927637,
                "title": "python-cumulative-distribution-and-binary-search-with-explanation",
                "content": "To generate a random integer point,\\n\\nStep 1: randomly pick a rectangle **proportional to how many integer points it contains** (note that not proportional to its area, since we count the edge in); to do this, use cumulative ditstribution see https://leetcode.com/problems/random-pick-with-weight/discuss/925976/python-cumulative-distribution-binary-search-with-explanation for explantion.\\n\\nStep 2: Within the picked rectangel, pick an integer point\\n\\n```\\nfrom random import random, randint\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rect = rects\\n        self.cdf = [0] * len(rects)\\n        area = [0] * len(rects)\\n        for i, r in enumerate(rects):\\n            area[i] = (r[2]-r[0]+1) * (r[3]-r[1]+1)\\n        tot = sum(area)\\n        self.cdf[0] = area[0]\\n        for i in range(1, len(self.cdf)):\\n            self.cdf[i] = self.cdf[i-1] + area[i]\\n        self.cdf = [i/tot for i in self.cdf]\\n        print(self.cdf)\\n\\n    def pick(self) -> List[int]:\\n        n = random()\\n        \\n        def b_search(arr, target):\\n            # find the smallest index i such that arr[i] > target\\n            start, end = 0, len(arr) -1 \\n            while start+1 < end:\\n                mid = (start+end)//2\\n                if arr[mid] <= target:\\n                    start = mid\\n                else:\\n                    end = mid\\n            if arr[start] > target:\\n                return start\\n            return end\\n        \\n        idx = b_search(self.cdf, n)\\n        x_range, y_range = [self.rect[idx][0], self.rect[idx][2]], [self.rect[idx][1], self.rect[idx][3]]\\n        x = randint(x_range[0], x_range[1])\\n        y = randint(y_range[0], y_range[1])\\n                \\n        return [x, y]",
                "solutionTags": [],
                "code": "To generate a random integer point,\\n\\nStep 1: randomly pick a rectangle **proportional to how many integer points it contains** (note that not proportional to its area, since we count the edge in); to do this, use cumulative ditstribution see https://leetcode.com/problems/random-pick-with-weight/discuss/925976/python-cumulative-distribution-binary-search-with-explanation for explantion.\\n\\nStep 2: Within the picked rectangel, pick an integer point\\n\\n```\\nfrom random import random, randint\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.rect = rects\\n        self.cdf = [0] * len(rects)\\n        area = [0] * len(rects)\\n        for i, r in enumerate(rects):\\n            area[i] = (r[2]-r[0]+1) * (r[3]-r[1]+1)\\n        tot = sum(area)\\n        self.cdf[0] = area[0]\\n        for i in range(1, len(self.cdf)):\\n            self.cdf[i] = self.cdf[i-1] + area[i]\\n        self.cdf = [i/tot for i in self.cdf]\\n        print(self.cdf)\\n\\n    def pick(self) -> List[int]:\\n        n = random()\\n        \\n        def b_search(arr, target):\\n            # find the smallest index i such that arr[i] > target\\n            start, end = 0, len(arr) -1 \\n            while start+1 < end:\\n                mid = (start+end)//2\\n                if arr[mid] <= target:\\n                    start = mid\\n                else:\\n                    end = mid\\n            if arr[start] > target:\\n                return start\\n            return end\\n        \\n        idx = b_search(self.cdf, n)\\n        x_range, y_range = [self.rect[idx][0], self.rect[idx][2]], [self.rect[idx][1], self.rect[idx][3]]\\n        x = randint(x_range[0], x_range[1])\\n        y = randint(y_range[0], y_range[1])\\n                \\n        return [x, y]",
                "codeTag": "Java"
            },
            {
                "id": 926001,
                "title": "python-beats-100",
                "content": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.pa=[0]  # cumulative area of all rectangles\\n        self.pos=[]  # lower left corner position and witdh information of each rectangle\\n        p_area=0\\n        for x1,y1,x2,y2 in rects:\\n            p_area+=(y2-y1+1)*(x2-x1+1)\\n            self.pa.append(p_area)\\n            self.pos.append((x1,y1,x2-x1+1))\\n\\n    def pick(self) -> List[int]:\\n        a=randint(0,self.pa[-1]-1)  # cumulative area of the new point\\n        ind=bisect_right(self.pa,a)-1 # find out which rectangle the new point lies in\\n        extra = a-self.pa[ind]  # extra area of the rectangle where the new point lies in\\n        \\n        x,y,w=self.pos[ind]\\n        d,h=extra%w,extra//w\\n        return [x+d,y+h]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def __init__(self, rects: List[List[int]]):\\n        self.pa=[0]  # cumulative area of all rectangles\\n        self.pos=[]  # lower left corner position and witdh information of each rectangle\\n        p_area=0\\n        for x1,y1,x2,y2 in rects:\\n            p_area+=(y2-y1+1)*(x2-x1+1)\\n            self.pa.append(p_area)\\n            self.pos.append((x1,y1,x2-x1+1))\\n\\n    def pick(self) -> List[int]:\\n        a=randint(0,self.pa[-1]-1)  # cumulative area of the new point\\n        ind=bisect_right(self.pa,a)-1 # find out which rectangle the new point lies in\\n        extra = a-self.pa[ind]  # extra area of the rectangle where the new point lies in\\n        \\n        x,y,w=self.pos[ind]\\n        d,h=extra%w,extra//w\\n        return [x+d,y+h]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 824200,
                "title": "pancake-sorting-global-name-a-is-not-defined",
                "content": "I am getting this error. For testing I am running this code. Please help\\n```\\nclass Solution {\\npublic:\\n    vector<int> pancakeSort(vector<int>& arr) {\\n        return arr;   \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> pancakeSort(vector<int>& arr) {\\n        return arr;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 821676,
                "title": "delete-node-in-a-bst-python3-recursive",
                "content": "after finding the node, put the left child (if any) of its right child to the deepest right child of its left child, then the new left child of current right child will be current left child. return right child as new root \\n```\\nclass Solution:\\n    def helper(self, root, key):\\n      if not root:\\n        return None\\n      else:\\n        if root.val == key:\\n          if not root.left and not root.right:\\n            return None\\n          elif root.left and not root.right:\\n            return root.left\\n          elif root.right and not root.left:\\n            return root.right\\n          else:\\n            left_right_most = root.left\\n            prev = left_right_most\\n            while left_right_most:\\n              prev = left_right_most\\n              left_right_most = left_right_most.right\\n            prev.right = root.right.left\\n            root.right.left = root.left\\n            return root.right\\n        elif root.val > key:\\n          root.left = self.helper(root.left, key)\\n        elif root.val < key:\\n          root.right = self.helper(root.right, key)\\n        return root\\n  \\n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\\n      return self.helper(root, key)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def helper(self, root, key):\\n      if not root:\\n        return None\\n      else:\\n        if root.val == key:\\n          if not root.left and not root.right:\\n            return None\\n          elif root.left and not root.right:\\n            return root.left\\n          elif root.right and not root.left:\\n            return root.right\\n          else:\\n            left_right_most = root.left\\n            prev = left_right_most\\n            while left_right_most:\\n              prev = left_right_most\\n              left_right_most = left_right_most.right\\n            prev.right = root.right.left\\n            root.right.left = root.left\\n            return root.right\\n        elif root.val > key:\\n          root.left = self.helper(root.left, key)\\n        elif root.val < key:\\n          root.right = self.helper(root.right, key)\\n        return root\\n  \\n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\\n      return self.helper(root, key)\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1566380,
                "content": [
                    {
                        "username": "genegenehou",
                        "content": "I originally use (x2 - x1) * (y2 - y1) to calculate the area of each rectangle, and sum all of them together, but got failed in the test cases. After reading the posts, I found correct answers used (x2 - x1 + 1) * (y2 - y1 + 1) to calculate area, which I didn\\'t understand at the first beginning. Now I know the answer: what we want is actually not area, but the number of integer points in each rectangle.\\n\\nWe need to note that in this question, what we are asked to pick in each rectangle is **integer point**! So, using the real area size of each rectangle is incorrect to measure the relative probability of being picked up between rectangles. For example, let\\'s say we have 2 rectangles, **[0, 1, 0, 1]** and **[0, 2, 0, 2]**, we can see that the area ratio between them is **1 : 4**, but their number of integer points\\' ratio is **4 : 9** (4 integer points in 1st rectangle and 9 integer points in 2nd one)! So, if we want to pick a random integer point, the probability of picking it in the 1st rectangle should be 4/13. If we use area to measure this probability, it\\'ll be 1/5, which is wrong.\\n\\nI am thinking that in this problem if we are asked to pick any point inside a rectangle(return a double[]), instead of integer point, then using area is the correct answer. Correct me if I am wrong."
                    },
                    {
                        "username": "gauri03",
                        "content": "That\\'s an insanely good logic!"
                    },
                    {
                        "username": "fshen",
                        "content": "I\\u2019m just curious about how the judging program check if the returned points are drawed from a uniform distribution.\\nOr, if we have to write a unit test for this kind of program, what\\u2019s the best practice?"
                    },
                    {
                        "username": "jr-",
                        "content": "The description talks of _space covered by the rectangles_.\\n\\nOne may take this to mean the area covered by the rectangles.  But it is not that.\\n\\nFor example, the rectangle `[0, 0, 0, 3]` has zero area and an area based solution would not return any points on it.  However, points on it such as `(0, 0)` , `(0, 1)`, and `(0, 3)` are expected toaq be returned by `pick()`.\\n\\nPerhaps it is better to think of the \"space covered\" in terms of the number of points covered by the rectangle on an integer 2D grid.  Hence, `[0, 0, 0, 3]` covers four points from `(0, 0)` to `(0, 3)` and the rectangle `[0, 0, 1, 1]`, for example, also covers four points.\\n"
                    }
                ]
            },
            {
                "id": 1574260,
                "content": [
                    {
                        "username": "genegenehou",
                        "content": "I originally use (x2 - x1) * (y2 - y1) to calculate the area of each rectangle, and sum all of them together, but got failed in the test cases. After reading the posts, I found correct answers used (x2 - x1 + 1) * (y2 - y1 + 1) to calculate area, which I didn\\'t understand at the first beginning. Now I know the answer: what we want is actually not area, but the number of integer points in each rectangle.\\n\\nWe need to note that in this question, what we are asked to pick in each rectangle is **integer point**! So, using the real area size of each rectangle is incorrect to measure the relative probability of being picked up between rectangles. For example, let\\'s say we have 2 rectangles, **[0, 1, 0, 1]** and **[0, 2, 0, 2]**, we can see that the area ratio between them is **1 : 4**, but their number of integer points\\' ratio is **4 : 9** (4 integer points in 1st rectangle and 9 integer points in 2nd one)! So, if we want to pick a random integer point, the probability of picking it in the 1st rectangle should be 4/13. If we use area to measure this probability, it\\'ll be 1/5, which is wrong.\\n\\nI am thinking that in this problem if we are asked to pick any point inside a rectangle(return a double[]), instead of integer point, then using area is the correct answer. Correct me if I am wrong."
                    },
                    {
                        "username": "gauri03",
                        "content": "That\\'s an insanely good logic!"
                    },
                    {
                        "username": "fshen",
                        "content": "I\\u2019m just curious about how the judging program check if the returned points are drawed from a uniform distribution.\\nOr, if we have to write a unit test for this kind of program, what\\u2019s the best practice?"
                    },
                    {
                        "username": "jr-",
                        "content": "The description talks of _space covered by the rectangles_.\\n\\nOne may take this to mean the area covered by the rectangles.  But it is not that.\\n\\nFor example, the rectangle `[0, 0, 0, 3]` has zero area and an area based solution would not return any points on it.  However, points on it such as `(0, 0)` , `(0, 1)`, and `(0, 3)` are expected toaq be returned by `pick()`.\\n\\nPerhaps it is better to think of the \"space covered\" in terms of the number of points covered by the rectangle on an integer 2D grid.  Hence, `[0, 0, 0, 3]` covers four points from `(0, 0)` to `(0, 3)` and the rectangle `[0, 0, 1, 1]`, for example, also covers four points.\\n"
                    }
                ]
            },
            {
                "id": 1572406,
                "content": [
                    {
                        "username": "genegenehou",
                        "content": "I originally use (x2 - x1) * (y2 - y1) to calculate the area of each rectangle, and sum all of them together, but got failed in the test cases. After reading the posts, I found correct answers used (x2 - x1 + 1) * (y2 - y1 + 1) to calculate area, which I didn\\'t understand at the first beginning. Now I know the answer: what we want is actually not area, but the number of integer points in each rectangle.\\n\\nWe need to note that in this question, what we are asked to pick in each rectangle is **integer point**! So, using the real area size of each rectangle is incorrect to measure the relative probability of being picked up between rectangles. For example, let\\'s say we have 2 rectangles, **[0, 1, 0, 1]** and **[0, 2, 0, 2]**, we can see that the area ratio between them is **1 : 4**, but their number of integer points\\' ratio is **4 : 9** (4 integer points in 1st rectangle and 9 integer points in 2nd one)! So, if we want to pick a random integer point, the probability of picking it in the 1st rectangle should be 4/13. If we use area to measure this probability, it\\'ll be 1/5, which is wrong.\\n\\nI am thinking that in this problem if we are asked to pick any point inside a rectangle(return a double[]), instead of integer point, then using area is the correct answer. Correct me if I am wrong."
                    },
                    {
                        "username": "gauri03",
                        "content": "That\\'s an insanely good logic!"
                    },
                    {
                        "username": "fshen",
                        "content": "I\\u2019m just curious about how the judging program check if the returned points are drawed from a uniform distribution.\\nOr, if we have to write a unit test for this kind of program, what\\u2019s the best practice?"
                    },
                    {
                        "username": "jr-",
                        "content": "The description talks of _space covered by the rectangles_.\\n\\nOne may take this to mean the area covered by the rectangles.  But it is not that.\\n\\nFor example, the rectangle `[0, 0, 0, 3]` has zero area and an area based solution would not return any points on it.  However, points on it such as `(0, 0)` , `(0, 1)`, and `(0, 3)` are expected toaq be returned by `pick()`.\\n\\nPerhaps it is better to think of the \"space covered\" in terms of the number of points covered by the rectangle on an integer 2D grid.  Hence, `[0, 0, 0, 3]` covers four points from `(0, 0)` to `(0, 3)` and the rectangle `[0, 0, 1, 1]`, for example, also covers four points.\\n"
                    }
                ]
            }
        ]
    },
    {
        "title": "Friend Requests I: Overall Acceptance Rate",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1734004,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1566000,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1567084,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1567276,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1575324,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1575713,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1575484,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1572191,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1806942,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1574002,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1734004,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1566000,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1567084,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1567276,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1575324,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1575713,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1575484,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1572191,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1806942,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            },
            {
                "id": 1574002,
                "content": [
                    {
                        "username": "chy2069",
                        "content": "Damn this is a one of the easiest questions here? I feel like my career is fked. "
                    },
                    {
                        "username": "shreeyazx",
                        "content": "don\\'t worry mate, just be consistent in solving be it 2 problems a day. anyway this is a medium level problem tagged easy."
                    },
                    {
                        "username": "psu4",
                        "content": "The question looks very easy. i wrote the first answer with select count()/count() in 30 seconds, but the interviewer said that i have to use JOIN to solve this problem.  It became tricky"
                    },
                    {
                        "username": "poopah",
                        "content": "\\n{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}\\n\\nhere is the test:\\nmy answer is 0.75 but expected to be 1. how come?\\n\\n1,2\\n1,3\\n2,3, is accepted out of 4.\\n3,4 is not in sent, 1,4 is not accepted"
                    },
                    {
                        "username": "niteshthakur",
                        "content": "You have to count the number of non duplicate rows in each table and divide them and round them, also null should be converted to 0. You can use ifnull, round , count functions as well."
                    },
                    {
                        "username": "LovelyLizzzz",
                        "content": "# Write your MySQL query statement below\\nwith t1 as (\\nselect concat(sender_id,send_to_id)as concat1 from FriendRequest\\n), t2 as (\\nselect concat(requester_id, accepter_id)as concat2 from RequestAccepted\\n)\\n\\nselect ifnull(round(count(distinct t2.concat2)/count(distinct t1.concat1),2),0.00) as accept_rate from t1,t2"
                    },
                    {
                        "username": "hangguowork",
                        "content": "FriendRequest\":\\n[[1,2,\"2016/06/01\"],\\n[1,3,\"2016/06/01\"],\\n[1,4,\"2016/06/01\"],\\n[2,3,\"2016/06/02\"]],\\n\"RequestAccepted\":\\n[[1,2,\"2016/06/03\"],\\n[1,3,\"2016/06/08\"],\\n[2,3,\"2016/06/08\"],\\n[3,4,\"2016/06/09\"]]}}\\n\\nId 1 sends a request to 4 but it never got accpeted from table  RequestAccepted. How can the answer be 1??\\n\\n"
                    },
                    {
                        "username": "nirBtw",
                        "content": "with cte as (select \\n(select count(distinct sender_id, send_to_id) \\nfrom FriendRequest) as total_requests ,\\n(select count(distinct accepter_id, requester_id  )\\nfrom RequestAccepted) as total_accept\\n    )\\n\\nselect round(ifnull(total_accept/total_requests,0),2) as accept_rate \\nfrom cte\\n    \\n"
                    },
                    {
                        "username": "andrzejkrk1",
                        "content": "Question says:\\n\\n\"The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.\"\\n\\nSo... what is the total \"number of requests\", if there are additional sources of requests we don\\'t know. Let\\'s say I have 20 accepted requests and I know some of them came from the table friend_request and other from other tables of unknown size (\"not necessarily from the table friend_request\")? This question doesn\\'t make any sense when you put it this way. Didn\\'t it occur to anyone yet?"
                    },
                    {
                        "username": "dario-botkuljak",
                        "content": "I suspect some test results are wrong. Test case 1 has 5 accepted out of 6, which is 5/6=0.83, but only 0.8 is accepted, and I presume the rounding is the problem"
                    },
                    {
                        "username": "cecilia0101",
                        "content": "When I tried to use the full join clause, there is a syntax error from the result"
                    }
                ]
            }
        ]
    }
]