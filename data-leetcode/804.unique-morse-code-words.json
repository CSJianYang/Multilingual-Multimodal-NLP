[
    {
        "title": "Unique Morse Code Words",
        "question_content": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n\n\t'a' maps to \".-\",\n\t'b' maps to \"-...\",\n\t'c' maps to \"-.-.\", and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\nGiven an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\n\n\tFor example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word.\n\nReturn the number of different transformations among all words we have.\n&nbsp;\nExample 1:\n\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\nOutput: 2\nExplanation: The transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations: \"--...-.\" and \"--...--.\".\n\nExample 2:\n\nInput: words = [\"a\"]\nOutput: 1\n\n&nbsp;\nConstraints:\n\n\t1 <= words.length <= 100\n\t1 <= words[i].length <= 12\n\twords[i] consists of lowercase English letters.",
        "solutions": [
            {
                "id": 120675,
                "title": "java-c-python-easy-and-concise-solution",
                "content": "\\n**Java**\\n```java\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] d = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        HashSet<String> s = new HashSet<>();\\n        for (String w : words) {\\n            StringBuilder sb = new StringBuilder();\\n            for (int i = 0; i < w.length(); ++i)\\n                sb.append(d[w.charAt(i) - \\'a\\']);\\n            s.add(sb.toString());\\n        }\\n        return s.size();\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> d = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        unordered_set<string> s;\\n        for (auto w : words) {\\n            string code;\\n            for (auto c : w) code += d[c - \\'a\\'];\\n            s.insert(code);\\n        }\\n        return s.size();\\n    }\\n```\\n\\n**Python**\\n```python\\n    def uniqueMorseRepresentations(self, words):\\n        d = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\",\\n             \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"]\\n        return len({\\'\\'.join(d[ord(i) - ord(\\'a\\')] for i in w) for w in words})",
                "solutionTags": [],
                "code": "```java\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] d = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        HashSet<String> s = new HashSet<>();\\n        for (String w : words) {\\n            StringBuilder sb = new StringBuilder();\\n            for (int i = 0; i < w.length(); ++i)\\n                sb.append(d[w.charAt(i) - \\'a\\']);\\n            s.add(sb.toString());\\n        }\\n        return s.size();\\n    }\\n```\n```cpp\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> d = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        unordered_set<string> s;\\n        for (auto w : words) {\\n            string code;\\n            for (auto c : w) code += d[c - \\'a\\'];\\n            s.insert(code);\\n        }\\n        return s.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 329303,
                "title": "javascript-one-line-solution-w-explanation-52-ms-beats-94",
                "content": "**Approach**:\\nWe need to return the number of morse representations for the given list of words. The approach for this problem is as follows:\\n1. Look at each word in `words`.\\n2. For each word, look at each letter.\\n3. Get the morse representation of each letter\\n4. Build the word with the morse letter\\n5. Once we finished building the word, add it to our set if it isn\\'t already in there\\n6. Return the number of *unique* morse representations.\\n\\n**Solution**: \\n```js\\nconst alphabet = {\\n    a: \\'.-\\', b: \\'-...\\',   c: \\'-.-.\\', d: \\'-..\\', e: \\'.\\', f: \\'..-.\\', g: \\'--.\\', h: \\'....\\', i: \\'..\\',  j: \\'.---\\',  k: \\'-.-\\',  l: \\'.-..\\', m: \\'--\\',\\n    n: \\'-.\\',  o: \\'---\\', p: \\'.--.\\',  q: \\'--.-\\',  r: \\'.-.\\', s: \\'...\\', t: \\'-\\', u: \\'..-\\', v: \\'...-\\', w: \\'.--\\', x: \\'-..-\\',  y: \\'-.--\\', z: \\'--..\\' \\n}\\n\\n/**\\n * @param {string[]} words the word array to convert to morse\\n * @return {number} the length of unique morse representations\\n */\\nconst uniqueMorseRepresentations = words => {  \\n\\t// PREVIOUS SOLUTION:\\n\\t// return [...new Set(words.map(word => word.split(\\'\\').map(letter => alphabet[letter]).join(\\'\\')))].length\\n   \\n    // Edited on 9-9-2019\\n    return new Set(words.map(word => word.split(\\'\\').map(letter => alphabet[letter]).join(\\'\\'))).size\\n}\\n```\\n**Explanation**: \\nThis is a fun problem to apply [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)! Since we\\'re changing every element in the array, `map()` works nicely.  We\\'ll use the example `words = [\\'gin\\', \\'zen\\', \\'gig\\', \\'msg\\']` to explain how this works:\\n\\n1. For each word, we\\'ll split the characters of each word with our first use of `map()`. We\\'ll have something like this after looking at one word:\\n\\n\\t```js  \\n\\t[ [\\'g\\', \\'i\\', \\'n\\'], \\'zen\\', \\'gig\\', \\'msg\\' ] \\n\\t ```\\n\\t\\n2. We\\'ll use `map()`  again inside our first map method. We\\'ll do this to look at each letter of the inner array to create a Morse Code word. \\n\\n3.  For each letter during our second use of `map()`, we\\'ll get the letter\\'s Morse Code, and build a word with it using `join(\\'\\')`. After one use of both `map()` methods, we\\'ll get the first Morse word for `\\'gin\\'`: \\n\\t```js  \\n\\t[\\'--...-.\\', \\'zen\\', \\'gig\\', \\'msg\\'] \\n\\t ```\\n\\n4. We\\'ll repeat steps 1-3 until we have an array of new Morse Code words:\\n\\n\\t```js\\n\\t[\\'--...-.\\', \\'--...-.\\', \\'--...--.\\', \\'--...--.\\']\\n\\t```\\n\\n\\n5. We\\'ll use JavaScript\\'s [Set Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) to only keep the unique representations. The Set constructor takes in an array, which will be the array shown in Step 2, and then removes duplicate elements, so we\\'ll only be left with unique Morse Code words:\\n\\n\\t```js\\n\\t[\\'--...-.\\', \\'--...--.\\']\\n\\t```\\n\\n(EDITED on September 9th, 2019)\\nFinally, we can return the size of the set\\n```js\\n    return new Set(words.map(word => word.split(\\'\\').map(letter => alphabet[letter]).join(\\'\\'))).size\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst alphabet = {\\n    a: \\'.-\\', b: \\'-...\\',   c: \\'-.-.\\', d: \\'-..\\', e: \\'.\\', f: \\'..-.\\', g: \\'--.\\', h: \\'....\\', i: \\'..\\',  j: \\'.---\\',  k: \\'-.-\\',  l: \\'.-..\\', m: \\'--\\',\\n    n: \\'-.\\',  o: \\'---\\', p: \\'.--.\\',  q: \\'--.-\\',  r: \\'.-.\\', s: \\'...\\', t: \\'-\\', u: \\'..-\\', v: \\'...-\\', w: \\'.--\\', x: \\'-..-\\',  y: \\'-.--\\', z: \\'--..\\' \\n}\\n\\n/**\\n * @param {string[]} words the word array to convert to morse\\n * @return {number} the length of unique morse representations\\n */\\nconst uniqueMorseRepresentations = words => {  \\n\\t// PREVIOUS SOLUTION:\\n\\t// return [...new Set(words.map(word => word.split(\\'\\').map(letter => alphabet[letter]).join(\\'\\')))].length\\n   \\n    // Edited on 9-9-2019\\n    return new Set(words.map(word => word.split(\\'\\').map(letter => alphabet[letter]).join(\\'\\'))).size\\n}\\n```\n```js  \\n\\t[ [\\'g\\', \\'i\\', \\'n\\'], \\'zen\\', \\'gig\\', \\'msg\\' ] \\n\\t ```\n```js  \\n\\t[\\'--...-.\\', \\'zen\\', \\'gig\\', \\'msg\\'] \\n\\t ```\n```js\\n\\t[\\'--...-.\\', \\'--...-.\\', \\'--...--.\\', \\'--...--.\\']\\n\\t```\n```js\\n\\t[\\'--...-.\\', \\'--...--.\\']\\n\\t```\n```js\\n    return new Set(words.map(word => word.split(\\'\\').map(letter => alphabet[letter]).join(\\'\\'))).size\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 120672,
                "title": "c-straightforward",
                "content": "    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse_code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> gen_codes;\\n        \\n        for(auto word : words) {\\n            string code = \"\";\\n            for(auto ch : word)\\n                code += morse_code[ch - \\'a\\'];\\n            gen_codes.insert(code);\\n        }\\n        \\n        return gen_codes.size();\\n    }",
                "solutionTags": [],
                "code": "    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse_code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> gen_codes;\\n        \\n        for(auto word : words) {\\n            string code = \"\";\\n            for(auto ch : word)\\n                code += morse_code[ch - \\'a\\'];\\n            gen_codes.insert(code);\\n        }\\n        \\n        return gen_codes.size();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 944921,
                "title": "python-just-use-set-explained",
                "content": "Nothing very special about this problem: we just need to iterate through our `words` and for each of them build string. It is actually can be done even in one line (not including `alphabet`) if we use double comperehsions, but this is up to you if you like oneliners.\\n\\n**Complexity**: time and space complexity is `O(n*k)`, where `n` is number of words and `k` average is length of each word and we note that length of each encoding is not more than `4`. Space complexity is `O(n*k)` as well.\\n\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        alphabet = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        ans = []\\n        for word in words:\\n            ans.append(\"\".join(alphabet[ord(s)-ord(\"a\")] for s in word))\\n        return len(set(ans))\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        alphabet = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        ans = []\\n        for word in words:\\n            ans.append(\"\".join(alphabet[ord(s)-ord(\"a\")] for s in word))\\n        return len(set(ans))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437990,
                "title": "python-easily-understood-faster-than-99-7-2-lines",
                "content": "In this question, the easiest way is to create a dict like this:\\n```\\n\\tmorse_code_dict = {\\'a\\': \\'.-\\',\\n\\t\\t\\'b\\': \\'-...\\',\\n\\t\\t\\'c\\': \\'-.-.\\',\\n\\t\\tand so on...\\n\\t}\\n```\\nbut this is time consuming.\\nThus, we can use the idea of **ASCII** in which\\n```\\na = 97\\nb = 98\\nand so on...\\n```\\n\\nCode:\\n```\\ndef uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\tmorse_code_array = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n\\tresult = set()\\n\\tfor word in words:\\n\\t\\tword = word.lower()\\n\\t\\ttransformations = \"\"\\n\\t\\tfor chr in word:\\n\\t\\t\\ttransformations += morse_code_array[ord(chr) - 97]\\n\\t\\tresult.add(transformations)\\n\\treturn len(result)\\n```\\n\\nAlso, we can reduce the runtime by **set and list comprehension**:\\n```\\ndef uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\tmorse_code_array = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\treturn len({\\'\\'.join([morse_code_array[ord(chr) - 97] for chr in word]) for word in words})\\n```\\n\\n**Time Complexity**: `O(n*m)`\\n**Space Complexity**: `O(n*m)`\\n<br/>",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n\\tmorse_code_dict = {\\'a\\': \\'.-\\',\\n\\t\\t\\'b\\': \\'-...\\',\\n\\t\\t\\'c\\': \\'-.-.\\',\\n\\t\\tand so on...\\n\\t}\\n```\n```\\na = 97\\nb = 98\\nand so on...\\n```\n```\\ndef uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\tmorse_code_array = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n\\tresult = set()\\n\\tfor word in words:\\n\\t\\tword = word.lower()\\n\\t\\ttransformations = \"\"\\n\\t\\tfor chr in word:\\n\\t\\t\\ttransformations += morse_code_array[ord(chr) - 97]\\n\\t\\tresult.add(transformations)\\n\\treturn len(result)\\n```\n```\\ndef uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\tmorse_code_array = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\treturn len({\\'\\'.join([morse_code_array[ord(chr) - 97] for chr in word]) for word in words})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 120826,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        map_=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        res=set()\\n        \\n        for word in words:\\n            val=\"\"\\n            for s in word:\\n                val+=map_[ord(s)-ord(\\'a\\')]\\n            res.add(val)\\n        \\n        return len(res)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        map_=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        res=set()\\n        \\n        for word in words:\\n            val=\"\"\\n            for s in word:\\n                val+=map_[ord(s)-ord(\\'a\\')]\\n            res.add(val)\\n        \\n        return len(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437353,
                "title": "short-c-java-python-explained-solution-beginner-friendly-by-mr-coder",
                "content": "**Please UPVOTE if you LIKE!!**\\n**Watch this video \\uD83E\\uDC83 for the better explanation of the code.**\\n\\nhttps://www.youtube.com/watch?v=uFNUoytk270\\n\\n\\n**Also you can SUBSCRIBE  \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.**\\n\\nhttps://t.me/dsacoder  \\u2B05\\u2B05 **Telegram link** to discuss leetcode daily questions and other dsa problems\\n**C++**\\n```\\n  class Solution {\\n  public:\\n\\n\\n  int uniqueMorseRepresentations(vector<string>& words) \\n  {\\n  \\tvector<string> a = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\\n                  \"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n  \\tunordered_map<string,int> um;\\n\\n  \\tfor (int i=0; i< words.size(); i++) {\\n  \\t\\tstring st;\\n  \\t\\tfor (int j=0; j<words[i].size(); j++) st += a[words[i][j] - \\'a\\'];\\n  \\t\\tum[st]=1;\\n  \\t }\\n\\n  return um.size ();\\n  }\\n  };\\n```\\n\\n**PYTHON**(copied)\\n\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        s = set()\\n        mos = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for w in words:                    \\n            m = \\'\\'\\n            for l in w:                       \\n                m += mos[ord(l) - ord(\\'a\\')] \\n            s.add(m)                      \\n        \\n        return len(s)\\n```\\n**JAVA**(copied)\\n\\n```\\nclass Solution {\\n    private final String[] morseCodes = {\\n        \".-\",\\n        \"-...\",\\n        \"-.-.\",\\n        \"-..\",\\n        \".\",\\n        \"..-.\",\\n        \"--.\",\\n        \"....\",\\n        \"..\",\\n        \".---\",\\n        \"-.-\",\\n        \".-..\",\\n        \"--\",\\n        \"-.\",\\n        \"---\",\\n        \".--.\",\\n        \"--.-\",\\n        \".-.\",\\n        \"...\",\\n        \"-\",\\n        \"..-\",\\n        \"...-\",\\n        \".--\",\\n        \"-..-\",\\n        \"-.--\",\\n        \"--..\"\\n    };\\n\\n    public int uniqueMorseRepresentations(String[] words) {\\n        final Set<String> codes = new HashSet<>();\\n\\n        for (String word : words) {\\n            final StringBuilder morseCode = new StringBuilder();\\n            for (int i = 0, n = word.length(); i < n; i++) {\\n                morseCode.append(morseCodes[word.charAt(i) - \\'a\\']);\\n            }\\n            codes.add(morseCode.toString());\\n        }\\n\\n        return codes.size();\\n    }\\n}\\n```\\n**Please UPVOTE  to motivate me for solving more questions like this and clubbing all languages solution!!**",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\n  class Solution {\\n  public:\\n\\n\\n  int uniqueMorseRepresentations(vector<string>& words) \\n  {\\n  \\tvector<string> a = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\\n                  \"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n  \\tunordered_map<string,int> um;\\n\\n  \\tfor (int i=0; i< words.size(); i++) {\\n  \\t\\tstring st;\\n  \\t\\tfor (int j=0; j<words[i].size(); j++) st += a[words[i][j] - \\'a\\'];\\n  \\t\\tum[st]=1;\\n  \\t }\\n\\n  return um.size ();\\n  }\\n  };\\n```\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        s = set()\\n        mos = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for w in words:                    \\n            m = \\'\\'\\n            for l in w:                       \\n                m += mos[ord(l) - ord(\\'a\\')] \\n            s.add(m)                      \\n        \\n        return len(s)\\n```\n```\\nclass Solution {\\n    private final String[] morseCodes = {\\n        \".-\",\\n        \"-...\",\\n        \"-.-.\",\\n        \"-..\",\\n        \".\",\\n        \"..-.\",\\n        \"--.\",\\n        \"....\",\\n        \"..\",\\n        \".---\",\\n        \"-.-\",\\n        \".-..\",\\n        \"--\",\\n        \"-.\",\\n        \"---\",\\n        \".--.\",\\n        \"--.-\",\\n        \".-.\",\\n        \"...\",\\n        \"-\",\\n        \"..-\",\\n        \"...-\",\\n        \".--\",\\n        \"-..-\",\\n        \"-.--\",\\n        \"--..\"\\n    };\\n\\n    public int uniqueMorseRepresentations(String[] words) {\\n        final Set<String> codes = new HashSet<>();\\n\\n        for (String word : words) {\\n            final StringBuilder morseCode = new StringBuilder();\\n            for (int i = 0, n = word.length(); i < n; i++) {\\n                morseCode.append(morseCodes[word.charAt(i) - \\'a\\']);\\n            }\\n            codes.add(morseCode.toString());\\n        }\\n\\n        return codes.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 433758,
                "title": "python-simple-faster-than-94",
                "content": "<b>Approach 1: </b>Using ```List```\\n\\nLong:\\n```\\ndef solution(words):\\n    codes = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n             \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"]\\n    res = set()\\n    for word in words:\\n        m = []                           # store the Morse representation of each letter in a word\\n        for ch in word:\\n            m.append(codes[ord(ch) - 97])\\n        res.add(\"\".join(m))\\n    return len(res)\\n```\\n\\nShort:\\n```\\ndef solution(words):\\n    codes = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n             \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"]\\n\\treturn len(set(\"\".join([codes[ord(ch)-97] for ch in word]) for word in words))\\n```\\n\\n<b>Approach 2: </b>Using ```Dictionary```\\n\\nLong:\\n```\\ndef solution(words):\\n    codes = {\"a\": \".-\", \"b\": \"-...\", \"c\": \"-.-.\", \"d\": \"-..\", \"e\": \".\", \"f\": \"..-.\", \"g\": \"--.\", \"h\": \"....\", \"i\": \"..\",\\n             \"j\": \".---\", \"k\": \"-.-\", \"l\": \".-..\", \"m\": \"--\", \"n\": \"-.\", \"o\": \"---\", \"p\": \".--.\", \"q\": \"--.-\",\\n             \"r\": \".-.\", \"s\": \"...\", \"t\": \"-\", \"u\": \"..-\", \"v\": \"...-\", \"w\": \".--\", \"x\": \"-..-\", \"y\": \"-.--\", \"z\": \"--..\"}\\n    res = set()\\n    for word in words:\\n        m = []                          # store the Morse representation of each letter in a word\\n        for ch in word:\\n            m.append(codes.get(ch))\\n        res.add(\"\".join(m))\\n    return len(res)\\n```\\n\\nShort:\\n```\\ndef solution(words):\\n    codes = {\"a\": \".-\", \"b\": \"-...\", \"c\": \"-.-.\", \"d\": \"-..\", \"e\": \".\", \"f\": \"..-.\", \"g\": \"--.\", \"h\": \"....\", \"i\": \"..\",\\n             \"j\": \".---\", \"k\": \"-.-\", \"l\": \".-..\", \"m\": \"--\", \"n\": \"-.\", \"o\": \"---\", \"p\": \".--.\", \"q\": \"--.-\",\\n             \"r\": \".-.\", \"s\": \"...\", \"t\": \"-\", \"u\": \"..-\", \"v\": \"...-\", \"w\": \".--\", \"x\": \"-..-\", \"y\": \"-.--\", \"z\": \"--..\"}\\n    return len(set([\"\".join([codes.get(ch) for ch in word]) for word in words]))\\n```\\nIf you like my solution and/or find it useful, please upvote :) Thank you.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```List```\n```\\ndef solution(words):\\n    codes = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n             \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"]\\n    res = set()\\n    for word in words:\\n        m = []                           # store the Morse representation of each letter in a word\\n        for ch in word:\\n            m.append(codes[ord(ch) - 97])\\n        res.add(\"\".join(m))\\n    return len(res)\\n```\n```\\ndef solution(words):\\n    codes = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n             \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"]\\n\\treturn len(set(\"\".join([codes[ord(ch)-97] for ch in word]) for word in words))\\n```\n```Dictionary```\n```\\ndef solution(words):\\n    codes = {\"a\": \".-\", \"b\": \"-...\", \"c\": \"-.-.\", \"d\": \"-..\", \"e\": \".\", \"f\": \"..-.\", \"g\": \"--.\", \"h\": \"....\", \"i\": \"..\",\\n             \"j\": \".---\", \"k\": \"-.-\", \"l\": \".-..\", \"m\": \"--\", \"n\": \"-.\", \"o\": \"---\", \"p\": \".--.\", \"q\": \"--.-\",\\n             \"r\": \".-.\", \"s\": \"...\", \"t\": \"-\", \"u\": \"..-\", \"v\": \"...-\", \"w\": \".--\", \"x\": \"-..-\", \"y\": \"-.--\", \"z\": \"--..\"}\\n    res = set()\\n    for word in words:\\n        m = []                          # store the Morse representation of each letter in a word\\n        for ch in word:\\n            m.append(codes.get(ch))\\n        res.add(\"\".join(m))\\n    return len(res)\\n```\n```\\ndef solution(words):\\n    codes = {\"a\": \".-\", \"b\": \"-...\", \"c\": \"-.-.\", \"d\": \"-..\", \"e\": \".\", \"f\": \"..-.\", \"g\": \"--.\", \"h\": \"....\", \"i\": \"..\",\\n             \"j\": \".---\", \"k\": \"-.-\", \"l\": \".-..\", \"m\": \"--\", \"n\": \"-.\", \"o\": \"---\", \"p\": \".--.\", \"q\": \"--.-\",\\n             \"r\": \".-.\", \"s\": \"...\", \"t\": \"-\", \"u\": \"..-\", \"v\": \"...-\", \"w\": \".--\", \"x\": \"-..-\", \"y\": \"-.--\", \"z\": \"--..\"}\\n    return len(set([\"\".join([codes.get(ch) for ch in word]) for word in words]))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2437635,
                "title": "set-stream",
                "content": "\\n### Java Set\\n```java\\npublic int uniqueMorseRepresentations(String[] words) {\\n        String[] alphabet = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\"\\n                ,\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> uniqueRepresentations = new HashSet<>();\\n        \\n        for (String word : words) {\\n            StringBuilder newWord = new StringBuilder();\\n            for (char character : word.toCharArray()) \\n                newWord.append(alphabet[character - \\'a\\']);\\n            \\n            uniqueRepresentations.add(newWord.toString());\\n        }\\n        return uniqueRepresentations.size();\\n    }\\n```\\n\\n#### Java Stream\\n```java\\npublic int uniqueMorseRepresentations(String[] words) {\\n        String[] alphabet = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\"\\n                ,\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        return (int) Arrays.stream(words).map(word -> word.chars().mapToObj(character -> alphabet[character - \\'a\\'])\\n                .collect(Collectors.joining())).distinct().count();\\n    }\\n```\\n\\n#### C++\\n```\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> alphabet = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\"\\n                ,\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> uniqueRepresentations;\\n\\n        for (string word : words) {\\n            string newWord;\\n            for (char symbol : word) \\n                newWord += (alphabet[symbol - \\'a\\']);\\n            \\n            uniqueRepresentations.insert(newWord);\\n        }\\n        return uniqueRepresentations.size();\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```java\\npublic int uniqueMorseRepresentations(String[] words) {\\n        String[] alphabet = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\"\\n                ,\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> uniqueRepresentations = new HashSet<>();\\n        \\n        for (String word : words) {\\n            StringBuilder newWord = new StringBuilder();\\n            for (char character : word.toCharArray()) \\n                newWord.append(alphabet[character - \\'a\\']);\\n            \\n            uniqueRepresentations.add(newWord.toString());\\n        }\\n        return uniqueRepresentations.size();\\n    }\\n```\n```java\\npublic int uniqueMorseRepresentations(String[] words) {\\n        String[] alphabet = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\"\\n                ,\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        return (int) Arrays.stream(words).map(word -> word.chars().mapToObj(character -> alphabet[character - \\'a\\'])\\n                .collect(Collectors.joining())).distinct().count();\\n    }\\n```\n```\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> alphabet = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\"\\n                ,\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> uniqueRepresentations;\\n\\n        for (string word : words) {\\n            string newWord;\\n            for (char symbol : word) \\n                newWord += (alphabet[symbol - \\'a\\']);\\n            \\n            uniqueRepresentations.insert(newWord);\\n        }\\n        return uniqueRepresentations.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2439228,
                "title": "python-3-liner-solution-explained-easy-understand-dictionary-beginner-friendly",
                "content": "**You can just copy & paste the Morse code map**\\n\\nHere\\'s the 3 lines solution:\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        ENG_to_MORSE = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\", \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\" }\\n        transform = lambda c: ENG_to_MORSE[c]   # use lambda function\\n        return len(Counter(\"\".join(map(transform, word)) for word in words))\\n```\\n\\nAnd here\\'s the code for better understand:\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        \\n        # create a dictionary for morse code (You can just copy & paste it! ^.^)\\n        ENG_to_MORSE = {  \\n            \\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\",\\n            \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\",\\n            \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\", \\'n\\':\"-.\", \\'o\\':\"---\",\\n            \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\",\\n            \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\",\\n        }\\n        \\n        cnt = {}    # dictionary for different transformations\\n        \\n        for word in words:      # loop through every word\\n            \\n            tmp = \"\"\\n            \\n            for c in word:      # loop through every character\\n                tmp += ENG_to_MORSE[c]    # convert the word to morse code\\n                \\n            if tmp not in cnt:\\n                cnt[tmp] = 0\\n            else:\\n                cnt[tmp] += 1\\n\\n        return len(cnt)     # return how many different elements in cnt\\n```\\n\\n**Please UPVOTE if you LIKE!!**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        ENG_to_MORSE = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\", \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\" }\\n        transform = lambda c: ENG_to_MORSE[c]   # use lambda function\\n        return len(Counter(\"\".join(map(transform, word)) for word in words))\\n```\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        \\n        # create a dictionary for morse code (You can just copy & paste it! ^.^)\\n        ENG_to_MORSE = {  \\n            \\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\",\\n            \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\",\\n            \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\", \\'n\\':\"-.\", \\'o\\':\"---\",\\n            \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\",\\n            \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\",\\n        }\\n        \\n        cnt = {}    # dictionary for different transformations\\n        \\n        for word in words:      # loop through every word\\n            \\n            tmp = \"\"\\n            \\n            for c in word:      # loop through every character\\n                tmp += ENG_to_MORSE[c]    # convert the word to morse code\\n                \\n            if tmp not in cnt:\\n                cnt[tmp] = 0\\n            else:\\n                cnt[tmp] += 1\\n\\n        return len(cnt)     # return how many different elements in cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436484,
                "title": "daily-leetcoding-challenge-august-day-17",
                "content": "This problem is the Daily LeetCoding Challenge for August, Day 17.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/unique-morse-code-words/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Hash Set\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/unique-morse-code-words/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 120671,
                "title": "1-ms-faster-than-100-00-of-java-online-submissions",
                "content": "For me, most times it took 1 ms, but admittedly, sometimes it\\'s 2 ms (faster than 99.55% ) or 3 ms. Depends on the Judge\\'s mood ;) \\n\\n```\\n    String[] codes = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Set<String> set = new HashSet<>();\\n        for (String word : words) {\\n            set.add(getCode(word));\\n        }\\n        return set.size();\\n    }\\n\\n    private String getCode(String word) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char ch : word.toCharArray()) {\\n            sb.append(codes[ch - \\'a\\']);\\n        }\\n        return sb.toString();\\n    }\\n\\t\\n```\\n\\t\\nHere\\'s a slightly more readable version, but based on my experience (or maybe luck), it takes 3-4 ms:\\n\\t\\n\\n\\t\\n```\\n    String[] codes = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Set<String> set = new HashSet<>();\\n        for (String word : words) {\\n            String morseCode = getCode(word);\\n            set.add(morseCode);\\n        }\\n        return set.size();\\n    }\\n\\n    private String getCode(String word) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char ch : word.toCharArray()) {\\n            int index = ch - \\'a\\';\\n            String characterCode = codes[index];\\n            sb.append(characterCode);\\n        }\\n        return sb.toString();\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    String[] codes = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Set<String> set = new HashSet<>();\\n        for (String word : words) {\\n            set.add(getCode(word));\\n        }\\n        return set.size();\\n    }\\n\\n    private String getCode(String word) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char ch : word.toCharArray()) {\\n            sb.append(codes[ch - \\'a\\']);\\n        }\\n        return sb.toString();\\n    }\\n\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 374214,
                "title": "javascript-solution-using-set",
                "content": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    var morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\\n                  \"--.\",\"....\",\"..\",\".---\",\\n                  \"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\\n                  \".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    var transformations = new Set();\\n    \\n    for (let word of words) {        \\n        var trans = \"\";\\n        for (let letter of word) {\\n            var index = letter.charCodeAt(0) - 97;\\n            trans += morse[index];\\n        }\\n        \\n        transformations.add(trans);   \\n    }\\n    \\n    return transformations.size;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    var morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\\n                  \"--.\",\"....\",\"..\",\".---\",\\n                  \"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\\n                  \".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    var transformations = new Set();\\n    \\n    for (let word of words) {        \\n        var trans = \"\";\\n        for (let letter of word) {\\n            var index = letter.charCodeAt(0) - 97;\\n            trans += morse[index];\\n        }\\n        \\n        transformations.add(trans);   \\n    }\\n    \\n    return transformations.size;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 945063,
                "title": "c-super-easy-and-simple-intuitive-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> codes = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> res;\\n        for (auto word : words) {\\n            string curr = \"\";\\n            for (auto ch : word)\\n                curr += codes[ch-97];\\n            res.insert(curr);\\n        }\\n        return res.size();\\n    }\\n};\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> codes = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> res;\\n        for (auto word : words) {\\n            string curr = \"\";\\n            for (auto ch : word)\\n                curr += codes[ch-97];\\n            res.insert(curr);\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436848,
                "title": "java-100-faster-code-easy-solution-using-hashset",
                "content": "\\tPLEASE UPVOTE IF YOU LIKE.\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] arr = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        HashSet<String> set = new HashSet<>();\\n        for (String word : words) \\n            set.add(transformMorse(word, arr));\\n        return set.size();\\n    }\\n    private String transformMorse(String word, String[] arr) {\\n        StringBuilder build = new StringBuilder();\\n        for (char c : word.toCharArray())\\n            build.append(arr[(int)c - 97]);\\n        return build.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] arr = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        HashSet<String> set = new HashSet<>();\\n        for (String word : words) \\n            set.add(transformMorse(word, arr));\\n        return set.size();\\n    }\\n    private String transformMorse(String word, String[] arr) {\\n        StringBuilder build = new StringBuilder();\\n        for (char c : word.toCharArray())\\n            build.append(arr[(int)c - 97]);\\n        return build.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436733,
                "title": "100-c-easy-with-explanation-hashmap-clean-code",
                "content": "**General Idea:**\\n- construct each word in morse code\\n- insert word into a set (sets won\\'t store duplicates) <- key point\\n- return set size at the end\\n\\n\\t\\tclass Solution {\\n\\t\\tpublic:\\n    \\n\\n\\t\\tint uniqueMorseRepresentations(vector<string>& words) \\n\\t\\t{\\n\\t\\t\\tvector<string> a = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\\n                        \"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                        \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n\\t\\t\\tunordered_set<string> u;\\n\\n\\t\\t\\tfor (auto word : words) {\\n\\t\\t\\t\\tstring t;\\n\\t\\t\\t\\tfor (auto c : word) t += a[c - \\'a\\'];\\n\\t\\t\\t\\tu.insert (t);\\n\\t\\t\\t }\\n\\n\\t\\treturn u.size ();\\n\\t\\t}\\n\\t\\t};\\n\\t\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community).**\\n\\n**HAPPY CODING:)**\\n\\n*Any suggestions and improvements are always welcome*",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n    \\n\\n\\t\\tint uniqueMorseRepresentations(vector<string>& words) \\n\\t\\t{\\n\\t\\t\\tvector<string> a = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\\n                        \"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                        \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 120805,
                "title": "functional-javascript-map-reduce",
                "content": "1. Map each word into it\\'s morse code representation\\n2. Reduce the list of morse code strings into a single set\\n3. Return the size of the set\\n\\nThe helper function just uses the ascii code to index into the `codes` array.\\n\\n```\\nconst codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\nconst getIdx = char => char.charCodeAt(0) - \\'a\\'.charCodeAt(0)\\n\\nvar uniqueMorseRepresentations = function(words) {\\n    return words.map( word => word.split(\\'\\')\\n                                 .map( char => codes[getIdx(char)])\\n                                 .join(\\'\\'))\\n                .reduce((set, cur) => set.add(cur), new Set())\\n                .size\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\nconst getIdx = char => char.charCodeAt(0) - \\'a\\'.charCodeAt(0)\\n\\nvar uniqueMorseRepresentations = function(words) {\\n    return words.map( word => word.split(\\'\\')\\n                                 .map( char => codes[getIdx(char)])\\n                                 .join(\\'\\'))\\n                .reduce((set, cur) => set.add(cur), new Set())\\n                .size\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2437807,
                "title": "c-0ms-100-easy-solution-explained-easy-to-understand-beginner-friendly-qsort",
                "content": "Basicly, we just convert every word from English to Morse code.\\nWe use qsort to rearrange order, so that we can just compare two adjacent elements.\\n```\\nint cmp(const void* a, const void*b){   // qsort compare function\\n    return strcmp(*(const char**)a, *(const char**)b);\\n}\\n\\n// create a map for morse code\\nchar morse[26][5] = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n                   \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n                   \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n\\n\\nint uniqueMorseRepresentations(char ** words, int wordsSize){\\n    \\n    if (wordsSize == 1) return 1;\\n    \\n    char** trans = (char**)malloc(wordsSize * sizeof(char*));   // create 2D array \\n    \\n    for(int i=0; i < wordsSize; i++){\\n        int len = strlen(words[i]);\\n        trans[i] = (char*) calloc((len * 4 + 1), sizeof(char)); // create space for each morse code\\n        for(int j=0; j < len; j++)\\n            strcat(trans[i], morse[words[i][j] - \\'a\\']);     // convert english to morse code\\n    }\\n    \\n    qsort(trans, wordsSize, sizeof(char**), cmp);      // sort these morse codes by their length\\n    \\n    int cnt = wordsSize;        // this is how many elements are different\\n    for(int i=1; i < wordsSize; i++)\\n        if (!strcmp(trans[i-1], trans[i])) cnt--;   // loop through trans and compare\\n    \\n    for(int i=0; i < wordsSize; i++)    // free the space\\n        free(trans[i]);\\n    free(trans);\\n    \\n    return cnt;\\n}\\n```\\n**Please UPVOTE if you LIKE!!**\\n![image](https://assets.leetcode.com/users/images/d7089d0b-18ee-4752-af79-8abd501568cb_1660717565.7753801.png)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint cmp(const void* a, const void*b){   // qsort compare function\\n    return strcmp(*(const char**)a, *(const char**)b);\\n}\\n\\n// create a map for morse code\\nchar morse[26][5] = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n                   \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n                   \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n\\n\\nint uniqueMorseRepresentations(char ** words, int wordsSize){\\n    \\n    if (wordsSize == 1) return 1;\\n    \\n    char** trans = (char**)malloc(wordsSize * sizeof(char*));   // create 2D array \\n    \\n    for(int i=0; i < wordsSize; i++){\\n        int len = strlen(words[i]);\\n        trans[i] = (char*) calloc((len * 4 + 1), sizeof(char)); // create space for each morse code\\n        for(int j=0; j < len; j++)\\n            strcat(trans[i], morse[words[i][j] - \\'a\\']);     // convert english to morse code\\n    }\\n    \\n    qsort(trans, wordsSize, sizeof(char**), cmp);      // sort these morse codes by their length\\n    \\n    int cnt = wordsSize;        // this is how many elements are different\\n    for(int i=1; i < wordsSize; i++)\\n        if (!strcmp(trans[i-1], trans[i])) cnt--;   // loop through trans and compare\\n    \\n    for(int i=0; i < wordsSize; i++)    // free the space\\n        free(trans[i]);\\n    free(trans);\\n    \\n    return cnt;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1869706,
                "title": "804-unique-morse-code-words-hasmap-hashset-4ms-java",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        HashMap<Character, String> map = new HashMap<>();\\n        map.put(\\'a\\', \".-\");\\n        map.put(\\'b\\', \"-...\");\\n        map.put(\\'c\\', \"-.-.\");\\n        map.put(\\'d\\', \"-..\");\\n        map.put(\\'e\\', \".\");\\n        map.put(\\'f\\', \"..-.\");\\n        map.put(\\'g\\', \"--.\");\\n        map.put(\\'h\\', \"....\");\\n        map.put(\\'i\\', \"..\");\\n        map.put(\\'j\\', \".---\");\\n        map.put(\\'k\\', \"-.-\");\\n        map.put(\\'l\\', \".-..\");\\n        map.put(\\'m\\', \"--\");\\n        map.put(\\'n\\', \"-.\");\\n        map.put(\\'o\\', \"---\");\\n        map.put(\\'p\\', \".--.\");\\n        map.put(\\'q\\', \"--.-\");\\n        map.put(\\'r\\', \".-.\");\\n        map.put(\\'s\\', \"...\");\\n        map.put(\\'t\\', \"-\");\\n        map.put(\\'u\\', \"..-\");\\n        map.put(\\'v\\', \"...-\");\\n        map.put(\\'w\\', \".--\");\\n        map.put(\\'x\\', \"-..-\");\\n        map.put(\\'y\\', \"-.--\");\\n        map.put(\\'z\\', \"--..\");\\n        \\n        HashSet<String> set = new HashSet<>();\\n        for(int i=0; i<words.length; i++)\\n        {\\n            String str = words[i];\\n            String str1 = \"\";\\n                for(int j=0; j<str.length(); j++)\\n                {\\n                    str1 = str1 + map.get(str.charAt(j));\\n                }\\n            set.add(str1);\\n        }\\n        return set.size();\\n        \\n    }\\n}\\n```\\n**If you like my solution Please UPVOTE**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        HashMap<Character, String> map = new HashMap<>();\\n        map.put(\\'a\\', \".-\");\\n        map.put(\\'b\\', \"-...\");\\n        map.put(\\'c\\', \"-.-.\");\\n        map.put(\\'d\\', \"-..\");\\n        map.put(\\'e\\', \".\");\\n        map.put(\\'f\\', \"..-.\");\\n        map.put(\\'g\\', \"--.\");\\n        map.put(\\'h\\', \"....\");\\n        map.put(\\'i\\', \"..\");\\n        map.put(\\'j\\', \".---\");\\n        map.put(\\'k\\', \"-.-\");\\n        map.put(\\'l\\', \".-..\");\\n        map.put(\\'m\\', \"--\");\\n        map.put(\\'n\\', \"-.\");\\n        map.put(\\'o\\', \"---\");\\n        map.put(\\'p\\', \".--.\");\\n        map.put(\\'q\\', \"--.-\");\\n        map.put(\\'r\\', \".-.\");\\n        map.put(\\'s\\', \"...\");\\n        map.put(\\'t\\', \"-\");\\n        map.put(\\'u\\', \"..-\");\\n        map.put(\\'v\\', \"...-\");\\n        map.put(\\'w\\', \".--\");\\n        map.put(\\'x\\', \"-..-\");\\n        map.put(\\'y\\', \"-.--\");\\n        map.put(\\'z\\', \"--..\");\\n        \\n        HashSet<String> set = new HashSet<>();\\n        for(int i=0; i<words.length; i++)\\n        {\\n            String str = words[i];\\n            String str1 = \"\";\\n                for(int j=0; j<str.length(); j++)\\n                {\\n                    str1 = str1 + map.get(str.charAt(j));\\n                }\\n            set.add(str1);\\n        }\\n        return set.size();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2568159,
                "title": "short-c-java-python-explained-solution-beginner-friendly-by-mr-coder",
                "content": "**Please UPVOTE if you LIKE!!**\\n**Watch this video \\uD83E\\uDC83 for the better explanation of the code.**\\n\\nhttps://www.youtube.com/watch?v=uFNUoytk270\\n\\n\\n**Also you can SUBSCRIBE  \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.**\\n\\nhttps://t.me/dsacoder  \\u2B05\\u2B05 **Telegram link** to discuss leetcode daily questions and other dsa problems\\n**C++**\\n```\\n  class Solution {\\n  public:\\n\\n\\n  int uniqueMorseRepresentations(vector<string>& words) \\n  {\\n  \\tvector<string> a = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\\n                  \"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n  \\tunordered_map<string,int> um;\\n\\n  \\tfor (int i=0; i< words.size(); i++) {\\n  \\t\\tstring st;\\n  \\t\\tfor (int j=0; j<words[i].size(); j++) st += a[words[i][j] - \\'a\\'];\\n  \\t\\tum[st]=1;\\n  \\t }\\n\\n  return um.size ();\\n  }\\n  };\\n```\\n\\n**PYTHON**(copied)\\n\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        s = set()\\n        mos = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for w in words:                    \\n            m = \\'\\'\\n            for l in w:                       \\n                m += mos[ord(l) - ord(\\'a\\')] \\n            s.add(m)                      \\n        \\n        return len(s)\\n```\\n**JAVA**(copied)\\n\\n```\\nclass Solution {\\n    private final String[] morseCodes = {\\n        \".-\",\\n        \"-...\",\\n        \"-.-.\",\\n        \"-..\",\\n        \".\",\\n        \"..-.\",\\n        \"--.\",\\n        \"....\",\\n        \"..\",\\n        \".---\",\\n        \"-.-\",\\n        \".-..\",\\n        \"--\",\\n        \"-.\",\\n        \"---\",\\n        \".--.\",\\n        \"--.-\",\\n        \".-.\",\\n        \"...\",\\n        \"-\",\\n        \"..-\",\\n        \"...-\",\\n        \".--\",\\n        \"-..-\",\\n        \"-.--\",\\n        \"--..\"\\n    };\\n\\n    public int uniqueMorseRepresentations(String[] words) {\\n        final Set<String> codes = new HashSet<>();\\n\\n        for (String word : words) {\\n            final StringBuilder morseCode = new StringBuilder();\\n            for (int i = 0, n = word.length(); i < n; i++) {\\n                morseCode.append(morseCodes[word.charAt(i) - \\'a\\']);\\n            }\\n            codes.add(morseCode.toString());\\n        }\\n\\n        return codes.size();\\n    }\\n}\\n```\\n**Please UPVOTE  to motivate me for solving more questions like this and clubbing all languages solution!!**",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\n  class Solution {\\n  public:\\n\\n\\n  int uniqueMorseRepresentations(vector<string>& words) \\n  {\\n  \\tvector<string> a = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\\n                  \"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n  \\tunordered_map<string,int> um;\\n\\n  \\tfor (int i=0; i< words.size(); i++) {\\n  \\t\\tstring st;\\n  \\t\\tfor (int j=0; j<words[i].size(); j++) st += a[words[i][j] - \\'a\\'];\\n  \\t\\tum[st]=1;\\n  \\t }\\n\\n  return um.size ();\\n  }\\n  };\\n```\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        s = set()\\n        mos = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for w in words:                    \\n            m = \\'\\'\\n            for l in w:                       \\n                m += mos[ord(l) - ord(\\'a\\')] \\n            s.add(m)                      \\n        \\n        return len(s)\\n```\n```\\nclass Solution {\\n    private final String[] morseCodes = {\\n        \".-\",\\n        \"-...\",\\n        \"-.-.\",\\n        \"-..\",\\n        \".\",\\n        \"..-.\",\\n        \"--.\",\\n        \"....\",\\n        \"..\",\\n        \".---\",\\n        \"-.-\",\\n        \".-..\",\\n        \"--\",\\n        \"-.\",\\n        \"---\",\\n        \".--.\",\\n        \"--.-\",\\n        \".-.\",\\n        \"...\",\\n        \"-\",\\n        \"..-\",\\n        \"...-\",\\n        \".--\",\\n        \"-..-\",\\n        \"-.--\",\\n        \"--..\"\\n    };\\n\\n    public int uniqueMorseRepresentations(String[] words) {\\n        final Set<String> codes = new HashSet<>();\\n\\n        for (String word : words) {\\n            final StringBuilder morseCode = new StringBuilder();\\n            for (int i = 0, n = word.length(); i < n; i++) {\\n                morseCode.append(morseCodes[word.charAt(i) - \\'a\\']);\\n            }\\n            codes.add(morseCode.toString());\\n        }\\n\\n        return codes.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 800987,
                "title": "c-simple-solution-explained-100-time-93-space",
                "content": "Pro-tip: if there are no extra constraints, go for performing low hanging fruits in your own interviews.\\n\\nAnd this one seemed like a typical case: we can solve it using very little extra resources, so let\\'s plan in advance:\\n* we know we need to convert the strings to find similar matches (you might do so without converting and finding how a few characters can overlap others in morse, but I would not go there);\\n* we need some convenient data structure to store our intermediate results so that we can know how many unique morse strings we will get.\\n\\nWe can solve easily the first point with a helper function (`convertToMorse`, in my case) and an `unordered_set` looks ideal for the latter point, so I will call it `seen` and accumulate the results there.\\n\\nOnce I am done, I will just return its length and will be done with it :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    string morse[26] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    string convertToMorse(string s) {\\n        string res;\\n        for (char c: s) res.append(morse[c - \\'a\\']);\\n        return res;\\n    }\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<string> seen;\\n        for (string s: words) seen.insert(convertToMorse(s));\\n        return seen.size();\\n    }\\n};\\n```\\n\\nP.S.: extra goodie: an array to keep track of the characters to convert is more than enough - lightweight and with quick 1:1 matching.",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    string morse[26] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    string convertToMorse(string s) {\\n        string res;\\n        for (char c: s) res.append(morse[c - \\'a\\']);\\n        return res;\\n    }\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<string> seen;\\n        for (string s: words) seen.insert(convertToMorse(s));\\n        return seen.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079850,
                "title": "easy-solution-line-by-line-explanation-python-java-c-ruby",
                "content": "# Beats\\n![image.png](https://assets.leetcode.com/users/images/3d70d2c2-15a4-4bac-85ee-60513e1da5b6_1695459168.514062.png)\\n\\n# Intuition\\nThe problem asks for the number of different transformations among a list of words, where each word can be represented as a concatenation of Morse code representations for its letters. To solve this, we need to convert each letter in a word to its Morse code equivalent and count the unique representations.\\n\\n# Approach\\n1. Define the English alphabet and Morse code representations:\\n   - `letters` stores the lowercase English alphabet from \\'a\\' to \\'z\\'.\\n   - `morse_code` stores the corresponding Morse code representations for each letter.\\n\\n2. Create a dictionary mapping letters to Morse code:\\n   - `morse_dict` is a dictionary created by zipping `letters` and `morse_code` together. It maps each letter to its Morse code representation.\\n\\n3. Initialize a list to store words converted to Morse code:\\n   - `words2` is an empty list that will be used to store the Morse code representations of the input words.\\n\\n4. Iterate through each word in the input list:\\n   - For each word in `words`, the code initializes an empty string `k` to store the Morse code for the current word.\\n\\n5. Iterate through each character in the current word:\\n   - For each character `i` in the current word, the code appends the Morse code representation of that character (retrieved from `morse_dict`) to the string `k`.\\n\\n6. Append the Morse code for the current word to the list:\\n   - After converting the entire word to Morse code and building the string `k`, the code appends `k` to the `words2` list.\\n\\n7. Return the count of unique Morse code representations:\\n   - The code returns the length of the set of `words2`. This effectively counts the number of unique Morse code representations in the list and returns that count as the result.\\n\\n# Complexity\\n- Time complexity: The code iterates through each character in each word, so the time complexity is O(n), where n is the total number of characters in all words.\\n- Space complexity: The space complexity is O(n) as well because the `words2` list stores Morse code representations for each word.\\n\\n# Code\\n\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        # Define the English alphabet\\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\\n        \\n        # Define the corresponding Morse code representations\\n        morse_code = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"]\\n\\n        # Create a dictionary that maps letters to Morse code\\n        morse_dict = dict(zip(letters, morse_code))\\n\\n        # Initialize a list to store words converted to Morse code\\n        words2 = []\\n\\n        # Iterate through each word in the input list\\n        for word in words:\\n            # Initialize an empty string to store the Morse code for the current word\\n            k = \"\"\\n            \\n            # Iterate through each character in the current word\\n            for i in word:\\n                # Append the Morse code representation of the character to the string\\n                k += morse_dict[i]\\n\\n            # Append the Morse code for the current word to the list\\n            words2.append(k) \\n\\n        # Return the count of unique Morse code representations\\n        return len(set(words2))\\n\\n```\\n\\n# Java\\n```\\nimport java.util.HashSet;\\nimport java.util.Set;\\n\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morseCode = {\\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n            \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n            \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n        };\\n\\n        Set<String> uniqueMorse = new HashSet<>();\\n\\n        for (String word : words) {\\n            StringBuilder morseRepresentation = new StringBuilder();\\n            for (char c : word.toCharArray()) {\\n                morseRepresentation.append(morseCode[c - \\'a\\']);\\n            }\\n            uniqueMorse.add(morseRepresentation.toString());\\n        }\\n\\n        return uniqueMorse.size();\\n    }\\n}\\n\\n```\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morseCode = {\\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n            \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n            \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n        };\\n\\n        unordered_set<string> uniqueMorse;\\n\\n        for (const string& word : words) {\\n            string morseRepresentation = \"\";\\n            for (char c : word) {\\n                morseRepresentation += morseCode[c - \\'a\\'];\\n            }\\n            uniqueMorse.insert(morseRepresentation);\\n        }\\n\\n        return uniqueMorse.size();\\n    }\\n};\\n\\n```\\n# Ruby\\n```\\nclass Solution\\n  MORSE_CODE = [\\n    \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n    \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n    \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n  ]\\n\\n  def unique_morse_representations(words)\\n    unique_morse = Set.new\\n\\n    words.each do |word|\\n      morse_representation = \"\"\\n      word.each_char do |char|\\n        morse_representation += MORSE_CODE[char.ord - \\'a\\'.ord]\\n      end\\n      unique_morse.add(morse_representation)\\n    end\\n\\n    unique_morse.size\\n  end\\nend\\n\\n```\\n# javascript\\n```\\n/**\\n * @param {string[]} words\\n * @return {number}\\n */\\nvar uniqueMorseRepresentations = function (words) {\\n    const morseCode = [\\n        \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n        \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\",\\n        \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n    ];\\n\\n    const uniqueMorse = new Set();\\n\\n    for (const word of words) {\\n        let morseRepresentation = \"\";\\n        for (const char of word) {\\n            morseRepresentation += morseCode[char.charCodeAt(0) - \\'a\\'.charCodeAt(0)];\\n        }\\n        uniqueMorse.add(morseRepresentation);\\n    }\\n\\n    return uniqueMorse.size;\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "JavaScript",
                    "Ruby"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        # Define the English alphabet\\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\\n        \\n        # Define the corresponding Morse code representations\\n        morse_code = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"]\\n\\n        # Create a dictionary that maps letters to Morse code\\n        morse_dict = dict(zip(letters, morse_code))\\n\\n        # Initialize a list to store words converted to Morse code\\n        words2 = []\\n\\n        # Iterate through each word in the input list\\n        for word in words:\\n            # Initialize an empty string to store the Morse code for the current word\\n            k = \"\"\\n            \\n            # Iterate through each character in the current word\\n            for i in word:\\n                # Append the Morse code representation of the character to the string\\n                k += morse_dict[i]\\n\\n            # Append the Morse code for the current word to the list\\n            words2.append(k) \\n\\n        # Return the count of unique Morse code representations\\n        return len(set(words2))\\n\\n```\n```\\nimport java.util.HashSet;\\nimport java.util.Set;\\n\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morseCode = {\\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n            \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n            \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n        };\\n\\n        Set<String> uniqueMorse = new HashSet<>();\\n\\n        for (String word : words) {\\n            StringBuilder morseRepresentation = new StringBuilder();\\n            for (char c : word.toCharArray()) {\\n                morseRepresentation.append(morseCode[c - \\'a\\']);\\n            }\\n            uniqueMorse.add(morseRepresentation.toString());\\n        }\\n\\n        return uniqueMorse.size();\\n    }\\n}\\n\\n```\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morseCode = {\\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n            \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n            \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n        };\\n\\n        unordered_set<string> uniqueMorse;\\n\\n        for (const string& word : words) {\\n            string morseRepresentation = \"\";\\n            for (char c : word) {\\n                morseRepresentation += morseCode[c - \\'a\\'];\\n            }\\n            uniqueMorse.insert(morseRepresentation);\\n        }\\n\\n        return uniqueMorse.size();\\n    }\\n};\\n\\n```\n```\\nclass Solution\\n  MORSE_CODE = [\\n    \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n    \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\",\\n    \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n  ]\\n\\n  def unique_morse_representations(words)\\n    unique_morse = Set.new\\n\\n    words.each do |word|\\n      morse_representation = \"\"\\n      word.each_char do |char|\\n        morse_representation += MORSE_CODE[char.ord - \\'a\\'.ord]\\n      end\\n      unique_morse.add(morse_representation)\\n    end\\n\\n    unique_morse.size\\n  end\\nend\\n\\n```\n```\\n/**\\n * @param {string[]} words\\n * @return {number}\\n */\\nvar uniqueMorseRepresentations = function (words) {\\n    const morseCode = [\\n        \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\",\\n        \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\",\\n        \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\\n    ];\\n\\n    const uniqueMorse = new Set();\\n\\n    for (const word of words) {\\n        let morseRepresentation = \"\";\\n        for (const char of word) {\\n            morseRepresentation += morseCode[char.charCodeAt(0) - \\'a\\'.charCodeAt(0)];\\n        }\\n        uniqueMorse.add(morseRepresentation);\\n    }\\n\\n    return uniqueMorse.size;\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3390327,
                "title": "c-and-c-very-easy-solution",
                "content": "![photo_2023-04-07_17-44-42.jpg](https://assets.leetcode.com/users/images/37fcecb2-fe9c-4b22-83d2-23102a7c2ba5_1680871628.659171.jpeg)\\n\\n\\n# Complexity\\n- Time complexity:Beats 49.9% of other solutions in C#.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:Beats 94.55% of other solutions in C#.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector <string> v={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\\n        \"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\\n        \".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\\n        \"-.--\",\"--..\"};\\n        unordered_map <string,int> my;\\n        string s;\\n        for(int i=0;i<words.size();i++){\\n            for(int j=0;j<words[i].length();j++){\\n                s+=v[words[i][j]-\\'a\\'];\\n            }\\n            my[s]=1;\\n            s.clear();\\n        }\\n      return my.size();\\n    }\\n};\\n```\\n```C# []\\npublic class Solution {\\n    public int UniqueMorseRepresentations(string[] words) {\\n        Dictionary<char,string> dic=new();\\n        dic.Add(\\'a\\',\".-\");dic.Add(\\'b\\',\"-...\");dic.Add(\\'c\\',\"-.-.\");\\n        dic.Add(\\'d\\',\"-..\");dic.Add(\\'e\\',\".\");dic.Add(\\'f\\',\"..-.\");\\n        dic.Add(\\'g\\',\"--.\");dic.Add(\\'h\\',\"....\");dic.Add(\\'i\\',\"..\");\\n        dic.Add(\\'j\\',\".---\");dic.Add(\\'k\\',\"-.-\");dic.Add(\\'l\\',\".-..\");\\n        dic.Add(\\'m\\',\"--\");dic.Add(\\'n\\',\"-.\");dic.Add(\\'o\\',\"---\");\\n        dic.Add(\\'p\\',\".--.\");dic.Add(\\'q\\',\"--.-\");dic.Add(\\'r\\',\".-.\");\\n        dic.Add(\\'s\\',\"...\");dic.Add(\\'t\\',\"-\");dic.Add(\\'u\\',\"..-\");\\n        dic.Add(\\'v\\',\"...-\");dic.Add(\\'w\\',\".--\");dic.Add(\\'x\\',\"-..-\");\\n        dic.Add(\\'y\\',\"-.--\");dic.Add(\\'z\\',\"--..\");\\n        Dictionary<string,char> res=new();\\n        \\n        for(int i=0;i<words.Length;i++){\\n            string s=string.Empty;\\n            for(int j=0;j<words[i].Length;j++){\\n             s+=dic[words[i][j]];\\n            }\\n            if(!res.ContainsKey(s))\\n            res.Add(s,\\'*\\');\\n        }\\n        return res.Count;\\n    }\\n}\\n```\\n```C# []\\npublic class Solution {\\n    public int UniqueMorseRepresentations(string[] words) {\\n         List<string> d =new List<string>() {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        HashSet<string> s=new();\\n        foreach (var w in words) {\\n            string code=\"\";\\n            foreach (var c in w) \\n            code += d[c - \\'a\\'];\\n            s.Add(code);\\n        }\\n        return s.Count;\\n    }\\n}\\n```\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "C#",
                    "String"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector <string> v={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\\n        \"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\\n        \".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\\n        \"-.--\",\"--..\"};\\n        unordered_map <string,int> my;\\n        string s;\\n        for(int i=0;i<words.size();i++){\\n            for(int j=0;j<words[i].length();j++){\\n                s+=v[words[i][j]-\\'a\\'];\\n            }\\n            my[s]=1;\\n            s.clear();\\n        }\\n      return my.size();\\n    }\\n};\\n```\n```C# []\\npublic class Solution {\\n    public int UniqueMorseRepresentations(string[] words) {\\n        Dictionary<char,string> dic=new();\\n        dic.Add(\\'a\\',\".-\");dic.Add(\\'b\\',\"-...\");dic.Add(\\'c\\',\"-.-.\");\\n        dic.Add(\\'d\\',\"-..\");dic.Add(\\'e\\',\".\");dic.Add(\\'f\\',\"..-.\");\\n        dic.Add(\\'g\\',\"--.\");dic.Add(\\'h\\',\"....\");dic.Add(\\'i\\',\"..\");\\n        dic.Add(\\'j\\',\".---\");dic.Add(\\'k\\',\"-.-\");dic.Add(\\'l\\',\".-..\");\\n        dic.Add(\\'m\\',\"--\");dic.Add(\\'n\\',\"-.\");dic.Add(\\'o\\',\"---\");\\n        dic.Add(\\'p\\',\".--.\");dic.Add(\\'q\\',\"--.-\");dic.Add(\\'r\\',\".-.\");\\n        dic.Add(\\'s\\',\"...\");dic.Add(\\'t\\',\"-\");dic.Add(\\'u\\',\"..-\");\\n        dic.Add(\\'v\\',\"...-\");dic.Add(\\'w\\',\".--\");dic.Add(\\'x\\',\"-..-\");\\n        dic.Add(\\'y\\',\"-.--\");dic.Add(\\'z\\',\"--..\");\\n        Dictionary<string,char> res=new();\\n        \\n        for(int i=0;i<words.Length;i++){\\n            string s=string.Empty;\\n            for(int j=0;j<words[i].Length;j++){\\n             s+=dic[words[i][j]];\\n            }\\n            if(!res.ContainsKey(s))\\n            res.Add(s,\\'*\\');\\n        }\\n        return res.Count;\\n    }\\n}\\n```\n```C# []\\npublic class Solution {\\n    public int UniqueMorseRepresentations(string[] words) {\\n         List<string> d =new List<string>() {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        HashSet<string> s=new();\\n        foreach (var w in words) {\\n            string code=\"\";\\n            foreach (var c in w) \\n            code += d[c - \\'a\\'];\\n            s.Add(code);\\n        }\\n        return s.Count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3273741,
                "title": "easiest-approach-c-explained",
                "content": "# Approach\\nWe make an array `morse` to order the morse codes for each alphabet. \\nThen we convert each word in the string to morse code and push back to the `code` vector. \\nThen we count distinct elements in the `code` array and return.\\n\\n# Complexity\\n- **Time complexity**:  O(NM)\\n- **Space complexity**: O(NM)\\nWhere $$N$$ is the size of array and $$M$$ is the length of word.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        vector<string> code; //To store morse codes\\n        int count=1; // To count distinct codes\\n        for(auto i: words){\\n            int n;\\n            string str;\\n            for(int j=0;j<i.length();j++){\\n                n=i[j]-97; // To get index for each alphabet from morse array\\n                str+=morse[n];\\n            }\\n            code.push_back(str);\\n        }\\n\\n        // Count distinct codes\\n        for (int i = 1; i < code.size(); i++) {\\n            int j;\\n            for (j = 0; j < i; j++)\\n                if (code[i] == code[j])\\n                    break;\\n            if (i == j) count++;\\n        }\\n\\n\\n        return count;\\n    }\\n        \\n};\\n```\\n\\n---\\n\\n\\n***Note**: `count` is initialized with 1 as the first element of an array is always unique.*\\n\\n---\\nIf it helped, would really appreciate an upvote ;)\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        vector<string> code; //To store morse codes\\n        int count=1; // To count distinct codes\\n        for(auto i: words){\\n            int n;\\n            string str;\\n            for(int j=0;j<i.length();j++){\\n                n=i[j]-97; // To get index for each alphabet from morse array\\n                str+=morse[n];\\n            }\\n            code.push_back(str);\\n        }\\n\\n        // Count distinct codes\\n        for (int i = 1; i < code.size(); i++) {\\n            int j;\\n            for (j = 0; j < i; j++)\\n                if (code[i] == code[j])\\n                    break;\\n            if (i == j) count++;\\n        }\\n\\n\\n        return count;\\n    }\\n        \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3165283,
                "title": "c-solution-using-sets-explained",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        // store morse codes for each letter \\n        vector<string> hash = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                                \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\\n                                \"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        set<string> s ;\\n        for (int i = 0 ; i < words.size() ; i++)\\n        {\\n            string temp = \"\" ;\\n            for (int j = 0 ; j < words[i].length() ; j++)\\n            {\\n                // create string of morse of each word \\n                temp += hash[words[i][j] - \\'a\\'] ;\\n            }\\n            // store into a set, set stores only unique elements \\n            s.insert(temp) ;\\n        }\\n        // size of set gives unique morse codes \\n        return s.size() ; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/4f899ab0-e157-4430-b23e-dd609b9ba0a8_1675965365.1080947.png)\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        // store morse codes for each letter \\n        vector<string> hash = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                                \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\\n                                \"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        set<string> s ;\\n        for (int i = 0 ; i < words.size() ; i++)\\n        {\\n            string temp = \"\" ;\\n            for (int j = 0 ; j < words[i].length() ; j++)\\n            {\\n                // create string of morse of each word \\n                temp += hash[words[i][j] - \\'a\\'] ;\\n            }\\n            // store into a set, set stores only unique elements \\n            s.insert(temp) ;\\n        }\\n        // size of set gives unique morse codes \\n        return s.size() ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1126042,
                "title": "java-faster-than-100-00",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] tokens = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet<>();\\n        for ( String word : words ) {\\n            StringBuilder sb = new StringBuilder();\\n            for ( int i = 0; i < word.length(); i++ ) {\\n                sb.append( tokens[word.charAt(i)-\\'a\\'] );\\n            }\\n            set.add( sb.toString() );\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] tokens = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet<>();\\n        for ( String word : words ) {\\n            StringBuilder sb = new StringBuilder();\\n            for ( int i = 0; i < word.length(); i++ ) {\\n                sb.append( tokens[word.charAt(i)-\\'a\\'] );\\n            }\\n            set.add( sb.toString() );\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1122579,
                "title": "rust-0ms-using-iterators-hashset",
                "content": "```\\nuse std::collections::HashSet;\\n\\nimpl Solution {\\n    pub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n        static MORSE: [&str; 26] = [\\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\",\\n            \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\",\\n            \"-.--\", \"--..\",\\n        ];\\n\\t\\t\\n        words\\n            .into_iter()\\n            .map(|w| {\\n                w.chars()\\n                    .map(|c| MORSE[c as usize - \\'a\\' as usize])\\n                    .collect::<String>()\\n            })\\n            .collect::<HashSet<_>>()\\n            .len() as _\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::collections::HashSet;\\n\\nimpl Solution {\\n    pub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n        static MORSE: [&str; 26] = [\\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\",\\n            \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\",\\n            \"-.--\", \"--..\",\\n        ];\\n\\t\\t\\n        words\\n            .into_iter()\\n            .map(|w| {\\n                w.chars()\\n                    .map(|c| MORSE[c as usize - \\'a\\' as usize])\\n                    .collect::<String>()\\n            })\\n            .collect::<HashSet<_>>()\\n            .len() as _\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2438206,
                "title": "python-elegant-short-two-lines-no-loops",
                "content": "\\n\\tclass Solution:\\n\\t\\t\"\"\"\\n\\t\\tTime:   O(n)\\n\\t\\tMemory: O(n)\\n\\t\\t\"\"\"\\n\\n\\t\\tMORSE = {\\n\\t\\t\\t\\'a\\': \\'.-\\',   \\'b\\': \\'-...\\', \\'c\\': \\'-.-.\\', \\'d\\': \\'-..\\',  \\'e\\': \\'.\\',    \\'f\\': \\'..-.\\', \\'g\\': \\'--.\\',\\n\\t\\t\\t\\'h\\': \\'....\\', \\'i\\': \\'..\\',   \\'j\\': \\'.---\\', \\'k\\': \\'-.-\\',  \\'l\\': \\'.-..\\', \\'m\\': \\'--\\',   \\'n\\': \\'-.\\',\\n\\t\\t\\t\\'o\\': \\'---\\',  \\'p\\': \\'.--.\\', \\'q\\': \\'--.-\\', \\'r\\': \\'.-.\\',  \\'s\\': \\'...\\',  \\'t\\': \\'-\\',    \\'u\\': \\'..-\\',\\n\\t\\t\\t\\'v\\': \\'...-\\', \\'w\\': \\'.--\\',  \\'x\\': \\'-..-\\', \\'y\\': \\'-.--\\', \\'z\\': \\'--..\\',\\n\\t\\t}\\n\\n\\t\\tdef uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\t\\t\\treturn len(set(map(self.encode, words)))\\n\\n\\t\\t@classmethod\\n\\t\\tdef encode(cls, word: str) -> str:\\n\\t\\t\\treturn \\'\\'.join(map(cls.MORSE.get, word))\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "class Solution:\\n\\t\\t\"\"\"\\n\\t\\tTime:   O(n)\\n\\t\\tMemory: O(n)\\n\\t\\t\"\"\"\\n\\n\\t\\tMORSE = {\\n\\t\\t\\t\\'a\\': \\'.-\\',   \\'b\\': \\'-...\\', \\'c\\': \\'-.-.\\', \\'d\\': \\'-..\\',  \\'e\\': \\'.\\',    \\'f\\': \\'..-.\\', \\'g\\': \\'--.\\',\\n\\t\\t\\t\\'h\\': \\'....\\', \\'i\\': \\'..\\',   \\'j\\': \\'.---\\', \\'k\\': \\'-.-\\',  \\'l\\': \\'.-..\\', \\'m\\': \\'--\\',   \\'n\\': \\'-.\\',\\n\\t\\t\\t\\'o\\': \\'---\\',  \\'p\\': \\'.--.\\', \\'q\\': \\'--.-\\', \\'r\\': \\'.-.\\',  \\'s\\': \\'...\\',  \\'t\\': \\'-\\',    \\'u\\': \\'..-\\',\\n\\t\\t\\t\\'v\\': \\'...-\\', \\'w\\': \\'.--\\',  \\'x\\': \\'-..-\\', \\'y\\': \\'-.--\\', \\'z\\': \\'--..\\',\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 946854,
                "title": "python-faster-than-98",
                "content": "\\'\\'\\'\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int: \\n        transformations = []\\n        count = 0\\n        \\n        morse_code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for word in words:\\n            m = \\'\\'\\n            for char in word:\\n                m += morse_code[ord(char)-97]\\n            \\n            if m not in transformations:\\n                transformations.append(m)\\n                count +=1\\n        \\n        return count\\n\\'\\'\\'\\n\\nRuntime: 24 ms, faster than 98.75% of Python3 online submissions for Unique Morse Code Words.\\nMemory Usage: 14.4 MB, less than 13.24% of Python3 online submissions for Unique Morse Code Words.",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\'\\'\\'\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int: \\n        transformations = []\\n        count = 0\\n        \\n        morse_code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for word in words:\\n            m = \\'\\'\\n            for char in word:\\n                m += morse_code[ord(char)-97]\\n            \\n            if m not in transformations:\\n                transformations.append(m)\\n                count +=1\\n        \\n        return count\\n\\'\\'\\'\\n\\nRuntime: 24 ms, faster than 98.75% of Python3 online submissions for Unique Morse Code Words.\\nMemory Usage: 14.4 MB, less than 13.24% of Python3 online submissions for Unique Morse Code Words.",
                "codeTag": "Java"
            },
            {
                "id": 945532,
                "title": "c-linear-scan-and-hash-set",
                "content": "```\\nclass Solution { // Linear scan and hash set\\npublic: \\n// Time/Space: O(N*M); O(N*M*P); \\n//where N is the number of word in the vector of \\'words\\',M is the maximal length of a word in \\'words\\', \\n//P is the maximal length of the Morse code for each letter.\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> m{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\t// string m[26]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}; // ok\\n        unordered_set<string> sset;\\n        for(const auto& w: words){\\n            string temp;\\n            for(const char& c: w) temp += m[c-\\'a\\'];\\n            sset.insert(temp);\\n        }\\n        return sset.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution { // Linear scan and hash set\\npublic: \\n// Time/Space: O(N*M); O(N*M*P); \\n//where N is the number of word in the vector of \\'words\\',M is the maximal length of a word in \\'words\\', \\n//P is the maximal length of the Morse code for each letter.\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> m{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\t// string m[26]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}; // ok\\n        unordered_set<string> sset;\\n        for(const auto& w: words){\\n            string temp;\\n            for(const char& c: w) temp += m[c-\\'a\\'];\\n            sset.insert(temp);\\n        }\\n        return sset.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 944888,
                "title": "python",
                "content": "```python\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        code_words = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        uq = set()\\n        for word in words:\\n            this = []\\n            for c in word:\\n                this.append(code_words[ord(c)-97])\\n            uq.add(\\'\\'.join(this))\\n            \\n        return(len(uq))\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        code_words = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        uq = set()\\n        for word in words:\\n            this = []\\n            for c in word:\\n                this.append(code_words[ord(c)-97])\\n            uq.add(\\'\\'.join(this))\\n            \\n        return(len(uq))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 285283,
                "title": "4ms-93-66-c-solution",
                "content": "```\\nstruct Entry_s {\\n    char *key;\\n    int value;\\n    struct Entry_s *next;\\n};\\n\\ntypedef struct Entry_s Entry;\\n\\nstruct Hashtable_s {\\n    int size;\\n    int keys;\\n    struct Entry_s** table;\\n};\\n\\ntypedef struct Hashtable_s Hashtable;\\n\\nint hash(Hashtable *hashtable, char *key) {\\n    unsigned long int hashvalue = 0;\\n    int idx = 0;\\n    while (hashvalue < ULONG_MAX && idx < strlen(key)) {\\n        hashvalue = hashvalue << 8;\\n        hashvalue += key[idx];\\n        idx++;\\n    }\\n    return hashvalue % hashtable->size;\\n}\\n\\nEntry *createEntry(char *key, int value) {\\n    Entry *entry = (Entry *) malloc(sizeof(Entry));\\n    entry->key = strdup(key);\\n    entry->value = value;\\n    entry->next = NULL;\\n    return entry;\\n}\\n\\nvoid set(Hashtable *hashtable, char *key, int value) {\\n    Entry *entry = createEntry(key, value);\\n    int hashvalue = hash(hashtable, key);\\n    if (hashtable->table[hashvalue] == NULL) {\\n        hashtable->table[hashvalue] = entry;\\n        hashtable->keys++;\\n    } else {\\n        Entry *current = hashtable->table[hashvalue];\\n        while (current != NULL) {\\n            if (strcmp(current->key, key) == 0) return;\\n            if (current->next == NULL) {\\n                current->next = entry;\\n                hashtable->keys++;\\n            }\\n            current = current-> next;\\n        }\\n    }\\n}\\n\\nint *get(Hashtable *hashtable, char *key) {\\n    int hashvalue = hash(hashtable, key);\\n    if (hashtable->table[hashvalue] != NULL) {\\n        Entry *current = hashtable->table[hashvalue];\\n        while (current != NULL) {\\n            if (strcmp(current->key, key) == 0) {\\n                return &(current->value);\\n            }\\n            current = current->next;\\n        }\\n        return NULL;\\n    }\\n    return NULL;\\n}\\n\\nHashtable *createHashtable(int size) {\\n    Hashtable *hashtable = (Hashtable *) malloc(sizeof(Hashtable));\\n    hashtable->size = size;\\n    hashtable->keys = 0;\\n    hashtable->table = (Entry **) calloc(size, sizeof(Entry *));\\n    return hashtable;\\n}\\n\\nchar morse[][5] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\nchar *getMorse(char *str) {\\n    char *morseRep = (char *) malloc(200 * sizeof(char));\\n    int morseIdx = 0;\\n    for (int index = 0; str[index] != \\'\\\\0\\'; index++) {\\n        for (int idx = 0; morse[str[index] - 97][idx] != \\'\\\\0\\'; idx++) {\\n            morseRep[morseIdx++] = morse[str[index] - 97][idx];\\n        }\\n    }\\n    morseRep[morseIdx] = \\'\\\\0\\';\\n    return morseRep;\\n}\\n\\nint uniqueMorseRepresentations(char ** words, int wordsSize){\\n    Hashtable *hashtable = createHashtable(wordsSize);\\n    for (int index = 0; index < wordsSize; index++) {\\n        char *morse = getMorse(words[index]);\\n        set(hashtable, morse, 1);\\n    }\\n    return hashtable->keys;\\n}\\n\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstruct Entry_s {\\n    char *key;\\n    int value;\\n    struct Entry_s *next;\\n};\\n\\ntypedef struct Entry_s Entry;\\n\\nstruct Hashtable_s {\\n    int size;\\n    int keys;\\n    struct Entry_s** table;\\n};\\n\\ntypedef struct Hashtable_s Hashtable;\\n\\nint hash(Hashtable *hashtable, char *key) {\\n    unsigned long int hashvalue = 0;\\n    int idx = 0;\\n    while (hashvalue < ULONG_MAX && idx < strlen(key)) {\\n        hashvalue = hashvalue << 8;\\n        hashvalue += key[idx];\\n        idx++;\\n    }\\n    return hashvalue % hashtable->size;\\n}\\n\\nEntry *createEntry(char *key, int value) {\\n    Entry *entry = (Entry *) malloc(sizeof(Entry));\\n    entry->key = strdup(key);\\n    entry->value = value;\\n    entry->next = NULL;\\n    return entry;\\n}\\n\\nvoid set(Hashtable *hashtable, char *key, int value) {\\n    Entry *entry = createEntry(key, value);\\n    int hashvalue = hash(hashtable, key);\\n    if (hashtable->table[hashvalue] == NULL) {\\n        hashtable->table[hashvalue] = entry;\\n        hashtable->keys++;\\n    } else {\\n        Entry *current = hashtable->table[hashvalue];\\n        while (current != NULL) {\\n            if (strcmp(current->key, key) == 0) return;\\n            if (current->next == NULL) {\\n                current->next = entry;\\n                hashtable->keys++;\\n            }\\n            current = current-> next;\\n        }\\n    }\\n}\\n\\nint *get(Hashtable *hashtable, char *key) {\\n    int hashvalue = hash(hashtable, key);\\n    if (hashtable->table[hashvalue] != NULL) {\\n        Entry *current = hashtable->table[hashvalue];\\n        while (current != NULL) {\\n            if (strcmp(current->key, key) == 0) {\\n                return &(current->value);\\n            }\\n            current = current->next;\\n        }\\n        return NULL;\\n    }\\n    return NULL;\\n}\\n\\nHashtable *createHashtable(int size) {\\n    Hashtable *hashtable = (Hashtable *) malloc(sizeof(Hashtable));\\n    hashtable->size = size;\\n    hashtable->keys = 0;\\n    hashtable->table = (Entry **) calloc(size, sizeof(Entry *));\\n    return hashtable;\\n}\\n\\nchar morse[][5] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\nchar *getMorse(char *str) {\\n    char *morseRep = (char *) malloc(200 * sizeof(char));\\n    int morseIdx = 0;\\n    for (int index = 0; str[index] != \\'\\\\0\\'; index++) {\\n        for (int idx = 0; morse[str[index] - 97][idx] != \\'\\\\0\\'; idx++) {\\n            morseRep[morseIdx++] = morse[str[index] - 97][idx];\\n        }\\n    }\\n    morseRep[morseIdx] = \\'\\\\0\\';\\n    return morseRep;\\n}\\n\\nint uniqueMorseRepresentations(char ** words, int wordsSize){\\n    Hashtable *hashtable = createHashtable(wordsSize);\\n    for (int index = 0; index < wordsSize; index++) {\\n        char *morse = getMorse(words[index]);\\n        set(hashtable, morse, 1);\\n    }\\n    return hashtable->keys;\\n}\\n\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 240121,
                "title": "python-o-n-beats-100",
                "content": "```python\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        morse = {\\'a\\':\".-\",\\n                 \\'b\\':\"-...\",\\n                 \\'c\\':\"-.-.\",\\n                 \\'d\\':\"-..\",\\n                 \\'e\\':\".\",\\n                 \\'f\\':\"..-.\",\\n                 \\'g\\':\"--.\",\\n                 \\'h\\':\"....\",\\n                 \\'i\\':\"..\",\\n                 \\'j\\':\".---\",\\n                 \\'k\\':\"-.-\",\\n                 \\'l\\':\".-..\",\\n                 \\'m\\':\"--\",\\n                 \\'n\\':\"-.\",\\n                 \\'o\\':\"---\",\\n                 \\'p\\':\".--.\",\\n                 \\'q\\':\"--.-\",\\n                 \\'r\\':\".-.\",\\n                 \\'s\\':\"...\",\\n                 \\'t\\':\"-\",\\n                 \\'u\\':\"..-\",\\n                 \\'v\\':\"...-\",\\n                 \\'w\\':\".--\",\\n                 \\'x\\':\"-..-\",\\n                 \\'y\\':\"-.--\",\\n                 \\'z\\':\"--..\"}\\n        \\n        transformations = set()\\n        for word in words:\\n            transformation = \\'\\'\\n            for c in word:\\n                transformation += morse[c]\\n            transformations.add(transformation)\\n            \\n        return len(transformations)\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        morse = {\\'a\\':\".-\",\\n                 \\'b\\':\"-...\",\\n                 \\'c\\':\"-.-.\",\\n                 \\'d\\':\"-..\",\\n                 \\'e\\':\".\",\\n                 \\'f\\':\"..-.\",\\n                 \\'g\\':\"--.\",\\n                 \\'h\\':\"....\",\\n                 \\'i\\':\"..\",\\n                 \\'j\\':\".---\",\\n                 \\'k\\':\"-.-\",\\n                 \\'l\\':\".-..\",\\n                 \\'m\\':\"--\",\\n                 \\'n\\':\"-.\",\\n                 \\'o\\':\"---\",\\n                 \\'p\\':\".--.\",\\n                 \\'q\\':\"--.-\",\\n                 \\'r\\':\".-.\",\\n                 \\'s\\':\"...\",\\n                 \\'t\\':\"-\",\\n                 \\'u\\':\"..-\",\\n                 \\'v\\':\"...-\",\\n                 \\'w\\':\".--\",\\n                 \\'x\\':\"-..-\",\\n                 \\'y\\':\"-.--\",\\n                 \\'z\\':\"--..\"}\\n        \\n        transformations = set()\\n        for word in words:\\n            transformation = \\'\\'\\n            for c in word:\\n                transformation += morse[c]\\n            transformations.add(transformation)\\n            \\n        return len(transformations)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 137639,
                "title": "4ms-in-c",
                "content": "\\n```\\n#include <string.h>\\n\\nchar *getMorseString(char c)\\n{\\n    char *morse[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    \\n    return morse[c - \\'a\\'];\\n}\\n\\nvoid setMorseTransform(char *word, char *transform)\\n{    \\n    char *morseString;\\n    \\n    // Add each Morse character of each alphabetical letter from the word to the transform string\\n    while(*word)\\n    {\\n        morseString = getMorseString(*(word++));\\n            \\n        while(*morseString)\\n            *(transform++) = *(morseString++);\\n    }\\n    \\n    // Add the null terminating character to the end of the transform string\\n    *transform = \\'\\\\0\\';\\n    \\n    return;\\n}\\n\\n\\nint uniqueMorseRepresentations(char** words, int wordsSize) \\n{\\n    char *dd, *m, *c, transforms[100][50] = {\"\"};\\n    int counter, i, j, trans_count = 0;\\n    \\n    // Populate the Morse transform array with an entry for each word\\n    for(i = 0; i < wordsSize; i++)\\n        setMorseTransform(words[i], transforms[i]);\\n    \\n    // Starting with first element, perform linear search through array for duplicates.\\n    // When a duplicate transform is found, copy the\\n    // last element in the transform array to position j, and decrement wordsSize.\\n    //\\n    // If the new element at transforms[j] is also a duplicate, repeat the process until\\n    // a non-duplicate is found or wordsSize is less than 2.\\n    //\\n    // The end result should be a de-duplicated array of transforms.\\n    \\n    for(i = 0; i < wordsSize; i++)\\n        for(j = i+1; j < (wordsSize); j++)\\n            while(j < wordsSize && wordsSize > 1 && !strcmp(transforms[i], transforms[j]))\\n            {\\n                strcpy(transforms[j], transforms[wordsSize - 1]);\\n                --wordsSize;\\n            }\\n        \\n    return wordsSize;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n#include <string.h>\\n\\nchar *getMorseString(char c)\\n{\\n    char *morse[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    \\n    return morse[c - \\'a\\'];\\n}\\n\\nvoid setMorseTransform(char *word, char *transform)\\n{    \\n    char *morseString;\\n    \\n    // Add each Morse character of each alphabetical letter from the word to the transform string\\n    while(*word)\\n    {\\n        morseString = getMorseString(*(word++));\\n            \\n        while(*morseString)\\n            *(transform++) = *(morseString++);\\n    }\\n    \\n    // Add the null terminating character to the end of the transform string\\n    *transform = \\'\\\\0\\';\\n    \\n    return;\\n}\\n\\n\\nint uniqueMorseRepresentations(char** words, int wordsSize) \\n{\\n    char *dd, *m, *c, transforms[100][50] = {\"\"};\\n    int counter, i, j, trans_count = 0;\\n    \\n    // Populate the Morse transform array with an entry for each word\\n    for(i = 0; i < wordsSize; i++)\\n        setMorseTransform(words[i], transforms[i]);\\n    \\n    // Starting with first element, perform linear search through array for duplicates.\\n    // When a duplicate transform is found, copy the\\n    // last element in the transform array to position j, and decrement wordsSize.\\n    //\\n    // If the new element at transforms[j] is also a duplicate, repeat the process until\\n    // a non-duplicate is found or wordsSize is less than 2.\\n    //\\n    // The end result should be a de-duplicated array of transforms.\\n    \\n    for(i = 0; i < wordsSize; i++)\\n        for(j = i+1; j < (wordsSize); j++)\\n            while(j < wordsSize && wordsSize > 1 && !strcmp(transforms[i], transforms[j]))\\n            {\\n                strcpy(transforms[j], transforms[wordsSize - 1]);\\n                --wordsSize;\\n            }\\n        \\n    return wordsSize;\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3471332,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n        int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> d = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        unordered_set<string> s;\\n        for (auto w : words) {\\n            string code;\\n            for (auto c : w) code += d[c - \\'a\\'];\\n            s.insert(code);\\n        }\\n        return s.size();\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n        table = {}\\n        i = \\'a\\'\\n        for m in morse:\\n            table[i] = m\\n            i = chr(ord(i) + 1)\\n        pairs = set()\\n        for word in words:\\n            string = \"\"\\n            for w in word:\\n                string += table[w]\\n            pairs.add(string)\\n        return len(pairs)\\n```\\n\\n```Java []\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morseCode = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        Set<String> set = new HashSet<>();\\n        for(String word : words){\\n            StringBuilder sb = new StringBuilder();\\n            for(char c : word.toCharArray()){\\n                sb.append(morseCode[c - \\'a\\']);\\n            }\\n            set.add(sb.toString());\\n        } \\n        return set.size();\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n        int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> d = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        unordered_set<string> s;\\n        for (auto w : words) {\\n            string code;\\n            for (auto c : w) code += d[c - \\'a\\'];\\n            s.insert(code);\\n        }\\n        return s.size();\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n        table = {}\\n        i = \\'a\\'\\n        for m in morse:\\n            table[i] = m\\n            i = chr(ord(i) + 1)\\n        pairs = set()\\n        for word in words:\\n            string = \"\"\\n            for w in word:\\n                string += table[w]\\n            pairs.add(string)\\n        return len(pairs)\\n```\n```Java []\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morseCode = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        Set<String> set = new HashSet<>();\\n        for(String word : words){\\n            StringBuilder sb = new StringBuilder();\\n            for(char c : word.toCharArray()){\\n                sb.append(morseCode[c - \\'a\\']);\\n            }\\n            set.add(sb.toString());\\n        } \\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437307,
                "title": "simple-easy-concise-solution-for-java-hashset",
                "content": "```\\nclass Solution {\\n    private String transform(String str) {\\n        String s[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"},res=\"\";\\n        for(int i=0;i<str.length();i++)\\n            res+=s[(int)str.charAt(i)-\\'a\\'];\\n        return res;\\n    }\\n    \\n    public int uniqueMorseRepresentations(String[] words) {\\n        HashSet<String> set = new HashSet<String>();\\n        for(String w : words) set.add(transform(w));\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    private String transform(String str) {\\n        String s[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"},res=\"\";\\n        for(int i=0;i<str.length();i++)\\n            res+=s[(int)str.charAt(i)-\\'a\\'];\\n        return res;\\n    }\\n    \\n    public int uniqueMorseRepresentations(String[] words) {\\n        HashSet<String> set = new HashSet<String>();\\n        for(String w : words) set.add(transform(w));\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436985,
                "title": "javascript-fast-and-simple-single-iteration-of-words-solution-hashmap-set",
                "content": "```\\nconst morseCode = { a: \".-\", b: \"-...\", c: \"-.-.\", d: \"-..\", e: \".\", f: \"..-.\", g: \"--.\", h: \"....\", i: \"..\", j: \".---\", k: \"-.-\", l: \".-..\", m: \"--\", n: \"-.\", o: \"---\", p: \".--.\", q: \"--.-\", r: \".-.\", s: \"...\", t: \"-\", u: \"..-\", v: \"...-\", w: \".--\", x: \"-..-\", y: \"-.--\", z: \"--..\" }\\n\\nfunction uniqueMorseRepresentations(words) {\\n    const set = new Set();\\n\\n    for(let i = 0; i < words.length; i++) {\\n        let encryptedWord = \"\";\\n\\n        for (let l = 0; l < words[i].length; l++) {\\n            const character = words[i][l];\\n            \\n            encryptedWord += morseCode[character];\\n        }\\n\\n        set.add(encryptedWord);\\n    }\\n\\n    return set.size;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```\\nconst morseCode = { a: \".-\", b: \"-...\", c: \"-.-.\", d: \"-..\", e: \".\", f: \"..-.\", g: \"--.\", h: \"....\", i: \"..\", j: \".---\", k: \"-.-\", l: \".-..\", m: \"--\", n: \"-.\", o: \"---\", p: \".--.\", q: \"--.-\", r: \".-.\", s: \"...\", t: \"-\", u: \"..-\", v: \"...-\", w: \".--\", x: \"-..-\", y: \"-.--\", z: \"--..\" }\\n\\nfunction uniqueMorseRepresentations(words) {\\n    const set = new Set();\\n\\n    for(let i = 0; i < words.length; i++) {\\n        let encryptedWord = \"\";\\n\\n        for (let l = 0; l < words[i].length; l++) {\\n            const character = words[i][l];\\n            \\n            encryptedWord += morseCode[character];\\n        }\\n\\n        set.add(encryptedWord);\\n    }\\n\\n    return set.size;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2436616,
                "title": "c-set-and-vectors",
                "content": "1.  keep the morse codes in a vector.\\n2.  iterate thru each character of each word\\n3.  build the code with the morse codes\\n4.  put the code in a set\\n5.  return the size of the set\\n6.  **Tune in to TWITCH to watch me solve it LIVE ON STREAM with my cool keyboards.  6pm Pacific time.  Link in profile.**\\n  \\n\\n\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<string> codes;\\n        vector<string> morses = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        for(auto& word : words) {\\n            string curCode = \"\";\\n            for(char c : word) {\\n                curCode += morses[c - \\'a\\'];\\n            }\\n            codes.insert(curCode);\\n        }\\n        return codes.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<string> codes;\\n        vector<string> morses = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        for(auto& word : words) {\\n            string curCode = \"\";\\n            for(char c : word) {\\n                curCode += morses[c - \\'a\\'];\\n            }\\n            codes.insert(curCode);\\n        }\\n        return codes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436612,
                "title": "c-easy-solution-using-hashmap",
                "content": "# **C++ Easy solution Using Hashmap**\\n```\\nclass Solution {\\n    \\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        string arr[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_map<string,int>m;\\n        for(int i=0;i<words.size();i++){\\n            string s=\"\";\\n            for(int j=0;j<words[i].size();j++){\\n                s+=arr[words[i][j]-\\'a\\'];\\n            }\\n            m[s]++;\\n        }\\n        return m.size();\\n    }\\n};\\n```\\n# **Please Share and Upvote**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    \\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        string arr[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_map<string,int>m;\\n        for(int i=0;i<words.size();i++){\\n            string s=\"\";\\n            for(int j=0;j<words[i].size();j++){\\n                s+=arr[words[i][j]-\\'a\\'];\\n            }\\n            m[s]++;\\n        }\\n        return m.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 362150,
                "title": "solution-in-python-3-beats-100-two-lines",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n    \\tM = [\\'.-\\',\\'-...\\',\\'-.-.\\',\\'-..\\',\\'.\\',\\'..-.\\',\\'--.\\',\\'....\\',\\'..\\',\\'.---\\',\\'-.-\\',\\'.-..\\',\\'--\\',\\'-.\\',\\'---\\',\\'.--.\\',\\'--.-\\',\\'.-.\\',\\'...\\',\\'-\\',\\'..-\\',\\'...-\\',\\'.--\\',\\'-..-\\',\\'-.--\\',\\'--..\\']\\n    \\treturn len(set([\\'\\'.join(map(lambda x: M[ord(x)-97], w)) for w in words]))\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n    \\tM = [\\'.-\\',\\'-...\\',\\'-.-.\\',\\'-..\\',\\'.\\',\\'..-.\\',\\'--.\\',\\'....\\',\\'..\\',\\'.---\\',\\'-.-\\',\\'.-..\\',\\'--\\',\\'-.\\',\\'---\\',\\'.--.\\',\\'--.-\\',\\'.-.\\',\\'...\\',\\'-\\',\\'..-\\',\\'...-\\',\\'.--\\',\\'-..-\\',\\'-.--\\',\\'--..\\']\\n    \\treturn len(set([\\'\\'.join(map(lambda x: M[ord(x)-97], w)) for w in words]))\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "codeTag": "Java"
            },
            {
                "id": 351647,
                "title": "swift-5-12ms",
                "content": "```\\nclass Solution {\\n    func uniqueMorseRepresentations(_ words: [String]) -> Int {\\n        let morse: [Character : String] = [\"a\": \".-\", \"b\": \"-...\", \"c\": \"-.-.\", \"d\": \"-..\", \"e\": \".\", \"f\": \"..-.\", \"g\": \"--.\", \"h\": \"....\", \"i\": \"..\", \"j\": \".---\", \"k\": \"-.-\", \"l\": \".-..\", \"m\": \"--\", \"n\": \"-.\", \"o\": \"---\", \"p\": \".--.\", \"q\": \"--.-\", \"r\": \".-.\", \"s\": \"...\", \"t\": \"-\", \"u\": \"..-\", \"v\": \"...-\", \"w\": \".--\", \"x\": \"-..-\", \"y\": \"-.--\", \"z\": \"--..\"]\\n\\n        return words.reduce(into: Set<String>()) {\\n            let transform = $1.reduce(into: \"\") { $0 += morse[$1] ?? \"\" }\\n            $0.insert(transform)\\n        }.count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func uniqueMorseRepresentations(_ words: [String]) -> Int {\\n        let morse: [Character : String] = [\"a\": \".-\", \"b\": \"-...\", \"c\": \"-.-.\", \"d\": \"-..\", \"e\": \".\", \"f\": \"..-.\", \"g\": \"--.\", \"h\": \"....\", \"i\": \"..\", \"j\": \".---\", \"k\": \"-.-\", \"l\": \".-..\", \"m\": \"--\", \"n\": \"-.\", \"o\": \"---\", \"p\": \".--.\", \"q\": \"--.-\", \"r\": \".-.\", \"s\": \"...\", \"t\": \"-\", \"u\": \"..-\", \"v\": \"...-\", \"w\": \".--\", \"x\": \"-..-\", \"y\": \"-.--\", \"z\": \"--..\"]\\n\\n        return words.reduce(into: Set<String>()) {\\n            let transform = $1.reduce(into: \"\") { $0 += morse[$1] ?? \"\" }\\n            $0.insert(transform)\\n        }.count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 348948,
                "title": "python-3-using-dict-and-set",
                "content": "The idea is to map each character in the alphabet to a Morse code in a dictionary. Then use this map to make a set of words formated in Morse Code. Then return `len(set())`\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\" \\\\\\n             ,\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\" \\\\\\n             ,\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        D = dict( zip( string.ascii_lowercase,code ) ) # string.ascii_lowercase returns \"abc...xyz\"\\n        \\n\\t\\ts = set()\\n        for word in words:\\n\\t\\t\\t# add the joint of letter (in code format) to a set\\n            s.add(\"\".join( [ D[letter] for letter in word ] ) ) \\n        return len(s)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\" \\\\\\n             ,\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\" \\\\\\n             ,\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        D = dict( zip( string.ascii_lowercase,code ) ) # string.ascii_lowercase returns \"abc...xyz\"\\n        \\n\\t\\ts = set()\\n        for word in words:\\n\\t\\t\\t# add the joint of letter (in code format) to a set\\n            s.add(\"\".join( [ D[letter] for letter in word ] ) ) \\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 296064,
                "title": "javascript-solution",
                "content": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    \\n    morsecode = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    let set = new Set()\\n    \\n    for(let word of words){\\n        let mc = \"\"\\n        for(let c of word){\\n            mc += morsecode[c.charCodeAt(0)-\\'a\\'.charCodeAt(0)]\\n        }\\n        set.add(mc)\\n    }\\n    return set.size\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    \\n    morsecode = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    let set = new Set()\\n    \\n    for(let word of words){\\n        let mc = \"\"\\n        for(let c of word){\\n            mc += morsecode[c.charCodeAt(0)-\\'a\\'.charCodeAt(0)]\\n        }\\n        set.add(mc)\\n    }\\n    return set.size\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 151852,
                "title": "python-solution-beats-100",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        transformation = []\\n        for word in words:\\n            temp = []\\n            for char in word:\\n                temp.append(morse[ord(char)-97])\\n            transformation.append(\\'\\'.join(temp))\\n        return len(set(transformation))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        transformation = []\\n        for word in words:\\n            temp = []\\n            for char in word:\\n                temp.append(morse[ord(char)-97])\\n            transformation.append(\\'\\'.join(temp))\\n        return len(set(transformation))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 128738,
                "title": "declarative-javascript",
                "content": "Doesn\\'t get better than a good\\'ole map.reduce and JSON\\n\\n```\\nvar morse = {\\n    a: \".-\",\\n    b: \"-...\",\\n    c: \"-.-.\",\\n    d: \"-..\",\\n    e: \".\",\\n    f: \"..-.\",\\n    g: \"--.\",\\n    h: \"....\",\\n    i: \"..\",\\n    j: \".---\",\\n    k: \"-.-\",\\n    l: \".-..\",\\n    m: \"--\",\\n    n: \"-.\",\\n    o: \"---\",\\n    p: \".--.\",\\n    q: \"--.-\",\\n    r: \".-.\",\\n    s: \"...\",\\n    t: \"-\",\\n    u: \"..-\",\\n    v: \"...-\",\\n    w: \".--\",\\n    x: \"-..-\",\\n    y: \"-.--\",\\n    z: \"--..\"\\n}\\n\\n\\nvar uniqueMorseRepresentations = function(words) {\\n    \\n    const transformWord = (word) => Array.from(word).reduce((acc, char) => acc + morse[char], \\'\\')\\n    const addToSet = (set, word) => set.add(word)\\n    \\n    return words.map(transformWord).reduce(addToSet, new Set([])).size    \\n    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar morse = {\\n    a: \".-\",\\n    b: \"-...\",\\n    c: \"-.-.\",\\n    d: \"-..\",\\n    e: \".\",\\n    f: \"..-.\",\\n    g: \"--.\",\\n    h: \"....\",\\n    i: \"..\",\\n    j: \".---\",\\n    k: \"-.-\",\\n    l: \".-..\",\\n    m: \"--\",\\n    n: \"-.\",\\n    o: \"---\",\\n    p: \".--.\",\\n    q: \"--.-\",\\n    r: \".-.\",\\n    s: \"...\",\\n    t: \"-\",\\n    u: \"..-\",\\n    v: \"...-\",\\n    w: \".--\",\\n    x: \"-..-\",\\n    y: \"-.--\",\\n    z: \"--..\"\\n}\\n\\n\\nvar uniqueMorseRepresentations = function(words) {\\n    \\n    const transformWord = (word) => Array.from(word).reduce((acc, char) => acc + morse[char], \\'\\')\\n    const addToSet = (set, word) => set.add(word)\\n    \\n    return words.map(transformWord).reduce(addToSet, new Set([])).size    \\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3846821,
                "title": "simple-easy-solution-beats-99-30-ms-accepted",
                "content": "# Code\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, x: List[str]) -> int:\\n        a=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len(set([\"\".join([a[ord(i)-97] for i in j]) for j in x]))\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, x: List[str]) -> int:\\n        a=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len(set([\"\".join([a[ord(i)-97] for i in j]) for j in x]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3649613,
                "title": "simple-understandable-solution-python-code",
                "content": "# Approach\\n- Convert each word in words array to its corresponding encrypted text\\n- Check if the encrypted text is present in transformations array/list or not\\n- If not present then add it\\n- Finally return the total number of transformations present\\n\\n# Do Upvote if u like it :)\\n\\n# Code\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n        cipher_txt = \\'\\'\\n        transformations = []\\n\\n        if len(words) == 0:\\n            return 0\\n        \\n        for word in words:\\n            for alpha in word:\\n                cipher_txt = cipher_txt + morse[ord(alpha) - 97]\\n\\n            if cipher_txt not in transformations:\\n                transformations.append(cipher_txt)\\n\\n            cipher_txt = \\'\\'\\n        \\n        return len(transformations)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n        cipher_txt = \\'\\'\\n        transformations = []\\n\\n        if len(words) == 0:\\n            return 0\\n        \\n        for word in words:\\n            for alpha in word:\\n                cipher_txt = cipher_txt + morse[ord(alpha) - 97]\\n\\n            if cipher_txt not in transformations:\\n                transformations.append(cipher_txt)\\n\\n            cipher_txt = \\'\\'\\n        \\n        return len(transformations)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3098442,
                "title": "easiest-approach-c-hasing",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> hash={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string>unique;\\n        for(int i=0;i<words.size();i++){\\n            string temp=\"\";\\n            for(int j=0;j<words[i].length();j++){\\n                temp+=hash[words[i][j]-97];\\n            }\\n            unique.insert(temp);\\n        }\\n        return unique.size();\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> hash={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string>unique;\\n        for(int i=0;i<words.size();i++){\\n            string temp=\"\";\\n            for(int j=0;j<words[i].length();j++){\\n                temp+=hash[words[i][j]-97];\\n            }\\n            unique.insert(temp);\\n        }\\n        return unique.size();\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2796304,
                "title": "java-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(nk) k->word length.\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    String[] morseCode = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    public int uniqueMorseRepresentations(String[] words) {\\n       Set<String> code=new HashSet<>();\\n   \\n\\n       for(String word:words){\\n           StringBuilder sb=new StringBuilder();\\n\\n           for(char c:word.toCharArray()){\\n               int index=c-\\'a\\';\\n               sb.append(morseCode[index]);\\n\\n           }\\n           code.add(sb.toString());\\n       }\\n       \\n       return code.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    String[] morseCode = new String[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    public int uniqueMorseRepresentations(String[] words) {\\n       Set<String> code=new HashSet<>();\\n   \\n\\n       for(String word:words){\\n           StringBuilder sb=new StringBuilder();\\n\\n           for(char c:word.toCharArray()){\\n               int index=c-\\'a\\';\\n               sb.append(morseCode[index]);\\n\\n           }\\n           code.add(sb.toString());\\n       }\\n       \\n       return code.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2621809,
                "title": "python3-best-solution-o-n-k-where-k-is-a-max-length-of-string",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        arr = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        s =set()\\n        for word in words:\\n            string = \"\"\\n            for ele in word:\\n                string+=arr[ord(ele)-97]\\n            s.add(string)\\n        return len(s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        arr = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        s =set()\\n        for word in words:\\n            string = \"\"\\n            for ele in word:\\n                string+=arr[ord(ele)-97]\\n            s.add(string)\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2544285,
                "title": "js-best-solution-with-hashmap-100",
                "content": "```\\nconst CONFIG = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n\\nvar uniqueMorseRepresentations = function(words) {\\n    let output = 0;\\n    const hashmap = {};\\n    \\n    for (let i = 0; i < words.length; i++) {\\n        const word = words[i];\\n        let code = \\'\\';\\n        for (let j = 0; j < word.length; j++) {\\n            code += CONFIG[word.charCodeAt(j) - 97];\\n        }\\n        \\n        if (hashmap[code] === undefined) {\\n            output++;\\n            hashmap[code] = i;\\n        }\\n    }\\n    \\n    return output;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst CONFIG = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n\\nvar uniqueMorseRepresentations = function(words) {\\n    let output = 0;\\n    const hashmap = {};\\n    \\n    for (let i = 0; i < words.length; i++) {\\n        const word = words[i];\\n        let code = \\'\\';\\n        for (let j = 0; j < word.length; j++) {\\n            code += CONFIG[word.charCodeAt(j) - 97];\\n        }\\n        \\n        if (hashmap[code] === undefined) {\\n            output++;\\n            hashmap[code] = i;\\n        }\\n    }\\n    \\n    return output;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2443616,
                "title": "short-c-best-method",
                "content": "Here is the short code:\\n \\n int uniqueMorseRepresentations(vector<string>& words) {\\n\\t\\t\\tset<string> se;\\n\\t\\t\\tvector<string> v={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\t\\tfor(int i=0;i<words.size();i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tstring s=\"\";\\n\\t\\t\\t\\tfor(int j=0;j<words[i].length();j++) s+=v[words[i][j]-\\'a\\'];\\n\\t\\t\\t\\tse.insert(s);\\n\\t\\t\\t}\\n\\t\\t\\treturn se.size();\\n    }",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "Here is the short code:\\n \\n int uniqueMorseRepresentations(vector<string>& words) {\\n\\t\\t\\tset<string> se;\\n\\t\\t\\tvector<string> v={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\t\\tfor(int i=0;i<words.size();i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tstring s=\"\";\\n\\t\\t\\t\\tfor(int j=0;j<words[i].length();j++) s+=v[words[i][j]-\\'a\\'];\\n\\t\\t\\t\\tse.insert(s);\\n\\t\\t\\t}\\n\\t\\t\\treturn se.size();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2439894,
                "title": "easy-peasy-solution-in-python",
                "content": "\\tclass Solution:\\n\\t\\tdef uniqueMorseRepresentations(self, words) -> int:\\n\\n\\t\\t\\tans = set()\\n\\t\\t\\ttrans = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\", \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}\\n\\n\\t\\t\\tfor i in words:\\n\\t\\t\\t\\ttemp = \\'\\'\\n\\t\\t\\t\\tfor j in i:\\n\\t\\t\\t\\t\\ttemp += trans[j]\\n\\t\\t\\t\\tans.add(temp)\\n\\n\\t\\t\\treturn len(ans)",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n\\t\\tdef uniqueMorseRepresentations(self, words) -> int:\\n\\n\\t\\t\\tans = set()\\n\\t\\t\\ttrans = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\", \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 2438990,
                "title": "for-beginners-java-using-set-only",
                "content": "```\\nclass Solution {\\n    public String []check;\\n    public int uniqueMorseRepresentations(String[] words) {\\n        check = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        HashSet<String> set = new HashSet<String>();\\n        for(String temp : words) set.add(helper(temp));\\n        return set.size();\\n    }\\n    public String helper(String word){\\n        String ans = \"\";\\n        for(int i = 0; i < word.length(); i++) ans += check[(int)word.charAt(i) - \\'a\\'];\\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public String []check;\\n    public int uniqueMorseRepresentations(String[] words) {\\n        check = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 2437862,
                "title": "1-liner-python-solution",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        translate = {\\'\\'.join([morse[ord(c)-97] for c in word]) for word in words}\\n        return len(translate)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        translate = {\\'\\'.join([morse[ord(c)-97] for c in word]) for word in words}\\n        return len(translate)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437777,
                "title": "easy-and-100-faster-0ms",
                "content": "We traverse through the vector and for each word, we convert it to morse directly using the array we are given in the question. \\nInsert this new string into set so there are no repeatitions in them. \\nThe size of this set is the answer.\\n\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        set<string> st;\\n        const char* morse[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        for(auto word:words){\\n            string ans=\"\";\\n            for(auto ch:word)\\n                ans+=morse[ch-\\'a\\'];\\n            st.insert(ans);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        set<string> st;\\n        const char* morse[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        for(auto word:words){\\n            string ans=\"\";\\n            for(auto ch:word)\\n                ans+=morse[ch-\\'a\\'];\\n            st.insert(ans);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437699,
                "title": "c-modular-code-0ms-faster-than-100",
                "content": "![image](https://assets.leetcode.com/users/images/02569a9b-b09e-41aa-a8cc-3d08a2e27772_1660717258.9231017.png)\\n```\\nstring arr[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    string string_to_morse(string s){\\n        string temp;\\n        for(int i=0;i<s.size();i++){\\n            temp+=arr[s[i]-97];\\n        }\\n        return temp;\\n    }\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<string>st;\\n        for(int i=0;i<words.size();i++){\\n            st.insert(string_to_morse(words[i]));\\n        }\\n        return st.size();\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/02569a9b-b09e-41aa-a8cc-3d08a2e27772_1660717258.9231017.png)\\n```\\nstring arr[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    string string_to_morse(string s){\\n        string temp;\\n        for(int i=0;i<s.size();i++){\\n            temp+=arr[s[i]-97];\\n        }\\n        return temp;\\n    }\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<string>st;\\n        for(int i=0;i<words.size();i++){\\n            st.insert(string_to_morse(words[i]));\\n        }\\n        return st.size();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2437571,
                "title": "java-solution-easy-solution",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Map<Character, String> res = new HashMap<>();\\n        res.put(\\'a\\', \".-\"); res.put(\\'b\\', \"-...\"); res.put(\\'c\\', \"-.-.\"); res.put(\\'d\\', \"-..\"); res.put(\\'e\\', \".\");           res.put(\\'f\\', \"..-.\");res.put(\\'g\\', \"--.\"); res.put(\\'h\\', \"....\"); res.put(\\'i\\', \"..\"); res.put(\\'j\\', \".---\");         res.put(\\'k\\', \"-.-\"); res.put(\\'l\\', \".-..\"); res.put(\\'m\\', \"--\"); res.put(\\'n\\', \"-.\"); res.put(\\'o\\', \"---\");\\n        res.put(\\'p\\', \".--.\"); res.put(\\'q\\', \"--.-\"); res.put(\\'r\\', \".-.\"); res.put(\\'s\\', \"...\"); res.put(\\'t\\', \"-\");\\n        res.put(\\'u\\', \"..-\"); res.put(\\'v\\', \"...-\"); res.put(\\'w\\', \".--\"); res.put(\\'x\\', \"-..-\");\\n        res.put(\\'y\\', \"-.--\"); res.put(\\'z\\', \"--..\");\\n        Set<String> set = new HashSet<>();\\n        int count = 0;\\n        for(String word : words){\\n            String str = \"\";\\n            for(char ch : word.toCharArray()){\\n                str = str + res.get(ch);\\n            }\\n            if(!set.contains(str)){\\n                set.add(str);\\n                count ++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Map<Character, String> res = new HashMap<>();\\n        res.put(\\'a\\', \".-\"); res.put(\\'b\\', \"-...\"); res.put(\\'c\\', \"-.-.\"); res.put(\\'d\\', \"-..\"); res.put(\\'e\\', \".\");           res.put(\\'f\\', \"..-.\");res.put(\\'g\\', \"--.\"); res.put(\\'h\\', \"....\"); res.put(\\'i\\', \"..\"); res.put(\\'j\\', \".---\");         res.put(\\'k\\', \"-.-\"); res.put(\\'l\\', \".-..\"); res.put(\\'m\\', \"--\"); res.put(\\'n\\', \"-.\"); res.put(\\'o\\', \"---\");\\n        res.put(\\'p\\', \".--.\"); res.put(\\'q\\', \"--.-\"); res.put(\\'r\\', \".-.\"); res.put(\\'s\\', \"...\"); res.put(\\'t\\', \"-\");\\n        res.put(\\'u\\', \"..-\"); res.put(\\'v\\', \"...-\"); res.put(\\'w\\', \".--\"); res.put(\\'x\\', \"-..-\");\\n        res.put(\\'y\\', \"-.--\"); res.put(\\'z\\', \"--..\");\\n        Set<String> set = new HashSet<>();\\n        int count = 0;\\n        for(String word : words){\\n            String str = \"\";\\n            for(char ch : word.toCharArray()){\\n                str = str + res.get(ch);\\n            }\\n            if(!set.contains(str)){\\n                set.add(str);\\n                count ++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437556,
                "title": "easy-to-understand-java-solution-using-hashset-faster-than-99-55",
                "content": "**Please Upvote if you like my approach**\\n\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] chart = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\\n                         \"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\\n                         \"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\\n                         \"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> count = new HashSet();\\n        for (String word : words) {\\n            StringBuilder code = new StringBuilder();\\n            for (char c : word.toCharArray())\\n             code.append(chart[c - \\'a\\']);\\n             count.add(code.toString());\\n        }\\n        return count.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] chart = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\\n                         \"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\\n                         \"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\\n                         \"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> count = new HashSet();\\n        for (String word : words) {\\n            StringBuilder code = new StringBuilder();\\n            for (char c : word.toCharArray())\\n             code.append(chart[c - \\'a\\']);\\n             count.add(code.toString());\\n        }\\n        return count.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437442,
                "title": "c-easy-approach-simple-to-understand-beginner-friendly",
                "content": "```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> output;\\n        for(auto i : words)\\n        {\\n            string s = \"\";\\n            for(int j : i) s += morse[j-97];\\n            output.insert(s);\\n        }\\n        return output.size();\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> output;\\n        for(auto i : words)\\n        {\\n            string s = \"\";\\n            for(int j : i) s += morse[j-97];\\n            output.insert(s);\\n        }\\n        return output.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2436772,
                "title": "python-easy-understanding-solution",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        s = set()\\n        mos = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for w in words:                         # Iterate through every word.\\n            m = \\'\\'\\n            for l in w:                         # Iterate through every letter in current word.\\n                m += mos[ord(l) - ord(\\'a\\')]     # Change the letter into morse code.\\n            s.add(m)                            # Use set to avoid replicate answer.\\n        \\n        return len(s)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        s = set()\\n        mos = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        for w in words:                         # Iterate through every word.\\n            m = \\'\\'\\n            for l in w:                         # Iterate through every letter in current word.\\n                m += mos[ord(l) - ord(\\'a\\')]     # Change the letter into morse code.\\n            s.add(m)                            # Use set to avoid replicate answer.\\n        \\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436763,
                "title": "c-solution-0ms-better-than-100-only-sets-8-lines-comments",
                "content": "![image](https://assets.leetcode.com/users/images/8ceda11d-fd93-4cae-b2d1-304f63a67f15_1660703125.0653307.png)\\n\\n```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n\\tset<string> s;\\n\\t\\n\\t// we map with vector as 0 based indexing for chars, {\\'a\\', \".-\"}, {\\'b\\', \"-...\"}.....\\n\\tvector<string> vec ={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\tstring st;\\n\\t\\n\\t// then we traverse the string and for each characters from the word, \\n\\t// we get its morse code and add it to the set\\n\\tfor(int i=0; i<words.size(); i++){\\n\\t\\tst = \"\";\\n\\t\\tfor(int j=0; j<words[i].length(); j++)\\n\\t\\t\\tst+=vec[words[i][j]-\\'a\\'];\\n\\t\\t\\t\\n\\t\\t// then we add this string to the set, and continue for all the words\\n\\t\\ts.insert(st);\\n\\t}\\n\\treturn s.size();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n\\tset<string> s;\\n\\t\\n\\t// we map with vector as 0 based indexing for chars, {\\'a\\', \".-\"}, {\\'b\\', \"-...\"}.....\\n\\tvector<string> vec ={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\tstring st;\\n\\t\\n\\t// then we traverse the string and for each characters from the word, \\n\\t// we get its morse code and add it to the set\\n\\tfor(int i=0; i<words.size(); i++){\\n\\t\\tst = \"\";\\n\\t\\tfor(int j=0; j<words[i].length(); j++)\\n\\t\\t\\tst+=vec[words[i][j]-\\'a\\'];\\n\\t\\t\\t\\n\\t\\t// then we add this string to the set, and continue for all the words\\n\\t\\ts.insert(st);\\n\\t}\\n\\treturn s.size();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2436736,
                "title": "0ms-with-go-map-string-builder",
                "content": "```\\nfunc uniqueMorseRepresentations(words []string) int {\\n    wordSet := make(map[string]struct{})\\n    \\n    alphabet := []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}\\n    \\n    for i := 0; i < len(words); i++ {\\n        var currentWord strings.Builder\\n        \\n        for j := 0; j < len(words[i]); j++ {\\n            currentWord.WriteString(alphabet[words[i][j] - \\'a\\'])\\n        }\\n        \\n        if _, ok := wordSet[currentWord.String()]; !ok {\\n            wordSet[currentWord.String()] = struct{}{}\\n        }\\n    }\\n    \\n    return len(wordSet)\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "String"
                ],
                "code": "```\\nfunc uniqueMorseRepresentations(words []string) int {\\n    wordSet := make(map[string]struct{})\\n    \\n    alphabet := []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}\\n    \\n    for i := 0; i < len(words); i++ {\\n        var currentWord strings.Builder\\n        \\n        for j := 0; j < len(words[i]); j++ {\\n            currentWord.WriteString(alphabet[words[i][j] - \\'a\\'])\\n        }\\n        \\n        if _, ok := wordSet[currentWord.String()]; !ok {\\n            wordSet[currentWord.String()] = struct{}{}\\n        }\\n    }\\n    \\n    return len(wordSet)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2436566,
                "title": "js-set-easy-solution-in-3-lines",
                "content": "## **TL-DR:** Three variations of solution\\n\\n![image](https://assets.leetcode.com/users/images/a5d97667-f9a5-4974-8339-f0528f10ce5f_1660699065.9906268.png)\\n\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n\\tconst morseCode = { a: \".-\", b: \"-...\", c: \"-.-.\", d: \"-..\", e: \".\", f: \"..-.\", g: \"--.\", h: \"....\", i: \"..\", j: \".---\", k: \"-.-\", l: \".-..\", m: \"--\", n: \"-.\", o: \"---\", p: \".--.\", q: \"--.-\", r: \".-.\", s: \"...\", t: \"-\", u: \"..-\", v: \"...-\", w: \".--\", x: \"-..-\", y: \"-.--\", z: \"--..\" }\\n    const morseRepresentation = word => word.split(\\'\\').map(c => morseCode[c]).join(\\'\\');\\n    \\n    return new Set(words.map(morseRepresentation)).size;\\n};\\n```\\n\\n---\\n\\n## **First** acceptance\\n\\nAt beginning, I was using a `reduce()` function to insert each transformation into the set at time:\\n\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    return words.reduce((set, w) => set.add(transform(w)), new Set()).size;\\n    \\n    function transform(word) {\\n        const morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return word.split(\\'\\').map(c => morse[c.charCodeAt() - \\'a\\'.charCodeAt()]).join(\\'\\');\\n    }\\n};\\n```\\n\\n---\\n\\n## **Cleaner way** to use `Set()`\\n\\nAs the [Set() constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set/) accepts any [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) as argument, we can achieve the same result in a better way.\\n\\nEven it would be possible to have a solution in one single line - as we can see at [@acupoftee\\'s great one line solution](https://leetcode.com/problems/unique-morse-code-words/discuss/329303/JavaScript-One-Line-Solution-w-Explanation-(52-ms-beats-94)) - keeping the `transform(word)` function helps to have a lot cleaner solution:\\n\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    const morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n    \\n    return new Set(words.map(transformWord)).size;\\n    \\n    function transformWord (word) {\\n        return word.split(\\'\\').map(c => morse[c.charCodeAt() - \\'a\\'.charCodeAt()]).join(\\'\\');\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/fed24540-1ab1-4be6-b9e5-bb9e665cd5ce_1660697627.3583236.png)\\n\\n---\\n\\n## **Best approach** using *hash table* to keep values\\n\\nFinally, a last improvement that can be made is to use an *hash table* instead of using the *Array* structure given at problem statement.\\n\\nIt will not just make it easier to read and simpler to code, but also will be a lot more efficient, as it will not be necessary any more to make the *maths* and function calls involving ASCII code to find the correct index for morse representations: \\n\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n\\tconst morse = { a: \".-\", b: \"-...\", c: \"-.-.\", d: \"-..\", e: \".\", f: \"..-.\", g: \"--.\", h: \"....\", i: \"..\", j: \".---\", k: \"-.-\", l: \".-..\", m: \"--\", n: \"-.\", o: \"---\", p: \".--.\", q: \"--.-\", r: \".-.\", s: \"...\", t: \"-\", u: \"..-\", v: \"...-\", w: \".--\", x: \"-..-\", y: \"-.--\", z: \"--..\" }\\n    const transformWord = word => word.split(\\'\\').map(c => morse[c]).join(\\'\\');\\n    \\n    return new Set(words.map(transformWord)).size;\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/a5d97667-f9a5-4974-8339-f0528f10ce5f_1660699065.9906268.png)\\n",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table",
                    "Ordered Set"
                ],
                "code": "```\\nvar uniqueMorseRepresentations = function(words) {\\n\\tconst morseCode = { a: \".-\", b: \"-...\", c: \"-.-.\", d: \"-..\", e: \".\", f: \"..-.\", g: \"--.\", h: \"....\", i: \"..\", j: \".---\", k: \"-.-\", l: \".-..\", m: \"--\", n: \"-.\", o: \"---\", p: \".--.\", q: \"--.-\", r: \".-.\", s: \"...\", t: \"-\", u: \"..-\", v: \"...-\", w: \".--\", x: \"-..-\", y: \"-.--\", z: \"--..\" }\\n    const morseRepresentation = word => word.split(\\'\\').map(c => morseCode[c]).join(\\'\\');\\n    \\n    return new Set(words.map(morseRepresentation)).size;\\n};\\n```\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    return words.reduce((set, w) => set.add(transform(w)), new Set()).size;\\n    \\n    function transform(word) {\\n        const morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return word.split(\\'\\').map(c => morse[c.charCodeAt() - \\'a\\'.charCodeAt()]).join(\\'\\');\\n    }\\n};\\n```\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    const morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n    \\n    return new Set(words.map(transformWord)).size;\\n    \\n    function transformWord (word) {\\n        return word.split(\\'\\').map(c => morse[c.charCodeAt() - \\'a\\'.charCodeAt()]).join(\\'\\');\\n    }\\n};\\n```\n```\\nvar uniqueMorseRepresentations = function(words) {\\n\\tconst morse = { a: \".-\", b: \"-...\", c: \"-.-.\", d: \"-..\", e: \".\", f: \"..-.\", g: \"--.\", h: \"....\", i: \"..\", j: \".---\", k: \"-.-\", l: \".-..\", m: \"--\", n: \"-.\", o: \"---\", p: \".--.\", q: \"--.-\", r: \".-.\", s: \"...\", t: \"-\", u: \"..-\", v: \"...-\", w: \".--\", x: \"-..-\", y: \"-.--\", z: \"--..\" }\\n    const transformWord = word => word.split(\\'\\').map(c => morse[c]).join(\\'\\');\\n    \\n    return new Set(words.map(transformWord)).size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2280241,
                "title": "c-solution-time-o-n-beats-99",
                "content": "```C#\\npublic class Solution {\\n    public int UniqueMorseRepresentations(string[] words) {\\n        string[] code = new [] { \".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\" };\\n        \\n        HashSet<string> h = new HashSet<string>();\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < words.Length; i++) {\\n            for (int j = 0; j < words[i].Length; j++) sb.Append(code[words[i][j] - \\'a\\']);\\n            h.Add(sb.ToString());\\n            sb.Clear();\\n        }\\n        \\n        return h.Count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```C#\\npublic class Solution {\\n    public int UniqueMorseRepresentations(string[] words) {\\n        string[] code = new [] { \".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\" };\\n        \\n        HashSet<string> h = new HashSet<string>();\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < words.Length; i++) {\\n            for (int j = 0; j < words[i].Length; j++) sb.Append(code[words[i][j] - \\'a\\']);\\n            h.Add(sb.ToString());\\n            sb.Clear();\\n        }\\n        \\n        return h.Count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1901444,
                "title": "easy-c-solution-beginner-friendly",
                "content": "unordered_set<string> st;\\n        string arr[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        for(int i=0;i<words.size();i++){\\n            string temp=words[i];\\n            string str=\"\";\\n            for(int i=0;i<temp.size();i++)\\n                str+=arr[temp[i]-\\'a\\'];\\n            \\n            st.insert(str);\\n        }\\n        return st.size();",
                "solutionTags": [
                    "C"
                ],
                "code": "unordered_set<string> st;\\n        string arr[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        for(int i=0;i<words.size();i++){\\n            string temp=words[i];\\n            string str=\"\";\\n            for(int i=0;i<temp.size();i++)\\n                str+=arr[temp[i]-\\'a\\'];\\n            \\n            st.insert(str);\\n        }\\n        return st.size();",
                "codeTag": "Unknown"
            },
            {
                "id": 1610931,
                "title": "one-line-solution-new-set",
                "content": "```\\nconst uniqueMorseRepresentations = (words) => {\\n  const code = [\\'.-\\', \\'-...\\', \\'-.-.\\', \\'-..\\', \\'.\\', \\'..-.\\', \\'--.\\', \\'....\\', \\'..\\', \\'.---\\', \\'-.-\\', \\'.-..\\', \\'--\\', \\'-.\\', \\'---\\', \\'.--.\\', \\'--.-\\', \\'.-.\\', \\'...\\', \\'-\\', \\'..-\\', \\'...-\\', \\'.--\\', \\'-..-\\', \\'-.--\\', \\'--..\\'];\\n\\n  return new Set(words.map((word) => [...word].map((char) => code[char.charCodeAt() - 97]).join(\\'\\'))).size;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst uniqueMorseRepresentations = (words) => {\\n  const code = [\\'.-\\', \\'-...\\', \\'-.-.\\', \\'-..\\', \\'.\\', \\'..-.\\', \\'--.\\', \\'....\\', \\'..\\', \\'.---\\', \\'-.-\\', \\'.-..\\', \\'--\\', \\'-.\\', \\'---\\', \\'.--.\\', \\'--.-\\', \\'.-.\\', \\'...\\', \\'-\\', \\'..-\\', \\'...-\\', \\'.--\\', \\'-..-\\', \\'-.--\\', \\'--..\\'];\\n\\n  return new Set(words.map((word) => [...word].map((char) => code[char.charCodeAt() - 97]).join(\\'\\'))).size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1088637,
                "title": "java-simple-easy-to-understand",
                "content": "Runtime: 1 ms, faster than 100.00% of Java online submissions for Unique Morse Code Words.\\nMemory Usage: 37.2 MB, less than 56.75% of Java online submissions for Unique Morse Code Words.\\n```\\npublic int uniqueMorseRepresentations(String[] words) {\\n    String[] arr = new String[]{\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n    Set<String> set = new HashSet<>();\\n    for (String s : words) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char ch : s.toCharArray()) sb.append(arr[ch - \\'a\\']);\\n        set.add(sb.toString());\\n    }\\n\\n    return set.size();\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int uniqueMorseRepresentations(String[] words) {\\n    String[] arr = new String[]{\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n    Set<String> set = new HashSet<>();\\n    for (String s : words) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char ch : s.toCharArray()) sb.append(arr[ch - \\'a\\']);\\n        set.add(sb.toString());\\n    }\\n\\n    return set.size();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 944902,
                "title": "python-simplest-intuitive-solution",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        res = set()\\n        for word in words:\\n            curr = \"\"\\n            for char in word:\\n                curr += codes[ord(char)-97]\\n            res.add(curr)\\n        return len(res)\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        res = set()\\n        for word in words:\\n            curr = \"\"\\n            for char in word:\\n                curr += codes[ord(char)-97]\\n            res.add(curr)\\n        return len(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 790324,
                "title": "c-faster-than-100-custom-trie",
                "content": "Idea is to get rid of set,because its expensive translation from string to hashcode,and also we store each string of group where most of them is similar.\\n\\nI get this trie code from geeks,and modify it to have only 2 childs,and to count string we have not previously\\n\\nUpvote if you like it.\\n\\nMy first solution with set was faster than 67%\\n\\n\\n```\\n#define CHAR_SIZE 2\\n\\nint n = 0;\\n\\nclass Trie {\\npublic:\\n\\tbool isLeaf;\\n\\tTrie* character[CHAR_SIZE];\\n\\n\\tTrie()\\n\\t{\\n\\t\\tthis->isLeaf = false;\\n\\t\\tfor (int i = 0; i < CHAR_SIZE; i++)\\n\\t\\t\\tthis->character[i] = nullptr;\\n\\t}\\n\\n\\tvoid insert(std::string);\\n};\\n\\nvoid Trie::insert(std::string key) {\\n\\tTrie* curr = this;\\n\\tfor (int i = 0; i < key.length(); i++) {\\n        int k = key[i]==\\'.\\'?0:1;\\n\\t\\tif (curr->character[k] == nullptr)\\n\\t\\t\\tcurr->character[k] = new Trie();\\n\\t\\t\\n\\t\\tcurr = curr->character[k];\\n\\t}\\n\\tif (!curr->isLeaf) n++;\\n    curr->isLeaf = true;\\n}\\n\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        n = 0;\\n        Trie* root = new Trie();\\n        string morse[26] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        for (string& s:words) {\\n            string mapped;\\n            for (char c:s) {\\n                mapped += morse[c-\\'a\\'];\\n            }\\n            root->insert(mapped);\\n        }\\n        return n;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n#define CHAR_SIZE 2\\n\\nint n = 0;\\n\\nclass Trie {\\npublic:\\n\\tbool isLeaf;\\n\\tTrie* character[CHAR_SIZE];\\n\\n\\tTrie()\\n\\t{\\n\\t\\tthis->isLeaf = false;\\n\\t\\tfor (int i = 0; i < CHAR_SIZE; i++)\\n\\t\\t\\tthis->character[i] = nullptr;\\n\\t}\\n\\n\\tvoid insert(std::string);\\n};\\n\\nvoid Trie::insert(std::string key) {\\n\\tTrie* curr = this;\\n\\tfor (int i = 0; i < key.length(); i++) {\\n        int k = key[i]==\\'.\\'?0:1;\\n\\t\\tif (curr->character[k] == nullptr)\\n\\t\\t\\tcurr->character[k] = new Trie();\\n\\t\\t\\n\\t\\tcurr = curr->character[k];\\n\\t}\\n\\tif (!curr->isLeaf) n++;\\n    curr->isLeaf = true;\\n}\\n\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        n = 0;\\n        Trie* root = new Trie();\\n        string morse[26] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        for (string& s:words) {\\n            string mapped;\\n            for (char c:s) {\\n                mapped += morse[c-\\'a\\'];\\n            }\\n            root->insert(mapped);\\n        }\\n        return n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 536145,
                "title": "c-100-memory",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> dict{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"} ;\\n        \\n        set<string> set ;\\n        \\n        for( int i=0 ; i<words.size() ; i++ ){\\n            int word_size = words[i].length() ;\\n            string res = \"\" ;\\n            for( int j=0 ; j<word_size ; j++ ){\\n                res = res + dict[words[i][j]-\\'a\\'] ;\\n            }\\n            set.insert(res) ;\\n        }\\n        \\n        return set.size() ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> dict{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"} ;\\n        \\n        set<string> set ;\\n        \\n        for( int i=0 ; i<words.size() ; i++ ){\\n            int word_size = words[i].length() ;\\n            string res = \"\" ;\\n            for( int j=0 ; j<word_size ; j++ ){\\n                res = res + dict[words[i][j]-\\'a\\'] ;\\n            }\\n            set.insert(res) ;\\n        }\\n        \\n        return set.size() ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 322913,
                "title": "simple-python-solution-beats-99-83-time-83-96-space",
                "content": "```\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\\n        encodings = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\t\\t\\n\\t\\t# map letter to encoding\\n        map = dict()\\n        for letter, encoding in zip(letters,encodings):\\n            map[letter] = encoding\\n           \\n\\t\\t# for each word given, translate to Morse code using lookup table \\n        for i in range(len(words)):\\n            words[i] = \"\".join([map[c] for c in words[i]])\\n        \\n\\t\\t# count distinct encodings\\n        return len(set(words))\\n```",
                "solutionTags": [
                    "Python",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\\n        encodings = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\t\\t\\n\\t\\t# map letter to encoding\\n        map = dict()\\n        for letter, encoding in zip(letters,encodings):\\n            map[letter] = encoding\\n           \\n\\t\\t# for each word given, translate to Morse code using lookup table \\n        for i in range(len(words)):\\n            words[i] = \"\".join([map[c] for c in words[i]])\\n        \\n\\t\\t# count distinct encodings\\n        return len(set(words))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 242518,
                "title": "c-easy-to-understand",
                "content": "```\\nint uniqueMorseRepresentations(char** words, int wordsSize) {\\n\\t\\tchar comp[26][6]={\".-\", \"-...\" , \"-.-.\", \"-..\", \".\" ,\"..-.\", \"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    char str1[100],str2[100][100],str3[100];\\n    int i,j,k,l,unique,found;\\n    found=unique=k=0;\\n    for(i=0;i<wordsSize;i++){\\n    \\tstrcpy(str3,\"\");\\n    \\tstrcpy(str1,words[i]);\\n    \\t\\n\\t\\t    for(j=0;j<strlen(str1);j++){\\n    \\t\\tstrcat(str3,comp[str1[j]-\\'a\\']);           //\\u5B57\\u7B26\\u4E32\\u540E\\u8FFD\\u52A0\\u65B0\\u5B57\\u7B26\\u4E32 \\n\\t\\t}\\n\\t\\tfor(l=0;l<unique;l++){\\n\\t\\tif(strcmp(str2[l],str3)==0){\\n\\t\\tfound=1;\\n\\t\\tbreak;}\\n\\t\\t}\\n\\t\\tif(found==0)\\n\\t\\tstrcpy(str2[unique++],str3);\\n\\t\\tfound=0;\\n\\t}\\n\\treturn unique;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint uniqueMorseRepresentations(char** words, int wordsSize) {\\n\\t\\tchar comp[26][6]={\".-\", \"-...\" , \"-.-.\", \"-..\", \".\" ,\"..-.\", \"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    char str1[100],str2[100][100],str3[100];\\n    int i,j,k,l,unique,found;\\n    found=unique=k=0;\\n    for(i=0;i<wordsSize;i++){\\n    \\tstrcpy(str3,\"\");\\n    \\tstrcpy(str1,words[i]);\\n    \\t\\n\\t\\t    for(j=0;j<strlen(str1);j++){\\n    \\t\\tstrcat(str3,comp[str1[j]-\\'a\\']);           //\\u5B57\\u7B26\\u4E32\\u540E\\u8FFD\\u52A0\\u65B0\\u5B57\\u7B26\\u4E32 \\n\\t\\t}\\n\\t\\tfor(l=0;l<unique;l++){\\n\\t\\tif(strcmp(str2[l],str3)==0){\\n\\t\\tfound=1;\\n\\t\\tbreak;}\\n\\t\\t}\\n\\t\\tif(found==0)\\n\\t\\tstrcpy(str2[unique++],str3);\\n\\t\\tfound=0;\\n\\t}\\n\\treturn unique;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 224779,
                "title": "rust-concise-solution-0ms",
                "content": "```\\nuse std::collections::HashSet;\\nuse std::iter::FromIterator;\\n\\nimpl Solution {\\n    const morse : [&\\'static str; 26] = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    pub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n        HashSet::<String>::from_iter(words.iter()\\n                                          .map(|w| w.chars()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    .map(|c| Solution::morse[(c as usize) - (\\'a\\' as usize)])\\n                                                    .collect::<String>())).len() as i32\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nuse std::collections::HashSet;\\nuse std::iter::FromIterator;\\n\\nimpl Solution {\\n    const morse : [&\\'static str; 26] = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    pub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n        HashSet::<String>::from_iter(words.iter()\\n                                          .map(|w| w.chars()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t    .map(|c| Solution::morse[(c as usize) - (\\'a\\' as usize)])\\n                                                    .collect::<String>())).len() as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 223445,
                "title": "java-5ms-faster-than-94",
                "content": "```\\nclass solutaion{\\n\\tpublic int uniqueMorseRepresentations(String[] words) {\\n\\t\\tString letters=\"abcdefghijklmnopqrstuvwxyz\";\\n        String[] morse={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> s1=new HashSet<>();\\n        for (String word : words) {\\n            String str=\"\";\\n           int num=word.length();\\n            for(int i=0;i<num;i++) {\\n                str=str+morse[letters.indexOf(word.charAt(i))];\\n            }\\n            s1.add(str);\\n        }\\n        return s1.size(); \\n\\t  }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass solutaion{\\n\\tpublic int uniqueMorseRepresentations(String[] words) {\\n\\t\\tString letters=\"abcdefghijklmnopqrstuvwxyz\";\\n        String[] morse={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> s1=new HashSet<>();\\n        for (String word : words) {\\n            String str=\"\";\\n           int num=word.length();\\n            for(int i=0;i<num;i++) {\\n                str=str+morse[letters.indexOf(word.charAt(i))];\\n            }\\n            s1.add(str);\\n        }\\n        return s1.size(); \\n\\t  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 217697,
                "title": "runtime-0-ms-faster-than-100-00-of-go-online-submissions-for-unique-morse-code-words",
                "content": "```\\nvar morseCodes []string = []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}\\n\\n\\nfunc uniqueMorseRepresentations(words []string) int {\\n    transformations := make(map[string]int)\\n\\n    for _, word := range words {\\n\\t    var sb strings.Builder\\n\\t\\n\\t    for _, char := range []byte(word) {\\n\\t\\t    sb.WriteString(morseCodes[char - 97])\\t\\n\\t    }\\n\\t\\n\\t    transformations[sb.String()]++\\n    }\\n\\n    return len(transformations)\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar morseCodes []string = []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}\\n\\n\\nfunc uniqueMorseRepresentations(words []string) int {\\n    transformations := make(map[string]int)\\n\\n    for _, word := range words {\\n\\t    var sb strings.Builder\\n\\t\\n\\t    for _, char := range []byte(word) {\\n\\t\\t    sb.WriteString(morseCodes[char - 97])\\t\\n\\t    }\\n\\t\\n\\t    transformations[sb.String()]++\\n    }\\n\\n    return len(transformations)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 214221,
                "title": "rust-solution",
                "content": "```\\nuse std::collections::HashSet;\\nimpl Solution {\\n    pub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n        \\n        let morse_codes = vec![\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n        \\n        let mut morse_set = HashSet::new();\\n        for word in &words{\\n            let mut temp_str : String = \"\".into();\\n            let mut chars = word.chars();\\n            let mut each_char = chars.next();\\n            loop {\\n                match each_char {\\n                    Some(x) => temp_str.push_str(morse_codes[(x as u8 - 97) as usize]),\\n                    None => break,\\n                }\\n             each_char = chars.next();\\n            }\\n            morse_set.insert(temp_str);\\n        }\\n        return morse_set.len() as i32;\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nuse std::collections::HashSet;\\nimpl Solution {\\n    pub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n        \\n        let morse_codes = vec![\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n        \\n        let mut morse_set = HashSet::new();\\n        for word in &words{\\n            let mut temp_str : String = \"\".into();\\n            let mut chars = word.chars();\\n            let mut each_char = chars.next();\\n            loop {\\n                match each_char {\\n                    Some(x) => temp_str.push_str(morse_codes[(x as u8 - 97) as usize]),\\n                    None => break,\\n                }\\n             each_char = chars.next();\\n            }\\n            morse_set.insert(temp_str);\\n        }\\n        return morse_set.len() as i32;\\n    }\\n    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 200334,
                "title": "python-2-lines",
                "content": "```\\nclass Solution:\\n    \\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len(set([\\n            \\'\\'.join([morse[ord(c)-ord(\\'a\\')] for c in word]) \\n            for word in words\\n        ]))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    \\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        :type words: List[str]\\n        :rtype: int\\n        \"\"\"\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len(set([\\n            \\'\\'.join([morse[ord(c)-ord(\\'a\\')] for c in word]) \\n            for word in words\\n        ]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 194241,
                "title": "simple-javascript-solution",
                "content": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    var trans = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    return new Set(words.map((ele, idx) => {\\n       return ele.split(\\'\\').map((item, i) => {\\n            return trans[ele.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n        }).join(\\'\\');\\n    })).size;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    var trans = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    return new Set(words.map((ele, idx) => {\\n       return ele.split(\\'\\').map((item, i) => {\\n            return trans[ele.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n        }).join(\\'\\');\\n    })).size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 122289,
                "title": "2-line-code-with-java-8-stream",
                "content": "```\\npublic int uniqueMorseRepresentations(String[] words) {\\n        Set<String> res = Arrays.stream(words).map(i -> getMC(i)).collect(Collectors.toSet());\\n        return res.size();\\n    }\\n    private String getMC(String str) {\\n        String[] mCode = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                          \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\\n                          \"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        return str.chars().mapToObj(ch -> mCode[(char)ch % 97]).reduce(\"\", String::concat);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int uniqueMorseRepresentations(String[] words) {\\n        Set<String> res = Arrays.stream(words).map(i -> getMC(i)).collect(Collectors.toSet());\\n        return res.size();\\n    }\\n    private String getMC(String str) {\\n        String[] mCode = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                          \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\\n                          \"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        return str.chars().mapToObj(ch -> mCode[(char)ch % 97]).reduce(\"\", String::concat);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3945955,
                "title": "3-types-solutions-fully-explained-simple-solutions",
                "content": "# **1. \"Mapping and Set\" approach:**\\n# Intuition\\nWe are given a list of words and we need to find the number of unique Morse code representations that can be generated from these words. Each letter of the alphabet corresponds to a specific Morse code pattern. Our goal is to map each word to its Morse code representation and count the number of unique representations.\\n# Approach\\n1. First, we create a mapping of each letter to its Morse code pattern using the symbols object provided in the code.\\n2. For each word in the input words list, we split the word into individual letters and map each letter to its Morse code pattern using the symbols object.\\n3. We join these Morse code patterns for each letter to form the Morse code representation of the entire word.\\n4. We use a Set data structure to store these unique Morse code representations. The Set automatically ensures that only unique representations are stored.\\n5. Finally, we return the size of the Set, which represents the number of unique Morse code representations.\\n# Complexity\\n- Time complexity: `O(n * k)`\\n\\n- Space complexity: `O(n)`\\n\\n# Code\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    const symbols = {\\n        a: \\'.-\\',\\n        b: \\'-...\\',\\n        c: \\'-.-.\\',\\n        d: \\'-..\\',\\n        e: \\'.\\',\\n        f: \\'..-.\\',\\n        g: \\'--.\\',\\n        h: \\'....\\',\\n        i: \\'..\\',\\n        j: \\'.---\\',\\n        k: \\'-.-\\',\\n        l: \\'.-..\\',\\n        m: \\'--\\',\\n        n: \\'-.\\',\\n        o: \\'---\\',\\n        p: \\'.--.\\',\\n        q: \\'--.-\\',\\n        r: \\'.-.\\',\\n        s: \\'...\\',\\n        t: \\'-\\',\\n        u: \\'..-\\',\\n        v: \\'...-\\',\\n        w: \\'.--\\',\\n        x: \\'-..-\\',\\n        y: \\'-.--\\',\\n        z: \\'--..\\'\\n    }\\n\\n    return new Set(words.map(word => word.split(\\'\\').map(letter => symbols[letter]).join(\\'\\'))).size;\\n};\\n```\\n\\n\\n---\\n\\n# **2. \"Mapping and Set\" approach:**\\n# Intuition\\nWe are given a list of words and we need to find the number of unique Morse code representations that can be generated from these words. Each letter of the alphabet corresponds to a specific Morse code pattern. Our goal is to map each word to its Morse code representation and count the number of unique representations.\\n# Approach\\n1. An array named symbols holds the Morse code patterns for each letter of the alphabet. The index of each pattern corresponds to the character\\'s position in the alphabet.\\n2. A Set called transformations is initialized to keep track of unique Morse code representations.\\n3. For each word in the words list:\\n    - A temporary string trans is initialized to store the Morse code transformation of the current word.\\n    - For each letter in the word:\\n        - The ASCII code of the letter is subtracted by 97 (ASCII code of \\'a\\') to get the index in the symbols array.\\n        - The Morse code pattern for the letter at that index is added to the trans string.\\n    - The trans string, representing the Morse code transformation of the   current word, is added to the transformations set.\\n4. After processing all words, the size of the transformations set is returned, which represents the number of unique Morse code representations.\\n# Complexity\\n- Time complexity: `O(n * k)`\\n\\n- Space complexity: `O(n)`\\n\\n# Code\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    var symbols = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\\n                  \"--.\",\"....\",\"..\",\".---\",\\n                  \"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\\n                  \".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    var transformations = new Set();\\n    \\n    for (let word of words) {        \\n        var trans = \"\";\\n        for (let letter of word) {\\n            var index = letter.charCodeAt(0) - 97;\\n            trans += symbols[index];\\n        }\\n        \\n        transformations.add(trans);   \\n    }\\n    \\n    return transformations.size;\\n};\\n```\\n---\\n\\n# **3. \"Subarray Transformation and Set\" approach:**\\n# Intuition\\nThis code aims to determine the number of unique Morse code transformations that can be generated from a list of words. Each word is treated as a subarray of characters, and for each character, its Morse code equivalent is appended to a temporary string. The goal is to count the number of unique strings that result from these transformations.\\n# Approach\\n1. The symbols object holds the mapping of letters to their corresponding Morse code patterns, similar to the previous codes.\\n2. A Set named transformations is created to store unique Morse code transformations.\\n3. For each subArr (subarray or word) in the words list:\\n    - A temporary string tempStr is initialized to store the Morse code transformation of the current subarray.\\n    - For each word (character) in the subArr:\\n        - The key is obtained by looking up the symbols object using the word as the key. This retrieves the Morse code pattern corresponding to the current character.\\n        - The Morse code pattern is appended to the tempStr.\\n    - After processing all characters in the subarray, the resulting tempStr represents the Morse code transformation of that subarray.\\n    - The tempStr is added to the transformations set to keep track of unique transformations.\\n4. Once all subarrays have been processed, the function returns the size of the transformations set, which represents the count of unique Morse code transformations.\\n# Complexity\\n- Time complexity: `O(n * k)`\\n\\n- Space complexity: `O(n)`\\n\\n# Code\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    const symbols = {\\n        a: \\'.-\\',\\n        b: \\'-...\\',\\n        c: \\'-.-.\\',\\n        d: \\'-..\\',\\n        e: \\'.\\',\\n        f: \\'..-.\\',\\n        g: \\'--.\\',\\n        h: \\'....\\',\\n        i: \\'..\\',\\n        j: \\'.---\\',\\n        k: \\'-.-\\',\\n        l: \\'.-..\\',\\n        m: \\'--\\',\\n        n: \\'-.\\',\\n        o: \\'---\\',\\n        p: \\'.--.\\',\\n        q: \\'--.-\\',\\n        r: \\'.-.\\',\\n        s: \\'...\\',\\n        t: \\'-\\',\\n        u: \\'..-\\',\\n        v: \\'...-\\',\\n        w: \\'.--\\',\\n        x: \\'-..-\\',\\n        y: \\'-.--\\',\\n        z: \\'--..\\'\\n    }\\n\\n    let transformations = new Set();\\n\\n    for (let subArr of words) {\\n        let tempStr = \\'\\';\\n        for (let word of subArr) {\\n            let key = symbols[word];\\n            tempStr += key;\\n        }\\n        transformations.add(tempStr);\\n    }\\n    return transformations.size;\\n};\\n```\\n\\n\\n---\\n\\n**Any doubts Comment it!**\\n\\nHappy Coding : )\\n\\n![upvote.jpeg](https://assets.leetcode.com/users/images/a3814417-9c24-4b25-a61d-9cd994a1b091_1692715864.4624593.jpeg)\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    const symbols = {\\n        a: \\'.-\\',\\n        b: \\'-...\\',\\n        c: \\'-.-.\\',\\n        d: \\'-..\\',\\n        e: \\'.\\',\\n        f: \\'..-.\\',\\n        g: \\'--.\\',\\n        h: \\'....\\',\\n        i: \\'..\\',\\n        j: \\'.---\\',\\n        k: \\'-.-\\',\\n        l: \\'.-..\\',\\n        m: \\'--\\',\\n        n: \\'-.\\',\\n        o: \\'---\\',\\n        p: \\'.--.\\',\\n        q: \\'--.-\\',\\n        r: \\'.-.\\',\\n        s: \\'...\\',\\n        t: \\'-\\',\\n        u: \\'..-\\',\\n        v: \\'...-\\',\\n        w: \\'.--\\',\\n        x: \\'-..-\\',\\n        y: \\'-.--\\',\\n        z: \\'--..\\'\\n    }\\n\\n    return new Set(words.map(word => word.split(\\'\\').map(letter => symbols[letter]).join(\\'\\'))).size;\\n};\\n```\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    var symbols = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\\n                  \"--.\",\"....\",\"..\",\".---\",\\n                  \"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\\n                  \"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\\n                  \".--\",\"-..-\",\"-.--\",\"--..\"];\\n    \\n    var transformations = new Set();\\n    \\n    for (let word of words) {        \\n        var trans = \"\";\\n        for (let letter of word) {\\n            var index = letter.charCodeAt(0) - 97;\\n            trans += symbols[index];\\n        }\\n        \\n        transformations.add(trans);   \\n    }\\n    \\n    return transformations.size;\\n};\\n```\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    const symbols = {\\n        a: \\'.-\\',\\n        b: \\'-...\\',\\n        c: \\'-.-.\\',\\n        d: \\'-..\\',\\n        e: \\'.\\',\\n        f: \\'..-.\\',\\n        g: \\'--.\\',\\n        h: \\'....\\',\\n        i: \\'..\\',\\n        j: \\'.---\\',\\n        k: \\'-.-\\',\\n        l: \\'.-..\\',\\n        m: \\'--\\',\\n        n: \\'-.\\',\\n        o: \\'---\\',\\n        p: \\'.--.\\',\\n        q: \\'--.-\\',\\n        r: \\'.-.\\',\\n        s: \\'...\\',\\n        t: \\'-\\',\\n        u: \\'..-\\',\\n        v: \\'...-\\',\\n        w: \\'.--\\',\\n        x: \\'-..-\\',\\n        y: \\'-.--\\',\\n        z: \\'--..\\'\\n    }\\n\\n    let transformations = new Set();\\n\\n    for (let subArr of words) {\\n        let tempStr = \\'\\';\\n        for (let word of subArr) {\\n            let key = symbols[word];\\n            tempStr += key;\\n        }\\n        transformations.add(tempStr);\\n    }\\n    return transformations.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3828299,
                "title": "solution-in-java-beginner-friendly-using-for-loop-and-hashmap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morse_code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\\n                \".--\",\"-..-\",\"-.--\",\"--..\"};\\n        char[] alphabet = {\\n                \\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'f\\', \\'g\\', \\'h\\', \\'i\\', \\'j\\', \\'k\\', \\'l\\', \\'m\\',\\n                \\'n\\', \\'o\\', \\'p\\', \\'q\\', \\'r\\', \\'s\\', \\'t\\', \\'u\\', \\'v\\', \\'w\\', \\'x\\', \\'y\\', \\'z\\'\\n        };\\n\\n        String[] new_morse_code_arr = new String[words.length];\\n        int index=0;\\n\\n        String check;\\n        for (String word : words) {\\n            check = word;\\n            for (int j = 0; j < check.length(); j++) {\\n                for (int k = 0; k < alphabet.length; k++) {\\n                    if (check.charAt(j) == alphabet[k]) {\\n                        if (new_morse_code_arr[index] == null) {\\n                            new_morse_code_arr[index] = \"\";\\n                        }\\n                        new_morse_code_arr[index] = new_morse_code_arr[index] + morse_code[k];\\n                    }\\n                }\\n            }\\n            index++;\\n        }\\n\\n        HashSet<String> hs = new HashSet<>(Arrays.asList(new_morse_code_arr));\\n\\n        return hs.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morse_code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\\n                \".--\",\"-..-\",\"-.--\",\"--..\"};\\n        char[] alphabet = {\\n                \\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'f\\', \\'g\\', \\'h\\', \\'i\\', \\'j\\', \\'k\\', \\'l\\', \\'m\\',\\n                \\'n\\', \\'o\\', \\'p\\', \\'q\\', \\'r\\', \\'s\\', \\'t\\', \\'u\\', \\'v\\', \\'w\\', \\'x\\', \\'y\\', \\'z\\'\\n        };\\n\\n        String[] new_morse_code_arr = new String[words.length];\\n        int index=0;\\n\\n        String check;\\n        for (String word : words) {\\n            check = word;\\n            for (int j = 0; j < check.length(); j++) {\\n                for (int k = 0; k < alphabet.length; k++) {\\n                    if (check.charAt(j) == alphabet[k]) {\\n                        if (new_morse_code_arr[index] == null) {\\n                            new_morse_code_arr[index] = \"\";\\n                        }\\n                        new_morse_code_arr[index] = new_morse_code_arr[index] + morse_code[k];\\n                    }\\n                }\\n            }\\n            index++;\\n        }\\n\\n        HashSet<String> hs = new HashSet<>(Arrays.asList(new_morse_code_arr));\\n\\n        return hs.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3415075,
                "title": "golang-performance-speed-is-faster-than-others",
                "content": "\\n# Complexity\\n- Time complexity:100%\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:28%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc uniqueMorseRepresentations(words []string) int {\\nmorseMap := map[byte]string {\\n\\'a\\': \".-\",\\n\\'b\\': \"-...\",\\n\\'c\\': \"-.-.\",\\n\\'d\\': \"-..\",\\n\\'e\\': \".\",\\n\\'f\\': \"..-.\",\\n\\'g\\': \"--.\",\\n\\'h\\': \"....\",\\n\\'i\\': \"..\",\\n\\'j\\': \".---\",\\n\\'k\\': \"-.-\",\\n\\'l\\': \".-..\",\\n\\'m\\': \"--\",\\n\\'n\\': \"-.\",\\n\\'o\\': \"---\",\\n\\'p\\': \".--.\",\\n\\'q\\': \"--.-\",\\n\\'r\\': \".-.\",\\n\\'s\\': \"...\",\\n\\'t\\': \"-\",\\n\\'u\\': \"..-\",\\n\\'v\\': \"...-\",\\n\\'w\\': \".--\",\\n\\'x\\': \"-..-\",\\n\\'y\\': \"-.--\",\\n\\'z\\': \"--..\",\\n}\\nmorseSet := make(map[string]bool)\\n\\nfor _, word := range words {\\n    morseWord := \"\"\\n\\n    for _, letter := range []byte(word) {\\n        morseWord += morseMap[letter]\\n    }\\n\\n    morseSet[morseWord] = true\\n}\\n\\nreturn len(morseSet)\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc uniqueMorseRepresentations(words []string) int {\\nmorseMap := map[byte]string {\\n\\'a\\': \".-\",\\n\\'b\\': \"-...\",\\n\\'c\\': \"-.-.\",\\n\\'d\\': \"-..\",\\n\\'e\\': \".\",\\n\\'f\\': \"..-.\",\\n\\'g\\': \"--.\",\\n\\'h\\': \"....\",\\n\\'i\\': \"..\",\\n\\'j\\': \".---\",\\n\\'k\\': \"-.-\",\\n\\'l\\': \".-..\",\\n\\'m\\': \"--\",\\n\\'n\\': \"-.\",\\n\\'o\\': \"---\",\\n\\'p\\': \".--.\",\\n\\'q\\': \"--.-\",\\n\\'r\\': \".-.\",\\n\\'s\\': \"...\",\\n\\'t\\': \"-\",\\n\\'u\\': \"..-\",\\n\\'v\\': \"...-\",\\n\\'w\\': \".--\",\\n\\'x\\': \"-..-\",\\n\\'y\\': \"-.--\",\\n\\'z\\': \"--..\",\\n}\\nmorseSet := make(map[string]bool)\\n\\nfor _, word := range words {\\n    morseWord := \"\"\\n\\n    for _, letter := range []byte(word) {\\n        morseWord += morseMap[letter]\\n    }\\n\\n    morseSet[morseWord] = true\\n}\\n\\nreturn len(morseSet)\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3285657,
                "title": "java-simple-solution-easy-to-understand",
                "content": "# Java\\n\\n# Code\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n\\n        int l = words.length;\\n        String s = \"\";\\n        StringBuilder m = new StringBuilder();\\n\\n        String morse[] = new String[] {\\n          \".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n          \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\\n          \"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"\\n        }; \\n\\n        Map<Character, String> map = new HashMap<>();\\n\\n        for (int i = 97, j = 0; i < 123; i++, j++) {\\n           map.put((char) i, morse[j]);\\n        }\\n\\n        for (int i = 0; i < l; i++) {\\n            s = words[i];\\n            for (int j = 0; j < s.length(); j++) {\\n                m.append(map.get(s.charAt(j)));\\n            }\\n            words[i] = m.toString();\\n            m.setLength(0);\\n        }\\n\\n        Set<String> ans = new HashSet<String>(Arrays.asList(words));\\n\\n       return ans.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n\\n        int l = words.length;\\n        String s = \"\";\\n        StringBuilder m = new StringBuilder();\\n\\n        String morse[] = new String[] {\\n          \".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n          \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\\n          \"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"\\n        }; \\n\\n        Map<Character, String> map = new HashMap<>();\\n\\n        for (int i = 97, j = 0; i < 123; i++, j++) {\\n           map.put((char) i, morse[j]);\\n        }\\n\\n        for (int i = 0; i < l; i++) {\\n            s = words[i];\\n            for (int j = 0; j < s.length(); j++) {\\n                m.append(map.get(s.charAt(j)));\\n            }\\n            words[i] = m.toString();\\n            m.setLength(0);\\n        }\\n\\n        Set<String> ans = new HashSet<String>(Arrays.asList(words));\\n\\n       return ans.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3234710,
                "title": "unique-morse-javascript-98-48-55-ms",
                "content": "![image.png](https://assets.leetcode.com/users/images/007f6567-605a-498f-a9e6-409185d149b5_1677465451.361765.png)\\n\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @return {number}\\n */\\nvar uniqueMorseRepresentations = function(words) {\\n    // set morse array (26 elements like english letters)\\n    morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]    \\n    // set array to store result of words transformation\\n    arr = []\\n    // enumerate all word in words array\\n    for (word of words) {        \\n        let temp = []\\n        // transform letter to morse\\n        for(let i = 0; i < word.length; i++)\\n            temp.push(morse[word[i].charCodeAt(0) - 97])\\n        // push result in arr\\n        arr.push(temp.join(\\'\\'))\\n    }   \\n    // return unique values number in arr\\n    return [...new Set(arr)].length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @return {number}\\n */\\nvar uniqueMorseRepresentations = function(words) {\\n    // set morse array (26 elements like english letters)\\n    morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]    \\n    // set array to store result of words transformation\\n    arr = []\\n    // enumerate all word in words array\\n    for (word of words) {        \\n        let temp = []\\n        // transform letter to morse\\n        for(let i = 0; i < word.length; i++)\\n            temp.push(morse[word[i].charCodeAt(0) - 97])\\n        // push result in arr\\n        arr.push(temp.join(\\'\\'))\\n    }   \\n    // return unique values number in arr\\n    return [...new Set(arr)].length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3172534,
                "title": "easy-java-solution-self-explanatory-1-ms",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] strArr = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet<>();\\n        for(String str : words){\\n            StringBuffer sb = new StringBuffer();\\n            for(char ch : str.toCharArray()){\\n                sb.append(strArr[ch-\\'a\\']);\\n            }\\n            set.add(sb.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] strArr = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet<>();\\n        for(String str : words){\\n            StringBuffer sb = new StringBuffer();\\n            for(char ch : str.toCharArray()){\\n                sb.append(strArr[ch-\\'a\\']);\\n            }\\n            set.add(sb.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2966829,
                "title": "easiest-java-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(N^2)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n\\n    String []arr={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n    HashMap<String,Boolean>mp=new HashMap<>();\\n\\n    for(int i=0;i<words.length;i++){\\n\\n    String check=\"\";\\n\\n    for(int j=0;j<words[i].length();j++){\\n\\n    check+=arr[words[i].charAt(j)-\\'a\\'];\\n\\n    }\\n\\n    mp.put(check,true);\\n\\n    }\\n\\n    return mp.size();\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n\\n    String []arr={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n    HashMap<String,Boolean>mp=new HashMap<>();\\n\\n    for(int i=0;i<words.length;i++){\\n\\n    String check=\"\";\\n\\n    for(int j=0;j<words[i].length();j++){\\n\\n    check+=arr[words[i].charAt(j)-\\'a\\'];\\n\\n    }\\n\\n    mp.put(check,true);\\n\\n    }\\n\\n    return mp.size();\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2872834,
                "title": "java-solution-using-hashset-2ms-99-8-faster",
                "content": "```\\n    public int uniqueMorseRepresentations(String[] words) {\\n        HashSet<String>set=new HashSet<String>();\\n        for(String stu:words){\\n            set.add(code(stu));\\n        }\\n        return set.size();\\n        \\n    }\\n    public String code(String word){\\n        String morse[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n            \\n        StringBuilder str=new StringBuilder();\\n        for(char ch:word.toCharArray()){\\n            str.append(morse[(int)ch-97]);\\n        }\\n        return str.toString();\\n        }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public int uniqueMorseRepresentations(String[] words) {\\n        HashSet<String>set=new HashSet<String>();\\n        for(String stu:words){\\n            set.add(code(stu));\\n        }\\n        return set.size();\\n        \\n    }\\n    public String code(String word){\\n        String morse[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n            \\n        StringBuilder str=new StringBuilder();\\n        for(char ch:word.toCharArray()){\\n            str.append(morse[(int)ch-97]);\\n        }\\n        return str.toString();\\n        }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2706198,
                "title": "c-3ms",
                "content": "class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& w) {\\n        map<char,string> morse{\\n            {\\'a\\',\".-\"},\\n            {\\'b\\',\"-...\"},\\n            {\\'c\\',\"-.-.\"},\\n            {\\'d\\',\"-..\"},\\n            {\\'e\\',\".\"},\\n            {\\'f\\',\"..-.\"},\\n            {\\'g\\',\"--.\"},\\n            {\\'h\\',\"....\"},\\n            {\\'i\\',\"..\"},\\n            {\\'j\\',\".---\"},\\n            {\\'k\\',\"-.-\"},\\n            {\\'l\\',\".-..\"},\\n            {\\'m\\',\"--\"},\\n            {\\'n\\',\"-.\"},\\n            {\\'o\\',\"---\"},\\n            {\\'p\\',\".--.\"},\\n            {\\'q\\',\"--.-\"},\\n            {\\'r\\',\".-.\"},\\n            {\\'s\\',\"...\"},\\n            {\\'t\\',\"-\"},\\n            {\\'u\\',\"..-\"},\\n            {\\'v\\',\"...-\"},\\n            {\\'w\\',\".--\"},\\n            {\\'x\\',\"-..-\"},\\n            {\\'y\\',\"-.--\"},\\n            {\\'z\\',\"--..\"}\\n        };\\n        set<string>se;\\n        int n=w.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            string a=\"\";\\n            for(int j=0;j<w[i].size();j++)a+=morse[w[i][j]];\\n            se.insert(a);\\n        }\\n        return se.size();\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& w) {\\n        map<char,string> morse{\\n            {\\'a\\',\".-\"}",
                "codeTag": "Java"
            },
            {
                "id": 2440022,
                "title": "c-simple-easy-to-understand-set",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n       const vector<string> morseCode  {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        for(auto &x : words) {\\n            string temp = \"\";\\n            \\n            for(auto &y : x)  temp += morseCode[y - \\'a\\'];\\n            \\n            x = temp;\\n        }\\n        \\n        unordered_set<string> mSet;\\n        \\n        for(auto &x : words) mSet.insert(x);\\n        \\n        \\n        return size(mSet);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n       const vector<string> morseCode  {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        for(auto &x : words) {\\n            string temp = \"\";\\n            \\n            for(auto &y : x)  temp += morseCode[y - \\'a\\'];\\n            \\n            x = temp;\\n        }\\n        \\n        unordered_set<string> mSet;\\n        \\n        for(auto &x : words) mSet.insert(x);\\n        \\n        \\n        return size(mSet);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2439056,
                "title": "python-2-liner",
                "content": "# With lambda expression (readability):\\n\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse_codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        encode = lambda word: [morse_codes[ord(c) - ord(\\'a\\')] for c in word]\\n        return len({\"\".join(encode(word)) for word in words})\\n        \\n```\\n\\n# Without lambda expression\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse_codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len({\"\".join(morse_codes[ord(c) - ord(\\'a\\')] for c in word) for word in words})\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse_codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        encode = lambda word: [morse_codes[ord(c) - ord(\\'a\\')] for c in word]\\n        return len({\"\".join(encode(word)) for word in words})\\n        \\n```\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse_codes = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len({\"\".join(morse_codes[ord(c) - ord(\\'a\\')] for c in word) for word in words})\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2438949,
                "title": "c-easy-solution-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> mp = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        unordered_map<string, bool> check;\\n        for(int i = 0 ; i<words.size() ; i++)\\n        {\\n            string temp = \"\";\\n            string word = words[i];\\n            \\n            for(int j = 0 ; j<word.length() ; j++)\\n            {\\n                temp+= mp[word[j]-\\'a\\'];\\n            }\\n            check[temp] = true;\\n            \\n        }\\n        \\n        return check.size();\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/3eab6ea7-1859-489f-aa13-1b4d0cde7948_1660735826.2910888.png)\\n",
                "solutionTags": [
                    "C",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> mp = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        unordered_map<string, bool> check;\\n        for(int i = 0 ; i<words.size() ; i++)\\n        {\\n            string temp = \"\";\\n            string word = words[i];\\n            \\n            for(int j = 0 ; j<word.length() ; j++)\\n            {\\n                temp+= mp[word[j]-\\'a\\'];\\n            }\\n            check[temp] = true;\\n            \\n        }\\n        \\n        return check.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2438913,
                "title": "daily-leetcode-challenge",
                "content": "class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> v{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\nunordered_set<string> s;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string temp=\"\";\\n            for(int j=0;j<words[i].size();j++)\\n            {\\n                int e=words[i][j]-\\'a\\';\\n                temp+=v[e];\\n            }s.insert(temp);\\n        }return s.size();\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> v{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 2438600,
                "title": "js-3-line-faster-than-71",
                "content": "\\n```\\n\\nconst MORSE_CODE = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n\\nconst DICTIONARY = \\'abcdefghijklmnopqrstuvwxyz\\'.split(\\'\\').reduce((a, e,i)=> ({...a, [e]:MORSE_CODE[i]}) , {})\\n\\nconst uniqueMorseRepresentations = (words) => [...new Set(words.map(w=> w.split(\\'\\').map(e=> DICTIONARY[e]).join(\\'\\')))].length\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nconst MORSE_CODE = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n\\nconst DICTIONARY = \\'abcdefghijklmnopqrstuvwxyz\\'.split(\\'\\').reduce((a, e,i)=> ({...a, [e]:MORSE_CODE[i]}) , {})\\n\\nconst uniqueMorseRepresentations = (words) => [...new Set(words.map(w=> w.split(\\'\\').map(e=> DICTIONARY[e]).join(\\'\\')))].length\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2438355,
                "title": "c-beginner-friendly-map",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        int n=words.size();\\n        vector<string> alpha={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        map<string,int> m;\\n        for(auto it : words){\\n            string ans;\\n            for(int i=0;i<it.size();++i){\\n                  ans+=alpha[it[i]-\\'a\\'];\\n            }\\n            m[ans]++;\\n            \\n        }\\n        return m.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        int n=words.size();\\n        vector<string> alpha={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        map<string,int> m;\\n        for(auto it : words){\\n            string ans;\\n            for(int i=0;i<it.size();++i){\\n                  ans+=alpha[it[i]-\\'a\\'];\\n            }\\n            m[ans]++;\\n            \\n        }\\n        return m.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2438240,
                "title": "beginner-friendly-java-javascript-python-solutions",
                "content": "**Time Complexity : O(n*m)**\\n**Java**\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String morse[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet();\\n        for(String word: words){\\n            StringBuilder str = new StringBuilder();\\n            for(char c: word.toCharArray()){\\n                str.append(morse[c -\\'a\\']);\\n            }\\n            set.add(str.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```\\n**JavaScript**\\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    let morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n    let myset = new Set()\\n    for(let word of words){\\n        let str = \"\"\\n        for(let i=0; i<word.length; i++){\\n            str += morse[word.charCodeAt(i) - 97]\\n        }\\n        myset.add(str.toString())\\n    }\\n    return myset.size\\n};\\n```\\n**Python**\\n```\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        myset = set()\\n        for word in words:\\n            s = \"\"\\n            for c in word:\\n                s += morse[ord(c) - 97]\\n            myset.add(s)\\n        return len(myset)\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String morse[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet();\\n        for(String word: words){\\n            StringBuilder str = new StringBuilder();\\n            for(char c: word.toCharArray()){\\n                str.append(morse[c -\\'a\\']);\\n            }\\n            set.add(str.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```\n```\\nvar uniqueMorseRepresentations = function(words) {\\n    let morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n    let myset = new Set()\\n    for(let word of words){\\n        let str = \"\"\\n        for(let i=0; i<word.length; i++){\\n            str += morse[word.charCodeAt(i) - 97]\\n        }\\n        myset.add(str.toString())\\n    }\\n    return myset.size\\n};\\n```\n```\\nclass Solution(object):\\n    def uniqueMorseRepresentations(self, words):\\n        morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        myset = set()\\n        for word in words:\\n            s = \"\"\\n            for c in word:\\n                s += morse[ord(c) - 97]\\n            myset.add(s)\\n        return len(myset)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437872,
                "title": "simple-hashset-solution",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] a={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        HashSet<String>hs=new HashSet<String>();int c=0;\\n        for(String w: words){\\n            String s=\"\";\\n            for(int i=0;i<w.length();i++)\\n                s+=a[(int)w.charAt(i)-\\'a\\'];\\n    \\n            hs.add(s);\\n        }\\n        return hs.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] a={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        HashSet<String>hs=new HashSet<String>();int c=0;\\n        for(String w: words){\\n            String s=\"\";\\n            for(int i=0;i<w.length();i++)\\n                s+=a[(int)w.charAt(i)-\\'a\\'];\\n    \\n            hs.add(s);\\n        }\\n        return hs.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437743,
                "title": "easy-and-concised-solution-c-using-unordered-set",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> x = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> s;\\n        \\n        for(auto c : words){\\n            string tempAns = \"\";\\n            for(auto t : c){\\n                string temp = x[t - \\'a\\'];\\n                tempAns += temp;\\n            }\\n            s.insert(tempAns);\\n            \\n        }\\n        return (s.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> x = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> s;\\n        \\n        for(auto c : words){\\n            string tempAns = \"\";\\n            for(auto t : c){\\n                string temp = x[t - \\'a\\'];\\n                tempAns += temp;\\n            }\\n            s.insert(tempAns);\\n            \\n        }\\n        return (s.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437541,
                "title": "unique-morse-code-words-simple-c-solution",
                "content": "```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        set<string> ans;\\n\\n        for(int i = 0; i < words.size();i++){\\n            string s = words[i]; \\n            string temp = \"\"; \\n\\n            for(int j= 0 ;j < s.length(); j++){\\n                int e = s[j] - \\'a\\'; \\n                temp += morse[e];\\n            }\\n            ans.insert(temp); \\n        }\\n        return ans.size(); \\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        set<string> ans;\\n\\n        for(int i = 0; i < words.size();i++){\\n            string s = words[i]; \\n            string temp = \"\"; \\n\\n            for(int j= 0 ;j < s.length(); j++){\\n                int e = s[j] - \\'a\\'; \\n                temp += morse[e];\\n            }\\n            ans.insert(temp); \\n        }\\n        return ans.size(); \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2437361,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> v = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\\n                         \"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\\n                         \"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\\n                         \"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> set;\\n        \\n        for(auto &w :words)\\n        {\\n            string s= \"\";\\n            for(auto &ch:w)\\n            {\\n                s+=v[ch - \\'a\\']; \\n            }\\n            set.insert(s);\\n        }\\n        return set.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> v = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\\n                         \"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\\n                         \"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\\n                         \"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> set;\\n        \\n        for(auto &w :words)\\n        {\\n            string s= \"\";\\n            for(auto &ch:w)\\n            {\\n                s+=v[ch - \\'a\\']; \\n            }\\n            set.insert(s);\\n        }\\n        return set.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2437311,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] w) {\\n        String a[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> nm=new HashSet<>();\\n        for(String k:w)\\n        {\\n            StringBuilder kk=new StringBuilder();\\n            for(int i=0;i<k.length();i++)\\n            {\\n                kk.append(a[k.charAt(i)-\\'a\\']);\\n            }\\n            nm.add(kk.toString());\\n        }\\n        return nm.size(); \\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public int uniqueMorseRepresentations(String[] w) {\\n        String a[]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 2437170,
                "title": "c-easy-explanation-map",
                "content": "**Approache : for every word find Morse code and store in the map**\\n\\n**Finnaly return the size of map which is gives unique no of Morse Code**\\n\\n\\n\\n\\n\\n     int uniqueMorseRepresentations(vector<string>& words) {\\n        \\n    // all the Morse Code   \\n    string code[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    \\n        //Declaration map\\n    unordered_map<string,int>mp;\\n    \\n        //loop for no of word\\n     for(int i=0;i<words.size();i++){\\n            string s=\"\";\\n         //for every word calculated Morese code\\n            for(int j=0;j<words[i].size();j++){\\n                s+=code[words[i][j]-\\'a\\'];\\n            }\\n         //store in the map...no duplicate can\\'t add due to 1 assign\\n            mp[s]=1;\\n        }\\n    \\n        //return the size of map\\n    return mp.size();\\n        \\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "**Approache : for every word find Morse code and store in the map**\\n\\n**Finnaly return the size of map which is gives unique no of Morse Code**\\n\\n\\n\\n\\n\\n     int uniqueMorseRepresentations(vector<string>& words) {\\n        \\n    // all the Morse Code   \\n    string code[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    \\n        //Declaration map\\n    unordered_map<string,int>mp;\\n    \\n        //loop for no of word\\n     for(int i=0;i<words.size();i++){\\n            string s=\"\";\\n         //for every word calculated Morese code\\n            for(int j=0;j<words[i].size();j++){\\n                s+=code[words[i][j]-\\'a\\'];\\n            }\\n         //store in the map...no duplicate can\\'t add due to 1 assign\\n            mp[s]=1;\\n        }\\n    \\n        //return the size of map\\n    return mp.size();\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2437112,
                "title": "easy-java-solution-explained-beginner-friendly-best-method-comments",
                "content": "**If you really found my solution helpful please upvote it, as it motivates me to post such kind of codes and help the coding community, if you have some queries or some improvements please feel free to comment and share your views.**\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        //Storing the code in the Array of Strings\\n        String[] code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\t\\n\\t\\t//Declaring an HashMap to map each key to its respective value such as {\\'a\\' = \".-\",\\'b\\' = \"-...\",....etc}\\n\\t\\tHashMap<Character,String> map = new HashMap<Character,String>();\\n\\t\\t//initializing a Character Count with value \\'a\\'\\n\\t\\tchar ch = \\'a\\';\\n\\t\\t\\n        for(int i = 0 ; i < code.length ; i ++){\\n\\t\\t\\t//at each iteration we are incrementing the character count by one \\n\\t\\t\\t//i.e from \\'a\\' to \\'b\\' and \\'b\\' to \\'c\\' and so on \\n\\t\\t\\t//and respectively storing the key value pair in HashMap\\n\\t\\t    map.put(ch++,code[i]);\\n\\t\\t}\\n        int n = words.length;\\n\\t\\t//Declaring a HashSet to store Unique set of Concatenated morse code\\n        HashSet<String> hs = new HashSet<String>();\\n\\t\\t\\n\\t\\t//iterating over the array words\\n        for(int i = 0; i < n; i++){\\n\\t\\t\\t//storing each words at index location to string and performing the concatenation\\n            String str = words[i];\\n\\t\\t\\t//declaring an empty string to store the concatenated code at each iteration of a letter of words\\n            String ans = \"\";\\n            for(int j = 0 ; j < str.length(); j++){\\n\\t\\t\\t\\t//concatenating the each letter corresponding code to ans to form proper morse code for the respective words\\n                ans = ans + map.get(str.charAt(j));\\n            }\\n\\t\\t\\t//Storing the generated String(ans) in HashSet to get only unique Strings\\n            hs.add(ans);\\n        }\\n\\t\\t//returning the length of HashSet to get the total no. of unique String obtain from the following words\\n        return hs.size();\\n    }\\n}\\n```\\n**Please Up Vote (if you liked the approach and solution)**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        //Storing the code in the Array of Strings\\n        String[] code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\t\\n\\t\\t//Declaring an HashMap to map each key to its respective value such as {\\'a\\' = \".-\",\\'b\\' = \"-...\",....etc}\\n\\t\\tHashMap<Character,String> map = new HashMap<Character,String>();\\n\\t\\t//initializing a Character Count with value \\'a\\'\\n\\t\\tchar ch = \\'a\\';\\n\\t\\t\\n        for(int i = 0 ; i < code.length ; i ++){\\n\\t\\t\\t//at each iteration we are incrementing the character count by one \\n\\t\\t\\t//i.e from \\'a\\' to \\'b\\' and \\'b\\' to \\'c\\' and so on \\n\\t\\t\\t//and respectively storing the key value pair in HashMap\\n\\t\\t    map.put(ch++,code[i]);\\n\\t\\t}\\n        int n = words.length;\\n\\t\\t//Declaring a HashSet to store Unique set of Concatenated morse code\\n        HashSet<String> hs = new HashSet<String>();\\n\\t\\t\\n\\t\\t//iterating over the array words\\n        for(int i = 0; i < n; i++){\\n\\t\\t\\t//storing each words at index location to string and performing the concatenation\\n            String str = words[i];\\n\\t\\t\\t//declaring an empty string to store the concatenated code at each iteration of a letter of words\\n            String ans = \"\";\\n            for(int j = 0 ; j < str.length(); j++){\\n\\t\\t\\t\\t//concatenating the each letter corresponding code to ans to form proper morse code for the respective words\\n                ans = ans + map.get(str.charAt(j));\\n            }\\n\\t\\t\\t//Storing the generated String(ans) in HashSet to get only unique Strings\\n            hs.add(ans);\\n        }\\n\\t\\t//returning the length of HashSet to get the total no. of unique String obtain from the following words\\n        return hs.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436871,
                "title": "q387-c-100-faster-hash-map-simple-for-loop",
                "content": "### C++ Solution \\nResult:\\n![image](https://assets.leetcode.com/users/images/7d78cf65-202e-4ecc-adee-6ee904ce539f_1660705116.1725438.png)\\n\\nMy Method: \\n```\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morses = { \\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \\n            \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \\n            \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\" \\n            };\\n        map<string, bool> m;\\n        for (int i = 0; i < words.size(); i++) {\\n            string morse = \"\";\\n            for (int j = 0; j < words[i].size(); j++) {\\n                morse += morses[words[i][j] - \\'a\\'];\\n            }\\n            m[morse] = true;\\n        }\\n        return m.size();\\n    }\\n```\\n\\n**The complexity of this solution:**\\n-\\tTime: O( N^2 ) ...  // depend on the size of words\\n-\\tSpace: O( N ) ... // depend on the size of words\\n\\n**If you loved this solution then please up vote to motivate me \\uD83D\\uDE0A**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morses = { \\n            \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \\n            \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \\n            \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\" \\n            };\\n        map<string, bool> m;\\n        for (int i = 0; i < words.size(); i++) {\\n            string morse = \"\";\\n            for (int j = 0; j < words[i].size(); j++) {\\n                morse += morses[words[i][j] - \\'a\\'];\\n            }\\n            m[morse] = true;\\n        }\\n        return m.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2436869,
                "title": "easy-solution-daily-leetcode-challenge-august-17-c-java",
                "content": "## if u find it helpful , please give it a upvote\\n\\n### Approach\\n1) creating a vector of codes.\\n2) convert a word to code by traversing each letter of a word and getting the code for the letter from vector \\n3) concatinating the code into a string \\n4) the string containing transformation of a word is inserted into a set\\n5) repeating for all words\\n6) set contains unique values , so will contain only unique tranformations\\n7) returning set size as the number of different transformations.\\n\\n### C++ solution\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> v = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> set;\\n        for(int i=0;i<words.size();i++){\\n            string temp = \"\";\\n            for(int j=0;j<words[i].size();j++){\\n                temp+=v[words[i][j]-\\'a\\'];\\n            }\\n            set.insert(temp);\\n            temp.clear();\\n        }\\n        return set.size();\\n    }\\n};\\n```\\n\\n### java code\\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n         String[] v = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        Set<String> set = new HashSet<>();\\n        for(String i:words){\\n            StringBuilder temp = new StringBuilder();\\n            int j=0;\\n            while(j<i.length()){\\n                temp.append(v[i.charAt(j)-\\'a\\']);\\n                j++;\\n            }\\n            set.add(temp.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> v = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> set;\\n        for(int i=0;i<words.size();i++){\\n            string temp = \"\";\\n            for(int j=0;j<words[i].size();j++){\\n                temp+=v[words[i][j]-\\'a\\'];\\n            }\\n            set.insert(temp);\\n            temp.clear();\\n        }\\n        return set.size();\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n         String[] v = new String[]{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        Set<String> set = new HashSet<>();\\n        for(String i:words){\\n            StringBuilder temp = new StringBuilder();\\n            int j=0;\\n            while(j<i.length()){\\n                temp.append(v[i.charAt(j)-\\'a\\']);\\n                j++;\\n            }\\n            set.add(temp.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436494,
                "title": "simple-c-solution-100-faster-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n    vector<string>morse= {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    unordered_set<string>ans;\\n    for(auto word : words) {\\n        string code = \"\";\\n        for(auto ch : word)\\n            code += morse[ch - \\'a\\'];\\n        ans.insert(code);\\n    }\\n    \\n    return ans.size();\\n}\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n    vector<string>morse= {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n    unordered_set<string>ans;\\n    for(auto word : words) {\\n        string code = \"\";\\n        for(auto ch : word)\\n            code += morse[ch - \\'a\\'];\\n        ans.insert(code);\\n    }\\n    \\n    return ans.size();\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2326190,
                "title": "a-ts-solution-hasmap-and-set",
                "content": "```\\nconst morse: { [key: string]: string } = {\\n  a: \\'.-\\',\\n  b: \\'-...\\',\\n  c: \\'-.-.\\',\\n  d: \\'-..\\',\\n  e: \\'.\\',\\n  f: \\'..-.\\',\\n  g: \\'--.\\',\\n  h: \\'....\\',\\n  i: \\'..\\',\\n  j: \\'.---\\',\\n  k: \\'-.-\\',\\n  l: \\'.-..\\',\\n  m: \\'--\\',\\n  n: \\'-.\\',\\n  o: \\'---\\',\\n  p: \\'.--.\\',\\n  q: \\'--.-\\',\\n  r: \\'.-.\\',\\n  s: \\'...\\',\\n  t: \\'-\\',\\n  u: \\'..-\\',\\n  v: \\'...-\\',\\n  w: \\'.--\\',\\n  x: \\'-..-\\',\\n  y: \\'-.--\\',\\n  z: \\'--..\\',\\n};\\n\\nfunction uniqueMorseRepresentations(words: string[]): number {\\n  const transformations: Set<string> = new Set();\\n  \\n  for (let i = 0; i < words.length; i++) {\\n    let transformation = \\'\\';\\n    \\n    for (let j = 0; j < words[i].length; j++) {\\n      transformation += morse[words[i][j]];\\n    }\\n    \\n    transformations.add(transformation);\\n  }\\n  \\n  return transformations.size;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Ordered Set"
                ],
                "code": "```\\nconst morse: { [key: string]: string } = {\\n  a: \\'.-\\',\\n  b: \\'-...\\',\\n  c: \\'-.-.\\',\\n  d: \\'-..\\',\\n  e: \\'.\\',\\n  f: \\'..-.\\',\\n  g: \\'--.\\',\\n  h: \\'....\\',\\n  i: \\'..\\',\\n  j: \\'.---\\',\\n  k: \\'-.-\\',\\n  l: \\'.-..\\',\\n  m: \\'--\\',\\n  n: \\'-.\\',\\n  o: \\'---\\',\\n  p: \\'.--.\\',\\n  q: \\'--.-\\',\\n  r: \\'.-.\\',\\n  s: \\'...\\',\\n  t: \\'-\\',\\n  u: \\'..-\\',\\n  v: \\'...-\\',\\n  w: \\'.--\\',\\n  x: \\'-..-\\',\\n  y: \\'-.--\\',\\n  z: \\'--..\\',\\n};\\n\\nfunction uniqueMorseRepresentations(words: string[]): number {\\n  const transformations: Set<string> = new Set();\\n  \\n  for (let i = 0; i < words.length; i++) {\\n    let transformation = \\'\\';\\n    \\n    for (let j = 0; j < words[i].length; j++) {\\n      transformation += morse[words[i][j]];\\n    }\\n    \\n    transformations.add(transformation);\\n  }\\n  \\n  return transformations.size;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2166577,
                "title": "python3-o-n-m-o-n",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n#         O(n*m) || O(n)\\n        hashMap = {\\'a\\': \\'.-\\', \\'b\\': \\'-...\\', \\'c\\': \\'-.-.\\', \\'d\\': \\'-..\\', \\'e\\': \\'.\\', \\'f\\': \\'..-.\\', \\'g\\': \\'--.\\', \\'h\\': \\'....\\', \\'i\\': \\'..\\', \\'j\\': \\'.---\\', \\'k\\': \\'-.-\\', \\'l\\': \\'.-..\\', \\'m\\': \\'--\\', \\'n\\': \\'-.\\', \\'o\\': \\'---\\', \\'p\\': \\'.--.\\', \\'q\\': \\'--.-\\', \\'r\\': \\'.-.\\', \\'s\\': \\'...\\', \\'t\\': \\'-\\', \\'u\\': \\'..-\\', \\'v\\': \\'...-\\', \\'w\\': \\'.--\\', \\'x\\': \\'-..-\\', \\'y\\': \\'-.--\\', \\'z\\': \\'--..\\'}\\n            \\n        seen = set()\\n        for word in words:\\n            newList = []\\n            for code in word:\\n                newList.append(hashMap[code])\\n            seen.add(\\'\\'.join(newList))\\n\\n        return len(seen)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n#         O(n*m) || O(n)\\n        hashMap = {\\'a\\': \\'.-\\', \\'b\\': \\'-...\\', \\'c\\': \\'-.-.\\', \\'d\\': \\'-..\\', \\'e\\': \\'.\\', \\'f\\': \\'..-.\\', \\'g\\': \\'--.\\', \\'h\\': \\'....\\', \\'i\\': \\'..\\', \\'j\\': \\'.---\\', \\'k\\': \\'-.-\\', \\'l\\': \\'.-..\\', \\'m\\': \\'--\\', \\'n\\': \\'-.\\', \\'o\\': \\'---\\', \\'p\\': \\'.--.\\', \\'q\\': \\'--.-\\', \\'r\\': \\'.-.\\', \\'s\\': \\'...\\', \\'t\\': \\'-\\', \\'u\\': \\'..-\\', \\'v\\': \\'...-\\', \\'w\\': \\'.--\\', \\'x\\': \\'-..-\\', \\'y\\': \\'-.--\\', \\'z\\': \\'--..\\'}\\n            \\n        seen = set()\\n        for word in words:\\n            newList = []\\n            for code in word:\\n                newList.append(hashMap[code])\\n            seen.add(\\'\\'.join(newList))\\n\\n        return len(seen)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2153713,
                "title": "unique-morse-code-words-using-maps-and-sets-easy",
                "content": "\\'\\'\\'\\n\\n      vector<string>v{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n       string str=\"abcdefghijklmnopqrstuvwxyz\";\\n        vector<char>arr;\\n        for(auto val:str){\\n            arr.push_back(val);\\n        }\\n        unordered_map<char,string>m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]=v[i];\\n        }\\n        set<string>s;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string str=\"\";\\n            for(int j=0;j<words[i].size();j++)\\n            {\\n                str=str+m[words[i][j]];\\n            }\\n            s.insert(str);\\n            \\n        }\\n        return s.size();\\n\\t\\t\\'\\'\\'",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "\\'\\'\\'\\n\\n      vector<string>v{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n       string str=\"abcdefghijklmnopqrstuvwxyz\";\\n        vector<char>arr;\\n        for(auto val:str){\\n            arr.push_back(val);\\n        }\\n        unordered_map<char,string>m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]=v[i];\\n        }\\n        set<string>s;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string str=\"\";\\n            for(int j=0;j<words[i].size();j++)\\n            {\\n                str=str+m[words[i][j]];\\n            }\\n            s.insert(str);\\n            \\n        }\\n        return s.size();\\n\\t\\t\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1994527,
                "title": "my-easy-to-understand-fast-3ms-java-code",
                "content": "```\\nclass Solution \\n{\\n    public int uniqueMorseRepresentations(String[] words) \\n    {\\n        String[] arr = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        HashSet<String> hs = new HashSet<>();\\n        \\n        for(String s:words)\\n        {\\n            String morse=\"\";\\n            for(int i=0;i<s.length();i++)\\n            {\\n                int c = s.charAt(i)-97;\\n                morse+=arr[c];\\n            }\\n            hs.add(morse);\\n        }\\n        return hs.size();\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution \\n{\\n    public int uniqueMorseRepresentations(String[] words) \\n    {\\n        String[] arr = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 1966436,
                "title": "fp-scala-solution",
                "content": "```\\nobject Solution {\\n    def uniqueMorseRepresentations(words: Array[String]): Int = {\\n    val mapMorse = (0 until 26).zip(Array(\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n      \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\")).toMap\\n    val arr = \"abcdefghijklmnopqrstuvwxyz\".zipWithIndex.toMap\\n    val result = words.foldLeft(List.empty[String]) { (list, e) =>\\n      val x = e.foldLeft(\"\") { (str, ch) =>\\n        str + mapMorse.get(arr.getOrElse(ch, -1)).mkString\\n      }\\n      list :+ x\\n    }\\n    result.toSet.size\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def uniqueMorseRepresentations(words: Array[String]): Int = {\\n    val mapMorse = (0 until 26).zip(Array(\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n      \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\")).toMap\\n    val arr = \"abcdefghijklmnopqrstuvwxyz\".zipWithIndex.toMap\\n    val result = words.foldLeft(List.empty[String]) { (list, e) =>\\n      val x = e.foldLeft(\"\") { (str, ch) =>\\n        str + mapMorse.get(arr.getOrElse(ch, -1)).mkString\\n      }\\n      list :+ x\\n    }\\n    result.toSet.size\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1869086,
                "title": "faster-than-100-easy-to-understand-maps-beginer-friendly",
                "content": "PLEASE UPVOTE IF YOU LIKE THE SOLUTION\\nASK IN COMMENTS IF FACING ANY DOUBTS\\nHAPPY LEARNING ;)\\n\\n```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n        string p[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        int x=words.size();\\n        map<string,int > mp;\\n        for(int i=0;i<x;i++)\\n        {\\n            string s;\\n            int y=words[i].length();\\n            for(int j=0;j<y;j++)\\n                s+=p[words[i][j]-\\'a\\'];\\n           \\n            mp[s]++;\\n        }return mp.size();\\n        return 0;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nint uniqueMorseRepresentations(vector<string>& words) {\\n        string p[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        int x=words.size();\\n        map<string,int > mp;\\n        for(int i=0;i<x;i++)\\n        {\\n            string s;\\n            int y=words[i].length();\\n            for(int j=0;j<y;j++)\\n                s+=p[words[i][j]-\\'a\\'];\\n           \\n            mp[s]++;\\n        }return mp.size();\\n        return 0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1692119,
                "title": "java-solution-using-arraylist-and-for-loop",
                "content": "class Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n       String[] mapOfMorse = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\\n        ArrayList<String> list = new ArrayList<>();\\n        for (int i=0; i< words.length; i++){\\n            String newStr = \"\";\\n            for (int j=0; j<words[i].length(); j++){\\n                int ch = words[i].charAt(j) - \\'a\\';\\n                newStr += mapOfMorse[ch];\\n            }\\n            list.add(newStr);\\n        }\\n        Collections.sort(list);\\n        System.out.println(list);\\n        int transformation = 1;\\n        for (int z=0; z< list.size()-1; z++){\\n            if (!list.get(z).equals(list.get(z+1))){\\n                transformation++;\\n            }\\n        }\\n        return transformation;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n       String[] mapOfMorse = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 1646046,
                "title": "easiest-js-solution",
                "content": "var uniqueMorseRepresentations = function(words) {\\n    let final = new Set();\\n    let arr = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    let str;\\n    for(let val of words){\\n        str = \"\";\\n        for(let i=0; i<val.length; i++){\\n            let num = val.charCodeAt(i) - 97;\\n            str += arr[num];\\n        }\\n        final.add(str);\\n    }\\n    return final.size;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var uniqueMorseRepresentations = function(words) {\\n    let final = new Set();\\n    let arr = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    let str;\\n    for(let val of words){\\n        str = \"\";\\n        for(let i=0; i<val.length; i++){\\n            let num = val.charCodeAt(i) - 97;\\n            str += arr[num];\\n        }\\n        final.add(str);\\n    }\\n    return final.size;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1640131,
                "title": "solution-with-complete-explanation-c",
                "content": "**What Question is asking about:-**\\n** **\\nOk So lets see what the question is all about.\\n\\n<img src=\"https://assets.leetcode.com/users/images/40e79095-c826-4ac0-9880-3e04f77feb87_1640111990.1353734.png\" width=\"500px\">\\n\\nSo we have to find number of distinct set we can all make.\\nNote:- The morse code is made in such a way that on multiple combination of letter it shows the same output.(see below example!).\\n\\n**Lets see this from the example:-**\\n** **\\n<img src=\"https://assets.leetcode.com/users/images/3e11c816-f357-4dc1-95ef-a8da3634b586_1640112391.845648.png\" width=\"500px\">\\n\\nAs you can see we get two unique combination of morse code.\\n\\n** **\\n**Solution:-**\\n\\nWe will use ***set*** because we need distinct values so taking any other datatype will only add aditional steps to count all distinct elements.\\n\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n\\t\\n    vector<string> s={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> strSet;\\n \\n        for(int i=0;i<words.size();i++){\\n            string str=\"\";\\n            for(int j=0;j<words[i].size();j++){\\n                str=str+s[words[i][j]-\\'a\\'];\\n            }\\n            strSet.insert(str);\\n        }\\n        return strSet.size();\\n    }\\n\\t\\n};\\n```\\n\\n<br>\\n\\n**If you liked the answer, leave an upvote!\\nThank You So Much :)**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n\\t\\n    vector<string> s={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        set<string> strSet;\\n \\n        for(int i=0;i<words.size();i++){\\n            string str=\"\";\\n            for(int j=0;j<words[i].size();j++){\\n                str=str+s[words[i][j]-\\'a\\'];\\n            }\\n            strSet.insert(str);\\n        }\\n        return strSet.size();\\n    }\\n\\t\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1615290,
                "title": "0-ms-faster-than-100-00-simple-easy-to-understand-with-explaination",
                "content": "Runtime: 0 ms, faster than 100.00% of C online submissions for Unique Morse Code Words.\\nMemory Usage: 5.7 MB, less than 79.41% of C online submissions for Unique Morse Code Words.\\n\\nsubmission link:\\nhttps://leetcode.com/submissions/detail/597923184/\\n\\n```\\nint uniqueMorseRepresentations(char ** words, int wordsSize)\\n{\\n    // array containing morse code corresponding to indices 0:a, 1:b, 2:c ...\\n    char *morse[26] = {\\n        \".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"\\n    };\\n\\n    // array to store morse code for each given words\\n    // max. length of an english character in morse code = 4\\n    // now, words[i].length <= 12\\n    // hence 12*4 = 48 + 1(\\'\\\\0\\') = 49(size of morse code of max. words[i].length)\\n    char store[wordsSize][49];\\n    \\n    // converting english characters to morse by accessing the morse array\\n    // english small letters start with ASCII 97, hence it is subtracted\\n    for(int i=0; i<wordsSize; i++)\\n    {\\n        strcpy(store[i], \"\");\\n        for(int j=0; words[i][j]!=\\'\\\\0\\'; j++)\\n            strcat(store[i], morse[words[i][j]-97]);\\n    }\\n     \\n    // counting the unique elements in the store array\\n    int ans=1, j=0;\\n    for(int i=1; i<wordsSize; i++)\\n    {\\n        for(j=0; j<i; j++)\\n            if(!strcmp(store[i], store[j]))\\n                break;\\n        if(i==j)\\n            ans++;\\n    }\\n\\n    return ans;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint uniqueMorseRepresentations(char ** words, int wordsSize)\\n{\\n    // array containing morse code corresponding to indices 0:a, 1:b, 2:c ...\\n    char *morse[26] = {\\n        \".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"\\n    };\\n\\n    // array to store morse code for each given words\\n    // max. length of an english character in morse code = 4\\n    // now, words[i].length <= 12\\n    // hence 12*4 = 48 + 1(\\'\\\\0\\') = 49(size of morse code of max. words[i].length)\\n    char store[wordsSize][49];\\n    \\n    // converting english characters to morse by accessing the morse array\\n    // english small letters start with ASCII 97, hence it is subtracted\\n    for(int i=0; i<wordsSize; i++)\\n    {\\n        strcpy(store[i], \"\");\\n        for(int j=0; words[i][j]!=\\'\\\\0\\'; j++)\\n            strcat(store[i], morse[words[i][j]-97]);\\n    }\\n     \\n    // counting the unique elements in the store array\\n    int ans=1, j=0;\\n    for(int i=1; i<wordsSize; i++)\\n    {\\n        for(j=0; j<i; j++)\\n            if(!strcmp(store[i], store[j]))\\n                break;\\n        if(i==j)\\n            ans++;\\n    }\\n\\n    return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1492492,
                "title": "2-line-solution-in-python-using-set-and-list",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse, a = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"], ord(\\'a\\')\\n        return len(set([\"\".join(morse[ord(c) - a] for c in word) for word in words]))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse, a = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"], ord(\\'a\\')\\n        return len(set([\"\".join(morse[ord(c) - a] for c in word) for word in words]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1459311,
                "title": "java-solution-runtime-1-ms-faster-than-99-93",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String []strings = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\\n                \"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        HashSet<String> hashSet = new HashSet<>();\\n        for (String st : words){\\n            StringBuilder sb = new StringBuilder();\\n            for (int i=0;i<st.length();i++){\\n                int index = st.charAt(i);\\n                index = index %97;\\n                sb.append(strings[index]);\\n            }\\n            hashSet.add(sb.toString());\\n        }\\n        return hashSet.size();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String []strings = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\\n                \"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        HashSet<String> hashSet = new HashSet<>();\\n        for (String st : words){\\n            StringBuilder sb = new StringBuilder();\\n            for (int i=0;i<st.length();i++){\\n                int index = st.charAt(i);\\n                index = index %97;\\n                sb.append(strings[index]);\\n            }\\n            hashSet.add(sb.toString());\\n        }\\n        return hashSet.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1438934,
                "title": "straightforward-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string morse[26] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        \\n        set<string> mp;\\n        for(int i = 0; i<words.size(); i++)\\n        {\\n            string word = \"\";\\n            for(char ch : words[i])\\n            {\\n                int idx = ch - \\'a\\';\\n                word += morse[idx];\\n            }\\n            mp.insert(word);\\n        }\\n        return mp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string morse[26] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\t\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        \\n        set<string> mp;\\n        for(int i = 0; i<words.size(); i++)\\n        {\\n            string word = \"\";\\n            for(char ch : words[i])\\n            {\\n                int idx = ch - \\'a\\';\\n                word += morse[idx];\\n            }\\n            mp.insert(word);\\n        }\\n        return mp.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1411931,
                "title": "easy-java-solution-no-hashset",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morseCodeLetterTranslations = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        List<String> convertedUniqueMorseCodes = new ArrayList<>();\\n        for(String indivWord : words){\\n            StringBuilder morseCodeWord = new StringBuilder(); //store morse code here\\n            for(char indivChar : indivWord.toCharArray()){\\n                String morseCodeChar = morseCodeLetterTranslations[indivChar - 97];\\n                morseCodeWord.append(morseCodeChar);\\n            }\\n            if(!convertedUniqueMorseCodes.contains(morseCodeWord.toString())){\\n                convertedUniqueMorseCodes.add(morseCodeWord.toString());\\n            }\\n        }\\n    \\n        return convertedUniqueMorseCodes.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] morseCodeLetterTranslations = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        List<String> convertedUniqueMorseCodes = new ArrayList<>();\\n        for(String indivWord : words){\\n            StringBuilder morseCodeWord = new StringBuilder(); //store morse code here\\n            for(char indivChar : indivWord.toCharArray()){\\n                String morseCodeChar = morseCodeLetterTranslations[indivChar - 97];\\n                morseCodeWord.append(morseCodeChar);\\n            }\\n            if(!convertedUniqueMorseCodes.contains(morseCodeWord.toString())){\\n                convertedUniqueMorseCodes.add(morseCodeWord.toString());\\n            }\\n        }\\n    \\n        return convertedUniqueMorseCodes.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1397714,
                "title": "simple-python",
                "content": "```\\ncode = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\", \"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\nalp = \"abcdefghijklmnopqrstuvwxyz\"\\n        \\n        ls = []\\n        count = 0\\n        string = \"\"\\n        for i in words:\\n            for j in i:\\n                index = alp.index(j)\\n                string += code[index]\\n            ls.append(string)\\n            string = \"\"\\n            \\n        \\n        res = set(ls)\\n        for i in res:\\n            count += 1\\n            \\n        return count\\n\\t\\t\\n```",
                "solutionTags": [],
                "code": "```\\ncode = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\", \"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\nalp = \"abcdefghijklmnopqrstuvwxyz\"\\n        \\n        ls = []\\n        count = 0\\n        string = \"\"\\n        for i in words:\\n            for j in i:\\n                index = alp.index(j)\\n                string += code[index]\\n            ls.append(string)\\n            string = \"\"\\n            \\n        \\n        res = set(ls)\\n        for i in res:\\n            count += 1\\n            \\n        return count\\n\\t\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1270782,
                "title": "golang-solution-faster-than-100",
                "content": "```\\nfunc uniqueMorseRepresentations(words []string) int {\\n\\tletters := []string{\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n\\t\\t\".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"}\\n\\tm := make(map[string]int)\\n\\n\\tfor _, word := range words {\\n\\t\\ts := \"\"\\n\\t\\tfor _, i := range word {\\n\\t\\t\\ts += letters[i - \\'a\\']\\n\\t\\t}\\n\\t\\tm[s]++\\n\\t}\\n\\treturn len(m)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc uniqueMorseRepresentations(words []string) int {\\n\\tletters := []string{\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\",\\n\\t\\t\".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"}\\n\\tm := make(map[string]int)\\n\\n\\tfor _, word := range words {\\n\\t\\ts := \"\"\\n\\t\\tfor _, i := range word {\\n\\t\\t\\ts += letters[i - \\'a\\']\\n\\t\\t}\\n\\t\\tm[s]++\\n\\t}\\n\\treturn len(m)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 991040,
                "title": "o-n-time-o-n-space-easy-solution-using-hashmap",
                "content": "```\\npublic int uniqueMorseRepresentations(String[] words) \\n    {\\n        String[] morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        int count = 0;\\n        HashMap<String,Integer> hash = new HashMap<String,Integer>();\\n        for(String word : words){\\n            char[] chars = word.toCharArray();\\n            String rep = \"\";\\n            for(char c : chars)\\n            {\\n                rep+= morse[c - 97];\\n                \\n            }\\n            if(!hash.containsKey(rep)){\\n                count++;\\n                hash.put(rep,1);\\n            }\\n        }\\n        \\n        return count;\\n    }\\n```\\n\\nthought i\\'d share my solution. If anyone has any improvements please send them my way!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int uniqueMorseRepresentations(String[] words) \\n    {\\n        String[] morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        int count = 0;\\n        HashMap<String,Integer> hash = new HashMap<String,Integer>();\\n        for(String word : words){\\n            char[] chars = word.toCharArray();\\n            String rep = \"\";\\n            for(char c : chars)\\n            {\\n                rep+= morse[c - 97];\\n                \\n            }\\n            if(!hash.containsKey(rep)){\\n                count++;\\n                hash.put(rep,1);\\n            }\\n        }\\n        \\n        return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 974860,
                "title": "c-and-python-solution",
                "content": "**C++**\\n```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse_code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        unordered_set<string> unique_transformations;\\n        \\n        for (auto word: words)\\n        {\\n            string curr_transformation = \"\";\\n            for (auto letter: word)\\n            {\\n                curr_transformation += morse_code[letter - \\'a\\'];\\n\\n            }\\n            unique_transformations.insert(curr_transformation);\\n\\n        }\\n            \\n        return unique_transformations.size();\\n    }\\n};\\n```\\n\\n**Python**\\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse_code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        unique_transformations = set()\\n        \\n        for word in words:\\n            curr_transformation = \"\"\\n            for letter in word:\\n                curr_transformation += morse_code[ord(letter) - ord(\\'a\\')]\\n            unique_transformations.add(curr_transformation)\\n\\n        return len(unique_transformations)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> morse_code = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        unordered_set<string> unique_transformations;\\n        \\n        for (auto word: words)\\n        {\\n            string curr_transformation = \"\";\\n            for (auto letter: word)\\n            {\\n                curr_transformation += morse_code[letter - \\'a\\'];\\n\\n            }\\n            unique_transformations.insert(curr_transformation);\\n\\n        }\\n            \\n        return unique_transformations.size();\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse_code = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        unique_transformations = set()\\n        \\n        for word in words:\\n            curr_transformation = \"\"\\n            for letter in word:\\n                curr_transformation += morse_code[ord(letter) - ord(\\'a\\')]\\n            unique_transformations.add(curr_transformation)\\n\\n        return len(unique_transformations)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 945604,
                "title": "simple-python-solution",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        myS=set()\\n        for word in words:\\n            res=\"\"\\n            for c in word:\\n                char=ord(c)\\n                res+=morse[char%97]\\n            myS.add(res)\\n            \\n            \\n        return len(myS)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        morse=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        \\n        myS=set()\\n        for word in words:\\n            res=\"\"\\n            for c in word:\\n                char=ord(c)\\n                res+=morse[char%97]\\n            myS.add(res)\\n            \\n            \\n        return len(myS)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 944891,
                "title": "c-99-100-memory-9-liner-crispy-af",
                "content": "```\\nclass Solution {\\nprivate:\\n    vector<string> morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        set<string> res;\\n        for (auto word : words) {\\n            string code;\\n            for (auto ch : word) {\\n                code += morse[ch - \\'a\\'];\\n            }\\n            res.insert(code);\\n        }\\n        return res.size();\\n    }\\n};\\n```\\n\\nExplanation -\\n\\n1. Find encoded string and insert in set\\n2. Return set size\\n3. ???\\n4. Profit! \\uD83E\\uDD19\\n\\nAs always,\\n\\uD83E\\uDD19 Stay crispy guys \\uD83E\\uDD19",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\nprivate:\\n    vector<string> morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        set<string> res;\\n        for (auto word : words) {\\n            string code;\\n            for (auto ch : word) {\\n                code += morse[ch - \\'a\\'];\\n            }\\n            res.insert(code);\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 828074,
                "title": "java-solution-100-speed-98-memory",
                "content": "Simply create the morsecode and add it to a hashset, which removes any duplicates. Note that we subtract \\'a\\' in order to get the index. To see this, consider \\'a\\' itself. \\'a\\' = 97, or some value in either ASCII, Unicode. \\'a\\' - \\'a\\' will always get us 0. \\'b\\' will be 1 above a, at 98-97 and so on. This will get us 1. Our alphabet is arranged so the 0th item is \\'a\\', 1st item is b, and so on. Hence, we subtract to get the index. \\n```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] alphabet = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        HashSet<String> set = new HashSet<>();\\n        for(String word : words){\\n            StringBuilder build = new StringBuilder();\\n            for(int c : word.toCharArray()){\\n                c = c-\\'a\\';\\n                build.append(alphabet[c]);\\n            }\\n            set.add(build.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String[] alphabet = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        HashSet<String> set = new HashSet<>();\\n        for(String word : words){\\n            StringBuilder build = new StringBuilder();\\n            for(int c : word.toCharArray()){\\n                c = c-\\'a\\';\\n                build.append(alphabet[c]);\\n            }\\n            set.add(build.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 696527,
                "title": "java-solution-clean-code",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String dict[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                         \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\\n                         \".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet<>();\\n        for(int i=0;i<words.length;i++){\\n            StringBuilder sb = new StringBuilder(\"\");\\n            char[] str = words[i].toCharArray();\\n            for(char ch : str) sb.append(dict[ch-97]);\\n            set.add(sb.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        String dict[] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\\n                         \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\\n                         \".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        Set<String> set = new HashSet<>();\\n        for(int i=0;i<words.length;i++){\\n            StringBuilder sb = new StringBuilder(\"\");\\n            char[] str = words[i].toCharArray();\\n            for(char ch : str) sb.append(dict[ch-97]);\\n            set.add(sb.toString());\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 652411,
                "title": "javascript-concat-fcn-to-build-strings-store-in-set",
                "content": "Note: In JavaScript, primitive values are immutable so we must use trans = trans.concat to make a copy of the variable and change it.\\n\\n```\\nlet uniqueMorseRepresentations = (words) => {\\n    const ca = \\'a\\'.charCodeAt(0);\\n    let morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    let record = new Set();\\n    for (let i in words){\\n        let trans = \"\";\\n        for (let c of words[i])\\n            trans = trans.concat(morse[c.charCodeAt(0)-ca]);\\n        record.add(trans);\\n    }\\n    return record.size;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nlet uniqueMorseRepresentations = (words) => {\\n    const ca = \\'a\\'.charCodeAt(0);\\n    let morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\\n    let record = new Set();\\n    for (let i in words){\\n        let trans = \"\";\\n        for (let c of words[i])\\n            trans = trans.concat(morse[c.charCodeAt(0)-ca]);\\n        record.add(trans);\\n    }\\n    return record.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 549576,
                "title": "object-fromentries-not-working",
                "content": "How come this doesn\\'t work on LeetCode?\\n```\\nRuntime Error\\nLine 9 in solution.js\\n    const dict = Object.freeze(Object.fromEntries([\\n                                      ^\\nTypeError: Object.fromEntries is not a function\\n    Line 9: Char 39 in solution.js \\n```",
                "solutionTags": [],
                "code": "```\\nRuntime Error\\nLine 9 in solution.js\\n    const dict = Object.freeze(Object.fromEntries([\\n                                      ^\\nTypeError: Object.fromEntries is not a function\\n    Line 9: Char 39 in solution.js \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 545198,
                "title": "javascript-easy-readable-95-34",
                "content": "```\\nvar getMorseCodeByStr = str => {\\n  const morseMap = {\\n    a: \\'.-\\',\\n    b: \\'-...\\',\\n    c: \\'-.-.\\',\\n    d: \\'-..\\',\\n    e: \\'.\\',\\n    f: \\'..-.\\',\\n    g: \\'--.\\',\\n    h: \\'....\\',\\n    i: \\'..\\',\\n    j: \\'.---\\',\\n    k: \\'-.-\\',\\n    l: \\'.-..\\',\\n    m: \\'--\\',\\n    n: \\'-.\\',\\n    o: \\'---\\',\\n    p: \\'.--.\\',\\n    q: \\'--.-\\',\\n    r: \\'.-.\\',\\n    s: \\'...\\',\\n    t: \\'-\\',\\n    u: \\'..-\\',\\n    v: \\'...-\\',\\n    w: \\'.--\\',\\n    x: \\'-..-\\',\\n    y: \\'-.--\\',\\n    z: \\'--..\\',\\n  };\\n  let result = \\'\\';\\n  \\n  for (let i = 0; i < str.length; i += 1) {\\n    result += morseMap[str[i]];\\n  }\\n  \\n  return result;\\n};\\n\\nvar uniqueMorseRepresentations = function(words) {\\n  const set = new Set();\\n  \\n  for (let i = 0; i < words.length; i += 1) {\\n    set.add(getMorseCodeByStr(words[i]));\\n  }\\n  \\n  return set.size;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar getMorseCodeByStr = str => {\\n  const morseMap = {\\n    a: \\'.-\\',\\n    b: \\'-...\\',\\n    c: \\'-.-.\\',\\n    d: \\'-..\\',\\n    e: \\'.\\',\\n    f: \\'..-.\\',\\n    g: \\'--.\\',\\n    h: \\'....\\',\\n    i: \\'..\\',\\n    j: \\'.---\\',\\n    k: \\'-.-\\',\\n    l: \\'.-..\\',\\n    m: \\'--\\',\\n    n: \\'-.\\',\\n    o: \\'---\\',\\n    p: \\'.--.\\',\\n    q: \\'--.-\\',\\n    r: \\'.-.\\',\\n    s: \\'...\\',\\n    t: \\'-\\',\\n    u: \\'..-\\',\\n    v: \\'...-\\',\\n    w: \\'.--\\',\\n    x: \\'-..-\\',\\n    y: \\'-.--\\',\\n    z: \\'--..\\',\\n  };\\n  let result = \\'\\';\\n  \\n  for (let i = 0; i < str.length; i += 1) {\\n    result += morseMap[str[i]];\\n  }\\n  \\n  return result;\\n};\\n\\nvar uniqueMorseRepresentations = function(words) {\\n  const set = new Set();\\n  \\n  for (let i = 0; i < words.length; i += 1) {\\n    set.add(getMorseCodeByStr(words[i]));\\n  }\\n  \\n  return set.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 536814,
                "title": "python-3-set-map-solution-with-explanation-beats-98-61",
                "content": "```\\n## set + map--find all cases\\uFF0Cthen use len(set()) to get number of different cases\\n## Time complexity = O(n)\\uFF0CSpace complexity = O(1)        \\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        moorse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        trans = lambda x: moorse[ord(x) - ord(\\'a\\')]\\n        map_word = lambda word: \\'\\'.join([trans(x) for x in word])\\n        res = map(map_word, words)\\n        return len(set(res))\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n## set + map--find all cases\\uFF0Cthen use len(set()) to get number of different cases\\n## Time complexity = O(n)\\uFF0CSpace complexity = O(1)        \\nclass Solution:\\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\\n        moorse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        trans = lambda x: moorse[ord(x) - ord(\\'a\\')]\\n        map_word = lambda word: \\'\\'.join([trans(x) for x in word])\\n        res = map(map_word, words)\\n        return len(set(res))\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 461805,
                "title": "rust-0ms-functional-solution",
                "content": "```rust\\npub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n\\tconst TABLE: [&str; 26] = [\\n\\t\\t\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\",\\n\\t\\t\"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\",\\n\\t];\\n\\twords\\n\\t\\t.iter()\\n\\t\\t.map(|w| w.chars().map(|c| TABLE[c as usize - \\'a\\' as usize]).collect::<String>())\\n\\t\\t.collect::<std::collections::HashSet<_>>()\\n\\t\\t.len() as i32\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\npub fn unique_morse_representations(words: Vec<String>) -> i32 {\\n\\tconst TABLE: [&str; 26] = [\\n\\t\\t\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\",\\n\\t\\t\"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\",\\n\\t];\\n\\twords\\n\\t\\t.iter()\\n\\t\\t.map(|w| w.chars().map(|c| TABLE[c as usize - \\'a\\' as usize]).collect::<String>())\\n\\t\\t.collect::<std::collections::HashSet<_>>()\\n\\t\\t.len() as i32\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 361389,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Set<String> set = new HashSet<String>();\\n\\t\\tString[] encodes = { \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\",\\n\\t\\t\\t\\t\"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\" };\\n\\t\\tfor (String item : words) {\\n\\t\\t\\tString temp = \"\";\\n\\t\\t\\tfor (int i = 0; i < item.length(); i++) {\\n\\t\\t\\t\\ttemp += encodes[item.charAt(i) - \\'a\\'];\\n\\t\\t\\t}\\n\\t\\t\\tset.add(temp);\\n\\t\\t}\\n\\t\\treturn set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Set<String> set = new HashSet<String>();\\n\\t\\tString[] encodes = { \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\",\\n\\t\\t\\t\\t\"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\" };\\n\\t\\tfor (String item : words) {\\n\\t\\t\\tString temp = \"\";\\n\\t\\t\\tfor (int i = 0; i < item.length(); i++) {\\n\\t\\t\\t\\ttemp += encodes[item.charAt(i) - \\'a\\'];\\n\\t\\t\\t}\\n\\t\\t\\tset.add(temp);\\n\\t\\t}\\n\\t\\treturn set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 338046,
                "title": "javascript-1-2-line-solution-using-set-charcodeat",
                "content": "```\\nvar uniqueMorseRepresentations = function (words) {\\n  const morse = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"];\\n  return [...(new Set(words.map(word => word.split(\"\").map(c => morse[c.charCodeAt() - 97]).join(\"\"))))].length;\\n};",
                "solutionTags": [],
                "code": "```\\nvar uniqueMorseRepresentations = function (words) {\\n  const morse = [\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"];\\n  return [...(new Set(words.map(word => word.split(\"\").map(c => morse[c.charCodeAt() - 97]).join(\"\"))))].length;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 330729,
                "title": "python-code",
                "content": "Runtime: 4 ms, faster than 100.00% of Python online submissions for Unique Morse Code Words.\\nMemory Usage: 11.7 MB, less than 75.08% of Python online submissions for Unique Morse Code Words.\\n\\n\\n```\\n\\t\\tmorse=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        s=[]\\n        for i in words:\\n            a=\\'\\'\\n            for ii in i:\\n                a=a+morse[ord(ii)-97]\\n            if a in s:\\n                continue\\n            else:\\n                s.append(a)\\n        return len(s)\\n```\\n",
                "solutionTags": [],
                "code": "```\\n\\t\\tmorse=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        s=[]\\n        for i in words:\\n            a=\\'\\'\\n            for ii in i:\\n                a=a+morse[ord(ii)-97]\\n            if a in s:\\n                continue\\n            else:\\n                s.append(a)\\n        return len(s)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 293028,
                "title": "easy-to-understand-modern-javascript-solution",
                "content": "Most time spent to array => map conversion. Could be done programmatically as well.\\n\\n```js\\n/**\\n * @param {string[]} words\\n * @return {number}\\n */\\nconst uniqueMorseRepresentations = (words) => {\\n    const set = new Set();\\n    \\n    for (let word of words) {\\n        set.add(toMorse(word));\\n    }\\n    \\n    return set.size\\n};\\n\\nconst toMorse = (word) => {\\n    let result = \\'\\';\\n\\n    for (let char of word) {\\n        result += map.get(char);\\n    }\\n    \\n    return result;\\n}\\n\\nconst map = new Map([\\n  [\\'a\\', \\'.-\\'],\\n  [\\'b\\', \\'-...\\'],\\n  [\\'c\\', \\'-.-.\\'],\\n  [\\'d\\', \\'-..\\'],\\n  [\\'e\\', \\'.\\'],\\n  [\\'f\\', \\'..-.\\'],\\n  [\\'g\\', \\'--.\\'],\\n  [\\'h\\', \\'....\\'],\\n  [\\'i\\', \\'..\\'],\\n  [\\'j\\', \\'.---\\'],\\n  [\\'k\\', \\'-.-\\'],\\n  [\\'l\\', \\'.-..\\'],\\n  [\\'m\\', \\'--\\'],\\n  [\\'n\\', \\'-.\\'],\\n  [\\'o\\', \\'---\\'],\\n  [\\'p\\', \\'.--.\\'],\\n  [\\'q\\', \\'--.-\\'],\\n  [\\'r\\', \\'.-.\\'],\\n  [\\'s\\', \\'...\\'],\\n  [\\'t\\', \\'-\\'],\\n  [\\'u\\', \\'..-\\'],\\n  [\\'v\\', \\'...-\\'],\\n  [\\'w\\', \\'.--\\'],\\n  [\\'x\\', \\'-..-\\'],\\n  [\\'y\\', \\'-.--\\'],\\n  [\\'z\\', \\'--..\\']\\n]);\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```js\\n/**\\n * @param {string[]} words\\n * @return {number}\\n */\\nconst uniqueMorseRepresentations = (words) => {\\n    const set = new Set();\\n    \\n    for (let word of words) {\\n        set.add(toMorse(word));\\n    }\\n    \\n    return set.size\\n};\\n\\nconst toMorse = (word) => {\\n    let result = \\'\\';\\n\\n    for (let char of word) {\\n        result += map.get(char);\\n    }\\n    \\n    return result;\\n}\\n\\nconst map = new Map([\\n  [\\'a\\', \\'.-\\'],\\n  [\\'b\\', \\'-...\\'],\\n  [\\'c\\', \\'-.-.\\'],\\n  [\\'d\\', \\'-..\\'],\\n  [\\'e\\', \\'.\\'],\\n  [\\'f\\', \\'..-.\\'],\\n  [\\'g\\', \\'--.\\'],\\n  [\\'h\\', \\'....\\'],\\n  [\\'i\\', \\'..\\'],\\n  [\\'j\\', \\'.---\\'],\\n  [\\'k\\', \\'-.-\\'],\\n  [\\'l\\', \\'.-..\\'],\\n  [\\'m\\', \\'--\\'],\\n  [\\'n\\', \\'-.\\'],\\n  [\\'o\\', \\'---\\'],\\n  [\\'p\\', \\'.--.\\'],\\n  [\\'q\\', \\'--.-\\'],\\n  [\\'r\\', \\'.-.\\'],\\n  [\\'s\\', \\'...\\'],\\n  [\\'t\\', \\'-\\'],\\n  [\\'u\\', \\'..-\\'],\\n  [\\'v\\', \\'...-\\'],\\n  [\\'w\\', \\'.--\\'],\\n  [\\'x\\', \\'-..-\\'],\\n  [\\'y\\', \\'-.--\\'],\\n  [\\'z\\', \\'--..\\']\\n]);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 278164,
                "title": "javascript-89-34",
                "content": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    \\n\\t// Define a set and variable morse (set to empty string);\\n    let morseSet = new Set;\\n    let morse = \"\";\\n    \\n\\t// Define object literal\\n    function decypher(elem) {\\n        var code = {\\n            \"a\": \".-\",\\n            \"b\":\"-...\",\\n            \"c\":\"-.-.\",\\n            \"d\":\"-..\",\\n            \"e\":\".\",\\n            \"f\":\"..-.\",\\n            \"g\":\"--.\",\\n            \"h\":\"....\",\\n            \"i\":\"..\",\\n            \"j\":\".---\",\\n            \"k\":\"-.-\",\\n            \"l\":\".-..\",\\n            \"m\":\"--\",\\n            \"n\":\"-.\",\\n            \"o\":\"---\",\\n            \"p\":\".--.\",\\n            \"q\":\"--.-\",\\n            \"r\":\".-.\",\\n            \"s\":\"...\",\\n            \"t\":\"-\",\\n            \"u\":\"..-\",\\n            \"v\":\"...-\",\\n            \"w\":\".--\",\\n            \"x\":\"-..-\",\\n            \"y\":\"-.--\",\\n            \"z\":\"--..\"\\n        };    \\n        return (code[elem]);\\n    }\\n    \\n\\t// Iterate through each character in each word\\n    for(let i = 0; i < words.length; i++) {\\n        for(let j = 0; j < words[i].length; j++) {\\n            morse += decypher(words[i][j]);\\n        }\\n\\t\\t// Add to set\\n        morseSet.add(morse);\\n\\t\\t\\n\\t\\t// Reset morse variable\\n        morse = \"\";\\n    }\\n\\n\\t// Return size of set \\n    return morseSet.size;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar uniqueMorseRepresentations = function(words) {\\n    \\n\\t// Define a set and variable morse (set to empty string);\\n    let morseSet = new Set;\\n    let morse = \"\";\\n    \\n\\t// Define object literal\\n    function decypher(elem) {\\n        var code = {\\n            \"a\": \".-\",\\n            \"b\":\"-...\",\\n            \"c\":\"-.-.\",\\n            \"d\":\"-..\",\\n            \"e\":\".\",\\n            \"f\":\"..-.\",\\n            \"g\":\"--.\",\\n            \"h\":\"....\",\\n            \"i\":\"..\",\\n            \"j\":\".---\",\\n            \"k\":\"-.-\",\\n            \"l\":\".-..\",\\n            \"m\":\"--\",\\n            \"n\":\"-.\",\\n            \"o\":\"---\",\\n            \"p\":\".--.\",\\n            \"q\":\"--.-\",\\n            \"r\":\".-.\",\\n            \"s\":\"...\",\\n            \"t\":\"-\",\\n            \"u\":\"..-\",\\n            \"v\":\"...-\",\\n            \"w\":\".--\",\\n            \"x\":\"-..-\",\\n            \"y\":\"-.--\",\\n            \"z\":\"--..\"\\n        };    \\n        return (code[elem]);\\n    }\\n    \\n\\t// Iterate through each character in each word\\n    for(let i = 0; i < words.length; i++) {\\n        for(let j = 0; j < words[i].length; j++) {\\n            morse += decypher(words[i][j]);\\n        }\\n\\t\\t// Add to set\\n        morseSet.add(morse);\\n\\t\\t\\n\\t\\t// Reset morse variable\\n        morse = \"\";\\n    }\\n\\n\\t// Return size of set \\n    return morseSet.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 275680,
                "title": "beats-97-85-simple-python-code",
                "content": "```\\nclass Solution:\\t\\n\\tdef uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\t   result_letter = \"\"\\n       result_word = []\\n\\t\\t\\n        morse_arr = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n        for word in words:\\n            for letter in word:\\n                result_letter = result_letter +morse_arr[ord(letter)-97]\\n            result_word.append(result_letter)\\n            result_letter = \"\"              \\n               \\n        return(len(set(result_word)))\\n```\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\t\\n\\tdef uniqueMorseRepresentations(self, words: List[str]) -> int:\\n\\t   result_letter = \"\"\\n       result_word = []\\n\\t\\t\\n        morse_arr = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n\\n        for word in words:\\n            for letter in word:\\n                result_letter = result_letter +morse_arr[ord(letter)-97]\\n            result_word.append(result_letter)\\n            result_letter = \"\"              \\n               \\n        return(len(set(result_word)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 266684,
                "title": "c-4ms-faster-than-100-and-8-9-mb-less",
                "content": "``` \\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        string code[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        unordered_set<string> temp;\\n        string word;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            word=\"\";\\n            for(int j=0;j<words[i].length();j++)\\n            {\\n                word += code[words[i][j]-97];\\n            }\\n            temp.insert(word);\\n        }\\n        return temp.size();\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        string code[26]={\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}",
                "codeTag": "Java"
            },
            {
                "id": 244975,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        set<string> uniq;\\n        vector<string> abc = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        for(auto word : words){\\n            string trans = \"\";\\n            for(auto c : word){\\n                trans += abc[c - \\'a\\'];\\n            }\\n            uniq.insert(trans);\\n        }\\n        return uniq.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        set<string> uniq;\\n        vector<string> abc = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n\\n        for(auto word : words){\\n            string trans = \"\";\\n            for(auto c : word){\\n                trans += abc[c - \\'a\\'];\\n            }\\n            uniq.insert(trans);\\n        }\\n        return uniq.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 201895,
                "title": "0ms-solution-in-c",
                "content": "```\\ntypedef struct {\\n    char len;\\n    char val;\\n} morseCode;\\n\\nmorseCode codeTable[] = {\\n    {2, 2}, /* a .-   10*/\\n    {4, 7}, /* b -... 0111*/\\n    {4, 5}, /* c -.-. 0101 */\\n    {3, 3},\\n    {1, 1},\\n    {4,13},\\n    {3, 1},\\n    {4,15},\\n    {2, 3},\\n    {4, 8},\\n    {3, 2},\\n    {4,11},\\n    {2, 0},\\n    {2, 1},\\n    {3, 0},\\n    {4, 9},\\n    {4, 2},\\n    {3, 5},\\n    {3, 7},\\n    {1, 0},\\n    {3, 6},\\n    {4,14},\\n    {3, 4},\\n    {4, 6},\\n    {4, 4},\\n    {4, 3}\\n};\\n\\ntypedef struct{\\n    int len;\\n    int val;\\n}morseString;\\n\\nmorseString getmorseString(char* s) {\\n    morseString str;\\n    str.len = 0;\\n    str.val = 0;\\n    \\n    char *p = s;\\n    while(*p != \\'\\\\0\\')\\n    {\\n        char c = *p;\\n        if (c < \\'a\\' || c > \\'z\\'){\\n            printf(\"Invalid input *p = %c\\\\n\", c);\\n            p++;\\n            continue;\\n        }\\n        \\n        morseCode code = codeTable[c - \\'a\\']; \\n        str.len += code.len;\\n        str.val = (str.val << (code.len)) + code.val;\\n        p++;\\n    }\\n    \\n    return str;\\n}\\n\\nint uniqueMorseRepresentations(char** words, int wordsSize) {\\n    int result = -1;\\n    morseString stack[100];\\n    \\n    for(int i = 0; i < wordsSize; i++)\\n    {\\n        morseString str = getmorseString(words[i]);\\n        bool foundone = false;\\n        for (int j = 0; j <= result; j++)\\n        {\\n            // check one by one if str in stack\\n            if (stack[j].len == str.len && stack[j].val == str.val) {\\n                foundone = true;\\n                break;\\n            }\\n        }\\n        \\n        if (!foundone)\\n        {\\n            stack[++result] = str;\\n        }\\n    }\\n    \\n    return result + 1;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ntypedef struct {\\n    char len;\\n    char val;\\n} morseCode;\\n\\nmorseCode codeTable[] = {\\n    {2, 2}, /* a .-   10*/\\n    {4, 7}, /* b -... 0111*/\\n    {4, 5}, /* c -.-. 0101 */\\n    {3, 3},\\n    {1, 1},\\n    {4,13},\\n    {3, 1},\\n    {4,15},\\n    {2, 3},\\n    {4, 8},\\n    {3, 2},\\n    {4,11},\\n    {2, 0},\\n    {2, 1},\\n    {3, 0},\\n    {4, 9},\\n    {4, 2},\\n    {3, 5},\\n    {3, 7},\\n    {1, 0},\\n    {3, 6},\\n    {4,14},\\n    {3, 4},\\n    {4, 6},\\n    {4, 4},\\n    {4, 3}\\n};\\n\\ntypedef struct{\\n    int len;\\n    int val;\\n}morseString;\\n\\nmorseString getmorseString(char* s) {\\n    morseString str;\\n    str.len = 0;\\n    str.val = 0;\\n    \\n    char *p = s;\\n    while(*p != \\'\\\\0\\')\\n    {\\n        char c = *p;\\n        if (c < \\'a\\' || c > \\'z\\'){\\n            printf(\"Invalid input *p = %c\\\\n\", c);\\n            p++;\\n            continue;\\n        }\\n        \\n        morseCode code = codeTable[c - \\'a\\']; \\n        str.len += code.len;\\n        str.val = (str.val << (code.len)) + code.val;\\n        p++;\\n    }\\n    \\n    return str;\\n}\\n\\nint uniqueMorseRepresentations(char** words, int wordsSize) {\\n    int result = -1;\\n    morseString stack[100];\\n    \\n    for(int i = 0; i < wordsSize; i++)\\n    {\\n        morseString str = getmorseString(words[i]);\\n        bool foundone = false;\\n        for (int j = 0; j <= result; j++)\\n        {\\n            // check one by one if str in stack\\n            if (stack[j].len == str.len && stack[j].val == str.val) {\\n                foundone = true;\\n                break;\\n            }\\n        }\\n        \\n        if (!foundone)\\n        {\\n            stack[++result] = str;\\n        }\\n    }\\n    \\n    return result + 1;\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 185719,
                "title": "python-2-liner",
                "content": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        letters=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len(set(\"\".join(letters[ord(letter)-ord(\"a\")] for letter in word) for word in words))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        letters=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        return len(set(\"\".join(letters[ord(letter)-ord(\"a\")] for letter in word) for word in words))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 172828,
                "title": "python-3-line-simple-intuitive-pythonic",
                "content": "`zip()` to create `(alphabet-morse)` tuple, `dict()` to construct dictionary mapping. itereate word and letter and apply `join()` to construct string. Throw to `set()` to remove any duplicate and return its `len()` \\n```\\nfrom string import ascii_lowercase\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        \"\"\"\\n        morsecode = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        translation = dict(zip(ascii_lowercase,morsecode))\\n        return len(set([\"\".join(translation[letter] for letter in word) for word in words]))\\n```",
                "solutionTags": [],
                "code": "```\\nfrom string import ascii_lowercase\\nclass Solution:\\n    def uniqueMorseRepresentations(self, words):\\n        \"\"\"\\n        \"\"\"\\n        morsecode = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n        translation = dict(zip(ascii_lowercase,morsecode))\\n        return len(set([\"\".join(translation[letter] for letter in word) for word in words]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 141987,
                "title": "c-beats-100-100ms-clear-solution",
                "content": "Store the morse code letter representations in an array. \\nAccess that array by getting the index. You get the index by using ASCII math and taking the current letter you want and subtracting \\'a\\'. \\nUse StringBuilder to build the morse code version of the word and throw that into a HashSet.\\n\\n```\\npublic int UniqueMorseRepresentations(string[] words) {\\n        var letters = new string[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        var hash = new HashSet<string>();\\n        \\n        var sb = new StringBuilder();\\n        foreach (var word in words)\\n        {\\n            sb = new StringBuilder();\\n            var r = word.ToCharArray();\\n            for (int i = 0; i < r.Length; i++)\\n            {\\n                sb.Append(letters[r[i]-\\'a\\']);\\n            }\\n            hash.Add(sb.ToString());\\n        }\\n        \\n        return hash.Count;\\n    }\\n\\t\\t```",
                "solutionTags": [],
                "code": "```\\npublic int UniqueMorseRepresentations(string[] words) {\\n        var letters = new string[] {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        \\n        var hash = new HashSet<string>();\\n        \\n        var sb = new StringBuilder();\\n        foreach (var word in words)\\n        {\\n            sb = new StringBuilder();\\n            var r = word.ToCharArray();\\n            for (int i = 0; i < r.Length; i++)\\n            {\\n                sb.Append(letters[r[i]-\\'a\\']);\\n            }\\n            hash.Add(sb.ToString());\\n        }\\n        \\n        return hash.Count;\\n    }\\n\\t\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 138396,
                "title": "0ms-golang-solution",
                "content": "```\\nfunc uniqueMorseRepresentations(words []string) int {\\n    table := []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}\\n    \\n    result := make(map[string]bool)\\n    for _, w := range words {\\n        var res string\\n        for _, r  := range w {\\n            res += table[unicode.ToLower(r)-\\'a\\']\\n        }\\n        result[res] = true\\n    }\\n    \\n    return len(result)\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc uniqueMorseRepresentations(words []string) int {\\n    table := []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"}\\n    \\n    result := make(map[string]bool)\\n    for _, w := range words {\\n        var res string\\n        for _, r  := range w {\\n            res += table[unicode.ToLower(r)-\\'a\\']\\n        }\\n        result[res] = true\\n    }\\n    \\n    return len(result)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 133135,
                "title": "c-beats-99-7-short-and-simple",
                "content": "```\\nstring decode(string a){\\n    string morse [26] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        string temp=\"\";\\n        for(int i = 0;i<a.size();i++){\\n            temp+=morse[int(a[i])-97];     \\n            }\\n            return temp;\\n        }\\n    class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> temp;\\n        for(int i = 0;i<words.size();i++){\\n            words[i]= decode(words[i]);\\n            bool found = false;\\n            for(int j = 0; j<temp.size();j++){\\n                if(words[i]==temp[j]){\\n                    found = true;\\n                }\\n            }\\n            if(!found){\\n                temp.push_back(words[i]);\\n            }\\n        }\\n        return temp.size();\\n    };\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nstring decode(string a){\\n    string morse [26] = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        string temp=\"\";\\n        for(int i = 0;i<a.size();i++){\\n            temp+=morse[int(a[i])-97];     \\n            }\\n            return temp;\\n        }\\n    class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        vector<string> temp;\\n        for(int i = 0;i<words.size();i++){\\n            words[i]= decode(words[i]);\\n            bool found = false;\\n            for(int j = 0; j<temp.size();j++){\\n                if(words[i]==temp[j]){\\n                    found = true;\\n                }\\n            }\\n            if(!found){\\n                temp.push_back(words[i]);\\n            }\\n        }\\n        return temp.size();\\n    };\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 131560,
                "title": "c-bits-99-7-with-no-strings-comparison",
                "content": "class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<unsigned long> results;\\n        vector<pair<int, unsigned>> alphabet = {{2, 0b01}, {4 ,0b1000}, {4 ,0b1010}, {3 ,0b100}, {1 ,0b0}, {4 ,0b0010}, {3 ,0b110}, {4 ,0b0000}, {2 ,0b00}, {4 ,0b0111}, {3 ,0b101}, {4 ,0b0100}, {2 ,0b11}, {2 ,0b10}, {3 ,0b111}, {4 ,0b0110}, {4 ,0b1101}, {3 ,0b010}, {3 ,0b000}, {1 ,0b1}, {3 ,0b001}, {4 ,0b0001}, {3 ,0b011}, {4 ,0b1001}, {4 ,0b1011}, {4 ,0b1100}};\\n        for(size_t i = 0; i < words.size(); ++i)\\n        {\\n            unsigned long result = 0;\\n            for(size_t j = 0; j < words[i].size(); ++j)\\n            {\\n                auto cur = alphabet[words[i][j] - \\'a\\'];\\n                result = result << cur.first | cur.second;\\n            }\\n            results.insert(result);\\n        }        \\n        return results.size();\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int uniqueMorseRepresentations(vector<string>& words) {\\n        unordered_set<unsigned long> results;\\n        vector<pair<int, unsigned>> alphabet = {{2, 0b01}",
                "codeTag": "Java"
            },
            {
                "id": 125655,
                "title": "ruby-solution-by-a-ruby-noob",
                "content": "```\\n# @param {String[]} words\\n# @return {Integer}\\ndef unique_morse_representations(words)\\n    \\n    letter = [\\'a\\',\\'b\\',\\'c\\',\\'d\\',\\'e\\',\\'f\\',\\'g\\',\\'h\\',\\'i\\',\\'j\\',\\'k\\',\\'l\\',\\'m\\',\\'n\\',\\'o\\',\\'p\\',\\'q\\',\\'r\\',\\'s\\',\\'t\\',\\'u\\',\\'v\\',\\'w\\',\\'x\\',\\'y\\',\\'z\\']\\n    morseLetter = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n    translation = {}\\n    morseWords = []\\n    \\n    # map each letter to its morse code equivalent\\n    letter.each_with_index {|k,v|translation[k] = morseLetter[v]}\\n\\n    # iterate through words and get morse code translation\\n    words.each{ |word| morseWords << word.split(\"\").map{ |char| translation[char] }.join(\"\") }\\n    \\n    # remove duplicates and return length\\n    return morseWords.uniq.length\\n    \\n    \\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {String[]} words\\n# @return {Integer}\\ndef unique_morse_representations(words)\\n    \\n    letter = [\\'a\\',\\'b\\',\\'c\\',\\'d\\',\\'e\\',\\'f\\',\\'g\\',\\'h\\',\\'i\\',\\'j\\',\\'k\\',\\'l\\',\\'m\\',\\'n\\',\\'o\\',\\'p\\',\\'q\\',\\'r\\',\\'s\\',\\'t\\',\\'u\\',\\'v\\',\\'w\\',\\'x\\',\\'y\\',\\'z\\']\\n    morseLetter = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\n    translation = {}\\n    morseWords = []\\n    \\n    # map each letter to its morse code equivalent\\n    letter.each_with_index {|k,v|translation[k] = morseLetter[v]}\\n\\n    # iterate through words and get morse code translation\\n    words.each{ |word| morseWords << word.split(\"\").map{ |char| translation[char] }.join(\"\") }\\n    \\n    # remove duplicates and return length\\n    return morseWords.uniq.length\\n    \\n    \\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 122225,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Set<String> uniqueMorse = new HashSet();\\n        String[] morseCodes = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        for(String word: words){\\n            String code=\"\";\\n            for(int i =0; i<word.length();i++){\\n                int n = word.charAt(i) - \\'a\\';\\n                code+=morseCodes[n];\\n            }\\n            uniqueMorse.add(code);\\n        }\\n        return uniqueMorse.size();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int uniqueMorseRepresentations(String[] words) {\\n        Set<String> uniqueMorse = new HashSet();\\n        String[] morseCodes = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\\n        for(String word: words){\\n            String code=\"\";\\n            for(int i =0; i<word.length();i++){\\n                int n = word.charAt(i) - \\'a\\';\\n                code+=morseCodes[n];\\n            }\\n            uniqueMorse.add(code);\\n        }\\n        return uniqueMorse.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1775004,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1571919,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1566109,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1566857,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1714477,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1567297,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1569215,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1846798,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1756496,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1573307,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1775004,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1571919,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1566109,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1566857,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1714477,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1567297,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1569215,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1846798,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1756496,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            },
            {
                "id": 1573307,
                "content": [
                    {
                        "username": "abhay30",
                        "content": "Python\\n\\nHere is the dictionary for the morse code\\n\\n `dicti = {\\'a\\':\".-\", \\'b\\':\"-...\", \\'c\\':\"-.-.\", \\'d\\':\"-..\", \\'e\\':\".\", \\'f\\':\"..-.\", \\'g\\':\"--.\", \\'h\\':\"....\", \\'i\\':\"..\", \\'j\\':\".---\", \\'k\\':\"-.-\", \\'l\\':\".-..\", \\'m\\':\"--\",    \\'n\\':\"-.\", \\'o\\':\"---\", \\'p\\':\".--.\", \\'q\\':\"--.-\", \\'r\\':\".-.\", \\'s\\':\"...\", \\'t\\':\"-\", \\'u\\':\"..-\", \\'v\\':\"...-\", \\'w\\':\".--\", \\'x\\':\"-..-\", \\'y\\':\"-.--\", \\'z\\':\"--..\"}` "
                    },
                    {
                        "username": "Snappawapa",
                        "content": "I am missing something here?\\n\\nI see what the goal is, but I am having trouble understanding why two different words would have the same transformation.\\n\\nShouldn\\'t all strings be diffrerent from each other, since there is a 1-1 match between characters and code? Is it that without properly separating the characters, they will actually produce the \\'same\\' morse code?"
                    },
                    {
                        "username": "jc531",
                        "content": "That\\'s correct. Since in this problem the transformed words don\\'t have spaces between the converted morse letters, its possible for two different words to have the same morse sequence.\\n\\nIf you look at the example (copied from the prompt) below, notice that \"gin\" and \"zen\" produce the same morse sequence. Similarly, \"gig\" and \"msg\" also produce the same morse sequence. Given the sequences, the problem is looking for you to find how many unique morse sequences there are. In the below example, there are 2.\\n\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."
                    },
                    {
                        "username": "int-i",
                        "content": "The question says \"For example, \"cba\" can be written as **\"-.-..--...\"**, (which is the concatenation \"-.-.\" + \"-...\" + \".-\").\"\\nShouldn\\'t the bold text be **\"-.-.-....-\"** instead ? and isn\\'t the original morse code in the line above the representation of \"cab\" ?\\n\\nThis had me wondering for more than 5 minutes :) and creating overlapping complex cases !\\nCan comeone correct this please ...\\n"
                    },
                    {
                        "username": "liyun1988",
                        "content": "Quote from the description: \"For example, \"cba\" can be written as \"**-.-..--...**\", (which is the concatenation **\"-.-.\" + \"-...\" + \".-\"**).\"\\n\\nHere \"cba\" should be decoded as **\"-.-.-....-\"**"
                    },
                    {
                        "username": "griff_",
                        "content": "for c#\\n\\nhere is the dictionary for easy translation\\n\\n `Dictionary<char, string> code = new Dictionary<char, string>(){`\\n            `{\\'a\\', \".-\"},\\n            {\\'b\\', \"-...\"},\\n            {\\'c\\', \"-.-.\"},\\n            {\\'d\\', \"-..\"},\\n            {\\'e\\', \".\"},\\n            {\\'f\\', \"..-.\"},\\n            {\\'g\\', \"--.\"},\\n            {\\'h\\', \"....\"},\\n            {\\'i\\', \"..\"},\\n            {\\'j\\', \".---\"},\\n            {\\'k\\', \"-.-\"},\\n            {\\'l\\', \".-..\"},\\n            {\\'m\\', \"--\"},\\n            {\\'n\\', \"-.\"},\\n            {\\'o\\', \"---\"},\\n            {\\'p\\', \".--.\"},\\n            {\\'q\\', \"--.-\"},\\n            {\\'r\\', \".-.\"},\\n            {\\'s\\', \"...\"},\\n            {\\'t\\', \"-\"},\\n            {\\'u\\', \"..-\"},\\n            {\\'v\\', \"...-\"},\\n            {\\'w\\', \".--\"},\\n            {\\'x\\', \"-..-\"},\\n            {\\'y\\', \"-.--\"},\\n            {\\'z\\', \"--..\"},\\n        };`"
                    },
                    {
                        "username": "liuheng92",
                        "content": "cab sample is wrong"
                    },
                    {
                        "username": "dreamjjy",
                        "content": "Actually in the description the morse of \\'cab\\' is \\'cba\\'... it misled me and made me think the sequence of chars can be changed. Hope it can be repaired!"
                    },
                    {
                        "username": "sindy",
                        "content": "Testcase [\"rwjje\",\"aittjje\",\"auyyn\",\"lqtktn\",\"lmjwn\"]. All strings have same morse code \".-..--.---.---.\". Why the expected value is 1?"
                    },
                    {
                        "username": "Tiago14",
                        "content": " If all are the same then you have only one case"
                    },
                    {
                        "username": "quan_mai",
                        "content": "Tips: For any problem asking number of distinguish element in a list, a set is a good candidate :-) "
                    },
                    {
                        "username": "TimothyLiu",
                        "content": "In the description, it says ***Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We\\'ll call such a concatenation, the transformation of a word.***\\n\\nI feel the \"cba\" should be \"cab\". Am I correct?"
                    }
                ]
            }
        ]
    }
]