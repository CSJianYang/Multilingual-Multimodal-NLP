[
    {
        "title": "Count Distinct Numbers on Board",
        "question_content": "You are given a positive integer n, that is initially placed on a board. Every day, for 109 days, you perform the following procedure:\n\n\tFor each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1.\n\tThen, place those numbers on the board.\n\nReturn the number of distinct integers present on the board after 109 days have elapsed.\nNote:\n\n\tOnce a number is placed on the board, it will remain on it until the end.\n\t%&nbsp;stands&nbsp;for the modulo operation. For example,&nbsp;14 % 3 is 2.\n\n&nbsp;\nExample 1:\n\nInput: n = 5\nOutput: 4\nExplanation: Initially, 5 is present on the board. \nThe next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. \nAfter that day, 3 will be added to the board because 4 % 3 == 1. \nAt the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5. \n\nExample 2:\n\nInput: n = 3\nOutput: 2\nExplanation: \nSince 3 % 2 == 1, 2 will be added to the board. \nAfter a billion days, the only two distinct numbers on the board are 2 and 3. \n\n&nbsp;\nConstraints:\n\n\t1 <= n <= 100",
        "solutions": [
            {
                "id": 3111651,
                "title": "java-c-python-return-n-1",
                "content": "# **Conclusion**\\nIf `n > 1`, we can get 2,3,4...n finally.\\nIf `n == 1`, we can only get 1.\\n<br>\\n\\n# **Intuition**\\n\"for 10^9 days\", it\\'s quite a long duration.\\nAnd `n` is much smaller than the number of days.\\n\\nIt\\'s a brain-teaser,\\nthe duration is long enough to generate all cards.\\n<br>\\n\\n# **Prove**\\nAssume `n` is on the board,\\n`n % (n - 1) == 1` if `n > 2`,\\nso `n - 1` will be on the board,\\nthen `n - 2` will be on the board,\\nsame for `n - 3`,`n - 4` .... `3`, `2`.\\n\\nSo for any `n > 1`,\\n`2,3,4...n` will be on the board finally,\\nwe return `n - 1`\\n\\nFor `n = 1` at first,\\nnothing happens,\\nwe return 1.\\n\\nSo we can `return n > 1 ? n - 1 : 1;`\\nalso we can `return max(n - 1, 1);`\\n<br>\\n\\n# **Complexity**\\nTime `O(1)`\\nSpace `O(1)`\\n<br>\\n\\n**Java**\\n```java\\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    int distinctIntegers(int n) {\\n        return max(n - 1, 1);\\n    }\\n```\\n\\n**Python**\\n```py\\n    def distinctIntegers(self, n):\\n        return max(n - 1, 1)\\n```\\n",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```java\\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n```\n```cpp\\n    int distinctIntegers(int n) {\\n        return max(n - 1, 1);\\n    }\\n```\n```py\\n    def distinctIntegers(self, n):\\n        return max(n - 1, 1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3111679,
                "title": "1-liner-straight-forward",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- for n > 1: Eventually you get all numbers except 1\\n- for n == 1: 1 get 1 on the board at the beginning\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```java\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n-1;\\n    }\\n}\\n```\\n\\n# The slower way, simulation\\n```java\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        Set<Integer> board = new HashSet<>();\\n        board.add(n);\\n        \\n        int size = board.size();\\n        while (true) {\\n            for (int i = 1; i < n; i++) {\\n                for (int x : new ArrayList<>(board)) {\\n                    if (x % i == 1) board.add(i);\\n                }\\n            }\\n            if (size == board.size()) break;\\n            size = board.size();\\n        }\\n\\n        return size;\\n    }\\n}\\n```\\nPLEASE UPVOTE IF YOU FIND THIS POST HELPFUL, THANK YOU!!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n-1;\\n    }\\n}\\n```\n```java\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        Set<Integer> board = new HashSet<>();\\n        board.add(n);\\n        \\n        int size = board.size();\\n        while (true) {\\n            for (int i = 1; i < n; i++) {\\n                for (int x : new ArrayList<>(board)) {\\n                    if (x % i == 1) board.add(i);\\n                }\\n            }\\n            if (size == board.size()) break;\\n            size = board.size();\\n        }\\n\\n        return size;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111683,
                "title": "recursion-set-one-liner-very-simple-and-easy-to-understand-solution",
                "content": "1. Clasical Approach :\\n\\n```\\nclass Solution {\\npublic:\\n    unordered_set<int> s;\\n    int distinctIntegers(int n) {\\n        s.insert(n);\\n        for(int i = 2; i < n; ++i) {\\n            if(n%i == 1 && s.find(i) == s.end()) distinctIntegers(i);\\n        }\\n        return s.size();\\n    }\\n};\\n```\\n\\n2. Advance Thinking Approach :\\n\\n```\\n/* Ultimately all the numbers will be included except 1 when n != 1 */\\n\\nint distinctIntegers(int n) {\\n    return n == 1? 1: n-1;\\n}\\n```\\n\\nHere is an article of my recent interview experience at Amazon, you may like : \\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    unordered_set<int> s;\\n    int distinctIntegers(int n) {\\n        s.insert(n);\\n        for(int i = 2; i < n; ++i) {\\n            if(n%i == 1 && s.find(i) == s.end()) distinctIntegers(i);\\n        }\\n        return s.size();\\n    }\\n};\\n```\n```\\n/* Ultimately all the numbers will be included except 1 when n != 1 */\\n\\nint distinctIntegers(int n) {\\n    return n == 1? 1: n-1;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3154785,
                "title": "n-n-1",
                "content": "Note that `n % (n - 1) == 1` for all `n` except `2`.\\n\\nSo, we will eventually have numbers `[2, ... , n - 2, n - 1, n]` on the board.\\n\\n**C++**\\n```cpp\\nint distinctIntegers(int n) {\\n    return max(1, n - 1);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint distinctIntegers(int n) {\\n    return max(1, n - 1);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3112558,
                "title": "easy-c-java-python-one-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs we are doing for 10^9 days and our n is <=100 so we can conclude that n-1 numbers will be generated because n%(n-1)==1 \\ne.g n=5 \\n5%4==1 then 4%3==1 then 3%2==1 and so  on but 2%1==0 so take only n-1 numbers because 1 is not accepting the required condition . \\nAnd if n=1 then can only 1 is presnt on the board no other number  will be generated so return 1 .\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSo just return `n-1`  `except` for `1` return `1`;\\nor just return `max(n-1,1);`\\n\\nWe can also use loops to check which numbers will satisfy the condtion beacuse n is only upto 100 . But can be done without loops as well.\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        int c=0;\\n       if(n==1)return 1;\\n        else return n-1;\\n    }\\n};\\n\\n```\\n```python []\\ndef distinctIntegers(self, n):\\n    return max(n - 1, 1)\\n \\n```\\n```Java []\\npublic int distinctIntegers(int n) {\\n    return Math.max(n - 1, 1);\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        int c=0;\\n       if(n==1)return 1;\\n        else return n-1;\\n    }\\n};\\n\\n```\n```python []\\ndef distinctIntegers(self, n):\\n    return max(n - 1, 1)\\n \\n```\n```Java []\\npublic int distinctIntegers(int n) {\\n    return Math.max(n - 1, 1);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111637,
                "title": "java-explained",
                "content": "---\\n# Please Upvote \\uD83D\\uDE07\\n---\\nAssume we have `5` placed on the board initially. \\n\\nJust forget what other numbers (say `x`) would give `1` when we do `5 % x`.\\nBut we know for sure that `5 % 4` is `1`. So place `4` on the board.\\n\\nFor `4` we know for sure `4 % 3` would give us `1`. Ignore numbers smaller than `3`. Place `3` on the board.\\n\\nFor `3` we know `3 % 2` would give us `1`. Place `2` on the board.\\n\\nFor `2`, `2 % 1` won\\'t give us `1`, and there is no number below `1`, so we stop.\\n\\nSo what numbers are there on board? They\\'re `5, 4, 3, 2`. \\nHow many? It\\'s `4`.\\n\\nSo for given `n`, we will have `n - 1` numbers will be left on the board at the end.\\n\\nWhat if `n = 1`? There is nothing below `1` to do a mod with, so `1` will only stay on the board, so we return `1`.\\n\\n``` java []\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return (n == 1)? 1 : n - 1;\\n    }\\n}\\n\\n// TC: O(1)\\n```\\n---\\n##### We can do the same thing by returning $$max(n - 1, 1)$$:\\n``` java []\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n}\\n\\n// TC: O(1)\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "``` java []\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return (n == 1)? 1 : n - 1;\\n    }\\n}\\n\\n// TC: O(1)\\n```\n``` java []\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n}\\n\\n// TC: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111596,
                "title": "c-2-approach-constant-time",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```\\n\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        queue<int> q;\\n        q.push(n);\\n        int cnt=1;\\n        vector<bool> vis(n+1);\\n        \\n        while(!q.empty())\\n        {\\n            int top = q.front();\\n            q.pop();\\n            \\n            for(int i=1;i<top;i++)\\n            {\\n                if(top%i == 1 && !vis[i])\\n                {\\n                    cout<<i<<endl;\\n                    vis[i]=true;\\n                    cnt++;\\n                    q.push(i);\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        queue<int> q;\\n        q.push(n);\\n        int cnt=1;\\n        vector<bool> vis(n+1);\\n        \\n        while(!q.empty())\\n        {\\n            int top = q.front();\\n            q.pop();\\n            \\n            for(int i=1;i<top;i++)\\n            {\\n                if(top%i == 1 && !vis[i])\\n                {\\n                    cout<<i<<endl;\\n                    vis[i]=true;\\n                    cnt++;\\n                    q.push(i);\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3154152,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n if n<=1 else n-1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n if n<=1 else n-1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111863,
                "title": "in-contant-time-as-well-as-space-well-explained-solution",
                "content": "# Intuition\\nFor every number \\'x\\', \\'x-1\\' is one of the numbers which will always give remainder as \\'1\\'\\n\\n# Approach\\nIt\\'s simple brute force approach, you can get to it by yourself just by little bit of observation & dry-run for different test-cases.\\n\\nLike for \\'5\\', 4 will always give remainder as \\'1\\', for \\'4\\' it\\'s \\'3\\' and so on. At the end you fill find you got your required answer stored.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        //if n==1 that means we\\'ve \\'1\\' on our board, so we\\'ve one number with us as our answer\\n        if(n == 1)return 1;\\n\\n        // for rest numbers it will be n, n-1, n-2, ..... ,2\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        //if n==1 that means we\\'ve \\'1\\' on our board, so we\\'ve one number with us as our answer\\n        if(n == 1)return 1;\\n\\n        // for rest numbers it will be n, n-1, n-2, ..... ,2\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111585,
                "title": "simple-c-solution-with-explaination-using-examples",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       \\n        // think like this:\\n        // on the ist day: we have n\\n        // on the 2nd day we can include (n-1) becoz n%(n-1) ==1  (exception when n=2)\\n        // on the 3rd day we can include (n-2) becoz (n-1)% (n-2) ==1  (exception when (n-1)=2)\\n        // so we can infer that we can include all the nos. from 2 to n (except 1, becoz every no. is divisble by 1)\\n        \\n        // eg: n=10\\n        // ist day we have {10}\\n        // 2nd day include 9 becoz 10%9=1 , so our set={9,10}\\n        // 3rd day, include 8 becoz 9%8=1, so we have {8,9,10}\\n        // 4th day, include 7 becoz 8%7=1, so we have {7,8,9,10}\\n        // .\\n        // .\\n        // .\\n        // 9 th day, include 2 becoz 3%2=1, so we have {2,3,4,5,6,7,8,9,10}\\n        // thats it\\n        // becoz on the 10 day we cant include 1, becoz 1 is a factor of all the nos in the set\\n        \\n        // edge case n=1\\n        if( n==1)\\n            return 1;\\n        else\\n            return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       \\n        // think like this:\\n        // on the ist day: we have n\\n        // on the 2nd day we can include (n-1) becoz n%(n-1) ==1  (exception when n=2)\\n        // on the 3rd day we can include (n-2) becoz (n-1)% (n-2) ==1  (exception when (n-1)=2)\\n        // so we can infer that we can include all the nos. from 2 to n (except 1, becoz every no. is divisble by 1)\\n        \\n        // eg: n=10\\n        // ist day we have {10}\\n        // 2nd day include 9 becoz 10%9=1 , so our set={9,10}\\n        // 3rd day, include 8 becoz 9%8=1, so we have {8,9,10}\\n        // 4th day, include 7 becoz 8%7=1, so we have {7,8,9,10}\\n        // .\\n        // .\\n        // .\\n        // 9 th day, include 2 becoz 3%2=1, so we have {2,3,4,5,6,7,8,9,10}\\n        // thats it\\n        // becoz on the 10 day we cant include 1, becoz 1 is a factor of all the nos in the set\\n        \\n        // edge case n=1\\n        if( n==1)\\n            return 1;\\n        else\\n            return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111941,
                "title": "simple-java-o-1-one-line-code-easy-beginners",
                "content": "# Intuition\\nGeekster  Platform\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nSimple depends on numbers\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n <= 2) {\\n            return 1;\\n        }else {\\n            return n - 1;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n <= 2) {\\n            return 1;\\n        }else {\\n            return n - 1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111605,
                "title": "python-one-liner-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return [n - 1, 1][n == 1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return [n - 1, 1][n == 1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3519036,
                "title": "c-constant-time-space-complexity",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return max({1,n-1});\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return max({1,n-1});\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111867,
                "title": "one-liner-simple-java-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n==1 ? 1 : n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n==1 ? 1 : n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111717,
                "title": "c-one-liner-proper-method",
                "content": "# One-Liner Approach:\\n```\\nclass Solution \\n{\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        return n==1 ? 1 : n-1; \\n    }\\n};\\n```\\n\\n# Proper Method:\\n```\\nclass Solution \\n{\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        queue<int> q;\\n        unordered_set<int> s;\\n        q.push(n);\\n        s.insert(n);\\n        int count=1, x;\\n        while(!q.empty())\\n        {\\n            x = q.front(); q.pop();\\n            for(int i=1; i<=n; i++)\\n            {\\n                if(x%i==1) \\n                {\\n                    if(s.count(i)==0)\\n                    {\\n                        count++;\\n                        q.push(i);\\n                        s.insert(i);\\n                    }\\n                }    \\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```\\n\\n# Complexity\\n- Time Complexity : O(N^2)\\n(N for queue and another N for loop. Since they are nested it is N^2.)\\n- Space Complexity: O(2N)\\n(N for queue and another N for set.)\\n\\n# Please upvote if it helps :)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        return n==1 ? 1 : n-1; \\n    }\\n};\\n```\n```\\nclass Solution \\n{\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        queue<int> q;\\n        unordered_set<int> s;\\n        q.push(n);\\n        s.insert(n);\\n        int count=1, x;\\n        while(!q.empty())\\n        {\\n            x = q.front(); q.pop();\\n            for(int i=1; i<=n; i++)\\n            {\\n                if(x%i==1) \\n                {\\n                    if(s.count(i)==0)\\n                    {\\n                        count++;\\n                        q.push(i);\\n                        s.insert(i);\\n                    }\\n                }    \\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111715,
                "title": "c-very-easy-code-2-liner",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        //base case\\n        if(n == 1) return 1;\\n        //else\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        //base case\\n        if(n == 1) return 1;\\n        //else\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111698,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\ntypedef long long ll;\\n#define vi(x) vector<x>\\npublic:\\nll n;\\nvi(bool)dp;\\nvoid func(ll m){\\n    if(dp[m]){\\n        return;\\n    }\\n    dp[m]=1;\\n    for(ll i=1;i<=n;++i){\\n        if(m%i==1){\\n            func(i);\\n        }\\n    }\\n}\\n\\nint distinctIntegers(ll N) {\\n    n=N, dp.resize(n+1);\\n    func(n);\\n    return accumulate(begin(dp), end(dp), 0LL);\\n}\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\ntypedef long long ll;\\n#define vi(x) vector<x>\\npublic:\\nll n;\\nvi(bool)dp;\\nvoid func(ll m){\\n    if(dp[m]){\\n        return;\\n    }\\n    dp[m]=1;\\n    for(ll i=1;i<=n;++i){\\n        if(m%i==1){\\n            func(i);\\n        }\\n    }\\n}\\n\\nint distinctIntegers(ll N) {\\n    n=N, dp.resize(n+1);\\n    func(n);\\n    return accumulate(begin(dp), end(dp), 0LL);\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111685,
                "title": "simple-set-solution",
                "content": "# Complexity\\nTime `O(N^2)`\\nSpace `O(N)`\\n```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        arr = set()\\n        while n != 1:\\n            for i in range(1, n):\\n                if n % i == 1:\\n                    arr.add(i)\\n            n -= 1\\n        return len(arr) + 1\\n```",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        arr = set()\\n        while n != 1:\\n            for i in range(1, n):\\n                if n % i == 1:\\n                    arr.add(i)\\n            n -= 1\\n        return len(arr) + 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141416,
                "title": "java-one-line-o-1",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114128,
                "title": "python3-oneliner",
                "content": "# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n>1 else n\\n```\\n# Please do upvote if you like the solution",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n>1 else n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112752,
                "title": "accepted-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n            return 1;\\n        return n-1;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n            return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112436,
                "title": "one-liner",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n == 1:\\n            return 1\\n        else:\\n            return n - 1\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n == 1:\\n            return 1\\n        else:\\n            return n - 1\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112210,
                "title": "java-1-line-solution-100-runtime-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis solution of this question is straight forward\\n-> You get all numbers except 1.\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n-1;\\n    }\\n}\\n```\\n\\n# -> Another Solution using HashSet: \\n\\n# Approach :\\nThe solution to this problem can be found by iterating through all possible values of x and finding all numbers 1 <= i <= n such that x % i == 1 and storing them in a set. Since we are using set, it will automatically remove any duplicates. Finally we will return the size of the set which will give us the number of distinct integers present on the board.\\n\\n# Complexity\\n- Time complexity: O(N^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n-> This implementation is not efficient, as this implementation has time complexity O(n^2) and space complexity O(n), as it iterates through all possible combinations of x and i. In practice, this will be too slow for large values of n.\\n\\n# Code\\n``` \\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        Set<Integer> set = new HashSet<>();\\n\\n        if(n == 1) {\\n            return 1;\\n        }\\n        for(int i = 1; i <= n; i++) {\\n            for(int j = 1; j <= n; j++) {\\n                if(i % j == 1) {\\n                    set.add(j);\\n                }\\n            }\\n        }\\n        \\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n-1;\\n    }\\n}\\n```\n``` \\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        Set<Integer> set = new HashSet<>();\\n\\n        if(n == 1) {\\n            return 1;\\n        }\\n        for(int i = 1; i <= n; i++) {\\n            for(int j = 1; j <= n; j++) {\\n                if(i % j == 1) {\\n                    set.add(j);\\n                }\\n            }\\n        }\\n        \\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111783,
                "title": "c-easy-beginner-friendly-c-solution",
                "content": "\\n# Approach\\n1.Simple what we have to do is do all the task for 5 4 3 2 1 but the number is distinct so we use set\\n2 very simple we know the result of n = 1 is 1 and see the pattern so we have n-1 for all n > 1 that\\'s the logic only \\n\\n# Complexity\\n- Time complexity:\\n  O(n^2) \\n  O(1)\\n- Space complexity:\\n  O(N)\\n  O(1)\\n\\n# Code\\nApproach - 1\\nclass Solution {\\npublic:\\n\\n    int distinctIntegers(int n) {\\n        \\n        set<int> s;\\n      while(n > 0){\\n        for(int i = 1; i < n; i++)\\n        {\\n            if(n % i == 1)\\n            {\\n                s.insert(i);\\n             \\n            }\\n        }\\n      n--; \\n      }\\n        return s.size()+1;\\n    }\\n    \\n};\\nApproach 2\\n\\nclass Solution {\\npublic:\\n\\n    int distinctIntegers(int n) {\\n      if(n == 1)\\n          return 1;\\n        return n-1;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Ordered Set"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int distinctIntegers(int n) {\\n        \\n        set<int> s;\\n      while(n > 0){\\n        for(int i = 1; i < n; i++)\\n        {\\n            if(n % i == 1)\\n            {\\n                s.insert(i);\\n             \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3111752,
                "title": "1-liner-java-2-approaches-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n1st Method-->\\n\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n\\n    }\\n}\\n```\\n\\n\\nAlternate Method --> \\n\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)\\n        {\\n            return 1;\\n        }\\n       HashSet<Integer> hm = new HashSet<>();\\n        for(int i=1;i<=n;i++)\\n        {\\n            for(int j=1;j<=n;j++)\\n            {\\n              if(i%j==1)\\n              {\\n                  hm.add(i);\\n              }\\n            }\\n        }\\n        return hm.size();\\n    }\\n}```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)\\n        {\\n            return 1;\\n        }\\n       HashSet<Integer> hm = new HashSet<>();\\n        for(int i=1;i<=n;i++)\\n        {\\n            for(int j=1;j<=n;j++)\\n            {\\n              if(i%j==1)\\n              {\\n                  hm.add(i);\\n              }\\n            }\\n        }\\n        return hm.size();\\n    }\\n}```",
                "codeTag": "Java"
            },
            {
                "id": 3111618,
                "title": "return-n-1-c-easy",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n            return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n            return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111589,
                "title": "java-solution-using-hashset-and-queue",
                "content": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        HashSet<Integer> set = new HashSet<>();\\n        set.add(n);\\n        int temp = n;\\n        Queue<Integer> que = new ArrayDeque<>();\\n        que.add(n);\\n        int cnt=0;\\n        while(cnt<=1000000000 && que.size()!=0){\\n            int size = que.size();\\n            while(size-- > 0){\\n                int ele = que.poll();\\n                for(int i=1; i<=n; i++){\\n                    if(ele % i == 1){\\n                        if(!set.contains(i)){\\n                            set.add(i);\\n                            que.add(i);\\n                        }\\n                    }\\n                }\\n            }\\n            cnt++;\\n        }\\n        return set.size();\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int distinctIntegers(int n) {\\n        HashSet<Integer> set = new HashSet<>();\\n        set.add(n);\\n        int temp = n;\\n        Queue<Integer> que = new ArrayDeque<>();\\n        que.add(n);\\n        int cnt=0;\\n        while(cnt<=1000000000 && que.size()!=0){\\n            int size = que.size();\\n            while(size-- > 0){\\n                int ele = que.poll();\\n                for(int i=1; i<=n; i++){\\n                    if(ele % i == 1){\\n                        if(!set.contains(i)){\\n                            set.add(i);\\n                            que.add(i);\\n                        }",
                "codeTag": "Java"
            },
            {
                "id": 3397463,
                "title": "count-distinct-numbers-on-board-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n>1)\\n            return n-1;\\n        return 1;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n>1)\\n            return n-1;\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3318900,
                "title": "c-easy-and-one-line-solution-100-accepted-intuitive-approach",
                "content": "# Intuition\\nAll numbers will be included except 1 but if n==1, it will return only 1\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        \\n        return n == 1? 1: n-1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        \\n        return n == 1? 1: n-1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231621,
                "title": "c-easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3225332,
                "title": "c-3-solutions-easy-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe question says \\n> Return the number of **distinct** integers present on the board after 109 days have elapsed.\\n\\nThe word distinct is used in it -> use **Set** (stores unique elements only)\\n\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSelf - Explanatory \\n\\n# Complexity\\n- Time complexity:$$O(n*n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code - 1 \\n```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        set<int> s ; \\n        // the number is already on the board\\n        s.insert(n) ; \\n            while (n!=1)\\n            {\\n                for (int i = 1 ; i <= n ; i ++)\\n                {\\n                    if (n%i == 1)\\n                    {\\n                        s.insert(i);\\n                    }\\n                    else continue ; \\n                }\\n                n--;\\n            }\\n        int ans = s.size();\\n        return ans ; \\n    }\\n};\\n```\\n# Code - 2\\n```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return max(n - 1, 1) ; \\n    }\\n};\\n```\\n\\n# Code - 3\\n```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if (n <=2 )\\n        {\\n            return 1 ;\\n        }\\n        return n-1 ;\\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/0d928f78-b89f-43ca-a02c-2f50f7881c91_1677247379.9287465.png)\\n\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Simulation",
                    "Ordered Set"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        set<int> s ; \\n        // the number is already on the board\\n        s.insert(n) ; \\n            while (n!=1)\\n            {\\n                for (int i = 1 ; i <= n ; i ++)\\n                {\\n                    if (n%i == 1)\\n                    {\\n                        s.insert(i);\\n                    }\\n                    else continue ; \\n                }\\n                n--;\\n            }\\n        int ans = s.size();\\n        return ans ; \\n    }\\n};\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return max(n - 1, 1) ; \\n    }\\n};\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if (n <=2 )\\n        {\\n            return 1 ;\\n        }\\n        return n-1 ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3124335,
                "title": "1-line-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n# Please Upvote if you like my solution..\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3120416,
                "title": "coincidently-submitted-beats100",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return n;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return n;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114371,
                "title": "easy-c-solution-two-line-code-easy-approach",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Within the function, a vector \"v\" is created and the input variable \"n\" is pushed into the vector.\\n2. A for loop is initiated, starting at index 0 and running until the end of the vector.\\n3. Within the first for loop, another for loop is initiated, starting at 2 and running until the value of the current index in the vector \"v\"\\n4. Within the second for loop, an if statement checks if the value of the current index in \"v\" is divisible by the current value of the second for loop variable \"i\" with a remainder of 1\\n5. If the if statement evaluates to true, another if statement checks if the current value of \"i\" is already present in the vector \"v\" using the \"count\" function\\n6. If \"i\" is not present in the vector, it is pushed into the vector.\\n7. The function returns the size of the vector.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe outer for loop runs for n iterations, where n is the size of the vector v. For each iteration of the outer loop, the inner for loop runs for n/2 iterations on average, since it starts at 2 and runs until the value of the current index in the vector v. This means that the inner loop runs for a total of (n/2) * n = n^2/2 iterations on average.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe code uses a single vector v of size n to store the distinct integers, so the space complexity is O(n).\\n\\n![Your paragraph text (2).png](https://assets.leetcode.com/users/images/1cfe315b-d427-4514-a19c-cd8c6716e70c_1674134685.3447905.png)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        vector <int> v;\\n        v.push_back(n);\\n        for(int j=0; j<v.size(); j++){\\n            for(int i=2; i<=v[j]; i++){\\n                if(v[j]%i==1) {\\n                    if(!count(v.begin(),v.end(),i)) v.push_back(i);\\n                }\\n            }\\n        }\\n        return v.size();\\n    }\\n};\\n```\\nASK ME ANY DOUBT IN COMMENT SECTION.\\n\\n\\uD835\\uDC08\\uD835\\uDC1F \\uD835\\uDC32\\uD835\\uDC28\\uD835\\uDC2E \\uD835\\uDC1F\\uD835\\uDC28\\uD835\\uDC2E\\uD835\\uDC27\\uD835\\uDC1D \\uD835\\uDC2D\\uD835\\uDC21\\uD835\\uDC22\\uD835\\uDC2C \\uD835\\uDC21\\uD835\\uDC1E\\uD835\\uDC25\\uD835\\uDC29\\uD835\\uDC1F\\uD835\\uDC2E\\uD835\\uDC25, \\uD835\\uDC20\\uD835\\uDC22\\uD835\\uDC2F\\uD835\\uDC1E \\uD835\\uDC22\\uD835\\uDC2D \\uD835\\uDC1A\\uD835\\uDC27 \\uD835\\uDC2E\\uD835\\uDC29\\uD835\\uDC2F\\uD835\\uDC28\\uD835\\uDC2D\\uD835\\uDC1E \\uD835\\uDC2D\\uD835\\uDC28 \\uD835\\uDC2C\\uD835\\uDC21\\uD835\\uDC28\\uD835\\uDC30 \\uD835\\uDC32\\uD835\\uDC28\\uD835\\uDC2E\\uD835\\uDC2B \\uD835\\uDC1A\\uD835\\uDC29\\uD835\\uDC29\\uD835\\uDC2B\\uD835\\uDC1E\\uD835\\uDC1C\\uD835\\uDC22\\uD835\\uDC1A\\uD835\\uDC2D\\uD835\\uDC22\\uD835\\uDC28\\uD835\\uDC27 \\uD835\\uDC1A\\uD835\\uDC27\\uD835\\uDC1D \\uD835\\uDC26\\uD835\\uDC28\\uD835\\uDC2D\\uD835\\uDC22\\uD835\\uDC2F\\uD835\\uDC1A\\uD835\\uDC2D\\uD835\\uDC1E \\uD835\\uDC26\\uD835\\uDC1E \\uD835\\uDC2D\\uD835\\uDC28 \\uD835\\uDC1C\\uD835\\uDC28\\uD835\\uDC27\\uD835\\uDC2D\\uD835\\uDC22\\uD835\\uDC27\\uD835\\uDC2E\\uD835\\uDC1E \\uD835\\uDC29\\uD835\\uDC2B\\uD835\\uDC28\\uD835\\uDC2F\\uD835\\uDC22\\uD835\\uDC1D\\uD835\\uDC22\\uD835\\uDC27\\uD835\\uDC20 \\uD835\\uDC2C\\uD835\\uDC28\\uD835\\uDC25\\uD835\\uDC2E\\uD835\\uDC2D\\uD835\\uDC22\\uD835\\uDC28\\uD835\\uDC27\\uD835\\uDC2C!\\n\\uD835\\uDC16\\uD835\\uDC1A\\uD835\\uDC27\\uD835\\uDC2D \\uD835\\uDC2D\\uD835\\uDC28 \\uD835\\uDC1C\\uD835\\uDC28\\uD835\\uDC27\\uD835\\uDC27\\uD835\\uDC1E\\uD835\\uDC1C\\uD835\\uDC2D?\\n[Linkedin](https://www.linkedin.com/in/anubhav-raj-927083220/)\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        vector <int> v;\\n        v.push_back(n);\\n        for(int j=0; j<v.size(); j++){\\n            for(int i=2; i<=v[j]; i++){\\n                if(v[j]%i==1) {\\n                    if(!count(v.begin(),v.end(),i)) v.push_back(i);\\n                }\\n            }\\n        }\\n        return v.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114172,
                "title": "java-2-lines-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3113548,
                "title": "simple-cpp-datta-bayo",
                "content": "2 line ahet kay bghto rao abhays kar bhava.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```\\n![image.png](https://assets.leetcode.com/users/images/a86eb68d-a333-466f-9616-37ab2a3c556e_1674995870.758503.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3113428,
                "title": "o-1-solution-with-0ms-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        \\n        if( n == 1 ) return 1;\\n\\n        return ( n - 1 );\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        \\n        if( n == 1 ) return 1;\\n\\n        return ( n - 1 );\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3113243,
                "title": "python-1-line-n-1",
                "content": "```python\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return max(1, n - 1)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return max(1, n - 1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3113224,
                "title": "100-fast-very-easy-c-solution",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if (n==1)return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Brainteaser"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if (n==1)return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112764,
                "title": "easy-to-understand-python3-solution",
                "content": "\\n![image.png](https://assets.leetcode.com/users/images/cb6bbbeb-5bce-4da0-a81f-ae8355323536_1674981075.2365913.png)\\n\\n# Complexity\\n- Time complexity:  O(1)\\n\\n\\n- Space complexity: O(1)\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n      if n==1:\\n        return 1\\n      return n-1\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n      if n==1:\\n        return 1\\n      return n-1\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112566,
                "title": "python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n>1 else 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n>1 else 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112383,
                "title": "single-line-solution-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return (n==1) ? 1 : n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return (n==1) ? 1 : n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112283,
                "title": "simple-solution-using-hashfunction",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void fun(int n,vector<int>&hash) {\\n        for(int i = 2;i<n;i++){\\n            if(n%i == 1) {\\n                hash[i] = 1;\\n                fun(i,hash);\\n            }\\n        }\\n    }\\n    int distinctIntegers(int n) {\\n        vector<int>hash(101,0);\\n        fun(n,hash);\\n        int count = 0;\\n        for(int i=1;i<=100;i++){\\n            if(hash[i]>0) count++;\\n        }\\n        return count+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Function"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void fun(int n,vector<int>&hash) {\\n        for(int i = 2;i<n;i++){\\n            if(n%i == 1) {\\n                hash[i] = 1;\\n                fun(i,hash);\\n            }\\n        }\\n    }\\n    int distinctIntegers(int n) {\\n        vector<int>hash(101,0);\\n        fun(n,hash);\\n        int count = 0;\\n        for(int i=1;i<=100;i++){\\n            if(hash[i]>0) count++;\\n        }\\n        return count+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112232,
                "title": "c-easiest-solution-beats-100-success-3-line-code",
                "content": "# Intuition\\nJust try to check for n<=2 else ans will be n-1;\\n\\n# Approach\\n- Simple Solution, Just Check Solution - ANY DOUBT STILL _ COMMENT DOWN\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# 100 % Success - Image\\n\\n![Screenshot 2023-01-29 113335.png](https://assets.leetcode.com/users/images/fcf6e9f2-c4ce-4330-8f24-123197196d67_1674972404.140721.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n<=2)\\n        return 1;\\n        else\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n<=2)\\n        return 1;\\n        else\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111788,
                "title": "o-1-time-and-space-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nPicking a few n by hand and analyzing the problem yields a pattern that for any n (n >= 2) all integers 2 to n will eventually get on the board. (Exception n = 1)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nExample: n = 10\\nAt first just 10 is on the board\\nNext, 3 and 9 added (Note: 10 - 1 is 9, 3 and 9 are factors of 9 and 10 % 9 -> 1)\\nThen, 2 and 4 and 8 are added (Note: 9 - 1 = 8, 2, 4, and 8 are factors of 8 and 9 % 2 -> 1)\\nAfter that, 7 (8 % 7 -> 1), then 6 (7 % 6 -> 1), then finally 5 (6 % 5 = 1)\\n\\nIn general this pattern will hold for all n >= 2 and eventually all numbers from 2 to n will get on the board.\\n\\nEdge Case: n = 1\\n1 will simply remain on the board so answer is 1.\\n\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n == 1)\\n            return 1;\\n        return n - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n == 1)\\n            return 1;\\n        return n - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111746,
                "title": "easy-python-solution-arrays",
                "content": "# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        arr = [i for i in range(1, n)]\\n        req = [n]\\n        count = 1\\n        while True:\\n            flag = 0\\n            for i in range(len(arr)):\\n                for j in req:\\n                    if arr[i] in req:\\n                        continue\\n                    if j % arr[i] == 1:\\n                        req.append(arr[i])\\n                        count += 1\\n                        flag = 1\\n                \\n            if flag == 0:\\n                break\\n        return count       \\n```\\nDo upvote of you like the Solution :)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        arr = [i for i in range(1, n)]\\n        req = [n]\\n        count = 1\\n        while True:\\n            flag = 0\\n            for i in range(len(arr)):\\n                for j in req:\\n                    if arr[i] in req:\\n                        continue\\n                    if j % arr[i] == 1:\\n                        req.append(arr[i])\\n                        count += 1\\n                        flag = 1\\n                \\n            if flag == 0:\\n                break\\n        return count       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111741,
                "title": "easy-java-solution-100-faster",
                "content": "\\n- Time complexity: O(1)\\n- Space complexity: O(1\\n\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        \\n        if(n==1 || n==2) return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        \\n        if(n==1 || n==2) return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111681,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(1)$$\\n\\n- Space complexity:$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){return 1;}\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){return 1;}\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111662,
                "title": "python3-solution",
                "content": "\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n==1:\\n            return 1\\n        else:\\n            return n-1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n==1:\\n            return 1\\n        else:\\n            return n-1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4086608,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }else{\\n            return n-1;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }else{\\n            return n-1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079001,
                "title": "easy-cpp-solution-beats-100-in-runtime-beginner-friendly",
                "content": "![image.png](https://assets.leetcode.com/users/images/2decc370-3080-4759-b2f9-46506bb73b8f_1695444541.567695.png)\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- As all the numbers less than the N can occur in any of the order as each time N-1 is taken into considereation becuase N%N-1 == 1.\\n- Only in case of 1, the possible answer is 1 itself and we can\\'t return N-1 which is 0, so we return 1.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077472,
                "title": "o-1-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075721,
                "title": "one-liner-o-1-time-complexity-space-complexity-cpp-soultion",
                "content": "\\n---\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAs Every number will be inserted like n =5 then number n-1 = 4 which gives result \\n5 % 4 = 1 . So Now 4 will be inserted 4-1 =3 which gives\\n4 % 3 = 1 . So Now insert 3 \\n3 % 2 = 1 . So Now insert 2\\n2 % 1 = 0 . Now it doesn\\'t satisfy the property . Therefore we have to just return n-1 and if n==1 return 1;\\n\\n---\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n        O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)return n;\\n        return n-1;\\n        }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)return n;\\n        return n-1;\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059444,
                "title": "2549-simple-c-one-liner-solution-0ms-runtime",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n>1?n-1:1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n>1?n-1:1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055596,
                "title": "count-distinct-numbers-on-board-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFind the minimum number of days required to find the number of distinct numbers in the board.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst find the maximum storage of the board array which is n - 1.\\nThen simultaneously add distinct numbers in the board.\\nThen return the length of the board array;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n    int s;\\n    //calculating storage of the board array\\n    if (n <= 1) {\\n      s = n;\\n    } else {\\n      s = n - 1;\\n    }\\n  int B[s], k = 0;\\n  B[k] = n;\\n  int d = 1;\\n  while (d <= 1000)\\n  {\\n    for (int i = 0; i < k+1; i++)\\n    {\\n      for (int j = 1; j <= n; j++)\\n      {\\n        if (B[i] % j == 1)\\n        {\\n          //checking for duplicacy in board array\\n          int countB = 0;\\n          for (int a = 0; a < s; a++)\\n          {\\n            if (j == B[a])\\n            {\\n              countB++;\\n            }\\n          }\\n          if (countB == 0)\\n          {\\n           //adding number in the board\\n            B[k + 1] = j;\\n            k++;\\n          }\\n        }\\n      }\\n      d++;\\n      if (d > 1000)\\n      {\\n        break;\\n      }\\n    }\\n  }\\n  sort(B, B + s);\\n  int countDis = 0;\\n  //calculating length of the board\\n  for (int i = 0; i < s; i++) {\\n    countDis++;\\n  }\\n  return countDis;\\n }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n    int s;\\n    //calculating storage of the board array\\n    if (n <= 1) {\\n      s = n;\\n    } else {\\n      s = n - 1;\\n    }\\n  int B[s], k = 0;\\n  B[k] = n;\\n  int d = 1;\\n  while (d <= 1000)\\n  {\\n    for (int i = 0; i < k+1; i++)\\n    {\\n      for (int j = 1; j <= n; j++)\\n      {\\n        if (B[i] % j == 1)\\n        {\\n          //checking for duplicacy in board array\\n          int countB = 0;\\n          for (int a = 0; a < s; a++)\\n          {\\n            if (j == B[a])\\n            {\\n              countB++;\\n            }\\n          }\\n          if (countB == 0)\\n          {\\n           //adding number in the board\\n            B[k + 1] = j;\\n            k++;\\n          }\\n        }\\n      }\\n      d++;\\n      if (d > 1000)\\n      {\\n        break;\\n      }\\n    }\\n  }\\n  sort(B, B + s);\\n  int countDis = 0;\\n  //calculating length of the board\\n  for (int i = 0; i < s; i++) {\\n    countDis++;\\n  }\\n  return countDis;\\n }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4054455,
                "title": "c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n>1)\\n        {\\n          return n-1;\\n        }\\n        return 1;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n>1)\\n        {\\n          return n-1;\\n        }\\n        return 1;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4053332,
                "title": "simpliest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n - 1 if n > 1 else 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n - 1 if n > 1 else 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4050358,
                "title": "c-easy-set-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n      set<int>st;\\n      vector<int>v;\\n        st.insert(n);\\n        //v.push_back(n);\\n        bool flag=false;\\n        vector<bool>vis(n,false);\\n        while(n>1)\\n        {\\n      if(st.find(n)!=st.end())\\n           for(int i=2;i<n;i++)\\n             {\\n             if(n%i==1)\\n                st.insert(i);\\n              }\\n              else break;\\n           n--;\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n      set<int>st;\\n      vector<int>v;\\n        st.insert(n);\\n        //v.push_back(n);\\n        bool flag=false;\\n        vector<bool>vis(n,false);\\n        while(n>1)\\n        {\\n      if(st.find(n)!=st.end())\\n           for(int i=2;i<n;i++)\\n             {\\n             if(n%i==1)\\n                st.insert(i);\\n              }\\n              else break;\\n           n--;\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034568,
                "title": "simple-c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        queue<int>q;\\n        set<int>st;\\n        q.push(n);\\n        st.insert(n);\\n        while(!q.empty()){\\n            int x = q.front();\\n            q.pop();\\n            for(int i =1;i<x;i++){\\n                if(x%i==1){\\n                    q.push(i);\\n                    st.insert(i);\\n                    // cout<<i<<endl;\\n                    \\n                }\\n            }\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        queue<int>q;\\n        set<int>st;\\n        q.push(n);\\n        st.insert(n);\\n        while(!q.empty()){\\n            int x = q.front();\\n            q.pop();\\n            for(int i =1;i<x;i++){\\n                if(x%i==1){\\n                    q.push(i);\\n                    st.insert(i);\\n                    // cout<<i<<endl;\\n                    \\n                }\\n            }\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4020410,
                "title": "beat-84-in-time-and-90-in-memory-very-easy-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n<=1:\\n            return n\\n        return n-1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n<=1:\\n            return n\\n        return n-1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017331,
                "title": "n-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4015694,
                "title": "very-basic-java-soln-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999788,
                "title": "1-line-code-super-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999245,
                "title": "100-faster-soluiton",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n            return 1;\\n\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n            return 1;\\n\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3996998,
                "title": "0ms-beats-100-00-of-users-with-java",
                "content": "# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976141,
                "title": "java-very-easy-solution-with-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n == 1)  return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n == 1)  return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3968305,
                "title": "easy-to-understand-python3-solution-more-conceptual-than-just-return-n-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        i = n\\n\\n        output = [n]\\n\\n        while i > 0:\\n            for j in output:\\n                if j % i == 1:\\n                    output.append(i)\\n            i -= 1\\n        \\n        print(output)\\n\\n        return len(set(output))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        i = n\\n\\n        output = [n]\\n\\n        while i > 0:\\n            for j in output:\\n                if j % i == 1:\\n                    output.append(i)\\n            i -= 1\\n        \\n        print(output)\\n\\n        return len(set(output))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949424,
                "title": "clever-modulo-based-integer-propagation-tracking-distinct-numbers-over-109-days",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar distinctIntegers = function(n) {\\n    if(n===1){\\n        return 1\\n    }\\n    return n-1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar distinctIntegers = function(n) {\\n    if(n===1){\\n        return 1\\n    }\\n    return n-1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3948496,
                "title": "java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n <= 2){\\n            return 1;\\n        }\\n        HashSet<Integer> set = new HashSet<>();\\n        for (int i = 1; i <= n; i++){\\n            for (int j = 1; j <= n; j++){\\n                if (i % j == 1){\\n                    set.add(i);\\n                }\\n            }\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "Hash Function"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n <= 2){\\n            return 1;\\n        }\\n        HashSet<Integer> set = new HashSet<>();\\n        for (int i = 1; i <= n; i++){\\n            for (int j = 1; j <= n; j++){\\n                if (i % j == 1){\\n                    set.add(i);\\n                }\\n            }\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3937789,
                "title": "easy-c-solution-beginner-s-friendly",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1 ? 1 : n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1 ? 1 : n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925517,
                "title": "easy-java-solution-2-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923040,
                "title": "c-solution-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int DistinctIntegers(int n) {\\n       \\n      HashSet<int>hs=new HashSet<int>();\\n        while(n>0){\\n            for(int i=1;i<=n;i++){\\n                if(n%i==1){\\n                    hs.Add(i);\\n                }\\n            }\\n            n=n-1;\\n        }\\n        return hs.Count+1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistinctIntegers(int n) {\\n       \\n      HashSet<int>hs=new HashSet<int>();\\n        while(n>0){\\n            for(int i=1;i<=n;i++){\\n                if(n%i==1){\\n                    hs.Add(i);\\n                }\\n            }\\n            n=n-1;\\n        }\\n        return hs.Count+1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3906318,
                "title": "java-recursion",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n         int a=0;\\n         if(n==1)return 1;\\n         if(n==2)return 1;\\n        for(int i=2;i<n;i++){\\n            if(n%i==1){\\n                a=distinctIntegers(i)+1;\\n            }\\n        }\\n        return a;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n         int a=0;\\n         if(n==1)return 1;\\n         if(n==2)return 1;\\n        for(int i=2;i<n;i++){\\n            if(n%i==1){\\n                a=distinctIntegers(i)+1;\\n            }\\n        }\\n        return a;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894919,
                "title": "best-solution-from-annamyrat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int DistinctIntegers(int n) {\\n     return n == 1 ? 1 : n - 1 ;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistinctIntegers(int n) {\\n     return n == 1 ? 1 : n - 1 ;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3891548,
                "title": "count-distinct-numbers-on-board",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885385,
                "title": "count-distinct-numbers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n!=1 else 1       \\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Hash Table",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n!=1 else 1       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879767,
                "title": "masum-code-c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        queue<int>q;\\n        set<int>st;\\n        q.push(n);\\n        st.insert(n);\\n        int count=1,x;\\n        while(!q.empty())\\n        {\\n            x=q.front();\\n            q.pop();\\n            for(int i=1;i<=x;i++)\\n            {\\n                if(x%i==1)\\n                {\\n                    if(st.count(i)==0)\\n                    {\\n                        count++;\\n                    q.push(i);\\n                    st.insert(i);\\n                    }\\n                }\\n            } \\n        }\\n        return count;\\n        }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        queue<int>q;\\n        set<int>st;\\n        q.push(n);\\n        st.insert(n);\\n        int count=1,x;\\n        while(!q.empty())\\n        {\\n            x=q.front();\\n            q.pop();\\n            for(int i=1;i<=x;i++)\\n            {\\n                if(x%i==1)\\n                {\\n                    if(st.count(i)==0)\\n                    {\\n                        count++;\\n                    q.push(i);\\n                    st.insert(i);\\n                    }\\n                }\\n            } \\n        }\\n        return count;\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3877424,
                "title": "masum-code-c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n};         \\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n};         \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3876662,
                "title": "beats-100-c-solution-with-queue",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        queue<int> q;\\n        q.push(n);\\n        set<int> s;\\n\\n        while(!q.empty()){\\n            int num = q.front();\\n            q.pop();\\n            s.insert(num);\\n\\n            for(int i = num-1;i > 1;i--){\\n                if(num % i == 1 && s.find(i) == s.end())\\n                    s.insert(i), q.push(i);\\n            }   \\n        }\\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        queue<int> q;\\n        q.push(n);\\n        set<int> s;\\n\\n        while(!q.empty()){\\n            int num = q.front();\\n            q.pop();\\n            s.insert(num);\\n\\n            for(int i = num-1;i > 1;i--){\\n                if(num % i == 1 && s.find(i) == s.end())\\n                    s.insert(i), q.push(i);\\n            }   \\n        }\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3860993,
                "title": "python",
                "content": "\\n# Code\\n```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 1:\\n            return 1\\n        else:\\n            return n - 1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 1:\\n            return 1\\n        else:\\n            return n - 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856773,
                "title": "only-one-line-of-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return int(n == 1) or n - 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return int(n == 1) or n - 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841027,
                "title": "java-easy-solution",
                "content": "# Intuition\\nUsing dummy array\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\no(n);\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) \\n    {\\n    int []arr=new int[n];\\n    arr[n-1]=n;\\n    int j=n-1;\\n    int count=1;\\n    for(int i=n-1;i>=1;i--)\\n    {\\n     if(arr[j]%i==1){\\n         j--;\\n         arr[j]=i;\\n         count++;\\n     }\\n\\n    }\\n    return count;\\n \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) \\n    {\\n    int []arr=new int[n];\\n    arr[n-1]=n;\\n    int j=n-1;\\n    int count=1;\\n    for(int i=n-1;i>=1;i--)\\n    {\\n     if(arr[j]%i==1){\\n         j--;\\n         arr[j]=i;\\n         count++;\\n     }\\n\\n    }\\n    return count;\\n \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3833845,
                "title": "c-easiest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs every number n greater than 2 surely has (n-1) such that (n%(n-1) == 1). Thus, final ans will be n-1.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){\\n            return n;\\n        }return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){\\n            return n;\\n        }return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3820751,
                "title": "easy-approach-without-any-loop-or-hashtable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3808005,
                "title": "easy-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n      return n-1;  \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n      return n-1;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790581,
                "title": "python-brute-force",
                "content": "**Thought of this as something like the level order traversal, finding children for each node then their children then their children which satisfy the given condition.**\\n```  \\n        board = deque()\\n        board.append(n)\\n        vis = set()\\n        c = 0\\n        \\n        while board:\\n            x = board.popleft()\\n            c += 1\\n            for i in range(1, x+1):\\n                if x%i == 1 and i not in vis:\\n                    board.append(i)\\n                    vis.add(i)\\n                    print(i)\\n        return c\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```  \\n        board = deque()\\n        board.append(n)\\n        vis = set()\\n        c = 0\\n        \\n        while board:\\n            x = board.popleft()\\n            c += 1\\n            for i in range(1, x+1):\\n                if x%i == 1 and i not in vis:\\n                    board.append(i)\\n                    vis.add(i)\\n                    print(i)\\n        return c\\n        \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3782148,
                "title": "100-faster-and-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1 ) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1 ) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3775712,
                "title": "count-distinct-numbers-js-one-line-solution-62-ms",
                "content": "```\\nvar distinctIntegers = function(n) {\\n    return n > 1 ? n - 1 : 1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar distinctIntegers = function(n) {\\n    return n > 1 ? n - 1 : 1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3768401,
                "title": "69-times-run-this-loop",
                "content": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n){\\n        unordered_set<int>st;\\n        st.insert(n);\\n        int p=69;\\n        while(p--){\\n            for(int i=2; i<n; i++){\\n                for(auto j:st){\\n                    if(j%i==1){\\n                        st.insert(i);\\n                    }\\n                }\\n            }\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n){\\n        unordered_set<int>st;\\n        st.insert(n);\\n        int p=69;\\n        while(p--){\\n            for(int i=2; i<n; i++){\\n                for(auto j:st){\\n                    if(j%i==1){\\n                        st.insert(i);\\n                    }\\n                }\\n            }\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3739349,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(logn)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar distinctIntegers = function(n) {\\n    if(n == 1) return 1;\\n    return n-1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar distinctIntegers = function(n) {\\n    if(n == 1) return 1;\\n    return n-1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3735084,
                "title": "simplest-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n       if(n==1)\\n            return 1;\\n        return n-1;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n       if(n==1)\\n            return 1;\\n        return n-1;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3717436,
                "title": "1-line-c",
                "content": "Everyday before n-th day must be have atleast module equal to one,\\nfor e.g :\\nif n = 5, then\\n5 % 4 = 1\\n4 % 3 = 1 and so on \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3709009,
                "title": "100-very-easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n    //    unordered_set<int>s;\\n    //    while(n>0){\\n    //        int i=1;\\n    //        while(i<n){\\n    //            if(n%i==1){s.insert(i);}\\n    //            i++;\\n    //        }\\n    //     n--;\\n    //    } \\n    //    return s.size()+1;\\n    if(n==1) return n;\\n    return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n    //    unordered_set<int>s;\\n    //    while(n>0){\\n    //        int i=1;\\n    //        while(i<n){\\n    //            if(n%i==1){s.insert(i);}\\n    //            i++;\\n    //        }\\n    //     n--;\\n    //    } \\n    //    return s.size()+1;\\n    if(n==1) return n;\\n    return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3700310,
                "title": "easiest-approach-ever-c-easy-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem.\\n -->\\njust return n-1, in case of n=1, print 1.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3671541,
                "title": "python-simulation",
                "content": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        def open(x: int) -> Generator:\\n            return ( i for i in range(1, n + 1) if x % i == 1 )\\n\\n        def simulate(board: list) -> list:\\n            nested = ( open(a) for a in board )\\n            adds = [ a for sublist in nested for a in sublist ]\\n            # return distinct numbers\\n            return list(set(board + adds))\\n\\n        board = [ n ]\\n        for _ in range(10**9 + 1):\\n            orig = board\\n            board = simulate(board)\\n            # check for convergence\\n            if board == orig: break\\n\\n        return len(board)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        def open(x: int) -> Generator:\\n            return ( i for i in range(1, n + 1) if x % i == 1 )\\n\\n        def simulate(board: list) -> list:\\n            nested = ( open(a) for a in board )\\n            adds = [ a for sublist in nested for a in sublist ]\\n            # return distinct numbers\\n            return list(set(board + adds))\\n\\n        board = [ n ]\\n        for _ in range(10**9 + 1):\\n            orig = board\\n            board = simulate(board)\\n            # check for convergence\\n            if board == orig: break\\n\\n        return len(board)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3646748,
                "title": "c-solution-4ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        vector<int> arr;\\n        for(int i=1;i<=n;i++){\\n            if(n%i==1){\\n                arr.push_back(i);\\n            }\\n        }\\n        if(arr.size()==0){\\n            return 1;\\n        }\\n        int count = 1;\\n        for(int i=0;i<arr.size();i++){\\n            for(int j=1;j<=n;j++){\\n                if(arr[i]%j==1){\\n                    if(find(arr.begin(),arr.end(),j)!=arr.end()){\\n                        continue;\\n                    }\\n                    else{\\n                        arr.push_back(j);\\n                    }\\n                }\\n            }\\n        }\\n        return arr.size()+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        vector<int> arr;\\n        for(int i=1;i<=n;i++){\\n            if(n%i==1){\\n                arr.push_back(i);\\n            }\\n        }\\n        if(arr.size()==0){\\n            return 1;\\n        }\\n        int count = 1;\\n        for(int i=0;i<arr.size();i++){\\n            for(int j=1;j<=n;j++){\\n                if(arr[i]%j==1){\\n                    if(find(arr.begin(),arr.end(),j)!=arr.end()){\\n                        continue;\\n                    }\\n                    else{\\n                        arr.push_back(j);\\n                    }\\n                }\\n            }\\n        }\\n        return arr.size()+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3646742,
                "title": "java-solution-8ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        ArrayList<Integer> arr = new ArrayList<>();\\n        for(int i=1;i<=n;i++){\\n            if(n%i==1){\\n                arr.add(i);\\n            }\\n        }\\n        if(arr.size()==0){\\n            return 1;\\n        }\\n        int count = 1;\\n        for(int i=0;i<arr.size();i++){\\n            for(int j=1;j<=n;j++){\\n                if(arr.get(i)%j==1){\\n                    if(arr.contains(j)){\\n                        continue;\\n                    }\\n                    else{\\n                        arr.add(j);\\n                    }\\n                }\\n            }\\n        }\\n        return arr.size()+1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        ArrayList<Integer> arr = new ArrayList<>();\\n        for(int i=1;i<=n;i++){\\n            if(n%i==1){\\n                arr.add(i);\\n            }\\n        }\\n        if(arr.size()==0){\\n            return 1;\\n        }\\n        int count = 1;\\n        for(int i=0;i<arr.size();i++){\\n            for(int j=1;j<=n;j++){\\n                if(arr.get(i)%j==1){\\n                    if(arr.contains(j)){\\n                        continue;\\n                    }\\n                    else{\\n                        arr.add(j);\\n                    }\\n                }\\n            }\\n        }\\n        return arr.size()+1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3645517,
                "title": "1-line-solution-java",
                "content": "# Intuition\\nDon\\'t think too big\\n\\n# Approach\\nEasy understanding\\n\\n# Complexity\\n- Time complexity:\\n**O(1)**;\\n- Space complexity:\\n**O(1)**\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3631856,
                "title": "bfs-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        q = deque()\\n        q.append(n)\\n        visited = set()\\n        visited.add(n)\\n        ans = 1\\n        while q:\\n            curr = q.popleft()\\n            for i in range(1, curr+1):\\n                if curr % i == 1 and i not in visited:\\n                    ans+=1\\n                    q.append(i)\\n                    visited.add(i)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        q = deque()\\n        q.append(n)\\n        visited = set()\\n        visited.add(n)\\n        ans = 1\\n        while q:\\n            curr = q.popleft()\\n            for i in range(1, curr+1):\\n                if curr % i == 1 and i not in visited:\\n                    ans+=1\\n                    q.append(i)\\n                    visited.add(i)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630369,
                "title": "easy-the-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n == 1){\\n            return 1;\\n        }\\n        return n - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n == 1){\\n            return 1;\\n        }\\n        return n - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3629875,
                "title": "my-sol-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n == 1){\\n            return 1;\\n        }\\n        return n - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n == 1){\\n            return 1;\\n        }\\n        return n - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3628234,
                "title": "fastest-logical-solution",
                "content": "# Approach \\n Possiblity range of n is from 1 to 100. Each sycle we can add k-1 for number k because k % k-1 = 1. this means with 100 sycle we can add all elements from 1 to k. According to questions, we should sycle 1 000 0000 0000 (million) times. As the result, we always get answer n - 1 if n is not 1.  \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n      if(n == 1) return 1;\\n      return n-1;  \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n      if(n == 1) return 1;\\n      return n-1;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3626566,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3614199,
                "title": "100-beating-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3603653,
                "title": "one-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n == 1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3593077,
                "title": "java-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3592070,
                "title": "beats-100",
                "content": "# Intuition\\nBasically its a really long time. Therefore it will be very difficult to iterate 10^9 times, so we will think by refering the test cases and then learning by considering some other test cases too.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n*****O(1) - we used constant time for every value of n*****\\n\\n- Space complexity:\\n***O(1) - we used constant space for every problem***\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return n;\\n        return n - 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return n;\\n        return n - 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3571903,
                "title": "logical-python-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize a list nums with n as its only element. This list will store the distinct integers that satisfy the condition.\\n2. Iterate through the elements x in nums.\\n3. For each x, iterate through the range from 1 to x-1 using the variable i.\\n4. Inside the inner loop, check if x modulo i is equal to 1 (x%i == 1). Additionally, check if i is not already present in the nums list (i not in nums).\\n5. If both conditions are satisfied, append i to the nums list.\\n6. Repeat steps 2-5 for each newly added element in nums until no more elements are added.\\n7. Return the length of the nums list, which represents the count of distinct integers satisfying the condition.\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        nums = [n]\\n        for x in nums:\\n            for i in range(1,x):\\n                if x%i == 1 and i not in nums:\\n                    nums.append(i)\\n        return len(nums)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        nums = [n]\\n        for x in nums:\\n            for i in range(1,x):\\n                if x%i == 1 and i not in nums:\\n                    nums.append(i)\\n        return len(nums)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3569263,
                "title": "java-fastest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        int count=0;\\n         \\n        while(n>=2){\\n            n=n-1;\\ncount++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        int count=0;\\n         \\n        while(n>=2){\\n            n=n-1;\\ncount++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550242,
                "title": "1-line-code-solution-in-python-use-ternary-operation-beats-85-90-runtime-15ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n > 1 else n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n > 1 else n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3530117,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-99-98-memory",
                "content": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3519033,
                "title": "simplest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3513452,
                "title": "two-line-simple-java-solution-0ms-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n).\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return (n-1);//so simple :)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return (n-1);//so simple :)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3512426,
                "title": "beats-100-2line-code-easiest-one",
                "content": "]\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n         return 1;\\n      return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n         return 1;\\n      return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3503819,
                "title": "smpl-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       if(n==1)\\n       return n;\\n       else\\n       return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       if(n==1)\\n       return n;\\n       else\\n       return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497760,
                "title": "easy-funny-solution-java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3495798,
                "title": "one-liner-explained",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n       if(n==1)\\n       return 1;\\n       return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n       if(n==1)\\n       return 1;\\n       return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3485068,
                "title": "c-made-simple-one-line-answer-ternary",
                "content": "# Intuition and Approach\\n- 10**9 is very large. \\n- If n > 1, 0 and 1 will never be on the board.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int DistinctIntegers(int n) {\\n        // Observations: 0, 1 will never be on the board.\\n        return n == 1 ? 1 : n - 1 ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistinctIntegers(int n) {\\n        // Observations: 0, 1 will never be on the board.\\n        return n == 1 ? 1 : n - 1 ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3481360,
                "title": "100-beats-0ms-clean-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        int count=1;\\n       for(int i=n;i>1;i--)\\n      {\\n          if(n%i==1)\\n          {\\n              count++;\\n              n=i;\\n          }\\n      }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        int count=1;\\n       for(int i=n;i>1;i--)\\n      {\\n          if(n%i==1)\\n          {\\n              count++;\\n              n=i;\\n          }\\n      }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3475257,
                "title": "proper-solution-using-queue-and-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N^2)<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(2N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        set<int>s;\\n        int count=0;\\n        queue<int>q;\\n        q.push(n);\\n        while(!q.empty())\\n        {\\n            int c=q.front();\\n            s.insert(c);\\n            q.pop();\\n            for(int i=2; i<c; i++)\\n            {\\n                if(c%i==1)\\n                q.push(i);\\n            }\\n        }\\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        set<int>s;\\n        int count=0;\\n        queue<int>q;\\n        q.push(n);\\n        while(!q.empty())\\n        {\\n            int c=q.front();\\n            s.insert(c);\\n            q.pop();\\n            for(int i=2; i<c; i++)\\n            {\\n                if(c%i==1)\\n                q.push(i);\\n            }\\n        }\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3470238,
                "title": "count-distinct-numbers-on-board-easiest-with-c-in-0ms-runtime",
                "content": "\\n# Complexity\\n- Time complexity:$$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n == 1)\\n            return n;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n == 1)\\n            return n;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467839,
                "title": "easy-c-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        vector<int> board;\\n        board.push_back(n);\\n        int i=0;\\n        while(i<board.size())\\n        {\\n            for(int j=2;j<=board[i]-1;j++)\\n            {\\n                if((find(board.begin(), board.end(), j) == board.end()) && board[i]%j == 1)\\n                {\\n                    board.push_back(j);\\n                }\\n            }\\n            i++;\\n        }\\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        vector<int> board;\\n        board.push_back(n);\\n        int i=0;\\n        while(i<board.size())\\n        {\\n            for(int j=2;j<=board[i]-1;j++)\\n            {\\n                if((find(board.begin(), board.end(), j) == board.end()) && board[i]%j == 1)\\n                {\\n                    board.push_back(j);\\n                }\\n            }\\n            i++;\\n        }\\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3450222,
                "title": "easy-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n-1;\\n        // upvote if helpful\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n-1;\\n        // upvote if helpful\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3447042,
                "title": "c-one-line-code-simple-and-easy-approach",
                "content": "# Intuition\\nWe have to count the number of distinct numbers on board, where each number n on board is such that for a particular number x on board, it satisfies x%n==1, and we have to consider for numbers within the range 1<=n<=x, and x is the first number to be present on the board\\n\\n# Approach\\nFor any number n, there are n-1 such numbers on board, however for 1 there is 1 only, so we check, if the number is 1 we return 1 otherwise we return n-1\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444994,
                "title": "beats-100-one-liner-easiest-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Brainteaser"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return n==1?1:n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444933,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n <= 2) {\\n            return 1;\\n        } else {\\n            return n - 1;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if (n <= 2) {\\n            return 1;\\n        } else {\\n            return n - 1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3442170,
                "title": "easy-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1 || n==2) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1 || n==2) return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420503,
                "title": "easy-python-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n == 1:\\n            return 1\\n        return n-1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        if n == 1:\\n            return 1\\n        return n-1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3418407,
                "title": "python3-solution-return-max-n-1-1",
                "content": "# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return max(n - 1, 1)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return max(n - 1, 1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410219,
                "title": "count-distinct-numbers-on-board-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        int count = 0;\\n        for(int i = 2;i<=n;i++){\\n             int a = i;\\n             count++;   \\n        }\\n        if(n == 1){\\n        return 1;}\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        int count = 0;\\n        for(int i = 2;i<=n;i++){\\n             int a = i;\\n             count++;   \\n        }\\n        if(n == 1){\\n        return 1;}\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3399665,
                "title": "count-distinct-numbers-on-board",
                "content": "------------- Easy C++ Solution ----------------\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       return max(n - 1, 1);  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       return max(n - 1, 1);  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3399410,
                "title": "java-simple-solution-o-1",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    \\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    \\n    public int distinctIntegers(int n) {\\n        return Math.max(n - 1, 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3398170,
                "title": "beats-100-0-ms-3-line-very-easy-beginner-friendly-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n<=2)\\n            return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        if(n<=2)\\n            return 1;\\n        return n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3396479,
                "title": "c-solution-1-line",
                "content": "```\\nint distinctIntegers(int n) {\\n\\treturn n > 2 ? n - 1 : 1;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint distinctIntegers(int n) {\\n\\treturn n > 2 ? n - 1 : 1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3394914,
                "title": "using-java-beats-100-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        int count=0;\\n        if(n<=2)return 1;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(n%(n-1)==1)count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        int count=0;\\n        if(n<=2)return 1;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(n%(n-1)==1)count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3394247,
                "title": "online-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return (n==1)?1:n-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctIntegers(int n) {\\n        return (n==1)?1:n-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3389662,
                "title": "python-almost-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> If 10**9 doesn\\'t work try in less days... like 10\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBrute Force\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n2)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n  $$O(n)$$\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        list_n = [n]\\n        counter = 10\\n\\n        while(counter>0):\\n            idx = 0\\n            for number in list_n:\\n                for i in range(1, number):\\n                    if(number%i == 1):\\n                        if i not in list_n:\\n                            list_n.append(i)\\n            counter-=1\\n\\n        return len(list_n)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        list_n = [n]\\n        counter = 10\\n\\n        while(counter>0):\\n            idx = 0\\n            for number in list_n:\\n                for i in range(1, number):\\n                    if(number%i == 1):\\n                        if i not in list_n:\\n                            list_n.append(i)\\n            counter-=1\\n\\n        return len(list_n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3387210,
                "title": "c-2-simple-solution-100-beats",
                "content": "# 100% Beats\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n};\\n```\\n# 16% Beats not a good Approch\\uD83E\\uDD23\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        vector<int>v;\\n        while(n!=1)\\n        {\\n            if(n%(n-1)==1)v.push_back(n-1);\\n            n--;\\n        }\\n        return v.size()+1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        vector<int>v;\\n        while(n!=1)\\n        {\\n            if(n%(n-1)==1)v.push_back(n-1);\\n            n--;\\n        }\\n        return v.size()+1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3383297,
                "title": "beats-100-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       if (n==1)\\n            return 1;\\n       else\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n       if (n==1)\\n            return 1;\\n       else\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3380734,
                "title": "easy-c-solution-with-o-1-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)\\n        return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3379831,
                "title": "very-easy-c-solution-3-line-solution-o-1-complexity",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1)\\n           return 1;   \\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1)\\n           return 1;   \\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3376314,
                "title": "easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1)\\n        {\\n            return n;\\n        }   \\n        else\\n        {\\n            return n-1;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) \\n    {\\n        if(n==1)\\n        {\\n            return n;\\n        }   \\n        else\\n        {\\n            return n-1;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3375619,
                "title": "easy-c-single-line-sol",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1)return 1;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3360872,
                "title": "python-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 1 or n == 2:\\n            return 1\\n        else: \\n            board = set()\\n            \\n            while n > 0:\\n                x = 1\\n                while x < n:\\n                    if n % x == 1:\\n                        board.add(x)\\n                    x += 1    \\n                n -= 1\\n            return len(board) + 1\\n                    \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 1 or n == 2:\\n            return 1\\n        else: \\n            board = set()\\n            \\n            while n > 0:\\n                x = 1\\n                while x < n:\\n                    if n % x == 1:\\n                        board.add(x)\\n                    x += 1    \\n                n -= 1\\n            return len(board) + 1\\n                    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358136,
                "title": "o-1-100-beats-c-solution",
                "content": "if(n==1){\\n            return 1;\\n        }\\n      return (n-1)%n;",
                "solutionTags": [],
                "code": "if(n==1){\\n            return 1;\\n        }\\n      return (n-1)%n;",
                "codeTag": "Unknown"
            },
            {
                "id": 3349580,
                "title": "c-one-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        return n == 1 ? 1 : n - 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3347994,
                "title": "c-solution-easy-to-understand-2-lines-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctIntegers(int n) {\\n        if(n==1){\\n            return 1;\\n        }\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3344585,
                "title": "greedy-method-along-with-dp-simple-python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n!=1 else 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return n-1 if n!=1 else 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3325793,
                "title": "python-1-linear",
                "content": "# Intuition\\nn % (n-1) always equals to 1, therefore given n with enough time n-1,n-2,... will be generated for sure.\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return max(n-1,1)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctIntegers(self, n: int) -> int:\\n        return max(n-1,1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3320455,
                "title": "beginner-level-solution-1-liner-beats-91-76-memory",
                "content": "# Approach\\n1. To have a number `x` where `n % x == 1`, we can get x = n-1.\\n2. If we only iterate a few times, then we need to calculate, but question asked us to iterate a billion time, which virtually says that all number from 2 -> n is covered.\\nYou can keep doing `n-1` infinitely till you reach 2 and you can\\'t get anymore dinstinct number.\\n3. 1 is not included because all `i % 1 == 0`.\\n4. So we have `n-1` item\\n\\n# Code\\n```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n\\n        return n-1 if n > 1 else 1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def distinctIntegers(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n\\n        return n-1 if n > 1 else 1\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1782654,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "n-1 is a brain teaser for spoiled mathematicians..\nI think the naive way is to just read the text and see that days are decreasing and you need to store the numbers with remainder 1 in a hashset. I think this is realistic in interviews, then you can explain how modulo and hashset works and you make a good impression, on the other hand `n-1` can be considered as an optimization"
                    },
                    {
                        "username": "mrahman7749",
                        "content": "Well..they need to review the question...return n-1 does the trick!!"
                    },
                    {
                        "username": "HarshitRaj_14",
                        "content": "my coding skills died after reading this question."
                    },
                    {
                        "username": "princethet",
                        "content": "what is use 10^9 days in this question still can\\'t figure it out ?\\n"
                    },
                    {
                        "username": "loulafg",
                        "content": "I believe what is meant is iterate 10\\u2079 times, which is silly af."
                    },
                    {
                        "username": "Brent_Pappas",
                        "content": "I think it\\'s just to confuse you. Also it ensures that the O(1) time solution works."
                    },
                    {
                        "username": "Ashish_Kumar_Itx",
                        "content": "the problem surely gave me the wrong idea and it  deviated me from the easy way .\\nbut then also it was not tough. and if anyone try 2-3 test cases he/she will get the solution easily"
                    }
                ]
            },
            {
                "id": 1781640,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "n-1 is a brain teaser for spoiled mathematicians..\nI think the naive way is to just read the text and see that days are decreasing and you need to store the numbers with remainder 1 in a hashset. I think this is realistic in interviews, then you can explain how modulo and hashset works and you make a good impression, on the other hand `n-1` can be considered as an optimization"
                    },
                    {
                        "username": "mrahman7749",
                        "content": "Well..they need to review the question...return n-1 does the trick!!"
                    },
                    {
                        "username": "HarshitRaj_14",
                        "content": "my coding skills died after reading this question."
                    },
                    {
                        "username": "princethet",
                        "content": "what is use 10^9 days in this question still can\\'t figure it out ?\\n"
                    },
                    {
                        "username": "loulafg",
                        "content": "I believe what is meant is iterate 10\\u2079 times, which is silly af."
                    },
                    {
                        "username": "Brent_Pappas",
                        "content": "I think it\\'s just to confuse you. Also it ensures that the O(1) time solution works."
                    },
                    {
                        "username": "Ashish_Kumar_Itx",
                        "content": "the problem surely gave me the wrong idea and it  deviated me from the easy way .\\nbut then also it was not tough. and if anyone try 2-3 test cases he/she will get the solution easily"
                    }
                ]
            },
            {
                "id": 2067145,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "n-1 is a brain teaser for spoiled mathematicians..\nI think the naive way is to just read the text and see that days are decreasing and you need to store the numbers with remainder 1 in a hashset. I think this is realistic in interviews, then you can explain how modulo and hashset works and you make a good impression, on the other hand `n-1` can be considered as an optimization"
                    },
                    {
                        "username": "mrahman7749",
                        "content": "Well..they need to review the question...return n-1 does the trick!!"
                    },
                    {
                        "username": "HarshitRaj_14",
                        "content": "my coding skills died after reading this question."
                    },
                    {
                        "username": "princethet",
                        "content": "what is use 10^9 days in this question still can\\'t figure it out ?\\n"
                    },
                    {
                        "username": "loulafg",
                        "content": "I believe what is meant is iterate 10\\u2079 times, which is silly af."
                    },
                    {
                        "username": "Brent_Pappas",
                        "content": "I think it\\'s just to confuse you. Also it ensures that the O(1) time solution works."
                    },
                    {
                        "username": "Ashish_Kumar_Itx",
                        "content": "the problem surely gave me the wrong idea and it  deviated me from the easy way .\\nbut then also it was not tough. and if anyone try 2-3 test cases he/she will get the solution easily"
                    }
                ]
            },
            {
                "id": 1784546,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "n-1 is a brain teaser for spoiled mathematicians..\nI think the naive way is to just read the text and see that days are decreasing and you need to store the numbers with remainder 1 in a hashset. I think this is realistic in interviews, then you can explain how modulo and hashset works and you make a good impression, on the other hand `n-1` can be considered as an optimization"
                    },
                    {
                        "username": "mrahman7749",
                        "content": "Well..they need to review the question...return n-1 does the trick!!"
                    },
                    {
                        "username": "HarshitRaj_14",
                        "content": "my coding skills died after reading this question."
                    },
                    {
                        "username": "princethet",
                        "content": "what is use 10^9 days in this question still can\\'t figure it out ?\\n"
                    },
                    {
                        "username": "loulafg",
                        "content": "I believe what is meant is iterate 10\\u2079 times, which is silly af."
                    },
                    {
                        "username": "Brent_Pappas",
                        "content": "I think it\\'s just to confuse you. Also it ensures that the O(1) time solution works."
                    },
                    {
                        "username": "Ashish_Kumar_Itx",
                        "content": "the problem surely gave me the wrong idea and it  deviated me from the easy way .\\nbut then also it was not tough. and if anyone try 2-3 test cases he/she will get the solution easily"
                    }
                ]
            },
            {
                "id": 1783307,
                "content": [
                    {
                        "username": "eduard92",
                        "content": "n-1 is a brain teaser for spoiled mathematicians..\nI think the naive way is to just read the text and see that days are decreasing and you need to store the numbers with remainder 1 in a hashset. I think this is realistic in interviews, then you can explain how modulo and hashset works and you make a good impression, on the other hand `n-1` can be considered as an optimization"
                    },
                    {
                        "username": "mrahman7749",
                        "content": "Well..they need to review the question...return n-1 does the trick!!"
                    },
                    {
                        "username": "HarshitRaj_14",
                        "content": "my coding skills died after reading this question."
                    },
                    {
                        "username": "princethet",
                        "content": "what is use 10^9 days in this question still can\\'t figure it out ?\\n"
                    },
                    {
                        "username": "loulafg",
                        "content": "I believe what is meant is iterate 10\\u2079 times, which is silly af."
                    },
                    {
                        "username": "Brent_Pappas",
                        "content": "I think it\\'s just to confuse you. Also it ensures that the O(1) time solution works."
                    },
                    {
                        "username": "Ashish_Kumar_Itx",
                        "content": "the problem surely gave me the wrong idea and it  deviated me from the easy way .\\nbut then also it was not tough. and if anyone try 2-3 test cases he/she will get the solution easily"
                    }
                ]
            }
        ]
    }
]