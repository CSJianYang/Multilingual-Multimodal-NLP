[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "",
        "code": "\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome(num::Int64)::Int64 \n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = next_smallest_palindrome;",
            "@test(candidate(99) == 101)",
            "@test(candidate(1221) == 1331)",
            "@test(candidate(120) == 121)",
            "end"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "",
        "code": "\tWrite a function to find the kth element in the given vector using 1-based indexing.\nfunction kth_element(arr::Vector{Int64}, k::Int64)::Int64 \n\tFind the kth element in the given vector using 1-based indexing.\n\treturn arr[k::Int64]\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = kth_element;",
            "@test(candidate([12, 3, 5, 7, 19], 2) == 3)",
            "@test(candidate([17, 24, 8, 23], 3) == 8)",
            "@test(candidate([16, 21, 25, 36, 4], 4) == 36)",
            "end"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "",
        "code": "\tWrite a function to convert a snake case string to camel case string.\nfunction snake_to_camel(word::String)::String \n\tConvert a snake case string to camel case string.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = snake_to_camel;",
            "@test(candidate(\"python_program\") == \"PythonProgram\")",
            "@test(candidate(\"python_language\") == \"PythonLanguage\")",
            "@test(candidate(\"programming_language\") == \"ProgrammingLanguage\")",
            "end"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "",
        "code": "\tWrite a function to find the Eulerian number a(n, m).\nfunction eulerian_num(n::Int64, m::Int64)::Int64 \n\tWrite a function to find the Eulerian number a(n, m).\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = eulerian_num;",
            "@test(candidate(3, 1) == 4)",
            "@test(candidate(4, 1) == 11)",
            "@test(candidate(5, 3) == 26)",
            "end"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "",
        "code": "\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(input_list::Vector{Vector{String}})::Vector{Vector{String}} \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sort_sublists;",
            "@test(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])",
            "@test(candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]) == [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]])",
            "@test(candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]) == [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]])",
            "end"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "",
        "code": "\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int64 \n\tWrite a jlthon function to count true booleans in the given vector.\nfunction count(lst::Vector{Bool})::Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count;",
            "@test(candidate([true, false, true]) == 2)",
            "@test(candidate([false, false]) == 0)",
            "@test(candidate([true, true, true]) == 3)",
            "end"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "",
        "code": "\tWrite a function to append the given vector to the given tuples.\nfunction add_lists(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Tuple{Int64, Int64, Int64, Int64, Int64} \n\ttest_list = test_list.append(test_tup)\n\treturn test_list\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = add_lists;",
            "@test(candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7))",
            "@test(candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8))",
            "@test(candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9))",
            "end"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "",
        "code": "\tWrite a function to merge three vectors into a single sorted vector.\nfunction merge_sorted_list(num1::Vector{Int64}, num2::Vector{Int64}, num3::Vector{Int64})::Vector{Int64} \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i1 = 0;\n\tint i2 = 0;\n\tint i3 = 0;\n\tint i4 = 0;\n\tint i5 = 0;\n\tint i6 = 0;\n\tint i7 = 0;\n\tint i8 = 0;\n\tint i9 = 0;\n\tint i10 = 0;\n\tint i11 = 0;\n\tint i12 = 0;\n\tint i13 = 0;\n\tint i14 = 0;\n\tint i15 = 0;\n\tint i16 = 0;\n\tint i17 = 0;\n\tint i18 = 0;\n\tint i19 = 0;\n\tint i20 = 0;\n\tint i21 = 0;\n\tint i22 = 0;\n\tint i23 = 0;\n\tint i24 = 0;\n\tint i25 = 0;\n\tint i26 = 0;\n\tint i27 = 0;\n\tint i28 = 0;\n\tint i29 = 0;\n\tint i30 = 0;\n\tint i31 = 0;\n\tint i32 = 0;\n\tint i33 = 0;\n\tint i\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = merge_sorted_list;",
            "@test(candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233])",
            "@test(candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12])",
            "@test(candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85])",
            "end"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "",
        "code": "\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent(s::String, n::Int64)::Int64 \n\tWrite a jlth\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = odd_Equivalent;",
            "@test(candidate(\"011001\", 6) == 3)",
            "@test(candidate(\"11011\", 5) == 4)",
            "@test(candidate(\"1010\", 4) == 2)",
            "end"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "",
        "code": "\tWrite a function to check if a string represents an integer or not.\nfunction check_integer(text::String)::Bool \n\tCheck if a string is an integer.\n\treturn text::String::IsInteger(text::String(text::String::ToInteger(text::String(text::String::ToString(text::String(text::String::ToInteger(text::String(text::String::ToString(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text::String(text::String::ToInteger(text\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_integer;",
            "@test(candidate(\"python\") == false)",
            "@test(candidate(\"1\") == true)",
            "@test(candidate(\"12345\") == true)",
            "end"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "",
        "code": "\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64})::Int64 \n\tWrite a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int(nums::Tuple{Int64, Int64, Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = tuple_to_int;",
            "@test(candidate((1, 2, 3)) == 123)",
            "@test(candidate((4, 5, 6)) == 456)",
            "@test(candidate((5, 6, 7)) == 567)",
            "end"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "",
        "code": "\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test_list::Vector{Tuple{String, String}})::Vector{Tuple{Float64, Float64}} \n\tWrite a function to convert all possible convertible elements in a vector of vectors to floats.\nfunction list_to_float(test\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = list_to_float;",
            "@test(candidate([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)])",
            "@test(candidate([(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)])",
            "@test(candidate([(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)])",
            "end"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "",
        "code": "\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_list(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space_with_space(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space_with_space(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space_with_space_with_space(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space_with_space_with_space(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space_with_space_with_space(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space_with_space_with_space(string::String)::Vector{String} \n\tWrite a function to convert a string to a vector of strings split on the space character.\nfunction string_to_vector_with_space_with_space_with_space(string::String):\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = string_to_list;",
            "@test(candidate(\"python programming\") == [\"python\", \"programming\"])",
            "@test(candidate(\"lists tuples strings\") == [\"lists\", \"tuples\", \"strings\"])",
            "@test(candidate(\"write a program\") == [\"write\", \"a\", \"program\"])",
            "end"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "",
        "code": "\tWrite a jlthon function to find the element that appears only once in a sorted vector.\nfunction search(arr::Vector{Int64})::Int64 \n\tReturn the index of the first occurrence of the element in the vector.\n\treturn arr.find(Int64(1))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = search;",
            "@test(candidate([1, 1, 2, 2, 3]) == 3)",
            "@test(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)",
            "@test(candidate([1, 2, 2, 3, 3, 4, 4]) == 1)",
            "end"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "",
        "code": "\tWrite a jlthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n\tRemove first occurrence of a given character from the string.\nfunction remove_Occ(s::String, ch::String)::String \n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_Occ;",
            "@test(candidate(\"hello\", \"l\") == \"heo\")",
            "@test(candidate(\"abcda\", \"a\") == \"bcd\")",
            "@test(candidate(\"PHP\", \"P\") == \"H\")",
            "end"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "",
        "code": "\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nfunction max_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_product_tuple;",
            "@test(candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36)",
            "@test(candidate([(10, 20), (15, 2), (5, 10)]) == 200)",
            "@test(candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484)",
            "end"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "",
        "code": "\tWrite a function to sum all amicable numbers from 1 to a specified number.\nfunction amicable_numbers_sum(limit::Int64)::Int64 \n{\n\tInt64 sum = 0;\n\tfor (int i = 1; i <= limit; i++)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = amicable_numbers_sum;",
            "@test(candidate(999) == 504)",
            "@test(candidate(9999) == 31626)",
            "@test(candidate(99) == 0)",
            "end"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "",
        "code": "\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunction find_length(string::String)::Int64 \n\tFind the length of the given binary string.\n\treturn len(string::String)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_length;",
            "@test(candidate(\"11000010001\") == 6)",
            "@test(candidate(\"10111\") == 1)",
            "@test(candidate(\"11011101100101\") == 2)",
            "end"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the sum of common divisors of two given numbers.\nfunction sum(a::Int64, b::Int64)::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum;",
            "@test(candidate(10, 15) == 6)",
            "@test(candidate(100, 150) == 93)",
            "@test(candidate(4, 6) == 3)",
            "end"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "",
        "code": "\tWrite a function to multiply two integers.\nfunction multiply_int(x::Int64, y::Int64)::Int64 \n\tWrite a function to multiply two integers.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = multiply_int;",
            "@test(candidate(10, 20) == 200)",
            "@test(candidate(5, 10) == 50)",
            "@test(candidate(4, 8) == 32)",
            "end"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "",
        "code": "\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n::Int64, str::String)::Vector{String} \n\tWrite a function to find words that are longer than n characters from a given vector of words.\nfunction long_words(n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = long_words;",
            "@test(candidate(3, \"python is a programming language\") == [\"python\", \"programming\", \"language\"])",
            "@test(candidate(2, \"writing a program\") == [\"writing\", \"program\"])",
            "@test(candidate(5, \"sorting list\") == [\"sorting\"])",
            "end"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "",
        "code": "\tWrite a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix::Vector{Vector{Int64}})::Bool \n\tReturn whether the matrix is a magic square.\n\treturn my_matrix.is_magic_square()\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = magic_square_test;",
            "@test(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == true)",
            "@test(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == true)",
            "@test(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == false)",
            "end"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "",
        "code": "\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M::Vector\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sort_matrix;",
            "@test(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])",
            "@test(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])",
            "@test(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
            "end"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "",
        "code": "\tWrite a function to find the item with maximum frequency in a given vector.\nfunction max_occurrences(nums::Vector{Int64})::Int64 \n\tReturn the maximum number of occurrences of a given vector.\n\treturn max(nums.count(i) for i in nums)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_occurrences;",
            "@test(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)",
            "@test(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)",
            "@test(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
            "end"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "",
        "code": "\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels(str1::String)::String \n\tWrite a jlthon function to reverse only the vowels of a given string (where\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = reverse_vowels;",
            "@test(candidate(\"Python\") == \"Python\")",
            "@test(candidate(\"USA\") == \"ASU\")",
            "@test(candidate(\"ab\") == \"ab\")",
            "end"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "",
        "code": "\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\nfunction tup_string(tup1::Vector{String})::String \n\tWrite a function to convert a vector to a string.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = tup_string;",
            "@test(candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]) == \"exercises\")",
            "@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]) == \"python\")",
            "@test(candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]) == \"program\")",
            "end"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "",
        "code": "\tWrite a function to calculate the sum of the negative numbers of a given vector of numbers.\nfunction sum_negativenum(nums::Vector{Int64})::Int64 \n{\n\treturn sum(nums)\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_negativenum;",
            "@test(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32)",
            "@test(candidate([10, 15, -14, 13, -18, 12, -20]) == -52)",
            "@test(candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894)",
            "end"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "",
        "code": "\tWrite a function to find the nth hexagonal number.\nfunction hexagonal_num(n::Int64)::Int64 \n\tWrite a function to find the nth hexagonal number.\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64)::Int64\nhexagonal_num(n::Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = hexagonal_num;",
            "@test(candidate(10) == 190)",
            "@test(candidate(5) == 45)",
            "@test(candidate(7) == 91)",
            "end"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunction is_Sum_Of_Powers_Of_Two(n::Int64)::Bool \n\tCheck whether the given number can be represented as sum of non-zero powers of 2 or not.\n\treturn is_Sum_Of_Powers_Of_Two(n::Int64)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_Sum_Of_Powers_Of_Two;",
            "@test(candidate(10) == true)",
            "@test(candidate(7) == false)",
            "@test(candidate(14) == true)",
            "end"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "",
        "code": "\tWrite a function to sort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64})::Vector{Int64} \n\tSort a vector of elements.\nfunction pancake_sort(nums::Vector{Int64}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = pancake_sort;",
            "@test(candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79])",
            "@test(candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98])",
            "@test(candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42])",
            "end"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "",
        "code": "\tWrite a function to count number items that are identical in the same position of three given vectors.\nfunction count_samepair(list1::Vector{Int64}, list2::Vector{Int64}, list3::Vector{Int64})::Int64 \n{\n\tint count = 0;\n\tfor (int i = 0; i < list1.size(); i++)\n\t{\n\t\tif (list1[i] == list2[i] && list1[i] == list3[i])\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_samepair;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3)",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 4)",
            "@test(candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
            "end"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "",
        "code": "\tWrite a function to find number of vectors present in the given vector.\nfunction find_lists(Input::Vector{Any})::Int64 \n\tWrite a function to find number of vectors present in the given vector.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_lists;",
            "@test(candidate([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2)",
            "@test(candidate([[1, 2], [3, 4], [5, 6]]) == 3)",
            "@test(candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1)",
            "end"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "",
        "code": "\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given vector.\nfunction max_Abs_Diff(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the maximum difference between any two elements in a given\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_Abs_Diff;",
            "@test(candidate([2, 1, 5, 3]) == 4)",
            "@test(candidate([9, 3, 2, 5, 1]) == 8)",
            "@test(candidate([3, 2, 1]) == 2)",
            "end"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "",
        "code": "\tWrite a jlthon function to find the volume of a triangular prism.\nfunction find_Volume(l::Int64, b::Int64, h::Int64)::Int64 \n\tFind the volume of a triangular prism.\n\treturn (l::Int64 - b::Int64) / h::Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Volume;",
            "@test(candidate(10, 8, 6) == 240)",
            "@test(candidate(3, 2, 2) == 6)",
            "@test(candidate(1, 2, 1) == 1)",
            "end"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "",
        "code": "\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Tuple{Int64, Int64}, Nothing} \n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Nothing, Nothing} \n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Nothing, Nothing} \n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Nothing, Nothing} \n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Nothing, Nothing} \n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Nothing, Nothing} \n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::Int64, b::Int64, n::Int64)::Union{Nothing, Nothing} \n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nothing if no solution exists.\nfunction find_solution(a::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_solution;",
            "@test(candidate(2, 3, 7) == (2, 1))",
            "@test(candidate(4, 2, 7) == nothing)",
            "@test(candidate(1, 13, 17) == (4, 1))",
            "end"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "",
        "code": "\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another vector.\nfunction remove_elements(list1::Vector{Int64}, list2::Vector{Int64})::Vector{Int64} \n\tWrite a function to remove all elements from a given vector present in another\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_elements;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10])",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10])",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10])",
            "end"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "",
        "code": "\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunction sum_series(n::Int64)::Int64 \n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_series;",
            "@test(candidate(6) == 12)",
            "@test(candidate(10) == 30)",
            "@test(candidate(9) == 25)",
            "end"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "",
        "code": "\tWrite a function to determine if the sum of the divisors of two integers are the same.\nfunction are_equivalent(num1::Int64, num2::Int64)::Bool \n\tReturn true if the sum of the divisors of two integers is the same.\n\treturn num1 == num2\n<|endoftext|>\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = are_equivalent;",
            "@test(candidate(36, 57) == false)",
            "@test(candidate(2, 4) == false)",
            "@test(candidate(23, 47) == true)",
            "end"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "",
        "code": "\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position_case_insensitive(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position_case_insensitive_2(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position_case_insensitive_3(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position_case_insensitive_4(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position_case_insensitive_5(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position_case_insensitive_6(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position_case_insensitive_7(str1::String)::Int64 \n\tWrite a function to count the number of characters in a string that occur at the same position in the string as\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_char_position;",
            "@test(candidate(\"xbcefg\") == 2)",
            "@test(candidate(\"ABcED\") == 3)",
            "@test(candidate(\"AbgdeF\") == 5)",
            "end"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "",
        "code": "\tWrite a function that counts the number of pairs of integers in a vector that xor to an even number.\nfunction find_even_pair(A::Vector{Int64})::Int64 \n\tFind the even pair of the given vector.\n\treturn A.find_even_pair(A.vector)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_even_pair;",
            "@test(candidate([5, 4, 7, 2, 1]) == 4)",
            "@test(candidate([7, 2, 8, 1, 0, 5, 11]) == 9)",
            "@test(candidate([1, 2, 3]) == 1)",
            "end"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "",
        "code": "\tWrite a jlthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n::Int64)::Int64 \n\tReturn the next power of 2 greater than or equal to n.\n\treturn next_power_of_2(n - 1) + 1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = next_power_of_2;",
            "@test(candidate(0) == 1)",
            "@test(candidate(5) == 8)",
            "@test(candidate(17) == 32)",
            "end"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "",
        "code": "\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a given vector.\nfunction frequency(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to count the number of occurrences of a number in a\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = frequency;",
            "@test(candidate([1, 2, 3], 4) == 0)",
            "@test(candidate([1, 2, 2, 3, 3, 3, 4], 3) == 3)",
            "@test(candidate([0, 1, 2, 3, 1, 2], 1) == 2)",
            "end"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "",
        "code": "\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_with_space(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_with_space(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_with_space(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_with_space(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_with_space(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_with_space(text::String)::Bool \n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore_with_space_with_space(text::String\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_lowercase_underscore;",
            "@test(candidate(\"aab_cbbbc\") == true)",
            "@test(candidate(\"aab_Abbbc\") == false)",
            "@test(candidate(\"Aaab_abbbc\") == false)",
            "end"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "",
        "code": "\tWrite a function to find the sum of numbers in a vector within a range specified by two indices.\nfunction sum_range_list(list1::Vector{Int64}, m::Int64, n::Int64)::Int64 \n{\n\tInt64 sum = 0;\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tsum += list1[i];\n\t}\n\treturn sum;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_range_list;",
            "@test(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29)",
            "@test(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7) == 16)",
            "@test(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10) == 38)",
            "end"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "",
        "code": "\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nfunction perimeter_pentagon(a::Int64)::Int64 \n\tReturn the perimeter of a regular pentagon.\n\treturn a*(a+1)*(a+2)*(a+3)*(a+4)*(a+5)*(a+6)*(a+7)*(a+8)*(a+9)*(a+10)*(a+11)*(a+12)*(a+13)*(a+14)*(a+15)*(a+16)*(a+17)*(a+18)*(a+19)*(a+20)*(a+21)*(a+22)*(a+23)*(a+24)*(a+25)*(a+26)*(a+27)*(a+28)*(a+29)*(a+30)*(a+31)*(a+32)*(a+33)*(a+34)*(a+35)*(a+36)*(a+37)*(a+38)*(a+39)*(a+40)*(a+41)*(a+42)*(a+43)*(a+44)*(a+45)*(a+46)*(a+47)*(a+48)*(a+49)*(a+50)*(a+51)*(a+52)*(a+53)*(a+54)*(a+55)*(a+56)*(a+57)*(a+58)*(a+59)*(a+60)*(a+61)*(a+62)*(a+63)*(a+64)*(a+65)*(a+66)*(a+67)*(a+68)*(a+69)*(a+70)*(a+71)*(a+72)*(a+73)*(a+74)*(a+75)*(a+76)*(a+77)*(a+78)*(a+79)*(a+80)*(a+81)*(a+82)*(a+83)*(a+84)*(a+85)*(a+86)*(a+87)*(a+88)*(a+89)*(a+90\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = perimeter_pentagon;",
            "@test(candidate(5) == 25)",
            "@test(candidate(10) == 50)",
            "@test(candidate(15) == 75)",
            "end"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "",
        "code": "\tWrite a function to count the number of occurence of the string'std' in a given string.\nfunction count_occurance(s::String)::Int64 \n\tWrite a function to count the number of occurence of the string'std' in a given string.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_occurance;",
            "@test(candidate(\"letstdlenstdporstd\") == 3)",
            "@test(candidate(\"truststdsolensporsd\") == 1)",
            "@test(candidate(\"makestdsostdworthit\") == 2)",
            "@test(candidate(\"stds\") == 1)",
            "@test(candidate(\"\") == 0)",
            "end"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "",
        "code": "\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter(a::Int64)::Int64 \n\tWrite a function that returns the perimeter of a square given its side length as input.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = square_perimeter;",
            "@test(candidate(10) == 40)",
            "@test(candidate(5) == 20)",
            "@test(candidate(4) == 16)",
            "end"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "",
        "code": "\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String, second_string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\tWrite a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars(string::String)::String \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_dirty_chars;",
            "@test(candidate(\"probasscurve\", \"pros\") == \"bacuve\")",
            "@test(candidate(\"digitalindia\", \"talent\") == \"digiidi\")",
            "@test(candidate(\"exoticmiles\", \"toxic\") == \"emles\")",
            "end"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "",
        "code": "\tWrite a function to find whether a given vector of integers contains any duplicate element.\nfunction test_duplicate(arraynums::Vector{Int64})::Bool \n\tWrite a function to find whether a given vector of integers contains any duplicate element.\ntest_duplicate(arraynums::Vector{Int64})::Bool\n<|endoftext|>\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = test_duplicate;",
            "@test(candidate([1, 2, 3, 4, 5]) == false)",
            "@test(candidate([1, 2, 3, 4, 4]) == true)",
            "@test(candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == true)",
            "end"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "",
        "code": "\tWrite a function to check if the given number is woodball or not.\nfunction is_woodall(x::Int64)::Bool \n\tCheck if the given number is woodball.\n\treturn x == woodball\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_woodall;",
            "@test(candidate(383) == true)",
            "@test(candidate(254) == false)",
            "@test(candidate(200) == false)",
            "end"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "",
        "code": "\tWrite a function to check if all the elements in tuple have same data type or not.\nfunction check_type(test_tuple::Any)::Bool \n\tCheck if all the elements in tuple have same data type or not.\n\treturn True\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_type;",
            "@test(candidate((5, 6, 7, 3, 5, 6)) == true)",
            "@test(candidate((1, 2, \"4\")) == false)",
            "@test(candidate((3, 2, 1, 4, 5)) == true)",
            "end"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "",
        "code": "\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n\tWrite a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n\tWrite a function that takes\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_majority;",
            "@test(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == true)",
            "@test(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == false)",
            "@test(candidate([1, 1, 1, 2, 2], 5, 1) == true)",
            "@test(candidate([1, 1, 2, 2], 5, 1) == false)",
            "end"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int64(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int64_Int64(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int64_Int64_Int64(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int64_Int64_Int64(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int64_Int64_Int64(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int64_Int64_Int64(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int64_Int64_Int64(n::Int64)::Int64 \n\tWrite a jlthon function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits_Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_Set_Bits;",
            "@test(candidate(2) == 1)",
            "@test(candidate(4) == 1)",
            "@test(candidate(6) == 2)",
            "end"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "",
        "code": "\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\nfunction odd_values_string(str::String)::String \n\tWrite a jlthon function to remove the characters which have odd index values of a given string.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = odd_values_string;",
            "@test(candidate(\"abcdef\") == \"ace\")",
            "@test(candidate(\"python\") == \"pto\")",
            "@test(candidate(\"data\") == \"dt\")",
            "@test(candidate(\"lambs\") == \"lms\")",
            "end"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "",
        "code": "\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\nfunction min_of_three(a::Int64, b::Int64, c::Int64)::Int64 \n\tWrite a function to find minimum of three numbers.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = min_of_three;",
            "@test(candidate(10, 20, 0) == 0)",
            "@test(candidate(19, 15, 18) == 15)",
            "@test(candidate(-10, -20, -30) == -30)",
            "end"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "",
        "code": "\tWrite a jlthon function to check whether all the bits are unset in the given range or not.\nfunction all_Bits_Set_In_The_Given_Range(n::Int64, l::Int64, r::Int64)::Bool \n\tWrite a jlthon function to check whether all the bits in the given range are unset or not.\nfunction all_Bits_Set_In_The_Given_Range_2(n::Int64, l::Int64, r::Int64)::Bool \n\tWrite a jlthon function to check whether all the bits in the given range are unset or not.\nfunction all_Bits_Set_In_The_Given_Range_3(n::Int64, l::Int64, r::Int64)::Bool \n\tWrite a jlthon function to check whether all the bits in the given range are unset or not.\nfunction all_Bits_Set_In_The_Given_Range_4(n::Int64, l::Int64, r::Int64)::Bool \n\tWrite a jlthon function to check whether all the bits in the given range are unset or not.\nfunction all_Bits_Set_In_The_Given_Range_5(n::Int64, l::Int64, r::Int64)::Bool \n\tWrite a jlthon function to check whether all the bits in the given range are unset or not.\nfunction all_Bits_Set_In_The_Given_Range_6(n::Int64, l::Int64, r::Int64)::Bool \n\tWrite a jlthon function to check whether all the bits in the given range are unset or not.\nfunction all_Bits_Set_In_The_Given_Range_7(n::Int64, l::Int64, r::Int64)::Bool \n\tWrite a jlthon function to check whether all the bits in the given range are unset or not.\nfunction\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = all_Bits_Set_In_The_Given_Range;",
            "@test(candidate(4, 1, 2) == true)",
            "@test(candidate(17, 2, 4) == true)",
            "@test(candidate(39, 4, 6) == false)",
            "end"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "",
        "code": "\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunction re_arrange_array(arr::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunction re_arrange_array(arr::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunction re_arrange_array(arr::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunction re_arrange_array(arr::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunction re_arrange_array(arr::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunction re_arrange_array(arr::Vector{Int64}, n::Int64)::Vector{Int64} \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = re_arrange_array;",
            "@test(candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])",
            "@test(candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15])",
            "@test(candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85])",
            "end"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "",
        "code": "\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char::String)::String \n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank(str1::String, char\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = replace_blank;",
            "@test(candidate(\"hello people\", \"@\") == \"hello@people\")",
            "@test(candidate(\"python program language\", \"\\$\") == \"python\\$program\\$language\")",
            "@test(candidate(\"blank space\", \"-\") == \"blank-space\")",
            "end"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "",
        "code": "\tWrite a function to find the volume of a cube given its side length.\nfunction volume_cube(l::Int64)::Int64 \n\tReturn the volume of a cube given its side length.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = volume_cube;",
            "@test(candidate(3) == 27)",
            "@test(candidate(2) == 8)",
            "@test(candidate(5) == 125)",
            "end"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of_with_prefix(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of_with_suffix(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of_with_prefix_and_suffix(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of_with_prefix_and_suffix_with_prefix(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of_with_prefix_and_suffix_with_suffix(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of_with_prefix_and_suffix_with_prefix_and_suffix(str::String)::Int64 \n\tWrite a jlthon function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings_of_with_prefix_and_suffix_with_prefix_and_suffix_with_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = number_of_substrings;",
            "@test(candidate(\"abc\") == 6)",
            "@test(candidate(\"abcd\") == 10)",
            "@test(candidate(\"abcde\") == 15)",
            "end"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "",
        "code": "\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences(m::Int64, n::Int64)::Int64 \n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences_with_m(m::Int64, n::Int64)::Int64 \n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences_with_m_and_n(m::Int64, n::Int64)::Int64 \n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences_with_m_and_n_and_m(m::Int64, n::Int64)::Int64 \n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences_with_m_and_n_and_m_and_m(m::Int64, n::Int64)::Int64 \n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_total_number_of_sequences;",
            "@test(candidate(10, 4) == 4)",
            "@test(candidate(5, 2) == 6)",
            "@test(candidate(16, 3) == 84)",
            "end"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "",
        "code": "\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nfunction replace_list(list1::Vector{Any}, list2::Vector{Any})::Vector{Any} \n\tWrite a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = replace_list;",
            "@test(candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8])",
            "@test(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8])",
            "@test(candidate([\"red\", \"blue\", \"green\"], [\"yellow\"]) == [\"red\", \"blue\", \"yellow\"])",
            "end"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "",
        "code": "\tWrite a function to count the total number of characters in a string.\nfunction count_charac(str1::String)::Int64 \n\tWrite a function to count the total number of characters in a string.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_charac;",
            "@test(candidate(\"python programming\") == 18)",
            "@test(candidate(\"language\") == 8)",
            "@test(candidate(\"words\") == 5)",
            "end"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "",
        "code": "\tWrite a jlthon function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N::Int64)::Int64 \n\tReturn the next perfect square greater than a given number.\n\treturn N - next_Perfect_Square(N - 1)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = next_Perfect_Square;",
            "@test(candidate(35) == 36)",
            "@test(candidate(6) == 9)",
            "@test(candidate(9) == 16)",
            "end"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "",
        "code": "\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\tWrite a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr::Vector{Int64})::Int64 \n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_sum;",
            "@test(candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)",
            "@test(candidate([80, 60, 30, 40, 20, 10]) == 210)",
            "@test(candidate([2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
            "end"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "",
        "code": "\tWrite a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str::String)::Int64 \n\tReturn the length of the longest palindromic subsequence in the given string.\n\treturn len(str::String)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = lps;",
            "@test(candidate(\"TENS FOR TENS\") == 5)",
            "@test(candidate(\"CARDIO FOR CARDS\") == 7)",
            "@test(candidate(\"PART OF THE JOURNEY IS PART\") == 9)",
            "end"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "",
        "code": "\tWrite a function to find the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n\tReturn the intersection of two vectors.\nfunction intersection_array(array_nums1::Vector{Int64}, array_nums2::Vector{Int64})::Vector{Int64} \n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = intersection_array;",
            "@test(candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9])",
            "@test(candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [3, 5, 7, 9])",
            "@test(candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [10])",
            "end"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "",
        "code": "\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nfunction count_X(tup::Vector{Int64}, x::Int64)::Int64 \n\tWrite a jlthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_X;",
            "@test(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0)",
            "@test(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) == 3)",
            "@test(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) == 4)",
            "end"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "",
        "code": "\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::String)::Vector{String} \n\tWrite a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nfunction insert_element(list::Vector{String}, element::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = insert_element;",
            "@test(candidate([\"Red\", \"Green\", \"Black\"], \"c\") == [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"])",
            "@test(candidate([\"python\", \"java\"], \"program\") == [\"program\", \"python\", \"program\", \"java\"])",
            "@test(candidate([\"happy\", \"sad\"], \"laugh\") == [\"laugh\", \"happy\", \"laugh\", \"sad\"])",
            "end"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "",
        "code": "\tWrite a jlthon function to convert complex numbers to polar coordinates.\nfunction convert(numbers::Int64)::Tuple{Float64, Float64} \n\tConvert a number of complex numbers to polar coordinates.\n\treturn (numbers.Float64, numbers.Float64)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = convert;",
            "@test(candidate(1) == (1.0, 0.0))",
            "@test(candidate(4) == (4.0, 0.0))",
            "@test(candidate(5) == (5.0, 0.0))",
            "end"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "",
        "code": "\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector{Union{Int64, String, Float64}})::Int64 \n\tWrite a jlthon function that returns the number of integer elements in a given vector.\nfunction count_integer(list1::Vector\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_integer;",
            "@test(candidate([1, 2, \"abc\", 1.2]) == 2)",
            "@test(candidate([1, 2, 3]) == 3)",
            "@test(candidate([1, 1.2, 4, 5.1]) == 2)",
            "end"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "",
        "code": "\tWrite a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.\nfunction combinations_colors(l::Vector{String}, n::Int64)::Vector{Vector{String}} \n{\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}{String}\n\tVector{String}{String}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = combinations_colors;",
            "@test(candidate([\"Red\", \"Green\", \"Blue\"], 1) == [[\"Red\"], [\"Green\"], [\"Blue\"]])",
            "@test(candidate([\"Red\", \"Green\", \"Blue\"], 2) == [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]])",
            "@test(candidate([\"Red\", \"Green\", \"Blue\"], 3) == [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]])",
            "end"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "",
        "code": "\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_n(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_p(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_q(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_r(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_s(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_t(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums_u(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_Primes_nums;",
            "@test(candidate(5) == 2)",
            "@test(candidate(10) == 4)",
            "@test(candidate(100) == 25)",
            "end"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "",
        "code": "\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\nfunction swap_numbers(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function that takes in two numbers and returns a vector with the second number and then the first number.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = swap_numbers;",
            "@test(candidate(10, 20) == [20, 10])",
            "@test(candidate(15, 17) == [17, 15])",
            "@test(candidate(100, 200) == [200, 100])",
            "end"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "",
        "code": "\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\nfunction maximize_elements(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n\tWrite a function to maximize the given two vectors.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = maximize_elements;",
            "@test(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]])",
            "@test(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[7, 8], [5, 10], [3, 10], [8, 11]])",
            "@test(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[8, 9], [6, 11], [4, 11], [9, 12]])",
            "end"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "",
        "code": "\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunction newman_prime(n::Int64)::Int64 \n\tReturn the nth newman\u2013shanks\u2013williams prime number.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = newman_prime;",
            "@test(candidate(3) == 7)",
            "@test(candidate(4) == 17)",
            "@test(candidate(5) == 41)",
            "end"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "",
        "code": "\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunction division_elements(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunction division_elements(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunction division_elements(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunction division_elements(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunction division_elements(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = division_elements;",
            "@test(candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3))",
            "@test(candidate((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4))",
            "@test(candidate((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2))",
            "end"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "",
        "code": "\tWrite a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nfunction split_two_parts(list1::Vector{Any}, L::Int64)::Any \n\tWrite a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nfunction split_two_parts_with_length(list1::Vector{Any}, L::Int64)::Any \n\tWrite a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nfunction split_two_parts_with_length_and_length(list1::Vector{Any}, L::Int64)::Any \n\tWrite a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nfunction split_two_parts_with_length_and_length_and_length(list1::Vector{Any}, L::Int64)::Any \n\tWrite a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nfunction split_two_parts_with_length_and_length_and_length_and_length(list1::Vector{Any}, L::Int64)::Any \n\tWrite a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nfunction split_two_parts_with_length_and_length_and_length_and_length_and_length(list1::Vector{Any}, L::Int64)::Any \n\tWrite a function that takes in a vector and an integer\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = split_two_parts;",
            "@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))",
            "@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))",
            "@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))",
            "end"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "",
        "code": "\tWrite a function to calculate a dog's age in dog's years.\nfunction dog_age(h_age::Int64)::Int64 \n\tWrite a function to calculate a dog's age in days.\nfunction dog_age_days(h_age::Int64)::Int64 \n\tWrite a function to calculate a dog's age in days.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = dog_age;",
            "@test(candidate(12) == 61)",
            "@test(candidate(15) == 73)",
            "@test(candidate(24) == 109)",
            "end"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "",
        "code": "\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nfunction list_split(S::Vector{Any}, step::Int64)::Vector{Vector{Any}} \n\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nfunction list_split_with_step(S::Vector{Any}, step::Int64)::Vector{Vector{Any}} \n\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nfunction list_split_with_step_and_step(S::Vector{Any}, step::Int64)::Vector{Vector{Any}} \n\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nfunction list_split_with_step_and_step_and_step(S::Vector{Any}, step::Int64)::Vector{Vector{Any}} \n\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nfunction list_split_with_step_and_step_and_step_and_step(S::Vector{Any}, step::Int64)::Vector{Vector{Any}} \n\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nfunction list_split_with_step_and_step_and_step_and_step_and_step(S::Vector{Any}, step::Int64)::Vector{Vector{Any}} \n\tWrite a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nfunction list_split_with_step_and_step_and_step_and_step_and_step_and_step(S::Vector{Any}, step::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = list_split;",
            "@test(candidate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3) == [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])",
            "@test(candidate([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2) == [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])",
            "end"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "",
        "code": "\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_2(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_3(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_4(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_5(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_6(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_7(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_8(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_9(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_10(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube_11(l::Int64)::Int64 \n\tWrite a function to find the lateral surface area of a cube given its side length\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = lateralsurface_cube;",
            "@test(candidate(5) == 100)",
            "@test(candidate(9) == 324)",
            "@test(candidate(10) == 400)",
            "end"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "",
        "code": "\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = square_Sum;",
            "@test(candidate(2) == 10)",
            "@test(candidate(3) == 35)",
            "@test(candidate(4) == 84)",
            "end"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "",
        "code": "\tWrite a function to find then'th star number.\nfunction find_star_num(n::Int64)::Int64 \n\tFind then'th star number.\n\treturn n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_star_num;",
            "@test(candidate(3) == 37)",
            "@test(candidate(4) == 73)",
            "@test(candidate(5) == 121)",
            "end"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "",
        "code": "\tWrite a function to find the ascii value of a character.\nfunction ascii_value(k::String)::Int64 \n\tReturn the ascii value of a character.\n\treturn ascii_value(k::String(k::Char(k::Char::k_ascii_value)))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = ascii_value;",
            "@test(candidate(\"A\") == 65)",
            "@test(candidate(\"R\") == 82)",
            "@test(candidate(\"S\") == 83)",
            "end"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of even numbers at even positions of a vector.\nfunction sum_even_and_even_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of even numbers at even positions of a vector.\nfunction sum_even_and_odd_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of even numbers at odd positions of a vector.\nfunction sum_odd_and_even_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of odd numbers at even positions of a vector.\nfunction sum_odd_and_odd_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of odd numbers at odd positions of a vector.\nfunction sum_odd_and_odd_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of odd numbers at odd positions of a vector.\nfunction sum_odd_and_even_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of odd numbers at even positions of a vector.\nfunction sum_odd_and_odd_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of odd numbers at odd positions of a vector.\nfunction sum_odd_and_even_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of odd numbers at even positions of a vector.\nfunction sum_odd_and_odd_index(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of odd numbers at odd positions of a vector.\nfunction sum_odd_and_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_even_and_even_index;",
            "@test(candidate([5, 6, 12, 1, 18, 8]) == 30)",
            "@test(candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)",
            "@test(candidate([5, 6, 12, 1]) == 12)",
            "end"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "",
        "code": "\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_2(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_3(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_4(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_5(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_6(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_7(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum_8(n:Int64)::Int64 \n\tWrite a jlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = even_Power_Sum;",
            "@test(candidate(2) == 1056)",
            "@test(candidate(3) == 8832)",
            "@test(candidate(1) == 32)",
            "end"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "",
        "code": "\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nfunction rear_extract(test_list::Vector{Tuple{Int64, String, Int64}})::Vector{Int64} \n\tWrite a function that takes\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = rear_extract;",
            "@test(candidate([(1, \"Rash\", 21), (2, \"Varsha\", 20), (3, \"Kil\", 19)]) == [21, 20, 19])",
            "@test(candidate([(1, \"Sai\", 36), (2, \"Ayesha\", 25), (3, \"Salman\", 45)]) == [36, 25, 45])",
            "@test(candidate([(1, \"Sudeep\", 14), (2, \"Vandana\", 36), (3, \"Dawood\", 56)]) == [14, 36, 56])",
            "end"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "",
        "code": "\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunction substract_elements(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Tuple{Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunction substract_elements(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Tuple{Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunction substract_elements(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Tuple{Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunction substract_elements(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Tuple{Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunction substract_elements(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Tuple{Int64, Int64, Int64} \n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = substract_elements;",
            "@test(candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13))",
            "@test(candidate((11, 2, 3), (24, 45, 16)) == (-13, -43, -13))",
            "@test(candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3))",
            "end"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "",
        "code": "\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum(n::Int64)::Int64 \n\tWrite a jlthon function that takes in a positive integer n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = even_binomial_Coeff_Sum;",
            "@test(candidate(4) == 8)",
            "@test(candidate(6) == 32)",
            "@test(candidate(2) == 2)",
            "end"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "",
        "code": "\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64}>, n::Int64)::Dict{String, Int64}> \n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64})::Dict{String, Int64}> \n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64})::Dict{String, Int64}> \n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64})::Dict{String, Int64}> \n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64})::Dict{String, Int64}> \n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64})::Dict{String, Int64}> \n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64})::Dict{String, Int64}> \n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter(dict::Dict{String, Int64})::Dict{String, Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = dict_filter;",
            "@test(candidate(Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 170) == Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190))",
            "@test(candidate(Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 180) == Dict(\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190))",
            "@test(candidate(Dict(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 190) == Dict(\"Pierre Cox\" => 190))",
            "end"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "",
        "code": "\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find the number of elements that occurs before the vector element in the given tuple.\nfunction count_first_elements(test_tup::Vector{Union{Int64, Tuple{Int64, Int64}}})::Int64 \n\tWrite a function to find\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_first_elements;",
            "@test(candidate([1, 5, 7, (4, 6), 10]) == 3)",
            "@test(candidate([2, 9, (5, 7), 11]) == 2)",
            "@test(candidate([11, 15, 5, 8, (2, 3), 8]) == 4)",
            "end"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "",
        "code": "\tWrite a function to find the nth decagonal number.\nfunction is_num_decagonal(n::Int64)::Int64 \n\tReturn the nth decagonal number.\n\treturn n - 1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_num_decagonal;",
            "@test(candidate(3) == 27)",
            "@test(candidate(7) == 175)",
            "@test(candidate(10) == 370)",
            "end"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "",
        "code": "\tWrite a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist::Vector{Int64}, item::Int64)::Tuple{Bool, Int64} \n\tWrite a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist::Vector{Int64}, item::Int64)::Tuple{Bool, Int64} \n\tWrite a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist::Vector{Int64}, item::Int64)::Tuple{Bool, Int64} \n\tWrite a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist::Vector{Int64}, item::Int64)::Tuple{Bool, Int64} \n\tWrite a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist::Vector{Int64}, item::Int64)::Tuple{Bool, Int64} \n\tWrite a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist::Vector{Int64}, item::Int64)::Tuple{Bool, Int64} \n\tWrite a function that takes in a vector and element and returns a tuple containing a boolean\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sequential_search;",
            "@test(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (true, 3))",
            "@test(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61) == (true, 7))",
            "@test(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48) == (true, 6))",
            "end"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "",
        "code": "\tWrite a jlthon function to check if the elements of a given vector are unique or not.\nfunction all_unique(test_list::Vector{Int64})::Bool \n\tCheck if all elements of a given vector are unique.\n\treturn all(test_list.Vector{Int64} == test_list.Vector{Int64})\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = all_unique;",
            "@test(candidate([1, 2, 3]) == true)",
            "@test(candidate([1, 2, 1, 2]) == false)",
            "@test(candidate([1, 2, 3, 4, 5]) == true)",
            "end"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "",
        "code": "\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\tWrite a function to subtract two vectors element-wise.\nfunction sub_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Int64} \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sub_list;",
            "@test(candidate([1, 2, 3], [4, 5, 6]) == [-3, -3, -3])",
            "@test(candidate([1, 2], [3, 4]) == [-2, -2])",
            "@test(candidate([90, 120], [50, 70]) == [40, 50])",
            "end"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "",
        "code": "\tWrite a jlthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunction validate(n::Int64)::Bool \n\tCheck if the given integer is a valid integer.\n\tif n < 0:\n\t\traise ValueError(\"The given integer must be greater than 0.\")\n\tif n == 0:\n\t\treturn True\n\tif n == 1:\n\t\treturn False\n\tif n == 2:\n\t\treturn False\n\tif n == 3:\n\t\treturn False\n\tif n == 4:\n\t\treturn False\n\tif n == 5:\n\t\treturn False\n\tif n == 6:\n\t\treturn False\n\tif n == 7:\n\t\treturn False\n\tif n == 8:\n\t\treturn False\n\tif n == 9:\n\t\treturn False\n\tif n == 10:\n\t\treturn False\n\tif n == 11:\n\t\treturn False\n\tif n == 12:\n\t\treturn False\n\tif n == 13:\n\t\treturn False\n\tif n == 14:\n\t\treturn False\n\tif n == 15:\n\t\treturn False\n\tif n == 16:\n\t\treturn False\n\tif n == 17:\n\t\treturn False\n\tif n == 18:\n\t\treturn False\n\tif n == 19:\n\t\treturn False\n\tif n == 20:\n\t\treturn False\n\tif n == 21:\n\t\treturn False\n\tif n == 22:\n\t\treturn False\n\tif n == 23:\n\t\treturn False\n\tif n == 24:\n\t\treturn False\n\tif n == 25:\n\t\treturn False\n\tif n == 26:\n\t\treturn False\n\tif n == 27:\n\t\treturn False\n\tif n == 28:\n\t\treturn False\n\tif n == 29:\n\t\treturn False\n\tif n == 30:\n\t\treturn False\n\tif n == 31:\n\t\treturn False\n\tif n == 32:\n\t\treturn False\n\tif n == 33:\n\t\treturn False\n\tif n == 34:\n\t\treturn False\n\tif n == 35:\n\t\treturn False\n\tif n == 36:\n\t\treturn False\n\tif n == 37:\n\t\treturn False\n\tif\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = validate;",
            "@test(candidate(1234) == true)",
            "@test(candidate(51241) == false)",
            "@test(candidate(321) == true)",
            "end"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "",
        "code": "\tWrite a function that takes in a vector and element and checks whether all items in the vector are equal to the given element.\nfunction check_element(list::Vector{Any}, element::Any)::Bool \n\tCheck if all elements in the vector are equal to the given element.\n\treturn all(element == item for item in list)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_element;",
            "@test(candidate([\"green\", \"orange\", \"black\", \"white\"], \"blue\") == false)",
            "@test(candidate([1, 2, 3, 4], 7) == false)",
            "@test(candidate([\"green\", \"green\", \"green\", \"green\"], \"green\") == true)",
            "end"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "",
        "code": "\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_two_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_three_two(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by three 'b' characters.\nfunction text_match_four_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by four 'b' characters.\nfunction text_match_five_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by five 'b' characters.\nfunction text_match_six_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by six 'b' characters.\nfunction text_match_seven_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by seven 'b' characters.\nfunction text_match_eight_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by eight 'b' characters.\nfunction text_match_nine_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by nine 'b' characters.\nfunction text_match_ten_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by ten 'b' characters.\nfunction text_match_eleven_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by eleven 'b' characters.\nfunction text_match_twelve_three(text::String)::Bool \n\tCheck whether a string contains the 'a' character followed by twelve 'b\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_match_two_three;",
            "@test(candidate(\"ac\") == false)",
            "@test(candidate(\"dc\") == false)",
            "@test(candidate(\"abbbba\") == true)",
            "end"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "",
        "code": "\tWrite a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nfunction max_sub_array_sum_repeated(a::Vector{Int64}, n::Int64, k::Int64)::Int64 \n\tWrite a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_sub_array_sum_repeated;",
            "@test(candidate([10, 20, -30, -1], 4, 3) == 30)",
            "@test(candidate([-1, 10, 20], 3, 2) == 59)",
            "@test(candidate([-1, -2, -3], 3, 3) == -1)",
            "end"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "",
        "code": "\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n::Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum(n:Int64)::Int64 \n\tWrite a jlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = square_Sum;",
            "@test(candidate(2) == 20)",
            "@test(candidate(3) == 56)",
            "@test(candidate(4) == 120)",
            "end"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "",
        "code": "\tWrite a function to find the vector of maximum length in a vector of vectors.\nfunction max_length(list1::Vector{Vector{Int64}})::Tuple{Int64, Vector{Int64}} \n\treturn max_length(list1)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_length;",
            "@test(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))",
            "@test(candidate([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15]))",
            "@test(candidate([[5], [15, 20, 25]]) == (3, [15, 20, 25]))",
            "end"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "",
        "code": "\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunction count_no_of_ways(n::Int64, k::Int64)::Int64 \n\tWrite a function to count the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_no_of_ways;",
            "@test(candidate(2, 4) == 16)",
            "@test(candidate(3, 2) == 6)",
            "@test(candidate(4, 4) == 228)",
            "end"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "",
        "code": "\tWrite a jlthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find(n::Int64, m::Int64)::Int64 \n\tFind the quotient of two numbers (rounded down to the nearest integer).\n\treturn n/m\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find;",
            "@test(candidate(10, 3) == 3)",
            "@test(candidate(4, 2) == 2)",
            "@test(candidate(20, 5) == 4)",
            "end"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "",
        "code": "\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle_rightangle_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find the third side of a right angled triangle.\nfunction otherside_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle_rightangle(w::Int64, h::Int64)::Float64 \n\tWrite a function to find\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = otherside_rightangle;",
            "@test(candidate(7, 8) == 10.63014581273465)",
            "@test(candidate(3, 4) == 5)",
            "@test(candidate(7, 15) == 16.55294535724685)",
            "end"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "",
        "code": "\tWrite a function to find the maximum value in a given heterogeneous vector.\nfunction max_val(listval::Vector{Union{String, Int64}})::Int64 \n\tReturn the maximum value in a given heterogeneous vector.\n\treturn max(listval)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_val;",
            "@test(candidate([\"Python\", 3, 2, 4, 5, \"version\"]) == 5)",
            "@test(candidate([\"Python\", 15, 20, 25]) == 25)",
            "@test(candidate([\"Python\", 30, 20, 40, 50, \"version\"]) == 50)",
            "end"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "",
        "code": "\tWrite a function to return the sum of all divisors of a number.\nfunction sum_div(number::Int64)::Int64 \n\tReturn the sum of all divisors of a number.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_div;",
            "@test(candidate(8) == 7)",
            "@test(candidate(12) == 16)",
            "@test(candidate(7) == 1)",
            "end"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "",
        "code": "\tWrite a jlthon function to count inversions in a vector.\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tReturn the number of inversions in a vector.\n\treturn arr.Count(Int64)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_Inv_Count;",
            "@test(candidate([1, 20, 6, 4, 5]) == 5)",
            "@test(candidate([1, 2, 1]) == 1)",
            "@test(candidate([1, 2, 5, 6, 1]) == 3)",
            "end"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "",
        "code": "\tWrite a function to flatten a given nested vector structure.\nfunction flatten_list(list1::Vector{Union{Int64, Vector{Int64}}})::Vector{Int64} \n\treturn flatten_vector(list1)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = flatten_list;",
            "@test(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])",
            "@test(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])",
            "@test(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
            "end"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "",
        "code": "\tWrite a function to calculate the maximum aggregate from the vector of tuples.\nfunction max_aggregate(stdata::Vector{Tuple{String, Int64}})::Tuple{String, Int64} \n\treturn stdata::Vector{Tuple{String, Int64}}{max_aggregate(stdata::Vector{Tuple{String, Int64}})}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_aggregate;",
            "@test(candidate([(\"Juan Whelan\", 90), (\"Sabah Colley\", 88), (\"Peter Nichols\", 7), (\"Juan Whelan\", 122), (\"Sabah Colley\", 84)]) == (\"Juan Whelan\", 212))",
            "@test(candidate([(\"Juan Whelan\", 50), (\"Sabah Colley\", 48), (\"Peter Nichols\", 37), (\"Juan Whelan\", 22), (\"Sabah Colley\", 14)]) == (\"Juan Whelan\", 72))",
            "@test(candidate([(\"Juan Whelan\", 10), (\"Sabah Colley\", 20), (\"Peter Nichols\", 30), (\"Juan Whelan\", 40), (\"Sabah Colley\", 50)]) == (\"Sabah Colley\", 70))",
            "end"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "",
        "code": "\tWrite a jlthon function to find element at a given index after number of rotations.\nfunction find_Element(arr::Vector{Int64}, ranges::Vector{Vector{Int64}}, rotations::Int64, index::Int64)::Int64 \n\tWrite a jlthon function to find element at a given index after number of rotations.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Element;",
            "@test(candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == 3)",
            "@test(candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2) == 3)",
            "@test(candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1) == 1)",
            "end"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "",
        "code": "\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\nfunction start_withp(words::Vector{String})::Tuple{String, String} \n\tWrite a function to return two words from a vector of words starting with letter 'p'.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = start_withp;",
            "@test(candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == (\"Python\", \"PHP\"))",
            "@test(candidate([\"Python Programming\", \"Java Programming\"]) == (\"Python\", \"Programming\"))",
            "@test(candidate([\"Pqrst Pqr\", \"qrstuv\"]) == (\"Pqrst\", \"Pqr\"))",
            "end"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "",
        "code": "\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\nfunction max_sum_increasing_subseq(a::Vector{Int64}, n::Int64, index::Int64, k::Int64)::Int64 \n{\n\tif(index::Int64(a) < index::Int64(a))\n\t{\n\t\treturn a.max_sum_increasing_subseq(a, n, index::Int64(a), k::Int64(k));\n\t}\n\telse\n\t{\n\t\treturn a.max_sum_increasing_subseq(a, n, index::Int64(a), k::Int64(k));\n\t}\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_sum_increasing_subseq;",
            "@test(candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11)",
            "@test(candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7)",
            "@test(candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71)",
            "end"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "",
        "code": "\tWrite a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\nfunction large_product(nums1::Vector{Int64}, nums2::Vector{Int64}, N::Int64)::Vector{Int64} \n{\n\tN::Int64 n = nums1.size();\n\tN::Int64 m = nums2.size();\n\tN::Int64 k = N::Int64(nums1.size());\n\tN::Int64 l = N::Int64(nums2.size());\n\tN::Int64 i = N::Int64(nums1.size());\n\tN::Int64 j = N::Int64(nums2.size());\n\tN::Int64 k1 = N::Int64(nums1.size());\n\tN::Int64 k2 = N::Int64(nums2.size());\n\tN::Int64 k3 = N::Int64(nums1.size());\n\tN::Int64 k4 = N::Int64(nums2.size());\n\tN::Int64 k5 = N::Int64(nums1.size());\n\tN::Int64 k6 = N::Int64(nums2.size());\n\tN::Int64 k7 = N::Int64(nums1.size());\n\tN::Int64 k8 = N::Int64(nums2.size());\n\tN::Int64 k9 = N::Int64(nums1.size());\n\tN::Int64 k10 = N::Int64(nums2.size());\n\tN::Int64 k11 = N::Int64(nums1.size());\n\tN::Int64 k12 = N::Int64(nums2.size());\n\tN::Int64 k13 = N::Int64(nums1.size());\n\tN::Int64 k14 = N::Int64(nums2.size());\n\tN::Int64 k15 = N::Int64(nums1.size());\n\tN::Int64 k16 = N::Int64(nums2.size());\n\tN::Int64 k17 = N::Int64(nums1.size());\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = large_product;",
            "@test(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50])",
            "@test(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [60, 54, 50, 48])",
            "@test(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [60, 54, 50, 48, 45])",
            "end"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "",
        "code": "\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d, e)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d, e, f)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d, e, f, g)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d, e, f, g, h)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d, e, f, g, h, i)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d, e, f, g, h, i, j)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c, d, e, f, g, h, i, j, k)::Int64 \n\tWrite a jlthon function to find the maximum of two numbers.\nfunction maximum(a, b, c,\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = maximum;",
            "@test(candidate(5, 10) == 10)",
            "@test(candidate(-1, -2) == -1)",
            "@test(candidate(9, 7) == 9)",
            "end"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "",
        "code": "\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_tuple(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_index(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_index_with_index(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_index_with_index_with_index(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_index_with_index_with_index_with_index(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_index_with_index_with_index_with_index_with_index(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_index_with_index_with_index_with_index_with_index_with_index(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_index_with_index_with_index_with_index_with_index_with_index_with_index(str1::String)::Vector{String} \n\tWrite a function to convert a given string to a vector of characters.\nfunction string_to_vector_with_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = string_to_tuple;",
            "@test(candidate(\"python 3.0\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"])",
            "@test(candidate(\"item1\") == [\"i\", \"t\", \"e\", \"m\", \"1\"])",
            "@test(candidate(\"15.10\") == [\"1\", \"5\", \".\", \"1\", \"0\"])",
            "end"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "",
        "code": "\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2(n::Int64)::Int64 \n\tWrite a jlthon function to find\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = highest_Power_of_2;",
            "@test(candidate(10) == 8)",
            "@test(candidate(19) == 16)",
            "@test(candidate(32) == 32)",
            "end"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "",
        "code": "\tWrite a function to find then'th lucas number.\nfunction find_lucas(n::Int64)::Int64 \n\tFind then'th lucas number.\n\treturn find_lucas(n::Int64(n))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_lucas;",
            "@test(candidate(9) == 76)",
            "@test(candidate(4) == 7)",
            "@test(candidate(3) == 4)",
            "end"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "",
        "code": "\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{String} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\nfunction add_string(list_::Vector{Any}, string::String)::Vector{Any} \n\tWrite a function to apply a given format string to all of the elements in a vector.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = add_string;",
            "@test(candidate([1, 2, 3, 4], \"temp{0}\") == [\"temp1\", \"temp2\", \"temp3\", \"temp4\"])",
            "@test(candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\") == [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])",
            "@test(candidate([5, 6, 7, 8], \"string{0}\") == [\"string5\", \"string6\", \"string7\", \"string8\"])",
            "end"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "",
        "code": "\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n::Int64)::Int64 \n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_max_sum;",
            "@test(candidate(60) == 106)",
            "@test(candidate(10) == 12)",
            "@test(candidate(2) == 2)",
            "end"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "",
        "code": "\tWrite a function to find the vector with maximum length.\nfunction max_length_list(input_list::Vector{Vector{Int64}})::Tuple{Int64, Vector{Int64}} \n\treturn input_list.Vector{Int64, Vector{Int64}}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_length_list;",
            "@test(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))",
            "@test(candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) == (5, [1, 2, 3, 4, 5]))",
            "@test(candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) == (4, [6, 7, 8, 9]))",
            "end"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "",
        "code": "\tWrite a function to check if given vector contains no duplicates.\nfunction check_distinct(test_tup::Vector{Int64})::Bool \n\tCheck if given vector contains no duplicates.\n\treturn test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(test_tup::Vector{Int64}(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_distinct;",
            "@test(candidate([1, 4, 5, 6, 1, 4]) == false)",
            "@test(candidate([1, 4, 5, 6]) == true)",
            "@test(candidate([2, 3, 4, 5, 6]) == true)",
            "end"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "",
        "code": "\tWrite a jlthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1::String)::Union{String, Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first non-repeating character in a given string.\nfunction first_non_repeating_character(str1::String)::Nothing{Nothing} \n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = first_non_repeating_character;",
            "@test(candidate(\"abcabc\") == nothing)",
            "@test(candidate(\"abc\") == \"a\")",
            "@test(candidate(\"ababc\") == \"c\")",
            "end"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "",
        "code": "\tWrite a function to check whether the given string starts and ends with the same character or not.\nfunction check_char(string::String)::String \n\tCheck whether the given string starts and ends with the same character or not.\n\treturn string::String(string::String::check_char(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::to_string(string::String::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_char;",
            "@test(candidate(\"abba\") == \"Valid\")",
            "@test(candidate(\"a\") == \"Valid\")",
            "@test(candidate(\"abcd\") == \"Invalid\")",
            "end"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "",
        "code": "\tWrite a function to find the median of three numbers.\nfunction median_numbers(a::Int64, b::Int64, c::Int64)::Float64 \n\tFind the median of three numbers.\n\treturn (a + b + c) / 3.0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = median_numbers;",
            "@test(candidate(25, 55, 65) == 55.0)",
            "@test(candidate(20, 10, 30) == 20.0)",
            "@test(candidate(15, 45, 75) == 45.0)",
            "end"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "",
        "code": "\tWrite a function to compute the sum of digits of each number of a given vector.\nfunction sum_of_digits(nums::Vector{Any})::Int64 \n\tWrite a function to compute the sum of digits of each number of a given vector.\nfunction sum_of_digits(nums::Vector{Any})::Int64 \n\tWrite a function to compute the sum of digits of each number of a given vector.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_of_digits;",
            "@test(candidate([10, 2, 56]) == 14)",
            "@test(candidate([[10, 20, 4, 5, \"b\", 70, \"a\"]]) == 19)",
            "@test(candidate([10, 20, -4, 5, -70]) == 19)",
            "end"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "",
        "code": "\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nfunction bitwise_xor(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nfunction bitwise_xor(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nfunction bitwise_xor(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nfunction bitwise_xor(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nfunction bitwise_xor(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nfunction bitwise_xor(test_tup1::Tuple{Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = bitwise_xor;",
            "@test(candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10))",
            "@test(candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14))",
            "@test(candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13))",
            "end"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "",
        "code": "\tWrite a jlthon function to identify non-prime numbers.\nfunction is_not_prime(n::Int64)::Bool \n\tReturn True if n is not prime.\n\treturn n % 2 == 0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_not_prime;",
            "@test(candidate(2) == false)",
            "@test(candidate(10) == true)",
            "@test(candidate(35) == true)",
            "@test(candidate(37) == false)",
            "end"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "",
        "code": "\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to extract the number of unique tuples in the given vector.\nfunction extract_freq(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_freq;",
            "@test(candidate([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3)",
            "@test(candidate([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4)",
            "@test(candidate([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4)",
            "end"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "",
        "code": "\tWrite a function to perform index wise addition of vector elements in the given two nested vectors.\nfunction add_nested_tuples(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n{\n\tVector{Int64} = test_tup1 + test_tup2;\n\treturn Vector{Int64};\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = add_nested_tuples;",
            "@test(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]])",
            "@test(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[9, 12], [9, 16], [5, 12], [10, 15]])",
            "@test(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[11, 14], [11, 18], [7, 14], [12, 17]])",
            "end"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "",
        "code": "\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\nfunction minimum(a::Int64, b::Int64)::Int64 \n\tWrite a jlthon function to find the minimum of two numbers.\n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = minimum;",
            "@test(candidate(1, 2) == 1)",
            "@test(candidate(-5, -4) == -5)",
            "@test(candidate(0, 0) == 0)",
            "end"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "",
        "code": "\tWrite a function to check whether an element exists within a tuple.\nfunction check_tuplex(tuplex::Vector{Union{String, Int64}}, tuple1::Any)::Bool \n\tCheck whether an element exists within a tuple.\n\treturn tuple1::Any.is_in(tuplex::Vector{tuple1::Any})\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_tuplex;",
            "@test(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\") == true)",
            "@test(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\") == false)",
            "@test(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3) == true)",
            "end"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "",
        "code": "\tWrite a jlthon function to find whether the parity of a given number is odd.\nfunction find_Parity(x::Int64)::Bool \n\tFind the parity of a given number.\n\treturn (x & 1) == 1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Parity;",
            "@test(candidate(12) == false)",
            "@test(candidate(7) == true)",
            "@test(candidate(10) == false)",
            "end"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "",
        "code": "\tWrite a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n::Int64)::Any \n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = rearrange_bigger;",
            "@test(candidate(12) == 21)",
            "@test(candidate(10) == false)",
            "@test(candidate(102) == 120)",
            "end"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "",
        "code": "\tWrite a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nfunction k_smallest_pairs(nums1::Vector{Int64}, nums2::Vector{Int64}, k::Int64)::Vector{Vector{Int64}} \n{\n\tVector{Int64} nums1 = nums1::Vector{Int64};\n\tVector{Int64} nums2 = nums2::Vector{Int64};\n\tVector{Int64} nums3 = nums3::Vector{Int64};\n\tVector{Int64} nums4 = nums4::Vector{Int64};\n\tVector{Int64} nums5 = nums5::Vector{Int64};\n\tVector{Int64} nums6 = nums6::Vector{Int64};\n\tVector{Int64} nums7 = nums7::Vector{Int64};\n\tVector{Int64} nums8 = nums8::Vector{Int64};\n\tVector{Int64} nums9 = nums9::Vector{Int64};\n\tVector{Int64} nums10 = nums10::Vector{Int64};\n\tVector{Int64} nums11 = nums11::Vector{Int64};\n\tVector{Int64} nums12 = nums12::Vector{Int64};\n\tVector{Int64} nums13 = nums13::Vector{Int64};\n\tVector{Int64} nums14 = nums14::Vector{Int64};\n\tVector{Int64} nums15 = nums15::Vector{Int64};\n\tVector{Int64} nums16 = nums16::Vector{Int64};\n\tVector{Int64} nums17 = nums17::Vector{Int64};\n\tVector{Int64} nums18 = nums18::Vector{Int64};\n\tVector{Int64} nums19 = nums19::Vector{Int64};\n\tVector{Int64} nums20 = nums20::Vector{Int64};\n\tVector{Int64} nums21 = nums21::Vector{Int64};\n\tVector{Int64} nums22 = nums22::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = k_smallest_pairs;",
            "@test(candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]])",
            "@test(candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]])",
            "@test(candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]])",
            "end"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "",
        "code": "\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples within a given vector.\nfunction min_product_tuple(list1::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the minimum product from the pairs of tuples\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = min_product_tuple;",
            "@test(candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8)",
            "@test(candidate([(10, 20), (15, 2), (5, 10)]) == 30)",
            "@test(candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100)",
            "end"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "",
        "code": "\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function to find the minimum value in a given heterogeneous vector.\nfunction min_val(listval::Vector{Union{String, Int64}})::Int64 \n\tWrite a function\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = min_val;",
            "@test(candidate([\"Python\", 3, 2, 4, 5, \"version\"]) == 2)",
            "@test(candidate([\"Python\", 15, 20, 25]) == 15)",
            "@test(candidate([\"Python\", 30, 20, 40, 50, \"version\"]) == 20)",
            "end"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "",
        "code": "\tWrite a function to convert the given snake case string to camel case string.\nfunction snake_to_camel(word::String)::String \n\tConvert a snake case string to camel case string.\n\treturn word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_camel(word.to_snake(word.to_c\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = snake_to_camel;",
            "@test(candidate(\"android_tv\") == \"AndroidTv\")",
            "@test(candidate(\"google_pixel\") == \"GooglePixel\")",
            "@test(candidate(\"apple_watch\") == \"AppleWatch\")",
            "end"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "",
        "code": "\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given vector.\nfunction remove_odd(l::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to remove odd numbers from a given\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_odd;",
            "@test(candidate([1, 2, 3]) == [2])",
            "@test(candidate([2, 4, 6]) == [2, 4, 6])",
            "@test(candidate([10, 20, 3]) == [10, 20])",
            "end"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "",
        "code": "\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector of tuples.\nfunction extract_nth_element(list1::Vector{Tuple{String, Int64, Int64}}, n::Int64)::Vector{Any} \n\tWrite a function to extract the nth element from a given vector\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_nth_element;",
            "@test(candidate([(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 0) == [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"])",
            "@test(candidate([(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 2) == [99, 96, 94, 98])",
            "@test(candidate([(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 1) == [98, 97, 91, 94])",
            "end"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "",
        "code": "\tWrite a jlthon function to check whether any value in a sequence exists in a sequence or not.\nfunction overlapping(list1::Vector{Int64}, list2::Vector{Int64})::Bool \n\tCheck whether any value in a sequence exists in a sequence or not.\n\treturn list1.overlaps(list2)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = overlapping;",
            "@test(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == false)",
            "@test(candidate([1, 2, 3], [4, 5, 6]) == false)",
            "@test(candidate([1, 4, 5], [1, 4, 5]) == true)",
            "end"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "",
        "code": "\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\nfunction max_Product(arr::Vector{Int64})::Tuple{Int64, Int64} \n\tWrite a jlthon function to find a pair with highest product from a given vector of integers.\n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_Product;",
            "@test(candidate([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8))",
            "@test(candidate([0, -1, -2, -4, 5, 0, -6]) == (-4, -6))",
            "@test(candidate([1, 2, 3]) == (2, 3))",
            "end"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "",
        "code": "\tWrite a function to find common first element in given vector of vectors.\nfunction group_tuples(Input::Vector{Vector{String}})::Vector{Vector{String}} \n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{String}}{Vector{String}}\n\treturn Input::Vector{Vector{\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = group_tuples;",
            "@test(candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]) == [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]])",
            "@test(candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])",
            "@test(candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]) == [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]])",
            "end"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "",
        "code": "\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the element of a vector having maximum length.\nfunction Find_Max(lst\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Find_Max;",
            "@test(candidate([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]) == [\"A\", \"B\", \"C\"])",
            "@test(candidate([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3])",
            "@test(candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1])",
            "end"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "",
        "code": "\tWrite a function to round every number of a given vector of numbers and print the total sum multiplied by the length of the vector.\nfunction round_and_sum(list1::Vector{Union{Float64, Int64}})::Int64 \n\tWrite a function to round every number of a given vector of numbers and print the total sum multiplied by the length of the vector.\nfunction round_and_sum(list1::Vector{Union{Float64, Int64}})::Float64 \n\tWrite a function to round every number of a given vector of numbers and print the total sum multiplied by the length of the vector.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = round_and_sum;",
            "@test(candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]) == 243)",
            "@test(candidate([5, 2, 9, 24.3, 29]) == 345)",
            "@test(candidate([25.0, 56.7, 89.2]) == 513)",
            "end"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the cube sum of first n even natural numbers.\nfunction cube_Sum(n::Int64)::Int64 \n\tWrite a jlthon function to find the cube sum of first n even natural numbers.\nfunction cube_Sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the cube sum of first n even natural numbers.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = cube_Sum;",
            "@test(candidate(2) == 72)",
            "@test(candidate(3) == 288)",
            "@test(candidate(4) == 800)",
            "end"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "",
        "code": "\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple(test_tup::Tuple{String, String, Int64, String})::String \n\tWrite a function to concatenate each element of tuple by the delimiter.\nfunction concaten\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = concatenate_tuple;",
            "@test(candidate((\"ID\", \"is\", 4, \"UTS\")) == \"ID-is-4-UTS\")",
            "@test(candidate((\"QWE\", \"is\", 4, \"RTY\")) == \"QWE-is-4-RTY\")",
            "@test(candidate((\"ZEN\", \"is\", 4, \"OP\")) == \"ZEN-is-4-OP\")",
            "end"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "",
        "code": "\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N_of_N_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N_of_N_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N_of_N_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N_of_N_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N_of_N_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube_of_N_of_N_of_N(n::Int64)::Float64 \n\tWrite a jlthon function to find the average\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Average_Of_Cube;",
            "@test(candidate(2) == 4.5)",
            "@test(candidate(3) == 12)",
            "@test(candidate(1) == 1)",
            "end"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "",
        "code": "\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear(test_tuple::Tuple{String, String, String})::Vector{String} \n\tWrite a function to extract only the rear index element of each string in the given tuple.\nfunction\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_rear;",
            "@test(candidate((\"Mers\", \"for\", \"Vers\")) == [\"s\", \"r\", \"s\"])",
            "@test(candidate((\"Avenge\", \"for\", \"People\")) == [\"e\", \"r\", \"e\"])",
            "@test(candidate((\"Gotta\", \"get\", \"go\")) == [\"a\", \"t\", \"o\"])",
            "end"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "",
        "code": "\tWrite a function to count the number of subvectors containing a particular element.\nfunction count_element_in_list(list1::Vector{Vector{Any}}, x::Any)::Int64 \n\tWrite a function to count the number of subvectors containing a particular element.\nfunction count_element_in_list(list1::Vector{Vector{Any}}, x::Any)::Int64 \n\tWrite a function to count the number of subvectors containing a particular element.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_element_in_list;",
            "@test(candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3)",
            "@test(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\") == 3)",
            "@test(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\") == 1)",
            "end"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "",
        "code": "\tWrite a function to filter odd numbers.\nfunction filter_oddnumbers(nums::Vector{Int64})::Vector{Int64} \n{\n\treturn nums.filter(x => x % 2 == 0)\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = filter_oddnumbers;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9])",
            "@test(candidate([10, 20, 45, 67, 84, 93]) == [45, 67, 93])",
            "@test(candidate([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3])",
            "end"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "",
        "code": "\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunction change_date_format(dt::String)::String \n\tChange the date format of a date.\n\treturn dt::String(\"%Y-%m-%d\")\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = change_date_format;",
            "@test(candidate(\"2026-01-02\") == \"02-01-2026\")",
            "@test(candidate(\"2020-11-13\") == \"13-11-2020\")",
            "@test(candidate(\"2021-04-26\") == \"26-04-2021\")",
            "end"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "",
        "code": "\tWrite a function to sort the given vector by using shell sort.\nfunction shell_sort(my_list::Vector{Int64})::Vector{Int64} \n\tSort the given vector using shell sort.\n\tmy_list.sort(lambda x, y: x - y)\n\treturn my_list\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = shell_sort;",
            "@test(candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95])",
            "@test(candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87])",
            "@test(candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96])",
            "end"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "",
        "code": "\tWrite a function to extract the elementwise and tuples from the given two tuples.\nfunction and_tuples(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to extract the elementwise and tuples from the given two tuples.\nfunction and_tuples(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to extract the elementwise and tuples from the given two tuples.\nfunction and_tuples(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to extract the elementwise and tuples from the given two tuples.\nfunction and_tuples(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to extract the elementwise and tuples from the given two tuples.\nfunction and_tuples(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to extract the elementwise and tuples from the given two tuples.\nfunction and_tuples(test_tup1::Tuple{Int64, Int64, Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = and_tuples;",
            "@test(candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1))",
            "@test(candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0))",
            "@test(candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0))",
            "end"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "",
        "code": "\tWrite a function to find the directrix of a parabola.\nfunction parabola_directrix(a::Int64, b::Int64, c::Int64)::Int64 \n\tReturn the directrix of a parabola.\n\treturn a + b * c\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = parabola_directrix;",
            "@test(candidate(5, 3, 2) == -198)",
            "@test(candidate(9, 8, 4) == -2336)",
            "@test(candidate(2, 4, 6) == -130)",
            "end"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "",
        "code": "\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\tWrite a function that takes two vectors and returns true if they have at least one common element.\nfunction common_element(list1::Vector{Any}, list2::Vector{Any})::Union{Bool, Nothing} \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = common_element;",
            "@test(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == true)",
            "@test(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == nothing)",
            "@test(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]) == true)",
            "end"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "",
        "code": "\tWrite a function to find the median length of a trapezium.\nfunction median_trapezium(base1::Int64, base2::Int64, height::Int64)::Float64 \n\tFind the median length of a trapezium.\n\treturn (base1 + base2) / 2.0;\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = median_trapezium;",
            "@test(candidate(15, 25, 35) == 20)",
            "@test(candidate(10, 20, 30) == 15)",
            "@test(candidate(6, 9, 4) == 7.5)",
            "end"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "",
        "code": "\tWrite a function to check whether the entered number is greater than the elements of the given vector.\nfunction check_greater(arr::Vector{Int64}, number::Int64)::Bool \n\tCheck whether the given number is greater than the elements of the given vector.\n\treturn arr.check_greater(number::Int64)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_greater;",
            "@test(candidate([1, 2, 3, 4, 5], 4) == false)",
            "@test(candidate([2, 3, 4, 5, 6], 8) == true)",
            "@test(candidate([9, 7, 4, 8, 6, 1], 11) == true)",
            "end"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "",
        "code": "\tWrite a function that matches a string that has an a followed by one or more b's.\nfunction text_match_one(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case_with_case_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case_with_case_with_case_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case_with_case_with_case_with_case_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case_with_case_with_case_with_case_with_case_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case_with_case_with_case_with_case_with_case_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match_all_with_case_with_case_with_case_with_case_with_case_with_case(text::String)::Bool \n\tMatch a string to the first occurrence of a string.\nfunction text_match\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_match_one;",
            "@test(candidate(\"ac\") == false)",
            "@test(candidate(\"dc\") == false)",
            "@test(candidate(\"abba\") == true)",
            "end"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "",
        "code": "\tWrite a jlthon function to find the last digit of a given number.\nfunction last_Digit(n::Int64)::Int64 \n\tReturn the last digit of a given number.\n\treturn n.Int64(last_Digit(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = last_Digit;",
            "@test(candidate(123) == 3)",
            "@test(candidate(25) == 5)",
            "@test(candidate(30) == 0)",
            "end"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "",
        "code": "\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to return the negative numbers in a vector.\nfunction neg_nos(list1::Vector{Int64})::Vector{Int64} \n\tWrite a j\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = neg_nos;",
            "@test(candidate([-1, 4, 5, -6]) == [-1, -6])",
            "@test(candidate([-1, -2, 3, 4]) == [-1, -2])",
            "@test(candidate([-7, -6, 8, 9]) == [-7, -6])",
            "end"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "",
        "code": "\tWrite a function to remove odd characters in a string.\nfunction remove_odd(str1::String)::String \n\tRemove odd characters from a string.\n\treturn str1::String(str1::remove_odd(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::to_string(str1::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_odd;",
            "@test(candidate(\"python\") == \"yhn\")",
            "@test(candidate(\"program\") == \"rga\")",
            "@test(candidate(\"language\") == \"agae\")",
            "end"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "",
        "code": "\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to count bidirectional tuple pairs.\nfunction count_bidirectional(test_list::Vector{Tuple{Int64, Int64}})::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_bidirectional;",
            "@test(candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3)",
            "@test(candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2)",
            "@test(candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 4)",
            "end"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "",
        "code": "\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single(L::Vector{Int64})::Int64 \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector(L::Vector{Int64})::Vector<Int64> \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector_vector(L::Vector{Int64})::Vector<Vector<Int64>> \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector_vector_vector(L::Vector{Int64})::Vector<Vector<Vector<Int64>>> \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector_vector_vector_vector(L::Vector{Int64})::Vector<Vector<Vector<Vector<Int64>>>> \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector_vector_vector_vector(L::Vector{Int64})::Vector<Vector<Vector<Vector<Int64>>>> \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector_vector_vector_vector(L::Vector{Int64})::Vector<Vector<Vector<Vector<Int64>>>> \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector_vector_vector_vector(L::Vector{Int64})::Vector<Vector<Vector<Vector<Int64>>>> \n\tWrite a function to join a vector of multiple integers into a single integer.\nfunction multiple_to_single_vector_vector_vector_vector(L::Vector{Int64})::Vector<Vector<Vector<Vector<Int64>>>> \n\tWrite a function to join a vector of multiple integers\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = multiple_to_single;",
            "@test(candidate([11, 33, 50]) == 113350)",
            "@test(candidate([-1, 2, 3, 4, 5, 6]) == -123456)",
            "@test(candidate([10, 15, 20, 25]) == 10152025)",
            "end"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "",
        "code": "\tWrite a function to find the first adverb and their positions in a given sentence.\nfunction find_adverb_position(text::String)::Tuple{Int64, Int64, String} \n\tFind the first adverb and its position in a given sentence.\n\treturn find_adverb_position(text::String(text::String::Literal, text::String::Literal))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_adverb_position;",
            "@test(candidate(\"clearly!! we can see the sky\") == (0, 7, \"clearly\"))",
            "@test(candidate(\"seriously!! there are many roses\") == (0, 9, \"seriously\"))",
            "@test(candidate(\"unfortunately!! sita is going to home\") == (0, 13, \"unfortunately\"))",
            "end"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "",
        "code": "\tWrite a function to find the surface area of a cube of a given size.\nfunction surfacearea_cube(l::Int64)::Int64 \n\tReturn the surface area of a cube of a given size.\n\treturn l::Int64(0)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = surfacearea_cube;",
            "@test(candidate(5) == 150)",
            "@test(candidate(3) == 54)",
            "@test(candidate(10) == 600)",
            "end"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "",
        "code": "\tWrite a function to find the ration of positive numbers in a vector of integers.\nfunction positive_count(nums::Vector{Int64})::Float64 \n\tReturn the number of positive numbers in a vector of integers.\n\treturn nums.count(1)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = positive_count;",
            "@test(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)",
            "@test(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)",
            "@test(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
            "end"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "",
        "code": "\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from the given vector.\nfunction largest_neg(list1::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest negative number from\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = largest_neg;",
            "@test(candidate([1, 2, 3, -4, -6]) == -6)",
            "@test(candidate([1, 2, 3, -8, -9]) == -9)",
            "@test(candidate([1, 2, 3, 4, -1]) == -1)",
            "end"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "",
        "code": "\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_tuple(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector_tuple(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector_vector(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector_vector_tuple(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector_vector_vector(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector_vector_vector_tuple(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector_vector_vector_vector(test_list::Vector{Vector{Int64}}, K::Int64)::Vector{Vector{Int64}} \n\tWrite a function to trim each vector by k in the given vectors.\nfunction trim_vector_vector_vector_vector_tuple(test_list::Vector{Vector{Int64}}, K::Int64):\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = trim_tuple;",
            "@test(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]])",
            "@test(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1) == [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]])",
            "@test(candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1) == [[8, 4], [8, 12], [1, 7], [6, 9]])",
            "end"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "",
        "code": "\tWrite a function to perform index wise multiplication of vector elements in the given two vectors.\nfunction index_multiplication(test_tup1::Vector{Vector{Int64}}, test_tup2::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n{\n\treturn test_tup1::Vector{Vector{Int64}} * test_tup2::Vector{Vector{Int64}};\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = index_multiplication;",
            "@test(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]])",
            "@test(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[14, 32], [20, 60], [6, 20], [16, 44]])",
            "@test(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[24, 45], [30, 77], [12, 33], [27, 60]])",
            "end"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "",
        "code": "\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\nfunction count_Occurrence(tup::Any, lst::Vector{Any})::Int64 \n\tWrite a jlthon function to count the occurence of all elements of vector in a tuple.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_Occurrence;",
            "@test(candidate((\"a\", \"a\", \"c\", \"b\", \"d\"), [\"a\", \"b\"]) == 3)",
            "@test(candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6)",
            "@test(candidate((1, 2, 3, 4, 5, 6), [1, 2]) == 2)",
            "end"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "",
        "code": "\tWrite a function to find cubes of individual elements in a vector.\nfunction cube_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of integers representing the number of cubes in the vector.\nfunction cube_nums_int(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of integers representing the number of cubes in the vector.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = cube_nums;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000])",
            "@test(candidate([10, 20, 30]) == [1000, 8000, 27000])",
            "@test(candidate([12, 15]) == [1728, 3375])",
            "end"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "",
        "code": "\tWrite a function to calculate the sum of perrin numbers.\nfunction cal_sum(n::Int64)::Int64 \n\tCalculate the sum of perrin numbers.\n\treturn sum(n for n in range(1, n + 1))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = cal_sum;",
            "@test(candidate(9) == 49)",
            "@test(candidate(10) == 66)",
            "@test(candidate(11) == 88)",
            "end"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "",
        "code": "\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tWrite a function to extract specified size of strings from a given vector of string values.\nfunction extract_string(str::Vector\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_string;",
            "@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])",
            "@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])",
            "@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])",
            "end"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "",
        "code": "\tWrite a function to remove all whitespaces from the given string.\nfunction remove_whitespaces(text1::String)::String \n\tRemove all whitespaces from the given string.\n\treturn text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1.String(text1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_whitespaces;",
            "@test(candidate(\" Google    Flutter \") == \"GoogleFlutter\")",
            "@test(candidate(\" Google    Dart \") == \"GoogleDart\")",
            "@test(candidate(\" iOS    Swift \") == \"iOSSwift\")",
            "end"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "",
        "code": "\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int64)::Int64 \n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost::Int64, sale_amount::Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = loss_amount;",
            "@test(candidate(1500, 1200) == 0)",
            "@test(candidate(100, 200) == 100)",
            "@test(candidate(2000, 5000) == 3000)",
            "end"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of even factors of a number.\nfunction sumofFactors(n::Int64)::Int64 \n\tWrite a jlth\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sumofFactors;",
            "@test(candidate(18) == 26)",
            "@test(candidate(30) == 48)",
            "@test(candidate(6) == 8)",
            "end"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "",
        "code": "\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with_regex_with_regex(text::String)::Bool \n\tWrite a function that matches a word containing 'z'.\nfunction text_match_wordz_with_regex_with\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_match_wordz;",
            "@test(candidate(\"pythonz.\") == true)",
            "@test(candidate(\"xyz.\") == true)",
            "@test(candidate(\"  lang  .\") == false)",
            "end"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "",
        "code": "\tWrite a function to check whether the given month number contains 31 days or not.\nfunction check_monthnumb_number(monthnum2::Int64)::Bool \n\tCheck whether the given month number contains 31 days.\n\treturn monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(monthnum2.Int64(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_monthnumb_number;",
            "@test(candidate(5) == true)",
            "@test(candidate(2) == false)",
            "@test(candidate(6) == false)",
            "end"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "",
        "code": "\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values.\nfunction reverse_string_list(stringlist::Vector{String})::Vector{String} \n\tWrite a function to reverse each string in a given vector of string values\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = reverse_string_list;",
            "@test(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"])",
            "@test(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"])",
            "@test(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"])",
            "end"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "",
        "code": "\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a jlthon function to find the subvector having minimum length.\nfunction Find_Min(lst::Vector{Vector{Any}})::Vector{Any} \n\tWrite a j\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Find_Min;",
            "@test(candidate([[1], [1, 2], [1, 2, 3]]) == [1])",
            "@test(candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1])",
            "@test(candidate([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]) == [\"x\"])",
            "end"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "",
        "code": "\tWrite a function to find the area of a rectangle.\nfunction rectangle_area(l::Int64, b::Int64)::Int64 \n\tReturn the area of a rectangle.\n\treturn l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::Int64(l::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = rectangle_area;",
            "@test(candidate(10, 20) == 200)",
            "@test(candidate(10, 5) == 50)",
            "@test(candidate(4, 2) == 8)",
            "end"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "",
        "code": "\tWrite a function to remove uppercase substrings from a given string.\nfunction remove_uppercase(str1::String)::String \n\tRemove uppercase substrings from a given string.\n\treturn str1::String(remove_uppercase(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_uppercase;",
            "@test(candidate(\"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")",
            "@test(candidate(\"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")",
            "@test(candidate(\"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
            "end"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "",
        "code": "\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a jlthon function to get the first element of each subvector.\nfunction Extract(lst::Vector{Vector{Int64}})::Vector{Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Extract;",
            "@test(candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6])",
            "@test(candidate([[1, 2, 3], [4, 5]]) == [1, 4])",
            "@test(candidate([[9, 8, 1], [1, 2]]) == [9, 1])",
            "end"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "",
        "code": "\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::String)::Int64 \n\tWrite a jlthon function to count the upper case characters in a given string.\nfunction upper_ctr(str::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = upper_ctr;",
            "@test(candidate(\"PYthon\") == 1)",
            "@test(candidate(\"BigData\") == 1)",
            "@test(candidate(\"program\") == 0)",
            "end"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "",
        "code": "\tWrite a function to find the maximum product subvector of the given vector.\nfunction max_subarray_product(arr::Vector{Int64})::Int64 \n\tReturn the maximum product of the given vector.\n\treturn arr.max_subarray_product(arr)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_subarray_product;",
            "@test(candidate([1, -2, -3, 0, 7, -8, -2]) == 112)",
            "@test(candidate([6, -3, -10, 0, 2]) == 180)",
            "@test(candidate([-2, -40, 0, -2, -3]) == 80)",
            "end"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "",
        "code": "\tWrite a function to check if all values are same in a dictionary.\nfunction check_value(dict::Dict{String, Int64}>, n::Int64)::Bool \n\tCheck if all values are same in a dictionary.\n\treturn True\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_value;",
            "@test(candidate(Dict(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 10) == false)",
            "@test(candidate(Dict(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 12) == true)",
            "@test(candidate(Dict(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 5) == false)",
            "end"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "",
        "code": "\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::Int64 \n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nfunction max_product(arr::Vector{Int64})::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_product;",
            "@test(candidate([3, 100, 4, 5, 150, 6]) == 3000)",
            "@test(candidate([4, 42, 55, 68, 80]) == 50265600)",
            "@test(candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
            "end"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "",
        "code": "\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nfunction add_pairwise(test_tup::Tuple{Int64, Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\treturn test_tup::Tuple{Int64, Int64, Int64, Int64, Int64} + test_tup::Tuple{Int64, Int64, Int64, Int64, Int64}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = add_pairwise;",
            "@test(candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18))",
            "@test(candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20))",
            "@test(candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22))",
            "end"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "",
        "code": "\tWrite a jlthon function to find the product of the vector multiplication modulo n.\nfunction find_remainder(arr::Vector{Int64}, n::Int64)::Int64 \n\tFind the product of the vector multiplication modulo n.\n\treturn arr.product(n)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_remainder;",
            "@test(candidate([100, 10, 5, 25, 35, 14], 11) == 9)",
            "@test(candidate([1, 1, 1], 1) == 0)",
            "@test(candidate([1, 2, 1], 2) == 0)",
            "end"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the given vector contains consecutive numbers or not.\nfunction check_Consecutive(l::Vector{Int64})::Bool \n\tCheck whether the given vector contains consecutive numbers.\n\treturn l::Vector{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_Consecutive;",
            "@test(candidate([1, 2, 3, 4, 5]) == true)",
            "@test(candidate([1, 2, 3, 5, 6]) == false)",
            "@test(candidate([1, 2, 1]) == false)",
            "end"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "",
        "code": "\tWrite a function to replace characters in a string.\nfunction replace_char(str1::String, ch::String, newch::String)::String \n\tReplace a character in a string.\n\treturn str1::String.replace(ch::String, newch::String)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = replace_char;",
            "@test(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\")",
            "@test(candidate(\"character\", \"c\", \"a\") == \"aharaater\")",
            "@test(candidate(\"python\", \"l\", \"a\") == \"python\")",
            "end"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "",
        "code": "\tWrite a function to sort a dictionary by value.\nfunction sort_counter(dict1::Dict{String, Int64}>)::Vector{Tuple{String, Int64}} \n\treturn sort(dict1.items(), key=lambda x: x[1])\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sort_counter;",
            "@test(candidate(Dict(\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87)) == [(\"Chemistry\", 87), (\"Physics\", 83), (\"Math\", 81)])",
            "@test(candidate(Dict(\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250)) == [(\"Math\", 400), (\"Physics\", 300), (\"Chemistry\", 250)])",
            "@test(candidate(Dict(\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250)) == [(\"Chemistry\", 1250), (\"Physics\", 1000), (\"Math\", 900)])",
            "end"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of the largest and smallest value in a given vector.\nfunction big_sum(nums::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of the largest and smallest value in a given vector.\nbig_sum(nums::Vector{Int64})::Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = big_sum;",
            "@test(candidate([1, 2, 3]) == 4)",
            "@test(candidate([-1, 2, 3, 4]) == 3)",
            "@test(candidate([2, 3, 6]) == 8)",
            "end"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "",
        "code": "\tWrite a jlthon function to convert the given string to lower case.\nfunction is_lower(string::String)::String \n\tReturn a lower case string.\n\treturn string::String(string::Lower(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(string::String(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_lower;",
            "@test(candidate(\"InValid\") == \"invalid\")",
            "@test(candidate(\"TruE\") == \"true\")",
            "@test(candidate(\"SenTenCE\") == \"sentence\")",
            "end"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "",
        "code": "\tWrite a function to remove lowercase substrings from a given string.\nfunction remove_lowercase(str1::String)::String \n\tRemove lowercase substrings from a given string.\n\treturn str1::String(remove_lowercase(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str1::String(str\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_lowercase;",
            "@test(candidate(\"PYTHon\") == \"PYTH\")",
            "@test(candidate(\"FInD\") == \"FID\")",
            "@test(candidate(\"STRinG\") == \"STRG\")",
            "end"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "",
        "code": "\tWrite a jlthon function to find the first digit of a given number.\nfunction first_Digit(n::Int64)::Int64 \n\tReturn the first digit of a given number.\n\treturn n.Int64(first_Digit(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int64(n.Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = first_Digit;",
            "@test(candidate(123) == 1)",
            "@test(candidate(456) == 4)",
            "@test(candidate(12) == 1)",
            "end"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "",
        "code": "\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to find the n largest integers from a given vector of numbers, returned in descending order.\nfunction heap_queue_largest(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = heap_queue_largest;",
            "@test(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65])",
            "@test(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75])",
            "@test(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35])",
            "end"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "",
        "code": "\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\nfunction Split(list::Vector{Int64})::Vector{Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Split;",
            "@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])",
            "@test(candidate([10, 11, 12, 13]) == [11, 13])",
            "@test(candidate([7, 8, 9, 1]) == [7, 9, 1])",
            "end"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "",
        "code": "\tWrite a jlthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction difference(n::Int64)::Int64 \n\tWrite a jlthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction sum(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of cubes of the first n natural numbers.\nfunction product(n::Int64)::Int64 \n\tWrite a jlthon function to find the product of the first n natural numbers.\nfunction sum_of_cubes(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of cubes of the first n natural numbers.\nfunction sum_of_cubes_of_n(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of cubes of the first n natural numbers.\nfunction sum_of_cubes_of_n_of_n(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of cubes of the first n natural numbers.\nfunction sum_of_cubes_of_n_of_n_of_n(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of cubes of the first n natural numbers.\nfunction sum_of_cubes_of_n_of_n_of_n(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of cubes of the first n natural numbers.\nfunction sum_of_cubes_of_n_of_n_of_n(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of cubes of the first n natural numbers.\nfunction sum_of_cubes_of_n_of_n_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = difference;",
            "@test(candidate(3) == 30)",
            "@test(candidate(5) == 210)",
            "@test(candidate(2) == 6)",
            "end"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of pairs whose xor value is odd.\nfunction find_Odd_Pair(A::Vector{Int64}, N::Int64)::Int64 \n\tFind the odd pair of elements in the given vector.\n\treturn A.find_Odd_Pair(A.begin(), A.end())\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Odd_Pair;",
            "@test(candidate([5, 4, 7, 2, 1], 5) == 6)",
            "@test(candidate([7, 2, 8, 1, 0, 5, 11], 7) == 12)",
            "@test(candidate([1, 2, 3], 3) == 2)",
            "end"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "",
        "code": "\tWrite a function to toggle the case of all characters in a string.\nfunction toggle_string(string::String)::String \n\tToggle the case of all characters in a string.\n\treturn string(string::String(string::Case(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String(string::Case(string::String\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = toggle_string;",
            "@test(candidate(\"Python\") == \"pYTHON\")",
            "@test(candidate(\"Pangram\") == \"pANGRAM\")",
            "@test(candidate(\"LIttLE\") == \"liTTle\")",
            "end"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_2(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_3(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_4(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_5(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_6(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_7(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_8(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums_9(n1::Int64, n2::Int64)::Int64 \n\tWrite a jlthon function\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = digit_distance_nums;",
            "@test(candidate(1, 2) == 1)",
            "@test(candidate(23, 56) == 6)",
            "@test(candidate(123, 256) == 7)",
            "end"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "",
        "code": "\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum(a::Vector{Int64}, size::Int64)::Int64 \n\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum_of_subvector(a::Vector{Int64}, size::Int64)::Int64 \n\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum_of_subvector_of_subvector(a::Vector{Int64}, size::Int64)::Int64 \n\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum_of_subvector_of_subvector_of_subvector(a::Vector{Int64}, size::Int64)::Int64 \n\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum_of_subvector_of_subvector_of_subvector(a::Vector{Int64}, size::Int64)::Int64 \n\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum_of_subvector_of_subvector_of_subvector(a::Vector{Int64}, size::Int64)::Int64 \n\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum_of_subvector_of_subvector_of_subvector(a::Vector{Int64}, size::Int64)::Int64 \n\tWrite a function to find the sum of the largest contiguous subvector in the given vector.\nfunction max_sub_array_sum_of_subvector_of_subvector_of_subvector_of_subvector(a::Vector{Int64}, size::Int64)::Int64 \n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_sub_array_sum;",
            "@test(candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7)",
            "@test(candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8)",
            "@test(candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10)",
            "end"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "",
        "code": "\tWrite a function to find the union of the elements of two given vectors and output them in sorted order.\nfunction union_elements(test_tup1::Vector{Int64}, test_tup2::Vector{Int64})::Vector{Int64} \n{\n\tint i = 0;\n\tint j = 0;\n\twhile (i < test_tup1.size() and j < test_tup2.size()):\n\t\tif (test_tup1[i] < test_tup2[j]){\n\t\t\ttest_tup1[i] = test_tup1[j];\n\t\t\ttest_tup2[j] = test_tup2[i];\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\ttest_tup1[i] = test_tup2[j];\n\t\t\ttest_tup2[j] = test_tup1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < test_tup1.size()):\n\t\ttest_tup1[i] = test_tup1[i];\n\t\ti++;\n\twhile (j < test_tup2.size()):\n\t\ttest_tup2[j] = test_tup2[j];\n\t\tj++;\n\treturn test_tup1;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = union_elements;",
            "@test(candidate([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10])",
            "@test(candidate([1, 2, 3, 4], [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6])",
            "@test(candidate([11, 12, 13, 14], [13, 15, 16, 17]) == [11, 12, 13, 14, 15, 16, 17])",
            "end"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "",
        "code": "\tWrite a jlthon function to find the length of the longest subvectors.\nfunction Find_Max_Length(lst::Vector{Vector{Int64}})::Int64 \n\tReturn the maximum length of the subvectors.\n\treturn max(lst::Vector{Vector{Int64}}.Length(), lst::Vector{Vector{Int64}}.Length())\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Find_Max_Length;",
            "@test(candidate([[1], [1, 4], [5, 6, 7, 8]]) == 4)",
            "@test(candidate([[0, 1], [2, 2], [3, 2, 1]]) == 3)",
            "@test(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
            "end"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "",
        "code": "\tWrite a function to extract values between quotation marks from a string.\nfunction extract_values(text::String)::Vector{String} \n\tExtract values from a string.\n\treturn extract_values(text::String, '\"')\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_values;",
            "@test(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"])",
            "@test(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"])",
            "@test(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"])",
            "end"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "",
        "code": "\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_Pairs;",
            "@test(candidate([1, 2, 1], 3) == 2)",
            "@test(candidate([1, 1, 1, 1], 4) == 0)",
            "@test(candidate([1, 2, 3, 4, 5], 5) == 10)",
            "end"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "",
        "code": "\tWrite a jlthon function to split a string into characters.\nfunction split(word::String)::Vector{String} \n\tSplit a string into characters.\n\treturn split(word::String)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = split;",
            "@test(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])",
            "@test(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"])",
            "@test(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])",
            "end"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "",
        "code": "\tWrite a function to get the sum of the digits of a non-negative integer.\nfunction sum_digits(n::Int64)::Int64 \n{\n\tInt64 sum = 0;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_digits;",
            "@test(candidate(345) == 12)",
            "@test(candidate(12) == 3)",
            "@test(candidate(97) == 16)",
            "end"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "",
        "code": "\tWrite a function to check whether a specified vector is sorted or not.\nfunction issort_list(list1::Vector{Int64})::Bool \n\tCheck whether a specified vector is sorted or not.\n\treturn list1.is_sorted(list1.vector)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = issort_list;",
            "@test(candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)",
            "@test(candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)",
            "@test(candidate([1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
            "end"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "",
        "code": "\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{Vector{String}})::Vector{Vector{String}} \n\tWrite a function to sort each subvector of strings in a given vector of vectors.\nfunction sort_sublists(list1::Vector{\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sort_sublists;",
            "@test(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])",
            "@test(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])",
            "@test(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]])",
            "end"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "",
        "code": "\tWrite a jlthon function to check if a given number is one less than twice its reverse.\nfunction checks(n::Int64)::Bool \n\tCheck if a given number is one less than twice its reverse.\n\treturn n > 2\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = checks;",
            "@test(candidate(70) == false)",
            "@test(candidate(23) == false)",
            "@test(candidate(73) == true)",
            "end"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "",
        "code": "\tWrite a jlthon function to remove duplicate numbers from a given number of vectors.\nfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n{\n\tVector{Int64}{Int64}{Int64}\n\t{\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64}{Int64}\n\t\tInt64{Int64}{Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = two_unique_nums;",
            "@test(candidate([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])",
            "@test(candidate([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])",
            "@test(candidate([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
            "end"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "",
        "code": "\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(list_data::Vector{Int64})::Int64 \n\tWrite a jlthon function to calculate the product of the unique numbers in a given vector.\nfunction unique_product(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = unique_product;",
            "@test(candidate([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)",
            "@test(candidate([1, 2, 3, 1]) == 6)",
            "@test(candidate([7, 8, 9, 0, 1, 1]) == 0)",
            "end"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "",
        "code": "\tWrite a function to find the surface area of a cylinder.\nfunction surfacearea_cylinder(r::Int64, h::Int64)::Float64 \n\tCalculate the surface area of a cylinder.\n\treturn (r*h)**2.0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = surfacearea_cylinder;",
            "@test(candidate(10, 5) == 942.45)",
            "@test(candidate(4, 5) == 226.18800000000002)",
            "@test(candidate(4, 10) == 351.848)",
            "end"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "",
        "code": "\tWrite a jlthon function to check whether a vector is subvector of another or not.\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tCheck whether a vector is subvector of another.\n\treturn A.is_Sub_Array(B)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_Sub_Array;",
            "@test(candidate([1, 4, 3, 5], [1, 2]) == false)",
            "@test(candidate([1, 2, 1], [1, 2, 1]) == true)",
            "@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)",
            "end"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "",
        "code": "\tWrite a jlthon function to find the last digit in factorial of a given number.\nfunction last_Digit_Factorial(n::Int64)::Int64 \n\tReturn the last digit of factorial of a given number.\n\treturn int(n * (n - 1))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = last_Digit_Factorial;",
            "@test(candidate(4) == 4)",
            "@test(candidate(21) == 0)",
            "@test(candidate(30) == 0)",
            "end"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "",
        "code": "\tWrite a function to interleave 3 vectors of the same length into a single flat vector.\nfunction interleave_lists(list1::Vector{Int64}, list2::Vector{Int64}, list3::Vector{Int64})::Vector{Int64} \n{\n\treturn list1::Vector{Int64}(list2::Vector{Int64}(list3::Vector{Int64}(Int64(0))));\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = interleave_lists;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])",
            "@test(candidate([10, 20], [15, 2], [5, 10]) == [10, 15, 5, 20, 2, 10])",
            "@test(candidate([11, 44], [10, 15], [20, 5]) == [11, 10, 20, 44, 15, 5])",
            "end"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "",
        "code": "\tWrite a function to find the dissimilar elements in the given two tuples.\nfunction find_dissimilar(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to find the dissimilar elements in the given two tuples.\nfunction find_dissimilar(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to find the dissimilar elements in the given two tuples.\nfunction find_dissimilar(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to find the dissimilar elements in the given two tuples.\nfunction find_dissimilar(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to find the dissimilar elements in the given two tuples.\nfunction find_dissimilar(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function to find the dissimilar elements in the given two tuples.\nfunction find_dissimilar(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_dissimilar;",
            "@test(candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10))",
            "@test(candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9))",
            "@test(candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25))",
            "end"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "",
        "code": "\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the largest number that can be formed with the given vector of digits.\nfunction find_Max_Num(arr::Vector{Int64})::Int64 \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Max_Num;",
            "@test(candidate([1, 2, 3]) == 321)",
            "@test(candidate([4, 5, 6, 1]) == 6541)",
            "@test(candidate([1, 2, 3, 9]) == 9321)",
            "end"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "",
        "code": "\tWrite a function to remove uneven elements in the nested mixed tuple.\nfunction extract_even(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64})::Any \n\tWrite a function to remove uneven elements in the nested mixed tuple.\nfunction extract_odd(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64})::Any \n\tWrite a function to remove uneven elements in the nested mixed tuple.\nfunction extract_even_odd(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64})::Any \n\tWrite a function to remove uneven elements in the nested mixed tuple.\nfunction extract_even_odd_odd(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64})::Any \n\tWrite a function to remove uneven elements in the nested mixed tuple.\nfunction extract_even_odd_odd_odd(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64})::Any \n\tWrite a function to remove uneven elements in the nested mixed tuple.\nfunction extract_even_odd_odd_odd_odd(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64})::Any \n\tWrite a function to remove uneven elements in the nested mixed tuple.\nfunction extract_even_odd_odd_odd_odd(test_tuple::Tuple{Int64, Int64, Tuple{Int64, Int64, Tuple{Int64, Int64}}, Int64, Int64}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_even;",
            "@test(candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8))",
            "@test(candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8))))",
            "@test(candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10))",
            "end"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "",
        "code": "\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge and height.\nfunction surface_Area(b::Int64, s::Int64)::Int64 \n\tWrite a jlthon function to find the surface area of a square jlramid with a given base edge\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = surface_Area;",
            "@test(candidate(3, 4) == 33)",
            "@test(candidate(4, 5) == 56)",
            "@test(candidate(1, 2) == 5)",
            "end"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "",
        "code": "\tWrite a function which returns nth catalan number.\nfunction catalan_number(num::Int64)::Int64 \n\tWrite a function which returns nth catalan number.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = catalan_number;",
            "@test(candidate(10) == 16796)",
            "@test(candidate(9) == 4862)",
            "@test(candidate(7) == 429)",
            "end"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "",
        "code": "\tWrite a function to find the first adverb ending with ly and its positions in a given string.\nfunction find_adverbs(text::String)::String \n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_adverbs;",
            "@test(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\")",
            "@test(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\")",
            "@test(candidate(\"Complete the task quickly\") == \"18-25: quickly\")",
            "end"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "",
        "code": "\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a jlthon function to split a vector at the nth eelment and add the\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = split_Arr;",
            "@test(candidate([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10])",
            "@test(candidate([1, 2, 3, 4], 1) == [2, 3, 4, 1])",
            "@test(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
            "end"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "",
        "code": "\tWrite a function to convert a vector to a tuple.\nfunction list_tuple(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list_list_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list_list_list_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list_list_list_list_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list_list_list_list_list_list_list(listx::Vector{Int64})::Any \n\tWrite a function to convert a vector to a tuple.\nfunction list_tuple_list_list_list_list_list_list_list_list_list_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = list_tuple;",
            "@test(candidate([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3))",
            "@test(candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7))",
            "@test(candidate([58, 44, 56]) == (58, 44, 56))",
            "end"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "",
        "code": "\tWrite a jlthon function to find the difference between largest and smallest value in a given vector.\nfunction big_diff(nums::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the difference between largest and smallest value in a given vector.\nbig_diff(nums::Vector{Int64})::Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = big_diff;",
            "@test(candidate([1, 2, 3, 4]) == 3)",
            "@test(candidate([4, 5, 12]) == 8)",
            "@test(candidate([9, 2, 3]) == 7)",
            "end"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "",
        "code": "\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int64, b::Int64)::Vector{Int64} \n\tWrite a function to find perfect squares between two given numbers.\nfunction perfect_squares(a::Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = perfect_squares;",
            "@test(candidate(1, 30) == [1, 4, 9, 16, 25])",
            "@test(candidate(50, 100) == [64, 81, 100])",
            "@test(candidate(100, 200) == [100, 121, 144, 169, 196])",
            "end"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Bool \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x::Int64, y::Int64)::Int \n\tWrite a jlthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Sign\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = opposite_Signs;",
            "@test(candidate(1, -2) == true)",
            "@test(candidate(3, 2) == false)",
            "@test(candidate(-10, -10) == false)",
            "@test(candidate(-2, 2) == true)",
            "end"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "",
        "code": "\tWrite a jlthon function to interchange the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last elements in a vector.\nfunction swap_List(newList\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = swap_List;",
            "@test(candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12])",
            "@test(candidate([1, 2, 3]) == [3, 2, 1])",
            "@test(candidate([4, 5, 6]) == [6, 5, 4])",
            "end"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product(n::Int64)::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_Of_product;",
            "@test(candidate(3) == 15)",
            "@test(candidate(4) == 56)",
            "@test(candidate(1) == 1)",
            "end"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "",
        "code": "\tWrite a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip::String)::String \n\tRemove leading zeroes from an ip address.\n\treturn ip::String::remove(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String::to_string(ip::String(ip::String\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = removezero_ip;",
            "@test(candidate(\"216.08.094.196\") == \"216.8.94.196\")",
            "@test(candidate(\"12.01.024\") == \"12.1.24\")",
            "@test(candidate(\"216.08.094.0196\") == \"216.8.94.196\")",
            "end"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "",
        "code": "\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector.\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the difference of the first even and first odd number of a given vector\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = diff_even_odd;",
            "@test(candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 3)",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)",
            "@test(candidate([1, 5, 7, 9, 10]) == 9)",
            "end"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "",
        "code": "\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps(str1::String, str2::String)::Any \n\tWrite a jlthon function to count minimum number of swaps required to convert one binary number represented as a string\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = min_Swaps;",
            "@test(candidate(\"1101\", \"1110\") == 1)",
            "@test(candidate(\"111\", \"000\") == \"Not Possible\")",
            "@test(candidate(\"111\", \"110\") == \"Not Possible\")",
            "end"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "",
        "code": "\tWrite a function to find kth element from the given two sorted vectors.\nfunction find_kth(arr1::Vector{Int64}, arr2::Vector{Int64}, k::Int64)::Int64 \n\tFind the kth element from the given two sorted vectors.\n\treturn arr1.find_kth(arr2, k)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_kth;",
            "@test(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6)",
            "@test(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256)",
            "@test(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8)",
            "end"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "",
        "code": "\tWrite a function to check whether the given number is armstrong or not.\nfunction armstrong_number(number::Int64)::Bool \n\tCheck whether the given number is armstrong.\n\treturn (number >= 0) and (number <= 100)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = armstrong_number;",
            "@test(candidate(153) == true)",
            "@test(candidate(259) == false)",
            "@test(candidate(4458) == false)",
            "end"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "",
        "code": "\tWrite a function to find sum and average of first n natural numbers.\nfunction sum_average(number::Int64)::Tuple{Int64, Float64} \n\tWrite a function to find sum and average of first n natural numbers.\nfunction sum_average(number:Int64)::Float64{Float64} \n\tWrite a function to find sum and average of first n natural numbers.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_average;",
            "@test(candidate(10) == (55, 5.5))",
            "@test(candidate(15) == (120, 8.0))",
            "@test(candidate(20) == (210, 10.5))",
            "end"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "",
        "code": "\tWrite a function to find the nth octagonal number.\nfunction is_octagonal(n::Int64)::Int64 \n\tReturn the nth octagonal number.\n\treturn n - 1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_octagonal;",
            "@test(candidate(5) == 65)",
            "@test(candidate(10) == 280)",
            "@test(candidate(15) == 645)",
            "end"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the given number is even or not.\nfunction is_Even(n::Int64)::Bool \n\tCheck whether the given number is even.\n\treturn n % 2 == 0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_Even;",
            "@test(candidate(1) == false)",
            "@test(candidate(2) == true)",
            "@test(candidate(3) == false)",
            "end"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "",
        "code": "\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Union{String, Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite a jlthon function to find the first repeated character in a given string.\nfunction first_repeated_char(str1::String)::Nothing{Nothing} \n\tWrite\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = first_repeated_char;",
            "@test(candidate(\"abcabc\") == \"a\")",
            "@test(candidate(\"abc\") == nothing)",
            "@test(candidate(\"123123\") == \"1\")",
            "end"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "",
        "code": "\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic(n::Int64)::Vector{Int64} \n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_l\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_ludic;",
            "@test(candidate(10) == [1, 2, 3, 5, 7])",
            "@test(candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25])",
            "@test(candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43])",
            "end"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "",
        "code": "\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String)::String \n\tWrite a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s::String\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = reverse_words;",
            "@test(candidate(\"python program\") == \"program python\")",
            "@test(candidate(\"java language\") == \"language java\")",
            "@test(candidate(\"indian man\") == \"man indian\")",
            "end"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "",
        "code": "\tWrite a function to check if the given integer is a prime number.\nfunction prime_num(num::Int64)::Bool \n\tCheck if the given integer is a prime number.\n\treturn num.is_prime(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(num.Int64(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = prime_num;",
            "@test(candidate(13) == true)",
            "@test(candidate(7) == true)",
            "@test(candidate(-1010) == false)",
            "end"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "",
        "code": "\tWrite a function to convert degrees to radians.\nfunction radian_degree(degree::Int64)::Float64 \n\tConvert a degree to radians.\n\treturn (degree * (pi / 180.0))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = radian_degree;",
            "@test(candidate(90) == 1.5707963267948966)",
            "@test(candidate(60) == 1.0471975511965976)",
            "@test(candidate(120) == 2.0943951023931953)",
            "end"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "",
        "code": "\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals(text::String, pattern::String)::Tuple{String, Int64, Int64} \n\tFinds a string that matches a regular expression pattern.\n\tdef __init__(self, text::String, pattern::String):\n\t\tself.text = text::String\n\t\tself.pattern = pattern::String\n\tdef __call__(self, text::String):\n\t\treturn self.text.find(self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __str__(self):\n\t\treturn self.text\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __repr__(self):\n\t\treturn \"find_literals(%s, %s)\" % (self.text, self.pattern)\n\tdef __\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_literals;",
            "@test(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") == (\"fox\", 16, 19))",
            "@test(candidate(\"Its been a very crazy procedure right\", \"crazy\") == (\"crazy\", 16, 21))",
            "@test(candidate(\"Hardest choices required strongest will\", \"will\") == (\"will\", 35, 39))",
            "end"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "",
        "code": "\tWrite a jlthon function to find nth bell number.\nfunction bell_Number(n::Int64)::Int64 \n\tFind the nth bell number.\n\treturn n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = bell_Number;",
            "@test(candidate(2) == 2)",
            "@test(candidate(3) == 5)",
            "@test(candidate(4) == 15)",
            "end"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "",
        "code": "\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::Vector{Int64} \n\tWrite a jlthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nfunction remove_kth_element(list1::Vector{Int64}, L::Int64)::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_kth_element;",
            "@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1])",
            "@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])",
            "@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10])",
            "end"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "",
        "code": "\tWrite a function which given a matrix represented as a vector of vectors returns the max of then'th column.\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64)::Int64 \n\tWrite a function which given a matrix represented as a vector of vectors returns the max of then'th column.\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64, N::Int64)::Int64 \n\tWrite a function which given a matrix represented as a vector of vectors returns the max of then'th column.\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64, N::Int64, N::Int64)::Int64 \n\tWrite a function which given a matrix represented as a vector of vectors returns the max of then'th column.\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64, N::Int64, N::Int64, N::Int64)::Int64 \n\tWrite a function which given a matrix represented as a vector of vectors returns the max of then'th column.\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64, N::Int64, N::Int64, N::Int64, N::Int64)::Int64 \n\tWrite a function which given a matrix represented as a vector of vectors returns the max of then'th column.\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64, N::Int64, N::Int64, N::Int64, N::Int64, N::Int64)::Int64 \n\tWrite a function which given a matrix represented as a vector of vectors returns the max of then'th column.\nfunction max_of_nth(test_list::Vector{Vector{Int64}}, N::Int64, N::Int64, N::Int64, N::Int64, N\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_of_nth;",
            "@test(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19)",
            "@test(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10)",
            "@test(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11)",
            "end"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "",
        "code": "\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nfunction merge(lst::Vector{Vector{Any}})::Vector{Vector{Any}} \n\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nfunction merge(lst::Vector{Vector{Any}})::Vector{Vector{Any}} \n\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nfunction merge(lst::Vector{Vector{Any}})::Vector{Vector{Any}} \n\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nfunction merge(lst::Vector{Vector{Any}})::Vector{Vector{Any}} \n\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nfunction merge(lst::Vector{Vector{Any}})::Vector{Vector{Any}} \n\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nfunction merge(lst::Vector{Vector{Any}})::Vector{Vector{Any}} \n\tWrite a jlthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = merge;",
            "@test(candidate([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])",
            "@test(candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]])",
            "@test(candidate([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])",
            "end"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "",
        "code": "\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nfunction cummulative_sum(test_list::Vector{Vector{Int64}})::Int64 \n\tWrite a function to find the cumulative sum of all the values that are present in the given vector of vectors.\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = cummulative_sum;",
            "@test(candidate([[1, 3], [5, 6, 7], [2, 6]]) == 30)",
            "@test(candidate([[2, 4], [6, 7, 8], [3, 7]]) == 37)",
            "@test(candidate([[3, 5], [7, 8, 9], [4, 8]]) == 44)",
            "end"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "",
        "code": "\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_tuple(nums::Vector{Vector{Int64}})::Vector{Float64} \n\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_vector(nums::Vector{Vector{Int64}})::Vector{Float64} \n\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_vector_with_sum(nums::Vector{Vector{Int64}})::Vector{Float64} \n\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_vector_with_sum_and_sum(nums::Vector{Vector{Int64}})::Vector{Float64} \n\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_vector_with_sum_and_sum_and_sum(nums::Vector{Vector{Int64}})::Vector{Float64} \n\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_vector_with_sum_and_sum_and_sum_and_sum(nums::Vector{Vector{Int64}})::Vector{Float64} \n\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_vector_with_sum_and_sum_and_sum_and_sum_and_sum(nums::Vector{Vector{Int64}})::Vector{Float64} \n\tWrite a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nfunction average_vector_with_sum_and_sum_and_sum_and_sum_and_sum_and_sum(nums::Vector{Vector{Int64}})::Vector{Float\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = average_tuple;",
            "@test(candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25])",
            "@test(candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]) == [25.5, -18.0, 3.75])",
            "@test(candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]) == [305.0, 342.5, 270.0, 232.5])",
            "end"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "",
        "code": "\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo(test_tup1::Tuple{Int64, Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64, Int64})::Tuple{Int64, Int64, Int64, Int64} \n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo(test_tup\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = tuple_modulo;",
            "@test(candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1))",
            "@test(candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1))",
            "@test(candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1))",
            "end"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "",
        "code": "\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunction min_Jumps(steps::Tuple{Int64, Int64}, d::Int64)::Float64 \n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunction min_Jumps_2d(steps::Tuple{Int64, Int64}, d::Int64)::Float64 \n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunction min_Jumps_3d(steps::Tuple{Int64, Int64, Int64}, d::Int64)::Float64 \n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 3d plane.\nfunction min_Jumps_4d(steps::Tuple{Int64, Int64, Int64, Int64}, d::Int64)::Float64 \n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 4d plane.\nfunction min_Jumps_5d(steps::Tuple{Int64, Int64, Int64, Int64, Int64}, d::Int64)::Float64 \n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 5d plane.\nfunction min_Jumps_6d(steps::Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, d::Int64)::Float64 \n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 6d plane.\nfunction min_Jumps_7d(steps::Tuple{Int64, Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = min_Jumps;",
            "@test(candidate((3, 4), 11) == 3.5)",
            "@test(candidate((3, 4), 0) == 0)",
            "@test(candidate((11, 14), 11) == 1)",
            "end"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "",
        "code": "\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise.\nfunction div_list(nums1::Vector{Int64}, nums2::Vector{Int64})::Vector{Float64} \n\tWrite a function to divide two vectors element wise\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = div_list;",
            "@test(candidate([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0])",
            "@test(candidate([3, 2], [1, 4]) == [3.0, 0.5])",
            "@test(candidate([90, 120], [50, 70]) == [1.8, 1.7142857142857142])",
            "end"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "",
        "code": "\tWrite a function to move all the numbers to the end of the given string.\nfunction move_num(test_str::String)::String \n\tWrite a function to move all the numbers to the end of the given string.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = move_num;",
            "@test(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")",
            "@test(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\")",
            "@test(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
            "end"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::Int64 \n\tWrite a jlthon function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings(s::String)::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_Substrings;",
            "@test(candidate(\"112112\") == 6)",
            "@test(candidate(\"111\") == 6)",
            "@test(candidate(\"1101112\") == 12)",
            "end"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "",
        "code": "\tWrite a function to find the median of two sorted vectors of same size.\nfunction get_median(arr1::Vector{Int64}, arr2::Vector{Int64}, n::Int64)::Float64 \n\tReturn the median of two sorted vectors of same size.\n\treturn arr1.median(arr2)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_median;",
            "@test(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0)",
            "@test(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5)",
            "@test(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0)",
            "end"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "",
        "code": "\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector{Int64}, n::Int64)::Vector{Int64} \n\tWrite a function to compute the n-th power of each number in a vector.\nfunction nth_nums(nums::Vector\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = nth_nums;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])",
            "@test(candidate([10, 20, 30], 3) == [1000, 8000, 27000])",
            "@test(candidate([12, 15], 5) == [248832, 759375])",
            "end"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "",
        "code": "\tWrite a jlthon function to convert a given string to uppercase.\nfunction is_upper(string::String)::String \n\tReturn a string with all characters in uppercase.\n\treturn string(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::to_upper(string::String::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_upper;",
            "@test(candidate(\"person\") == \"PERSON\")",
            "@test(candidate(\"final\") == \"FINAL\")",
            "@test(candidate(\"Valid\") == \"VALID\")",
            "end"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "",
        "code": "\tWrite a jlthon function to interchange the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\nfunction swap_List(newList::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to swap the first and last element in a given vector.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = swap_List;",
            "@test(candidate([1, 2, 3]) == [3, 2, 1])",
            "@test(candidate([1, 2, 3, 4, 4]) == [4, 2, 3, 4, 1])",
            "@test(candidate([4, 5, 6]) == [6, 5, 4])",
            "end"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "",
        "code": "\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_2(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_3(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_4(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_5(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_6(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_7(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_8(r::Int64)::Union{Int64, Nothing} \n\tWrite a jlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area_9\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = triangle_area;",
            "@test(candidate(-1) == nothing)",
            "@test(candidate(0) == 0)",
            "@test(candidate(2) == 4)",
            "end"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "",
        "code": "\tWrite a jlthon function to find the smallest missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural numbers.\nfunction find_First_Missing(array::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the first missing number from a sorted vector of natural\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_First_Missing;",
            "@test(candidate([0, 1, 2, 3]) == 4)",
            "@test(candidate([0, 1, 2, 6, 9]) == 3)",
            "@test(candidate([2, 3, 5, 8, 9]) == 0)",
            "end"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "",
        "code": "\tWrite a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces(string::String)::String \n\tReplace all spaces in the given string with '%20'.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = replace_spaces;",
            "@test(candidate(\"My Name is Dawood\") == \"My%20Name%20is%20Dawood\")",
            "@test(candidate(\"I am a Programmer\") == \"I%20am%20a%20Programmer\")",
            "@test(candidate(\"I love Coding\") == \"I%20love%20Coding\")",
            "end"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "",
        "code": "\tWrite a jlthon function to find even numbers from a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to split a vector of numbers.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Split;",
            "@test(candidate([1, 2, 3, 4, 5]) == [2, 4])",
            "@test(candidate([4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])",
            "@test(candidate([8, 12, 15, 19]) == [8, 12])",
            "end"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "",
        "code": "\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\nfunction smallest_num(xs::Vector{Int64})::Int64 \n\tWrite a jlthon function to find smallest number in a vector.\n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = smallest_num;",
            "@test(candidate([10, 20, 1, 45, 99]) == 1)",
            "@test(candidate([1, 2, 3]) == 1)",
            "@test(candidate([45, 46, 50, 60]) == 45)",
            "end"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "",
        "code": "\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nfunction get_coordinates(test_tup::Tuple{Int64, Int64})::Vector{Vector{Int64}} \n\treturn Vector{Int64}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_coordinates;",
            "@test(candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])",
            "@test(candidate((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])",
            "@test(candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])",
            "end"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "",
        "code": "\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nfunction replace_spaces(text::String)::String \n\tReplaces all spaces with a underscore.\n\treturn text::String.replace(text::String.SPACE, text::String.UNDERSCORE)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = replace_spaces;",
            "@test(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\")",
            "@test(candidate(\"The_Avengers\") == \"The Avengers\")",
            "@test(candidate(\"Fast and Furious\") == \"Fast_and_Furious\")",
            "end"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "",
        "code": "\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n\tWrite a jlthon function to move all zeroes to the end of the given vector.\nfunction move_zero(num_list::Vector{Int64})::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = move_zero;",
            "@test(candidate([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])",
            "@test(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])",
            "@test(candidate([0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
            "end"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of xor of all pairs of numbers in the given vector.\nfunction pair_xor_Sum(arr::Vector{Int64}, n::Int64)::Int64 \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = pair_xor_Sum;",
            "@test(candidate([5, 9, 7, 6], 4) == 47)",
            "@test(candidate([7, 3, 5], 3) == 12)",
            "@test(candidate([7, 3], 2) == 4)",
            "end"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "",
        "code": "\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a function to sort the given vector.\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n\tWrite a\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = heap_sort;",
            "@test(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
            "@test(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])",
            "@test(candidate([7, 1, 9, 5]) == [1, 5, 7, 9])",
            "end"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "",
        "code": "\tWrite a function to check whether the given amount has no profit and no loss\nfunction noprofit_noloss(actual_cost::Int64, sale_amount::Int64)::Bool \n\tCheck if the given amount has no profit and no loss\n\treturn actual_cost == sale_amount\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = noprofit_noloss;",
            "@test(candidate(1500, 1200) == false)",
            "@test(candidate(100, 100) == true)",
            "@test(candidate(2000, 5000) == false)",
            "end"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "",
        "code": "\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunction wind_chill(v::Int64, t::Int64)::Int64 \n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunction wind_chill_rounded(v::Int64, t::Int64)::Int64 \n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = wind_chill;",
            "@test(candidate(120, 35) == 40)",
            "@test(candidate(40, 20) == 19)",
            "@test(candidate(10, 8) == 6)",
            "end"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "",
        "code": "\tWrite a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nfunction sample_nam(sample_names::Vector{String})::Int64 \n{\n\treturn sample_names::Vector{String}::size();\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sample_nam;",
            "@test(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)",
            "@test(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)",
            "@test(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
            "end"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "",
        "code": "\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64}})::Int64 \n\tWrite a function to find the maximum difference between available pairs in the given tuple vector.\nfunction max_difference(test_list::Vector{Tuple{Int64, Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_difference;",
            "@test(candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7)",
            "@test(candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15)",
            "@test(candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23)",
            "end"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "",
        "code": "\tWrite a function to remove the parenthesis and what is inbetween them from a string.\nfunction remove_parenthesis(items::Vector{String})::String \n{\n\tString result = \"\";\n\tfor (int i = 0; i < items.size(); i++)\n\t{\n\t\tif (items[i].size() > 1)\n\t\t{\n\t\t\tresult += items[i].substr(1, items[i].size() - 2);\n\t\t}\n\t}\n\treturn result;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_parenthesis;",
            "@test(candidate([\"python (chrome)\"]) == \"python\")",
            "@test(candidate([\"string(.abc)\"]) == \"string\")",
            "@test(candidate([\"alpha(num)\"]) == \"alpha\")",
            "end"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "",
        "code": "\tWrite a function to find the nth nonagonal number.\nfunction is_nonagonal(n::Int64)::Int64 \n\tReturn the nth nonagonal number.\n\treturn n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_nonagonal;",
            "@test(candidate(10) == 325)",
            "@test(candidate(15) == 750)",
            "@test(candidate(18) == 1089)",
            "end"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "",
        "code": "\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nfunction text_match_wordz_middle(text::String)::Bool \n\tCheck if a string contains 'z', except at the start and end of the word.\nfunction text_match_wordz_end(text::String)::Bool \n\tCheck if a string contains 'z', except at the end of the word.\nfunction text_match_wordz_start(text::String)::Bool \n\tCheck if a string contains 'z', except at the start of the word.\nfunction text_match_wordz_end_middle(text::String)::Bool \n\tCheck if a string contains 'z', except at the end of the word.\nfunction text_match_wordz_start_middle(text::String)::Bool \n\tCheck if a string contains 'z', except at the start of the word.\nfunction text_match_wordz_end_end(text::String)::Bool \n\tCheck if a string contains 'z', except at the end of the word.\nfunction text_match_wordz_start_end(text::String)::Bool \n\tCheck if a string contains 'z', except at the start of the word.\nfunction text_match_wordz_start_middle(text::String)::Bool \n\tCheck if a string contains 'z', except at the start of the word.\nfunction text_match_wordz_end_end_middle(text::String)::Bool \n\tCheck if a string contains 'z', except at the end of the word.\nfunction text_match_wordz_start_end_middle(text::String)::Bool \n\tCheck if a string contains 'z', except at the start of the word.\nfunction text_match_wordz_start_end_end(text::String)::Bool \n\tCheck if a string contains '\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_match_wordz_middle;",
            "@test(candidate(\"pythonzabc.\") == true)",
            "@test(candidate(\"zxyabc.\") == false)",
            "@test(candidate(\"  lang  .\") == false)",
            "end"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "",
        "code": "\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlthon function to reverse a vector upto a given position.\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n\tWrite a jlth\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = reverse_Array_Upto_K;",
            "@test(candidate([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6])",
            "@test(candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7])",
            "@test(candidate([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5])",
            "end"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "",
        "code": "\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{Tuple{String, Int64}} \n\tWrite a function to sort a vector of tuples using the second value of each tuple.\nfunction subject_marks(subjectmarks::Vector{Tuple{String, Int64}})::Vector{T\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = subject_marks;",
            "@test(candidate([(\"English\", 88), (\"Science\", 90), (\"Maths\", 97), (\"Social sciences\", 82)]) == [(\"Social sciences\", 82), (\"English\", 88), (\"Science\", 90), (\"Maths\", 97)])",
            "@test(candidate([(\"Telugu\", 49), (\"Hindhi\", 54), (\"Social\", 33)]) == [(\"Social\", 33), (\"Telugu\", 49), (\"Hindhi\", 54)])",
            "@test(candidate([(\"Physics\", 96), (\"Chemistry\", 97), (\"Biology\", 45)]) == [(\"Biology\", 45), (\"Physics\", 96), (\"Chemistry\", 97)])",
            "end"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "",
        "code": "\tWrite a function to flatten a vector and sum all of its elements.\nfunction recursive_list_sum(data_list::Vector{Union{Int64, Vector{Int64}}})::Int64 \n\tWrite a function to flatten a vector and sum all of its elements.\nfunction recursive_list_sum(data_list::Vector{Union{Int64, Vector{Int64}}})::Int64 \n\tWrite a function to flatten a vector and sum all of its elements.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = recursive_list_sum;",
            "@test(candidate([1, 2, [3, 4], [5, 6]]) == 21)",
            "@test(candidate([7, 10, [15, 14], [19, 41]]) == 106)",
            "@test(candidate([10, 20, [30, 40], [50, 60]]) == 210)",
            "end"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_count(list::Vector{Int64})::Int64 \n\tWrite a jlthon function to count the number of positive numbers in a vector.\nfunction pos_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = pos_count;",
            "@test(candidate([1, -2, 3, -4]) == 2)",
            "@test(candidate([3, 4, 5, -1]) == 3)",
            "@test(candidate([1, 2, 3, 4]) == 4)",
            "end"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "",
        "code": "\tWrite a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number(n::Int64)::Int64 \n\tReturn the number of ways to partition a set of Bell numbers.\n\treturn bell_number_of_ways(n)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = bell_number;",
            "@test(candidate(2) == 2)",
            "@test(candidate(10) == 115975)",
            "@test(candidate(56) == 6775685320645824322581483068371419745979053216268760300)",
            "end"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the given vector is monotonic or not.\nfunction is_Monotonic(A::Vector{Int64})::Bool \n\tCheck whether the given vector is monotonic.\n\treturn A.is_Monotonic(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int64}(A.Vector{Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_Monotonic;",
            "@test(candidate([6, 5, 4, 4]) == true)",
            "@test(candidate([1, 2, 2, 3]) == true)",
            "@test(candidate([1, 3, 2]) == false)",
            "end"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "",
        "code": "\tWrite a function to check whether a vector contains the given subvector or not.\nfunction is_sublist(l::Vector{Int64}, s::Vector{Int64})::Bool \n\tCheck whether a vector contains the given subvector.\n\treturn l.is_sublist(s.Vector{Int64}, s.Vector{Int64})\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_sublist;",
            "@test(candidate([2, 4, 3, 5, 7], [3, 7]) == false)",
            "@test(candidate([2, 4, 3, 5, 7], [4, 3]) == true)",
            "@test(candidate([2, 4, 3, 5, 7], [1, 6]) == false)",
            "end"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a::Int64, b::Int64)::Bool \n\tWrite a jlth\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = differ_At_One_Bit_Pos;",
            "@test(candidate(13, 9) == true)",
            "@test(candidate(15, 8) == false)",
            "@test(candidate(2, 4) == false)",
            "@test(candidate(2, 3) == true)",
            "@test(candidate(5, 1) == true)",
            "@test(candidate(1, 5) == true)",
            "end"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "",
        "code": "\tWrite a function to find whether all the given vectors have equal length or not.\nfunction get_equal(Input::Vector{Vector{Int64}})::Bool \n\tReturn whether all the given vectors have equal length.\n\treturn all(get_equal(v) for v in Input::Vector{Vector{Int64}})\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_equal;",
            "@test(candidate([[11, 22, 33], [44, 55, 66]]) == true)",
            "@test(candidate([[1, 2, 3], [4, 5, 6, 7]]) == false)",
            "@test(candidate([[1, 2], [3, 4]]) == true)",
            "end"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "",
        "code": "\tWrite a function to sort a vector of elements.\nfunction comb_sort(nums::Vector{Int64})::Vector{Int64} \n{\n\tnums.Vector{Int64}{Int64}{Int64}\n\t{\n\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t{\n\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t{\n\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t{\n\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t{\n\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int64}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnums.Vector{Int64}{Int64}{Int\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = comb_sort;",
            "@test(candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])",
            "@test(candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])",
            "@test(candidate([99, 15, 13, 47]) == [13, 15, 47, 99])",
            "end"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "",
        "code": "\tWrite a function to add a dictionary to the tuple. The output should be a tuple.\nfunction add_dict_to_tuple(test_tup::Tuple{Int64, Int64, Int64}, test_dict::Dict{String, Int64}>)::Tuple{Int64, Int64, Int64, Dict{String, Int64}>} \n\ttest_tup = test_tup.Tuple{Int64, Int64, Int64}\n\ttest_dict = test_dict.Dict{String, Int64}\n\treturn test_tup + test_dict\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = add_dict_to_tuple;",
            "@test(candidate((4, 5, 6), Dict(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3)) == (4, 5, 6, Dict(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3)))",
            "@test(candidate((1, 2, 3), Dict(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4)) == (1, 2, 3, Dict(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4)))",
            "@test(candidate((8, 9, 10), Dict(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5)) == (8, 9, 10, Dict(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5)))",
            "end"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "",
        "code": "\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = maxAverageOfPath;",
            "@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)",
            "@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)",
            "@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)",
            "@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)",
            "end"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "",
        "code": "\tThe input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nfunction count_same_pair(nums1::Vector{Int64}, nums2::Vector{Int64})::Int64 \n{\n\tint count = 0;\n\tfor (int i = 0; i < nums1.size(); i++)\n\t{\n\t\tif (nums1[i] == nums2[i])\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_same_pair;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4)",
            "@test(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)",
            "@test(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)",
            "@test(candidate([0, 1, 1, 2], [0, 1, 2, 2]) == 3)",
            "end"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "",
        "code": "\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_int64(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_int64_int64(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_int64_int64_int64(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_int64_int64_int64(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_int64_int64_int64(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_int64_int64_int64(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum_int64_int64_int64(base::Int64, power::Int64)::Int64 \n\tWrite a function that takes base and power as arguments and calculate the sum of\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = power_base_sum;",
            "@test(candidate(2, 100) == 115)",
            "@test(candidate(8, 10) == 37)",
            "@test(candidate(8, 15) == 62)",
            "@test(candidate(3, 3) == 9)",
            "end"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "",
        "code": "\tWrite a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation(text1::String)::Vector{Any} \n\treturn extract_quotation(text1)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_quotation;",
            "@test(candidate(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\") == [\"A53\", \"multi\", \"Processor\"])",
            "@test(candidate(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\") == [\"favorite\", \"apps\"])",
            "@test(candidate(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\") == [\"4k Ultra HD\", \"HDR 10\"])",
            "@test(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == Vector{Any}([]))",
            "end"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "",
        "code": "\tWrite a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunction multiply_elements(test_tup::Vector{Int64})::Vector{Any} \n\tWrite a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunction multiply_elements(test_tup::Vector{Int64})::Vector{Any} \n\tWrite a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunction multiply_elements(test_tup::Vector{Int64})::Vector{Any} \n\tWrite a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunction multiply_elements(test_tup::Vector{Int64})::Vector{Any} \n\tWrite a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunction multiply_elements(test_tup::Vector{Int64})::Vector{Any} \n\tWrite a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunction multiply_elements(test_tup::Vector{Int64})::Vector{Any} \n\tWrite a function that takes\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = multiply_elements;",
            "@test(candidate([1, 5, 7, 8, 10]) == [5, 35, 56, 80])",
            "@test(candidate([2, 4, 5, 6, 7]) == [8, 20, 30, 42])",
            "@test(candidate([12, 13, 14, 9, 15]) == [156, 182, 126, 135])",
            "@test(candidate([12]) == Vector{Any}([]))",
            "end"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "",
        "code": "\tWrite a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunction sum_list(lst1::Vector{Int64}, lst2::Vector{Int64})::Vector{Int64} \n\treturn sum_list(lst1, lst2)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_list;",
            "@test(candidate([10, 20, 30], [15, 25, 35]) == [25, 45, 65])",
            "@test(candidate([1, 2, 3], [5, 6, 7]) == [6, 8, 10])",
            "@test(candidate([15, 20, 30], [15, 45, 75]) == [30, 65, 105])",
            "end"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the given number can be represented as the difference of two squares or not.\nfunction dif_Square(n::Int64)::Bool \n\tReturns true if the given number can be represented as the difference of two squares.\n\treturn n == 0 or n == 1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = dif_Square;",
            "@test(candidate(5) == true)",
            "@test(candidate(10) == false)",
            "@test(candidate(15) == true)",
            "end"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "",
        "code": "\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any} \n\tWrite a function to remove consecutive duplicates of a given vector.\nfunction consecutive_duplicates(nums::Vector{Any})::Vector{Any\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = consecutive_duplicates;",
            "@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])",
            "@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])",
            "@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])",
            "@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])",
            "end"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "",
        "code": "\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_2(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_3(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_4(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_5(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_6(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_7(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_8(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_9(r::Int64, h::Int64)::Float64 \n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone_10(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = lateralsurface_cone;",
            "@test(candidate(5, 12) == 204.20352248333654)",
            "@test(candidate(10, 15) == 566.3586699569488)",
            "@test(candidate(19, 17) == 1521.8090132193388)",
            "end"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "",
        "code": "\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunction replace_specialchar(text::String)::String \n\tReplaces all occurrences of spaces, commas, or dots with a colon.\n\treturn text.replace(',', ':')\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = replace_specialchar;",
            "@test(candidate(\"Python language, Programming language.\") == \"Python:language::Programming:language:\")",
            "@test(candidate(\"a b c,d e f\") == \"a:b:c:d:e:f\")",
            "@test(candidate(\"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\")",
            "end"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "",
        "code": "\tWrite a function to find the index of the first occurrence of a given number in a sorted vector.\nfunction find_first_occurrence(A::Vector{Int64}, x::Int64)::Int64 \n\tFind the index of the first occurrence of a given number in a sorted vector.\n\treturn A.find_first_occurrence(x::Int64, 0)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_first_occurrence;",
            "@test(candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1)",
            "@test(candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2)",
            "@test(candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4)",
            "end"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "",
        "code": "\tWrite a jlthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\nfunction sum_Of_Subarray_Prod(arr::Vector{Int64})::Int64 \n{\n\tInt64 sum = 0;\n\tfor (int i = 0; i < arr.size(); i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_Of_Subarray_Prod;",
            "@test(candidate([1, 2, 3]) == 20)",
            "@test(candidate([1, 2]) == 5)",
            "@test(candidate([1, 2, 3, 4]) == 84)",
            "end"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "",
        "code": "\tWrite a jlthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunction toggle_middle_bits(n::Int64)::Int64 \n\tWrite a jlthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = toggle_middle_bits;",
            "@test(candidate(9) == 15)",
            "@test(candidate(10) == 12)",
            "@test(candidate(11) == 13)",
            "@test(candidate(65) == 127)",
            "@test(candidate(77) == 115)",
            "end"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "",
        "code": "\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-data-structure-exercise-24.php\nfunction left_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-data-structure-exercise-24.php\nfunction left_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-data-structure-exercise-24.php\nfunction left_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-data-structure-exercise-24.php\nfunction left_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-data-structure-exercise-24.php\nfunction left_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = left_insertion;",
            "@test(candidate([1, 2, 4, 5], 6) == 4)",
            "@test(candidate([1, 2, 4, 5], 3) == 2)",
            "@test(candidate([1, 2, 4, 5], 7) == 4)",
            "end"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "",
        "code": "\tWrite a function to check whether the given string is starting with a vowel or not using regex.\nfunction check_str(string::String)::Bool \n\tCheck whether the given string is starting with a vowel or not using regex.\n\treturn string::String.is_vowel(string::String(string::String::Vowel))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_str;",
            "@test(candidate(\"annie\") == true)",
            "@test(candidate(\"dawood\") == false)",
            "@test(candidate(\"Else\") == true)",
            "end"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "",
        "code": "\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-recursion-exercise-9.php\nfunction geometric_sum(n::Int64)::Float64 \n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-recursion-exercise-9.php\nfunction geometric_sum(n:Int64)::Float64 \n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/jlthon-exercises/data-structures-and-algorithms/jlthon-recursion-exercise-9.php\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = geometric_sum;",
            "@test(candidate(7) == 1.9921875)",
            "@test(candidate(4) == 1.9375)",
            "@test(candidate(8) == 1.99609375)",
            "end"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "",
        "code": "\tWrite a jlthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunction find_Index(n::Int64)::Int64 \n\tWrite a jlthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Index;",
            "@test(candidate(2) == 4)",
            "@test(candidate(3) == 14)",
            "@test(candidate(4) == 45)",
            "end"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "",
        "code": "\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/jlthon-convert-tuple-to-adjacent-pair-dictionary/\nfunction tuple_to_dict(test_tup::Tuple{Int64, Int64, Int64, Int64, Int64, Int64})::Dict{Int64, Int64}> \n{\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n\tInt64: Int64,\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = tuple_to_dict;",
            "@test(candidate((1, 5, 7, 10, 13, 5)) == Dict(1 => 5, 7 => 10, 13 => 5))",
            "@test(candidate((1, 2, 3, 4, 5, 6)) == Dict(1 => 2, 3 => 4, 5 => 6))",
            "@test(candidate((7, 8, 9, 10, 11, 12)) == Dict(7 => 8, 9 => 10, 11 => 12))",
            "end"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "",
        "code": "\tWrite a jlthon function to check whether all the characters are same or not.\nfunction all_Characters_Same(s::String)::Bool \n\tCheck whether all the characters in the string are same.\nfunction all_Characters_Not(s::String)::Bool \n\tCheck whether all the characters in the string are not same.\nfunction all_Characters_Same_or_Not(s::String)::Bool \n\tCheck whether all the characters in the string are same or not.\nfunction all_Characters_Not_or_Same(s::String)::Bool \n\tCheck whether all the characters in the string are not same or not.\nfunction all_Characters_Same_or_Not_or_Not(s::String)::Bool \n\tCheck whether all the characters in the string are same or not or not.\nfunction all_Characters_Not_or_Same_or_Not(s::String)::Bool \n\tCheck whether all the characters in the string are same or not or not.\nfunction all_Characters_Not_or_Same_or_Not_or_Not(s::String)::Bool \n\tCheck whether all the characters in the string are same or not or not or not.\nfunction all_Characters_Not_or_Same_or_Not_or_Not_or_Not(s::String)::Bool \n\tCheck whether all the characters in the string are same or not or not or not or not.\nfunction all_Characters_Not_or_Same_or_Not_or_Not_or_Not_or_Not(s::String)::Bool \n\tCheck whether all the characters in the string are same or not or not or not or not or not or not.\nfunction all_Characters_Not_or_Same_or_Not_or_Not_or_Not_or_Not_or_Not_or_Not_or_Not_or_Not_or_Not_or_Not_or_Not_or_Not_or\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = all_Characters_Same;",
            "@test(candidate(\"python\") == false)",
            "@test(candidate(\"aaa\") == true)",
            "@test(candidate(\"data\") == false)",
            "end"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "",
        "code": "\tWrite a function to caluclate the area of a tetrahedron.\nfunction area_tetrahedron(side::Int64)::Float64 \n\tCalculate the area of a tetrahedron.\n\treturn (side.Int64(0) - side.Int64(1)) * (side.Int64(2) - side.Int64(3)) * (side.Int64(4) - side.Int64(5)) * (side.Int64(6) - side.Int64(7))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = area_tetrahedron;",
            "@test(candidate(3) == 15.588457268119894)",
            "@test(candidate(20) == 692.8203230275509)",
            "@test(candidate(10) == 173.20508075688772)",
            "end"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "",
        "code": "\tWrite a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/jlthon-program-right-rotate-vector-n/\nfunction rotate_right(list::Vector{Int64}, m::Int64)::Vector{Int64} \n{\n\tfor(int i = 0; i < list::Vector{Int64}.size(); i++){\n\t\tlist::Vector{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}\n\t\tlist::Vector{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}\n\t\tlist::Vector{Int64}{Int64}{Int64}{Int64}{Int64}\n\t\tlist::Vector{Int64}{Int64}{Int64}\n\t\tlist::Vector{Int64}\n\t}\n}\n<|endoftext|>\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = rotate_right;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
            "end"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "",
        "code": "\tWrite a function to check if the given tuple has any none value or not.\nfunction check_none(test_tup::Any)::Bool \n\tCheck if the given tuple has any none value or not.\n\treturn test_tup::Any.is_none()\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_none;",
            "@test(candidate((10, 4, 5, 6, nothing)) == true)",
            "@test(candidate((7, 8, 9, 11, 14)) == false)",
            "@test(candidate((1, 2, 3, 4, nothing)) == true)",
            "end"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "",
        "code": "\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = divisible_by_digits;",
            "@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])",
            "@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])",
            "@test(candidate(20, 25) == [22, 24])",
            "end"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "",
        "code": "\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\nfunction sector_area(r::Int64, a::Int64)::Union{Float64, Nothing} \n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\nfunction sector_area_2(r::Int64, a::Int64)::Union{Float64, Nothing} \n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\nfunction sector_area_3(r::Int64, a::Int64)::Union{Float64, Nothing} \n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\nfunction sector_area_4(r::Int64, a::Int64)::Union{Float64, Nothing} \n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\nfunction sector_area_5(r::Int64, a::Int64)::Union{Float64, Nothing} \n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\nfunction sector_area_6(r::Int64, a::Int64)::Union{Float64, Nothing} \n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\nfunction sector_area_7(r::Int64, a::Int64)::Union{Float64, Nothing} \n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nothing if the angle is larger than 360 degrees.\n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sector_area;",
            "@test(candidate(4, 45) == 6.283185307179586)",
            "@test(candidate(9, 45) == 31.808625617596654)",
            "@test(candidate(9, 361) == nothing)",
            "end"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "",
        "code": "\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three(X::String, Y::String, Z::String)::Int64 \n\tWrite a function to find the longest common subsequence for the given three string sequence.\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = lcs_of_three;",
            "@test(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2)",
            "@test(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5)",
            "@test(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3)",
            "end"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "",
        "code": "\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_2(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_3(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_4(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_5(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_6(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_7(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_8(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_9(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_10(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces_11(str1::String)::String \n\tWrite a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_sp\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = capital_words_spaces;",
            "@test(candidate(\"Python\") == \"Python\")",
            "@test(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\")",
            "@test(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
            "end"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "",
        "code": "\tWrite a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/jlthon-sort-numeric-strings-in-a-vector/\nfunction sort_numeric_strings(nums_str::Vector{String})::Vector{Int64} \n{\n\tnums_str::Vector{String}{Int64}{Int64}\n\t{\n\t\tInt64 i = 0;\n\t\tInt64 j = 0;\n\t\twhile(i < nums_str::Vector{String}::size()){\n\t\t\tif(nums_str::Vector{String}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{Int64}{\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sort_numeric_strings;",
            "@test(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500, -12, 0, 4, 7, 12, 45, 100, 200])",
            "@test(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9])",
            "@test(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17])",
            "end"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "",
        "code": "\tWrite a function to check whether it follows the sequence given in the patterns vector.\nfunction is_samepatterns(colors::Vector{String}, patterns::Vector{String})::Bool \n\tCheck whether the given vector is the same pattern as the given vector.\n\treturn (colors::Vector{String} == patterns::Vector{String})\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_samepatterns;",
            "@test(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true)",
            "@test(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false)",
            "@test(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false)",
            "end"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "",
        "code": "\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::Tuple{Int64, Int64})::Vector{Int64} \n\tWrite a function to add the given tuple to the given vector.\nfunction add_tuple(test_list::Vector{Int64}, test_tup::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = add_tuple;",
            "@test(candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10])",
            "@test(candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11])",
            "@test(candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12])",
            "end"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "",
        "code": "\tWrite a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\nfunction check_min_heap(arr::Vector{Int64})::Bool \n\tCheck if the given vector is a min heap.\n\treturn arr.min_heap()\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_min_heap;",
            "@test(candidate([1, 2, 3, 4, 5, 6]) == true)",
            "@test(candidate([2, 3, 4, 5, 10, 15]) == true)",
            "@test(candidate([2, 10, 4, 5, 3, 15]) == false)",
            "end"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "",
        "code": "\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\nfunction jacobsthal_num(n::Int64)::Int64 \n{\n\tInt64 result = 0;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult += i;\n\t\t}\n\t}\n\treturn result;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = jacobsthal_num;",
            "@test(candidate(5) == 11)",
            "@test(candidate(2) == 1)",
            "@test(candidate(4) == 5)",
            "@test(candidate(13) == 2731)",
            "end"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "",
        "code": "\tWrite a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/jlthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cojl of test cases\nfunction min_k(test_list::Vector{Tuple{String, Int64}}, K::Int64)::Vector{Tuple{String, Int64}} \n\tWrite a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/jlthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cojl of test cases\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = min_k;",
            "@test(candidate([(\"Manjeet\", 10), (\"Akshat\", 4), (\"Akash\", 2), (\"Nikhil\", 8)], 2) == [(\"Akash\", 2), (\"Akshat\", 4)])",
            "@test(candidate([(\"Sanjeev\", 11), (\"Angat\", 5), (\"Akash\", 3), (\"Nepin\", 9)], 3) == [(\"Akash\", 3), (\"Angat\", 5), (\"Nepin\", 9)])",
            "@test(candidate([(\"tanmay\", 14), (\"Amer\", 11), (\"Ayesha\", 9), (\"SKD\", 16)], 1) == [(\"Ayesha\", 9)])",
            "end"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "",
        "code": "\tWe say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nfunction extract_index_list(l1::Vector{Int64}, l2::Vector{Int64}, l3::Vector{Int64})::Vector{Any} \n\tWe say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nfunction extract_index_list(l1::Vector{Int64}, l2::Vector{Int64}, l3::Vector{Int64})::Vector{Any} \n\tWe say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nfunction extract_index_list(l1::Vector{Int64}, l2::Vector{Int64}, l3::Vector{Int64})::Vector{Any} \n\tWe say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nfunction extract_index_list(l1::Vector{Int64}, l2::Vector{Int64}, l3::Vector{Int64})::Vector{Any} \n\tWe say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nfunction extract_index_list(l1::Vector{Int64}, l2::Vector{Int64}, l3::Vector{Int64})::Vector{Any} \n\tWe say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = extract_index_list;",
            "@test(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7])",
            "@test(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6])",
            "@test(candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5])",
            "@test(candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == Vector{Any}([]))",
            "end"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "",
        "code": "\tWrite a function to find the second smallest number in a vector.\nfunction second_smallest(numbers::Vector{Union{Int64, Float64}})::Union{Float64, Nothing} \n\treturn numbers.second_smallest(numbers.Vector{Union{Int64, Float64}})\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = second_smallest;",
            "@test(candidate([1, 2, -8, -2, 0, -2]) == -2)",
            "@test(candidate([1, 1, -0.5, 0, 2, -2, -2]) == -0.5)",
            "@test(candidate([2, 2]) == nothing)",
            "@test(candidate([2, 2, 2]) == nothing)",
            "end"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "",
        "code": "\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jlthon-exercises/re/jlthon-re-exercise-3.php\nfunction text_match_zero_one(text::String)::Bool \n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jlthon-exercises/re/jlthon-re-exercise-3.php\nfunction text_match_one_one(text::String)::Bool \n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jlthon-exercises/re/jlthon-re-exercise-3.php\nfunction text_match_one_two(text::String)::Bool \n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jlthon-exercises/re/jlthon-re-exercise-3.php\nfunction text_match_one_three(text::String)::Bool \n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jlthon-exercises/re/jlthon-re-exercise-3.php\nfunction text_match_one_four(text::String)::Bool \n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jlthon-exercises/re/jlthon-re-exercise-3.php\nfunction text_match_one_five(text::String)::Bool \n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_match_zero_one;",
            "@test(candidate(\"ac\") == false)",
            "@test(candidate(\"dc\") == false)",
            "@test(candidate(\"abbbba\") == true)",
            "@test(candidate(\"dsabbbba\") == true)",
            "@test(candidate(\"asbbbba\") == false)",
            "@test(candidate(\"abaaa\") == true)",
            "end"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "",
        "code": "\tWrite a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/jlthon-program-to-count-the-pairs-of-reverse-strings/\nfunction count_reverse_pairs(test_list::Vector{String})::Int64 \n{\n\tint count = 0;\n\tfor (auto &str : test_list)\n\t{\n\t\tif (str.length() > 1)\n\t\t{\n\t\t\tcount += count_reverse_pairs(str.substr(0, str.length() - 1));\n\t\t}\n\t}\n\treturn count;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_reverse_pairs;",
            "@test(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2)",
            "@test(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1)",
            "@test(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2)",
            "end"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "",
        "code": "\tWrite a function to check whether a given string is a decimal number with a precision of 2.\nfunction is_decimal(num::String)::Bool \n\tCheck whether a given string is a decimal number with a precision of 2.\n\treturn is_decimal(num::String) and num::String.length() == 2 and num::String.substr(0,1) == '.' and num::String.substr(1) == '.' and num::String.substr(2) == '.'\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_decimal;",
            "@test(candidate(\"123.11\") == true)",
            "@test(candidate(\"e666.86\") == false)",
            "@test(candidate(\"3.124587\") == false)",
            "@test(candidate(\"1.11\") == true)",
            "@test(candidate(\"1.1.11\") == false)",
            "end"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "",
        "code": "\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfunction find_tuples(test_list::Vector{Tuple{Int64, Int64, Int64}}, K::Int64)::Vector{Tuple{Int64, Int64, Int64}} \n\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfunction find_tuples(test_list::Vector{Tuple{Int64, Int64, Int64}}, K::Int64)::Vector{Tuple{Int64, Int64, Int64}} \n\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfunction find_tuples(test_list::Vector{Tuple{Int64, Int64, Int64}}, K::Int64)::Vector{Tuple{Int64, Int64, Int64}} \n\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfunction find_tuples(test_list::Vector{Tuple{Int64, Int64, Int64}}, K::Int64)::Vector{Tuple{Int64, Int64, Int64}} \n\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfunction find_tuples(test_list::Vector{Tuple{Int64, Int64, Int64}}, K::Int64)::Vector{Tuple{Int64, Int64, Int64}} \n\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfunction find_tuples(test_list::Vector{Tuple{Int64, Int64, Int64}}, K::Int64)::Vector{Tuple{Int64, Int64, Int64}} \n\tWrite a function to find tuples which have all elements divisible by k from the given vector of tuples.\nfunction find_tuples(test_list::Vector{Tuple\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_tuples;",
            "@test(candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)])",
            "@test(candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)])",
            "@test(candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)])",
            "end"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "",
        "code": "\tWrite a jlthon function to check whether a vector of numbers contains only one distinct element or not.\nfunction unique_Element(arr::Vector{Int64})::Bool \n\tCheck whether a vector of numbers contains only one distinct element.\n\treturn arr.UniqueElement()\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = unique_Element;",
            "@test(candidate([1, 1, 1]) == true)",
            "@test(candidate([1, 2, 1, 2]) == false)",
            "@test(candidate([1, 2, 3, 4, 5]) == false)",
            "end"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "",
        "code": "\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfunction check_monthnumber_number(monthnum3::Int64)::Bool \n\tCheck whether the given month number contains 30 days.\n\treturn monthnum3.Int64() == 30\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_monthnumber_number;",
            "@test(candidate(6) == true)",
            "@test(candidate(2) == false)",
            "@test(candidate(12) == false)",
            "end"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "",
        "code": "\tWrite a jlthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunction find_min_diff(arr::Vector{Int64}, n::Int64)::Int64 \n\tWrite a jlthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_min_diff;",
            "@test(candidate([1, 5, 3, 19, 18, 25], 6) == 1)",
            "@test(candidate([4, 3, 2, 6], 4) == 1)",
            "@test(candidate([30, 5, 20, 9], 4) == 4)",
            "end"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "",
        "code": "\tWrite a jlthon function to count number of digits in a given string.\nfunction number_ctr(str::String)::Int64 \n\tWrite a jlthon function to count number of digits in a given string.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = number_ctr;",
            "@test(candidate(\"program2bedone\") == 1)",
            "@test(candidate(\"3wonders\") == 1)",
            "@test(candidate(\"123\") == 3)",
            "@test(candidate(\"3wond-1ers2\") == 3)",
            "end"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "",
        "code": "\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunction is_polite(n::Int64)::Int64 \n\treturn n % 2 == 0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_polite;",
            "@test(candidate(7) == 11)",
            "@test(candidate(4) == 7)",
            "@test(candidate(9) == 13)",
            "end"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "",
        "code": "\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction pair_wise(l1::Vector{Int64})::Vector{Tuple{Int64, Int64}} \n\tWrite a function to return a vector of all pairs of consecutive items in a given vector.\nfunction\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = pair_wise;",
            "@test(candidate([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)])",
            "@test(candidate([1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)])",
            "@test(candidate([5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)])",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)])",
            "end"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,\nfunction get_pairs_count(arr::Vector{Int64}, sum::Int64)::Int64 \n{\n\tInt64 sum = 0;\n\tfor (int i = 0; i < arr.size(); i++)\n\t{\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_pairs_count;",
            "@test(candidate([1, 1, 1, 1], 2) == 6)",
            "@test(candidate([1, 5, 7, -1, 5], 6) == 3)",
            "@test(candidate([1, -2, 3], 1) == 1)",
            "@test(candidate([-1, -2, 3], -3) == 1)",
            "end"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "",
        "code": "\tWrite a jlthon function to get the difference between two vectors.\nfunction Diff(li1::Vector{Int64}, li2::Vector{Int64})::Vector{Int64} \n{\n\tInt64 i1 = li1.GetInt64();\n\tInt64 i2 = li2.GetInt64();\n\treturn li1 - li2;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Diff;",
            "@test(candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15])",
            "@test(candidate([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5, 6, 7])",
            "@test(candidate([1, 2, 3], [6, 7, 1]) == [2, 3, 6, 7])",
            "end"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n::Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a jlthon function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum(n:Int64)::Int64 \n\tWrite a j\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = odd_num_sum;",
            "@test(candidate(2) == 82)",
            "@test(candidate(3) == 707)",
            "@test(candidate(4) == 3108)",
            "end"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "",
        "code": "\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp::String)::Bool \n\tCheck if the given expression is balanced or not.\n\tif not exp:\n\t\treturn False\n\tif not exp[0] == '(':\n\t\treturn False\n\tif not exp[-1] == ')':\n\t\treturn False\n\treturn True\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_expression;",
            "@test(candidate(\"{()}[{}]\") == true)",
            "@test(candidate(\"{()}[{]\") == false)",
            "@test(candidate(\"{()}[{}][]({})\") == true)",
            "end"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "",
        "code": "\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(test_str::String, K::Int64)::String \n\tWrite a function to remove all the words with k length in the given string.\nfunction remove_length(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_length;",
            "@test(candidate(\"The person is most value tet\", 3) == \"person is most value\")",
            "@test(candidate(\"If you told me about this ok\", 4) == \"If you me about ok\")",
            "@test(candidate(\"Forces of darkeness is come into the play\", 4) == \"Forces of darkeness is the\")",
            "end"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "",
        "code": "\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Union{Tuple{String, Int64, Int64}, Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Nothing{Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Nothing{Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Nothing{Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Nothing{Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Nothing{Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Nothing{Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_substring(text::String, pattern::String)::Nothing{Nothing} \n\tWrite a function to find the occurrence and position of the substrings within a string. Return nothing if there is no match.\nfunction occurance_sub\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = occurance_substring;",
            "@test(candidate(\"python programming, python language\", \"python\") == (\"python\", 0, 6))",
            "@test(candidate(\"python programming,programming language\", \"programming\") == (\"programming\", 7, 18))",
            "@test(candidate(\"python programming,programming language\", \"language\") == (\"language\", 31, 39))",
            "@test(candidate(\"c++ programming, c++ language\", \"python\") == nothing)",
            "end"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "",
        "code": "\tWrite a jlthon function to check whether every odd index contains odd numbers of a given vector.\nfunction odd_position(nums::Vector{Int64})::Bool \n\tCheck whether every odd index contains odd numbers of a given vector.\n\treturn odd_position(nums::Vector{Int64}(nums::Vector{Int64}(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = odd_position;",
            "@test(candidate([2, 1, 4, 3, 6, 7, 6, 3]) == true)",
            "@test(candidate([4, 1, 2]) == true)",
            "@test(candidate([1, 2, 3]) == false)",
            "end"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "",
        "code": "\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels(test_str::String)::Int64 \n\tWrite a function to count those characters which have vowels as their neighbors\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_vowels;",
            "@test(candidate(\"bestinstareels\") == 7)",
            "@test(candidate(\"partofthejourneyistheend\") == 12)",
            "@test(candidate(\"amazonprime\") == 5)",
            "end"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of non-repeated elements in a given vector.\nfunction find_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_sum;",
            "@test(candidate([1, 2, 3, 1, 1, 4, 5, 6]) == 21)",
            "@test(candidate([1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)",
            "@test(candidate([12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
            "end"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "",
        "code": "\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction pack_consecutive_duplicates(list1::Vector{Any})::Vector{Vector{Any}} \n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\nfunction\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = pack_consecutive_duplicates;",
            "@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])",
            "@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])",
            "@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])",
            "end"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "",
        "code": "\tWrite a jlthon function to find whether a number is divisible by 11.\nfunction is_Diff(n::Int64)::Bool \n\tReturn True if the number is divisible by 11.\n\treturn n % 11 == 0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_Diff;",
            "@test(candidate(12345) == false)",
            "@test(candidate(1212112) == true)",
            "@test(candidate(1212) == false)",
            "end"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "",
        "code": "\tWrite a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/jlthon-combinations-of-sum-with-tuples-in-tuple-vector/\nfunction find_combinations(test_list::Vector{Tuple{Int64, Int64}})::Vector{Tuple{Int64, Int64}} \n\ttest_list = test_list.Tuple{Int64, Int64}\n\treturn find_combinations(test_list)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_combinations;",
            "@test(candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)])",
            "@test(candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)])",
            "@test(candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)])",
            "end"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the count of divisors is even. https://www.w3resource.com/jlthon-exercises/basic/jlthon-basic-1-exercise-24.php\nfunction count_divisors(n::Int64)::Bool \n\tWrite a jlthon function to check whether the count of divisors is even. https://www.w3resource.com/jlthon-exercises/basic/jlthon-basic-1-exercise-24.php\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_divisors;",
            "@test(candidate(10) == true)",
            "@test(candidate(100) == false)",
            "@test(candidate(125) == true)",
            "end"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\nfunction odd_length_sum(arr::Vector{Int64})::Int64 \n{\n\tInt64 sum = 0;\n\tfor (int i = 0; i < arr.size(); i++)\n\t{\n\t\tif (arr[i] % 2 == 0)\n\t\t{\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = odd_length_sum;",
            "@test(candidate([1, 2, 4]) == 14)",
            "@test(candidate([1, 2, 1, 2]) == 15)",
            "@test(candidate([1, 7]) == 8)",
            "end"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "",
        "code": "\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunction rgb_to_hsv(r::Int64, g::Int64, b::Int64)::Vector{Float64} \n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunction hsv_to_rgb(h::Int64, s::Int64, v::Int64)::Vector{Float64} \n\tWrite a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-hsv-color-model-rgb-color-model/\nfunction rgb_to_hsv(r::Int64, g::Int64, b::Int64)::Vector{Float64} \n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunction hsv_to_rgb(h::Int64, s::Int64, v::Int64)::Vector{Float64} \n\tWrite a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-hsv-color-model-rgb-color-model/\nfunction rgb_to_hsv(r::Int64, g::Int64, b::Int64)::Vector{Float64} \n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunction hsv_to_rgb(h::Int64, s::Int64, v::Int64)::Vector{Float64} \n\tWrite a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = rgb_to_hsv;",
            "@test(candidate(255, 255, 255) == [0.0, 0.0, 100.0])",
            "@test(candidate(0, 215, 0) == [120.0, 100.0, 84.31372549019608])",
            "@test(candidate(10, 215, 110) == [149.26829268292684, 95.34883720930233, 84.31372549019608])",
            "end"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "",
        "code": "\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::Int64 \n\tWrite a function to find the product of first even and odd number of a given vector.\nfunction mul_even_odd(list1::Vector{Int64})::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = mul_even_odd;",
            "@test(candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 4)",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)",
            "@test(candidate([1, 5, 7, 9, 10]) == 10)",
            "end"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "",
        "code": "\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int_int_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int_int_int_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int_int_int_int_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int_int_int_int_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_int_int_int_int_int_int_int(test_str::String)::Tuple{Int64, Int64, Int64} \n\tWrite a function to convert tuple string to integer tuple.\nfunction tuple_str_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = tuple_str_int;",
            "@test(candidate(\"(7, 8, 9)\") == (7, 8, 9))",
            "@test(candidate(\"(1, 2, 3)\") == (1, 2, 3))",
            "@test(candidate(\"(4, 5, 6)\") == (4, 5, 6))",
            "@test(candidate(\"(7, 81, 19)\") == (7, 81, 19))",
            "end"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "",
        "code": "\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::Vector{Int64}, x::Int64)::Int64 \n\tWrite a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = right_insertion;",
            "@test(candidate([1, 2, 4, 5], 6) == 4)",
            "@test(candidate([1, 2, 4, 5], 3) == 2)",
            "@test(candidate([1, 2, 4, 5], 7) == 4)",
            "end"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "",
        "code": "\tWrite a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three(text::String)::Bool \n\tMatch a string that has an a followed by three 'b'.\nfunction text_match_four(text::String)::Bool \n\tMatch a string that has an a followed by four 'b'.\nfunction text_match_five(text::String)::Bool \n\tMatch a string that has an a followed by five 'b'.\nfunction text_match_six(text::String)::Bool \n\tMatch a string that has an a followed by six 'b'.\nfunction text_match_seven(text::String)::Bool \n\tMatch a string that has an a followed by seven 'b'.\nfunction text_match_eight(text::String)::Bool \n\tMatch a string that has an a followed by eight 'b'.\nfunction text_match_nine(text::String)::Bool \n\tMatch a string that has an a followed by nine 'b'.\nfunction text_match_ten(text::String)::Bool \n\tMatch a string that has an a followed by ten 'b'.\nfunction text_match_eleven(text::String)::Bool \n\tMatch a string that has an a followed by eleven 'b'.\nfunction text_match_twelve(text::String)::Bool \n\tMatch a string that has an a followed by twelve 'b'.\nfunction text_match_thirteen(text::String)::Bool \n\tMatch a string that has an a followed by thirteen 'b'.\nfunction text_match_fourteen(text::String)::Bool \n\tMatch a string that has an a followed by fourteen 'b'.\nfunction text_match_fifteen(text::String)::Bool \n\tMatch a string that has an a followed by fifteen 'b'.\nfunction text\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_match_three;",
            "@test(candidate(\"ac\") == false)",
            "@test(candidate(\"dc\") == false)",
            "@test(candidate(\"abbbba\") == true)",
            "@test(candidate(\"caacabbbba\") == true)",
            "end"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "",
        "code": "\tWrite a function to create a new tuple from the given string and vector.\nfunction new_tuple(test_list::Vector{String}, test_str::String)::Tuple{String, String, String} \n\t{\n\t\treturn Tuple{test_list::Vector{test_str::String}, test_str::String, test_str::String};\n\t}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = new_tuple;",
            "@test(candidate([\"WEB\", \"is\"], \"best\") == (\"WEB\", \"is\", \"best\"))",
            "@test(candidate([\"We\", \"are\"], \"Developers\") == (\"We\", \"are\", \"Developers\"))",
            "@test(candidate([\"Part\", \"is\"], \"Wrong\") == (\"Part\", \"is\", \"Wrong\"))",
            "end"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "",
        "code": "\tWrite a jlthon function to check whether every even index contains even numbers of a given vector.\nfunction even_position(nums::Vector{Int64})::Bool \n\tCheck whether every element of the given vector is an even number of a given vector.\n\treturn nums.is_even(nums)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = even_position;",
            "@test(candidate([3, 2, 1]) == false)",
            "@test(candidate([1, 2, 3]) == false)",
            "@test(candidate([2, 1, 4]) == true)",
            "end"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "",
        "code": "\tWrite a function to remove tuples from the given tuple.\nfunction remove_nested(test_tup::Any)::Tuple{Int64, Int64, Int64, Int64} \n\treturn test_tup::Any\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_nested;",
            "@test(candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10))",
            "@test(candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11))",
            "@test(candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12))",
            "@test(candidate((3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12))",
            "end"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count the number of vectors in a given number of vectors.\nfunction count_list(input_list::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to count\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_list;",
            "@test(candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4)",
            "@test(candidate([[1, 2], [2, 3], [4, 5]]) == 3)",
            "@test(candidate([[1, 0], [2, 0]]) == 2)",
            "end"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "",
        "code": "\tWrite a jlthon function to find the last position of an element in a sorted vector.\nfunction last(arr::Vector{Int64}, x::Int64)::Int64 \n\tReturn the last position of an element in a sorted vector.\n\treturn arr.last(x)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = last;",
            "@test(candidate([1, 2, 3], 1) == 0)",
            "@test(candidate([1, 1, 1, 2, 3, 4], 1) == 2)",
            "@test(candidate([2, 3, 2, 3, 6, 8, 9], 3) == 3)",
            "end"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "",
        "code": "\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunction text_starta_endb(text::String)::Bool \n\tReturns true if the string starts with 'a' followed by anything.\nfunction text_starta_endb_end(text::String)::Bool \n\tReturns true if the string starts with 'a' followed by anything, ending in 'b'.\nfunction text_starta_endb_end_end(text::String)::Bool \n\tReturns true if the string starts with 'a' followed by anything, ending in 'b', or if the string starts with 'a' followed by anything, ending in 'b' and so on.\nfunction text_starta_endb_end_end_end(text::String)::Bool \n\tReturns true if the string starts with 'a' followed by anything, ending in 'b', or if the string starts with 'a' followed by anything, ending in 'b' and so on.\nfunction text_starta_endb_end_end_end_end(text::String)::Bool \n\tReturns true if the string starts with 'a' followed by anything, ending in 'b', or if the string starts with 'a' followed by anything, ending in 'b' and so on.\nfunction text_starta_endb_end_end_end_end_end(text::String)::Bool \n\tReturns true if the string starts with 'a' followed by anything, ending in 'b', or if the string starts with 'a' followed by anything, ending in 'b' and so on.\nfunction text_starta_endb_end_end_end_end_end_end(text::String)::Bool \n\tReturns true if the string starts with 'a' followed by anything, ending in 'b', or if the string starts with 'a' followed by anything, ending in 'b' and so on.\nfunction text_starta_endb_end_end_end_end_end_end(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = text_starta_endb;",
            "@test(candidate(\"aabbbb\") == true)",
            "@test(candidate(\"aabAbbbc\") == false)",
            "@test(candidate(\"accddbbjjj\") == false)",
            "end"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "",
        "code": "\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum(dict::Dict{String, Int64}>)::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items_of_items(dict::Dict{String, Int64})::Int64 \n\tWrite function to find the sum of all items in the given dictionary.\nfunction return_sum_of_items_of_items_of_items(dict::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = return_sum;",
            "@test(candidate(Dict(\"a\" => 100, \"b\" => 200, \"c\" => 300)) == 600)",
            "@test(candidate(Dict(\"a\" => 25, \"b\" => 18, \"c\" => 45)) == 88)",
            "@test(candidate(Dict(\"a\" => 36, \"b\" => 39, \"c\" => 49)) == 124)",
            "end"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range(l::Int64, r::Int64)::Int64 \n\tWrite a jlthon function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sum_in_range;",
            "@test(candidate(2, 5) == 8)",
            "@test(candidate(5, 7) == 12)",
            "@test(candidate(7, 13) == 40)",
            "end"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "",
        "code": "\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64})::Int64 \n\tWrite a jlthon function to find the sum of a vector.\nfunction _sum(arr::Vector{Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = _sum;",
            "@test(candidate([1, 2, 3]) == 6)",
            "@test(candidate([15, 12, 13, 10]) == 50)",
            "@test(candidate([0, 1, 2]) == 3)",
            "end"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "",
        "code": "\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate(n::Int64, d::Int64)::Int64 \n\tRotate left bits by d bits a given number.\n\treturn n - (n & (d - 1))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = left_rotate;",
            "@test(candidate(16, 2) == 64)",
            "@test(candidate(10, 2) == 40)",
            "@test(candidate(99, 3) == 792)",
            "@test(candidate(99, 3) == 792)",
            "@test(candidate(1, 3) == 8)",
            "@test(candidate(5, 3) == 40)",
            "@test(candidate(29, 3) == 232)",
            "end"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "",
        "code": "\tWrite a jlthon function to check whether the length of the word is odd or not.\nfunction word_len(s::String)::Bool \n\tCheck whether the length of the word is odd or not.\n\treturn s.length() % 2 == 0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = word_len;",
            "@test(candidate(\"Hadoop\") == false)",
            "@test(candidate(\"great\") == true)",
            "@test(candidate(\"structure\") == true)",
            "end"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "",
        "code": "\tWrite a function to remove all whitespaces from a string.\nfunction remove_all_spaces(text::String)::String \n\tRemove all whitespaces from a string.\n\treturn text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::RemoveAllSpaces(text::String(text::String::\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = remove_all_spaces;",
            "@test(candidate(\"python  program\") == \"pythonprogram\")",
            "@test(candidate(\"python   programming    language\") == \"pythonprogramminglanguage\")",
            "@test(candidate(\"python                     program\") == \"pythonprogram\")",
            "@test(candidate(\"   python                     program\") == \"pythonprogram\")",
            "end"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of equal numbers from three given integers.\nfunction test_three_equal(x::Int64, y::Int64, z::Int64)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from three given integers.\ntest_three_equal(1, 2, 3)::Int64 \n\tWrite a jlthon function to count the number of equal numbers from\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = test_three_equal;",
            "@test(candidate(1, 1, 1) == 3)",
            "@test(candidate(-1, -2, -3) == 0)",
            "@test(candidate(1, 2, 2) == 2)",
            "end"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "",
        "code": "\tWrite a jlthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nfunction count_rotation(arr::Vector{Int64})::Int64 \n{\n\tInt64 count = 0;\n\tfor (int i = 0; i < arr.size(); i++)\n\t{\n\t\tif (arr[i] == 1)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = count_rotation;",
            "@test(candidate([3, 2, 1]) == 1)",
            "@test(candidate([4, 5, 1, 2, 3]) == 2)",
            "@test(candidate([7, 8, 9, 1, 2, 3]) == 3)",
            "@test(candidate([1, 2, 3]) == 0)",
            "@test(candidate([1, 3, 2]) == 2)",
            "end"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "",
        "code": "\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunction is_perfect_square(n::Int64)::Bool \n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_perfect_square;",
            "@test(candidate(10) == false)",
            "@test(candidate(36) == true)",
            "@test(candidate(14) == false)",
            "@test(candidate(196) == true)",
            "@test(candidate(125) == false)",
            "@test(candidate(15625) == true)",
            "end"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "",
        "code": "\tWrite a function to check whether the product of numbers in a vector is even or not.\nfunction is_product_even(arr::Vector{Int64})::Bool \n\tCheck whether the product of numbers in a vector is even.\n\treturn arr.is_product_even(Int64(0))\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_product_even;",
            "@test(candidate([1, 2, 3]) == true)",
            "@test(candidate([1, 2, 1, 4]) == true)",
            "@test(candidate([1, 1]) == false)",
            "end"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "",
        "code": "\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists::Vector{Vector{Int64}})::Vector{Int64} \n\tWrite a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nfunction max_sum_list(lists\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_sum_list;",
            "@test(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])",
            "@test(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])",
            "@test(candidate([[2, 3, 1]]) == [2, 3, 1])",
            "end"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "",
        "code": "\tWrite a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str::String)::Int64 \n\tWrite a function to find maximum run of uppercase characters in the given string.\nfunction max_run_lowercase(test_str::String)::Int64 \n\tWrite a function to find maximum run of lowercase characters in the given string.\nfunction max_run_capitalize(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_uppercase(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_lowercase(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_capitalize(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_capitalize_uppercase(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_capitalize_lowercase(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_capitalize_capitalize(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_capitalize_capitalize_uppercase(test_str::String)::Int64 \n\tWrite a function to find maximum run of capitalize characters in the given string.\nfunction max_run_capitalize_capitalize_capitalize_lowercase(\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = max_run_uppercase;",
            "@test(candidate(\"GeMKSForGERksISBESt\") == 5)",
            "@test(candidate(\"PrECIOusMOVemENTSYT\") == 6)",
            "@test(candidate(\"GooGLEFluTTER\") == 4)",
            "end"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "",
        "code": "\tWrite a jlthon function to find the first odd number in a given vector of numbers.\nfunction first_odd(nums::Vector{Int64})::Int64 \n\tReturn the first odd number in the given vector.\n\treturn nums.first_odd(nums)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = first_odd;",
            "@test(candidate([1, 3, 5]) == 1)",
            "@test(candidate([2, 4, 1, 3]) == 1)",
            "@test(candidate([8, 9, 1]) == 9)",
            "end"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "",
        "code": "\tWrite a function to check if the given tuples contain the k or not.\nfunction check_K(test_tup::Vector{Int64}, K::Int64)::Bool \n\tCheck if the given tuple contains the k.\n\treturn test_tup.Vector{Int64} == K::Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_K;",
            "@test(candidate([10, 4, 5, 6, 8], 6) == true)",
            "@test(candidate([1, 2, 3, 4, 5, 6], 7) == false)",
            "@test(candidate([7, 8, 9, 44, 11, 12], 11) == true)",
            "end"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "",
        "code": "\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Bool \n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Bool \n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Bool \n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Bool \n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Bool \n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller(test_tup1::Tuple{Int64, Int64, Int64}, test_tup2::Tuple{Int64, Int64, Int64})::Bool \n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller(test_tup1::Tuple{\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = check_smaller;",
            "@test(candidate((1, 2, 3), (2, 3, 4)) == false)",
            "@test(candidate((4, 5, 6), (3, 4, 5)) == true)",
            "@test(candidate((11, 12, 13), (10, 11, 12)) == true)",
            "end"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "",
        "code": "\tWrite a function to find the nth tetrahedral number.\nfunction tetrahedral_number(n::Int64)::Int64 \n\tReturn the nth tetrahedral number.\n\treturn n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = tetrahedral_number;",
            "@test(candidate(5) == 35)",
            "@test(candidate(6) == 56)",
            "@test(candidate(7) == 84)",
            "end"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "",
        "code": "\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\tWrite a jlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char(strr::String)::String \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = get_Char;",
            "@test(candidate(\"abc\") == \"f\")",
            "@test(candidate(\"gfg\") == \"t\")",
            "@test(candidate(\"ab\") == \"c\")",
            "end"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "",
        "code": "\tWrite a function to find the nth number in the newman conway sequence.\nfunction sequence(n::Int64)::Int64 \n\tWrite a function to find the nth number in the newman conway sequence.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = sequence;",
            "@test(candidate(10) == 6)",
            "@test(candidate(2) == 1)",
            "@test(candidate(3) == 2)",
            "end"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "",
        "code": "\tWrite a function to find nth centered hexagonal number.\nfunction centered_hexagonal_number(n::Int64)::Int64 \n\tWrite a function to find nth centered hexagonal number.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = centered_hexagonal_number;",
            "@test(candidate(10) == 271)",
            "@test(candidate(2) == 7)",
            "@test(candidate(9) == 217)",
            "end"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "",
        "code": "\tWrite a function to merge three dictionaries into a single dictionary.\nfunction merge_dictionaries_three(dict1::Dict{String, String}>, dict2::Dict{String, String}>, dict3::Dict{String, String}>)::Dict{String, String}> \n{\n\treturn dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict{String, String}(dict2::Dict{String, String}(dict3::Dict{String, String}(dict1::Dict\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = merge_dictionaries_three;",
            "@test(candidate(Dict(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), Dict(\"G\" => \"Green\", \"W\" => \"White\"), Dict(\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\")) == Dict(\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"))",
            "@test(candidate(Dict(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), Dict(\"G\" => \"Green\", \"W\" => \"White\"), Dict(\"L\" => \"lavender\", \"B\" => \"Blue\")) == Dict(\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"))",
            "@test(candidate(Dict(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), Dict(\"L\" => \"lavender\", \"B\" => \"Blue\"), Dict(\"G\" => \"Green\", \"W\" => \"White\")) == Dict(\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"))",
            "end"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "",
        "code": "\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get the frequency of all the elements in a vector, returned as a dictionary.\nfunction freq_count(list1::Vector{Int64})::Dict{Int64, Int64}> \n\tWrite a function to get\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = freq_count;",
            "@test(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == Dict(10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1))",
            "@test(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == Dict(1 => 3, 2 => 2, 3 => 3, 4 => 3))",
            "@test(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == Dict(10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2))",
            "end"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "",
        "code": "\tWrite a function to find the closest smaller number than n.\nfunction closest_num(N::Int64)::Int64 \n\tReturn the closest number to n.\n\treturn N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest_integer(N.closest\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = closest_num;",
            "@test(candidate(11) == 10)",
            "@test(candidate(7) == 6)",
            "@test(candidate(12) == 11)",
            "end"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "",
        "code": "\tWrite a function to find squares of individual elements in a vector.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums::Vector{Int64})::Vector{Int64} \n\tReturn a vector of the same size as the vector passed in.\nfunction square_nums(nums\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = square_nums;",
            "@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])",
            "@test(candidate([10, 20, 30]) == [100, 400, 900])",
            "@test(candidate([12, 15]) == [144, 225])",
            "end"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "",
        "code": "\tWrite a jlthon function to find the length of the longest word.\nfunction len_log(list1::Vector{String})::Int64 \n\tReturn the length of the longest word in the list.\n\treturn len(list1)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = len_log;",
            "@test(candidate([\"python\", \"PHP\", \"bigdata\"]) == 7)",
            "@test(candidate([\"a\", \"ab\", \"abc\"]) == 3)",
            "@test(candidate([\"small\", \"big\", \"tall\"]) == 5)",
            "end"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "",
        "code": "\tWrite a function to check if a string is present as a substring in a given vector of string values.\nfunction find_substring(str1::Vector{String}, sub_str::String)::Bool \n\tCheck if a string is a substring of a given vector of string values.\n\treturn str1.find(sub_str::String)!= -1\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_substring;",
            "@test(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == true)",
            "@test(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") == false)",
            "@test(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") == true)",
            "end"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "",
        "code": "\tWrite a function to check whether the given number is undulating or not.\nfunction is_undulating(n::Int64)::Bool \n\tCheck whether the given number is undulating.\n\treturn n > 0\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = is_undulating;",
            "@test(candidate(1212121) == true)",
            "@test(candidate(1991) == false)",
            "@test(candidate(121) == true)",
            "end"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "",
        "code": "\tWrite a function to calculate the value of 'a' to the power 'b'.\nfunction power(a::Int64, b::Int64)::Int64 \n\tWrite a function to calculate the value of 'a' to the power 'b'.\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = power;",
            "@test(candidate(3, 4) == 81)",
            "@test(candidate(2, 3) == 8)",
            "@test(candidate(5, 5) == 3125)",
            "end"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "",
        "code": "\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::String \n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int\n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int64\n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int64\n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int\n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int64\n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int\n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int64\n\tGiven a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum(test_list::Vector{Tuple{String, Int64}})::Int\n\tGiven a vector of tuples, write a\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = index_minimum;",
            "@test(candidate([(\"Rash\", 143), (\"Manjeet\", 200), (\"Varsha\", 100)]) == \"Varsha\")",
            "@test(candidate([(\"Yash\", 185), (\"Dawood\", 125), (\"Sanya\", 175)]) == \"Dawood\")",
            "@test(candidate([(\"Sai\", 345), (\"Salman\", 145), (\"Ayesha\", 96)]) == \"Ayesha\")",
            "end"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "",
        "code": "\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64}})::Int64 \n\tWrite a jlthon function to find the length of the smallest vector in a vector of vectors.\nfunction Find_Min_Length(lst::Vector{Vector{Int64\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = Find_Min_Length;",
            "@test(candidate([[1], [1, 2]]) == 1)",
            "@test(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)",
            "@test(candidate([[3, 3, 3], [4, 4, 4, 4]]) == 3)",
            "end"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "",
        "code": "\tWrite a jlthon function to find the number of divisors of a given integer.\nfunction divisor(n::Int64)::Int64 \n\tReturn the number of divisors of a given integer.\n\treturn (n - 1) // 2\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = divisor;",
            "@test(candidate(15) == 4)",
            "@test(candidate(12) == 6)",
            "@test(candidate(9) == 3)",
            "end"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "",
        "code": "\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists(list1::Vector{Vector{Int64}})::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector(list1::Vector)::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector_vector(list1::Vector)::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector_vector_vector(list1::Vector)::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector_vector_vector(list1::Vector)::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector_vector_vector(list1::Vector)::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector_vector_vector(list1::Vector)::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector_vector_vector(list1::Vector)::Dict{Int64, Int64}> \n\tWrite a function to find frequency of each element in a flattened vector of vectors, returned in a dictionary.\nfunction frequency_lists_vector_vector_vector(list1::Vector)::Dict{Int64, Int64}\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = frequency_lists;",
            "@test(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == Dict(1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1))",
            "@test(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == Dict(1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1))",
            "@test(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == Dict(20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1))",
            "end"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "",
        "code": "\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n::Int64)::String \n\tConvert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n\treturn \"0b\" + str(n)\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = decimal_to_binary;",
            "@test(candidate(8) == \"1000\")",
            "@test(candidate(18) == \"10010\")",
            "@test(candidate(7) == \"111\")",
            "end"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "",
        "code": "\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations(str::String)::Int64 \n\n",
        "test_list": [
            "using Test",
            "@testset begin",
            "candidate = find_Rotations;",
            "@test(candidate(\"aaaa\") == 1)",
            "@test(candidate(\"ab\") == 2)",
            "@test(candidate(\"abc\") == 3)",
            "end"
        ]
    }
]