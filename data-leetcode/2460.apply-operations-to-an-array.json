[
    {
        "title": "Apply Operations to an Array",
        "question_content": "You are given a 0-indexed array nums of size n consisting of non-negative integers.\nYou need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:\n\n\tIf nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation.\n\nAfter performing all the operations, shift all the 0's to the end of the array.\n\n\tFor example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0].\n\nReturn the resulting array.\nNote that the operations are applied sequentially, not all at once.\n&nbsp;\nExample 1:\n\nInput: nums = [1,2,2,1,1,0]\nOutput: [1,4,2,0,0,0]\nExplanation: We do the following operations:\n- i = 0: nums[0] and nums[1] are not equal, so we skip this operation.\n- i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,4,0,1,1,0].\n- i = 2: nums[2] and nums[3] are not equal, so we skip this operation.\n- i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,2,0,0].\n- i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,0,0].\nAfter that, we shift the 0's to the end, which gives the array [1,4,2,0,0,0].\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: [1,0]\nExplanation: No operation can be applied, we just shift the 0 to the end.\n\n&nbsp;\nConstraints:\n\n\t2 <= nums.length <= 2000\n\t0 <= nums[i] <= 1000",
        "solutions": [
            {
                "id": 2783059,
                "title": "c-solution-o-n-time-o-1-space-very-simple-and-easy-to-understand",
                "content": "<b>Up Vote if you like the solution\\n```\\n/*\\nSimply change the value of nums[i] to 2 times & set nums[i+1] to zero when nums[i] == nums[i+1].\\nThen take a pointer and keep on accumulating non zero value at the front.\\nSet all remaining values to zero, utill pointer is less then size of the array.\\n*/\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i+1 < nums.size(); ++i){\\n            if(nums[i] == nums[i+1]){  //update values of ith and (i+1)th value\\n                nums[i] = 2*nums[i]; \\n                nums[i+1] = 0;\\n            }\\n        }\\n        int i = 0;\\n        for(auto n: nums){  // collect all noon zero values at front\\n            if(n != 0) nums[i++] = n;\\n        }\\n        while(i < nums.size()) nums[i++] = 0;         //set values to zero for remainintg ith element\\n        \\n        return nums;\\n    }\\n};\\n\\n```\\n\\n<b>Here is an article of my interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/*\\nSimply change the value of nums[i] to 2 times & set nums[i+1] to zero when nums[i] == nums[i+1].\\nThen take a pointer and keep on accumulating non zero value at the front.\\nSet all remaining values to zero, utill pointer is less then size of the array.\\n*/\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i+1 < nums.size(); ++i){\\n            if(nums[i] == nums[i+1]){  //update values of ith and (i+1)th value\\n                nums[i] = 2*nums[i]; \\n                nums[i+1] = 0;\\n            }\\n        }\\n        int i = 0;\\n        for(auto n: nums){  // collect all noon zero values at front\\n            if(n != 0) nums[i++] = n;\\n        }\\n        while(i < nums.size()) nums[i++] = 0;         //set values to zero for remainintg ith element\\n        \\n        return nums;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783066,
                "title": "python-c-use-the-not-trick-to-move-zeros-explained",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs a brute force approach to perform operations along with (stable-)sorting using a **logical not** trick to move zeros to the end of array. Time complexity is linear: **O(N\\\\*logN)**. Space complexity is linear: **O(N)**.\\n\\n\\n**Python.**\\n```\\nclass Solution:\\n    def applyOperations(self, n):\\n\\n        # apply the first part of operations\\n        for i in range(1,len(n)):\\n            if n[i] == n[i-1]:\\n                n[i-1], n[i] = n[i-1]*2, 0    \\n        \\n        # \\'not\\' of any non-zero number is equal to 0, i.e.,\\n        # less than \\'not 0\\' which is 1 (here, sorting is stable)\\n        return sorted(n, key=lambda x: not x)\\n```\\n\\n**C++.**\\n```\\nclass Solution \\n{\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        for (int i = 1; i < nums.size(); ++i)\\n            if (nums[i] == nums[i-1])\\n                nums[i-1] *= 2, nums[i] = 0;\\n        \\n\\t\\t// stable sort is important, it keeps the original order of non-zero numbers\\n        stable_sort(nums.begin(), nums.end(), [](int a, int b) { return !a < !b; });\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, n):\\n\\n        # apply the first part of operations\\n        for i in range(1,len(n)):\\n            if n[i] == n[i-1]:\\n                n[i-1], n[i] = n[i-1]*2, 0    \\n        \\n        # \\'not\\' of any non-zero number is equal to 0, i.e.,\\n        # less than \\'not 0\\' which is 1 (here, sorting is stable)\\n        return sorted(n, key=lambda x: not x)\\n```\n```\\nclass Solution \\n{\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        for (int i = 1; i < nums.size(); ++i)\\n            if (nums[i] == nums[i-1])\\n                nums[i-1] *= 2, nums[i] = 0;\\n        \\n\\t\\t// stable sort is important, it keeps the original order of non-zero numbers\\n        stable_sort(nums.begin(), nums.end(), [](int a, int b) { return !a < !b; });\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783107,
                "title": "one-pass-c-java-python3",
                "content": "Just do `Operation` and `Swapping of non-zeroes at front` of array simultaneously.\\n# C++\\n    vector<int> applyOperations(vector<int>& A) {\\n        for (int i = 0, j = 0; i < size(A); ++i){\\n            if (i + 1 < size(A) and A[i] == A[i + 1]){\\n                A[i] *= 2;\\n                A[i + 1] = 0;\\n            }\\n            if (A[i]) swap(A[j++], A[i]);\\n        }   \\n        return A;\\n    }\\n# Java\\n    void swap(int[] A, int i, int j){\\n        int temp = A[i];\\n        A[i] = A[j];\\n        A[j] = temp;\\n    }\\n    \\n    public int[] applyOperations(int[] A) {\\n        for (int i = 0, j = 0; i < A.length; ++i){\\n            if (i + 1 < A.length && A[i] == A[i + 1]){\\n                A[i] *= 2;\\n                A[i + 1] = 0;\\n            }\\n            if (A[i] != 0){\\n                swap(A,i,j);\\n                j++;\\n            }\\n        }   \\n        return A;\\n    }\\n# Python3\\n    def applyOperations(self, A: List[int]) -> List[int]:\\n        j = 0\\n        for i in range(len(A)):\\n            if i + 1 < len(A) and A[i] == A[i + 1]:\\n                A[i] *= 2\\n                A[i + 1] = 0 \\n            if A[i]:\\n                A[j], A[i] = A[i], A[j]\\n                j += 1 \\n        return A",
                "solutionTags": [
                    "C"
                ],
                "code": "Just do `Operation` and `Swapping of non-zeroes at front` of array simultaneously.\\n# C++\\n    vector<int> applyOperations(vector<int>& A) {\\n        for (int i = 0, j = 0; i < size(A); ++i){\\n            if (i + 1 < size(A) and A[i] == A[i + 1]){\\n                A[i] *= 2;\\n                A[i + 1] = 0;\\n            }\\n            if (A[i]) swap(A[j++], A[i]);\\n        }   \\n        return A;\\n    }\\n# Java\\n    void swap(int[] A, int i, int j){\\n        int temp = A[i];\\n        A[i] = A[j];\\n        A[j] = temp;\\n    }\\n    \\n    public int[] applyOperations(int[] A) {\\n        for (int i = 0, j = 0; i < A.length; ++i){\\n            if (i + 1 < A.length && A[i] == A[i + 1]){\\n                A[i] *= 2;\\n                A[i + 1] = 0;\\n            }\\n            if (A[i] != 0){\\n                swap(A,i,j);\\n                j++;\\n            }\\n        }   \\n        return A;\\n    }\\n# Python3\\n    def applyOperations(self, A: List[int]) -> List[int]:\\n        j = 0\\n        for i in range(len(A)):\\n            if i + 1 < len(A) and A[i] == A[i + 1]:\\n                A[i] *= 2\\n                A[i + 1] = 0 \\n            if A[i]:\\n                A[j], A[i] = A[i], A[j]\\n                j += 1 \\n        return A",
                "codeTag": "Python3"
            },
            {
                "id": 2783148,
                "title": "c-simple-solution-move-zeroes-problem-extension-o-1-space",
                "content": "The idea is super simple go through all n - 1 elements and see if condition satisifies\\nthen the problem is move all zeroes to end \\nwe solve it using two pointers \\n\\nLink to move zeroes to end problem :- <b>[Move Zeroes Problem](https://leetcode.com/problems/move-zeroes/)</b>\\n\\n```c++\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n\\t\\t// checking for the n- 1 conditions \\n        for(int i = 0; i < n - 1 ; i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n\\t\\t// using two pointers to push numbers to end\\n        int sp = 0;\\n        for(int i = 0 ; i < n ; i++){\\n            if(nums[i]){\\n                swap(nums[i] , nums[sp++]);\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n\\t\\t// checking for the n- 1 conditions \\n        for(int i = 0; i < n - 1 ; i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n\\t\\t// using two pointers to push numbers to end\\n        int sp = 0;\\n        for(int i = 0 ; i < n ; i++){\\n            if(nums[i]){\\n                swap(nums[i] , nums[sp++]);\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783186,
                "title": "c-simple-traversal-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n=nums.size();\\n\\n        vector<int>ans;\\n        \\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]=2*nums[i];\\n                \\n                nums[i+1]=0;\\n            }\\n        }\\n        \\n        int cntt=0;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0) {\\n                cntt++;\\n            }\\n            else {\\n                ans.push_back(nums[i]);\\n            }\\n        }\\n        while(cntt--)\\n        {\\n            \\n            ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**Please upvote if it was helpful for you, thank you!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n=nums.size();\\n\\n        vector<int>ans;\\n        \\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]=2*nums[i];\\n                \\n                nums[i+1]=0;\\n            }\\n        }\\n        \\n        int cntt=0;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0) {\\n                cntt++;\\n            }\\n            else {\\n                ans.push_back(nums[i]);\\n            }\\n        }\\n        while(cntt--)\\n        {\\n            \\n            ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2813285,
                "title": "javascript-easy-and-fast-solution-93-71-faster",
                "content": "\\n\\n\\n\\n* only sort the zeros:  nums.sort((a,b)=> !a - !b)\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for (let i=0;i<nums.length;i++){\\n        if (nums[i]==nums[i+1]){\\n            [nums[i],nums[i+1]]=[nums[i]*2,0];\\n        }\\n    }return nums.sort((a,b)=> !a - !b );\\n};\\n    \\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for (let i=0;i<nums.length;i++){\\n        if (nums[i]==nums[i+1]){\\n            [nums[i],nums[i+1]]=[nums[i]*2,0];\\n        }\\n    }return nums.sort((a,b)=> !a - !b );\\n};\\n    \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2783817,
                "title": "c-clean-and-simple-sol-single-pass-time-o-n-space-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n        int j=0;\\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]&&nums[i]==nums[i+1])\\n            {\\n                int a=nums[i]*2;\\n                nums[i]=nums[i+1]=0;\\n                nums[j++]=a;\\n            }\\n            else if(nums[i])\\n            {\\n                int a=nums[i];\\n                nums[i]=0;\\n                nums[j++]=a;               \\n            }\\n        }\\n        if(nums[nums.size()-1])\\n        {\\n            int a=nums[nums.size()-1];\\n            nums[nums.size()-1]=0;\\n            nums[j]=a; \\n        }\\n        return nums;\\n    }\\n};\\n```\\npls upvote the sol if u like",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n        int j=0;\\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]&&nums[i]==nums[i+1])\\n            {\\n                int a=nums[i]*2;\\n                nums[i]=nums[i+1]=0;\\n                nums[j++]=a;\\n            }\\n            else if(nums[i])\\n            {\\n                int a=nums[i];\\n                nums[i]=0;\\n                nums[j++]=a;               \\n            }\\n        }\\n        if(nums[nums.size()-1])\\n        {\\n            int a=nums[nums.size()-1];\\n            nums[nums.size()-1]=0;\\n            nums[j]=a; \\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783354,
                "title": "short-and-sweet-solution-in-leetcode-history",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n=nums.size();\\n        for(int i=0;i<n-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int nc=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]!=0){\\n                swap(nums[nc],nums[i]);\\n                nc++;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n=nums.size();\\n        for(int i=0;i<n-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int nc=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]!=0){\\n                swap(nums[nc],nums[i]);\\n                nc++;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783261,
                "title": "java-one-pass-time-o-n-space-o-n",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] ans = new int[nums.length];\\n        if (nums.length == 0) return ans;\\n        int pointer = 0;\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if (nums[i] == nums[i + 1] && nums[i] != 0) {\\n                nums[i] *= 2;\\n                ans[pointer++] = nums[i];\\n                nums[i + 1] = 0;\\n            } else if (nums[i] != 0) {\\n                ans[pointer++] = nums[i];\\n            }\\n        }\\n        if (nums[nums.length - 1] != 0) {\\n            ans[pointer] = nums[nums.length - 1];\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] ans = new int[nums.length];\\n        if (nums.length == 0) return ans;\\n        int pointer = 0;\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if (nums[i] == nums[i + 1] && nums[i] != 0) {\\n                nums[i] *= 2;\\n                ans[pointer++] = nums[i];\\n                nums[i + 1] = 0;\\n            } else if (nums[i] != 0) {\\n                ans[pointer++] = nums[i];\\n            }\\n        }\\n        if (nums[nums.length - 1] != 0) {\\n            ans[pointer] = nums[nums.length - 1];\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097018,
                "title": "simple-java-solutions-in-o-n-runtime-0ms-beats-100",
                "content": "<!--  \\n# Intuition\\nDescribe your first thoughts on how to solve this problem. \\n\\n\\n\\nThis code defines a `Solution` class with a method called `applyOperations`, which takes an integer array `nums` as input and returns another integer array as output. The goal of this code is to perform certain operations on the input array `nums` and return the result in a new array.\\n-->\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n1. It first determines the length of the input array `nums` and creates a new integer array `arr` of the same length to store the result.\\n\\n2. The code uses two pointers, `i` and `j`, to iterate through the input array `nums` and the result array `arr`, respectively. Initially, both pointers are set to 0.\\n\\n3. The code enters a loop that iterates over the elements of the input array `nums`.\\n\\n4. Inside the loop, it checks the current element `nums[i]`:\\n   - If `nums[i]` is equal to 0, it continues to the next iteration (skips the current element).\\n   - If `nums[i]` is not equal to 0, it checks whether the next element (`nums[i+1]`) is equal to the current element (`nums[i]`) and whether it\\'s within the bounds of the array (`i < length-1`).\\n   \\n   - If both conditions are true, it means there\\'s a pair of consecutive elements with the same value. In this case, it performs the following actions:\\n     - It doubles the value of the current element and stores the result in the corresponding position of the result array `arr` (i.e., `arr[j++] = 2 * nums[i]`).\\n     - It sets the next element (`nums[i+1]`) to 0 to indicate that it has been used in the operation.\\n     - It increments both `i` and `j` to move to the next elements in both arrays.\\n   \\n   - If the conditions are not met, it means the current element is not part of a pair with the next element, so it simply stores the current element\\'s value in the result array `arr` (i.e., `arr[j++] = nums[i]`).\\n\\n5. After processing all elements in the input array `nums`, the loop ends, and the result array `arr` contains the values after applying the specified operations.\\n\\n6. The code returns the result array `arr` as the output of the `applyOperations` method.\\n\\nIn summary, this code processes an input array, doubles the values of consecutive equal elements, and returns a new array with the result of these operations, eliminating the intermediate zeros generated by the doubling operation.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code1\\n```Java\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int length = nums.length;\\n        int [] arr = new int[length];\\n\\n        for (int i = 0 , j = 0; i < length; i++)\\n        {\\n            if(nums[i] == 0) continue;\\n            \\n            if (i < length-1 && nums[i] == nums[i+1])\\n            {\\n                arr[j++] = 2 * nums[i];\\n                nums[++i] = 0;  // or i++;  only\\n            }else{\\n                arr[j++] = nums[i];\\n            }\\n        }\\n        return arr;\\n     }\\n}\\n```\\n\\n# Code2\\nin Runtime 1ms\\nCheck out the `moveZeroes` method [here](https://leetcode.com/problems/move-zeroes/solutions/3960034/three-simple-java-solutions-runtime-0ms-beats100/) for a solution to efficiently move all zeros to the end of an array\\n```Java\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length-1; i++)\\n        {\\n            if (nums[i] == nums[i+1])\\n            {\\n                nums[i] = 2 * nums[i];\\n                nums[++i] = 0;\\n            }\\n        }\\n\\n       moveZeroes(nums);\\n       \\n        return nums;\\n    }\\n\\n     public static void moveZeroes(int[] nums) \\n     {\\n        int i = 0;\\n        for (int num : nums)\\n        {\\n            if (num != 0)\\n            {\\n                nums[i++] = num;\\n            }\\n        }\\n\\n        while (i <= nums.length - 1)\\n        {\\n            nums[i++] = 0;\\n        }\\n\\n     }\\n}\\n```\\n\\n\\n\\n![abcd1.jpeg](https://assets.leetcode.com/users/images/42ec05f0-affe-4425-bdc4-34eebe5401a6_1695832051.1396768.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Java\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int length = nums.length;\\n        int [] arr = new int[length];\\n\\n        for (int i = 0 , j = 0; i < length; i++)\\n        {\\n            if(nums[i] == 0) continue;\\n            \\n            if (i < length-1 && nums[i] == nums[i+1])\\n            {\\n                arr[j++] = 2 * nums[i];\\n                nums[++i] = 0;  // or i++;  only\\n            }else{\\n                arr[j++] = nums[i];\\n            }\\n        }\\n        return arr;\\n     }\\n}\\n```\n```Java\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length-1; i++)\\n        {\\n            if (nums[i] == nums[i+1])\\n            {\\n                nums[i] = 2 * nums[i];\\n                nums[++i] = 0;\\n            }\\n        }\\n\\n       moveZeroes(nums);\\n       \\n        return nums;\\n    }\\n\\n     public static void moveZeroes(int[] nums) \\n     {\\n        int i = 0;\\n        for (int num : nums)\\n        {\\n            if (num != 0)\\n            {\\n                nums[i++] = num;\\n            }\\n        }\\n\\n        while (i <= nums.length - 1)\\n        {\\n            nums[i++] = 0;\\n        }\\n\\n     }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2784729,
                "title": "java-apply-operations-to-an-array",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int k=0;\\n        int n=nums.length;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n            if(nums[i]!=0)nums[k++]=nums[i];\\n        }\\n        if(nums[n-1]!=0)nums[k++]=nums[n-1];\\n        \\n        for(int j=k;j<n;j++)nums[j]=0;\\n        \\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int k=0;\\n        int n=nums.length;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n            if(nums[i]!=0)nums[k++]=nums[i];\\n        }\\n        if(nums[n-1]!=0)nums[k++]=nums[n-1];\\n        \\n        for(int j=k;j<n;j++)nums[j]=0;\\n        \\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2784066,
                "title": "python-3-6-lines-iteration-t-m-86-79",
                "content": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        for i in range(len(nums)-1):\\n            if nums[i] == nums[i+1]:\\n                nums[i]*= 2\\n                nums[i + 1] = 0   # <-- performing the \"operation.\"  \\n      \\n        return sorted(nums, key=lambda x: x == 0)   # Sorting on a boolean key: False, then True. O(N*logN) worst case, but likely much better because of the key.\\n```\\n[https://leetcode.com/problems/apply-operations-to-an-array/submissions/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*log*N*). That\\'s worstcase, but it\\'s probably closer to  O(N*) because of the binary key. Space complexity is *O*(1).",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        for i in range(len(nums)-1):\\n            if nums[i] == nums[i+1]:\\n                nums[i]*= 2\\n                nums[i + 1] = 0   # <-- performing the \"operation.\"  \\n      \\n        return sorted(nums, key=lambda x: x == 0)   # Sorting on a boolean key: False, then True. O(N*logN) worst case, but likely much better because of the key.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2814638,
                "title": "one-pass",
                "content": "**C++**\\n```cpp\\nvector<int> applyOperations(vector<int>& nums) {\\n    vector<int> res(nums.size());\\n    for(int i = 0, j = 0; i < nums.size(); ++i)\\n        if (nums[i]) {\\n            if (i < nums.size() - 1 && nums[i] == nums[i + 1]) {\\n                res[j++] = nums[i] * 2;\\n                nums[i + 1] = 0;\\n            } \\n            else if (nums[i])\\n                res[j++] = nums[i];\\n        }\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nvector<int> applyOperations(vector<int>& nums) {\\n    vector<int> res(nums.size());\\n    for(int i = 0, j = 0; i < nums.size(); ++i)\\n        if (nums[i]) {\\n            if (i < nums.size() - 1 && nums[i] == nums[i + 1]) {\\n                res[j++] = nums[i] * 2;\\n                nums[i + 1] = 0;\\n            } \\n            else if (nums[i])\\n                res[j++] = nums[i];\\n        }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2786435,
                "title": "python-simple-python-solution-89-ms",
                "content": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0                \\n        temp = []\\n        zeros = []\\n        a=nums\\n        for i in range(len(a)):\\n            if a[i] !=0:\\n                temp.append(a[i])\\n            else:\\n                zeros.append(a[i])\\n        return (temp+zeros)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0                \\n        temp = []\\n        zeros = []\\n        a=nums\\n        for i in range(len(a)):\\n            if a[i] !=0:\\n                temp.append(a[i])\\n            else:\\n                zeros.append(a[i])\\n        return (temp+zeros)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783873,
                "title": "java-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int[] moveZeroes(int[] nums) {\\n        if(nums.length == 0 || nums == null) return nums;\\n        int j = 0;\\n        for (int i : nums){\\n            if(i!=0) nums[j++] = i;\\n        }\\n        while (j< nums.length){\\n            nums[j++] = 0;\\n        }\\n        return nums;\\n    }\\n    public int[] applyOperations(int[] nums) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = nums[i]*2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        return moveZeroes(nums);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] moveZeroes(int[] nums) {\\n        if(nums.length == 0 || nums == null) return nums;\\n        int j = 0;\\n        for (int i : nums){\\n            if(i!=0) nums[j++] = i;\\n        }\\n        while (j< nums.length){\\n            nums[j++] = 0;\\n        }\\n        return nums;\\n    }\\n    public int[] applyOperations(int[] nums) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = nums[i]*2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        return moveZeroes(nums);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783597,
                "title": "bingo-c-easy-clean-code",
                "content": "```\\nclass Solution\\n{\\n    public:\\n        vector<int> applyOperations(vector<int> &nums)\\n        {\\n            int n = nums.size() - 1;\\n            for (int i = 0; i < n;)\\n            {\\n                if (nums[i] == nums[i + 1])\\n                {\\n                    nums[i] = nums[i] *2;\\n                    nums[i + 1] = 0;\\n                    i = i + 1;\\n                }\\n                i++;\\n            }\\n            int i = 0;\\n            for (int j = 0; j < nums.size(); j++)\\n            {\\n                if (nums[j] != 0)\\n                {\\n                    swap(nums[j], nums[i]);\\n                    i++;\\n                }\\n            }\\n            return nums;\\n        }\\n};\\n\\n// TC -> O(N)\\n// SC -> O(1)\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        vector<int> applyOperations(vector<int> &nums)\\n        {\\n            int n = nums.size() - 1;\\n            for (int i = 0; i < n;)\\n            {\\n                if (nums[i] == nums[i + 1])\\n                {\\n                    nums[i] = nums[i] *2;\\n                    nums[i + 1] = 0;\\n                    i = i + 1;\\n                }\\n                i++;\\n            }\\n            int i = 0;\\n            for (int j = 0; j < nums.size(); j++)\\n            {\\n                if (nums[j] != 0)\\n                {\\n                    swap(nums[j], nums[i]);\\n                    i++;\\n                }\\n            }\\n            return nums;\\n        }\\n};\\n\\n// TC -> O(N)\\n// SC -> O(1)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783337,
                "title": "easy-solution-using-java-with-explaination",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is to use an arraylist and then add the elements in it.\\nif nums[i]==nums[i+1] then we multiply  nums[i]*=2 & set nums[i+1]=0.\\nThen we count the number of zeros in the array. And move it to the end of the array by using arraylists.\\nThen we return the nums array which has been updated with new values.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(int i=0; i<n; i++){\\n            if(i<n-1){\\n                if(nums[i]==nums[i+1]){\\n                    nums[i]*=2;\\n                    nums[i+1]=0;\\n                }\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){\\n                count++;\\n            }\\n        }\\n        for(int i=0; i<n;i++){\\n            if(nums[i]!=0){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0; i<count; i++){\\n            list.add(0);\\n        }\\n       for (int i = 0; i < list.size(); i++){\\n            nums[i] = list.get(i);\\n    }\\n        return nums;\\n    }\\n}\\n```\\n### If you like the solution then please upvote me.\\n\\n\\n## Thanks to @arun2020 he gave the solution in O(1) space.\\n\\n### His Approach is as follow\\nThe approach is to first check if the adjacent elements are equal. If they are, then we multiply them and make the next element zero. After this, we shift all zeroes to right side of array using two pointers technique.\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] a) {\\n        int n = a.length;\\n    for (int i = 0; i < n - 1; i++) {\\n       if (a[i] == a[i + 1]) {\\n            a[i] = 2 * a[i];\\n            a[i + 1] = 0;\\n        }\\n    }\\n    int high=0;\\n    int low=0;\\n    while(high<n && low<n){\\n    if(a[high]!=0 && a[low]!=0){\\n    high++;\\n    low++;\\n}\\n    else if(a[low]==0 && a[high]==0){\\n    high++;\\n}\\n    else{\\n        int temp = a[low];\\n        a[low] = a[high];\\n        a[high] = temp;\\n        low++;\\n        high++;\\n}\\n}\\nreturn a;\\n}\\n    }\\n\\n```\\n\\n## Thanks @here-comes-the-g for beautiful approach\\n### His Approach is as follows:\\nFor each pair of numbers, if they are equal, double the first number and set the second to zero.\\nMove all zeros to the end of the array by moving non-zero numbers one at a time from left to right until there are no more non-zeros on the left side of any zeros in between them.\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n        for(int i=0; i<n-1; i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        for(int i=0, left =0; i<n;i++){\\n            if(nums[i]!=0){\\n            int temp = nums[i];\\n            nums[i] = 0;\\n            nums[left]=temp;\\n            left++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```\\n\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(int i=0; i<n; i++){\\n            if(i<n-1){\\n                if(nums[i]==nums[i+1]){\\n                    nums[i]*=2;\\n                    nums[i+1]=0;\\n                }\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){\\n                count++;\\n            }\\n        }\\n        for(int i=0; i<n;i++){\\n            if(nums[i]!=0){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0; i<count; i++){\\n            list.add(0);\\n        }\\n       for (int i = 0; i < list.size(); i++){\\n            nums[i] = list.get(i);\\n    }\\n        return nums;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int[] applyOperations(int[] a) {\\n        int n = a.length;\\n    for (int i = 0; i < n - 1; i++) {\\n       if (a[i] == a[i + 1]) {\\n            a[i] = 2 * a[i];\\n            a[i + 1] = 0;\\n        }\\n    }\\n    int high=0;\\n    int low=0;\\n    while(high<n && low<n){\\n    if(a[high]!=0 && a[low]!=0){\\n    high++;\\n    low++;\\n}\\n    else if(a[low]==0 && a[high]==0){\\n    high++;\\n}\\n    else{\\n        int temp = a[low];\\n        a[low] = a[high];\\n        a[high] = temp;\\n        low++;\\n        high++;\\n}\\n}\\nreturn a;\\n}\\n    }\\n\\n```\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n        for(int i=0; i<n-1; i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        for(int i=0, left =0; i<n;i++){\\n            if(nums[i]!=0){\\n            int temp = nums[i];\\n            nums[i] = 0;\\n            nums[left]=temp;\\n            left++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783198,
                "title": "java-easy-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i = 0; i < nums.length-1; i++) {\\n            if(nums[i] == nums[i+1]) {\\n                nums[i] = nums[i]*2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        \\n        int[] result = new int[nums.length];\\n        int k = 0;\\n        for(int i = 0; i < nums.length; i++) {\\n            if(nums[i] != 0)\\n                result[k++] = nums[i];\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i = 0; i < nums.length-1; i++) {\\n            if(nums[i] == nums[i+1]) {\\n                nums[i] = nums[i]*2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        \\n        int[] result = new int[nums.length];\\n        int k = 0;\\n        for(int i = 0; i < nums.length; i++) {\\n            if(nums[i] != 0)\\n                result[k++] = nums[i];\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783135,
                "title": "2ms-c-solution-explained",
                "content": "Here is the solution along with explanations in the comments:\\n\\n``` C++ []\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for (int i{0}; i<nums.size()-1; ++i) {\\n            // checking if the number matches with the next one or not\\n            if (nums[i]==nums[i+1]) {\\n                // set the first number of the matching pair to twice it\\'s value & other to 0\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n                // i++ because the next element is already set to 0 and can\\'t be same as it\\'s next one\\n                // so we need to skip it\\n                i++;\\n            }\\n        }\\n        \\n        // this function moves 0 to last\\n        for (int i{1},j{0}; i<nums.size(); ++i) {\\n            // if element at j is -ve, then we check if element at index i is something\\n            // other than 0 or not. If it is then we swap otherwise,\\n            // we don\\'t increment j and move i to the next index and try to swap\\n            if (!nums[j]) {\\n                if (nums[i]) swap(nums[i], nums[j++]);\\n            } else j++;\\n        }\\n        \\n        return nums;        \\n    }\\n};\\n```\\n\\n*Upvote if the solution helped you!*",
                "solutionTags": [
                    "C++"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for (int i{0}; i<nums.size()-1; ++i) {\\n            // checking if the number matches with the next one or not\\n            if (nums[i]==nums[i+1]) {\\n                // set the first number of the matching pair to twice it\\'s value & other to 0\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n                // i++ because the next element is already set to 0 and can\\'t be same as it\\'s next one\\n                // so we need to skip it\\n                i++;\\n            }\\n        }\\n        \\n        // this function moves 0 to last\\n        for (int i{1},j{0}; i<nums.size(); ++i) {\\n            // if element at j is -ve, then we check if element at index i is something\\n            // other than 0 or not. If it is then we swap otherwise,\\n            // we don\\'t increment j and move i to the next index and try to swap\\n            if (!nums[j]) {\\n                if (nums[i]) swap(nums[i], nums[j++]);\\n            } else j++;\\n        }\\n        \\n        return nums;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783096,
                "title": "c-brute-force-approach",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        for(int i=0; i<n-1; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] = 2*nums[i];\\n                nums[i+1] = 0;\\n                i++;\\n            }\\n            \\n        }\\n        \\n        vector<int> res(n, 0);\\n        int idx=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                res[idx]=nums[i];\\n                idx++;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        for(int i=0; i<n-1; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] = 2*nums[i];\\n                nums[i+1] = 0;\\n                i++;\\n            }\\n            \\n        }\\n        \\n        vector<int> res(n, 0);\\n        int idx=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                res[idx]=nums[i];\\n                idx++;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3294921,
                "title": "python-solution-beats-99-50-41ms-o-n-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\n    O(N)\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        zeros=0\\n        i=0\\n        while(i<(len(nums)-1)):\\n            if(nums[i]==nums[i+1]):\\n                nums[i]*=2\\n                nums[i+1]=0\\n                i+=1\\n            i+=1\\n            # print(nums)\\n        zeros=nums.count(0)\\n        nums = [i for i in nums if i != 0]\\n        return nums+([0]*zeros)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        zeros=0\\n        i=0\\n        while(i<(len(nums)-1)):\\n            if(nums[i]==nums[i+1]):\\n                nums[i]*=2\\n                nums[i+1]=0\\n                i+=1\\n            i+=1\\n            # print(nums)\\n        zeros=nums.count(0)\\n        nums = [i for i in nums if i != 0]\\n        return nums+([0]*zeros)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3292486,
                "title": "2-approaches-choose-yourself-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere we have to do, if nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation. and then move zeroes to end. If you havent solved **move zeroes**(leetcode- 283) problem, u can solve that also after solving this question. \\n\\n# Approach No. 1(beats 39%) \\n# SPACE OPTIMIZED \\n<!-- Describe your approach to solving the problem. -->\\n1. Iterate through the array and do the following,\\n- If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0.\\n- Otherwise, you skip this operation.\\n2. Iterate again throughout the array and shift all zeroes to end and non- zero in ascending order.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(2N) equivalent to O(N)\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size()-1; i++){\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n                i++; \\n            }\\n        }\\n        int temp = 0;\\n        for(int i = 0; i < nums.size(); i++){\\n            if((i == temp) && nums[i] != 0){\\n                temp++;\\n                continue;\\n            }\\n            if(nums[i] != 0){\\n                nums[temp] = nums[i];\\n                temp++;\\n                nums[i] = 0;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```\\n# Approach No. 2(beats 90%)\\n# TIME OPTIMIZED\\n1. Iterate through the array and do the following,\\n- If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. \\n- check if nums[i] == 0 or not,\\n- nums[i] == 0, store in v1, else v2.\\n- for the last index, do it seperately.\\n2. erase  nums, and set nums to v2. and then insert v1.\\n\\n# COMPLEXITY \\n- **TIME** - O(N)\\n- **SPACE**- O(2N) equivalent to O(N)\\n\\n# CODE\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> v1; // zero vector\\n        vector<int> v2; // non-zero vector\\n        for(int i = 0; i < nums.size()-1; i++){\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n             if(nums[i]==0)\\n                v1.push_back(nums[i]);\\n            else\\n                v2.push_back(nums[i]);\\n        }\\n        // for last element \\n        if(nums[nums.size()-1]==0)\\n            v1.push_back(nums[nums.size()-1]);\\n        else\\n            v2.push_back(nums[nums.size()-1]);\\n        nums.erase(nums.begin(), nums.end());\\n        // sort(v2.begin(), v2.end());\\n        nums = v2;\\n        for(auto i : v1)\\n        nums.push_back(i);\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size()-1; i++){\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n                i++; \\n            }\\n        }\\n        int temp = 0;\\n        for(int i = 0; i < nums.size(); i++){\\n            if((i == temp) && nums[i] != 0){\\n                temp++;\\n                continue;\\n            }\\n            if(nums[i] != 0){\\n                nums[temp] = nums[i];\\n                temp++;\\n                nums[i] = 0;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> v1; // zero vector\\n        vector<int> v2; // non-zero vector\\n        for(int i = 0; i < nums.size()-1; i++){\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n             if(nums[i]==0)\\n                v1.push_back(nums[i]);\\n            else\\n                v2.push_back(nums[i]);\\n        }\\n        // for last element \\n        if(nums[nums.size()-1]==0)\\n            v1.push_back(nums[nums.size()-1]);\\n        else\\n            v2.push_back(nums[nums.size()-1]);\\n        nums.erase(nums.begin(), nums.end());\\n        // sort(v2.begin(), v2.end());\\n        nums = v2;\\n        for(auto i : v1)\\n        nums.push_back(i);\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2857604,
                "title": "easy-solution-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n       \\n        int j =0;\\n        for(int i =0;i<nums.size()-1;i++)\\n        {\\n            if (nums[i]==nums[i+1])\\n            {\\n            nums[i]=(nums[i]*2);\\n            nums[i+1]=0;\\n            }\\n            else \\n            {\\n                nums[i];\\n            }\\n        }\\n        for(int i =0;i<nums.size();i++)\\n        {\\n                \\n            if( i==j && nums[i]!=0)\\n         {\\n             j++;\\n             continue;\\n         }\\n         if (nums[i]!=0)\\n         {\\n             nums[j]=nums[i];\\n             nums[i]=0;\\n             j++;\\n         }\\n        \\n     }\\n    \\n        return nums;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n       \\n        int j =0;\\n        for(int i =0;i<nums.size()-1;i++)\\n        {\\n            if (nums[i]==nums[i+1])\\n            {\\n            nums[i]=(nums[i]*2);\\n            nums[i+1]=0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2817847,
                "title": "easy-python-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        l=[]\\n        c=0\\n        for i in range(len(nums)-1):\\n            if(nums[i]==nums[i+1]):\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n        for i in nums:\\n            if i!=0:\\n                l.append(i)\\n            else:\\n                c+=1\\n        return l+[0]*c\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        l=[]\\n        c=0\\n        for i in range(len(nums)-1):\\n            if(nums[i]==nums[i+1]):\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n        for i in nums:\\n            if i!=0:\\n                l.append(i)\\n            else:\\n                c+=1\\n        return l+[0]*c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2787983,
                "title": "easy-js-solution-explained-o-n-time-and-o-1-space",
                "content": "# Easy JS solution explained | O(n) time and O(1) space\\n**TC: O(n) and SC: O(1)**\\n```\\nvar applyOperations = function(nums) {\\n// perform the operation on each array element\\n    for(let i = 0; i < nums.length - 1; i++){\\n        if(nums[i] === nums[i + 1]){\\n            nums[i] *= 2;\\n            nums[i + 1] = 0;\\n        }\\n    }\\n// Move zeroes to end\\n    let index = 0;\\n    nums.forEach(num => {\\n        if(num !== 0)\\n            nums[index++] = num;\\n    });\\n    while(index < nums.length){\\n        nums[index++] = 0;\\n    }\\n    return nums;\\n};\\n```\\n\\n**If the interviewer asks you not to alter the input**\\n```\\nvar applyOperations = function(nums) {\\n// perform the operation on each array element\\n    for(let i = 0; i < nums.length - 1; i++){\\n        if(nums[i] === nums[i + 1]){\\n            nums[i] *= 2;\\n            nums[i + 1] = 0;\\n        }\\n    }\\n    const res = Array(nums.length).fill(0);\\n    let index = 0;\\n\\t// Copy the non-zero elements to result array\\n    nums.forEach(num => {\\n        if(num !== 0)\\n            res[index++] = num;\\n    });\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar applyOperations = function(nums) {\\n// perform the operation on each array element\\n    for(let i = 0; i < nums.length - 1; i++){\\n        if(nums[i] === nums[i + 1]){\\n            nums[i] *= 2;\\n            nums[i + 1] = 0;\\n        }\\n    }\\n// Move zeroes to end\\n    let index = 0;\\n    nums.forEach(num => {\\n        if(num !== 0)\\n            nums[index++] = num;\\n    });\\n    while(index < nums.length){\\n        nums[index++] = 0;\\n    }\\n    return nums;\\n};\\n```\n```\\nvar applyOperations = function(nums) {\\n// perform the operation on each array element\\n    for(let i = 0; i < nums.length - 1; i++){\\n        if(nums[i] === nums[i + 1]){\\n            nums[i] *= 2;\\n            nums[i + 1] = 0;\\n        }\\n    }\\n    const res = Array(nums.length).fill(0);\\n    let index = 0;\\n\\t// Copy the non-zero elements to result array\\n    nums.forEach(num => {\\n        if(num !== 0)\\n            res[index++] = num;\\n    });\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2783395,
                "title": "c-o-n-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int place=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                nums[place++]=nums[i];\\n            }\\n        }\\n        for(int i=place;i<nums.size();i++){\\n            nums[i]=0;\\n        }\\n        return nums;\\n    }\\n};\\n\\n// if you liked the solution then please upvote it so that it can reach to more people \\n// If you have any doubt or want to discuss any thing related to solution please leave a comment, so that all of the viewers can discuss it\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int place=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                nums[place++]=nums[i];\\n            }\\n        }\\n        for(int i=place;i<nums.size();i++){\\n            nums[i]=0;\\n        }\\n        return nums;\\n    }\\n};\\n\\n// if you liked the solution then please upvote it so that it can reach to more people \\n// If you have any doubt or want to discuss any thing related to solution please leave a comment, so that all of the viewers can discuss it\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489869,
                "title": "javascript-easy-performative-solution-o-n",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n## We can divide the problem into two main tasks:\\n1. Performing the set of operations on the array.\\n2. Shifting the zeros to the end of the array.\\n\\nWe can loop through the array and check every two elements to perform the first set of operations. At the end of the loop, numbers inside `nums` have been transformed.\\n\\nAfter that, in order to shift zeros to the end, we can first separate the non-zero elements from the zero ones and create two separate arrays to hold each one of them. We do this using the `Array.filter()` method.\\n\\nIn the end, we concatenate the two arrays by putting the zeros array at the end and the non-zero array first and returning the result.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i + 1] && nums[i] == nums[i + 1]) {\\n            nums[i] = nums[i] * 2;\\n            nums[i + 1] = 0;\\n        }\\n    }\\n\\n    const zeros = nums.filter((el) => el === 0);\\n    const notZeros = nums.filter((el) => el !== 0);\\n\\n    return notZeros.concat(zeros);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i + 1] && nums[i] == nums[i + 1]) {\\n            nums[i] = nums[i] * 2;\\n            nums[i + 1] = 0;\\n        }\\n    }\\n\\n    const zeros = nums.filter((el) => el === 0);\\n    const notZeros = nums.filter((el) => el !== 0);\\n\\n    return notZeros.concat(zeros);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2907431,
                "title": "java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n       int[] ans=new int[nums.length];\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n           int j=nums.length-1;\\n           int k=0;\\n           for(int i=0;i<nums.length;i++){\\n           if(nums[i]==0)\\n                ans[j--]=0;\\n          \\n          else\\n              ans[k++]=nums[i];\\n          }\\n           \\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n       int[] ans=new int[nums.length];\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n           int j=nums.length-1;\\n           int k=0;\\n           for(int i=0;i<nums.length;i++){\\n           if(nums[i]==0)\\n                ans[j--]=0;\\n          \\n          else\\n              ans[k++]=nums[i];\\n          }\\n           \\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2857608,
                "title": "cpp-solution-easy-to-understand-simple-and-easy",
                "content": "````\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int j=0;\\n        for(int i=0 ;i<nums.size()-1;i++)\\n        {\\n             if(nums[i]!=nums[i+1])\\n               {\\n                continue;  \\n               }\\n            if(nums[i]==nums[i+1])\\n            {\\n               nums[i] =nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++)  // MOVE ALL ZEROS TO END\\n        {\\n            if(i==j && nums[i]!=0)\\n            {\\n                j++;\\n                continue;\\n            }\\n            if(nums[i]!=0)\\n            {\\n                nums[j]=nums[i];\\n                nums[i]=0;\\n                j++;\\n            }\\n        }\\n         return nums;               \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int j=0;\\n        for(int i=0 ;i<nums.size()-1;i++)\\n        {\\n             if(nums[i]!=nums[i+1])\\n               {\\n                continue;  \\n               }",
                "codeTag": "Java"
            },
            {
                "id": 2845859,
                "title": "2460-simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& num) {\\n        for(int i=0;i<num.size()-1;i++)\\n        {\\n            if(num[i]==num[i+1])\\n            {\\n                num[i]*=2;\\n                num[i+1]=0;\\n            }\\n        }\\n        int cnt=count(num.begin(),num.end(),0);\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(num[i]==0)\\n            num.erase(remove(num.begin(),num.end(),0),num.end());\\n        }\\n        for(int i=0;i<cnt;i++)\\n            num.push_back(0); \\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& num) {\\n        for(int i=0;i<num.size()-1;i++)\\n        {\\n            if(num[i]==num[i+1])\\n            {\\n                num[i]*=2;\\n                num[i+1]=0;\\n            }\\n        }\\n        int cnt=count(num.begin(),num.end(),0);\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(num[i]==0)\\n            num.erase(remove(num.begin(),num.end(),0),num.end());\\n        }\\n        for(int i=0;i<cnt;i++)\\n            num.push_back(0); \\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2794505,
                "title": "python-easy-98-81-faster-o-n-solution",
                "content": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1,len(nums)):\\n            if nums[i-1]==nums[i]:\\n                nums[i-1]*=2\\n                nums[i]=0\\n        c,a=0,[]\\n        for i in nums:\\n            if i==0:\\n                c+=1\\n                continue\\n            a.append(i)\\n        return a+[0]*c\\n```\\n\\n**Please upvote if you like the solution**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1,len(nums)):\\n            if nums[i-1]==nums[i]:\\n                nums[i-1]*=2\\n                nums[i]=0\\n        c,a=0,[]\\n        for i in nums:\\n            if i==0:\\n                c+=1\\n                continue\\n            a.append(i)\\n        return a+[0]*c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2790164,
                "title": "c-o-n-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& vec) {\\n        for(int i=0;i<vec.size()-1;i++) {\\n            if(vec[i] == vec[i + 1]) {\\n                vec[i] *= 2;\\n                vec[i + 1] = 0;\\n            }\\n        }\\n        int size = vec.size();\\n        for(int i=0;i<vec.size();i++){\\n            if(vec[i] == 0 ) {\\n                vec.erase(vec.begin()+i);\\n                i--;\\n            }\\n        }\\n        vec.resize(size);\\n        return vec;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& vec) {\\n        for(int i=0;i<vec.size()-1;i++) {\\n            if(vec[i] == vec[i + 1]) {\\n                vec[i] *= 2;\\n                vec[i + 1] = 0;\\n            }\\n        }\\n        int size = vec.size();\\n        for(int i=0;i<vec.size();i++){\\n            if(vec[i] == 0 ) {\\n                vec.erase(vec.begin()+i);\\n                i--;\\n            }\\n        }\\n        vec.resize(size);\\n        return vec;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2784971,
                "title": "python-two-pointers-without-using-extra-space",
                "content": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        \\n        for i in range(len(nums) - 1):\\n            if nums[i] == nums[i+1]:\\n                nums[i] = nums[i] * 2\\n                nums[i+1] = 0\\n        \\n        l = 0\\n        \\n        for r in range(len(nums)):\\n            if nums[l] ==0 and nums[r] !=0:\\n                nums[l], nums[r] = nums[r], nums[l]\\n                l += 1\\n            elif nums[l] !=0:\\n                l += 1\\n        \\n        return nums\\n```",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        \\n        for i in range(len(nums) - 1):\\n            if nums[i] == nums[i+1]:\\n                nums[i] = nums[i] * 2\\n                nums[i+1] = 0\\n        \\n        l = 0\\n        \\n        for r in range(len(nums)):\\n            if nums[l] ==0 and nums[r] !=0:\\n                nums[l], nums[r] = nums[r], nums[l]\\n                l += 1\\n            elif nums[l] !=0:\\n                l += 1\\n        \\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2784475,
                "title": "java-constant-space-easy",
                "content": "### **Please Upvote** :D\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n        \\n        for (int i = 0; i < n - 1; i++) {\\n            if (nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        \\n        int i = 0, j = 0;\\n        \\n        while (j < n) {\\n            if (nums[j] != 0) {\\n                nums[i++] = nums[j];\\n            }\\n            j++;\\n        }\\n        \\n        while (i < n) {\\n            nums[i++] = 0;\\n        }\\n        \\n        return nums;\\n    }\\n}\\n\\n// TC: O(n), SC: O(1)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n        \\n        for (int i = 0; i < n - 1; i++) {\\n            if (nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        \\n        int i = 0, j = 0;\\n        \\n        while (j < n) {\\n            if (nums[j] != 0) {\\n                nums[i++] = nums[j];\\n            }\\n            j++;\\n        }\\n        \\n        while (i < n) {\\n            nums[i++] = 0;\\n        }\\n        \\n        return nums;\\n    }\\n}\\n\\n// TC: O(n), SC: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2784239,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0; i < nums.size()-1; i++) {\\n            if(nums[i] == nums[i+1]) {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        vector<int> ans;\\n        for(auto x: nums) if(x) ans.push_back(x);\\n        for(int i=ans.size(); i<nums.size(); i++) ans.push_back(0);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0; i < nums.size()-1; i++) {\\n            if(nums[i] == nums[i+1]) {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        vector<int> ans;\\n        for(auto x: nums) if(x) ans.push_back(x);\\n        for(int i=ans.size(); i<nums.size(); i++) ans.push_back(0);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783704,
                "title": "iterate-to-shift",
                "content": "# Intuition\\nSimple iteration and then we can shift zeros to last using two pointer approach.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nApplying operation over a single iteration\\n- If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation.\\n\\nShifting zero to the end using the two pointer approach.\\n`i` and `j`.\\n- `i` to iterate over the `nums` array.\\n- `j` to track the poistion of next non-zero index.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: *`O(n)`*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: *`O(1)`*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void shiftZero(vector<int>& nums) {\\n        int n = nums.size();\\n        int i = 0, j = 0;\\n        while(i < n && j < n) {\\n            if(nums[i] == 0) {\\n                j = max(i + 1, j);\\n                while(j < n && nums[j] == 0)\\n                    j++;\\n                if(j < n)\\n                    swap(nums[i], nums[j]);\\n            }\\n            i++;\\n        }\\n    }\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        for(int i = 0; i < n - 1; i++) {\\n            if(nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        shiftZero(nums);\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void shiftZero(vector<int>& nums) {\\n        int n = nums.size();\\n        int i = 0, j = 0;\\n        while(i < n && j < n) {\\n            if(nums[i] == 0) {\\n                j = max(i + 1, j);\\n                while(j < n && nums[j] == 0)\\n                    j++;\\n                if(j < n)\\n                    swap(nums[i], nums[j]);\\n            }\\n            i++;\\n        }\\n    }\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        for(int i = 0; i < n - 1; i++) {\\n            if(nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        shiftZero(nums);\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783574,
                "title": "easy-approach-without-using-any-extra-space",
                "content": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        for(int i = 0; i < n-1; i++)\\n        {\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        // \\n        int j = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n           if(nums[i] != 0)\\n           {\\n               swap(nums[j] , nums[i]);\\n               j++;\\n           }\\n        }\\n        return nums;\\n    }\\n};\\n\\nGuys if you have any query so comment below and if you like the solution so plz Up Vote !!",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        for(int i = 0; i < n-1; i++)\\n        {\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2783220,
                "title": "c-easy-understanding-o-1-space-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        //Doing operations as per Questions\\n        for(int i=0; i<n-1; i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n                count++;\\n                if(nums[i]==0){\\n                    count++;\\n                }\\n            }\\n        }\\n        \\n        //moving the zeros to left\\n        int i =-1;\\n        for(int j =0; j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                i++;\\n                swap(nums[i], nums[j]);\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        //Doing operations as per Questions\\n        for(int i=0; i<n-1; i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n                count++;\\n                if(nums[i]==0){\\n                    count++;\\n                }\\n            }\\n        }\\n        \\n        //moving the zeros to left\\n        int i =-1;\\n        for(int j =0; j<nums.size(); j++){\\n            if(nums[j]!=0){\\n                i++;\\n                swap(nums[i], nums[j]);\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783172,
                "title": "java-easy-solution-100-faster-o-1-space",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length - 1; i++){\\n            if (nums[i] == nums[i + 1]){\\n             nums[i] *= 2;\\n             nums[i + 1] = 0;\\n         }\\n        }\\n        \\n        move(nums);\\n        return nums;\\n    }\\n    \\n    //move zeroes to end\\n    public void move(int arr[]) {\\n\\t\\tint count=0;\\n\\t\\tfor(int i=0;i<arr.length;i++) {\\n\\t\\t\\tif(arr[i]!=0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp=arr[count];\\n\\t\\t\\t\\tarr[count] = arr[i];\\n\\t\\t\\t\\tarr[i]= temp;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length - 1; i++){\\n            if (nums[i] == nums[i + 1]){\\n             nums[i] *= 2;\\n             nums[i + 1] = 0;\\n         }\\n        }\\n        \\n        move(nums);\\n        return nums;\\n    }\\n    \\n    //move zeroes to end\\n    public void move(int arr[]) {\\n\\t\\tint count=0;\\n\\t\\tfor(int i=0;i<arr.length;i++) {\\n\\t\\t\\tif(arr[i]!=0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp=arr[count];\\n\\t\\t\\t\\tarr[count] = arr[i];\\n\\t\\t\\t\\tarr[i]= temp;\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783161,
                "title": "python3-solved-in-place",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        zeros=0\\n        nums+=[0]\\n        for i in range(len(nums)-1):\\n            if nums[i]==0:\\n                zeros+=1\\n            elif nums[i]==nums[i+1]:\\n                nums[i-zeros]=nums[i]*2\\n                nums[i+1]=0\\n            else:\\n                nums[i-zeros]=nums[i]\\n            \\n        return nums[:len(nums)-1-zeros] + [0]*zeros      \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        zeros=0\\n        nums+=[0]\\n        for i in range(len(nums)-1):\\n            if nums[i]==0:\\n                zeros+=1\\n            elif nums[i]==nums[i+1]:\\n                nums[i-zeros]=nums[i]*2\\n                nums[i+1]=0\\n            else:\\n                nums[i-zeros]=nums[i]\\n            \\n        return nums[:len(nums)-1-zeros] + [0]*zeros      \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783149,
                "title": "java-simple-and-easy-solution-with-explanation",
                "content": "```\\n/**\\n    Time: O(n)\\n*/\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        // multiply nums[i] by 2 and set nums[i + 1] to 0\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] == nums[i-1]) {\\n                nums[i-1] = nums[i-1]*2;\\n                nums[i] = 0;\\n            }\\n        }\\n        int counter = 0;\\n        \\n        // fill beginning elements using new counter with non-zero numbers\\n        for (int i = 0; i < nums.length; i++) {\\n          if (nums[i] != 0) { // ignore zero\\'s\\n            nums[counter] = nums[i];\\n              counter++; // increment counter now that we filled it with an element\\n          }\\n        }\\n\\n        // fill remaining old elements with 0\\n        while (counter < nums.length) {\\n            nums[counter] = 0; \\n            counter++;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n    Time: O(n)\\n*/\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        // multiply nums[i] by 2 and set nums[i + 1] to 0\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] == nums[i-1]) {\\n                nums[i-1] = nums[i-1]*2;\\n                nums[i] = 0;\\n            }\\n        }\\n        int counter = 0;\\n        \\n        // fill beginning elements using new counter with non-zero numbers\\n        for (int i = 0; i < nums.length; i++) {\\n          if (nums[i] != 0) { // ignore zero\\'s\\n            nums[counter] = nums[i];\\n              counter++; // increment counter now that we filled it with an element\\n          }\\n        }\\n\\n        // fill remaining old elements with 0\\n        while (counter < nums.length) {\\n            nums[counter] = 0; \\n            counter++;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3740658,
                "title": "o-n-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]=(2*nums[i]);\\n                nums[i+1]=0;\\n            }else {\\n                continue;\\n            }\\n        }\\n        vector<int> temp;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                temp.push_back(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i<temp.size())\\n            {\\n                nums[i]=temp[i];\\n            }else nums[i]=0;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]=(2*nums[i]);\\n                nums[i+1]=0;\\n            }else {\\n                continue;\\n            }\\n        }\\n        vector<int> temp;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                temp.push_back(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i<temp.size())\\n            {\\n                nums[i]=temp[i];\\n            }else nums[i]=0;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3688505,
                "title": "simple-solution-c-0ms-runtime",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for (int i=0; i<nums.size()-1; i++)\\n        {\\n            if (nums[i]==nums[i+1])\\n            {\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int index=0;\\n        for (int i=0; i<nums.size(); i++)\\n        {\\n            if (nums[i]!=0)\\n            {\\n                nums[index++]=nums[i];\\n            }\\n        }\\n        for (int i=index; i<nums.size(); i++)\\n        {\\n            nums[i]=0;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for (int i=0; i<nums.size()-1; i++)\\n        {\\n            if (nums[i]==nums[i+1])\\n            {\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int index=0;\\n        for (int i=0; i<nums.size(); i++)\\n        {\\n            if (nums[i]!=0)\\n            {\\n                nums[index++]=nums[i];\\n            }\\n        }\\n        for (int i=index; i<nums.size(); i++)\\n        {\\n            nums[i]=0;\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3526982,
                "title": "100-beats-in-time-complexity-99-91-beats-in-space-complexity-c",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:Beats(100%) O(Nlog(N))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    \\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size() - 1; i++) {\\n            if (nums[i] == nums[i+1]) {\\n                nums[i]*=2;\\n                nums[i + 1] = 0;\\n                i++;\\n            }\\n        }\\n        \\n    int count = 0;  // Count of non-zero elements in the array\\n \\n    // Traverse the array. If element encountered is non-zero, then replace the element at index \\'count\\' with this element\\n    for (int i = 0; i < nums.size(); i++) {\\n        if (nums[i] != 0) {\\n            nums[count] = nums[i];\\n            count++;\\n        }\\n    }\\n \\n    // Fill remaining positions in the array with 0\\n    while (count < nums.size()) {\\n        nums[count] = 0;\\n        count++;\\n    }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\n    \\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size() - 1; i++) {\\n            if (nums[i] == nums[i+1]) {\\n                nums[i]*=2;\\n                nums[i + 1] = 0;\\n                i++;\\n            }\\n        }\\n        \\n    int count = 0;  // Count of non-zero elements in the array\\n \\n    // Traverse the array. If element encountered is non-zero, then replace the element at index \\'count\\' with this element\\n    for (int i = 0; i < nums.size(); i++) {\\n        if (nums[i] != 0) {\\n            nums[count] = nums[i];\\n            count++;\\n        }\\n    }\\n \\n    // Fill remaining positions in the array with 0\\n    while (count < nums.size()) {\\n        nums[count] = 0;\\n        count++;\\n    }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3520558,
                "title": "100-fastest-c-solution-for-beginners",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        int n=nums.size();\\n        for(int i=0; i<n-1; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]*= 2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int j=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        int n=nums.size();\\n        for(int i=0; i<n-1; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]*= 2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int j=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3397508,
                "title": "apply-operations-easiest-with-c-in-0ms-runtime",
                "content": "\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int index=0, n=nums.size();\\n        for(int i=0; i<n-1; i++)\\n            if(nums[i] == nums[i+1])\\n                nums[i] *= 2, nums[i+1] = 0;\\n        vector<int>ans(n, 0);\\n        for(auto i:nums)\\n            if(i != 0)\\n                ans[index++] = i;\\n        return ans;\\n    }\\n};\\n```\\nPlease UPVOTE if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int index=0, n=nums.size();\\n        for(int i=0; i<n-1; i++)\\n            if(nums[i] == nums[i+1])\\n                nums[i] *= 2, nums[i+1] = 0;\\n        vector<int>ans(n, 0);\\n        for(auto i:nums)\\n            if(i != 0)\\n                ans[index++] = i;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3348892,
                "title": "apply-operations-to-an-array-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int i, count=0;\\n        for(i=0 ; i<nums.size()-1 ; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0; \\n            }\\n        }\\n        i=0;\\n        while(i<nums.size())\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n                nums.erase(nums.begin()+i);\\n            }\\n            else\\n            {\\n                i++;\\n            }\\n        }\\n        nums.insert(nums.begin()+nums.size(), count, 0);\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int i, count=0;\\n        for(i=0 ; i<nums.size()-1 ; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0; \\n            }\\n        }\\n        i=0;\\n        while(i<nums.size())\\n        {\\n            if(nums[i]==0)\\n            {\\n                count++;\\n                nums.erase(nums.begin()+i);\\n            }\\n            else\\n            {\\n                i++;\\n            }\\n        }\\n        nums.insert(nums.begin()+nums.size(), count, 0);\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3330872,
                "title": "java-100-speed-bruteforce",
                "content": "# Intuition\\nChange the array according to instruction and shift the zeroes to the end.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        //First we will apply:- If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. \\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if (nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        int count = 0;\\n        //Then we will shift all zeroes to the end.\\n        for(int i = 0;i<nums.length;i++){\\n            if(nums[i] != 0){\\n                int temp = nums[count];\\n                nums[count] = nums[i];\\n                nums[i] = temp;\\n                count++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        //First we will apply:- If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. \\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if (nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        int count = 0;\\n        //Then we will shift all zeroes to the end.\\n        for(int i = 0;i<nums.length;i++){\\n            if(nums[i] != 0){\\n                int temp = nums[count];\\n                nums[count] = nums[i];\\n                nums[i] = temp;\\n                count++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329964,
                "title": "o-n-o-1-brute-force-approach-made-easy",
                "content": "# \\uD83D\\uDE09Please upvote it motivates me\\uD83D\\uDE09\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# \\uD83D\\uDE09Please upvote it motivates me\\uD83D\\uDE09\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        //Doing as stated in question\\n        for(int i=0; i<n-1; i++)\\n        {\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = 2*nums[i];\\n                nums[i+1] = 0;\\n            }\\n        }\\n\\n        int i=0,j=0;\\n        \\n        //Code to move all 0 to end via two pointers.\\n        while(i<n)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                swap(nums[j],nums[i]);\\n                j++;\\n            }\\n            i++;\\n            \\n        }\\n\\n        //\\uD83D\\uDE09Before returning the result Upvote this solution.\\uD83D\\uDE09\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        //Doing as stated in question\\n        for(int i=0; i<n-1; i++)\\n        {\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = 2*nums[i];\\n                nums[i+1] = 0;\\n            }\\n        }\\n\\n        int i=0,j=0;\\n        \\n        //Code to move all 0 to end via two pointers.\\n        while(i<n)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                swap(nums[j],nums[i]);\\n                j++;\\n            }\\n            i++;\\n            \\n        }\\n\\n        //\\uD83D\\uDE09Before returning the result Upvote this solution.\\uD83D\\uDE09\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3226281,
                "title": "two-pointers-simple-and-easy-approach-java-solution",
                "content": "# Approach\\n  Two Pointers Approach ..\\n\\n# Complexity\\n- Time complexity:\\n  O(n)\\n\\n- Space complexity:\\n  O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int len = nums.length;\\n\\n        // This part is performing the operation given in the question\\n        for(int i=0;i<len-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n\\n        // This part is shifting all the 0\\'s\\' to the end !!\\n        int left=0,right=1,temp=0;\\n        while(left<len && right<len){\\n            if(nums[left]==0 && nums[right]!=0){\\n                temp = nums[left];\\n                nums[left++] = nums[right];\\n                nums[right++] = temp;\\n            }\\n            else if(nums[left]==0 && nums[right]==0){\\n                right++;\\n            }\\n            else{\\n                left++;\\n                right++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int len = nums.length;\\n\\n        // This part is performing the operation given in the question\\n        for(int i=0;i<len-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n\\n        // This part is shifting all the 0\\'s\\' to the end !!\\n        int left=0,right=1,temp=0;\\n        while(left<len && right<len){\\n            if(nums[left]==0 && nums[right]!=0){\\n                temp = nums[left];\\n                nums[left++] = nums[right];\\n                nums[right++] = temp;\\n            }\\n            else if(nums[left]==0 && nums[right]==0){\\n                right++;\\n            }\\n            else{\\n                left++;\\n                right++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3166047,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int ln= nums.size();\\n        for(int i=0;i<ln-1;i++){\\n            if(nums[i]== nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        \\n        int k=0;\\n        vector<int> ans(ln,0);\\n        for(int i=0;i<ln;i++){\\n            if(nums[i]!= 0)ans[k++]= nums[i];\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int ln= nums.size();\\n        for(int i=0;i<ln-1;i++){\\n            if(nums[i]== nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        \\n        int k=0;\\n        vector<int> ans(ln,0);\\n        for(int i=0;i<ln;i++){\\n            if(nums[i]!= 0)ans[k++]= nums[i];\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3137035,
                "title": "100-c-simple-solutions",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums)\\n    {\\n        vector<int> ret=nums;\\n        vector<int> r(nums.size(),0);\\n        for(int j=0;j<ret.size()-1;j++)\\n        {\\n            if(ret[j]==ret[j+1])\\n            {\\n                ret[j]=2*ret[j];\\n                ret[j+1]=0;\\n            }\\n        }\\n        int k=0;\\n        for(auto it:ret)\\n        {\\n            if(it!=0)\\n            {    \\n                r[k]=it;\\n                k++;\\n            }\\n        }\\n        return r;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums)\\n    {\\n        vector<int> ret=nums;\\n        vector<int> r(nums.size(),0);\\n        for(int j=0;j<ret.size()-1;j++)\\n        {\\n            if(ret[j]==ret[j+1])\\n            {\\n                ret[j]=2*ret[j];\\n                ret[j+1]=0;\\n            }\\n        }\\n        int k=0;\\n        for(auto it:ret)\\n        {\\n            if(it!=0)\\n            {    \\n                r[k]=it;\\n                k++;\\n            }\\n        }\\n        return r;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3103499,
                "title": "efficient-solution-without-sorting-generate-new-array",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    const res = [];\\n    let i = 0;\\n\\n    while (i < nums.length - 1) {\\n        if (nums[i] === 0) {\\n            i++;\\n        } else if (nums[i] === nums[i + 1]) {\\n            res.push(nums[i] * 2);\\n            i += 2\\n        } else {\\n            res.push(nums[i]);\\n            i++;\\n        }\\n    }\\n    if (i === nums.length - 1 && nums[i] !== 0) {\\n        res.push(nums[i]);\\n    }\\n\\n    return [...res, ...Array(nums.length - res.length).fill(0)];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    const res = [];\\n    let i = 0;\\n\\n    while (i < nums.length - 1) {\\n        if (nums[i] === 0) {\\n            i++;\\n        } else if (nums[i] === nums[i + 1]) {\\n            res.push(nums[i] * 2);\\n            i += 2\\n        } else {\\n            res.push(nums[i]);\\n            i++;\\n        }\\n    }\\n    if (i === nums.length - 1 && nums[i] !== 0) {\\n        res.push(nums[i]);\\n    }\\n\\n    return [...res, ...Array(nums.length - res.length).fill(0)];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2938950,
                "title": "c-easy-solution-pointer-approach",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i+1<nums.size();++i){\\n            if(nums[i]==nums[i+1]){\\n                    nums[i]=nums[i]*2;\\n                    nums[i+1]=0;\\n                }\\n            \\n        }\\n        int j=0;\\n        for(auto l :nums){\\n            if(l!=0){\\n                    nums[j++]=l;\\n            }\\n        }\\n        while(j<nums.size()){\\n            nums[j++]=0;\\n        }\\n        return nums;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i+1<nums.size();++i){\\n            if(nums[i]==nums[i+1]){\\n                    nums[i]=nums[i]*2;\\n                    nums[i+1]=0;\\n                }\\n            \\n        }\\n        int j=0;\\n        for(auto l :nums){\\n            if(l!=0){\\n                    nums[j++]=l;\\n            }\\n        }\\n        while(j<nums.size()){\\n            nums[j++]=0;\\n        }\\n        return nums;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2928717,
                "title": "simple-straightforward-o-n-o-1",
                "content": "# Intuition\\n2 step solution:\\nStep 1: Update \"nums\" according to the rule.\\nStep 2: Apply the logic of \"Move Zeroes\".\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n\\n        for(int i = 0; i<nums.size()-1; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] = nums[i]*2;      // Updating accordibng to rule\\n                nums[i+1] = nums[i+1]*0;\\n            }\\n        }\\n        \\n// Now Shifting Zero =>\\n\\n        int NonZeroIndex=0;    //--> Starting index\\n        for(int j=0; j<nums.size(); j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n               swap(nums[j], nums[NonZeroIndex]);\\n                   NonZeroIndex++;\\n            }\\n        } \\n            return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n\\n        for(int i = 0; i<nums.size()-1; i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] = nums[i]*2;      // Updating accordibng to rule\\n                nums[i+1] = nums[i+1]*0;\\n            }\\n        }\\n        \\n// Now Shifting Zero =>\\n\\n        int NonZeroIndex=0;    //--> Starting index\\n        for(int j=0; j<nums.size(); j++)\\n        {\\n            if(nums[j]!=0)\\n            {\\n               swap(nums[j], nums[NonZeroIndex]);\\n                   NonZeroIndex++;\\n            }\\n        } \\n            return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2916338,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i = 0 , j = 0 ; i < nums.length ; i++){\\n            if(i + 1 < nums.length && nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n            \\n            if(nums[i] != 0){\\n                swap(nums , i , j);\\n                j++;\\n            }\\n        }\\n        \\n        return nums;\\n    }\\n    \\n    public void swap(int[] nums , int i , int j){\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i = 0 , j = 0 ; i < nums.length ; i++){\\n            if(i + 1 < nums.length && nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2864667,
                "title": "python-o-n-arr-0-len-nums-len-arr",
                "content": "https://leetcode.com/submissions/detail/852625901/\\n```\\nRuntime: 115 ms, faster than 42.13% of Python3 online submissions for Apply Operations to an Array.\\nMemory Usage: 14.1 MB, less than 65.28% of Python3 online submissions for Apply Operations to an Array.\\n```\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        l, set_zero, nums2 = len(nums), False, []\\n        for i in range(l-1):\\n            n1 = 0 if set_zero else nums[i]\\n            n2 = nums[i+1]\\n            \\n            if n1!=n2:\\n                set_zero = False\\n                if n1: nums2.append(n1)\\n            else:\\n                set_zero = True\\n                if n1: nums2.append(n1*2)\\n                    \\n        n3 = [0] if set_zero else nums[-1:]\\n        return nums2 + n3 + [0]*(l-len(nums2)-1)\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nRuntime: 115 ms, faster than 42.13% of Python3 online submissions for Apply Operations to an Array.\\nMemory Usage: 14.1 MB, less than 65.28% of Python3 online submissions for Apply Operations to an Array.\\n```\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        l, set_zero, nums2 = len(nums), False, []\\n        for i in range(l-1):\\n            n1 = 0 if set_zero else nums[i]\\n            n2 = nums[i+1]\\n            \\n            if n1!=n2:\\n                set_zero = False\\n                if n1: nums2.append(n1)\\n            else:\\n                set_zero = True\\n                if n1: nums2.append(n1*2)\\n                    \\n        n3 = [0] if set_zero else nums[-1:]\\n        return nums2 + n3 + [0]*(l-len(nums2)-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2818525,
                "title": "javascript-one-loop-solution",
                "content": "```\\nfunction applyOperations(nums: number[]): number[] {\\n    const arr = new Array(nums.length).fill(0);\\n    let left = 0;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        let cur = nums[i];\\n\\n        if (cur === 0) {\\n            continue;\\n        }\\n\\n        if (cur === nums[i + 1]) {\\n            arr[left] = 2 * cur;\\n            i++;\\n        } else {\\n            arr[left] = cur;\\n        }\\n\\n        left++;\\n    }\\n\\n    return arr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction applyOperations(nums: number[]): number[] {\\n    const arr = new Array(nums.length).fill(0);\\n    let left = 0;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        let cur = nums[i];\\n\\n        if (cur === 0) {\\n            continue;\\n        }\\n\\n        if (cur === nums[i + 1]) {\\n            arr[left] = 2 * cur;\\n            i++;\\n        } else {\\n            arr[left] = cur;\\n        }\\n\\n        left++;\\n    }\\n\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2814446,
                "title": "python-easy-simple",
                "content": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        \\n        for i in range(len(nums)-1):\\n            \\n            if nums[i]==nums[i+1]:\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n                \\n                \\n        for i in range(len(nums)):\\n            if nums[i]==0:\\n                nums.remove(0)\\n                nums.append(0)\\n        \\n        return nums    \\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        \\n        for i in range(len(nums)-1):\\n            \\n            if nums[i]==nums[i+1]:\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n                \\n                \\n        for i in range(len(nums)):\\n            if nums[i]==0:\\n                nums.remove(0)\\n                nums.append(0)\\n        \\n        return nums    \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2813323,
                "title": "java-linear-tc-without-extra-space-1ms",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n       \\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int index=0;\\n        for(int i=0;i<nums.length;i++){\\n          if(nums[i]!=0){\\n            nums[index]=nums[i];\\n            index++;\\n          }\\n        }\\n        for(int i =index;i<nums.length;i++) {\\n            nums[i]=0;\\n        }\\n        return nums;\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/a9eaefce-2922-466d-8b6e-333b1e9aa719_1668415840.7282145.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n       \\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int index=0;\\n        for(int i=0;i<nums.length;i++){\\n          if(nums[i]!=0){\\n            nums[index]=nums[i];\\n            index++;\\n          }\\n        }\\n        for(int i =index;i<nums.length;i++) {\\n            nums[i]=0;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2812572,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length-1; i++) {\\n            if (nums[i+1] == nums[i]) {\\n                nums[i] *=2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int index = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                nums[index ++] = nums[i];\\n            }\\n        }\\n        for (int i = index; i < nums.length; i++) {\\n            nums[i] = 0;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length-1; i++) {\\n            if (nums[i+1] == nums[i]) {\\n                nums[i] *=2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int index = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                nums[index ++] = nums[i];\\n            }\\n        }\\n        for (int i = index; i < nums.length; i++) {\\n            nums[i] = 0;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807890,
                "title": "easy-c-no-need-to-over-think-very-simple-and-very-basic",
                "content": "\\n```\\n// I am not into 100% faster but I write code ki mujhe khud ko dobara padne mei ekbar mei samjh ajana chaiye maine kia kiya tha\\n\\nclass Solution {\\nprivate:\\n    void push_zeros_to_end(std::vector<int>& arr){\\n            std::stable_partition(arr.begin(),\\n                arr.end(),\\n                    [](int n) { return n != 0; });\\n    }\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n       \\n        int n = nums.size();\\n        vector<int>a;\\n        \\n        for(int i=0; i<n-1; i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = nums[i]*2;\\n                nums[i+1] = 0;\\n           }\\n        }\\n        \\n        push_zeros_to_end(nums);\\n        return nums;\\n    }\\n};\\n\\n//Second type similar approach just made the code a bit simple\\nclass Solution {\\nprivate:\\n    void push_zeros_to_end(vector<int>&nums){\\n        int k = 0;\\n        for(int i=0; i<nums.size(); i++){\\n            if(nums[i] != 0){\\n                swap(nums[i], nums[k]);\\n                k++;\\n            }\\n        }\\n    }\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n       \\n        int n = nums.size();\\n        vector<int>a;\\n        \\n        for(int i=0; i<n-1; i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = nums[i]*2;\\n                nums[i+1] = 0;\\n           }\\n        }\\n        \\n        push_zeros_to_end(nums);\\n        return nums;\\n    }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\nprivate:\\n    void push_zeros_to_end(std::vector<int>& arr){\\n            std::stable_partition(arr.begin(),\\n                arr.end(),\\n                    [](int n) { return n != 0; }",
                "codeTag": "Java"
            },
            {
                "id": 2804287,
                "title": "apply-operations-to-an-array-solution-java",
                "content": "class Solution {\\n  public int[] applyOperations(int[] nums) {\\n    int[] ans = new int[nums.length];\\n\\n    for (int i = 0; i + 1 < nums.length; ++i)\\n      if (nums[i] == nums[i + 1]) {\\n        nums[i] *= 2;\\n        nums[i + 1] = 0;\\n      }\\n\\n    int i = 0;\\n    for (final int num : nums)\\n      if (num > 0)\\n        ans[i++] = num;\\n\\n    return ans;\\n  }\\n}\\n",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution {\\n  public int[] applyOperations(int[] nums) {\\n    int[] ans = new int[nums.length];\\n\\n    for (int i = 0; i + 1 < nums.length; ++i)\\n      if (nums[i] == nums[i + 1]) {\\n        nums[i] *= 2;\\n        nums[i + 1] = 0;\\n      }",
                "codeTag": "Java"
            },
            {
                "id": 2799612,
                "title": "java-100-faster-easy-solution",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=2*nums[i];\\n                nums[i+1]=0;\\n                i++;\\n            }\\n        }\\n        int[] arr=new int[nums.length];\\n        int j=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                arr[j]=nums[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=2*nums[i];\\n                nums[i+1]=0;\\n                i++;\\n            }\\n        }\\n        int[] arr=new int[nums.length];\\n        int j=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                arr[j]=nums[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2790481,
                "title": "best-python-solution-w-o-using-any-space-at-all-not-even-for-output-o-n-time",
                "content": "[Runtime: **47 ms**, faster than **99.02%** of Python3 online submissions for Apply Operations to an Array.\\nMemory Usage: **14.1 MB**, less than **96.64%** of Python3 online submissions for Apply Operations to an Array.](https://leetcode.com/submissions/detail/838946730)\\n\\n**[Explanation in Code-Comments]**\\n\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        \\n        # 1) Optimal (OTG Yield Non-Zero Vals & Yield Zeroes in the End): TC = O(n); SC = O(1)\\n\\n        \"\"\"\\n        n = len(nums)\\n        non_zeroes = 0\\n\\n        # Go through all till last-1:\\n        for i in range(n-1):\\n            if (num := nums[i]) == nums[i+1]:  # `If nums[i] == nums[i+1]`\\n                if num:  # (only if num != 0)\\n                    yield num*2  # `multiply nums[i] by 2`\\n                    nums[i+1] = 0  # `set nums[i+1] to 0`\\n                    non_zeroes += 1\\n            else:\\n                if num:  # (only if num != 0)\\n                    yield num\\n                    non_zeroes += 1\\n        # Last one:\\n        if num := nums[-1]:  # (only if num != 0)\\n            yield num\\n            non_zeroes += 1\\n\\n        # Remaining Zeroes:\\n        for _ in range(n-non_zeroes):\\n            yield 0\\n        \"\"\"\\n\\n        # Shortened:\\n\\n        n = len(nums)\\n        non_zeroes = 0\\n\\n        for i in range(n):\\n            if num := nums[i]:  # (only if num != 0)\\n                # `Apply Operations`:\\n                try:\\n                    if num == nums[i+1]:  # `If nums[i] == nums[i+1]`\\n                        num *= 2  # `multiply nums[i] by 2`\\n                        nums[i+1] = 0  # `set nums[i+1] to 0`\\n                except IndexError:  # for last i, `nums[i+1]` will raise IndexError\\n                    pass  # (we don\\'t have to apply any op for the last num)\\n                yield num\\n                non_zeroes += 1\\n\\n        # Remaining Zeroes:\\n        for _ in range(n-non_zeroes):\\n            yield 0\\n```\\n\\nUnderstood? \\uD83D\\uDE01\\n[Link](https://github.com/samyak1409/DSA) to the GitHub Repository for similar explanations. Star it if you like it. :)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        \\n        # 1) Optimal (OTG Yield Non-Zero Vals & Yield Zeroes in the End): TC = O(n); SC = O(1)\\n\\n        \"\"\"\\n        n = len(nums)\\n        non_zeroes = 0\\n\\n        # Go through all till last-1:\\n        for i in range(n-1):\\n            if (num := nums[i]) == nums[i+1]:  # `If nums[i] == nums[i+1]`\\n                if num:  # (only if num != 0)\\n                    yield num*2  # `multiply nums[i] by 2`\\n                    nums[i+1] = 0  # `set nums[i+1] to 0`\\n                    non_zeroes += 1\\n            else:\\n                if num:  # (only if num != 0)\\n                    yield num\\n                    non_zeroes += 1\\n        # Last one:\\n        if num := nums[-1]:  # (only if num != 0)\\n            yield num\\n            non_zeroes += 1\\n\\n        # Remaining Zeroes:\\n        for _ in range(n-non_zeroes):\\n            yield 0\\n        \"\"\"\\n\\n        # Shortened:\\n\\n        n = len(nums)\\n        non_zeroes = 0\\n\\n        for i in range(n):\\n            if num := nums[i]:  # (only if num != 0)\\n                # `Apply Operations`:\\n                try:\\n                    if num == nums[i+1]:  # `If nums[i] == nums[i+1]`\\n                        num *= 2  # `multiply nums[i] by 2`\\n                        nums[i+1] = 0  # `set nums[i+1] to 0`\\n                except IndexError:  # for last i, `nums[i+1]` will raise IndexError\\n                    pass  # (we don\\'t have to apply any op for the last num)\\n                yield num\\n                non_zeroes += 1\\n\\n        # Remaining Zeroes:\\n        for _ in range(n-non_zeroes):\\n            yield 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2790478,
                "title": "c-solution-o-n-time-complexity",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n    // Traverse the array and check the condition\\n        for(int i=0; i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n    // Using two pointer approach shift the zeroes at last    \\n        int j = 0;\\n        for(int i=0; i<nums.size(); i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n    // Traverse the array and check the condition\\n        for(int i=0; i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n    // Using two pointer approach shift the zeroes at last    \\n        int j = 0;\\n        for(int i=0; i<nums.size(); i++){\\n            if(nums[i]!=0){\\n                swap(nums[i],nums[j]);\\n                j++;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2790147,
                "title": "beats-100-speed-and-memory-two-pointers",
                "content": "\\n\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n        for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] == nums[i + 1]) {\\n            nums[i] = nums[i] * 2;\\n            nums[i + 1] = 0\\n        }\\n    }\\n    let lastNonZeroAt = 0; \\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] != 0) {\\n            nums[lastNonZeroAt++] = nums[i];\\n        }\\n    }\\n    for (let i = lastNonZeroAt; i < nums.length; i++) {\\n        nums[i] = 0;\\n    }\\n    return nums\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n        for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] == nums[i + 1]) {\\n            nums[i] = nums[i] * 2;\\n            nums[i + 1] = 0\\n        }\\n    }\\n    let lastNonZeroAt = 0; \\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] != 0) {\\n            nums[lastNonZeroAt++] = nums[i];\\n        }\\n    }\\n    for (let i = lastNonZeroAt; i < nums.length; i++) {\\n        nums[i] = 0;\\n    }\\n    return nums\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2788094,
                "title": "go-solution-faster-than-100",
                "content": "\\n# Code\\n```\\nfunc applyOperations(nums []int) []int {\\n    length := len(nums)\\n    res := make([]int, 0)\\n\\n    for i:=1; i<length; i++ {\\n        if nums[i] == nums[i-1] {\\n            nums[i-1] *= 2\\n            nums[i] = 0\\n        }\\n    }\\n\\n    for _, num := range nums {\\n        if num != 0 { res = append(res, num) }\\n    }\\n\\n    for _, num := range nums {\\n        if num == 0 { res = append(res, num) }\\n    }\\n\\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc applyOperations(nums []int) []int {\\n    length := len(nums)\\n    res := make([]int, 0)\\n\\n    for i:=1; i<length; i++ {\\n        if nums[i] == nums[i-1] {\\n            nums[i-1] *= 2\\n            nums[i] = 0\\n        }\\n    }\\n\\n    for _, num := range nums {\\n        if num != 0 { res = append(res, num) }\\n    }\\n\\n    for _, num := range nums {\\n        if num == 0 { res = append(res, num) }\\n    }\\n\\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2787793,
                "title": "java-100-faster-o-n-solution",
                "content": "# Complexity\\n- Time complexity: O(N + N) = O(2N) => O(N).\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        //applying operations\\n        for (int i = 1; i < nums.length; i++) {\\n            int prev = i - 1;\\n            if (nums[prev] == nums[i] && nums[prev] != 0) {\\n                nums[prev] += nums[prev];\\n                nums[i] = 0;\\n            }\\n        }\\n        //moving non-zero numbers to the beginning\\n        //and making moved index number equalt to 0\\n        int idx = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                int temp = nums[i];\\n                nums[i] = 0;\\n                nums[idx++] = temp;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        //applying operations\\n        for (int i = 1; i < nums.length; i++) {\\n            int prev = i - 1;\\n            if (nums[prev] == nums[i] && nums[prev] != 0) {\\n                nums[prev] += nums[prev];\\n                nums[i] = 0;\\n            }\\n        }\\n        //moving non-zero numbers to the beginning\\n        //and making moved index number equalt to 0\\n        int idx = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] != 0) {\\n                int temp = nums[i];\\n                nums[i] = 0;\\n                nums[idx++] = temp;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2785767,
                "title": "java-easy-solution-tc-o-n-sc-o-1",
                "content": "\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n            int z=0;\\n            for(int i=0;i<nums.length;i++){\\n                if(nums[i]!=0){\\n                    int t=nums[z];\\n                    nums[z]=nums[i];\\n                    nums[i]=t;\\n                    z++;\\n                }\\n            }\\n            return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n            int z=0;\\n            for(int i=0;i<nums.length;i++){\\n                if(nums[i]!=0){\\n                    int t=nums[z];\\n                    nums[z]=nums[i];\\n                    nums[i]=t;\\n                    z++;\\n                }\\n            }\\n            return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2785278,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n            else:\\n                continue\\n        j1=0\\n        for i in range(len(nums)):\\n            if nums[i]!=0:\\n                nums[j1],nums[i]=nums[i],nums[j1]\\n                j1+=1\\n        return nums\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n            else:\\n                continue\\n        j1=0\\n        for i in range(len(nums)):\\n            if nums[i]!=0:\\n                nums[j1],nums[i]=nums[i],nums[j1]\\n                j1+=1\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2784290,
                "title": "c-brute-force-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> shift(vector<int> &nums){\\n        int n= nums.size();\\n        vector<int> temp(n, 0);\\n        int front=0, back= n-1;\\n        for(auto itr: nums){\\n            if(itr==0){\\n                temp[back]= itr;\\n                back--;\\n            }\\n            else{\\n                temp[front]= itr;\\n                front++;\\n            }\\n        }\\n        \\n        return temp;\\n    }\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int itr=0; itr<nums.size()-1; itr++){\\n            if(nums[itr]==nums[itr+1]){\\n                nums[itr]*=2;\\n                nums[itr+1]=0;\\n            }\\n        }\\n        \\n        nums= shift(nums);\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> shift(vector<int> &nums){\\n        int n= nums.size();\\n        vector<int> temp(n, 0);\\n        int front=0, back= n-1;\\n        for(auto itr: nums){\\n            if(itr==0){\\n                temp[back]= itr;\\n                back--;\\n            }\\n            else{\\n                temp[front]= itr;\\n                front++;\\n            }\\n        }\\n        \\n        return temp;\\n    }\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int itr=0; itr<nums.size()-1; itr++){\\n            if(nums[itr]==nums[itr+1]){\\n                nums[itr]*=2;\\n                nums[itr+1]=0;\\n            }\\n        }\\n        \\n        nums= shift(nums);\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2784164,
                "title": "ok",
                "content": "```\\nvector<int> applyOperations(vector<int>& n)\\n{\\n\\tfor(int i{}; i+1<size(n); ++i)\\n\\t\\tif(n[i]==n[i+1]) n[i]<<=1, n[i+1]=0;       \\n\\tstable_partition(begin(n), end(n), [](auto & x){  return x;  });\\n\\treturn n;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nvector<int> applyOperations(vector<int>& n)\\n{\\n\\tfor(int i{}; i+1<size(n); ++i)\\n\\t\\tif(n[i]==n[i+1]) n[i]<<=1, n[i+1]=0;       \\n\\tstable_partition(begin(n), end(n), [](auto & x){  return x;  });\\n\\treturn n;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2783807,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\n\\t\\tvector<int> applyOperations(vector<int>& nums) {\\n\\t\\t\\tvector<int>v;\\n\\t\\t\\tvector<int>v1;\\n\\t\\t\\tint cnt=0, cn=0;\\n\\t\\t\\tfor(int i=0; i<nums.size()-1; i++){\\n\\t\\t\\t\\tif(nums[i]==nums[i+1]){\\n\\t\\t\\t\\t\\tnums[i+1]=0;\\n\\t\\t\\t\\t\\tnums[i]=2*nums[i];\\n\\t\\t\\t\\t\\tv.push_back(nums[i]);\\n\\t\\t\\t\\t\\tcnt++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tv.push_back(nums[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tv.push_back(nums[nums.size()-1]);\\n\\t\\t\\twhile(cnt--){v.push_back(0);}\\n\\t\\t\\t//  for(int i=0; i<v.size(); i++){\\n\\t\\t\\t//     cout<<v[i]<<\" \";\\n\\t\\t\\t// }cout<<endl;\\n\\t\\t\\tfor(int i=0; i<v.size(); i++){\\n\\t\\t\\t\\tif(v[i]==0){cn++;}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tv1.push_back(v[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\twhile(cn--){v1.push_back(0);}\\n\\t\\t\\tif(nums.size()<v1.size()){\\n\\t\\t\\t\\twhile(nums.size()!=v1.size()){v1.pop_back();}\\n\\t\\t\\t}\\n\\t\\t\\treturn v1;\\n\\t\\t}\\n\\t};\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\n\\t\\tvector<int> applyOperations(vector<int>& nums) {\\n\\t\\t\\tvector<int>v;\\n\\t\\t\\tvector<int>v1;\\n\\t\\t\\tint cnt=0, cn=0;\\n\\t\\t\\tfor(int i=0; i<nums.size()-1; i++){\\n\\t\\t\\t\\tif(nums[i]==nums[i+1]){\\n\\t\\t\\t\\t\\tnums[i+1]=0;\\n\\t\\t\\t\\t\\tnums[i]=2*nums[i];\\n\\t\\t\\t\\t\\tv.push_back(nums[i]);\\n\\t\\t\\t\\t\\tcnt++;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2783683,
                "title": "faster-than-100-00-easy-c-solution",
                "content": "**Time complexity - O(n)**\\n**space complexity - O(n)**\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>result;\\n      for(int i=0;i<n-1;i++)\\n      {\\n          if(nums[i]==nums[i+1])\\n          {\\n              nums[i]=2*nums[i];\\n              nums[i+1]=0;\\n           } \\n       }\\n        int count0=0;\\n       for(int i=0;i<n;i++)\\n       {\\n           if(nums[i]==0)\\n               count0++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]!=0)\\n                result.push_back(nums[i]);\\n         }\\n        while(count0--)\\n            result.push_back(0);\\n        \\n        return result;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>result;\\n      for(int i=0;i<n-1;i++)\\n      {\\n          if(nums[i]==nums[i+1])\\n          {\\n              nums[i]=2*nums[i];\\n              nums[i+1]=0;\\n           } \\n       }\\n        int count0=0;\\n       for(int i=0;i<n;i++)\\n       {\\n           if(nums[i]==0)\\n               count0++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]!=0)\\n                result.push_back(nums[i]);\\n         }\\n        while(count0--)\\n            result.push_back(0);\\n        \\n        return result;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783586,
                "title": "beginner-friendly-c-easy-explanation",
                "content": "/* \\nApproach : \\n1 : iterate through array from 1st index and wherever you find nums[i]==nums[i-1], store twice of nums[i-1] at (i-1)th index and assign 0 to nums[i] i.e., nums[i] = 0\\n2 : declare one new vector to store final answer i.e., vector<int> ans;\\n3 : iterate through nums and whenever you come across any non zero number, push_back it into \\'ans\\'\\n4 : now take one temporary variable and declare it as tmp=nums.size() - ans.size(); It will give you no of zeroes you need to push_back into ans. push_back that much zeroes into ans.\\n5 : return ans\\n */\\n \\n ```\\n class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int i=1;\\n        int n=nums.size();\\n        while(i<n){\\n            if(nums[i]==nums[i-1]){\\n                nums[i-1] = 2*nums[i-1];\\n                nums[i] = 0;\\n            }\\n            i++;\\n        }\\n        vector<int> ans;\\n        i=0;\\n        while(i<n){\\n            if(nums[i]!=0) ans.push_back(nums[i]);\\n            i++;\\n        }\\n        int tmp = n-ans.size();\\n        while(tmp--){\\n            ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n ```\\n \\n Upvote it if you find the answer helpful",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\n class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int i=1;\\n        int n=nums.size();\\n        while(i<n){\\n            if(nums[i]==nums[i-1]){\\n                nums[i-1] = 2*nums[i-1];\\n                nums[i] = 0;\\n            }\\n            i++;\\n        }\\n        vector<int> ans;\\n        i=0;\\n        while(i<n){\\n            if(nums[i]!=0) ans.push_back(nums[i]);\\n            i++;\\n        }\\n        int tmp = n-ans.size();\\n        while(tmp--){\\n            ans.push_back(0);\\n        }\\n        return ans;\\n    }\\n};\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 2783539,
                "title": "c-o-1-in-place",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        for(int i = 0; i < n - 1; i++){\\n            if(nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n\\n        int i = 0, j = 0;\\n        while(j < nums.size()){\\n            if(nums[j] == 0){\\n                j++;\\n            }else{\\n                swap(nums[i], nums[j]);\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        for(int i = 0; i < n - 1; i++){\\n            if(nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n\\n        int i = 0, j = 0;\\n        while(j < nums.size()){\\n            if(nums[j] == 0){\\n                j++;\\n            }else{\\n                swap(nums[i], nums[j]);\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783535,
                "title": "c-very-easy-solution-using-stl-and-function",
                "content": "**Kindly upvote it if you Like it\\uD83D\\uDE07!**\\n**Thank You\\uD83D\\uDE0A!!!**\\n\\n```\\nclass Solution {\\n    \\n    //Function to move zeroes to the end of array\\n    void moveZeroes(vector<int>& nums)\\n    {\\n\\tfor(int i=0,next=0;i<nums.size();++i)\\n\\t\\tif(nums[i])\\n\\t\\t\\tswap(nums[i],nums[next++]); //Used C++ STL \\uD83D\\uDE09\\n    }\\n    \\npublic:\\n    \\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size()-1; i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = 2 * nums[i]; \\n                nums[i+1] = 0;\\n            \\n            }\\n        }\\n        \\n        moveZeroes(nums);\\n        \\n        return nums;\\n        \\n    }    \\n};\\n\\n```\\n\\n![image](https://assets.leetcode.com/users/images/1553b682-49de-4cf7-989a-78edc2024fa1_1667710702.9282331.png)\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    \\n    //Function to move zeroes to the end of array\\n    void moveZeroes(vector<int>& nums)\\n    {\\n\\tfor(int i=0,next=0;i<nums.size();++i)\\n\\t\\tif(nums[i])\\n\\t\\t\\tswap(nums[i],nums[next++]); //Used C++ STL \\uD83D\\uDE09\\n    }\\n    \\npublic:\\n    \\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size()-1; i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = 2 * nums[i]; \\n                nums[i+1] = 0;\\n            \\n            }\\n        }\\n        \\n        moveZeroes(nums);\\n        \\n        return nums;\\n        \\n    }    \\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783417,
                "title": "2460-apply-operations-to-an-array",
                "content": "\\t\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<int> applyOperations(vector<int>& nums) {\\n\\n\\t\\t\\t\\tfor(int i = 0; i < nums.size() - 1; i++) {\\n\\n\\t\\t\\t\\t\\tif(nums[i] == nums[i + 1]) \\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tnums[i] *= 2;\\n\\t\\t\\t\\t\\t\\tnums[i + 1] = 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfill(remove(nums.begin(), nums.end(), 0),nums.end(),0);\\n\\n\\t\\t\\t\\treturn nums;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<int> applyOperations(vector<int>& nums) {\\n\\n\\t\\t\\t\\tfor(int i = 0; i < nums.size() - 1; i++) {\\n\\n\\t\\t\\t\\t\\tif(nums[i] == nums[i + 1]) \\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tnums[i] *= 2;\\n\\t\\t\\t\\t\\t\\tnums[i + 1] = 0;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2783385,
                "title": "rust-2-steps-o-n",
                "content": "# Intuition\\nstep 1: set 0.\\nstep 2: move 0 to end.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: \\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn apply_operations(nums: Vec<i32>) -> Vec<i32> {\\n        let mut nums = nums;\\n        let n = nums.len();\\n        let mut i = 0;\\n        while i < n - 1 {\\n            if nums[i] == nums[i+1] {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n                i += 2;\\n                continue\\n            }\\n            i += 1\\n        }\\n        let mut res = vec![];\\n        let mut zero_cnt = 0;\\n        for v in nums {\\n            if v == 0 {\\n                zero_cnt += 1;\\n                continue\\n            }\\n            res.push(v);\\n        }\\n        let zeros = [0].repeat(zero_cnt);\\n        res.extend(zeros);\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn apply_operations(nums: Vec<i32>) -> Vec<i32> {\\n        let mut nums = nums;\\n        let n = nums.len();\\n        let mut i = 0;\\n        while i < n - 1 {\\n            if nums[i] == nums[i+1] {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n                i += 2;\\n                continue\\n            }\\n            i += 1\\n        }\\n        let mut res = vec![];\\n        let mut zero_cnt = 0;\\n        for v in nums {\\n            if v == 0 {\\n                zero_cnt += 1;\\n                continue\\n            }\\n            res.push(v);\\n        }\\n        let zeros = [0].repeat(zero_cnt);\\n        res.extend(zeros);\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2783202,
                "title": "easy-brute-force",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i =0 ;i<nums.size()-1;i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] *=2;\\n                nums[i+1] = 0;\\n            }\\n        };\\n        vector<int> ans;\\n        for(auto ele:nums){\\n            if(ele!=0)ans.push_back(ele);\\n        };\\n        for(auto ele:nums){\\n            if(ele == 0)ans.push_back(ele);\\n        };\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i =0 ;i<nums.size()-1;i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] *=2;\\n                nums[i+1] = 0;\\n            }\\n        };\\n        vector<int> ans;\\n        for(auto ele:nums){\\n            if(ele!=0)ans.push_back(ele);\\n        };\\n        for(auto ele:nums){\\n            if(ele == 0)ans.push_back(ele);\\n        };\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2783116,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> arr;\\n        int z=0;\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        arr = nums;\\n        for(auto it : arr){\\n            if(it==0) z++;\\n        }\\n        vector<int> t;\\n        for(auto it : arr) if(it!=0) t.push_back(it);\\n        for(int i=0;i<z;i++){\\n            t.push_back(0);\\n        }\\n        return t;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> arr;\\n        int z=0;\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        arr = nums;\\n        for(auto it : arr){\\n            if(it==0) z++;\\n        }\\n        vector<int> t;\\n        for(auto it : arr) if(it!=0) t.push_back(it);\\n        for(int i=0;i<z;i++){\\n            t.push_back(0);\\n        }\\n        return t;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097672,
                "title": "apply-operations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] ans=new int[nums.length];\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n            }\\n            int j=0;\\n            for(int i=0;i<nums.length;i++){\\n                if(nums[i]!=0){\\n                    ans[j]=nums[i];\\n                    j++;\\n                }\\n            }\\n             \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] ans=new int[nums.length];\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n            }\\n            int j=0;\\n            for(int i=0;i<nums.length;i++){\\n                if(nums[i]!=0){\\n                    ans[j]=nums[i];\\n                    j++;\\n                }\\n            }\\n             \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093296,
                "title": "easiest-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = nums[i] * 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int k = 0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i] != 0){\\n                nums[k++] = nums[i];\\n            }\\n        }\\n        for(int j=k;j<nums.length;j++){\\n            nums[j] = 0;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i] = nums[i] * 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int k = 0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i] != 0){\\n                nums[k++] = nums[i];\\n            }\\n        }\\n        for(int j=k;j<nums.length;j++){\\n            nums[j] = 0;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079976,
                "title": "c-solution-with-comments",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public int[] ApplyOperations(int[] nums)\\n    {\\n        var n = nums.Length;\\n        var lastNonZeroFoundAt = 0;\\n\\n        // Check each element in array\\n        for (var i = 0; i < n - 1; i++)\\n        {\\n            // If it\\'s not zero and equal to next, double the value and zero the next\\n            if (nums[i] != 0 && nums[i] == nums[i + 1])\\n            {\\n                nums[lastNonZeroFoundAt++] = nums[i] * 2;\\n                nums[i + 1] = 0;\\n            }\\n            else if (nums[i] != 0)\\n            {\\n                nums[lastNonZeroFoundAt++] = nums[i];\\n            }\\n        }\\n\\n        // If last element is not zero\\n        if (nums[n - 1] != 0)\\n        {\\n            nums[lastNonZeroFoundAt++] = nums[n - 1];\\n        }\\n\\n        // Move all 0\\'s to the end\\n        while (lastNonZeroFoundAt < n)\\n        {\\n            nums[lastNonZeroFoundAt++] = 0;\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int[] ApplyOperations(int[] nums)\\n    {\\n        var n = nums.Length;\\n        var lastNonZeroFoundAt = 0;\\n\\n        // Check each element in array\\n        for (var i = 0; i < n - 1; i++)\\n        {\\n            // If it\\'s not zero and equal to next, double the value and zero the next\\n            if (nums[i] != 0 && nums[i] == nums[i + 1])\\n            {\\n                nums[lastNonZeroFoundAt++] = nums[i] * 2;\\n                nums[i + 1] = 0;\\n            }\\n            else if (nums[i] != 0)\\n            {\\n                nums[lastNonZeroFoundAt++] = nums[i];\\n            }\\n        }\\n\\n        // If last element is not zero\\n        if (nums[n - 1] != 0)\\n        {\\n            nums[lastNonZeroFoundAt++] = nums[n - 1];\\n        }\\n\\n        // Move all 0\\'s to the end\\n        while (lastNonZeroFoundAt < n)\\n        {\\n            nums[lastNonZeroFoundAt++] = 0;\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079913,
                "title": "superfast-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]*=0;\\n            }\\n        }\\n        \\n        vector<int> vf(nums.size());\\n        remove_copy(nums.begin(), nums.end(), vf.begin(), 0);\\n        \\n        return vf;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]*=0;\\n            }\\n        }\\n        \\n        vector<int> vf(nums.size());\\n        remove_copy(nums.begin(), nums.end(), vf.begin(), 0);\\n        \\n        return vf;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073686,
                "title": "simple-o-n-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n      // simple O(n) solution\\n        int n = nums.size();\\n        vector<int> ans,ans2;\\n        int count =0;\\n        nums.push_back(0);\\n\\n        for(int i=0;i<n;i++)\\n        {\\n          if(nums[i]==nums[i+1])\\n          {\\n            ans.push_back(nums[i]*2);\\n            nums[i+1]=0;\\n          }\\n          else ans.push_back(nums[i]);\\n        }\\n\\n        for(int i=0;i<ans.size();i++)\\n        {\\n          if(ans[i]!=0) ans2.push_back(ans[i]);\\n          else count++;\\n        }\\n        while(count>0)\\n        {\\n          ans2.push_back(0);\\n          count--;\\n        }\\n        return ans2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n      // simple O(n) solution\\n        int n = nums.size();\\n        vector<int> ans,ans2;\\n        int count =0;\\n        nums.push_back(0);\\n\\n        for(int i=0;i<n;i++)\\n        {\\n          if(nums[i]==nums[i+1])\\n          {\\n            ans.push_back(nums[i]*2);\\n            nums[i+1]=0;\\n          }\\n          else ans.push_back(nums[i]);\\n        }\\n\\n        for(int i=0;i<ans.size();i++)\\n        {\\n          if(ans[i]!=0) ans2.push_back(ans[i]);\\n          else count++;\\n        }\\n        while(count>0)\\n        {\\n          ans2.push_back(0);\\n          count--;\\n        }\\n        return ans2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072552,
                "title": "php-simple-solution-without-array-functions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[]\\n     */\\n    function applyOperations($nums) {\\n        for($i = 0; $i < count($nums) - 1; $i++) {\\n            if($nums[$i] === $nums[$i + 1]) {\\n                $nums[$i]*=2; \\n                $nums[$i + 1] = 0;\\n            }\\n        }\\n        for($i = 0; $i < count($nums) - 1; $i++) {\\n            if($nums[$i] === 0) {\\n                unset($nums[$i]);\\n                $nums[] = 0;\\n            }\\n        }\\n        \\n\\n        return $nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[]\\n     */\\n    function applyOperations($nums) {\\n        for($i = 0; $i < count($nums) - 1; $i++) {\\n            if($nums[$i] === $nums[$i + 1]) {\\n                $nums[$i]*=2; \\n                $nums[$i + 1] = 0;\\n            }\\n        }\\n        for($i = 0; $i < count($nums) - 1; $i++) {\\n            if($nums[$i] === 0) {\\n                unset($nums[$i]);\\n                $nums[] = 0;\\n            }\\n        }\\n        \\n\\n        return $nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065412,
                "title": "simple-and-easy-solution-using-java",
                "content": "# Intuition\\nMerges adjacent equal elements by doubling the value of the first element and setting the second element to 0.\\n\\nRearranges the array by moving all non-zero elements to the left, maintaining their relative order.\\n\\nFills the remaining positions at the end of the array with zeros.\\n# Approach\\n1.Iterate through the array to combine adjacent equal elements.\\n2.Iterate through the modified array to shift non-zero elements to    the left.\\n3.Fill the remaining positions with zeros.\\n4.Return the modified array.\\n# Complexity\\n- Time complexity:\\nThe code performs two passes through the input array. The first pass combines adjacent equal elements, which takes O(n) time, where n is the length of the input array. The second pass shifts non-zero elements to the left and fills zeros, also taking O(n) time. Therefore, the overall time complexity is O(n).\\n\\n\\n- Space complexity:\\nThe code uses a constant amount of extra space for variables index and count, so the space complexity is O(1), which means it does not depend on the size of the input array.\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int index=0;\\n        int count=0;\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=2*nums[i];\\n                nums[i+1]=0;\\n\\n            }\\n            else{\\n                continue;\\n            }\\n\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                nums[index]=nums[i];\\n                index++;\\n\\n            }\\n            else{\\n                count++;\\n            }\\n        }\\n        while(count!=0){\\n            nums[index]=0;\\n            index++;\\n            count--;\\n        }\\n        return  nums;\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int index=0;\\n        int count=0;\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=2*nums[i];\\n                nums[i+1]=0;\\n\\n            }\\n            else{\\n                continue;\\n            }\\n\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                nums[index]=nums[i];\\n                index++;\\n\\n            }\\n            else{\\n                count++;\\n            }\\n        }\\n        while(count!=0){\\n            nums[index]=0;\\n            index++;\\n            count--;\\n        }\\n        return  nums;\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065392,
                "title": "use-move-zeros-to-end-problem-logic-here",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe First For Loop will Multiply each element by 2 (if two Consecutive elements are equal)\\nThe Other two For Loops, I used the Same Code from the \"Move Zeros\" Problem \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n\\n        for(int i = 0 ; i < (n-1) ; i++)\\n        {\\n            if(nums[i] == nums[i+1])    \\n            {\\n                nums[i] = nums[i] * 2;\\n                nums[i+1] = 0;\\n                i++;\\n            }\\n        }\\n\\n        //\"Move Zeros to End\" Logic\\n\\n        int nonZeroIndex = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] != 0) {\\n                nums[nonZeroIndex++] = nums[i];\\n            }\\n        }\\n\\n        for (int i = nonZeroIndex; i < n; i++) {\\n            nums[i] = 0;\\n        }\\n\\n\\n        return nums;\\n    }\\n\\n    \\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length;\\n\\n        for(int i = 0 ; i < (n-1) ; i++)\\n        {\\n            if(nums[i] == nums[i+1])    \\n            {\\n                nums[i] = nums[i] * 2;\\n                nums[i+1] = 0;\\n                i++;\\n            }\\n        }\\n\\n        //\"Move Zeros to End\" Logic\\n\\n        int nonZeroIndex = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] != 0) {\\n                nums[nonZeroIndex++] = nums[i];\\n            }\\n        }\\n\\n        for (int i = nonZeroIndex; i < n; i++) {\\n            nums[i] = 0;\\n        }\\n\\n\\n        return nums;\\n    }\\n\\n    \\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056451,
                "title": "java-beats-100-only-solution-with-tc-o-n-sc-o-1-constant",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n![3.jfif](https://assets.leetcode.com/users/images/b0f0e417-7985-4923-bc7a-093a6eff7529_1694967238.5366228.jpeg)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int j=0;\\n        for(int x=0;x<nums.length;x++){\\n\\n                 int y=x+1;\\n                if(y<nums.length && nums[x]!=0 && nums[x]==nums[y]){\\n                 if(x==j){\\n                     nums[j]=2*nums[y];\\n                     nums[y]=0;\\n                     j++;\\n                 }\\n                  else{\\n                      nums[j]=2*nums[y];\\n                      nums[y]=0;\\n                      nums[x]=0;\\n                      j++;\\n                  }\\n                  x=y;\\n\\n                }\\n               if(nums[x]!=0){\\n                  if(x!=j){\\n                      nums[j]=nums[x];\\n                      nums[x]=0;\\n                  }\\n                  j++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n//PLEASE UPVOTE\\n//IT MOTIVATES ME TO POST MORE SOLUTIONS",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int j=0;\\n        for(int x=0;x<nums.length;x++){\\n\\n                 int y=x+1;\\n                if(y<nums.length && nums[x]!=0 && nums[x]==nums[y]){\\n                 if(x==j){\\n                     nums[j]=2*nums[y];\\n                     nums[y]=0;\\n                     j++;\\n                 }",
                "codeTag": "Java"
            },
            {
                "id": 4048368,
                "title": "python-easy-solution-with-detailed-explanation",
                "content": "# Intuition\\nWe are going to be given an array `nums` of size `n` containing non-negative integers\\n\\nWe may apply `n-1` operations to this array where, in the `ith` operation (0-indexed), you will apply the following on the `ith` element of nums:\\n- If `nums[i] == nums[i + 1]`, then multiply `nums[i]` by `2` and set `nums[i + 1]` to `0`. Otherwise, you skip this operation.\\n\\nAfter performing all the operations, shift all the `0\\'s` to the end of the array.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLet\\'s take an example:\\n\\nConsider this array:\\n\\n```\\nnums = [1,2,2,1,1,0]\\n```\\n\\nFirst there are 6 elements in this array and we can perform 5 operations on it.\\n\\nWe\\'ll first iterate through the elements in this array and check this condition\\n\\nFor the first iteration which will start from index 0 we\\'ll check this:\\n\\n```\\nnums[0] == nums[1]\\n```\\n\\nBasically that will compare the vale of `1 and 2` together since they are not equal we won\\'t apply the operation on it\\n\\nThe second iteration will check this:\\n\\n```\\nnums[1] == nums[2]\\n```\\n\\nWhich translates to `2 == 2`, in this case it is True so now for the operation we do this:\\n\\n```\\nnums[1] = nums[1] * 2\\nnums[2] = 0\\n```\\n\\nSo the value stored in those index will then be `4 and 0`\\n\\nWe\\'ll move to the next iteration\\n\\n```\\nnums[2] == nums[3]\\n```\\n\\nRememer that we\\'ve set `nums[2]` to `0` so we\\'re comparing `0 and 1` since it isn\\'t equal we skip the operation\\n\\n```\\nnums[3] == nums[4]\\n```\\n\\nIn this case the comparison is true because `1 == 1` and now we apply the operation\\n\\n```\\nnums[3] = nums[3] * 2\\nnums[4] = 0\\n```\\n\\nThe last iterate is this:\\n\\n```\\nnums[4] == nums[5]\\n```\\n\\nIt returns true because `0 == 0` and the operation would also evaluate to `0` for both elements\\n\\nThe final result after all this operation has been done is:\\n\\n```\\n[1, 4, 0, 2, 0, 0]\\n```\\n\\nThe next thing would be the return value is the elements in the array with the zero\\'s shifted to the right\\n\\nSo it\\'s this:\\n\\n```\\n[1, 4, 2, 0, 0, 0]\\n```\\n\\nThe first case which is to calculate if the operation can be done is easy to do as we can just iterate through each elements in the array and check for the condition\\n\\n\\nAs for the shifting of the zero the way I approached it is by creating an array containing all the elements of the resulting operation whose value is not zero\\n\\nThen I filled another array containing the amount of zero from the resulting operation and this is calculated from `(len(nums) - len(unique))`\\n\\nWith that we would have two arrays containing the non zero elements and the zero element which we can just concatenate together\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n```\\nO(N)\\n```\\n\\n# Code\\n```\\ndef shiftZeros(arr, n):\\n    unique = [i for i in arr if i != 0]\\n    zero = [0] * (n - len(unique))\\n\\n    return unique + zero\\n\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1, len(nums)):\\n            if nums[i-1] == nums[i]:\\n                nums[i-1] *= 2\\n                nums[i] = 0 \\n        \\n        r = shiftZeros(nums, len(nums))\\n\\n        return r\\n```",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nnums = [1,2,2,1,1,0]\\n```\n```\\nnums[0] == nums[1]\\n```\n```\\nnums[1] == nums[2]\\n```\n```\\nnums[1] = nums[1] * 2\\nnums[2] = 0\\n```\n```\\nnums[2] == nums[3]\\n```\n```\\nnums[3] == nums[4]\\n```\n```\\nnums[3] = nums[3] * 2\\nnums[4] = 0\\n```\n```\\nnums[4] == nums[5]\\n```\n```\\n[1, 4, 0, 2, 0, 0]\\n```\n```\\n[1, 4, 2, 0, 0, 0]\\n```\n```\\nO(N)\\n```\n```\\ndef shiftZeros(arr, n):\\n    unique = [i for i in arr if i != 0]\\n    zero = [0] * (n - len(unique))\\n\\n    return unique + zero\\n\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1, len(nums)):\\n            if nums[i-1] == nums[i]:\\n                nums[i-1] *= 2\\n                nums[i] = 0 \\n        \\n        r = shiftZeros(nums, len(nums))\\n\\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045370,
                "title": "beats-100-c-user",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N) \\n\\n- Space complexity:\\nO(1) beacuse we have not used any other array to store output.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n\\n        for (int i=0; i<n-1; i++){\\n            if (nums[i] == nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        \\n        int j=0;\\n        for (int i=0; i<n; i++){\\n            if(nums[i]!=0){\\n                swap(nums[i], nums[j]);\\n                j++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n\\n        for (int i=0; i<n-1; i++){\\n            if (nums[i] == nums[i+1]){\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        \\n        int j=0;\\n        for (int i=0; i<n; i++){\\n            if(nums[i]!=0){\\n                swap(nums[i], nums[j]);\\n                j++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044150,
                "title": "simple-code-for-apply-operation-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n      int size = nums.size() - 1;\\nstd::vector<int> q;\\nint k = 0;\\nfor (int i = 0; i < size; i += 1)\\n{\\n\\tif (nums[i] == nums[i + 1])\\n\\t{\\n\\t\\tnums[i]  *= 2;\\n\\t\\tnums[i+1] = 0;\\n\\t}\\n}\\nfor (int i = 0; i <= size; i += 1)\\n{\\n\\tnums[i - k] = nums[i];\\n\\tif (nums[i] == 0) k += 1;\\n}\\nfor (int i = size; i > size - k; i -= 1) nums[i] = 0;\\n\\nreturn nums;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n      int size = nums.size() - 1;\\nstd::vector<int> q;\\nint k = 0;\\nfor (int i = 0; i < size; i += 1)\\n{\\n\\tif (nums[i] == nums[i + 1])\\n\\t{\\n\\t\\tnums[i]  *= 2;\\n\\t\\tnums[i+1] = 0;\\n\\t}\\n}\\nfor (int i = 0; i <= size; i += 1)\\n{\\n\\tnums[i - k] = nums[i];\\n\\tif (nums[i] == 0) k += 1;\\n}\\nfor (int i = size; i > size - k; i -= 1) nums[i] = 0;\\n\\nreturn nums;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042612,
                "title": "easy-understanable-99-9",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ncheck the condition and move the value into front & add zero at back;\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        \\n\\n        for(int i=1 ;i<nums.length;i++){\\n            if(nums[i] == nums[i-1])   { \\n             nums[i-1]*=2;\\n            nums[i]=0; \\n             }\\n        }\\n        int k=0;\\n        for(int i=0 ;i<nums.length;i++)  if(nums[i]!=0)    nums[k++]=nums[i];\\n        for(int i=k ;i<nums.length;i++)      nums[i]=0;\\n        return nums;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        \\n\\n        for(int i=1 ;i<nums.length;i++){\\n            if(nums[i] == nums[i-1])   { \\n             nums[i-1]*=2;\\n            nums[i]=0; \\n             }\\n        }\\n        int k=0;\\n        for(int i=0 ;i<nums.length;i++)  if(nums[i]!=0)    nums[k++]=nums[i];\\n        for(int i=k ;i<nums.length;i++)      nums[i]=0;\\n        return nums;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034212,
                "title": "simple-java-solution-1ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int arr[]=new int[nums.length];\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int j=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                arr[j]=nums[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int arr[]=new int[nums.length];\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int j=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                arr[j]=nums[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4029642,
                "title": "a-solution-that-is-better-in-speed-than-97-34-and-98-7-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1, len(nums)):\\n            if nums[i-1] == nums[i]:\\n                nums[i-1] *= 2\\n                nums[i] = 0\\n        zero_nums = list(filter(lambda x: x == 0, nums))\\n        without_zero = list(filter(lambda x: x != 0, nums))\\n        without_zero.extend(zero_nums)\\n        return without_zero\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1, len(nums)):\\n            if nums[i-1] == nums[i]:\\n                nums[i-1] *= 2\\n                nums[i] = 0\\n        zero_nums = list(filter(lambda x: x == 0, nums))\\n        without_zero = list(filter(lambda x: x != 0, nums))\\n        without_zero.extend(zero_nums)\\n        return without_zero\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4025214,
                "title": "simple-java-solution",
                "content": "# Intuition\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- First iterate throught the array and simply check the condition for nums[i]==nums[i+1] \\n- multiply i with 2 and make i+1 as 0\\n- after all the iterations, swap all 0s to the end.\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n=nums.length;\\n        for(int i=0;i<n-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]!=0){\\n                int temp=nums[count];\\n                nums[count]=nums[i];\\n                nums[i]=temp;\\n                count++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n=nums.length;\\n        for(int i=0;i<n-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int count=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]!=0){\\n                int temp=nums[count];\\n                nums[count]=nums[i];\\n                nums[i]=temp;\\n                count++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018855,
                "title": "java-solution-two-pointers-approach-0ms-o-n",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i<nums.length-1; i++) {\\n            if (nums[i] == nums[i+1]) {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n\\n        int f = 0, s = 0;\\n        while (s < nums.length) {\\n            if (nums[s] != 0) {\\n                int temp = nums[f];\\n                nums[f] = nums[s];\\n                nums[s] = temp;\\n                f++;\\n            }\\n            s++;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i<nums.length-1; i++) {\\n            if (nums[i] == nums[i+1]) {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n\\n        int f = 0, s = 0;\\n        while (s < nums.length) {\\n            if (nums[s] != 0) {\\n                int temp = nums[f];\\n                nums[f] = nums[s];\\n                nums[s] = temp;\\n                f++;\\n            }\\n            s++;\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4016560,
                "title": "java-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i = 0; i<nums.length - 1; i++){\\n            if(nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        int i = 0;\\n        int j = 1;\\n        while(i < nums.length && j < nums.length){\\n            if(nums[i] == 0 && nums[j] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[j];\\n                nums[j] = temp;\\n                i++;\\n                j++;\\n            }else if(nums[i] == 0 && nums[j] == 0){\\n                j++;\\n            }else{\\n                i++;\\n                j++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i = 0; i<nums.length - 1; i++){\\n            if(nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        int i = 0;\\n        int j = 1;\\n        while(i < nums.length && j < nums.length){\\n            if(nums[i] == 0 && nums[j] != 0){\\n                int temp = nums[i];\\n                nums[i] = nums[j];\\n                nums[j] = temp;\\n                i++;\\n                j++;\\n            }else if(nums[i] == 0 && nums[j] == 0){\\n                j++;\\n            }else{\\n                i++;\\n                j++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012432,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i] = nums[i]*2\\n                nums[i+1] = 0\\n        for i in range(len(nums)):\\n            if nums[i]==0:\\n                j = i+1\\n                while j<len(nums):\\n                    if nums[j]!=0:\\n                        nums[i],nums[j] = nums[j],nums[i]\\n                        break\\n                    j+=1\\n        return nums\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i] = nums[i]*2\\n                nums[i+1] = 0\\n        for i in range(len(nums)):\\n            if nums[i]==0:\\n                j = i+1\\n                while j<len(nums):\\n                    if nums[j]!=0:\\n                        nums[i],nums[j] = nums[j],nums[i]\\n                        break\\n                    j+=1\\n        return nums\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010932,
                "title": "java-solution-beats-70-using-o-n-complexity-proper-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int j =0;\\n//      Start loop from index 1 \\n        for(int i=1; i< nums.length; i++){\\n//      If value at i-1 = i then store that value at j and increase j value\\n            if(nums[i-1]==nums[i] && nums[i]!=0){\\n                nums[j] = nums[i-1]*2;\\n                nums[i]= 0;\\n                j++;\\n            } else if(nums[i-1]!=0){\\n//      If value at i is not equals to 0 then store that value at j and increase j value\\n                nums[j] = nums[i-1];\\n                j++;\\n            }  \\n//      If its the last index and value at i not equals to 0 then store that value at j and increase j value\\n            if(i== nums.length-1 && nums[i]!=0){\\n                nums[j] = nums[i];\\n                j++;\\n            } \\n        }\\n\\n//       For the pending index from j store 0\\n        for(int i=j ; i<nums.length; i++){\\n            nums[i]=0;\\n        }\\n        return nums;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int j =0;\\n//      Start loop from index 1 \\n        for(int i=1; i< nums.length; i++){\\n//      If value at i-1 = i then store that value at j and increase j value\\n            if(nums[i-1]==nums[i] && nums[i]!=0){\\n                nums[j] = nums[i-1]*2;\\n                nums[i]= 0;\\n                j++;\\n            } else if(nums[i-1]!=0){\\n//      If value at i is not equals to 0 then store that value at j and increase j value\\n                nums[j] = nums[i-1];\\n                j++;\\n            }  \\n//      If its the last index and value at i not equals to 0 then store that value at j and increase j value\\n            if(i== nums.length-1 && nums[i]!=0){\\n                nums[j] = nums[i];\\n                j++;\\n            } \\n        }\\n\\n//       For the pending index from j store 0\\n        for(int i=j ; i<nums.length; i++){\\n            nums[i]=0;\\n        }\\n        return nums;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009723,
                "title": "c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe first for loop does the described math operation. \\nThe second for-loop does the zero switch.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size()-1; i++)\\n        {\\n            if(nums[i] == nums[i + 1])\\n            {\\n                nums.at(i) = nums[i] * 2;\\n                nums.at(i+1) = 0;\\n            }\\n        }\\n\\n        int k = 0;\\n        for(int i = 0; i < nums.size(); i++)\\n        {\\n            if(nums.at(i) != 0)\\n            {\\n                swap(nums.at(k), nums.at(i));\\n                k++;\\n            } \\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i = 0; i < nums.size()-1; i++)\\n        {\\n            if(nums[i] == nums[i + 1])\\n            {\\n                nums.at(i) = nums[i] * 2;\\n                nums.at(i+1) = 0;\\n            }\\n        }\\n\\n        int k = 0;\\n        for(int i = 0; i < nums.size(); i++)\\n        {\\n            if(nums.at(i) != 0)\\n            {\\n                swap(nums.at(k), nums.at(i));\\n                k++;\\n            } \\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002557,
                "title": "beats-100-c-users-0ms-without-using-extra-space",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        //performing operations\\n        for(int i=0;i<nums.size()-1;i++)\\n             if(nums[i]==nums[i+1]) {nums[i]=nums[i]*2; nums[i+1]=0;} \\n        \\n        //moving zeros to the end\\n        int j=0;\\n        for(int i=0;i<nums.size();i++)\\n            if(nums[i]!=0) nums[j++]=nums[i];\\n        while(j<nums.size()) nums[j++]=0;\\n\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        //performing operations\\n        for(int i=0;i<nums.size()-1;i++)\\n             if(nums[i]==nums[i+1]) {nums[i]=nums[i]*2; nums[i+1]=0;} \\n        \\n        //moving zeros to the end\\n        int j=0;\\n        for(int i=0;i<nums.size();i++)\\n            if(nums[i]!=0) nums[j++]=nums[i];\\n        while(j<nums.size()) nums[j++]=0;\\n\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001951,
                "title": "easy-approach-c",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int>v;\\n        int c=0;\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            if(nums[i]==nums[i-1])\\n            {\\n                nums[i-1]=nums[i]*2;\\n                nums[i]=0;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++)\\n         cout<<nums[i]<<\\' \\';\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                v.push_back(nums[i]);\\n            }\\n            if(nums[i]==0)\\n            {\\n                c++;\\n            }\\n\\n        }\\n        \\n        for(int i=0;i<v.size();i++)\\n         cout<<v[i];\\n        for(int i=0;i<c;i++)\\n        {\\n            v.push_back(0);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int>v;\\n        int c=0;\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            if(nums[i]==nums[i-1])\\n            {\\n                nums[i-1]=nums[i]*2;\\n                nums[i]=0;\\n            }\\n        }\\n        for(int i=0;i<nums.size();i++)\\n         cout<<nums[i]<<\\' \\';\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                v.push_back(nums[i]);\\n            }\\n            if(nums[i]==0)\\n            {\\n                c++;\\n            }\\n\\n        }\\n        \\n        for(int i=0;i<v.size();i++)\\n         cout<<v[i];\\n        for(int i=0;i<c;i++)\\n        {\\n            v.push_back(0);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3989633,
                "title": "beats-100-easiest-approach-must-vote",
                "content": "# Code\\n```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* applyOperations(int* nums, int numsSize, int* returnSize){\\n\\n    int* arr=(int*)malloc(sizeof(int)*numsSize);\\n    int k=0;\\n    for(int i=0;i<numsSize-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n    }\\n        for(int i=0;i<numsSize;i++){\\n            if(nums[i]!=0){\\n                arr[k++]=nums[i];\\n            }\\n        }\\n        for(int i=k;i<numsSize;i++){\\n            arr[k++]=0;\\n        }\\n        *returnSize=k;\\n        return arr;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* applyOperations(int* nums, int numsSize, int* returnSize){\\n\\n    int* arr=(int*)malloc(sizeof(int)*numsSize);\\n    int k=0;\\n    for(int i=0;i<numsSize-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n    }\\n        for(int i=0;i<numsSize;i++){\\n            if(nums[i]!=0){\\n                arr[k++]=nums[i];\\n            }\\n        }\\n        for(int i=k;i<numsSize;i++){\\n            arr[k++]=0;\\n        }\\n        *returnSize=k;\\n        return arr;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3986358,
                "title": "golang-solution",
                "content": "# Code\\n```\\nfunc applyOperations(nums []int) []int {\\n    for i := 0; i < len(nums)-1; i++ {\\n\\t\\tif nums[i] == nums[i + 1] {\\n\\t\\t\\tnums[i] *= 2\\n\\t\\t\\tnums[i + 1] = 0\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn moveZeroes(nums)\\n}\\n\\n\\nfunc moveZeroes(nums []int) []int {\\n\\ti := 0\\n\\tfor _, v := range nums {\\n\\t\\tif v != 0 {\\n\\t\\t\\tnums[i] = v\\n\\t\\t\\ti++\\n\\t\\t} \\n\\t}\\n\\t\\n\\tfor ; i < len(nums); i++ {\\n\\t\\tnums[i] = 0\\n\\t}\\n\\treturn nums\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc applyOperations(nums []int) []int {\\n    for i := 0; i < len(nums)-1; i++ {\\n\\t\\tif nums[i] == nums[i + 1] {\\n\\t\\t\\tnums[i] *= 2\\n\\t\\t\\tnums[i + 1] = 0\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn moveZeroes(nums)\\n}\\n\\n\\nfunc moveZeroes(nums []int) []int {\\n\\ti := 0\\n\\tfor _, v := range nums {\\n\\t\\tif v != 0 {\\n\\t\\t\\tnums[i] = v\\n\\t\\t\\ti++\\n\\t\\t} \\n\\t}\\n\\t\\n\\tfor ; i < len(nums); i++ {\\n\\t\\tnums[i] = 0\\n\\t}\\n\\treturn nums\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985435,
                "title": "beats-100-easiest-approach-must-vote",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        vector<int>v;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                v.push_back(nums[i]);\\n            }\\n        }\\n        for(int i=v.size();i<nums.size();i++){\\n            v.push_back(0);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        for(int i=0;i<nums.size()-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        vector<int>v;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]!=0){\\n                v.push_back(nums[i]);\\n            }\\n        }\\n        for(int i=v.size();i<nums.size();i++){\\n            v.push_back(0);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984156,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] n) {\\n        int[] a= new int[n.length];\\n        int count=0,i,l=0;\\n        for(i=0;i<n.length-1;i++){\\n            if(n[i]!=0 && n[i]!=n[i+1]){\\n                a[l]=n[i];\\n                l++;\\n            }\\n            if(n[i]==n[i+1] && n[i]!=0){\\n                a[l]=(n[i]*=2);\\n                n[i+1]=0;\\n                l++;\\n            }\\n        }\\n        if(n[n.length-1]!=0 && n[n.length-1]!=n[n.length-2]){\\n            a[l]=n[n.length-1];\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] n) {\\n        int[] a= new int[n.length];\\n        int count=0,i,l=0;\\n        for(i=0;i<n.length-1;i++){\\n            if(n[i]!=0 && n[i]!=n[i+1]){\\n                a[l]=n[i];\\n                l++;\\n            }\\n            if(n[i]==n[i+1] && n[i]!=0){\\n                a[l]=(n[i]*=2);\\n                n[i+1]=0;\\n                l++;\\n            }\\n        }\\n        if(n[n.length-1]!=0 && n[n.length-1]!=n[n.length-2]){\\n            a[l]=n[n.length-1];\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978394,
                "title": "beat-97-with-a-travese-ts-o-n-memory-o-1-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0\\n        i=0\\n        j=0\\n        while i <len(nums):\\n            if nums[i]==0:\\n                while j <len(nums)-1:\\n                    if nums[j]!=0:\\n                        break;\\n                    else:\\n                        j+=1\\n                if j < len(nums) and nums[j]!=0:\\n                    nums[i], nums[j]=nums[j], nums[i]\\n                i+=1\\n            else:\\n                i+=1\\n                j+=1\\n        return nums\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0\\n        i=0\\n        j=0\\n        while i <len(nums):\\n            if nums[i]==0:\\n                while j <len(nums)-1:\\n                    if nums[j]!=0:\\n                        break;\\n                    else:\\n                        j+=1\\n                if j < len(nums) and nums[j]!=0:\\n                    nums[i], nums[j]=nums[j], nums[i]\\n                i+=1\\n            else:\\n                i+=1\\n                j+=1\\n        return nums\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978388,
                "title": "beat-97-with-a-travese-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0\\n        i=0\\n        j=0\\n        while i <len(nums):\\n            if nums[i]==0:\\n                while j <len(nums)-1:\\n                    if nums[j]!=0:\\n                        break;\\n                    else:\\n                        j+=1\\n                if j < len(nums) and nums[j]!=0:\\n                    nums[i], nums[j]=nums[j], nums[i]\\n                i+=1\\n            else:\\n                i+=1\\n                j+=1\\n        return nums\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0\\n        i=0\\n        j=0\\n        while i <len(nums):\\n            if nums[i]==0:\\n                while j <len(nums)-1:\\n                    if nums[j]!=0:\\n                        break;\\n                    else:\\n                        j+=1\\n                if j < len(nums) and nums[j]!=0:\\n                    nums[i], nums[j]=nums[j], nums[i]\\n                i+=1\\n            else:\\n                i+=1\\n                j+=1\\n        return nums\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3975234,
                "title": "very-simple-solution-easy-to-understand",
                "content": "Easy solution...very easy to understand...Simply applied the operation in the first loop... then moved all the zeros to the end...\\nthat\\'s it..\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int j = 0;\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if (nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n                \\n            }\\n        }\\n            for(int i=0;i<nums.length;i++){\\n            if (nums[i] != 0) {\\n                int temp = nums[i];\\n                nums[i] = nums[j];\\n                nums[j] = temp;\\n                j++;          \\n            }\\n            }\\n           \\n        return nums;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int j = 0;\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if (nums[i] == nums[i + 1]) {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n                \\n            }\\n        }\\n            for(int i=0;i<nums.length;i++){\\n            if (nums[i] != 0) {\\n                int temp = nums[i];\\n                nums[i] = nums[j];\\n                nums[j] = temp;\\n                j++;          \\n            }\\n            }\\n           \\n        return nums;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974374,
                "title": "easy-code-for-beginners-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int arr[] = new int[nums.length];\\n        int p=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i] !=0){\\n                arr[p] = nums[i];\\n                p++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i] == nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int arr[] = new int[nums.length];\\n        int p=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i] !=0){\\n                arr[p] = nums[i];\\n                p++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972558,
                "title": "beats-97-with-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        l=len(nums)\\n        for i in range(l-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0\\n            #print(nums)\\n        ans=[]\\n        for i in range(l):\\n            if nums[i]>0:\\n                ans.append(nums[i])\\n        ans=ans+[0]*(l-len(ans))\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        l=len(nums)\\n        for i in range(l-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]*=2\\n                nums[i+1]=0\\n            #print(nums)\\n        ans=[]\\n        for i in range(l):\\n            if nums[i]>0:\\n                ans.append(nums[i])\\n        ans=ans+[0]*(l-len(ans))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972483,
                "title": "by-prodonik-c",
                "content": "# Intuition\\nfirst of all we gotta apply \\n```\\nif (nums[i] == nums[i + 1]){\\n    nums[i] *= 2;\\n    nums[i + 1] = 0;\\n```\\nthis part, then move theroes to the end which is already available in LeetCode )\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] ApplyOperations(int[] nums) {\\n        for (int i = 0; i < nums.Length - 1; i ++){\\n            if (nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        int count = 0;\\n        for (int i = 0; i < nums.Length; i ++){\\n            if (nums[i] != 0){\\n                (nums[i], nums[count]) = (nums[count], nums[i]);\\n                count ++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\nif (nums[i] == nums[i + 1]){\\n    nums[i] *= 2;\\n    nums[i + 1] = 0;\\n```\n```\\npublic class Solution {\\n    public int[] ApplyOperations(int[] nums) {\\n        for (int i = 0; i < nums.Length - 1; i ++){\\n            if (nums[i] == nums[i + 1]){\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n            }\\n        }\\n        int count = 0;\\n        for (int i = 0; i < nums.Length; i ++){\\n            if (nums[i] != 0){\\n                (nums[i], nums[count]) = (nums[count], nums[i]);\\n                count ++;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3968618,
                "title": "apply-operations-to-an-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFIRST READ ABOUT ARRAYS , THEN GO TO TAGS , CHOOSE ARRAYS , TRY TO SOLVE FIRST , IF NOT SOLVED THEN SEE THE SOLUTIONS, AFTER SEEING THE SOLUTIONS SOLVE THAT QUESTIONS ON YOUR OWN THEN THE MAIN THING IS THAT GO and solve similar type of that questions given below .\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n).\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nbecause no extra space is used here so, space complexity is O(1).\\n\\nTHANK YOU.\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        \\n\\n        for(int i=0;i<nums.length-1;i++){\\n\\n            if(nums[i]==nums[i+1]){\\n                nums[i]= nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n\\n     int j=0;\\n     for(int i=0;i<nums.length;i++){\\n\\n         if(nums[i] !=0 ){\\n             nums[j]=nums[i];\\n             j++;\\n         }\\n     }\\n\\n     while(j<nums.length){\\n         nums[j]=0;\\n         j++;\\n     }\\n\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        \\n\\n        for(int i=0;i<nums.length-1;i++){\\n\\n            if(nums[i]==nums[i+1]){\\n                nums[i]= nums[i]*2;\\n                nums[i+1]=0;\\n            }\\n        }\\n\\n     int j=0;\\n     for(int i=0;i<nums.length;i++){\\n\\n         if(nums[i] !=0 ){\\n             nums[j]=nums[i];\\n             j++;\\n         }\\n     }\\n\\n     while(j<nums.length){\\n         nums[j]=0;\\n         j++;\\n     }\\n\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954252,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            int j = i + 1;\\n            if (nums[i] == nums[j]) {\\n                nums[i++] *= 2;\\n                nums[j] = 0;\\n            }\\n        }\\n        int[] output = new int[nums.length];\\n        int index = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 0) {\\n                output[index++] = nums[i];\\n            }\\n        }\\n        return output;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            int j = i + 1;\\n            if (nums[i] == nums[j]) {\\n                nums[i++] *= 2;\\n                nums[j] = 0;\\n            }\\n        }\\n        int[] output = new int[nums.length];\\n        int index = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] > 0) {\\n                output[index++] = nums[i];\\n            }\\n        }\\n        return output;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950812,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        i = 0\\n\\n        while i < len(nums) - 1:\\n            if nums[i] == nums[i+1]:\\n                nums[i] = nums[i] * 2\\n                nums[i+1] = 0\\n            i += 1\\n\\n        l,r = 0, 0\\n        \\n        while l < len(nums):\\n            if nums[l] != 0:\\n                l += 1\\n            elif nums[l] == 0:\\n                r = l + 1\\n                while r < len(nums) and nums[r] == 0:\\n                    r += 1\\n                if r < len(nums):\\n                    nums[l], nums[r] = nums[r], nums[l]\\n                l += 1\\n        return nums\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        i = 0\\n\\n        while i < len(nums) - 1:\\n            if nums[i] == nums[i+1]:\\n                nums[i] = nums[i] * 2\\n                nums[i+1] = 0\\n            i += 1\\n\\n        l,r = 0, 0\\n        \\n        while l < len(nums):\\n            if nums[l] != 0:\\n                l += 1\\n            elif nums[l] == 0:\\n                r = l + 1\\n                while r < len(nums) and nums[r] == 0:\\n                    r += 1\\n                if r < len(nums):\\n                    nums[l], nums[r] = nums[r], nums[l]\\n                l += 1\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946082,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n     int n[] = new int[nums.length];\\n     int k = 0;\\n     for(int i=0;i<nums.length-1;i++){\\n         if(nums[i]==nums[i+1]){\\n             nums[i] = nums[i] * 2;\\n             nums[i+1] = 0;\\n         }\\n     }   \\n     for(int i:nums){\\n         if(i==0){\\n\\n         }\\n         else{\\n             n[k] = i;\\n             k++;\\n         }\\n     }\\n     return n;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n     int n[] = new int[nums.length];\\n     int k = 0;\\n     for(int i=0;i<nums.length-1;i++){\\n         if(nums[i]==nums[i+1]){\\n             nums[i] = nums[i] * 2;\\n             nums[i+1] = 0;\\n         }\\n     }   \\n     for(int i:nums){\\n         if(i==0){\\n\\n         }\\n         else{\\n             n[k] = i;\\n             k++;\\n         }\\n     }\\n     return n;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3944019,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        List<Integer>l=new ArrayList();\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int c=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                l.add(nums[i]);\\n            }\\n            else{\\n                c++;\\n            }\\n        }\\n        for(int i=0;i<c;i++){\\n            l.add(0);\\n        }\\n        return l.stream().mapToInt(Integer::intValue).toArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        List<Integer>l=new ArrayList();\\n        for(int i=0;i<nums.length-1;i++){\\n            if(nums[i]==nums[i+1]){\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int c=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]!=0){\\n                l.add(nums[i]);\\n            }\\n            else{\\n                c++;\\n            }\\n        }\\n        for(int i=0;i<c;i++){\\n            l.add(0);\\n        }\\n        return l.stream().mapToInt(Integer::intValue).toArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942940,
                "title": "space-complexity-o-1",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n log n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Combining Adjacent Equal Numbers:\\n- Iterate through the array from the beginning.\\n- Compare each element with its adjacent element (the one to its right).\\n- If the current element and its adjacent element are equal, update the current element by doubling its value and set the adjacent element to 0. This simulates the merging of two equal numbers.\\n# Sorting with Zeros at the End:\\n- After performing the doubling and zeroing operations, sort the array.\\n- Use a custom comparator function for sorting. The function should place zeros at the end of the sorted array while maintaining the order of non-zero elements.\\n# Return the Modified Array:\\nReturn the modified and sorted array as the output.\\n\\n\\n\\n# Code\\n```\\nfunction applyOperations(nums: number[]): number[] {\\n    for(let i = 0; i <= nums.length-1; i++){\\n        if(nums[i+1] == nums[i]){\\n            nums[i] =  nums[i] * 2\\n            nums[i+1] = 0\\n        }\\n    }\\n    nums.sort((a ,b) => b == 0? -1 : 0)\\n\\n    return nums\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction applyOperations(nums: number[]): number[] {\\n    for(let i = 0; i <= nums.length-1; i++){\\n        if(nums[i+1] == nums[i]){\\n            nums[i] =  nums[i] * 2\\n            nums[i+1] = 0\\n        }\\n    }\\n    nums.sort((a ,b) => b == 0? -1 : 0)\\n\\n    return nums\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3931349,
                "title": "easy-cpp-solution-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> ans = nums;\\n\\n        for(int i=0; i<ans.size(); i++){\\n            if(i+1 < ans.size() && ans[i] == ans[i+1]){\\n                ans[i] *= 2;\\n                ans[i+1] = 0;\\n            }\\n        }      \\n        int zero=0, non;\\n        while(zero < ans.size() && non < ans.size()){\\n            while(zero < ans.size() && ans[zero] != 0) zero++;\\n            non = zero;\\n            while(non < ans.size() && ans[non] == 0) non++;\\n            if(zero < ans.size() && non < ans.size()){\\n                swap(ans[non], ans[zero++]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> ans = nums;\\n\\n        for(int i=0; i<ans.size(); i++){\\n            if(i+1 < ans.size() && ans[i] == ans[i+1]){\\n                ans[i] *= 2;\\n                ans[i+1] = 0;\\n            }\\n        }      \\n        int zero=0, non;\\n        while(zero < ans.size() && non < ans.size()){\\n            while(zero < ans.size() && ans[zero] != 0) zero++;\\n            non = zero;\\n            while(non < ans.size() && ans[non] == 0) non++;\\n            if(zero < ans.size() && non < ans.size()){\\n                swap(ans[non], ans[zero++]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930030,
                "title": "time-o-n-space-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        j = 0\\n\\n\\n        for i in range(n-1):\\n\\n            if nums[i] == nums[i+1]:\\n\\n                nums[i],nums[i+1] = 2 * nums[i], nums[i+1] * 0\\n\\n        \\n\\n        for i in range(n):\\n\\n            if nums[i] != 0:\\n\\n                nums[i],nums[j] = nums[j],nums[i]\\n\\n                j += 1\\n\\n\\n        return nums\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        j = 0\\n\\n\\n        for i in range(n-1):\\n\\n            if nums[i] == nums[i+1]:\\n\\n                nums[i],nums[i+1] = 2 * nums[i], nums[i+1] * 0\\n\\n        \\n\\n        for i in range(n):\\n\\n            if nums[i] != 0:\\n\\n                nums[i],nums[j] = nums[j],nums[i]\\n\\n                j += 1\\n\\n\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928267,
                "title": "simple-easy-fast-o-n-java-solution-with-loop-only-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nPlease Upvote \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst for Loop : 1st loop check current (i) and next number (i+1) equal, then current num multiply by 2  and store same i index and next (i+1) number keep as 0. \\n\\nSecond for Loop :  Place the non-zero element first of the array.\\nThrid for Loop : place zero after non-zero element to end of the array\\n\\nI am an active content creator on Youtube. My channel got more than 10k+ Organic subscribers and average views in a month of more than 26k+ . My youtube channel Handle name: @TechTalkDebu\\nChannel Video link: https://youtube.com/c/TechTalkDebu \\nI am a backend java developer, who creates videos on Java, DSA, Spring boot, microservices, and Other tropics.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int length = nums.length;\\n        // count no. of zero\\n        for(int i=0; i<length - 1; i++){\\n            int curNo = nums[i];\\n            int nextNo = nums[i+1];\\n            if(curNo == nextNo){\\n                nums[i] = 2 *  curNo;\\n                nums[i+1] = 0;\\n            }      \\n        }\\n    \\n         int nonZeroElement = 0;\\n        // All the non-Zero elements filled first of the array\\n        for(int i=0; i<length; i++){\\n          if(nums[i] != 0){\\n              nums[nonZeroElement] =  nums[i];\\n              nonZeroElement++;\\n          }\\n        }\\n        // All the zero needs to be filled after non-zero elemnts of the array\\n        for(int i = nonZeroElement; i<length; i++){\\n            nums[i] = 0;\\n        }\\n\\n        return nums;\\n\\n        \\n    }\\n} \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int length = nums.length;\\n        // count no. of zero\\n        for(int i=0; i<length - 1; i++){\\n            int curNo = nums[i];\\n            int nextNo = nums[i+1];\\n            if(curNo == nextNo){\\n                nums[i] = 2 *  curNo;\\n                nums[i+1] = 0;\\n            }      \\n        }\\n    \\n         int nonZeroElement = 0;\\n        // All the non-Zero elements filled first of the array\\n        for(int i=0; i<length; i++){\\n          if(nums[i] != 0){\\n              nums[nonZeroElement] =  nums[i];\\n              nonZeroElement++;\\n          }\\n        }\\n        // All the zero needs to be filled after non-zero elemnts of the array\\n        for(int i = nonZeroElement; i<length; i++){\\n            nums[i] = 0;\\n        }\\n\\n        return nums;\\n\\n        \\n    }\\n} \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928237,
                "title": "simple-easy-fast-o-n-java-solution-with-loop-only-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nPlease Upvote \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst for Loop : 1st loop check current (i) and next number (i+1) equal, then current num multiply by 2  and store same i index and next (i+1) number keep as 0. in that loop also count if current number zero then increase zero counter. (to note number of zero)\\n\\nSecond for Loop :  Place the non zero element first of the array.\\nThrid for Loop : place zero after non zero element to end of the array\\n\\nI am an active content creator on Youtube. My channel got more than 10k+ Organic subscribers and average views in a month of more than 26k+ . My youtube channel Handle name: @TechTalkDebu\\nChannel Video link: https://youtube.com/c/TechTalkDebu \\nI am a backend java developer, who creates videos on Java, DSA, Spring boot, microservices, and Other tropics.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int length = nums.length;\\n        // count no. of zero\\n        int zero = 0;\\n        for(int i=0; i<length - 1; i++){\\n            int curNo = nums[i];\\n            int nextNo = nums[i+1];\\n            if(curNo == nextNo){\\n                nums[i] = 2 *  curNo;\\n                nums[i+1] = 0;\\n            }\\n            if(curNo == 0){\\n                zero++;\\n            }           \\n        }\\n       // for last i+1 need to check zero \\n       if(nums[length-1] == 0){\\n           zero++;\\n       }  \\n\\n         int nonZeroElement = 0;\\n        // All the non-Zero elements filled first of the array\\n        for(int i=0; i<length; i++){\\n          if(nums[i] != 0){\\n              nums[nonZeroElement] =  nums[i];\\n              nonZeroElement++;\\n          }\\n        }\\n        // All the zero needs to be filled after non-zero elemnts of the array\\n        for(int i = nonZeroElement; i<length; i++){\\n            nums[i] = 0;\\n        }\\n\\n        return nums;\\n\\n        \\n    }\\n} \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int length = nums.length;\\n        // count no. of zero\\n        int zero = 0;\\n        for(int i=0; i<length - 1; i++){\\n            int curNo = nums[i];\\n            int nextNo = nums[i+1];\\n            if(curNo == nextNo){\\n                nums[i] = 2 *  curNo;\\n                nums[i+1] = 0;\\n            }\\n            if(curNo == 0){\\n                zero++;\\n            }           \\n        }\\n       // for last i+1 need to check zero \\n       if(nums[length-1] == 0){\\n           zero++;\\n       }  \\n\\n         int nonZeroElement = 0;\\n        // All the non-Zero elements filled first of the array\\n        for(int i=0; i<length; i++){\\n          if(nums[i] != 0){\\n              nums[nonZeroElement] =  nums[i];\\n              nonZeroElement++;\\n          }\\n        }\\n        // All the zero needs to be filled after non-zero elemnts of the array\\n        for(int i = nonZeroElement; i<length; i++){\\n            nums[i] = 0;\\n        }\\n\\n        return nums;\\n\\n        \\n    }\\n} \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3924711,
                "title": "simple-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for(var i=0;i<nums.length-1;i++)\\n    {\\n        if(nums[i]!=0)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n                i++;\\n            }\\n        }\\n    }\\n    for(var i=nums.length-1;i>=0;i--)\\n    {\\n        if(nums[i]==0)\\n        {\\n            var z=nums.splice(i,1);\\n            nums.push(z);\\n        }\\n    }\\n    return nums;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for(var i=0;i<nums.length-1;i++)\\n    {\\n        if(nums[i]!=0)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]=nums[i]*2;\\n                nums[i+1]=0;\\n                i++;\\n            }\\n        }\\n    }\\n    for(var i=nums.length-1;i>=0;i--)\\n    {\\n        if(nums[i]==0)\\n        {\\n            var z=nums.splice(i,1);\\n            nums.push(z);\\n        }\\n    }\\n    return nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923076,
                "title": "clean-go-solution-one-pass-in-place",
                "content": "# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nfunc applyOperations(nums []int) []int {\\n\\tlast := 0\\n\\tfor i := 0; i < len(nums); i++ {\\n\\t\\tif i+1 < len(nums) && nums[i] == nums[i+1] {\\n\\t\\t\\tnums[i] *= 2\\n\\t\\t\\tnums[i+1] = 0\\n\\t\\t}\\n\\t\\tif nums[i] != 0 {\\n\\t\\t\\tif i != last {\\n\\t\\t\\t\\tnums[last], nums[i] = nums[i], 0\\n\\t\\t\\t}\\n\\t\\t\\tlast++\\n\\t\\t}\\n\\t}\\n\\treturn nums\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc applyOperations(nums []int) []int {\\n\\tlast := 0\\n\\tfor i := 0; i < len(nums); i++ {\\n\\t\\tif i+1 < len(nums) && nums[i] == nums[i+1] {\\n\\t\\t\\tnums[i] *= 2\\n\\t\\t\\tnums[i+1] = 0\\n\\t\\t}\\n\\t\\tif nums[i] != 0 {\\n\\t\\t\\tif i != last {\\n\\t\\t\\t\\tnums[last], nums[i] = nums[i], 0\\n\\t\\t\\t}\\n\\t\\t\\tlast++\\n\\t\\t}\\n\\t}\\n\\treturn nums\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3915253,
                "title": "python-fast-and-simple-solutions-with-explanation-beats-99",
                "content": "# Approach\\nCreate a new list to store the modified integers.\\nIterate through the elements of the original list.\\nIf the current element num[i] is not equal to 0 (num[i] != 0), check condition.\\nWhile iterating, keep track of the count of consecutive 0s encountered.\\nAfter iterating through the original list, append the last element of the original list to the new list. No checks are needed because the last element would have been modified during the iteration.\\nFinally, add the counted consecutive zeros to the end of the new list.\\n\\n(While loop is arguably faster as we can skip one iteration every time nums[i] == nums[i+1]. But I\\'m too lazy to do any tests)\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        zeros = 0\\n        output = []\\n        for i in range(len(nums)-1):\\n            if nums[i] != 0:\\n                if nums[i] == nums[i+1]:\\n                    output.append(nums[i] * 2)\\n                    nums[i+1] = 0   \\n                else:\\n                    output.append(nums[i])\\n            else:\\n                zeros += 1\\n                \\n        return output + [nums[-1]] + [0]*zeros\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        zeros = 0\\n        output = []\\n        for i in range(len(nums)-1):\\n            if nums[i] != 0:\\n                if nums[i] == nums[i+1]:\\n                    output.append(nums[i] * 2)\\n                    nums[i+1] = 0   \\n                else:\\n                    output.append(nums[i])\\n            else:\\n                zeros += 1\\n                \\n        return output + [nums[-1]] + [0]*zeros\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914085,
                "title": "easy-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nModifing numbers according to the condition and then taking a new array filled with zeros and then appending the non zeros values to it with all zeros at the end.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- In this question we need to multiply the number by 2 if the two consecutive numbers are equal and make the second number 0\\nAnd shift all the zeros to the last .\\n- Here we have first run a loop from start to n-1 then we have checked whether current and the next elements are equal or not then we apply the operation .\\n- We change the first number to double of it and the second number to 0 \\nThen for taking all the zeros to end we make an new array filled with zeros .\\n- And then we append the number by running a while loop and in the while loop i have given the condition that current element of initial array is not zero then we append it in the new array arr .\\n- Here to move the pointer in the initial array i have taken k so if there is zero then it will go in else condition and will get incremented but here we are not incrementing the pointer of new arr as we need to take the zeros at the end.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                a=0\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n                a=nums[i+1]\\n        arr=[0]*len(nums)\\n        j=0\\n        k=0\\n        while j < len(nums) and k<len(nums):\\n            if nums[k]!=0 :\\n                arr[j]=nums[k]                    \\n                j+=1\\n                k+=1\\n            else:\\n                k+=1    \\n        return(arr)       \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                a=0\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n                a=nums[i+1]\\n        arr=[0]*len(nums)\\n        j=0\\n        k=0\\n        while j < len(nums) and k<len(nums):\\n            if nums[k]!=0 :\\n                arr[j]=nums[k]                    \\n                j+=1\\n                k+=1\\n            else:\\n                k+=1    \\n        return(arr)       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3911796,
                "title": "easy-understanding-java-solution",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] res = new int[nums.length];\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] == nums[i - 1]) {\\n                nums[i - 1] *= 2;\\n                nums[i] = 0;\\n            }\\n        }\\n        int idx = 0;\\n        for (int num: nums) {\\n            if (num != 0) {\\n                res[idx++] = num;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] res = new int[nums.length];\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] == nums[i - 1]) {\\n                nums[i - 1] *= 2;\\n                nums[i] = 0;\\n            }\\n        }\\n        int idx = 0;\\n        for (int num: nums) {\\n            if (num != 0) {\\n                res[idx++] = num;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3903298,
                "title": "c-3-for-loops",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> ans  ;  \\n\\n        for   (  int i = 0  ; i < nums.size() - 1    ; i++ ){\\n            \\n            if( nums[i]  ==  nums[i + 1  ]){\\n                nums[i]  = nums[i] * 2  ;  \\n                nums[i+ 1  ]  = 0  ;  \\n                i++   ; \\n\\n            }  \\n        }\\n\\n        for ( int  i  = 0  ; i  <  nums.size()  ;i++  ){\\n            if  (  nums[i] !=  0  ){\\n                ans.push_back(nums[i])  ; \\n\\n            }\\n        }\\n\\n        for( int i = 0   ;i   <  nums.size()  ; i++  ){\\n            if  ( nums[i] ==   0  ){\\n                ans.push_back(nums[i] )  ; \\n\\n            }\\n        }\\n\\n\\n        return ans  ; \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        vector<int> ans  ;  \\n\\n        for   (  int i = 0  ; i < nums.size() - 1    ; i++ ){\\n            \\n            if( nums[i]  ==  nums[i + 1  ]){\\n                nums[i]  = nums[i] * 2  ;  \\n                nums[i+ 1  ]  = 0  ;  \\n                i++   ; \\n\\n            }  \\n        }\\n\\n        for ( int  i  = 0  ; i  <  nums.size()  ;i++  ){\\n            if  (  nums[i] !=  0  ){\\n                ans.push_back(nums[i])  ; \\n\\n            }\\n        }\\n\\n        for( int i = 0   ;i   <  nums.size()  ; i++  ){\\n            if  ( nums[i] ==   0  ){\\n                ans.push_back(nums[i] )  ; \\n\\n            }\\n        }\\n\\n\\n        return ans  ; \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3901836,
                "title": "easy-java-100-time-complexity",
                "content": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] result = new int[nums.length]; \\n        int index = 0;\\n\\n        for(int i=0; i<result.length; i++){\\n            if(nums[i] != 0){\\n                if((i+1) < nums.length && nums[i] == nums[i+1]){\\n                    nums[i+1] = 0;\\n                    result[index++] = nums[i] * 2;\\n                }\\n                else \\n                    result[index++] = nums[i];\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int[] result = new int[nums.length]; \\n        int index = 0;\\n\\n        for(int i=0; i<result.length; i++){\\n            if(nums[i] != 0){\\n                if((i+1) < nums.length && nums[i] == nums[i+1]){\\n                    nums[i+1] = 0;\\n                    result[index++] = nums[i] * 2;\\n                }\\n                else \\n                    result[index++] = nums[i];\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3890469,
                "title": "array-operation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)):\\n            if i+1!=len(nums):\\n                if nums[i]==nums[i+1]:\\n                    nums[i]*=2\\n                    nums[i+1]=0\\n        n=nums.count(0)\\n        while n!=0:\\n            nums.append(nums.pop(nums.index(0)))\\n            n-=1\\n        return nums\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)):\\n            if i+1!=len(nums):\\n                if nums[i]==nums[i+1]:\\n                    nums[i]*=2\\n                    nums[i+1]=0\\n        n=nums.count(0)\\n        while n!=0:\\n            nums.append(nums.pop(nums.index(0)))\\n            n-=1\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3889036,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] ApplyOperations(int[] nums) {\\n        for(int i=1;i<nums.Length;i++){\\n            if(nums[i-1] == nums[i]){\\n                nums[i-1] = nums[i]*2;\\n                nums[i] = 0;\\n            }\\n        }\\n        \\n        return Approach(nums);\\n    }\\n    static int[] Approach(int[] array)  \\n    {  \\n        for (int i = 0; i < array.Length; i++)  \\n        {  \\n            //skip non-zero elements  \\n            if (array[i] != 0)  \\n                continue;  \\n            //look for the nearest non-zero  \\n            for (int j = i + 1; j < array.Length; j++)  \\n            {  \\n                if (array[j] == 0)  \\n                    continue;  \\n                //swap it with our zero  \\n                array[i] = array[j];  \\n                array[j] = 0;  \\n                break;  \\n            }  \\n        }  \\n        return array;  \\n    }  \\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] ApplyOperations(int[] nums) {\\n        for(int i=1;i<nums.Length;i++){\\n            if(nums[i-1] == nums[i]){\\n                nums[i-1] = nums[i]*2;\\n                nums[i] = 0;\\n            }\\n        }\\n        \\n        return Approach(nums);\\n    }\\n    static int[] Approach(int[] array)  \\n    {  \\n        for (int i = 0; i < array.Length; i++)  \\n        {  \\n            //skip non-zero elements  \\n            if (array[i] != 0)  \\n                continue;  \\n            //look for the nearest non-zero  \\n            for (int j = i + 1; j < array.Length; j++)  \\n            {  \\n                if (array[j] == 0)  \\n                    continue;  \\n                //swap it with our zero  \\n                array[i] = array[j];  \\n                array[j] = 0;  \\n                break;  \\n            }  \\n        }  \\n        return array;  \\n    }  \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3881459,
                "title": "modify-array-js-two-steps-simple-solution",
                "content": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    zero = []\\n    arr = []\\n    // perform multiply and set to 0 operations\\n    for (let i = 0; i < nums.length - 1; i++) {\\n        if (nums[i] == nums[i+1]) {\\n            nums[i] = nums[i] * 2\\n            nums[i+1] = 0\\n        }\\n    }\\n    // move all zeroes to the zero array\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] > 0) {\\n            arr.push(nums[i])\\n        } else {\\n            zero.push(0)\\n        }\\n    }\\n    // concat non-negative integers and zeroes\\n    return arr.concat(zero)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    zero = []\\n    arr = []\\n    // perform multiply and set to 0 operations\\n    for (let i = 0; i < nums.length - 1; i++) {\\n        if (nums[i] == nums[i+1]) {\\n            nums[i] = nums[i] * 2\\n            nums[i+1] = 0\\n        }\\n    }\\n    // move all zeroes to the zero array\\n    for (let i = 0; i < nums.length; i++) {\\n        if (nums[i] > 0) {\\n            arr.push(nums[i])\\n        } else {\\n            zero.push(0)\\n        }\\n    }\\n    // concat non-negative integers and zeroes\\n    return arr.concat(zero)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3880099,
                "title": "c-100",
                "content": "Your runtime beats 100 % of csharp submissions\\nYour memory usage beats 83.78 % of csharp submissions (43.3 MB)\\n# Code\\n```\\npublic class Solution\\n{\\n    public int[] ApplyOperations(int[] nums)\\n    {\\n        int[] result = new int[nums.Length];\\n        for (int i = 0; i < nums.Length - 1; i++)\\n        {\\n            if (nums[i] == nums[i + 1])\\n            {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n                i++;\\n            }\\n        }\\n        for (int i = 0, j = 0; i < nums.Length; i++)\\n        {\\n            if (nums[i] > 0)\\n            {\\n                result[j] = nums[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int[] ApplyOperations(int[] nums)\\n    {\\n        int[] result = new int[nums.Length];\\n        for (int i = 0; i < nums.Length - 1; i++)\\n        {\\n            if (nums[i] == nums[i + 1])\\n            {\\n                nums[i] *= 2;\\n                nums[i + 1] = 0;\\n                i++;\\n            }\\n        }\\n        for (int i = 0, j = 0; i < nums.Length; i++)\\n        {\\n            if (nums[i] > 0)\\n            {\\n                result[j] = nums[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3874407,
                "title": "apply-operations-to-an-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] = 2*nums[i];\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int[] arr = new int[nums.length];\\n        int i=0;\\n        for(int j=0;j<arr.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {arr[i] = nums[j];\\n            i++;}\\n        }\\n        for(int j=0;j<arr.length;j++)\\n        {\\n            if(nums[j]==0)\\n            {\\n                arr[i] = nums[j];\\n                i++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        for(int i=0;i<nums.length-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i] = 2*nums[i];\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int[] arr = new int[nums.length];\\n        int i=0;\\n        for(int j=0;j<arr.length;j++)\\n        {\\n            if(nums[j]!=0)\\n            {arr[i] = nums[j];\\n            i++;}\\n        }\\n        for(int j=0;j<arr.length;j++)\\n        {\\n            if(nums[j]==0)\\n            {\\n                arr[i] = nums[j];\\n                i++;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3871679,
                "title": "easy-method-for-begineers-using-only-for-loop-and-arraylist-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int l=nums.length;\\n        for(int i=0;i<l;i++){\\n            if(i<l-1){\\n                if(nums[i]==nums[i+1]){\\n                    nums[i]*=2;\\n                    nums[i+1]=0;\\n                }\\n            }\\n        } \\n        ArrayList<Integer> yaa=new ArrayList<>();\\n        ArrayList<Integer> juu=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n        if(nums[i]==0){\\n            juu.add(nums[i]);\\n        }else{\\n            yaa.add(nums[i]);\\n        }\\n        }\\n        yaa.addAll(juu);\\n        for(int i=0;i<yaa.size();i++){\\n            nums[i]=yaa.get(i);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int l=nums.length;\\n        for(int i=0;i<l;i++){\\n            if(i<l-1){\\n                if(nums[i]==nums[i+1]){\\n                    nums[i]*=2;\\n                    nums[i+1]=0;\\n                }\\n            }\\n        } \\n        ArrayList<Integer> yaa=new ArrayList<>();\\n        ArrayList<Integer> juu=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n        if(nums[i]==0){\\n            juu.add(nums[i]);\\n        }else{\\n            yaa.add(nums[i]);\\n        }\\n        }\\n        yaa.addAll(juu);\\n        for(int i=0;i<yaa.size();i++){\\n            nums[i]=yaa.get(i);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3867068,
                "title": "java-fastest-solution",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length, k = 0;\\n        int[] arr = new int[n];\\n\\n        for(int i = 0; i < n-1; i++){\\n          if(nums[i] == nums[i+1]){\\n              nums[i] *= 2;\\n              nums[i+1] = 0;\\n          }\\n          if(nums[i] != 0) arr[k++] = nums[i]; \\n        }\\n        \\n        if(nums[n-1] != 0) arr[k] = nums[n-1];\\n        return arr;     \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n        int n = nums.length, k = 0;\\n        int[] arr = new int[n];\\n\\n        for(int i = 0; i < n-1; i++){\\n          if(nums[i] == nums[i+1]){\\n              nums[i] *= 2;\\n              nums[i+1] = 0;\\n          }\\n          if(nums[i] != 0) arr[k++] = nums[i]; \\n        }\\n        \\n        if(nums[n-1] != 0) arr[k] = nums[n-1];\\n        return arr;     \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3866325,
                "title": "c-solution-o-n-time-o-1-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        for(int i = 0; i < nums.size()-1; i++)\\n        {\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int zeros = 0;\\n        for(int i = 0; i < nums.size(); i++)\\n        {\\n            if(nums[i] == 0) zeros++;\\n            else if(zeros > 0)\\n            {\\n                int num = nums[i];\\n                nums[i] = 0;\\n                nums[i - zeros] = num;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) \\n    {\\n        for(int i = 0; i < nums.size()-1; i++)\\n        {\\n            if(nums[i] == nums[i+1])\\n            {\\n                nums[i] *= 2;\\n                nums[i+1] = 0;\\n            }\\n        }\\n        int zeros = 0;\\n        for(int i = 0; i < nums.size(); i++)\\n        {\\n            if(nums[i] == 0) zeros++;\\n            else if(zeros > 0)\\n            {\\n                int num = nums[i];\\n                nums[i] = 0;\\n                nums[i - zeros] = num;\\n            }\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3861161,
                "title": "java-0ms-beats-100",
                "content": "# Intuition\\nThe final array just cares about nonzero values, so ignore zeros as we move through `nums`.\\n\\n# Approach\\n2-pointer approach. One pointer into `res` and another into `nums`.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n\\n        int[] res = new int[nums.length];  // what we\\'ll return\\n        int idxIntoRes = 0;\\n\\n        for (int i = 0; i < nums.length - 1; ++i) {\\n            if (nums[i] == 0) {\\n                continue;\\n            } else if (nums[i] == nums[i + 1]) {\\n                res[idxIntoRes++] = nums[i] * 2;\\n                nums[i + 1] = 0;\\n            } else {  // nums[i] != nums[i + 1]\\n                res[idxIntoRes++] = nums[i];\\n            }\\n        }\\n\\n        res[idxIntoRes++] = nums[nums.length - 1];\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] applyOperations(int[] nums) {\\n\\n        int[] res = new int[nums.length];  // what we\\'ll return\\n        int idxIntoRes = 0;\\n\\n        for (int i = 0; i < nums.length - 1; ++i) {\\n            if (nums[i] == 0) {\\n                continue;\\n            } else if (nums[i] == nums[i + 1]) {\\n                res[idxIntoRes++] = nums[i] * 2;\\n                nums[i + 1] = 0;\\n            } else {  // nums[i] != nums[i + 1]\\n                res[idxIntoRes++] = nums[i];\\n            }\\n        }\\n\\n        res[idxIntoRes++] = nums[nums.length - 1];\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3858714,
                "title": "python-easy-solution-beats-99",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1,len(nums)):\\n            if nums[i-1]!=nums[i]:\\n                continue\\n            nums[i-1]=nums[i-1]*2\\n            nums[i]=0\\n        zeroCount = 0\\n        for i in range(len(nums) - 1, -1, -1):\\n            if nums[i] == 0:\\n                zeroCount += 1\\n                nums.pop(i)\\n        while zeroCount>0:\\n            nums.append(0)\\n            zeroCount-=1\\n        return nums\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(1,len(nums)):\\n            if nums[i-1]!=nums[i]:\\n                continue\\n            nums[i-1]=nums[i-1]*2\\n            nums[i]=0\\n        zeroCount = 0\\n        for i in range(len(nums) - 1, -1, -1):\\n            if nums[i] == 0:\\n                zeroCount += 1\\n                nums.pop(i)\\n        while zeroCount>0:\\n            nums.append(0)\\n            zeroCount-=1\\n        return nums\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855425,
                "title": "single-pass-solution",
                "content": "# Intuition\\nAdd to the end index position of new vector if nums[i] == 0(true or false condition), other to the start index position.\\n\\n# Approach\\nSingle Pass\\n\\n# Complexity\\n- Time complexity:\\nTime - O(n)\\n\\n- Space complexity:\\nSpace - O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> res(n);\\n        int st = 0, ed = n-1;\\n        for(int i=0; i<n-1; i++) {\\n            if(nums[i] == nums[i+1]) {\\n                if(nums[i] == 0) {\\n                    res[ed--] = 0;\\n                } else {\\n                    res[st++] = nums[i] * 2;\\n                }\\n                nums[i+1] = 0;\\n            } else {\\n                if(nums[i] == 0) {\\n                    res[ed--] = 0;\\n                } else {\\n                    res[st++] = nums[i];\\n                }\\n            }\\n        }\\n        if(nums[n-1]) {\\n            res[st++] = nums[n-1];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> res(n);\\n        int st = 0, ed = n-1;\\n        for(int i=0; i<n-1; i++) {\\n            if(nums[i] == nums[i+1]) {\\n                if(nums[i] == 0) {\\n                    res[ed--] = 0;\\n                } else {\\n                    res[st++] = nums[i] * 2;\\n                }\\n                nums[i+1] = 0;\\n            } else {\\n                if(nums[i] == 0) {\\n                    res[ed--] = 0;\\n                } else {\\n                    res[st++] = nums[i];\\n                }\\n            }\\n        }\\n        if(nums[n-1]) {\\n            res[st++] = nums[n-1];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3854934,
                "title": "lambda-to-shift-zero-s-in-python-90",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n\\n        for i in range(len(nums) - 1):\\n            if nums[i] == nums[i+1]:\\n                nums[i] = nums[i] * 2\\n                nums[i+1] = 0\\n        nums.sort(key = lambda x: x == 0)\\n        return nums\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n\\n\\n        for i in range(len(nums) - 1):\\n            if nums[i] == nums[i+1]:\\n                nums[i] = nums[i] * 2\\n                nums[i+1] = 0\\n        nums.sort(key = lambda x: x == 0)\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3849256,
                "title": "86-speed-98-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nApply operation to each element -> shift each zero to the end of array\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nprocedure consists of two algs:\\n1) do the operation to each element of array\\n2) shift each zero to the end of array\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n1) O(n)\\n2) O(n)\\nO(n) + O(n) = O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        auto it_i = nums.begin();\\n        while ( it_i != (nums.end() - 1) ) {\\n            if (*it_i != 0 &&\\n                *it_i == *(it_i + 1)) {\\n                    *it_i = *it_i + *it_i;\\n                    *(it_i + 1) = 0;\\n            }\\n            else {\\n                it_i++;\\n            }\\n        }\\n\\n        auto it_left_zero = nums.begin();\\n        auto it_right_zero = nums.begin();\\n        while ((it_left_zero + 1) != nums.end() && \\n               *it_left_zero != 0) {\\n            it_left_zero++;\\n            it_right_zero++;\\n        }\\n        while (it_right_zero + 1 != nums.end()) {\\n            if ( *(it_right_zero + 1) == 0 ) {\\n                it_right_zero++;\\n            }\\n            else {\\n                *it_left_zero = *(it_right_zero + 1);\\n                *(it_right_zero + 1) = 0;\\n                it_left_zero++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        auto it_i = nums.begin();\\n        while ( it_i != (nums.end() - 1) ) {\\n            if (*it_i != 0 &&\\n                *it_i == *(it_i + 1)) {\\n                    *it_i = *it_i + *it_i;\\n                    *(it_i + 1) = 0;\\n            }\\n            else {\\n                it_i++;\\n            }\\n        }\\n\\n        auto it_left_zero = nums.begin();\\n        auto it_right_zero = nums.begin();\\n        while ((it_left_zero + 1) != nums.end() && \\n               *it_left_zero != 0) {\\n            it_left_zero++;\\n            it_right_zero++;\\n        }\\n        while (it_right_zero + 1 != nums.end()) {\\n            if ( *(it_right_zero + 1) == 0 ) {\\n                it_right_zero++;\\n            }\\n            else {\\n                *it_left_zero = *(it_right_zero + 1);\\n                *(it_right_zero + 1) = 0;\\n                it_left_zero++;\\n            }\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837619,
                "title": "run-operations-and-shift-zeroes",
                "content": "# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums) - 1):\\n            if nums[i] == nums[i + 1]:\\n                nums[i] *= 2\\n                nums[i + 1] = 0\\n        \\n        return [i for i in nums if i > 0] + [i for i in nums if i == 0]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums) - 1):\\n            if nums[i] == nums[i + 1]:\\n                nums[i] *= 2\\n                nums[i + 1] = 0\\n        \\n        return [i for i in nums if i > 0] + [i for i in nums if i == 0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3834114,
                "title": "tc-o-2n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n       for(int i=0;i<nums.size()-1;i++)\\n       {\\n          if(nums[i]==nums[i+1])\\n          {\\n              nums[i]*=2;\\n              nums[i+1]=0;\\n          }\\n       }\\n       int j=0;\\n       for(int i=0;i<nums.size();i++)\\n       {\\n           if(nums[i]!=0)\\n           {\\n             swap(nums[i],nums[j]);\\n             j++;\\n           }\\n       }\\n       return nums;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n       for(int i=0;i<nums.size()-1;i++)\\n       {\\n          if(nums[i]==nums[i+1])\\n          {\\n              nums[i]*=2;\\n              nums[i+1]=0;\\n          }\\n       }\\n       int j=0;\\n       for(int i=0;i<nums.size();i++)\\n       {\\n           if(nums[i]!=0)\\n           {\\n             swap(nums[i],nums[j]);\\n             j++;\\n           }\\n       }\\n       return nums;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3833236,
                "title": "86-beats-runtime-python",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n       \\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n\\n        count = nums.count(0)\\n        nums = [i for i in nums if i!=0]\\n        return nums+([0]*count)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def applyOperations(self, nums: List[int]) -> List[int]:\\n       \\n        for i in range(len(nums)-1):\\n            if nums[i]==nums[i+1]:\\n                nums[i]=nums[i]*2\\n                nums[i+1]=0\\n\\n        count = nums.count(0)\\n        nums = [i for i in nums if i!=0]\\n        return nums+([0]*count)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3826097,
                "title": "go-simple-solution-beats-100-00-with-o-n-time-o-1-space-complexity",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc applyOperations(nums []int) []int {\\n    for i := 0; i < len(nums) - 1; i++ {\\n        if nums[i] == nums[i+1] {\\n          nums[i+1] = 0\\n          nums[i] *= 2  \\n        }\\n    }\\n\\n    var snowBallSize int\\n    for index, num := range nums {\\n        if num == 0 {\\n            snowBallSize++\\n        } else if snowBallSize > 0 {\\n            nums[index - snowBallSize] = num\\n            nums[index] = 0\\n        }\\n    }\\n\\n    return nums\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc applyOperations(nums []int) []int {\\n    for i := 0; i < len(nums) - 1; i++ {\\n        if nums[i] == nums[i+1] {\\n          nums[i+1] = 0\\n          nums[i] *= 2  \\n        }\\n    }\\n\\n    var snowBallSize int\\n    for index, num := range nums {\\n        if num == 0 {\\n            snowBallSize++\\n        } else if snowBallSize > 0 {\\n            nums[index - snowBallSize] = num\\n            nums[index] = 0\\n        }\\n    }\\n\\n    return nums\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3824304,
                "title": "48ms-beats-100-short-and-elegant-solution",
                "content": "# Intuition\\nThe idea here is to multiply value at the current index with `2` and zeroize the next element when current `i` and next `i+1` are equal.\\n\\n# Approach\\nWe iterate `nums` once and skip over the adjacent values that are not equal.\\n\\n# Complexity\\n- Time complexity:\\n$$O(NLogN)$$ A bit expensive since we must sort to array after the operation.\\n\\n- Space complexity:\\n$$O(1)$$ In terms of space complexity, it\\'s a good approach since we modify the array in-place.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for (let i = 0; i < nums.length - 1; i++) {\\n        if (nums[i] === nums[i+1]) {\\n            nums[i] = nums[i] * 2\\n            nums[i+1] = 0\\n        }\\n    }\\n    return nums.sort((a,b) => a === 0 ? 1 : b === 0 ? -1 : 0)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar applyOperations = function(nums) {\\n    for (let i = 0; i < nums.length - 1; i++) {\\n        if (nums[i] === nums[i+1]) {\\n            nums[i] = nums[i] * 2\\n            nums[i+1] = 0\\n        }\\n    }\\n    return nums.sort((a,b) => a === 0 ? 1 : b === 0 ? -1 : 0)\\n};\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1673186,
                "content": [
                    {
                        "username": "coding_menance",
                        "content": "In case anyone is having trouble dealing with the second part of the question where you have to move the zeroes to the end, try doing this question first:\\nhttps://leetcode.com/problems/move-zeroes/\\nI did it using two pointers method, what is your approach for moving 0\\'s to the end of array?"
                    },
                    {
                        "username": "gopalv5020",
                        "content": "I used sorting https://leetcode.com/problems/apply-operations-to-an-array/solutions/3451016/python-solution-using-sorting/"
                    },
                    {
                        "username": "ripunjoy99",
                        "content": "yeah i did the same. Thanks Bro"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "Iterate over the array and simulate the described process. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you want to solve this problem in-place for only one pass, the solution is [here](https://leetcode.com/problems/apply-operations-to-an-array/solutions/3395392/form-result-in-place-while-traversing-array-for-only-one-pass-o-1-space-o-n-time/)."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2460.%20Apply%20Operations%20to%20an%20Array.CPP\\n\\nThis repository contain all LEETCODE SOLUTION IN C++\\nIf you find it useful PLEASE LEAVE A STAR"
                    },
                    {
                        "username": "rajan087",
                        "content": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n        int res=0;\\n        \\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i+1]=0;\\n                nums[i]*=2;\\n            }\\n            if(nums[i]==0)\\n                res++;\\n        }\\n        \\n        if(nums[nums.size()-1]==0)\\n            res++;\\n            \\n        \\n        vector<int> flag;\\n        for(auto i:nums)\\n            if(i>0)\\n                flag.push_back(i);\\n        \\n        for(int i=0;i<res;i++)\\n            flag.push_back(0);\\n        \\n        \\n        \\n        return flag;\\n} [leetcode](https://leetcode.com)\\n};"
                    },
                    {
                        "username": "pbelskiy",
                        "content": "There is another tab now for solutions"
                    }
                ]
            },
            {
                "id": 1684905,
                "content": [
                    {
                        "username": "coding_menance",
                        "content": "In case anyone is having trouble dealing with the second part of the question where you have to move the zeroes to the end, try doing this question first:\\nhttps://leetcode.com/problems/move-zeroes/\\nI did it using two pointers method, what is your approach for moving 0\\'s to the end of array?"
                    },
                    {
                        "username": "gopalv5020",
                        "content": "I used sorting https://leetcode.com/problems/apply-operations-to-an-array/solutions/3451016/python-solution-using-sorting/"
                    },
                    {
                        "username": "ripunjoy99",
                        "content": "yeah i did the same. Thanks Bro"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "Iterate over the array and simulate the described process. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you want to solve this problem in-place for only one pass, the solution is [here](https://leetcode.com/problems/apply-operations-to-an-array/solutions/3395392/form-result-in-place-while-traversing-array-for-only-one-pass-o-1-space-o-n-time/)."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2460.%20Apply%20Operations%20to%20an%20Array.CPP\\n\\nThis repository contain all LEETCODE SOLUTION IN C++\\nIf you find it useful PLEASE LEAVE A STAR"
                    },
                    {
                        "username": "rajan087",
                        "content": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n        int res=0;\\n        \\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i+1]=0;\\n                nums[i]*=2;\\n            }\\n            if(nums[i]==0)\\n                res++;\\n        }\\n        \\n        if(nums[nums.size()-1]==0)\\n            res++;\\n            \\n        \\n        vector<int> flag;\\n        for(auto i:nums)\\n            if(i>0)\\n                flag.push_back(i);\\n        \\n        for(int i=0;i<res;i++)\\n            flag.push_back(0);\\n        \\n        \\n        \\n        return flag;\\n} [leetcode](https://leetcode.com)\\n};"
                    },
                    {
                        "username": "pbelskiy",
                        "content": "There is another tab now for solutions"
                    }
                ]
            },
            {
                "id": 1857648,
                "content": [
                    {
                        "username": "coding_menance",
                        "content": "In case anyone is having trouble dealing with the second part of the question where you have to move the zeroes to the end, try doing this question first:\\nhttps://leetcode.com/problems/move-zeroes/\\nI did it using two pointers method, what is your approach for moving 0\\'s to the end of array?"
                    },
                    {
                        "username": "gopalv5020",
                        "content": "I used sorting https://leetcode.com/problems/apply-operations-to-an-array/solutions/3451016/python-solution-using-sorting/"
                    },
                    {
                        "username": "ripunjoy99",
                        "content": "yeah i did the same. Thanks Bro"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "Iterate over the array and simulate the described process. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you want to solve this problem in-place for only one pass, the solution is [here](https://leetcode.com/problems/apply-operations-to-an-array/solutions/3395392/form-result-in-place-while-traversing-array-for-only-one-pass-o-1-space-o-n-time/)."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2460.%20Apply%20Operations%20to%20an%20Array.CPP\\n\\nThis repository contain all LEETCODE SOLUTION IN C++\\nIf you find it useful PLEASE LEAVE A STAR"
                    },
                    {
                        "username": "rajan087",
                        "content": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n        int res=0;\\n        \\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i+1]=0;\\n                nums[i]*=2;\\n            }\\n            if(nums[i]==0)\\n                res++;\\n        }\\n        \\n        if(nums[nums.size()-1]==0)\\n            res++;\\n            \\n        \\n        vector<int> flag;\\n        for(auto i:nums)\\n            if(i>0)\\n                flag.push_back(i);\\n        \\n        for(int i=0;i<res;i++)\\n            flag.push_back(0);\\n        \\n        \\n        \\n        return flag;\\n} [leetcode](https://leetcode.com)\\n};"
                    },
                    {
                        "username": "pbelskiy",
                        "content": "There is another tab now for solutions"
                    }
                ]
            },
            {
                "id": 1795351,
                "content": [
                    {
                        "username": "coding_menance",
                        "content": "In case anyone is having trouble dealing with the second part of the question where you have to move the zeroes to the end, try doing this question first:\\nhttps://leetcode.com/problems/move-zeroes/\\nI did it using two pointers method, what is your approach for moving 0\\'s to the end of array?"
                    },
                    {
                        "username": "gopalv5020",
                        "content": "I used sorting https://leetcode.com/problems/apply-operations-to-an-array/solutions/3451016/python-solution-using-sorting/"
                    },
                    {
                        "username": "ripunjoy99",
                        "content": "yeah i did the same. Thanks Bro"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "Iterate over the array and simulate the described process. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you want to solve this problem in-place for only one pass, the solution is [here](https://leetcode.com/problems/apply-operations-to-an-array/solutions/3395392/form-result-in-place-while-traversing-array-for-only-one-pass-o-1-space-o-n-time/)."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2460.%20Apply%20Operations%20to%20an%20Array.CPP\\n\\nThis repository contain all LEETCODE SOLUTION IN C++\\nIf you find it useful PLEASE LEAVE A STAR"
                    },
                    {
                        "username": "rajan087",
                        "content": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n        int res=0;\\n        \\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i+1]=0;\\n                nums[i]*=2;\\n            }\\n            if(nums[i]==0)\\n                res++;\\n        }\\n        \\n        if(nums[nums.size()-1]==0)\\n            res++;\\n            \\n        \\n        vector<int> flag;\\n        for(auto i:nums)\\n            if(i>0)\\n                flag.push_back(i);\\n        \\n        for(int i=0;i<res;i++)\\n            flag.push_back(0);\\n        \\n        \\n        \\n        return flag;\\n} [leetcode](https://leetcode.com)\\n};"
                    },
                    {
                        "username": "pbelskiy",
                        "content": "There is another tab now for solutions"
                    }
                ]
            },
            {
                "id": 1673205,
                "content": [
                    {
                        "username": "coding_menance",
                        "content": "In case anyone is having trouble dealing with the second part of the question where you have to move the zeroes to the end, try doing this question first:\\nhttps://leetcode.com/problems/move-zeroes/\\nI did it using two pointers method, what is your approach for moving 0\\'s to the end of array?"
                    },
                    {
                        "username": "gopalv5020",
                        "content": "I used sorting https://leetcode.com/problems/apply-operations-to-an-array/solutions/3451016/python-solution-using-sorting/"
                    },
                    {
                        "username": "ripunjoy99",
                        "content": "yeah i did the same. Thanks Bro"
                    },
                    {
                        "username": "sarvar_raxmonov",
                        "content": "Iterate over the array and simulate the described process. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you want to solve this problem in-place for only one pass, the solution is [here](https://leetcode.com/problems/apply-operations-to-an-array/solutions/3395392/form-result-in-place-while-traversing-array-for-only-one-pass-o-1-space-o-n-time/)."
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2460.%20Apply%20Operations%20to%20an%20Array.CPP\\n\\nThis repository contain all LEETCODE SOLUTION IN C++\\nIf you find it useful PLEASE LEAVE A STAR"
                    },
                    {
                        "username": "rajan087",
                        "content": "class Solution {\\npublic:\\n    vector<int> applyOperations(vector<int>& nums) {\\n        \\n        int res=0;\\n        \\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i+1]=0;\\n                nums[i]*=2;\\n            }\\n            if(nums[i]==0)\\n                res++;\\n        }\\n        \\n        if(nums[nums.size()-1]==0)\\n            res++;\\n            \\n        \\n        vector<int> flag;\\n        for(auto i:nums)\\n            if(i>0)\\n                flag.push_back(i);\\n        \\n        for(int i=0;i<res;i++)\\n            flag.push_back(0);\\n        \\n        \\n        \\n        return flag;\\n} [leetcode](https://leetcode.com)\\n};"
                    },
                    {
                        "username": "pbelskiy",
                        "content": "There is another tab now for solutions"
                    }
                ]
            }
        ]
    }
]