[
    {
        "title": "Sort the Students by Their Kth Score",
        "question_content": "There is a class with m students and n exams. You are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. The matrix score contains distinct integers only.\nYou are also given an integer k. Sort the students (i.e., the rows of the matrix) by their scores in the kth&nbsp;(0-indexed) exam from the highest to the lowest.\nReturn the matrix after sorting it.\n&nbsp;\nExample 1:\n\nInput: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2\nOutput: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]\nExplanation: In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place.\n- The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place.\n- The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place.\n\nExample 2:\n\nInput: score = [[3,4],[5,6]], k = 0\nOutput: [[5,6],[3,4]]\nExplanation: In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 5 in exam 0, which is the highest score, so they got first place.\n- The student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place.\n\n&nbsp;\nConstraints:\n\n\tm == score.length\n\tn == score[i].length\n\t1 <= m, n <= 250\n\t1 <= score[i][j] <= 105\n\tscore consists of distinct integers.\n\t0 <= k < n",
        "solutions": [
            {
                "id": 3083946,
                "title": "java-c-python-sort",
                "content": "# **Explanation**\\nSort on `A[i][k]`\\n<br>\\n\\n# **Complexity**\\nTime `O(quick sort)`\\nSpace `O(quick sort)`\\n<br>\\n\\n**Java**\\n```java\\n    public int[][] sortTheStudents(int[][] A, int k) {\\n        Arrays.sort(A, (a, b) -> b[k] - a[k]);\\n        return A;\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& A, int k) {\\n        sort(A.begin(), A.end(), [&](auto const & a, auto const & b) {\\n            return a[k] > b[k];\\n        });\\n        return A;\\n    }\\n```\\n\\n**Python**\\nreturn new copy\\n```py\\n    def sortTheStudents(self, A, k):\\n        return sorted(A, key=lambda a: -a[k])\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```java\\n    public int[][] sortTheStudents(int[][] A, int k) {\\n        Arrays.sort(A, (a, b) -> b[k] - a[k]);\\n        return A;\\n    }\\n```\n```cpp\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& A, int k) {\\n        sort(A.begin(), A.end(), [&](auto const & a, auto const & b) {\\n            return a[k] > b[k];\\n        });\\n        return A;\\n    }\\n```\n```py\\n    def sortTheStudents(self, A, k):\\n        return sorted(A, key=lambda a: -a[k])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3083856,
                "title": "sort-with-custom-comparator",
                "content": "**C++**\\n```cpp\\nvector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n    sort(begin(score), end(score), [&](const auto &s1, const auto &s2){ return s1[k] > s2[k]; });\\n    return score;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nvector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n    sort(begin(score), end(score), [&](const auto &s1, const auto &s2){ return s1[k] > s2[k]; });\\n    return score;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3083812,
                "title": "c-using-comparator-function",
                "content": "```\\n    int k1;\\n     bool comp(vector<int>&a,vector<int>&b)\\n    {\\n      return a[k1]>b[k1];  \\n    }\\nclass Solution {\\npublic:\\n   \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        k1=k;    \\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n    int k1;\\n     bool comp(vector<int>&a,vector<int>&b)\\n    {\\n      return a[k1]>b[k1];  \\n    }\\nclass Solution {\\npublic:\\n   \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        k1=k;    \\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083937,
                "title": "c-max-heap-priority-queue-explained-with-comments",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int m = score.size();\\n        int n = score[0].size();\\n        \\n        //store col value and index in max heap\\n        priority_queue<pair<int, int>> pq;\\n        for(int i=0; i<m; i++){\\n            pq.push({score[i][k], i});\\n        }\\n\\n        \\n        //now place rows first which have higher col value\\n        vector<vector<int>> res;\\n        while(!pq.empty()){\\n            int row = pq.top().second;\\n            pq.pop();\\n            res.push_back(score[row]);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```\\n\\n\\nDo upvote if it helps:)\\n\\nCheck out my youtube channel for related content\\nhttps://www.youtube.com/@ignition548/featured",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int m = score.size();\\n        int n = score[0].size();\\n        \\n        //store col value and index in max heap\\n        priority_queue<pair<int, int>> pq;\\n        for(int i=0; i<m; i++){\\n            pq.push({score[i][k], i});\\n        }\\n\\n        \\n        //now place rows first which have higher col value\\n        vector<vector<int>> res;\\n        while(!pq.empty()){\\n            int row = pq.top().second;\\n            pq.pop();\\n            res.push_back(score[row]);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083775,
                "title": "c-using-vector-pair-comments-added-simple-easy",
                "content": "**Please Upvote If It Helps**\\n\\n**Time Complexity : O(N logN)**\\n**Soace  Complexity : O(2N+N*N)**\\n\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        int n = score.size();                   // rows\\n        \\n        vector<pair<int,int>> v;\\n        for(int i=0;i<n;i++)\\n        {\\n            v.push_back({score[i][k],i});       // stroing {score of Kth col in ith row, and their ith row value}\\n        }\\n        \\n        sort(v.begin(),v.end());                // based on increasing score of kth col\\n        reverse(v.begin(),v.end());             // based on decreasing score of kth col\\n        \\n        vector<vector<int>> ans;\\n        for(auto &it : v)\\n        {\\n            ans.push_back(score[it.second]);        // now put each row one by one into our ans in decresing manner(based on kth col)\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        int n = score.size();                   // rows\\n        \\n        vector<pair<int,int>> v;\\n        for(int i=0;i<n;i++)\\n        {\\n            v.push_back({score[i][k],i});       // stroing {score of Kth col in ith row, and their ith row value}\\n        }\\n        \\n        sort(v.begin(),v.end());                // based on increasing score of kth col\\n        reverse(v.begin(),v.end());             // based on decreasing score of kth col\\n        \\n        vector<vector<int>> ans;\\n        for(auto &it : v)\\n        {\\n            ans.push_back(score[it.second]);        // now put each row one by one into our ans in decresing manner(based on kth col)\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083873,
                "title": "python3-easy-solution",
                "content": "\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n*log(n))$$\\n# Python3\\n```\\nclass Solution:\\n    def sortTheStudents(self, a: List[List[int]], k: int) -> List[List[int]]:\\n        v=[]\\n        \\n        for i in range(len(a)):\\n            v+=[[a[i][k],a[i]]]\\n        print(v)\\n        def cmp(a):\\n            return a[0]\\n        v=sorted(v,key=cmp)[::-1]\\n        print(v)\\n        ans=[]\\n        for i in range(len(v)):\\n            a[i]=v[i][1]\\n        return a\\n```\\nPlease UPVOTE if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, a: List[List[int]], k: int) -> List[List[int]]:\\n        v=[]\\n        \\n        for i in range(len(a)):\\n            v+=[[a[i][k],a[i]]]\\n        print(v)\\n        def cmp(a):\\n            return a[0]\\n        v=sorted(v,key=cmp)[::-1]\\n        print(v)\\n        ans=[]\\n        for i in range(len(v)):\\n            a[i]=v[i][1]\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084013,
                "title": "java-custom-sort-easy",
                "content": "\\u2757Do UPVOTE\\uD83D\\uDC4D\\n```\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n     for(int z=0;z<score.length-1;z++){\\n         for(int i=0;i<score.length-1;i++){\\n               if(score[i][k] < score[i+1][k]) swap(score,i,i+1);\\n        }\\n     }\\n     return score; \\n    }\\n    void swap(int [][]mat, int row1, int row2){\\n        for(int i=row1;i<row2;i++){\\n            for(int j=0;j<mat[i].length;j++){\\n                int tmp=mat[i][j];\\n                mat[i][j]=mat[i+1][j];\\n                mat[i+1][j]=tmp;\\n            }\\n        }\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n     for(int z=0;z<score.length-1;z++){\\n         for(int i=0;i<score.length-1;i++){\\n               if(score[i][k] < score[i+1][k]) swap(score,i,i+1);\\n        }\\n     }\\n     return score; \\n    }\\n    void swap(int [][]mat, int row1, int row2){\\n        for(int i=row1;i<row2;i++){\\n            for(int j=0;j<mat[i].length;j++){\\n                int tmp=mat[i][j];\\n                mat[i][j]=mat[i+1][j];\\n                mat[i+1][j]=tmp;\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3087077,
                "title": "c-with-without-comparator-function-alternative-approach-beginner-friendly",
                "content": "# Intuition 1\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThought of doing using Comparator Function|\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSort this using comparator function directly.\\n\\n---\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime it took in sorting is its total complexity: O(n(logn)).\\n\\n\\n\\n# Code\\n```\\nint r;\\nbool comp(vector<int>& a, vector<int>& b)\\n{   \\n    return (a[r]>b[r]); \\n}\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       // need to store k globally so can be used in comp function\\n        r=k;\\n       // used comparator function for sorting\\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n    }\\n};\\n```\\n\\n# Intuition 2\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThought of doing using regular sort function only.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Firstly swapped the first column and the kth column.\\n2. Now, I can simpy sort it in descending order by sort function only as the first value will be the value of kth column.\\n3. As now the score is sorted on the basis of column only we can swap back the value of kth column and first column.\\n\\n---\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime it took in sorting is its total complexity: O(n(logn)).\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       // swap values of kth position to first position.\\n        for(int i=0; i<score.size(); i++)\\n        {\\n            int temp=score[i][0];\\n            score[i][0]=score[i][k];\\n            score[i][k]=temp;\\n            \\n        }\\n        // now sort by sort fuction as the kth column will be the first column the sorting will be done according kth column.\\n        sort(score.rbegin(),score.rend());\\n        \\n        // Again make sure to swap the kth and first column values.\\n         for(int i=0; i<score.size(); i++)\\n        {\\n            int temp=score[i][0];\\n            score[i][0]=score[i][k];\\n            score[i][k]=temp;\\n            \\n        }\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint r;\\nbool comp(vector<int>& a, vector<int>& b)\\n{   \\n    return (a[r]>b[r]); \\n}\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       // need to store k globally so can be used in comp function\\n        r=k;\\n       // used comparator function for sorting\\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       // swap values of kth position to first position.\\n        for(int i=0; i<score.size(); i++)\\n        {\\n            int temp=score[i][0];\\n            score[i][0]=score[i][k];\\n            score[i][k]=temp;\\n            \\n        }\\n        // now sort by sort fuction as the kth column will be the first column the sorting will be done according kth column.\\n        sort(score.rbegin(),score.rend());\\n        \\n        // Again make sure to swap the kth and first column values.\\n         for(int i=0; i<score.size(); i++)\\n        {\\n            int temp=score[i][0];\\n            score[i][0]=score[i][k];\\n            score[i][k]=temp;\\n            \\n        }\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083914,
                "title": "java-python-3-short-codes-sort-by-the-kth-exam",
                "content": "\\n```java\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        return Arrays.stream(score).sorted(Comparator.comparing(a -> -a[k])).toArray(int[][]::new);\\n    }\\n```\\n\\n```python\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda a: -a[k])\\n```\\n\\n**Analysis:**\\n\\nTime: `O(nlogn)`, space: `O(n)` - including sorting space, where `n = score[0].length`.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        return Arrays.stream(score).sorted(Comparator.comparing(a -> -a[k])).toArray(int[][]::new);\\n    }\\n```\n```python\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda a: -a[k])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3084796,
                "title": "just-sort-1-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: nlogn\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: likely O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084329,
                "title": "java-1-liner-2-approaches-sorting-custom-comparator-max-heap-priority-queue",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n-  Method 1 :- O( m * (log m) * c ) , where c is the time complexity of the comparator and m is the number of rows.\\n\\n- Method 2 :- O( m * n * log(m) ), where log(m) is for using Max-Heap.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: \\n- Method 1 :- O(1), since no extra space has been taken.\\n\\n- Method 2 :- O( m * n ) since we are creating a new 2 D matrix.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n// 1st method using Custom Comparator\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n      Arrays.sort(score,(s1,s2)->s2[k]-s1[k]);\\n      return score;\\n}\\n\\n\\n\\n\\n// 2nd method using Max Heap(priority-queue)\\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m = score.length;\\n        int n = score[0].length;\\n\\t\\t\\n        PriorityQueue<pair> pq = new PriorityQueue<>((a,b)->(b.y-a.y));\\n        \\n        for(int i = 0; i<m; i++){\\n            for(int j = 0; j<n; j++){\\n                if(j==k)\\n                    pq.add(new pair(i,score[i][j]));\\n            }\\n        }\\n        \\n        int[][] arr = new int[m][n];\\n        \\n        int j = 0;\\n        while(!pq.isEmpty()){\\n            int index = pq.remove().x;\\n            \\n            for(int i = 0; i<n; i++){\\n                arr[j][i] = score[index][i];\\n            }\\n            j++;\\n        }\\n        \\n        \\n        return arr;\\n    }\\n}\\n\\n\\nclass pair{\\n    int x;\\n    int y;\\n    \\n    pair(int X, int Y){\\n        this.x = X;\\n        this.y = Y;\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting",
                    "Heap (Priority Queue)",
                    "Matrix"
                ],
                "code": "```\\n// 1st method using Custom Comparator\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n      Arrays.sort(score,(s1,s2)->s2[k]-s1[k]);\\n      return score;\\n}\\n\\n\\n\\n\\n// 2nd method using Max Heap(priority-queue)\\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m = score.length;\\n        int n = score[0].length;\\n\\t\\t\\n        PriorityQueue<pair> pq = new PriorityQueue<>((a,b)->(b.y-a.y));\\n        \\n        for(int i = 0; i<m; i++){\\n            for(int j = 0; j<n; j++){\\n                if(j==k)\\n                    pq.add(new pair(i,score[i][j]));\\n            }\\n        }\\n        \\n        int[][] arr = new int[m][n];\\n        \\n        int j = 0;\\n        while(!pq.isEmpty()){\\n            int index = pq.remove().x;\\n            \\n            for(int i = 0; i<n; i++){\\n                arr[j][i] = score[index][i];\\n            }\\n            j++;\\n        }\\n        \\n        \\n        return arr;\\n    }\\n}\\n\\n\\nclass pair{\\n    int x;\\n    int y;\\n    \\n    pair(int X, int Y){\\n        this.x = X;\\n        this.y = Y;\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189963,
                "title": "2ms-java-solution-with-explaination-easy-peasy-lemon-squeezy-simple",
                "content": "\\n\\n# Approach\\n    Use selection(reverse) sort algorithm and swap the row having highest value at kth column with row having low value.\\n\\n# Complexity\\n- Time complexity: O(n ^ 2)\\n>\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0;i<score.length;i++){\\n            int index = i;\\n            for(int j = i+1; j < score.length;j++){\\n                if(score[j][k] > score[index][k]){\\n                    index = j;\\n                }\\n            }\\n            swapArray(score,index,i);\\n        }\\n            return score;\\n    }\\n\\n    private void swapArray(int[][] arr,int from,int to){\\n        for(int i = 0;i<arr[0].length;i++){\\n            int temp = arr[from][i];\\n            arr[from][i] = arr[to][i];\\n            arr[to][i] = temp;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0;i<score.length;i++){\\n            int index = i;\\n            for(int j = i+1; j < score.length;j++){\\n                if(score[j][k] > score[index][k]){\\n                    index = j;\\n                }\\n            }\\n            swapArray(score,index,i);\\n        }\\n            return score;\\n    }\\n\\n    private void swapArray(int[][] arr,int from,int to){\\n        for(int i = 0;i<arr[0].length;i++){\\n            int temp = arr[from][i];\\n            arr[from][i] = arr[to][i];\\n            arr[to][i] = temp;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084023,
                "title": "simple-and-easy-to-understand-solution-comparator-function",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        auto comp = [](pair<int,int> &a, pair<int,int> &b){\\n            return a.first > b.first;\\n        };\\n        vector<pair<int,int>> v;\\n        for(int i = 0; i < score.size(); i++) v.push_back({score[i][k], i});\\n        sort(v.begin(), v.end(), comp);\\n        vector<vector<int>> ans;\\n        for(auto i:v) ans.push_back(score[i.second]);\\n        return ans;\\n    }\\n};\\n```\\n\\nHere is an article of my recent interview experience at Amazon, you may like : \\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        auto comp = [](pair<int,int> &a, pair<int,int> &b){\\n            return a.first > b.first;\\n        };\\n        vector<pair<int,int>> v;\\n        for(int i = 0; i < score.size(); i++) v.push_back({score[i][k], i});\\n        sort(v.begin(), v.end(), comp);\\n        vector<vector<int>> ans;\\n        for(auto i:v) ans.push_back(score[i.second]);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3117673,
                "title": "2-d-sorting",
                "content": "# Newbie\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& s, int k) {\\n        int n = s.size(), m = s[0].size();\\n        vector<vector<int>> ret(n, vector<int>(m, 0));\\n        vector<pair<int, int>> v;\\n        for(int i = 0; i < n ; i++) {\\n            v.push_back({s[i][k], i});\\n        }\\n        sort(rbegin(v), rend(v));\\n        \\n        int i = 0;\\n        for(auto [val, row] : v) {\\n            for(int j = 0; j < m; j++) {\\n                ret[i][j] = s[row][j];\\n            }\\n            i++;\\n        }\\n        return ret;\\n    }\\n};\\n```\\n# Using Comparator\\n*Pro Code 1 :*\\n```\\nint ind;\\nbool comp(vector<int> &a, vector<int> &b) {\\n    return a[ind] > b[ind];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        ind = k;\\n        sort(begin(score), end(score), comp);\\n        return score;\\n    }\\n};\\n```\\n*Pro Code 2 :*\\n```\\nvector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n    sort(begin(score), end(score), [&](const auto &s1, const auto &s2){ \\n        return s1[k] > s2[k]; \\n    });\\n    return score;\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& s, int k) {\\n        int n = s.size(), m = s[0].size();\\n        vector<vector<int>> ret(n, vector<int>(m, 0));\\n        vector<pair<int, int>> v;\\n        for(int i = 0; i < n ; i++) {\\n            v.push_back({s[i][k], i});\\n        }\\n        sort(rbegin(v), rend(v));\\n        \\n        int i = 0;\\n        for(auto [val, row] : v) {\\n            for(int j = 0; j < m; j++) {\\n                ret[i][j] = s[row][j];\\n            }\\n            i++;\\n        }\\n        return ret;\\n    }\\n};\\n```\n```\\nint ind;\\nbool comp(vector<int> &a, vector<int> &b) {\\n    return a[ind] > b[ind];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        ind = k;\\n        sort(begin(score), end(score), comp);\\n        return score;\\n    }\\n};\\n```\n```\\nvector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n    sort(begin(score), end(score), [&](const auto &s1, const auto &s2){ \\n        return s1[k] > s2[k]; \\n    });\\n    return score;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083966,
                "title": "c-sorting",
                "content": "# Approach\\n- Step-1: Store the kth column in a vector and sort it in decreasing order.\\n- Step-2: Create a new 2-d vector result of size mxn.\\n- Step-3: Since we know each score is distinct(given), we find the sorted values in the kth column and put the entire row into the result one-by-one.\\n\\n\\n# Code\\n```\\nclass Solution \\n{\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        int r=score.size(), c=score[0].size();\\n        \\n        //Step-1\\n        vector<int> colk;\\n        for(int i=0; i<r; i++)\\n            colk.push_back(score[i][k]);\\n        sort(colk.begin(), colk.end(), greater<int>());\\n        \\n        //Step-2\\n        vector<vector<int>> res(r, vector<int> (c));\\n        int i, j, l;\\n        \\n        //Step-3\\n        for(i=0; i<r; i++) //for filling rows of result vector\\n        {\\n            for(l=0; l<r; l++) //for finding sorted values of colk in the kth column\\n            {\\n                if(score[l][k]==colk[i])\\n                    break;\\n                    \\n            }\\n            \\n            for(j=0; j<c; j++) //filling each column of the found row\\n            {\\n                res[i][j] = score[l][j];\\n            }\\n        }\\n        return res;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sort",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        int r=score.size(), c=score[0].size();\\n        \\n        //Step-1\\n        vector<int> colk;\\n        for(int i=0; i<r; i++)\\n            colk.push_back(score[i][k]);\\n        sort(colk.begin(), colk.end(), greater<int>());\\n        \\n        //Step-2\\n        vector<vector<int>> res(r, vector<int> (c));\\n        int i, j, l;\\n        \\n        //Step-3\\n        for(i=0; i<r; i++) //for filling rows of result vector\\n        {\\n            for(l=0; l<r; l++) //for finding sorted values of colk in the kth column\\n            {\\n                if(score[l][k]==colk[i])\\n                    break;\\n                    \\n            }\\n            \\n            for(j=0; j<c; j++) //filling each column of the found row\\n            {\\n                res[i][j] = score[l][j];\\n            }\\n        }\\n        return res;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550937,
                "title": "c-1-line-easy-to-understand",
                "content": "# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\n(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(),score.end(),[&](vector<int>  &a,vector<int> &b){\\n            return a[k]>b[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(),score.end(),[&](vector<int>  &a,vector<int> &b){\\n            return a[k]>b[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3087362,
                "title": "python-3-one-liner-sort-with-lambda-key-t-m-65-89",
                "content": "The `key`for`sorted`(as well as`.sort()`) for a`List[List[int]]` object by default is equivalent to the alphabetical sort of`List[str]`in which the integers in each`List[int]`play the equivalent role as characters in`str`.\\n\\nWe change the sort`key`from its default with`key = lambda x: -x[k]`to achieve the appropriate ordering for this problem.\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> list[list[int]]:\\n        \\n        return sorted(score, key = lambda x: -x[k])\\n```\\n[https://leetcode.com/problems/sort-the-students-by-their-kth-score/submissions/883229714/](http://)\\n\\n\\nI could be wrong, but I think that time complexity is *O*(*NlogN*) and space complexity is *O*(*N*).\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> list[list[int]]:\\n        \\n        return sorted(score, key = lambda x: -x[k])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085036,
                "title": "c-java-easier-than-easy",
                "content": "\\n# Approach\\nThe Question just needs us to sort the 2D vector accroding to kth row and the rest of data is not affecting the sorting process.\\n\\nSo, we can just sort the data according to jth row.\\nBelow is the implementation in C++ and JAVA.\\n\\n# Code Explanation\\n***cmp function*** :\\ncustom sorting function \"cmp\" which compares two vectors of integers, \"a\" and \"b\", based on their last element. The function returns true if the last element of \"a\" is greater than that of \"b\", and false otherwise.\\n\\nThen we record the values of the ith student\\'s score in the jth exam at the end of the corresponding vector in the 2D \"score\" vector. Then, it sorts the \"score\" vector based on the custom sorting function \"cmp\" which compares the last element of each vector in the 2D vector.\\n\\nAfter sorting, we remove the recorded jth exam data by popping the last element of each vector in the 2D vector and return the sorted 2D vector as the result.\\n\\n# C++ Code\\n```\\nclass Solution {\\n    // Custom sort for sorting data according to the last element\\n    // Last element was jth score of ith student\\n    static bool cmp(vector<int>& a, vector<int>&b) { return a.back()>b.back(); }\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        // Recording the value of ith student in jth exam at the end\\n        for (int i=0;i<score.size();i++) score[i].push_back(score[i][k]);\\n        // Sorting on basis of the ith student in jth exam\\n        sort(score.begin(),score.end(),cmp);\\n        // Removing the recorded jth exam data\\n        for (int i=0;i<score.size();i++) score[i].pop_back();\\n        // Returning the sorted matrix\\n        return score;\\n    }\\n};\\n```\\n# JAVA Code\\n```\\nimport java.util.Arrays;\\nimport java.util.Comparator;\\nimport java.util.Vector;\\n\\nclass Solution {\\n    public static Vector<Vector<Integer>> sortTheStudents(Vector<Vector<Integer>> score, int k) {\\n        // Recording the value of ith student in jth exam at the end\\n        for (int i=0;i<score.size();i++) score.get(i).add(score.get(i).get(k));\\n        // Sorting on basis of the ith student in jth exam\\n        score.sort(new Comparator<Vector<Integer>>() {\\n            @Override\\n            public int compare(Vector<Integer> a, Vector<Integer> b) {\\n                return Integer.compare(b.get(b.size()-1), a.get(a.size()-1));\\n            }\\n        });\\n        // Removing the recorded jth exam data\\n        for (int i=0;i<score.size();i++) score.get(i).remove(score.get(i).size()-1);\\n        // Returning the sorted matrix\\n        return score;\\n    }\\n}\\n```\\n\\n# Complexity\\n- Time complexity:\\n***O(nlogn + n)*** : O(n*Logn) for sorting and O(n) for iterating over the column specified in question.\\n\\n- Space complexity:\\n***O(n)*** : Because for every row, one column is added.\\n.\\n.\\n.\\n\\n*DO UPVOTE IF IT HELPED :)*",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    // Custom sort for sorting data according to the last element\\n    // Last element was jth score of ith student\\n    static bool cmp(vector<int>& a, vector<int>&b) { return a.back()>b.back(); }\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        // Recording the value of ith student in jth exam at the end\\n        for (int i=0;i<score.size();i++) score[i].push_back(score[i][k]);\\n        // Sorting on basis of the ith student in jth exam\\n        sort(score.begin(),score.end(),cmp);\\n        // Removing the recorded jth exam data\\n        for (int i=0;i<score.size();i++) score[i].pop_back();\\n        // Returning the sorted matrix\\n        return score;\\n    }\\n};\\n```\n```\\nimport java.util.Arrays;\\nimport java.util.Comparator;\\nimport java.util.Vector;\\n\\nclass Solution {\\n    public static Vector<Vector<Integer>> sortTheStudents(Vector<Vector<Integer>> score, int k) {\\n        // Recording the value of ith student in jth exam at the end\\n        for (int i=0;i<score.size();i++) score.get(i).add(score.get(i).get(k));\\n        // Sorting on basis of the ith student in jth exam\\n        score.sort(new Comparator<Vector<Integer>>() {\\n            @Override\\n            public int compare(Vector<Integer> a, Vector<Integer> b) {\\n                return Integer.compare(b.get(b.size()-1), a.get(a.size()-1));\\n            }\\n        });\\n        // Removing the recorded jth exam data\\n        for (int i=0;i<score.size();i++) score.get(i).remove(score.get(i).size()-1);\\n        // Returning the sorted matrix\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084989,
                "title": "c-this-code-straightforward-beginnerfriendly-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/753bb9fd-2fbe-4df7-bf88-f790eaec9278_1674372981.6011622.png)\\n\\n**T->O(m) && S->O(mn)**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<vector<int>> sortTheStudents(vector<vector<int>>& s, int k) {\\n\\n\\t\\t\\t\\tmap<int,vector<int>,greater<int>>mp;\\n\\t\\t\\t\\tvector<vector<int>> ans;\\n\\t\\t\\t\\tint m=s.size(),n=s[0].size();\\n\\n\\t\\t\\t\\tfor(int r=0;r<m;r++) mp[s[r][k]]=s[r];\\n\\n\\t\\t\\t\\tfor(auto i:mp) ans.push_back(i.second);\\n\\n\\t\\t\\t\\treturn ans;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<vector<int>> sortTheStudents(vector<vector<int>>& s, int k) {\\n\\n\\t\\t\\t\\tmap<int,vector<int>,greater<int>>mp;\\n\\t\\t\\t\\tvector<vector<int>> ans;\\n\\t\\t\\t\\tint m=s.size(),n=s[0].size();\\n\\n\\t\\t\\t\\tfor(int r=0;r<m;r++) mp[s[r][k]]=s[r];\\n\\n\\t\\t\\t\\tfor(auto i:mp) ans.push_back(i.second);\\n\\n\\t\\t\\t\\treturn ans;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3083928,
                "title": "custom-comparator",
                "content": "Use custom comparator \\n\\n```c++\\nclass Comparator { \\npublic:\\n    int k;\\n    Comparator(int k){\\n        this->k = k;\\n    }\\n    bool operator()(vector<int>& x1, vector<int>& x2)\\n    {\\n        return x1[k] > x2[k];\\n    }\\n};\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(),score.end(), Comparator(k));\\n        return score;\\n    }\\n};\\n```\\n\\nTime complexity : O(NlogN)",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```c++\\nclass Comparator { \\npublic:\\n    int k;\\n    Comparator(int k){\\n        this->k = k;\\n    }\\n    bool operator()(vector<int>& x1, vector<int>& x2)\\n    {\\n        return x1[k] > x2[k];\\n    }\\n};\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(),score.end(), Comparator(k));\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083907,
                "title": "one-liner",
                "content": "**Python**\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda s:s[k], reverse=True)\\n```\\n\\n**Cpp**\\n**A comparator function compares two values and returns a Boolean value indicating whether the first value should come before the second value in a sorting order.**\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        sort(begin(score), end(score), [&](auto &s1, auto &s2) {\\n            return s1[k] > s2[k]; \\n        });\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda s:s[k], reverse=True)\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        sort(begin(score), end(score), [&](auto &s1, auto &s2) {\\n            return s1[k] > s2[k]; \\n        });\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083773,
                "title": "c-simple-comparator",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint r;\\nbool comp(vector<int>& a, vector<int>& b)\\n{   \\n    return (a[r]>b[r]); \\n}\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        r=k;\\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint r;\\nbool comp(vector<int>& a, vector<int>& b)\\n{   \\n    return (a[r]>b[r]); \\n}\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        r=k;\\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630459,
                "title": "java-c-python-merge-sort-divide-conquer-approach-o-n-n-log-n",
                "content": "\\n\\n\\n# Merge Sort\\n```Java []\\nclass Solution {\\n    void fillArray(int[][] score, int[][] temp, int n, int t, int idx) {\\n        for (int i = 0; i < n; i++)\\n            temp[t][i] = score[idx][i];\\n    }\\n\\n    void merge(int[][] score, int n, int l, int mid, int r, int k) {\\n        int p = l, q = mid + 1;\\n        int[][] temp = new int[r - l + 1][n];\\n        int t = 0;\\n        while (p <= mid && q <= r) {\\n            if (score[p][k] > score[q][k]) {\\n                fillArray(score, temp, n, t, p);\\n                p++;\\n                t++;\\n            } \\n            else {\\n                fillArray(score, temp, n, t, q);\\n                q++;\\n                t++;\\n            }\\n        }\\n        while (p <= mid) {\\n            fillArray(score, temp, n, t, p);\\n            p++;\\n            t++;\\n        }\\n        while (q <= r) {\\n            fillArray(score, temp, n, t, q);\\n            q++;\\n            t++;\\n        }\\n\\n        // copy back to score array\\n        for (int i = l, h = 0; i <= r; i++, h++) \\n            for (int j = 0; j < n; j++) \\n                score[i][j] = temp[h][j];\\n    }\\n\\n    void mergeSort(int[][] score, int n, int l, int r, int k) {\\n        if (l >= r) return;\\n\\n        int mid = l + (r - l) / 2;\\n        mergeSort(score, n, l, mid, k);\\n        mergeSort(score, n, mid + 1, r, k);\\n        merge(score, n, l, mid, r, k);\\n    }\\n\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m = score.length, n = score[0].length;\\n        mergeSort(score, n, 0, m - 1, k);\\n        return score;\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    void fillArray(vector<vector<int>>& score, vector<vector<int>>& temp, int n, int t, int idx) {\\n        for (int i = 0; i < n; i++) {\\n            temp[t][i] = score[idx][i];\\n        }\\n    }\\n\\n    void merge(vector<vector<int>>& score, int n, int l, int mid, int r, int k) {\\n        int p = l, q = mid + 1;\\n        vector<vector<int>> temp(r - l + 1, vector<int>(n));\\n        int t = 0;\\n        while (p <= mid && q <= r) {\\n            if (score[p][k] > score[q][k]) {\\n                fillArray(score, temp, n, t, p);\\n                p++;\\n                t++;\\n            } else {\\n                fillArray(score, temp, n, t, q);\\n                q++;\\n                t++;\\n            }\\n        }\\n        while (p <= mid) {\\n            fillArray(score, temp, n, t, p);\\n            p++;\\n            t++;\\n        }\\n        while (q <= r) {\\n            fillArray(score, temp, n, t, q);\\n            q++;\\n            t++;\\n        }\\n\\n        // copy back to score array\\n        for (int i = l, h = 0; i <= r; i++, h++) {\\n            for (int j = 0; j < n; j++) {\\n                score[i][j] = temp[h][j];\\n            }\\n        }\\n    }\\n\\n    void mergeSort(vector<vector<int>>& score, int n, int l, int r, int k) {\\n        if (l >= r) return;\\n\\n        int mid = l + (r - l) / 2;\\n        mergeSort(score, n, l, mid, k);\\n        mergeSort(score, n, mid + 1, r, k);\\n        merge(score, n, l, mid, r, k);\\n    }\\n\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int m = score.size(), n = score[0].size();\\n        mergeSort(score, n, 0, m - 1, k);\\n        return score;\\n    }\\n};\\n```\\n```Python []\\nclass Solution:\\n    def fillArray(self, score, temp, n, t, idx):\\n        for i in range(n):\\n            temp[t][i] = score[idx][i]\\n\\n    def merge(self, score, n, l, mid, r, k):\\n        p = l\\n        q = mid + 1\\n        temp = [[0] * n for _ in range(r - l + 1)]\\n        t = 0\\n        while p <= mid and q <= r:\\n            if score[p][k] > score[q][k]:\\n                self.fillArray(score, temp, n, t, p)\\n                p += 1\\n                t += 1\\n            else:\\n                self.fillArray(score, temp, n, t, q)\\n                q += 1\\n                t += 1\\n\\n        while p <= mid:\\n            self.fillArray(score, temp, n, t, p)\\n            p += 1\\n            t += 1\\n\\n        while q <= r:\\n            self.fillArray(score, temp, n, t, q)\\n            q += 1\\n            t += 1\\n\\n        for i in range(l, r + 1):\\n            for j in range(n):\\n                score[i][j] = temp[i - l][j]\\n\\n    def mergeSort(self, score, n, l, r, k):\\n        if l >= r:\\n            return\\n\\n        mid = l + (r - l) // 2\\n        self.mergeSort(score, n, l, mid, k)\\n        self.mergeSort(score, n, mid + 1, r, k)\\n        self.merge(score, n, l, mid, r, k)\\n\\n    def sortTheStudents(self, score, k):\\n        m = len(score)\\n        n = len(score[0])\\n        self.mergeSort(score, n, 0, m - 1, k)\\n        return score\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Java []\\nclass Solution {\\n    void fillArray(int[][] score, int[][] temp, int n, int t, int idx) {\\n        for (int i = 0; i < n; i++)\\n            temp[t][i] = score[idx][i];\\n    }\\n\\n    void merge(int[][] score, int n, int l, int mid, int r, int k) {\\n        int p = l, q = mid + 1;\\n        int[][] temp = new int[r - l + 1][n];\\n        int t = 0;\\n        while (p <= mid && q <= r) {\\n            if (score[p][k] > score[q][k]) {\\n                fillArray(score, temp, n, t, p);\\n                p++;\\n                t++;\\n            } \\n            else {\\n                fillArray(score, temp, n, t, q);\\n                q++;\\n                t++;\\n            }\\n        }\\n        while (p <= mid) {\\n            fillArray(score, temp, n, t, p);\\n            p++;\\n            t++;\\n        }\\n        while (q <= r) {\\n            fillArray(score, temp, n, t, q);\\n            q++;\\n            t++;\\n        }\\n\\n        // copy back to score array\\n        for (int i = l, h = 0; i <= r; i++, h++) \\n            for (int j = 0; j < n; j++) \\n                score[i][j] = temp[h][j];\\n    }\\n\\n    void mergeSort(int[][] score, int n, int l, int r, int k) {\\n        if (l >= r) return;\\n\\n        int mid = l + (r - l) / 2;\\n        mergeSort(score, n, l, mid, k);\\n        mergeSort(score, n, mid + 1, r, k);\\n        merge(score, n, l, mid, r, k);\\n    }\\n\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m = score.length, n = score[0].length;\\n        mergeSort(score, n, 0, m - 1, k);\\n        return score;\\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    void fillArray(vector<vector<int>>& score, vector<vector<int>>& temp, int n, int t, int idx) {\\n        for (int i = 0; i < n; i++) {\\n            temp[t][i] = score[idx][i];\\n        }\\n    }\\n\\n    void merge(vector<vector<int>>& score, int n, int l, int mid, int r, int k) {\\n        int p = l, q = mid + 1;\\n        vector<vector<int>> temp(r - l + 1, vector<int>(n));\\n        int t = 0;\\n        while (p <= mid && q <= r) {\\n            if (score[p][k] > score[q][k]) {\\n                fillArray(score, temp, n, t, p);\\n                p++;\\n                t++;\\n            } else {\\n                fillArray(score, temp, n, t, q);\\n                q++;\\n                t++;\\n            }\\n        }\\n        while (p <= mid) {\\n            fillArray(score, temp, n, t, p);\\n            p++;\\n            t++;\\n        }\\n        while (q <= r) {\\n            fillArray(score, temp, n, t, q);\\n            q++;\\n            t++;\\n        }\\n\\n        // copy back to score array\\n        for (int i = l, h = 0; i <= r; i++, h++) {\\n            for (int j = 0; j < n; j++) {\\n                score[i][j] = temp[h][j];\\n            }\\n        }\\n    }\\n\\n    void mergeSort(vector<vector<int>>& score, int n, int l, int r, int k) {\\n        if (l >= r) return;\\n\\n        int mid = l + (r - l) / 2;\\n        mergeSort(score, n, l, mid, k);\\n        mergeSort(score, n, mid + 1, r, k);\\n        merge(score, n, l, mid, r, k);\\n    }\\n\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int m = score.size(), n = score[0].size();\\n        mergeSort(score, n, 0, m - 1, k);\\n        return score;\\n    }\\n};\\n```\n```Python []\\nclass Solution:\\n    def fillArray(self, score, temp, n, t, idx):\\n        for i in range(n):\\n            temp[t][i] = score[idx][i]\\n\\n    def merge(self, score, n, l, mid, r, k):\\n        p = l\\n        q = mid + 1\\n        temp = [[0] * n for _ in range(r - l + 1)]\\n        t = 0\\n        while p <= mid and q <= r:\\n            if score[p][k] > score[q][k]:\\n                self.fillArray(score, temp, n, t, p)\\n                p += 1\\n                t += 1\\n            else:\\n                self.fillArray(score, temp, n, t, q)\\n                q += 1\\n                t += 1\\n\\n        while p <= mid:\\n            self.fillArray(score, temp, n, t, p)\\n            p += 1\\n            t += 1\\n\\n        while q <= r:\\n            self.fillArray(score, temp, n, t, q)\\n            q += 1\\n            t += 1\\n\\n        for i in range(l, r + 1):\\n            for j in range(n):\\n                score[i][j] = temp[i - l][j]\\n\\n    def mergeSort(self, score, n, l, r, k):\\n        if l >= r:\\n            return\\n\\n        mid = l + (r - l) // 2\\n        self.mergeSort(score, n, l, mid, k)\\n        self.mergeSort(score, n, mid + 1, r, k)\\n        self.merge(score, n, l, mid, r, k)\\n\\n    def sortTheStudents(self, score, k):\\n        m = len(score)\\n        n = len(score[0])\\n        self.mergeSort(score, n, 0, m - 1, k)\\n        return score\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3330255,
                "title": "simple-and-easy-to-underestand-c-code-using-sorting",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint r;\\nbool comp(vector<int>& a, vector<int>& b)\\n{   \\n    return (a[r]>b[r]); \\n}\\nclass Solution {\\npublic:\\n    \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       // need to store k globally so can be used in comp function\\n        r=k;\\n       // used comparator function for sorting\\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint r;\\nbool comp(vector<int>& a, vector<int>& b)\\n{   \\n    return (a[r]>b[r]); \\n}\\nclass Solution {\\npublic:\\n    \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       // need to store k globally so can be used in comp function\\n        r=k;\\n       // used comparator function for sorting\\n        sort(score.begin(),score.end(),comp);\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299603,
                "title": "sort-using-vector-pair-short-sweet-c-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int n = score.size(); \\n        vector<pair<int,int>> v;\\n        for(int i=0;i<n;i++)\\n        {\\n            v.push_back({score[i][k],i}); \\n        }\\n        sort(v.begin(),v.end());           \\n        reverse(v.begin(),v.end()); \\n        vector<vector<int>> ans;\\n        for(auto &it : v)\\n        {\\n            ans.push_back(score[it.second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int n = score.size(); \\n        vector<pair<int,int>> v;\\n        for(int i=0;i<n;i++)\\n        {\\n            v.push_back({score[i][k],i}); \\n        }\\n        sort(v.begin(),v.end());           \\n        reverse(v.begin(),v.end()); \\n        vector<vector<int>> ans;\\n        for(auto &it : v)\\n        {\\n            ans.push_back(score[it.second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3190121,
                "title": "easy-java-solution-self-explanatory-3ms",
                "content": "# upvote krde bhai nahi lagre paise\\n\\n# Code\\n```\\nclass Solution {\\n    int rows=0;\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        rows = score.length;\\n        for(int i=0;i<rows;i++){\\n            int[] res = maxFinder(i,k,score);\\n            for(int x=0;x<rows;x++){\\n                if(score[x][k]<res[0]){\\n                    for(int e=0;e<score[0].length;e++){\\n                            int val = score[x][e];\\n                            score[x][e]=score[res[1]][e];\\n                            score[res[1]][e]=val;\\n                        }\\n                        break;\\n                    }\\n                }\\n            }\\n        return score;\\n    }\\n    //maxFinder will return max element in array and its row\\n    public int[] maxFinder(int r,int k,int[][] score){ \\n        int max=0;\\n        int rowSwap=0;\\n        for(int i=r;i<rows;i++){\\n            if(max<score[i][k]){\\n                max = score[i][k];\\n                rowSwap=i;\\n            }\\n\\n        }\\n        int[] a = {max,rowSwap};\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    int rows=0;\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        rows = score.length;\\n        for(int i=0;i<rows;i++){\\n            int[] res = maxFinder(i,k,score);\\n            for(int x=0;x<rows;x++){\\n                if(score[x][k]<res[0]){\\n                    for(int e=0;e<score[0].length;e++){\\n                            int val = score[x][e];\\n                            score[x][e]=score[res[1]][e];\\n                            score[res[1]][e]=val;\\n                        }\\n                        break;\\n                    }\\n                }\\n            }\\n        return score;\\n    }\\n    //maxFinder will return max element in array and its row\\n    public int[] maxFinder(int r,int k,int[][] score){ \\n        int max=0;\\n        int rowSwap=0;\\n        for(int i=r;i<rows;i++){\\n            if(max<score[i][k]){\\n                max = score[i][k];\\n                rowSwap=i;\\n            }\\n\\n        }\\n        int[] a = {max,rowSwap};\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176504,
                "title": "one-liner-using-lambda-function",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto &u, auto &v) {\\n            return u[k] > v[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto &u, auto &v) {\\n            return u[k] > v[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3091158,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> kl;\\n        int n = score.size();\\n        int m = score[0].size();\\n        vector<vector<int>> sd(n,vector<int>(m,0));\\n        for(int i=0;i<n;i++) {\\n            kl.push_back({score[i][k],i});\\n        }\\n        sort(kl.begin(),kl.end(),greater<pair<int, int>>());\\n        for(int i=0;i<n;i++){\\n            pair<int,int> nm =kl[i];\\n            int gh = nm.second;\\n           for(int j=0;j<m;j++) {\\n              sd[i][j]=score[gh][j]; \\n           }\\n        }\\n        return sd;;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> kl;\\n        int n = score.size();\\n        int m = score[0].size();\\n        vector<vector<int>> sd(n,vector<int>(m,0));\\n        for(int i=0;i<n;i++) {\\n            kl.push_back({score[i][k],i});\\n        }\\n        sort(kl.begin(),kl.end(),greater<pair<int, int>>());\\n        for(int i=0;i<n;i++){\\n            pair<int,int> nm =kl[i];\\n            int gh = nm.second;\\n           for(int j=0;j<m;j++) {\\n              sd[i][j]=score[gh][j]; \\n           }\\n        }\\n        return sd;;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086901,
                "title": "simple-java-solution-using-hashmap",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n log n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Map<Integer,Integer> nm=new HashMap<>();\\n        for(int i=0;i<score.length;i++)\\n        {\\n            nm.put(i,score[i][k]);\\n        }\\n        List<Map.Entry<Integer,Integer>> kk=new ArrayList<>(nm.entrySet());\\n        Collections.sort(kk , new Comparator<Map.Entry<Integer,Integer>>(){\\n            public int compare(Map.Entry<Integer,Integer> e1 , Map.Entry<Integer,Integer> e2)\\n            {\\n                return e2.getValue() - e1.getValue();\\n            }\\n        });\\n        System.out.println(kk);\\n        int a[][]=new int[score.length][score[0].length];\\n        int p=0;\\n        for(Map.Entry<Integer,Integer> f: kk)\\n        {\\n            int c=f.getKey();\\n            int d=f.getValue();\\n            for(int j=0;j<score[c].length;j++)\\n            {\\n                a[p][j]=score[c][j];\\n            }\\n            p++;\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "Sort",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Map<Integer,Integer> nm=new HashMap<>();\\n        for(int i=0;i<score.length;i++)\\n        {\\n            nm.put(i,score[i][k]);\\n        }\\n        List<Map.Entry<Integer,Integer>> kk=new ArrayList<>(nm.entrySet());\\n        Collections.sort(kk , new Comparator<Map.Entry<Integer,Integer>>(){\\n            public int compare(Map.Entry<Integer,Integer> e1 , Map.Entry<Integer,Integer> e2)\\n            {\\n                return e2.getValue() - e1.getValue();\\n            }\\n        });\\n        System.out.println(kk);\\n        int a[][]=new int[score.length][score[0].length];\\n        int p=0;\\n        for(Map.Entry<Integer,Integer> f: kk)\\n        {\\n            int c=f.getKey();\\n            int d=f.getValue();\\n            for(int j=0;j<score[c].length;j++)\\n            {\\n                a[p][j]=score[c][j];\\n            }\\n            p++;\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085906,
                "title": "easy-sorting",
                "content": "# Intuition\\nSorting\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nSort Rows with respect to specific column value. \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$ O(n^2) $$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$ O(1) $$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for(int j=0;j<score.size();j++){\\n            for(int i=0;i<score.size()-1;i++){\\n                if(score[i][k] < score[i+1][k]){\\n                    swap(score[i] , score[i+1]);\\n                }\\n            }\\n        }\\n        \\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for(int j=0;j<score.size();j++){\\n            for(int i=0;i<score.size()-1;i++){\\n                if(score[i][k] < score[i+1][k]){\\n                    swap(score[i] , score[i+1]);\\n                }\\n            }\\n        }\\n        \\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084858,
                "title": "c-easiest-approach-space-o-1-intuitive-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nstep 1 - swap the ```k```th column values to ```0```th column values.\\nstep 2 - sort the ```score``` using customised compare function whose condition is ```v1[0] > v2[0]```.\\nstep 3 - swap ```0```th column values back to ```k```th column values.\\nstep 4 - return the ```score``` vector.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    static bool mycmp(vector<int> &v1 , vector<int> &v2){\\n        return (v1[0] > v2[0]);\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int m = score.size();\\n        int n = score[0].size();\\n        // Step 1-\\n        for(int i=0 ; i<m ; i++){\\n            swap(score[i][0] , score[i][k]);\\n        }\\n        // Step 2-\\n        sort(score.begin() , score.end() , mycmp);\\n        // Step 3-\\n        for(int i=0 ; i<m ; i++){\\n            swap(score[i][0] , score[i][k]);\\n        }\\n        //step 4-\\n        return score;\\n    }\\n};\\n```\\n\\n**Please Upvote if you liked the approach and the solution.**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```k```\n```0```\n```score```\n```v1[0] > v2[0]```\n```0```\n```k```\n```score```\n```\\nclass Solution {\\npublic:\\n    static bool mycmp(vector<int> &v1 , vector<int> &v2){\\n        return (v1[0] > v2[0]);\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int m = score.size();\\n        int n = score[0].size();\\n        // Step 1-\\n        for(int i=0 ; i<m ; i++){\\n            swap(score[i][0] , score[i][k]);\\n        }\\n        // Step 2-\\n        sort(score.begin() , score.end() , mycmp);\\n        // Step 3-\\n        for(int i=0 ; i<m ; i++){\\n            swap(score[i][0] , score[i][k]);\\n        }\\n        //step 4-\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084246,
                "title": "simple-easy-c-solution-using-sorting",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int r=score.size(),c=score[0].size();\\n        vector<pair<int,int>> ans;\\n        \\n        for(int i=0; i<r; i++){\\n            ans.push_back({score[i][k],i});\\n        }\\n        \\n        sort(ans.begin(),ans.end(),greater<pair<int,int>>());\\n        \\n        vector<vector<int>> res;\\n        \\n        for(int i=0; i<r; i++){\\n            int row=ans[i].second;\\n            res.push_back(score[row]);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int r=score.size(),c=score[0].size();\\n        vector<pair<int,int>> ans;\\n        \\n        for(int i=0; i<r; i++){\\n            ans.push_back({score[i][k],i});\\n        }\\n        \\n        sort(ans.begin(),ans.end(),greater<pair<int,int>>());\\n        \\n        vector<vector<int>> res;\\n        \\n        for(int i=0; i<r; i++){\\n            int row=ans[i].second;\\n            res.push_back(score[row]);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083857,
                "title": "short-concise-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for(auto &r : score) r.insert(r.begin(), r[k]);\\n        sort(score.begin(), score.end(), greater<vector<int>>());\\n        for(auto &r : score) r.erase(r.begin());\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for(auto &r : score) r.insert(r.begin(), r[k]);\\n        sort(score.begin(), score.end(), greater<vector<int>>());\\n        for(auto &r : score) r.erase(r.begin());\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028458,
                "title": "simple-solution-using-vector-pair-int-int",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> res;\\n        for(int i=0;i<score.size();i++){\\n            res.push_back({score[i][k],i});\\n        }\\n        sort(res.rbegin(),res.rend());\\n        vector<vector<int>> ans;\\n        for(int i=0;i<score.size();i++){\\n            ans.push_back (score[res[i].second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> res;\\n        for(int i=0;i<score.size();i++){\\n            res.push_back({score[i][k],i});\\n        }\\n        sort(res.rbegin(),res.rend());\\n        vector<vector<int>> ans;\\n        for(int i=0;i<score.size();i++){\\n            ans.push_back (score[res[i].second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027825,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n//Arrays.sort(score,(a,b)->b[0]-a[0]) is one line solution\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k)\\n    {\\n        // Arrays.sort(score,(a,b)->b[k]-a[k]);\\n        int n=score.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                if(score[i][k]>score[j][k])\\n                {\\n                    int tp[]=score[i];\\n                    score[i]=score[j];\\n                    score[j]=tp;\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k)\\n    {\\n        // Arrays.sort(score,(a,b)->b[k]-a[k]);\\n        int n=score.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                if(score[i][k]>score[j][k])\\n                {\\n                    int tp[]=score[i];\\n                    score[i]=score[j];\\n                    score[j]=tp;\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3858809,
                "title": "python3-solution-using-dictionary-beats-99-9-python-at-its-best",
                "content": "# stats\\n![Screenshot 2023-08-03 at 8.35.22 PM.png](https://assets.leetcode.com/users/images/c64d8fbf-7ad7-47c1-9ec3-6c3490e45fbf_1691075136.9202452.png)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nwe have a dictionary which is initialized the column k with its index that is row number i \\nand j being the row \\nusing dictinary comprehension can be done using for loop also\\nwe have sorted the dictionary according to the value in accending order\\n\\nthen we can pop() from end as it is highest and append to answer array a\\n`x.pop()` gives the 2 elements the number `0` index and row number as `1` index using row index we are attaching\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n**O(N)**\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n**O(N)**\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        col={j[k]:i for i,j in enumerate(score)}\\n        x=sorted(col.items(),key=lambda col:col[0])\\n        a=[]\\n        while x:\\n            c=(score[x.pop()[1]])\\n            a.append(c)\\n        return a\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Hash Table",
                    "Matrix"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        col={j[k]:i for i,j in enumerate(score)}\\n        x=sorted(col.items(),key=lambda col:col[0])\\n        a=[]\\n        while x:\\n            c=(score[x.pop()[1]])\\n            a.append(c)\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3548913,
                "title": "2-ms-89-beats-using-treemap-is-very-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n   public static int[][] sortTheStudents(int[][] score, int k) {\\n        TreeMap<Integer, Integer> map = new TreeMap<>();\\n        for(int i = 0; i < score.length; i++){\\n            map.put(score[i][k],i);\\n        }\\n\\n        Set<Map.Entry<Integer, Integer>> entries = map.entrySet();\\n        int index = score.length-1;\\n        int massiv[][] = new int[score.length][score[0].length];\\n        for (Map.Entry<Integer, Integer> entry : entries) {\\n            massiv[index--] = score[entry.getValue()];\\n        }\\n        return massiv;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   public static int[][] sortTheStudents(int[][] score, int k) {\\n        TreeMap<Integer, Integer> map = new TreeMap<>();\\n        for(int i = 0; i < score.length; i++){\\n            map.put(score[i][k],i);\\n        }\\n\\n        Set<Map.Entry<Integer, Integer>> entries = map.entrySet();\\n        int index = score.length-1;\\n        int massiv[][] = new int[score.length][score[0].length];\\n        for (Map.Entry<Integer, Integer> entry : entries) {\\n            massiv[index--] = score[entry.getValue()];\\n        }\\n        return massiv;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3394298,
                "title": "cpp-easy-to-understand-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto row1, auto row2){\\n            return row1[k] > row2[k];\\n        });\\n\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto row1, auto row2){\\n            return row1[k] > row2[k];\\n        });\\n\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3307767,
                "title": "4-line-code-easy-c-soln-using-custom-comparator-function",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        // Define the custom comparator function\\n        auto compare = [&](const std::vector<int>& v1, const std::vector<int>& v2) {\\n            return v1[k] > v2[k];\\n        };\\n        \\n        // Sort the vector of vectors by the specified column\\n        std::sort(score.begin(), score.end(), compare);\\n        \\n        // Return the sorted vector of vectors\\n        return score;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        // Define the custom comparator function\\n        auto compare = [&](const std::vector<int>& v1, const std::vector<int>& v2) {\\n            return v1[k] > v2[k];\\n        };\\n        \\n        // Sort the vector of vectors by the specified column\\n        std::sort(score.begin(), score.end(), compare);\\n        \\n        // Return the sorted vector of vectors\\n        return score;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3294812,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nstatic bool compare(pair<int, int>& a, pair<int, int>& b)\\n    {\\n        return a.first > b.first;\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n         int n = score.size();\\n         int m=score[0].size();\\n         vector<pair<int,int>> s(n);\\n         for(int i=0;i<n;i++){\\n             s[i] = {score[i][k],i};\\n\\n         }\\n         sort(s.begin(),s.end(),compare);\\n         vector<vector<int>> r(n);\\n         for(int i=0;i<n;i++)\\n         {\\n             r[i]=score[s[i].second];\\n         }\\n        return r;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nstatic bool compare(pair<int, int>& a, pair<int, int>& b)\\n    {\\n        return a.first > b.first;\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n         int n = score.size();\\n         int m=score[0].size();\\n         vector<pair<int,int>> s(n);\\n         for(int i=0;i<n;i++){\\n             s[i] = {score[i][k],i};\\n\\n         }\\n         sort(s.begin(),s.end(),compare);\\n         vector<vector<int>> r(n);\\n         for(int i=0;i<n;i++)\\n         {\\n             r[i]=score[s[i].second];\\n         }\\n        return r;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3220299,
                "title": "beginner-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n   for (let i = 0; i < score.length; i++) {\\n    for (let j = 0; j < score.length; j++) {\\n      if (score[i][k] > score[j][k]) {\\n        [score[i], score[j]] = [score[j], score[i]];\\n      }\\n    }\\n  }\\n  return score;  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n   for (let i = 0; i < score.length; i++) {\\n    for (let j = 0; j < score.length; j++) {\\n      if (score[i][k] > score[j][k]) {\\n        [score[i], score[j]] = [score[j], score[i]];\\n      }\\n    }\\n  }\\n  return score;  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3188654,
                "title": "2545-is-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst sortTheStudents = (s, k) => s.sort((a,b) => b[k]- a[k])\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst sortTheStudents = (s, k) => s.sort((a,b) => b[k]- a[k])\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3163356,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        index_dict = {}\\n        for index,item in enumerate(score):\\n            index_dict[item[k]] = index                     # index_dict = {9: 0, 11: 1, 3: 2}\\n        sort_key = sorted(index_dict.keys(),reverse=True)   # sort_key = [11, 9, 3]\\n        output = []\\n        for key in sort_key:\\n            output.append(score[index_dict[key]])           # output = [[7, 5, 11, 2], [10, 6, 9, 1], [4, 8, 3, 15]]\\n        return output\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        index_dict = {}\\n        for index,item in enumerate(score):\\n            index_dict[item[k]] = index                     # index_dict = {9: 0, 11: 1, 3: 2}\\n        sort_key = sorted(index_dict.keys(),reverse=True)   # sort_key = [11, 9, 3]\\n        output = []\\n        for key in sort_key:\\n            output.append(score[index_dict[key]])           # output = [[7, 5, 11, 2], [10, 6, 9, 1], [4, 8, 3, 15]]\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3121050,
                "title": "easy-one-liner",
                "content": "-Here is!\\n \\n![image.png](https://assets.leetcode.com/users/images/cfb5db6b-6593-4824-b271-2abe4abba660_1675138565.8350468.png)\\n\\n*Sort using lambda*\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key = lambda i: -i[k])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key = lambda i: -i[k])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3110565,
                "title": "one-liner-python-solutions-using-lambda",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x:x[k],reverse=True)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x:x[k],reverse=True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3096913,
                "title": "python3-sorting-dictionary-beginner-friendly",
                "content": "# PYTHON3 || SORTING || DICTIONARY || BEGINNER-FRIENDLY\\n\\n# Approach\\n Used Simple Approach first storing the values of k position element in new array. Then used that array element parallelly with score array then created Key-Value Pair like: \\n {11: [7,5,11,2], 9: [10,6,9,1],3: [4,8,3,15]}\\nThen sorted reversely dictionary by keys. Then append values in new answer array.\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n\\n        ans=[]\\n        dicc={}\\n        arr=[]\\n\\n        for i in range(len(score)):\\n            arr.append(score[i][k])\\n\\n        for j in range(len(score)):\\n            dicc[arr[j]]=score[j]\\n\\n        for kk in sorted(dicc.keys(),reverse=True):\\n            ans.append(dicc[kk])\\n        \\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "Sort"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n\\n        ans=[]\\n        dicc={}\\n        arr=[]\\n\\n        for i in range(len(score)):\\n            arr.append(score[i][k])\\n\\n        for j in range(len(score)):\\n            dicc[arr[j]]=score[j]\\n\\n        for kk in sorted(dicc.keys(),reverse=True):\\n            ans.append(dicc[kk])\\n        \\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3096593,
                "title": "c-list-sort",
                "content": "# Code\\n```\\npublic class Solution {\\n\\n    public int[][] SortTheStudents(int[][] score, int k) {\\n        var list = score.ToList();\\n        list.Sort((x,y) => y[k] - x[k]);\\n        return list.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n\\n    public int[][] SortTheStudents(int[][] score, int k) {\\n        var list = score.ToList();\\n        list.Sort((x,y) => y[k] - x[k]);\\n        return list.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3092766,
                "title": "c-sorting-faster-easy-to-understand",
                "content": "* ***Using Sorting***\\n\\n* ***Time Complexity :- O(N * M)***\\n\\n* ***Space Complexity :- O(N * M)***\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    // compare function for sorting in descending order\\n    \\n    static bool compare(pair<int, int>& a, pair<int, int>& b)\\n    {\\n        return a.first > b.first;\\n    }\\n    \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int n = score.size();\\n        \\n        int m = score[0].size();\\n        \\n        // store the kth column together with row number\\n        \\n        vector<pair<int, int>> col(n);\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            col[i] = {score[i][k], i};\\n        }\\n        \\n        // sort the kth column\\n        \\n        sort(col.begin(), col.end(), compare);\\n        \\n        // now fill the matrix according to given conditions\\n        \\n        vector<vector<int>> res(n);\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            res[i] = score[col[i].second]; \\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    // compare function for sorting in descending order\\n    \\n    static bool compare(pair<int, int>& a, pair<int, int>& b)\\n    {\\n        return a.first > b.first;\\n    }\\n    \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int n = score.size();\\n        \\n        int m = score[0].size();\\n        \\n        // store the kth column together with row number\\n        \\n        vector<pair<int, int>> col(n);\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            col[i] = {score[i][k], i};\\n        }\\n        \\n        // sort the kth column\\n        \\n        sort(col.begin(), col.end(), compare);\\n        \\n        // now fill the matrix according to given conditions\\n        \\n        vector<vector<int>> res(n);\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            res[i] = score[col[i].second]; \\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3088653,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>>ans;\\n        vector<pair<int, vector<int>>>vec;\\n        for(int i=0; i<score.size(); i++){\\n            vec.push_back({score[i][k], score[i]});\\n        }\\n        sort(vec.begin(), vec.end());\\n        reverse(vec.begin(), vec.end());\\n        for(int i=0; i<vec.size(); i++){\\n            ans.push_back(vec[i].second);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>>ans;\\n        vector<pair<int, vector<int>>>vec;\\n        for(int i=0; i<score.size(); i++){\\n            vec.push_back({score[i][k], score[i]});\\n        }\\n        sort(vec.begin(), vec.end());\\n        reverse(vec.begin(), vec.end());\\n        for(int i=0; i<vec.size(); i++){\\n            ans.push_back(vec[i].second);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3087448,
                "title": "java-one-line-sorting-100-fast",
                "content": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {        \\n        \\n        Arrays.sort(score, (a,b)-> b[k]-a[k]);\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {        \\n        \\n        Arrays.sort(score, (a,b)-> b[k]-a[k]);\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086535,
                "title": "one-liner-javascript-solution",
                "content": "Found this solution helpful? Consider showing support by upvoting this post.\\nHave a question? Kindly leave a comment below.\\nThank you and happy hacking!\\n```\\nvar sortTheStudents = function (score, k) {\\n    return score.sort((a, b) => b[k] - a[k])\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sorting"
                ],
                "code": "```\\nvar sortTheStudents = function (score, k) {\\n    return score.sort((a, b) => b[k] - a[k])\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3085791,
                "title": "easy-solution-using-index-value-sorting",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        ans=[]\\n        for i in range(len(score)):\\n            ans.append([score[i][k],i])\\n        ans.sort(reverse=True)\\n        res=[]\\n        for i in ans:\\n            res.append(score[i[1]])\\n        return(res)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        ans=[]\\n        for i in range(len(score)):\\n            ans.append([score[i][k],i])\\n        ans.sort(reverse=True)\\n        res=[]\\n        for i in ans:\\n            res.append(score[i[1]])\\n        return(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085110,
                "title": "easy-java-solution",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(mlogm)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(m)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m=score.length;\\n        int n=score[0].length;\\n        int[][] arr=new int[m][n];\\n        int[] x=new int[m];\\n        for(int i=0;i<m;i++){\\n            x[i]=score[i][k];\\n        }\\n        Arrays.sort(x);\\n        for(int i=0,z=m-1;i<m && z>=0;i++,z--){\\n            int j=0;\\n            while(x[i]!=score[j][k]){\\n                j++;\\n            }\\n            arr[z]=score[j];\\n        }\\n        return arr;\\n    }\\n}\\n```\\n# Comment if You have better Approach & found it helpful !",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m=score.length;\\n        int n=score[0].length;\\n        int[][] arr=new int[m][n];\\n        int[] x=new int[m];\\n        for(int i=0;i<m;i++){\\n            x[i]=score[i][k];\\n        }\\n        Arrays.sort(x);\\n        for(int i=0,z=m-1;i<m && z>=0;i++,z--){\\n            int j=0;\\n            while(x[i]!=score[j][k]){\\n                j++;\\n            }\\n            arr[z]=score[j];\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084239,
                "title": "c-most-easy-to-understand-solution-using-max-heap",
                "content": "```\\ntypedef pair<int,int> pi;\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        priority_queue<pi,vector<pi>> pq;\\n        int n=score.size();\\n        for(int j=0;j<n;j++)\\n        {\\n            pq.push({score[j][k],j});\\n        }\\n        vector<vector<int>> ans;\\n        while(!pq.empty())\\n        {\\n            int ind=pq.top().second;\\n            pq.pop();\\n            ans.push_back(score[ind]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\ntypedef pair<int,int> pi;\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        priority_queue<pi,vector<pi>> pq;\\n        int n=score.size();\\n        for(int j=0;j<n;j++)\\n        {\\n            pq.push({score[j][k],j});\\n        }\\n        vector<vector<int>> ans;\\n        while(!pq.empty())\\n        {\\n            int ind=pq.top().second;\\n            pq.pop();\\n            ans.push_back(score[ind]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084099,
                "title": "c-comparator-one-liner-code-clean-and-cool-stl",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto& x, auto& y) { return x[k] > y[k]; });\\n         // using comparator, this will sort the matrix rows according to the value of K \\n        return score; \\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto& x, auto& y) { return x[k] > y[k]; });\\n         // using comparator, this will sort the matrix rows according to the value of K \\n        return score; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084094,
                "title": "javascript-sort",
                "content": "# Code\\n```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    score.sort((a,b)=>b[k]- a[k])\\n    return score\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Sort"
                ],
                "code": "```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    score.sort((a,b)=>b[k]- a[k])\\n    return score\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3084067,
                "title": "java-simple-solution-with-explanation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse `Arrays.sort()` from Java.\\n# Complexity\\n- Time complexity: $$O(nlogn)$$ - quick sort\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(nlogn)$$ - quick sort\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a,b) -> (b[k] - a[k])); // sort each student[] array by element k \\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a,b) -> (b[k] - a[k])); // sort each student[] array by element k \\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083866,
                "title": "c-using-pair-fast-and-easy-solution",
                "content": "\\n# Complexity\\n- Time complexity:O(nlog(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>>ans;\\n        vector<pair<int, int>>v;\\n        int n=score.size();\\n        int m=score[0].size();\\n        for(int i=0; i<n; i++){\\n            v.push_back(make_pair(score[i][k],i));\\n        }\\n        sort(v.begin(),v.end());\\n        for(int i=n-1; i>=0; i--){\\n            ans.push_back(score[v[i].second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>>ans;\\n        vector<pair<int, int>>v;\\n        int n=score.size();\\n        int m=score[0].size();\\n        for(int i=0; i<n; i++){\\n            v.push_back(make_pair(score[i][k],i));\\n        }\\n        sort(v.begin(),v.end());\\n        for(int i=n-1; i>=0; i--){\\n            ans.push_back(score[v[i].second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083818,
                "title": "priorityqueue",
                "content": "Store each row in the max heap for kth column.\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m = score.length, n = score[0].length;\\n        \\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> b[0]-a[0]);\\n        \\n        for(int i=0; i<m; i++){\\n            int s = score[i][k];\\n            pq.add(new int[]{s, i});\\n            \\n            // System.out.println(pq.peek()[0] + \" \"+ pq.peek()[1]);\\n        }\\n        \\n        int[][] newScore = new int[m][n];\\n        int idx = 0;\\n        \\n        while(!pq.isEmpty()){\\n            int[] rem = pq.poll();\\n            int row = rem[1];\\n            \\n            newScore[idx++] = score[row];\\n        }\\n        \\n        \\n        return newScore;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int m = score.length, n = score[0].length;\\n        \\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> b[0]-a[0]);\\n        \\n        for(int i=0; i<m; i++){\\n            int s = score[i][k];\\n            pq.add(new int[]{s, i});\\n            \\n            // System.out.println(pq.peek()[0] + \" \"+ pq.peek()[1]);\\n        }\\n        \\n        int[][] newScore = new int[m][n];\\n        int idx = 0;\\n        \\n        while(!pq.isEmpty()){\\n            int[] rem = pq.poll();\\n            int row = rem[1];\\n            \\n            newScore[idx++] = score[row];\\n        }\\n        \\n        \\n        return newScore;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083817,
                "title": "clean-hashmap-priorityqueueu-java",
                "content": "\\n```java []\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Map<Integer,int[]> map = new HashMap<>();\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->b-a);\\n        for(int i=0; i<score.length; i++){\\n            int[] arr = new int[score[0].length];\\n            for(int j=0; j<score[0].length; j++){\\n                arr[j] = score[i][j];\\n            }\\n            pq.add(score[i][k]);\\n            map.put(score[i][k],arr);\\n        }\\n        int[][] res = new int[score.length][score[0].length];\\n        for(int i=0; i<score.length; i++){\\n            res[i] = map.get(pq.poll());\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```java []\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Map<Integer,int[]> map = new HashMap<>();\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->b-a);\\n        for(int i=0; i<score.length; i++){\\n            int[] arr = new int[score[0].length];\\n            for(int j=0; j<score[0].length; j++){\\n                arr[j] = score[i][j];\\n            }\\n            pq.add(score[i][k]);\\n            map.put(score[i][k],arr);\\n        }\\n        int[][] res = new int[score.length][score[0].length];\\n        for(int i=0; i<score.length; i++){\\n            res[i] = map.get(pq.poll());\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077382,
                "title": "using-hashmap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& v, int k) \\n    {\\n        map<int,vector<int>> m;\\n        for(int i=0;i<v.size();i++)\\n        {\\n            for(int j=0;j<v[i].size();j++)\\n            {\\n               if(j==k)\\n               {\\n                   m[v[i][j]]=v[i];\\n               }\\n            }\\n        }\\n        vector<vector<int>> ans;\\n        for(auto it=m.begin();it!=m.end();it++)\\n        {\\n             ans.push_back(it->second);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& v, int k) \\n    {\\n        map<int,vector<int>> m;\\n        for(int i=0;i<v.size();i++)\\n        {\\n            for(int j=0;j<v[i].size();j++)\\n            {\\n               if(j==k)\\n               {\\n                   m[v[i][j]]=v[i];\\n               }\\n            }\\n        }\\n        vector<vector<int>> ans;\\n        for(auto it=m.begin();it!=m.end();it++)\\n        {\\n             ans.push_back(it->second);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4037369,
                "title": "easy-to-understand-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> te;\\n\\n        for(int i = 0; i < score.size(); i++){\\n            te.push_back({score[i][k],i});\\n        }\\n\\n        sort(te.begin(),te.end());\\n\\n        vector<vector<int>> ans;\\n\\n        for(int i = te.size() - 1; i >= 0; i--){\\n            ans.push_back(score[te[i].second]);\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> te;\\n\\n        for(int i = 0; i < score.size(); i++){\\n            te.push_back({score[i][k],i});\\n        }\\n\\n        sort(te.begin(),te.end());\\n\\n        vector<vector<int>> ans;\\n\\n        for(int i = te.size() - 1; i >= 0; i--){\\n            ans.push_back(score[te[i].second]);\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981431,
                "title": "c-linq-solution-1-liner-easy-to-understand",
                "content": "# Explaination\\n* In LINQ, the OrderByDescending method is used to sort the score collection based on the value at index k in each element. \\n* The lambda expression s => s[k] specifies how to get the value for comparison. \\n\\n* ToArray() is used to convert the sorted sequence into an array.\\n\\n# Complexity\\n- Time complexity: $$O(n * log(n)).$$ \\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[][] SortTheStudents(int[][] score, int k) {\\n        return score.OrderByDescending(s => s[k]).ToArray();\\n    }\\n}\\n```\\n![image.png](https://assets.leetcode.com/users/images/24d1d372-03b1-482b-9cab-e1bce36374d8_1693413830.481964.png)\\n\\n",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[][] SortTheStudents(int[][] score, int k) {\\n        return score.OrderByDescending(s => s[k]).ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923189,
                "title": "c-javascript-easy-solution",
                "content": "# Approach\\nTake a list of students\\' scores and sorts them based on how well they performed in a specific subject indicated by the index k. It does this by creating pairs of scores and student lists, sorting these pairs based on the subject scores, and then creating a new list with the sorted student orders.\\n\\n# Complexity\\n- Time complexity: O(n log n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n# C++\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {  \\n        vector<pair<int,vector<int>>>res;\\n        int len=score.size();\\n        for(int i=0;i<len;i++){\\n            vector<int>v;\\n            int len1=score[i].size();\\n            for(int j=0;j<len1;j++) v.push_back(score[i][j]);\\n\\n            res.push_back(make_pair(score[i][k],v));\\n        }\\n        sort(res.begin(),res.end());\\n        \\n        vector<vector<int>>ans;\\n        for(int i=len-1;i>=0;i--){\\n            ans.push_back(res[i].second);\\n        }\\n        return ans;\\n\\n    }\\n};\\n```\\n\\n\\n---\\n\\n\\n# JavaScript\\n```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    let res = [];\\n    let len = score.length;\\n    for (let i = 0; i < len; i++) {\\n        let v = score[i].slice(); \\n        res.push([score[i][k], v]);\\n    }\\n\\n    res.sort((a, b) => b[0] - a[0]); \\n    let ans = [];\\n    for (let i = 0; i<len; i++) {\\n        ans.push(res[i][1]);\\n    }\\n\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "JavaScript",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {  \\n        vector<pair<int,vector<int>>>res;\\n        int len=score.size();\\n        for(int i=0;i<len;i++){\\n            vector<int>v;\\n            int len1=score[i].size();\\n            for(int j=0;j<len1;j++) v.push_back(score[i][j]);\\n\\n            res.push_back(make_pair(score[i][k],v));\\n        }\\n        sort(res.begin(),res.end());\\n        \\n        vector<vector<int>>ans;\\n        for(int i=len-1;i>=0;i--){\\n            ans.push_back(res[i].second);\\n        }\\n        return ans;\\n\\n    }\\n};\\n```\n```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    let res = [];\\n    let len = score.length;\\n    for (let i = 0; i < len; i++) {\\n        let v = score[i].slice(); \\n        res.push([score[i][k], v]);\\n    }\\n\\n    res.sort((a, b) => b[0] - a[0]); \\n    let ans = [];\\n    for (let i = 0; i<len; i++) {\\n        ans.push(res[i][1]);\\n    }\\n\\n    return ans;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3863023,
                "title": "using-bubble-sort-java-beginner-friendly-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Initialize a 2D array \\'ans\\' with the same dimensions as the input \\'score\\' array to store intermediate results.\\n2. Start iterating through the rows of the \\'score\\' array using the variable \\'i\\'.\\n3. For each \\'i\\', perform a bubble sort on the first \\'score.length-1-i\\' rows based on the values in the k-th column.\\n4. In the inner loop with the variable \\'j\\', compare the value at \\'score[j][k]\\' with the value at \\'score[j+1][k]\\'. If the latter is greater, swap the entire rows.\\n5. Continue this process until the array is sorted in descending order based on the k-th column.\\n6. Return the sorted \\'score\\' array.\\n\\n# Complexity\\n- Time complexity: O(n^2 * m)\\nwhere, \\n    \\'n\\' is the number of rows, and \\'m\\' is the number of columns.\\n\\n- Space complexity: O(n * m)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] ans = new int[score.length][score[0].length];\\n        int index=0;\\n        for(int i=0; i<score.length; i++){\\n            for(int j=0; j<score.length-1-i; j++){\\n                if(score[j][k]<score[j+1][k]){\\n                    ans[index] = score[j];\\n                    score[j] = score[j+1];\\n                    score[j+1] = ans[index];\\n                }\\n            }\\n        }\\n\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] ans = new int[score.length][score[0].length];\\n        int index=0;\\n        for(int i=0; i<score.length; i++){\\n            for(int j=0; j<score.length-1-i; j++){\\n                if(score[j][k]<score[j+1][k]){\\n                    ans[index] = score[j];\\n                    score[j] = score[j+1];\\n                    score[j+1] = ans[index];\\n                }\\n            }\\n        }\\n\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3816294,
                "title": "solved-using-priority-queue-c-tc-sc-o-nlog-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int n=score.size();\\n        int m=score[0].size();\\n        priority_queue<pair<int, vector<int>>>q;\\n        for(int i=0; i<n; i++){\\n            q.push({score[i][k], score[i]});\\n        }\\n        for(int i=0; i<n; i++){\\n            score[i]=q.top().second;\\n            q.pop();\\n        }\\n        return score;\\n    }\\n};\\n\\n\\n//Upvote if u like my answer\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int n=score.size();\\n        int m=score[0].size();\\n        priority_queue<pair<int, vector<int>>>q;\\n        for(int i=0; i<n; i++){\\n            q.push({score[i][k], score[i]});\\n        }\\n        for(int i=0; i<n; i++){\\n            score[i]=q.top().second;\\n            q.pop();\\n        }\\n        return score;\\n    }\\n};\\n\\n\\n//Upvote if u like my answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3716255,
                "title": "c-heap-simple-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n    vector<vector<int>> ans;\\n    priority_queue<pair<int ,vector<int>>> q;\\n     \\n     for(auto i: score ){\\n         q.push({i[k],i});\\n     }\\n     \\n     while(!q.empty()){\\n         ans.push_back(q.top().second);\\n         q.pop();\\n     }\\n     return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n    vector<vector<int>> ans;\\n    priority_queue<pair<int ,vector<int>>> q;\\n     \\n     for(auto i: score ){\\n         q.push({i[k],i});\\n     }\\n     \\n     while(!q.empty()){\\n         ans.push_back(q.top().second);\\n         q.pop();\\n     }\\n     return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3667590,
                "title": "2-liner-solution-using-custom-operator-lambda-function",
                "content": "# Complexity\\n- Time complexity : $$O(NlogN)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        auto cmp = [&](vector<int> &a1, vector<int> &a2) {\\n            return a1[k]>a2[k];\\n        };\\n\\n        sort(begin(score),end(score),cmp);\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        auto cmp = [&](vector<int> &a1, vector<int> &a2) {\\n            return a1[k]>a2[k];\\n        };\\n\\n        sort(begin(score),end(score),cmp);\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3505864,
                "title": "java-easiest-solution-using-hashmap-priorityqueue",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        HashMap<Integer,Integer> hm = new HashMap<>();\\n        for(int i = 0;i<score.length;i++){\\n            hm.put(i,score[i][k]);\\n        }\\n\\n        PriorityQueue<Map.Entry<Integer,Integer>> pq=new PriorityQueue<>((e2,e1) -> e1.getValue()-e2.getValue());\\n        int[][] ans = new int[score.length][score[0].length];\\n        pq.addAll(hm.entrySet());\\n\\n        int index=0;\\n        while(!pq.isEmpty()){\\n            Map.Entry<Integer, Integer> entry = pq.poll();\\n            int i=entry.getKey();\\n            for(int j=0;j<score[0].length;j++){\\n                ans[index][j]=score[i][j];\\n                \\n            }\\n            index++;\\n        }\\n        return ans;\\n\\n\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        HashMap<Integer,Integer> hm = new HashMap<>();\\n        for(int i = 0;i<score.length;i++){\\n            hm.put(i,score[i][k]);\\n        }\\n\\n        PriorityQueue<Map.Entry<Integer,Integer>> pq=new PriorityQueue<>((e2,e1) -> e1.getValue()-e2.getValue());\\n        int[][] ans = new int[score.length][score[0].length];\\n        pq.addAll(hm.entrySet());\\n\\n        int index=0;\\n        while(!pq.isEmpty()){\\n            Map.Entry<Integer, Integer> entry = pq.poll();\\n            int i=entry.getKey();\\n            for(int j=0;j<score[0].length;j++){\\n                ans[index][j]=score[i][j];\\n                \\n            }\\n            index++;\\n        }\\n        return ans;\\n\\n\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456253,
                "title": "easy-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        HashMap<Integer,Integer>h=new HashMap<>();\\n        int row=score.length;\\n        int col=score[0].length;\\n       \\n        int arr[]=new int[row];\\n        int ind=0;\\n        for(int i=0;i<row;i++){\\n            h.put(score[i][k],i);\\n            arr[ind++]=score[i][k];\\n        }\\n        Arrays.sort(arr);\\n        int ind1=row-1;\\n        int ans[][]=new int[row][col];\\n        for(int i=0;i<row;i++){\\n             int j=h.get(arr[i]);\\n             ans[ind1--]=score[j];\\n        }\\n        return ans;\\n       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        HashMap<Integer,Integer>h=new HashMap<>();\\n        int row=score.length;\\n        int col=score[0].length;\\n       \\n        int arr[]=new int[row];\\n        int ind=0;\\n        for(int i=0;i<row;i++){\\n            h.put(score[i][k],i);\\n            arr[ind++]=score[i][k];\\n        }\\n        Arrays.sort(arr);\\n        int ind1=row-1;\\n        int ans[][]=new int[row][col];\\n        for(int i=0;i<row;i++){\\n             int j=h.get(arr[i]);\\n             ans[ind1--]=score[j];\\n        }\\n        return ans;\\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3413606,
                "title": "sort-the-students-by-their-kth-score-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int i, j;\\n        vector<int> temp;\\n        vector<vector<int>> ans;\\n        for(i=0 ; i<score.size() ; i++)\\n        {\\n            temp.push_back(score[i][k]);\\n        }\\n        sort(temp.begin(), temp.end(), greater<int>());\\n        for(i=0 ;  i<temp.size() ; i++)\\n        {\\n            for(j=0 ; j<score.size() ; j++)\\n            {\\n                if(temp[i]==score[j][k])\\n                {\\n                    ans.push_back(score[j]);\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int i, j;\\n        vector<int> temp;\\n        vector<vector<int>> ans;\\n        for(i=0 ; i<score.size() ; i++)\\n        {\\n            temp.push_back(score[i][k]);\\n        }\\n        sort(temp.begin(), temp.end(), greater<int>());\\n        for(i=0 ;  i<temp.size() ; i++)\\n        {\\n            for(j=0 ; j<score.size() ; j++)\\n            {\\n                if(temp[i]==score[j][k])\\n                {\\n                    ans.push_back(score[j]);\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366284,
                "title": "easy-java-one-liner",
                "content": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,(int[] a,int[] b)-> Integer.compare(b[k],a[k]));\\n        return score;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,(int[] a,int[] b)-> Integer.compare(b[k],a[k]));\\n        return score;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3353085,
                "title": "one-liner-javascript-solution-beats-95-49",
                "content": "# Approach\\n    Default quick Sort\\n\\n# Complexity\\n- Time complexity:\\n $$O(n log(n))$$ \\n\\n- Space complexity:\\n $$O(log(n))$$ \\n\\n# Code\\n```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    return score.sort((a,b) => b[k]-a[k])\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    return score.sort((a,b) => b[k]-a[k])\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3316478,
                "title": "2-linear-python-solution-up-vote-please",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->we can solve the problem through sorting.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nwe have to add the total row to the kth element in the dictionary and sort the dictionary then add the rows to the new list and finally reverse the matrix\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        x={score[i][k]:score[i] for i in range(len(score))}\\n        return [x[i] for i in sorted(x)[::-1]]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        x={score[i][k]:score[i] for i in range(len(score))}\\n        return [x[i] for i in sorted(x)[::-1]]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3271638,
                "title": "python3-beats-89-runtime-using-dictionary",
                "content": "# Please do upvote guys.\\n![image.png](https://assets.leetcode.com/users/images/fd339f46-1541-42fe-a952-c2019c69c96c_1678263400.2641037.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        d={}\\n        for i in score:\\n            d[i[k]]=i\\n        keys = list(d.keys())\\n        keys.sort(reverse=True)\\n        return [d[i] for i in keys]\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        d={}\\n        for i in score:\\n            d[i[k]]=i\\n        keys = list(d.keys())\\n        keys.sort(reverse=True)\\n        return [d[i] for i in keys]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3269508,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nstatic bool compare(pair<int, int>& a, pair<int, int>& b)\\n    {\\n        return a.first > b.first;\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n         int n = score.size();\\n         int m=score[0].size();\\n         vector<pair<int,int>> s(n);\\n         for(int i=0;i<n;i++){\\n             s[i] = {score[i][k],i};\\n\\n         }\\n         sort(s.begin(),s.end(),compare);\\n         vector<vector<int>> r(n);\\n         for(int i=0;i<n;i++){\\n             r[i]=score[s[i].second];\\n         }\\n        return r;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nstatic bool compare(pair<int, int>& a, pair<int, int>& b)\\n    {\\n        return a.first > b.first;\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n         int n = score.size();\\n         int m=score[0].size();\\n         vector<pair<int,int>> s(n);\\n         for(int i=0;i<n;i++){\\n             s[i] = {score[i][k],i};\\n\\n         }\\n         sort(s.begin(),s.end(),compare);\\n         vector<vector<int>> r(n);\\n         for(int i=0;i<n;i++){\\n             r[i]=score[s[i].second];\\n         }\\n        return r;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3269473,
                "title": "c-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>> re;\\n        vector<pair<int,int>> tem;\\n        for(int i=0; i<score.size(); i++){\\n            tem.push_back(make_pair(score[i][k],i));\\n        }   \\n        sort(tem.begin(),tem.end());\\n        vector<int> t;\\n        for(auto x:tem){\\n            for(int i=0; i<score[0].size(); i++){\\n                t.push_back(score[x.second][i]);\\n            }\\n            re.push_back(t);\\n            t.clear();\\n        }\\n        reverse(re.begin(),re.end());\\n        return re;\\n    }\\n};\\n```\\n![Web capture_25-2-2023_225039_leetcode.com.jpeg](https://assets.leetcode.com/users/images/4449443e-57af-41c4-b8da-73f2e50f59d7_1678208806.0437472.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>> re;\\n        vector<pair<int,int>> tem;\\n        for(int i=0; i<score.size(); i++){\\n            tem.push_back(make_pair(score[i][k],i));\\n        }   \\n        sort(tem.begin(),tem.end());\\n        vector<int> t;\\n        for(auto x:tem){\\n            for(int i=0; i<score[0].size(); i++){\\n                t.push_back(score[x.second][i]);\\n            }\\n            re.push_back(t);\\n            t.clear();\\n        }\\n        reverse(re.begin(),re.end());\\n        return re;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3160229,
                "title": "simple-c-solution-easy",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for(int i=0;i<score.size()-1;i++){\\n            for(int j=0;j<score.size()-i-1;j++){\\n                if(score[j][k]<score[j+1][k]){\\n                    swap(score[j],score[j+1]);\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for(int i=0;i<score.size()-1;i++){\\n            for(int j=0;j<score.size()-i-1;j++){\\n                if(score[j][k]<score[j+1][k]){\\n                    swap(score[j],score[j+1]);\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3125621,
                "title": "java-2-lines-solution",
                "content": "# Solution 1 | 2 ms\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        TreeMap<Integer, int[]> map = new TreeMap<>();\\n        for (int[] a : score) map.put(a[k], a);\\n        int[][] res = new int[score.length][score[0].length];\\n        int c = 0;\\n        for (int key : map.descendingKeySet()) res[c++] = map.get(key);\\n        return res;\\n    }\\n}\\n```\\n\\n\\n# Solution 2 | 2 ms\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        TreeMap<Integer, int[]> map = new TreeMap<>();\\n        for (int[] a : score) map.put(a[k], a);\\n        int[][] res = new int[score.length][score[0].length];\\n        int c = 0;\\n        for (int key : map.descendingKeySet()) res[c++] = map.get(key);\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3113336,
                "title": "c-solution-runtime-79ms-beats-69-5-constant-space",
                "content": "# Space Complexity\\nConstant: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int row = score.size(), col = score[0].size();\\n        int i = 0;\\n        while(i < k)\\n            i++;\\n        for(int row_itr = 0; row_itr < row; row_itr++)\\n        {\\n            int temp = score[row_itr][i], ptr = 0;\\n            for(int j = row_itr; j < row; j++)\\n            {\\n                if(temp < score[j][i])\\n                    temp = score[j][i];\\n            }\\n            while(score[ptr][i] != temp)\\n                ptr++;\\n            if(temp != score[row_itr][i])\\n                for(int i_ptr = 0; i_ptr < col; i_ptr++)\\n                    swap(score[row_itr][i_ptr], score[ptr][i_ptr]);\\n        }\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int row = score.size(), col = score[0].size();\\n        int i = 0;\\n        while(i < k)\\n            i++;\\n        for(int row_itr = 0; row_itr < row; row_itr++)\\n        {\\n            int temp = score[row_itr][i], ptr = 0;\\n            for(int j = row_itr; j < row; j++)\\n            {\\n                if(temp < score[j][i])\\n                    temp = score[j][i];\\n            }\\n            while(score[ptr][i] != temp)\\n                ptr++;\\n            if(temp != score[row_itr][i])\\n                for(int i_ptr = 0; i_ptr < col; i_ptr++)\\n                    swap(score[row_itr][i_ptr], score[ptr][i_ptr]);\\n        }\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3108926,
                "title": "easiest-java-sol-with-95-score",
                "content": "# Intuition\\nUsing lambda expression\\n\\n# Approach\\nthis is a basic sorting problem , implementing the solution is just a game of syntax.\\n\\n# Complexity\\n- Time complexity:\\n  O(mlogm)\\n\\n- Space complexity:\\n  O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,(int a[],int b[])->{\\n            return b[k]-a[k];\\n        });\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,(int a[],int b[])->{\\n            return b[k]-a[k];\\n        });\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3093947,
                "title": "rust-100-oneliner",
                "content": "\\n```\\nimpl Solution {\\n    pub fn sort_the_students(mut score: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\\n        score.sort_unstable_by_key(|key| -key[k as usize]);\\n        score\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn sort_the_students(mut score: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\\n        score.sort_unstable_by_key(|key| -key[k as usize]);\\n        score\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3091419,
                "title": "c-priority-queue",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int n= score.size();\\n        int m= score[0].size();\\n        priority_queue<pair<int, int>> pq;\\n        for(int itr=0; itr<n; itr++){\\n            pq.push({score[itr][k], itr});\\n        }\\n        vector<vector<int>> ans;\\n        while(!pq.empty()){\\n            vector<int> temp(m, 0);\\n            int index= pq.top().second;\\n            pq.pop();\\n            \\n            for(int itr=0; itr<m; itr++){\\n                temp[itr]= score[index][itr];\\n            }\\n            ans.push_back(temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        int n= score.size();\\n        int m= score[0].size();\\n        priority_queue<pair<int, int>> pq;\\n        for(int itr=0; itr<n; itr++){\\n            pq.push({score[itr][k], itr});\\n        }\\n        vector<vector<int>> ans;\\n        while(!pq.empty()){\\n            vector<int> temp(m, 0);\\n            int index= pq.top().second;\\n            pq.pop();\\n            \\n            for(int itr=0; itr<m; itr++){\\n                temp[itr]= score[index][itr];\\n            }\\n            ans.push_back(temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3090774,
                "title": "c-using-map-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n      int m = score.size();\\n      int n = score[0].size();\\n      vector<vector<int>> ans;\\n      map<int,vector<int>> mp;\\n      vector<int> arr;\\n      \\n      for(int i=0;i<m;i++){\\n            mp[score[i][k]] = score[i];\\n            arr.push_back(score[i][k]);\\n      }\\n      \\n      sort(arr.begin(),arr.end(),greater<int>());\\n      \\n      \\n      for(int i=0;i<arr.size();i++){\\n        ans.push_back(mp[arr[i]]);\\n      }\\n      \\n      return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Ordered Map"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n      int m = score.size();\\n      int n = score[0].size();\\n      vector<vector<int>> ans;\\n      map<int,vector<int>> mp;\\n      vector<int> arr;\\n      \\n      for(int i=0;i<m;i++){\\n            mp[score[i][k]] = score[i];\\n            arr.push_back(score[i][k]);\\n      }\\n      \\n      sort(arr.begin(),arr.end(),greater<int>());\\n      \\n      \\n      for(int i=0;i<arr.size();i++){\\n        ans.push_back(mp[arr[i]]);\\n      }\\n      \\n      return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3087797,
                "title": "2-3-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn sort_the_students(mut score: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\\n        let k = k as usize;\\n        score.sort_by(|a,b| b[k].cmp(&a[k]) );\\n        score\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn sort_the_students(mut score: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\\n        let k = k as usize;\\n        score.sort_by(|a,b| b[k].cmp(&a[k]) );\\n        score\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3086415,
                "title": "c-using-map-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n      int m = score.size();\\n      int n = score[0].size();\\n      vector<vector<int>> ans;\\n      map<int,vector<int>> mp; // map for storing the score[i][k] as key and row of it as  value\\n      vector<int> arr; // vector for storing the score[i][k] number\\n      \\n      for(int i=0;i<m;i++){\\n        for(int j=0;j<n;j++){\\n          if(j == k){\\n            mp[score[i][j]] = score[i]; \\n            arr.push_back(score[i][j]);\\n          }\\n        }\\n      }\\n      \\n      sort(arr.begin(),arr.end(),greater<int>());\\n      \\n      \\n      for(int i=0;i<arr.size();i++){\\n        ans.push_back(mp[arr[i]]);\\n      }\\n      \\n      return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Ordered Map"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n      int m = score.size();\\n      int n = score[0].size();\\n      vector<vector<int>> ans;\\n      map<int,vector<int>> mp; // map for storing the score[i][k] as key and row of it as  value\\n      vector<int> arr; // vector for storing the score[i][k] number\\n      \\n      for(int i=0;i<m;i++){\\n        for(int j=0;j<n;j++){\\n          if(j == k){\\n            mp[score[i][j]] = score[i]; \\n            arr.push_back(score[i][j]);\\n          }\\n        }\\n      }\\n      \\n      sort(arr.begin(),arr.end(),greater<int>());\\n      \\n      \\n      for(int i=0;i<arr.size();i++){\\n        ans.push_back(mp[arr[i]]);\\n      }\\n      \\n      return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085929,
                "title": "python-one-line-lambda-function",
                "content": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n\\t\\treturn sorted(score,reverse=True,key=lambda element:element[k])\\n        #score.sort(reverse=True,key=lambda element:element[k])\\n        #return score\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n\\t\\treturn sorted(score,reverse=True,key=lambda element:element[k])\\n        #score.sort(reverse=True,key=lambda element:element[k])\\n        #return score\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085890,
                "title": "java-2-solutions-commented",
                "content": "# Please Upvote :D\\n---\\n``` java []\\nclass Solution {\\n    private class Pair {\\n        int[] a;\\n        int n;\\n        Pair(int[] a, int n) {\\n            this.a = a;\\n            this.n = n;\\n        }\\n    }\\n    \\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        // put each row along with it\\'s k-th index (column) value in a max heap\\n        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> y.n - x.n);\\n        for (int i = 0; i < score.length; i++) {\\n            pq.offer(new Pair(score[i], score[i][k]));\\n        }\\n        \\n        // poll the arrays from the heap and and put them in score row-wise\\n        int i = 0;\\n        while (!pq.isEmpty()) {\\n            score[i++] = pq.poll().a;\\n        }\\n        \\n        return score;  \\n    }\\n}\\n\\n// TC: O(2 * n * logn) => O(n * logn)\\n// SC: O(m * n)\\n// n -> number of rows\\n// m -> number of columns\\n```\\n---\\n#### Didn\\'t think of this at all:\\n``` java []\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        // sort the matrix rows based on k-th index of each row \\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n\\n// TC: O(n * logn), SC: O(1)\\n// n -> number of rows\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting",
                    "Heap (Priority Queue)",
                    "Matrix"
                ],
                "code": "``` java []\\nclass Solution {\\n    private class Pair {\\n        int[] a;\\n        int n;\\n        Pair(int[] a, int n) {\\n            this.a = a;\\n            this.n = n;\\n        }\\n    }\\n    \\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        // put each row along with it\\'s k-th index (column) value in a max heap\\n        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> y.n - x.n);\\n        for (int i = 0; i < score.length; i++) {\\n            pq.offer(new Pair(score[i], score[i][k]));\\n        }\\n        \\n        // poll the arrays from the heap and and put them in score row-wise\\n        int i = 0;\\n        while (!pq.isEmpty()) {\\n            score[i++] = pq.poll().a;\\n        }\\n        \\n        return score;  \\n    }\\n}\\n\\n// TC: O(2 * n * logn) => O(n * logn)\\n// SC: O(m * n)\\n// n -> number of rows\\n// m -> number of columns\\n```\n``` java []\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        // sort the matrix rows based on k-th index of each row \\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n\\n// TC: O(n * logn), SC: O(1)\\n// n -> number of rows\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085811,
                "title": "easy-solution-vector-pair-with-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$O(nlogn)$  DUE TO SORTING\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$O(n)$ \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int row=score.size(),col=score[0].size(),i;\\n        \\n        vector<pair<int,int>> v;\\n      //made a vector pair\\n        vector<vector<int>> v1 (row, vector<int> (col,0));\\n        //intialzized with zero\\n        \\n          for( i=0; i<row; i++){ \\n            v.push_back(make_pair(score[i][k],i));\\n         }\\n            \\n        \\n         sort(v.rbegin(),v.rend());//sorted in reverse orderi.e 5,4,3\\n\\n            i=0;\\n           int j=v[i].second;\\n           for(int l=0; l<col; l++)\\n           {\\n               v1[i][l]=score[j][l];\\n               if(l==col-1)\\n               {\\n                       i++; //incrementing the index of vector v\\n                       if(i==row) break;\\n                       j=v[i].second;  //choosing the row no \\n                        l=-1; \\n//if i equals no of row it means we have traversed complete matrix\\n                               }\\n               }\\n       \\n       \\n      return v1; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sort",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int row=score.size(),col=score[0].size(),i;\\n        \\n        vector<pair<int,int>> v;\\n      //made a vector pair\\n        vector<vector<int>> v1 (row, vector<int> (col,0));\\n        //intialzized with zero\\n        \\n          for( i=0; i<row; i++){ \\n            v.push_back(make_pair(score[i][k],i));\\n         }\\n            \\n        \\n         sort(v.rbegin(),v.rend());//sorted in reverse orderi.e 5,4,3\\n\\n            i=0;\\n           int j=v[i].second;\\n           for(int l=0; l<col; l++)\\n           {\\n               v1[i][l]=score[j][l];\\n               if(l==col-1)\\n               {\\n                       i++; //incrementing the index of vector v\\n                       if(i==row) break;\\n                       j=v[i].second;  //choosing the row no \\n                        l=-1; \\n//if i equals no of row it means we have traversed complete matrix\\n                               }\\n               }\\n       \\n       \\n      return v1; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085245,
                "title": "c-2-lines-too-easy-simple-sort-98-faster",
                "content": "```c++\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto prev, auto now) {\\n            return prev[k] > now[k];\\n        });\\n        return score;\\n    }\\n};\\n```\\n\\n**For more solutions, check out this \\uD83C\\uDFC6  [GITHUB REPOSITORY](https://github.com/MuhtasimTanmoy/playground) with over 1500+ solutions.**",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&](auto prev, auto now) {\\n            return prev[k] > now[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085066,
                "title": "java-solution-priorityqueue",
                "content": "# Approach\\n- Create a PriorityQueue and pass a pair storing the array and its kth index value.\\n- Pass all the array elements to the priority queue.\\n- poll each element and store them in the list and finally convert the list to array. \\n\\n# Code\\n```\\nclass Solution {\\n    class Pair{\\n        int[] arr;\\n        int val;\\n        public Pair(int[] arr, int val){\\n            this.arr=arr;\\n            this.val=val;\\n        }\\n    }\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        ArrayList<int[]> ans = new ArrayList<>();\\n        // int size = score[0].length;\\n        PriorityQueue<Pair> heap = new PriorityQueue<>((a,b)->(b.val - a.val));\\n        for(int[] arr: score){\\n            Pair p = new Pair(arr, arr[k]);\\n            heap.offer(p);\\n        }\\n        while(!heap.isEmpty()){\\n            Pair rem =heap.poll();\\n            int[] array = rem.arr;\\n            ans.add(array);\\n        }\\n        return ans.toArray(new int[ans.size()][]);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    class Pair{\\n        int[] arr;\\n        int val;\\n        public Pair(int[] arr, int val){\\n            this.arr=arr;\\n            this.val=val;\\n        }\\n    }\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        ArrayList<int[]> ans = new ArrayList<>();\\n        // int size = score[0].length;\\n        PriorityQueue<Pair> heap = new PriorityQueue<>((a,b)->(b.val - a.val));\\n        for(int[] arr: score){\\n            Pair p = new Pair(arr, arr[k]);\\n            heap.offer(p);\\n        }\\n        while(!heap.isEmpty()){\\n            Pair rem =heap.poll();\\n            int[] array = rem.arr;\\n            ans.add(array);\\n        }\\n        return ans.toArray(new int[ans.size()][]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084999,
                "title": "c-custom-sorting",
                "content": "\\n# Intuition:- \\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBasic custom sorting\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSort the rows on basis of their kth column value.\\nUse inline custom sorting method\\n# Complexity\\n- Time complexity: O(Nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:  \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        //custom sorting inline\\n        sort(score.begin(), score.end(), [k](vector<int> a, vector<int> b) { return a[k] > b[k];});\\n        return score;\\n    }\\n};\\n```\\n![Upvote cat.jpg](https://assets.leetcode.com/users/images/137786c4-4661-4478-bba2-b074372ee44a_1674373614.9734707.jpeg)\\n\\n**Please Upvote if you found the solution helpful :)**\\n",
                "solutionTags": [
                    "C++",
                    "Sort",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:  \\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        //custom sorting inline\\n        sort(score.begin(), score.end(), [k](vector<int> a, vector<int> b) { return a[k] > b[k];});\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084911,
                "title": "sort-index-wise-easy-to-understand-c-solution",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    // int x;\\n    // bool static cmp(vector<int> &a,vector<int> &b){\\n    //     return a[x]>b[x];\\n    // }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>> v;\\n        for(int i = 0; i < score.size(); i++){\\n            v.push_back({score[i][k],i});\\n        }\\n        sort(v.begin(),v.end());\\n        vector<vector<int>> ans;\\n        for(int i = score.size()-1; i>=0; i--){\\n            ans.push_back(score[v[i][1]]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    // int x;\\n    // bool static cmp(vector<int> &a,vector<int> &b){\\n    //     return a[x]>b[x];\\n    // }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>> v;\\n        for(int i = 0; i < score.size(); i++){\\n            v.push_back({score[i][k],i});\\n        }\\n        sort(v.begin(),v.end());\\n        vector<vector<int>> ans;\\n        for(int i = score.size()-1; i>=0; i--){\\n            ans.push_back(score[v[i][1]]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084877,
                "title": "easy-to-understand-beats-80-using-comparator",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sort_score(vector<vector<int>>&score, int k){\\n        sort(score.begin(),score.end(),[k](vector<int>&x,vector<int>&y){\\n            return x[k] > y[k]; \\n        });\\n// sort using custom comparator..\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort_score(score,k);\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sort_score(vector<vector<int>>&score, int k){\\n        sort(score.begin(),score.end(),[k](vector<int>&x,vector<int>&y){\\n            return x[k] > y[k]; \\n        });\\n// sort using custom comparator..\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort_score(score,k);\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084583,
                "title": "easy-c-solution-loops-comparators-heaps",
                "content": "## With Comparators\\n```\\nstatic int ki=0;\\nclass Solution {\\npublic:\\n    \\n    static bool cmp(vector<int>& a, vector<int>& b){\\n        return a[ki] > b[ki];\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        ki= k;\\n        sort(score.begin(),score.end(),cmp);\\n        return score;\\n    }\\n};\\n```\\n## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n## Without Comparators\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for (int i=0; i<score.size(); i++){\\n            int ij= i;\\n            for (int j= i+1; j<score.size(); j++){\\n                if (score[ij][k]<score[j][k]){\\n                    ij= j;\\n                }\\n            }\\n            swap(score[i],score[ij]);\\n        }\\n        return score;\\n    }\\n};\\n```\\n## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n## Using Max Heap\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        priority_queue<pair<int,vector<int>>> pq;\\n        for (auto val: score){\\n            pq.push({val[k],val});\\n        }\\n        int i=0;\\n        while (!pq.empty()){\\n            score[i++]= pq.top().second;\\n            pq.pop();\\n        }\\n        return score;\\n    }\\n};\\n```\\n## Complexity\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n",
                "solutionTags": [
                    "C++",
                    "Sort",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nstatic int ki=0;\\nclass Solution {\\npublic:\\n    \\n    static bool cmp(vector<int>& a, vector<int>& b){\\n        return a[ki] > b[ki];\\n    }\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        ki= k;\\n        sort(score.begin(),score.end(),cmp);\\n        return score;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        for (int i=0; i<score.size(); i++){\\n            int ij= i;\\n            for (int j= i+1; j<score.size(); j++){\\n                if (score[ij][k]<score[j][k]){\\n                    ij= j;\\n                }\\n            }\\n            swap(score[i],score[ij]);\\n        }\\n        return score;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        priority_queue<pair<int,vector<int>>> pq;\\n        for (auto val: score){\\n            pq.push({val[k],val});\\n        }\\n        int i=0;\\n        while (!pq.empty()){\\n            score[i++]= pq.top().second;\\n            pq.pop();\\n        }\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084412,
                "title": "c-using-customer-comparator-t-c-o-nlogn-s-c-o-1",
                "content": "```\\nclass Comparator{\\n    int k;\\n    public:\\n    Comparator(int k){\\n        this->k = k;\\n    }\\n    \\n    bool operator()(vector<int> &v1, vector<int> &v2){\\n        return v1[k] > v2[k];\\n    }\\n};\\nclass Solution {\\n\\n\\t/*\\n\\t\\tTime Complexity: O(NlogN)\\n\\t\\tSpace Complexity: O(1)\\n\\t*/\\n\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(begin(score), end(score), Comparator(k));\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Comparator{\\n    int k;\\n    public:\\n    Comparator(int k){\\n        this->k = k;\\n    }\\n    \\n    bool operator()(vector<int> &v1, vector<int> &v2){\\n        return v1[k] > v2[k];\\n    }\\n};\\nclass Solution {\\n\\n\\t/*\\n\\t\\tTime Complexity: O(NlogN)\\n\\t\\tSpace Complexity: O(1)\\n\\t*/\\n\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(begin(score), end(score), Comparator(k));\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084140,
                "title": "easy-python-solution-hashmap",
                "content": "# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        hashmap = defaultdict(list)\\n        refer = {}\\n        ans = []\\n        for i in range(len(score)):\\n            hashmap[i].append(score[i])\\n            refer[i] = score[i][k]\\n        sorted_ans = [k for k, v in sorted(refer.items(), key=lambda a:a[1], reverse=True)]\\n        for k in sorted_ans:\\n            ans += hashmap[k]\\n        return ans\\n```\\nDo upvote if you like the solution :)",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "Sort"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        hashmap = defaultdict(list)\\n        refer = {}\\n        ans = []\\n        for i in range(len(score)):\\n            hashmap[i].append(score[i])\\n            refer[i] = score[i][k]\\n        sorted_ans = [k for k, v in sorted(refer.items(), key=lambda a:a[1], reverse=True)]\\n        for k in sorted_ans:\\n            ans += hashmap[k]\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084135,
                "title": "c-sort-using-simple-comparator-simple-and-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to sort the rows, on the order of the elements at Kth column.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor example:\\nInput: \\nscore = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2\\nOutput: \\n[[7,5,11,2],[10,6,9,1],[4,8,3,15]]\\n\\n```\\nHere for (k=2),\\nValues :\\n1st Col-> 9\\n2nd Col-> 11\\n3rd Col-> 3\\n\\nHere, 11>9>3 \\nSo, according to this order,\\nOutput: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]\\n```\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n            return a[k] > b[k];   //Checking kth index \\n        });\\n        return score;             //After Sorting\\n    }\\n};\\n```\\nPlease upvote \\uD83E\\uDD20\\uD83C\\uDF83",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nHere for (k=2),\\nValues :\\n1st Col-> 9\\n2nd Col-> 11\\n3rd Col-> 3\\n\\nHere, 11>9>3 \\nSo, according to this order,\\nOutput: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]\\n```\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n            return a[k] > b[k];   //Checking kth index \\n        });\\n        return score;             //After Sorting\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084078,
                "title": "java-one-liner-faster-than-100-java-8-is-chad",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083964,
                "title": "easy-cpp-solution-prioriyy-queue",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nEASY CPP SOLUTION USING PRIORITY QUEUE\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int n=score.size(),m=score[0].size(),i,j;\\n        vector<vector<int>>ans;\\n        \\n        priority_queue<pair<int,int>>pq;\\n        \\n        for(i=0;i<n;i++){\\n            pq.push({score[i][k],i});    \\n        }\\n        int r=0;\\n        while(!pq.empty()){\\n            vector<int>v;\\n            int idx=pq.top().second;\\n            pq.pop();\\n            for(i=0;i<m;i++){\\n                v.push_back(score[idx][i]);\\n            }\\n            ans.push_back(v);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nEASY CPP SOLUTION USING PRIORITY QUEUE\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int n=score.size(),m=score[0].size(),i,j;\\n        vector<vector<int>>ans;\\n        \\n        priority_queue<pair<int,int>>pq;\\n        \\n        for(i=0;i<n;i++){\\n            pq.push({score[i][k],i});    \\n        }\\n        int r=0;\\n        while(!pq.empty()){\\n            vector<int>v;\\n            int idx=pq.top().second;\\n            pq.pop();\\n            for(i=0;i<m;i++){\\n                v.push_back(score[idx][i]);\\n            }\\n            ans.push_back(v);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083936,
                "title": "c",
                "content": "```\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint cmp(const void* a , const void* b){\\n    int* A = *(int**)a ;\\n    int* B = *(int**)b ;\\n    return B[1] - A[1] ;\\n}\\nint** sortTheStudents(int** score, int scoreSize, int* scoreColSize, int k, int* returnSize, int** returnColumnSizes){\\n    int m = scoreSize ;\\n    int n = *scoreColSize ;\\n    int** ans = malloc(m * sizeof(int*) ) ;\\n    for(int i = 0; i < m; i++){\\n        ans[i] = malloc(n * sizeof(int) ) ;\\n    }\\n    \\n    int** data = malloc(m * sizeof(int*)) ;\\n    for(int i = 0; i < m; i++){\\n        data[i] = malloc(2 * sizeof(int)) ;\\n        data[i][0] = i ;\\n        data[i][1] = score[i][k] ;\\n    }\\n    qsort(data, m, sizeof(int*), cmp) ;\\n    \\n    for(int i = 0; i < m; i++){\\n        int r = data[i][0] ;\\n        memcpy(ans[i], score[r], n* sizeof(int)) ;\\n    }\\n    *returnSize = m;\\n    *returnColumnSizes = malloc(m * sizeof(int)) ;\\n    for(int i = 0; i < m; i++){\\n        returnColumnSizes[0][i] = n ;\\n    }\\n    return ans ;\\n}\\n```\\n",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "```\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint cmp(const void* a , const void* b){\\n    int* A = *(int**)a ;\\n    int* B = *(int**)b ;\\n    return B[1] - A[1] ;\\n}\\nint** sortTheStudents(int** score, int scoreSize, int* scoreColSize, int k, int* returnSize, int** returnColumnSizes){\\n    int m = scoreSize ;\\n    int n = *scoreColSize ;\\n    int** ans = malloc(m * sizeof(int*) ) ;\\n    for(int i = 0; i < m; i++){\\n        ans[i] = malloc(n * sizeof(int) ) ;\\n    }\\n    \\n    int** data = malloc(m * sizeof(int*)) ;\\n    for(int i = 0; i < m; i++){\\n        data[i] = malloc(2 * sizeof(int)) ;\\n        data[i][0] = i ;\\n        data[i][1] = score[i][k] ;\\n    }\\n    qsort(data, m, sizeof(int*), cmp) ;\\n    \\n    for(int i = 0; i < m; i++){\\n        int r = data[i][0] ;\\n        memcpy(ans[i], score[r], n* sizeof(int)) ;\\n    }\\n    *returnSize = m;\\n    *returnColumnSizes = malloc(m * sizeof(int)) ;\\n    for(int i = 0; i < m; i++){\\n        returnColumnSizes[0][i] = n ;\\n    }\\n    return ans ;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3083875,
                "title": "java-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,Comparator.comparingDouble(a -> a[k]));\\n        int i=0,j=score.length-1;\\n        while(i<j){\\n            int[] temp=score[i];\\n            score[i]=score[j];\\n            score[j]=temp;\\n            i++;\\n            j--;\\n        }\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,Comparator.comparingDouble(a -> a[k]));\\n        int i=0,j=score.length-1;\\n        while(i<j){\\n            int[] temp=score[i];\\n            score[i]=score[j];\\n            score[j]=temp;\\n            i++;\\n            j--;\\n        }\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083868,
                "title": "c-solution",
                "content": "C++ solution\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        bool flag=true;\\n        for(int i=0;i<score.size();i++){\\n            if(flag){\\n                flag = false;\\n                for(int j=0;j<score.size()-1;j++){\\n                    if(score[j][k]<score[j+1][k]){\\n                        score[j].swap(score[j+1]);\\n                        flag= true;\\n                    }\\n                }\\n            }\\n            else{\\n            break;\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        bool flag=true;\\n        for(int i=0;i<score.size();i++){\\n            if(flag){\\n                flag = false;\\n                for(int j=0;j<score.size()-1;j++){\\n                    if(score[j][k]<score[j+1][k]){\\n                        score[j].swap(score[j+1]);\\n                        flag= true;\\n                    }\\n                }\\n            }\\n            else{\\n            break;\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083862,
                "title": "python-solutio-using-for-loop-beats-64-time-complexity",
                "content": "# Complexity\\n- Time complexity: O(2*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(m*n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        arr = []\\n        kth = []\\n        for i in range(len(score)):\\n            ka = score[i][k]\\n            kth.append(ka)\\n        for i in range(len(score)):\\n            maxi = kth.index(max(kth))\\n            arr.append(score[maxi])\\n            kth[maxi] = 0\\n        return arr\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        arr = []\\n        kth = []\\n        for i in range(len(score)):\\n            ka = score[i][k]\\n            kth.append(ka)\\n        for i in range(len(score)):\\n            maxi = kth.index(max(kth))\\n            arr.append(score[maxi])\\n            kth[maxi] = 0\\n        return arr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083858,
                "title": "my-simple-java-code-sorting",
                "content": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, new Comparator<int[]>() {           \\n          public int compare(int[] e1, int[] e2) {\\n            if (e1[k] >= e2[k]) return -1;\\n            else return 1;\\n          }\\n        });\\n        return score;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, new Comparator<int[]>() {           \\n          public int compare(int[] e1, int[] e2) {\\n            if (e1[k] >= e2[k]) return -1;\\n            else return 1;\\n          }",
                "codeTag": "Java"
            },
            {
                "id": 3083800,
                "title": "c-comp-sort",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> arr;\\n        for(int i=0;i<score.size();i++){\\n            arr.push_back({score[i][k],i});\\n        }\\n        sort(arr.begin(),arr.end(),[](pair<int,int> a,pair<int,int> b){\\n           return a.first>b.first; \\n        });\\n        vector<vector<int>> ans;\\n        for(int i=0;i<arr.size();i++){\\n            ans.push_back(score[arr[i].second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int,int>> arr;\\n        for(int i=0;i<score.size();i++){\\n            arr.push_back({score[i][k],i});\\n        }\\n        sort(arr.begin(),arr.end(),[](pair<int,int> a,pair<int,int> b){\\n           return a.first>b.first; \\n        });\\n        vector<vector<int>> ans;\\n        for(int i=0;i<arr.size();i++){\\n            ans.push_back(score[arr[i].second]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083767,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&k](vector<int> &ch1, vector<int> &ch2) {\\n            return ch1[k] > ch2[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        sort(score.begin(), score.end(), [&k](vector<int> &ch1, vector<int> &ch2) {\\n            return ch1[k] > ch2[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083761,
                "title": "sort-c-one-line",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& a, int k) {\\n        sort(a.begin(),a.end(),[&](auto a1,auto a2){\\n            return a1[k] > a2[k];\\n        });\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& a, int k) {\\n        sort(a.begin(),a.end(),[&](auto a1,auto a2){\\n            return a1[k] > a2[k];\\n        });\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4096368,
                "title": "easy-and-understandable-low-runtime-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] a, int[] b) {\\n                return Integer.compare(b[k], a[k]);\\n            }\\n        });\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] a, int[] b) {\\n                return Integer.compare(b[k], a[k]);\\n            }\\n        });\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089334,
                "title": "2545",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0;i<score.length;i++){\\n            for(int j=0;j<score.length-1;j++){\\n                if(score[j][k]<score[j+1][k]){\\n                    int []temp = score[j];\\n                    score[j] = score[j+1];\\n                    score[j+1] = temp;\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0;i<score.length;i++){\\n            for(int j=0;j<score.length-1;j++){\\n                if(score[j][k]<score[j+1][k]){\\n                    int []temp = score[j];\\n                    score[j] = score[j+1];\\n                    score[j+1] = temp;\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4088085,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sortTheStudents(self, score, k):\\n        \"\"\"\\n        :type score: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        return sorted(score, key=lambda score:score[k], reverse=True)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sortTheStudents(self, score, k):\\n        \"\"\"\\n        :type score: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        \"\"\"\\n        return sorted(score, key=lambda score:score[k], reverse=True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084512,
                "title": "python3-easy-to-understand-memory-efficient-solution-beats-84-97-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        sc = []\\n        n = len(score)\\n        for i in range(n):\\n            sc.append(score[i][k])\\n        res = []\\n        for i in range(n):\\n            m = max(sc)\\n            idx_m = sc.index(m)\\n            sc[idx_m] = 0\\n            res.append(score[idx_m])\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        sc = []\\n        n = len(score)\\n        for i in range(n):\\n            sc.append(score[i][k])\\n        res = []\\n        for i in range(n):\\n            m = max(sc)\\n            idx_m = sc.index(m)\\n            sc[idx_m] = 0\\n            res.append(score[idx_m])\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4082152,
                "title": "python-n-2-manual-sort",
                "content": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:        \\n\\t    # this is too easy, skipping\\n        # return sorted(score, key=lambda r: -r[k])\\n        \\n\\t    # this is also too easy, but more text and we can talk with an interviewer about T O(n^2) S O(1)\\n        R = len(score)\\n        for fixed in range(R):\\n            row_max_val = fixed\\n            for r in range(fixed, R):\\n                if score[r][k] > score[row_max_val][k]:\\n                    row_max_val = r\\n            score[fixed], score[row_max_val] = score[row_max_val], score[fixed]\\n        return score\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:        \\n\\t    # this is too easy, skipping\\n        # return sorted(score, key=lambda r: -r[k])\\n        \\n\\t    # this is also too easy, but more text and we can talk with an interviewer about T O(n^2) S O(1)\\n        R = len(score)\\n        for fixed in range(R):\\n            row_max_val = fixed\\n            for r in range(fixed, R):\\n                if score[r][k] > score[row_max_val][k]:\\n                    row_max_val = r\\n            score[fixed], score[row_max_val] = score[row_max_val], score[fixed]\\n        return score\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081252,
                "title": "easy-python3",
                "content": "\\n# Complexity\\n- Time complexity:\\n    O(N*logN)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        score.sort(key=lambda x:x[k],reverse=True)\\n        return score\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        score.sort(key=lambda x:x[k],reverse=True)\\n        return score\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4080451,
                "title": "c-sort-fonction-one-line",
                "content": "# Approach\\nsimple usage of sort fonction\\nDoc ref : https://en.cppreference.com/w/cpp/algorithm/sort \\n# Complexity\\n- Time complexity: O(n*log(n));\\n\\n- Space complexity: O(1)\\n# Code\\n```c++\\n class Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n      sort(score.begin(),score.end(),[&k](const vector<int>& a,const vector<int>& b ){return a[k]>b[k];});  \\n      return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```c++\\n class Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n      sort(score.begin(),score.end(),[&k](const vector<int>& a,const vector<int>& b ){return a[k]>b[k];});  \\n      return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075575,
                "title": "python-too-easy-solution-with-key-sorting",
                "content": "![image.png](https://assets.leetcode.com/users/images/ed539b7d-54d5-4c68-a335-c2924e3c7efa_1695368462.0255215.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda row: row[k], reverse=True)\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda row: row[k], reverse=True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075372,
                "title": "java-easy-100-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n  public static int[][] sortTheStudents(int[][] score, int k) {\\n    var i =0;\\n    var j = -1;\\n    while(i < score.length){\\n      var maxIndex = findMaxIndex(score, j, k);\\n      j++;\\n      var temp = score[j];\\n      score[j] = score[maxIndex];\\n      score[maxIndex] =temp;\\n      i++;\\n    }\\n    return score;\\n  }\\n\\n  private static int findMaxIndex(int[][] score,int j, int k){\\n    var index = -1;\\n    var value = -1;\\n    for(int i = score.length-1; i > j; i--) {\\n      var current = score[i][k];\\n      if(current > value){\\n        value = current;\\n        index = i;\\n      }\\n    }\\n    return index;\\n  }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public static int[][] sortTheStudents(int[][] score, int k) {\\n    var i =0;\\n    var j = -1;\\n    while(i < score.length){\\n      var maxIndex = findMaxIndex(score, j, k);\\n      j++;\\n      var temp = score[j];\\n      score[j] = score[maxIndex];\\n      score[maxIndex] =temp;\\n      i++;\\n    }\\n    return score;\\n  }\\n\\n  private static int findMaxIndex(int[][] score,int j, int k){\\n    var index = -1;\\n    var value = -1;\\n    for(int i = score.length-1; i > j; i--) {\\n      var current = score[i][k];\\n      if(current > value){\\n        value = current;\\n        index = i;\\n      }\\n    }\\n    return index;\\n  }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071783,
                "title": "js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    return score.sort((student1, student2) => {\\n        return student2[k] - student1[k]; \\n    })\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    return score.sort((student1, student2) => {\\n        return student2[k] - student1[k]; \\n    })\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071166,
                "title": "single-line-solution-in-python3",
                "content": "# Complexity\\n- Time complexity: $$O(nlogn)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return list(sorted(score, key=lambda row: row[k], reverse=True))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return list(sorted(score, key=lambda row: row[k], reverse=True))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069492,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        scores_list = []\\n\\n        for r in range(len(score)):\\n            scores_list.append([r, score[r][k]])\\n        \\n        scores_list = sorted(scores_list, key= lambda x: -x[1])\\n\\n        res = []\\n        for r, count in scores_list:\\n            res.append(score[r])\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        scores_list = []\\n\\n        for r in range(len(score)):\\n            scores_list.append([r, score[r][k]])\\n        \\n        scores_list = sorted(scores_list, key= lambda x: -x[1])\\n\\n        res = []\\n        for r, count in scores_list:\\n            res.append(score[r])\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068768,
                "title": "beats-85",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(m*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(m)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int row = score.size();\\n        int col = score[0].size();\\n        int up = 0;\\n\\n        //creating a vector to store the kth column elements, this will be used to find the max_element and their indexes.\\n\\n        vector<int> kcol;\\n        for(int i = 0; i < row; ++i){\\n            kcol.push_back(score[i][k]);\\n        }\\n\\n        int left = 0;\\n        while(left < row - 1){\\n            //finding the max element.\\n            auto maxi = max_element(kcol.begin() + left, kcol.end());\\n\\n            //finding the index of the max element\\n            int ind = distance(kcol.begin(), maxi);\\n\\n            //first of all swap the kcol array elements.\\n            swap(kcol[left], kcol[ind]);\\n\\n            //swapping all the elements of the two rows in question.\\n            for(int i = 0; i < col; ++i){\\n                swap(score[up][i], score[ind][i]);\\n            }\\n            up++;\\n            left++;\\n        }\\n\\n        return score;\\n    }\\n};\\n\\n// class Solution{\\n//     public:\\n//     vector<vector<int>> sortTheStudents(vector<vector<int>> &score, int k){\\n//             std::sort(score.begin(), score.end(), [&](const std::vector<int>& a, const std::vector<int>& b) {\\n//             return a[k] > b[k];\\n//         });\\n        \\n//         return score;\\n//     }\\n// };\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        \\n        int row = score.size();\\n        int col = score[0].size();\\n        int up = 0;\\n\\n        //creating a vector to store the kth column elements, this will be used to find the max_element and their indexes.\\n\\n        vector<int> kcol;\\n        for(int i = 0; i < row; ++i){\\n            kcol.push_back(score[i][k]);\\n        }\\n\\n        int left = 0;\\n        while(left < row - 1){\\n            //finding the max element.\\n            auto maxi = max_element(kcol.begin() + left, kcol.end());\\n\\n            //finding the index of the max element\\n            int ind = distance(kcol.begin(), maxi);\\n\\n            //first of all swap the kcol array elements.\\n            swap(kcol[left], kcol[ind]);\\n\\n            //swapping all the elements of the two rows in question.\\n            for(int i = 0; i < col; ++i){\\n                swap(score[up][i], score[ind][i]);\\n            }\\n            up++;\\n            left++;\\n        }\\n\\n        return score;\\n    }\\n};\\n\\n// class Solution{\\n//     public:\\n//     vector<vector<int>> sortTheStudents(vector<vector<int>> &score, int k){\\n//             std::sort(score.begin(), score.end(), [&](const std::vector<int>& a, const std::vector<int>& b) {\\n//             return a[k] > b[k];\\n//         });\\n        \\n//         return score;\\n//     }\\n// };\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068642,
                "title": "really-the-easyest-way-to-solve-this",
                "content": "# Intuition\\nI just thought about using sorted(), and lambda as key\\n\\n# Complexity\\n- Time complexity:\\nO(n * log(n))\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nfrom typing import List\\n\\n\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x: x[k], reverse=True)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom typing import List\\n\\n\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x: x[k], reverse=True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064089,
                "title": "78-3-lines-solution-with-sorted-function",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        def sort_by(row):\\n            return row[k]\\n        score=sorted(score, key=sort_by,reverse=True)\\n        return score\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        def sort_by(row):\\n            return row[k]\\n        score=sorted(score, key=sort_by,reverse=True)\\n        return score\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061255,
                "title": "short-code-in-java",
                "content": "\\n# Approach\\nSort 2D array on the basis of kth column.\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public static void sortbyColumn(int arr[][], int col)\\n    {\\n      Arrays.sort(arr, (a, b) -> Integer.compare(b[col],a[col])); \\n    }\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        sortbyColumn(score,k);\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static void sortbyColumn(int arr[][], int col)\\n    {\\n      Arrays.sort(arr, (a, b) -> Integer.compare(b[col],a[col])); \\n    }\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        sortbyColumn(score,k);\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4058686,
                "title": "java-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,(a,b)->b[k]-a[k]); return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score,(a,b)->b[k]-a[k]); return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051257,
                "title": "using-priority-queue-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>>ans;\\n        priority_queue<int>pq;\\n        for(int i =0;i< score.size();i++){\\n            pq.push(score[i][k]);\\n            \\n        }\\n        while(!pq.empty()){\\n            int temp= pq.top();\\n            pq.pop();\\n            for(int i =0;i< score.size();i++){\\n                if(score[i][k] == temp){\\n                    vector<int>res;\\n                    for(int j = 0; j< score[0].size();j++){\\n                        res.push_back(score[i][j]);\\n                        \\n                    }\\n                    ans.push_back(res);\\n                }\\n                \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<vector<int>>ans;\\n        priority_queue<int>pq;\\n        for(int i =0;i< score.size();i++){\\n            pq.push(score[i][k]);\\n            \\n        }\\n        while(!pq.empty()){\\n            int temp= pq.top();\\n            pq.pop();\\n            for(int i =0;i< score.size();i++){\\n                if(score[i][k] == temp){\\n                    vector<int>res;\\n                    for(int j = 0; j< score[0].size();j++){\\n                        res.push_back(score[i][j]);\\n                        \\n                    }\\n                    ans.push_back(res);\\n                }\\n                \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049958,
                "title": "sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0;i<score.length-1;i++){\\n            int smallest=score[0][k];\\n            int p=0,q=score.length-i-1;\\n            for(int j=0;j<score.length-i;j++){\\n                if(smallest>=score[j][k]){\\n                    smallest=score[j][k];\\n                    p=j;\\n                }\\n                q=j;\\n            }\\n            if(p==q){\\n                continue;\\n            }\\n            for(int j=0;j<score[0].length;j++){\\n                smallest=score[p][j];\\n                score[p][j]=score[q][j];\\n                score[q][j]=smallest;\\n                }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0;i<score.length-1;i++){\\n            int smallest=score[0][k];\\n            int p=0,q=score.length-i-1;\\n            for(int j=0;j<score.length-i;j++){\\n                if(smallest>=score[j][k]){\\n                    smallest=score[j][k];\\n                    p=j;\\n                }\\n                q=j;\\n            }\\n            if(p==q){\\n                continue;\\n            }\\n            for(int j=0;j<score[0].length;j++){\\n                smallest=score[p][j];\\n                score[p][j]=score[q][j];\\n                score[q][j]=smallest;\\n                }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049487,
                "title": "typescript-4-lines-super-easy-solution",
                "content": "# Intuition\\nNo additional space is used. Use the built in sort and compare by the k\\'th value. We can use a lambda function to compare two arrays, and return the larger of the two using `b[k]-a[k]`.\\n\\n# Approach\\nSee code.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n log n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nfunction sortTheStudents(score: number[][], k: number): number[][] {\\n    score.sort((a: number[], b: number[]) => {\\n        return b[k]-a[k];\\n    });\\n    return score;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction sortTheStudents(score: number[][], k: number): number[][] {\\n    score.sort((a: number[], b: number[]) => {\\n        return b[k]-a[k];\\n    });\\n    return score;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048589,
                "title": "python-one-liner",
                "content": "# Complexity\\n- Time complexity:\\n$$O(m*log(m))$$\\n\\n- Space complexity:\\n$$O(m*n)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x:x[k], reverse=True)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x:x[k], reverse=True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045764,
                "title": "python-olution",
                "content": "# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x: x[k],reverse = True)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda x: x[k],reverse = True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038445,
                "title": "very-easy-solution-in-c-one-nested-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        for(int i=0 ; i<score.size();i++)\\n        {\\n            for(int j=0 ; j<score.size(); j++)\\n            {\\n                if(score[i][k]>score[j][k]){\\n                    swap(score[i],score[j]);\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        for(int i=0 ; i<score.size();i++)\\n        {\\n            for(int j=0 ; j<score.size(); j++)\\n            {\\n                if(score[i][k]>score[j][k]){\\n                    swap(score[i],score[j]);\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036484,
                "title": "easy-c-solution-using-priority-queue-concept",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIn priority queue , the elements are stored in sorted fashion. So, we insert the elements of kth column with their index number. {score[i][k] , i} . Remember to put score first so that elements are sorted according to score and not the index. After that take the pair at top of priority queue and push the index row of grid in new matrix.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n*n)\\n# Code\\n```\\nclass Solution {\\npublic: \\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        priority_queue<pair<int , int>> pq ;\\n        int n = score.size();\\n        for(int i = 0 ; i<n ;i++){\\n            pq.push({score[i][k] , i});\\n        }\\n        vector<vector<int>> ans ;\\n        while(!pq.empty()){\\n            int index = pq.top().second;\\n            ans.push_back(score[index]);\\n            pq.pop();\\n        }\\n        return ans ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic: \\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        priority_queue<pair<int , int>> pq ;\\n        int n = score.size();\\n        for(int i = 0 ; i<n ;i++){\\n            pq.push({score[i][k] , i});\\n        }\\n        vector<vector<int>> ans ;\\n        while(!pq.empty()){\\n            int index = pq.top().second;\\n            ans.push_back(score[index]);\\n            pq.pop();\\n        }\\n        return ans ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034204,
                "title": "java-easy-solution-bruteforce",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0; i<score.length; i++){\\n            for(int j=0; j<score.length; j++){\\n                if(score[i][k] > score[j][k]){\\n                    int[] temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=0; i<score.length; i++){\\n            for(int j=0; j<score.length; j++){\\n                if(score[i][k] > score[j][k]){\\n                    int[] temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031863,
                "title": "c-easy-solution-one-line-code-using-sorting",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       sort(score.begin(),score.end(), [k](const vector<int>& a, const vector<int>& b){\\n           return a[k]>b[k];\\n       });\\n       return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n       sort(score.begin(),score.end(), [k](const vector<int>& a, const vector<int>& b){\\n           return a[k]>b[k];\\n       });\\n       return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031394,
                "title": "one-liner-python-solution",
                "content": "# Intuition\\nUse the python provided `sorted` function.\\n\\n# Approach\\nUse the python provided `sorted` function.\\n\\n# Complexity\\n- Time complexity: $$O(n lg n)$$ where $$n$$ is the number of students.\\n\\n- Space complexity: $$O(1)$$ since we are sorting in-place.\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key = lambda x: x[k], reverse = True)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key = lambda x: x[k], reverse = True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026041,
                "title": "1-liner-beat-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {    \\n        sort(score.begin(),score.end(),[&](vector<int>&a,vector<int>&b){\\n            return a[k]>b[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {    \\n        sort(score.begin(),score.end(),[&](vector<int>&a,vector<int>&b){\\n            return a[k]>b[k];\\n        });\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019480,
                "title": "python-built-in-method-sort",
                "content": "# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        \\n        score.sort(reverse=True, key=lambda x: x[k])\\n\\n        return score\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        \\n        score.sort(reverse=True, key=lambda x: x[k])\\n\\n        return score\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013091,
                "title": "one-line-solution-runtime-beats-93-26-w-explanation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsimply we just sort the array according to kth index of each row\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    return score.sort((a, b) => b[k] - a[k])\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} score\\n * @param {number} k\\n * @return {number[][]}\\n */\\nvar sortTheStudents = function(score, k) {\\n    return score.sort((a, b) => b[k] - a[k])\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008538,
                "title": "using-dictionaries-in-python-very-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        dict={}\\n        for i in range(len(score)):dict[score[i][k]]=score[i]\\n        scoreans=[]\\n        for i in sorted(dict):scoreans.append(dict[i])\\n        return scoreans[-1::-1]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        dict={}\\n        for i in range(len(score)):dict[score[i][k]]=score[i]\\n        scoreans=[]\\n        for i in sorted(dict):scoreans.append(dict[i])\\n        return scoreans[-1::-1]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4008271,
                "title": "very-easy-for-beginners-2-lines-beats-90-percent",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        score.sort(key=lambda x:x[k],reverse=True)\\n        return score\\n        \\n        \\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        score.sort(key=lambda x:x[k],reverse=True)\\n        return score\\n        \\n        \\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006974,
                "title": "one-line-code-simplest-code-possible",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        sort(score.begin(),score.end(),[&](vector<int> a,vector<int> b)\\n        {\\n            return a[k]>b[k];\\n        });\\n        return score;  \\n    }\\n};\\n```\\n![PlsUpvote.jpeg](https://assets.leetcode.com/users/images/4af36189-1f91-4c6a-9989-f92ccf99ce71_1693939789.0546055.webp)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) \\n    {\\n        sort(score.begin(),score.end(),[&](vector<int> a,vector<int> b)\\n        {\\n            return a[k]>b[k];\\n        });\\n        return score;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005874,
                "title": "simple-o-n-solution",
                "content": "# Intuition\\nUse the map to store the indexes of the matrix of \"k\" exam marks in decreasing order. \\n# Approach\\nput the map to store the indexes of the matrix of \"k\" exam marks in decreasing order. Then iterate the map and store the rows to the final result.\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        std::map<int, int, greater<int> > markToStudentsMap; \\n        int idx=0;\\n        vector<vector<int>> result(score.size());\\n\\n        while(idx<score.size())\\n        {\\n            markToStudentsMap[score[idx][k]] = idx;\\n            idx++;\\n        }\\n        idx=0;\\n        for(auto itr : markToStudentsMap) {\\n            result[idx] = score[itr.second];\\n            idx++;\\n        }\\n        return result;\\n    }   \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        std::map<int, int, greater<int> > markToStudentsMap; \\n        int idx=0;\\n        vector<vector<int>> result(score.size());\\n\\n        while(idx<score.size())\\n        {\\n            markToStudentsMap[score[idx][k]] = idx;\\n            idx++;\\n        }\\n        idx=0;\\n        for(auto itr : markToStudentsMap) {\\n            result[idx] = score[itr.second];\\n            idx++;\\n        }\\n        return result;\\n    }   \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002511,
                "title": "simple-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        \\n        for i in range(len(score)):\\n            for j in range(len(score)-1-i):\\n                if score[j][k]>score[j+1][k]:\\n                    temp=score[j]\\n                    score[j]=score[j+1]\\n                    score[j+1]=temp\\n        return score[::-1]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        \\n        for i in range(len(score)):\\n            for j in range(len(score)-1-i):\\n                if score[j][k]>score[j+1][k]:\\n                    temp=score[j]\\n                    score[j]=score[j+1]\\n                    score[j+1]=temp\\n        return score[::-1]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002509,
                "title": "2545-sort-the-students-by-their-kth-score",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing HashMap\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] arr=new int[score.length][score[0].length];\\n       HashMap<Integer,Integer>hm=new HashMap<>();\\n        for(int i=0;i<score.length;i++){\\n            hm.put(score[i][k],i);\\n        }\\n        ArrayList<Integer>al=new ArrayList<>(hm.keySet());\\n        Collections.sort(al,Collections.reverseOrder());\\n         int b=0;\\n        for(Integer d:al){\\n            int a=hm.get(d);\\n           for(int j=0;j<score[0].length;j++){\\n                   int l=score[a][j];\\n                   arr[b][j]=l;\\n\\n                }\\n                b++;\\n\\n            }\\n            return arr;\\n        }\\n\\n       \\n\\n\\n        \\n        \\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] arr=new int[score.length][score[0].length];\\n       HashMap<Integer,Integer>hm=new HashMap<>();\\n        for(int i=0;i<score.length;i++){\\n            hm.put(score[i][k],i);\\n        }\\n        ArrayList<Integer>al=new ArrayList<>(hm.keySet());\\n        Collections.sort(al,Collections.reverseOrder());\\n         int b=0;\\n        for(Integer d:al){\\n            int a=hm.get(d);\\n           for(int j=0;j<score[0].length;j++){\\n                   int l=score[a][j];\\n                   arr[b][j]=l;\\n\\n                }\\n                b++;\\n\\n            }\\n            return arr;\\n        }\\n\\n       \\n\\n\\n        \\n        \\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4000566,
                "title": "vector-pair-int-vector-nice-question-easiest-explanation-must-see-unique-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int, vector<int>>> v;\\n        vector<int>filler;\\n        int f;\\n        for(int i=0; i<score.size(); i++){\\n            for(int j=0; j<score[i].size(); j++){\\n                if(j==k){\\n                    f = score[i][j];\\n                }\\n\\n                filler.push_back(score[i][j]);\\n            }\\n            v.push_back({f, filler});\\n            filler.clear();\\n        }\\n\\n        sort(v.begin(), v.end());\\n        reverse(v.begin(), v.end());\\n        score.clear();\\n\\n        for(int i=0; i<v.size(); i++){\\n            for(int j=0; j<v[i].second.size(); j++){\\n                filler.push_back(v[i].second[j]);\\n            }\\n            score.push_back(filler);\\n            filler.clear();\\n        }\\n\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Sort",
                    "Brainteaser",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<pair<int, vector<int>>> v;\\n        vector<int>filler;\\n        int f;\\n        for(int i=0; i<score.size(); i++){\\n            for(int j=0; j<score[i].size(); j++){\\n                if(j==k){\\n                    f = score[i][j];\\n                }\\n\\n                filler.push_back(score[i][j]);\\n            }\\n            v.push_back({f, filler});\\n            filler.clear();\\n        }\\n\\n        sort(v.begin(), v.end());\\n        reverse(v.begin(), v.end());\\n        score.clear();\\n\\n        for(int i=0; i<v.size(); i++){\\n            for(int j=0; j<v[i].second.size(); j++){\\n                filler.push_back(v[i].second[j]);\\n            }\\n            score.push_back(filler);\\n            filler.clear();\\n        }\\n\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3995305,
                "title": "java-one-liner-with-lambda-expression",
                "content": "## Code: Java one liner\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);  \\n        return score;   \\n    }\\n}\\n```\\n\\n## Code: More fine grained with loops, properly functionally decoupled code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        for(int i=0; i<score.length-1; i++) {\\n            int rowWithMax = getMaxRow(score, k, i+1); \\n            // swap it with ith row if desired\\n            if(score[rowWithMax][k] > score[i][k]) {\\n                swapRow(score, i, rowWithMax); \\n            }\\n        }\\n\\n        return score; \\n    }\\n\\n    int getMaxRow(int[][] arr, int k, int i) {\\n        int maxRow = -1;\\n        int maxEle = -1;  \\n        for(int j=i; j<arr.length; j++) {\\n            if(arr[j][k] > maxEle) {\\n                maxRow = j; \\n                maxEle = arr[j][k]; \\n            }\\n        }\\n        return maxRow; \\n    } \\n\\n    void swapRow(int[][] score, int i, int j) {\\n        // swap ith row with jth row\\n        for(int k=0; k<score[0].length; k++) {\\n            int temp = score[i][k]; \\n            score[i][k] = score[j][k]; \\n            score[j][k] = temp; \\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score, (a, b) -> b[k] - a[k]);  \\n        return score;   \\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        for(int i=0; i<score.length-1; i++) {\\n            int rowWithMax = getMaxRow(score, k, i+1); \\n            // swap it with ith row if desired\\n            if(score[rowWithMax][k] > score[i][k]) {\\n                swapRow(score, i, rowWithMax); \\n            }\\n        }\\n\\n        return score; \\n    }\\n\\n    int getMaxRow(int[][] arr, int k, int i) {\\n        int maxRow = -1;\\n        int maxEle = -1;  \\n        for(int j=i; j<arr.length; j++) {\\n            if(arr[j][k] > maxEle) {\\n                maxRow = j; \\n                maxEle = arr[j][k]; \\n            }\\n        }\\n        return maxRow; \\n    } \\n\\n    void swapRow(int[][] score, int i, int j) {\\n        // swap ith row with jth row\\n        for(int k=0; k<score[0].length; k++) {\\n            int temp = score[i][k]; \\n            score[i][k] = score[j][k]; \\n            score[j][k] = temp; \\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990690,
                "title": "the-faster-and-best-from-memory-beats-92-11-of-time-beats-100-of-memory-iterative-qsort",
                "content": "# Intuition\\nUsing iterative quicksort sorting\\n\\n# Approach\\nI think that the main point of this task is to do it yourself. So the task is medium.\\nWe need to implement faster sorting using two aspects: time and memory. When using the recursive method, a lot of memory is required, and the time in this case depends on the type of your qsort. I used non-recursive method and stack for it. So I won in memory and time.\\n\\n# Complexity\\n- Time complexity:\\n$$O(nlogn)$$\\n\\n# Code\\n```\\ntype Stack struct {\\n    start, end int\\n}\\n\\nfunc partition(score [][]int, start, end, k int) int {\\n    pIndex := start;\\n    for i := start; i < end; i++{\\n        if score[i][k] > score[end][k] {\\n            score[i], score[pIndex] = score[pIndex], score[i]\\n            pIndex++;\\n        }\\n    }\\n    score[end], score[pIndex] = score[pIndex], score[end]\\n \\n    return pIndex;\\n}\\n \\nfunc iterativeQuicksort(score [][]int, k int) [][]int {\\n    stack := make([]Stack, 0)\\n    start := 0;\\n    end := len(score) - 1;\\n\\n    stack = append(stack, Stack{start, end})\\n \\n    for len(stack) != 0 {\\n        start = stack[len(stack) - 1].start\\n        end = stack[len(stack) - 1].end\\n        stack = stack[:len(stack) - 1]\\n\\n        pivot := partition(score, start, end, k);\\n        if pivot - 1 > start {\\n            stack = append(stack, Stack{start, pivot - 1})\\n        }\\n        if pivot + 1 < end {\\n            stack = append(stack, Stack{pivot + 1, end})\\n        }\\n    }\\n    return score\\n}\\n\\n\\nfunc sortTheStudents(score [][]int, k int) [][]int {\\n    return iterativeQuicksort(score, k)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Stack struct {\\n    start, end int\\n}\\n\\nfunc partition(score [][]int, start, end, k int) int {\\n    pIndex := start;\\n    for i := start; i < end; i++{\\n        if score[i][k] > score[end][k] {\\n            score[i], score[pIndex] = score[pIndex], score[i]\\n            pIndex++;\\n        }\\n    }\\n    score[end], score[pIndex] = score[pIndex], score[end]\\n \\n    return pIndex;\\n}\\n \\nfunc iterativeQuicksort(score [][]int, k int) [][]int {\\n    stack := make([]Stack, 0)\\n    start := 0;\\n    end := len(score) - 1;\\n\\n    stack = append(stack, Stack{start, end})\\n \\n    for len(stack) != 0 {\\n        start = stack[len(stack) - 1].start\\n        end = stack[len(stack) - 1].end\\n        stack = stack[:len(stack) - 1]\\n\\n        pivot := partition(score, start, end, k);\\n        if pivot - 1 > start {\\n            stack = append(stack, Stack{start, pivot - 1})\\n        }\\n        if pivot + 1 < end {\\n            stack = append(stack, Stack{pivot + 1, end})\\n        }\\n    }\\n    return score\\n}\\n\\n\\nfunc sortTheStudents(score [][]int, k int) [][]int {\\n    return iterativeQuicksort(score, k)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3981122,
                "title": "java-hashmap-swap-methods",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        HashMap<Integer, ArrayList<Integer>> m = new HashMap<>();\\n        ArrayList<Integer> ref = new ArrayList<>();\\n        for(int i = 0; i < score.length; i++)\\n        {\\n            int key = score[i][k];\\n            ref.add(key);\\n            ArrayList<Integer> temp = new ArrayList<>();\\n            for(int j = 0; j < score[0].length; j++) temp.add(score[i][j]);\\n            m.put(key,temp);\\n        }\\n        Collections.sort(ref, Collections.reverseOrder());\\n        for(int i = 0; i < score.length; i++)\\n        {\\n            ArrayList<Integer> t = m.get(ref.get(i));\\n            for(int j = 0; j < score[0].length; j++) score[i][j] = t.get(j);\\n        }\\n        return score;\\n    }\\n}\\n```\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=score.length-1;i>=0;i--)\\n        {\\n            for(int j=score.length-1;j>=0;j--)\\n            {\\n                if(score[i][k]<score[j][k])\\n                {\\n                    int k1[]=score[i];\\n                    score[i]=score[j];\\n                    score[j]=k1;\\n                }\\n            }\\n        }\\n        return\\xA0score;\\n\\xA0\\xA0\\xA0\\xA0}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        HashMap<Integer, ArrayList<Integer>> m = new HashMap<>();\\n        ArrayList<Integer> ref = new ArrayList<>();\\n        for(int i = 0; i < score.length; i++)\\n        {\\n            int key = score[i][k];\\n            ref.add(key);\\n            ArrayList<Integer> temp = new ArrayList<>();\\n            for(int j = 0; j < score[0].length; j++) temp.add(score[i][j]);\\n            m.put(key,temp);\\n        }\\n        Collections.sort(ref, Collections.reverseOrder());\\n        for(int i = 0; i < score.length; i++)\\n        {\\n            ArrayList<Integer> t = m.get(ref.get(i));\\n            for(int j = 0; j < score[0].length; j++) score[i][j] = t.get(j);\\n        }\\n        return score;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        for(int i=score.length-1;i>=0;i--)\\n        {\\n            for(int j=score.length-1;j>=0;j--)\\n            {\\n                if(score[i][k]<score[j][k])\\n                {\\n                    int k1[]=score[i];\\n                    score[i]=score[j];\\n                    score[j]=k1;\\n                }\\n            }\\n        }\\n        return\\xA0score;\\n\\xA0\\xA0\\xA0\\xA0}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974678,
                "title": "java-comaparator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nYou can introduce  your custom logic to the standard sort in most of the languages... here in java we have Comparator interface where u can go and tell ur logic.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score , (a , b ) -> {\\n            return  b[k] - a[k];\\n        });\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        Arrays.sort(score , (a , b ) -> {\\n            return  b[k] - a[k];\\n        });\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974553,
                "title": "python-1-line-explained-codeplug",
                "content": "# Approach\\nSimply sort the rows according to a key i.e. score in the kth column.\\n\\n# Complexity\\n- Time complexity:\\n$$O(nlogn)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```python []\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda student: -student[k])\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Sorting",
                    "Matrix"
                ],
                "code": "```python []\\nclass Solution:\\n    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:\\n        return sorted(score, key=lambda student: -student[k])\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1770202,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1779716,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1995166,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1770226,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1768898,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1768838,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1768782,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 2048366,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 2039871,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1983894,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1770202,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1779716,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1995166,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1770226,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1768898,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1768838,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1768782,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 2048366,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 2039871,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1983894,
                "content": [
                    {
                        "username": "tsun_ud",
                        "content": "OMG how is this problem \"Medium\"? It\\'s just sorting, easily done in one line of code..."
                    },
                    {
                        "username": "masha-nv",
                        "content": "am i missing something? if the below is accepted, should be easy problem or set additional constraints to the challenge.\n\nvar sortTheStudents = function(score, k) {\n    return score.sort((a,b) => b[k]-a[k])\n};"
                    },
                    {
                        "username": "aniket141193",
                        "content": "Even though the in-built sorting method is acceptable for this problem, in a real interview, they might not ask you to use it. Because of this, the question can be considered of medium difficulty level.\n\nThe approach to solve the problem is as follows:\n\n1. Iterate through the matrix and create a keyArray from each matrix[I][k] element and a Map, where the key is matrix[I][k] and the value is the matrix[I] array.\n2. Sort the keyArray.\n3. Iterate through the sorted keyArray, fetch the corresponding array from the map, and build the answer matrix."
                    },
                    {
                        "username": "mciobanu",
                        "content": "I checked the hints and I find them rather bizarre. They seem to suggest to manually implement an Insertion Sort. I guess in a real interview we\\'d agree to implement a Quick Sort or a Heap Sort."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "If I declare my comparator function in the Solution class, it shows compile error? What\\'s the reason for it?\\nIf I write it outside, it gets accepted. Here is my accepted code\\n\\nint temp;\\nbool comparator(vector<int>& score1,vector<int>& score2){\\n    return score1[temp]>score2[temp];\\n}\\n\\nclass Solution {\\npublic:\\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        temp=k;\\n        sort(score.begin(),score.end(),comparator);\\n        return score;\\n    }\\n};"
                    },
                    {
                        "username": "jfracine",
                        "content": "Should probably be declared static when inside the class?"
                    },
                    {
                        "username": "nikhilrajsoni786",
                        "content": "Help please ,someone explain🙃\nwhy first code was not working and second is working:\nfirst code:\nclass Solution {\npublic:  \n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n       sort(score.begin(),score.end(),[k](vector<int>&a,vector<int>&b)\n    {\n        return b[k]-a[k];\n    });\n        return score;\n    }\n};\n\n\n\nsecond code:\nclass Solution {\npublic:\n    vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\n        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\n            return a[k] > b[k];   //Checking kth index \n        });\n        return score;             //After Sorting\n    }\n};\n\n\nbut in java first one is working:\njava code:\nclass Solution {\n    public int[][] sortTheStudents(int[][] score, int k) {\n        Arrays.sort(score,(l,m)->m[k]-l[k]);\n        return score;\n    }\n}\n"
                    },
                    {
                        "username": "nikhil909",
                        "content": "I got it no need to explain \\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "redhair_rs",
                        "content": "vector<vector<int>> sortMatrix(vector<vector<int>>& score, int k) {\\n    sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {\\n        return a[k] > b[k];\\n    });\\n    return score;\\n}\\n\\nin found is code on chatGPT  inbetween the contest ( submitted my own logic) it is working like what... \\nit was the B problem weekly contest329"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Good Problem . Hint Use Map . \\n<br>\\nMy Solution :->https://leetcode.com/problems/sort-the-students-by-their-kth-score/solutions/3083769/c-easy-and-simple-solution-using-map/?orderBy=most_votes"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "It is based on the simple sorting algo. Just sort the students on the basis of their kth index exam score and nothing else.\\nHere is the code snippet :\\n `vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {\\n        vector<int> temp;\\n        for(int i = 0; i < score.size()-1; i++){\\n            for(int j = i+1; j < score.size(); j++){\\n                if(score[i][k] < score[j][k]){\\n                    temp = score[i];\\n                    score[i] = score[j];\\n                    score[j] = temp;\\n                }\\n            }\\n        }        \\n        return score;\\n    }`"
                    },
                    {
                        "username": "vinnisnx",
                        "content": "When a medium question took me 100 less time than some \\'easy\\' ones..."
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I guess it can be a medium problem if you try to sort it without using a build-in sort function, since you have to consider sorting based on one value within the sublists and then reversing, but even then, it's not too bad."
                    }
                ]
            },
            {
                "id": 1946636,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1883914,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1811434,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1801873,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1780602,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1778226,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1775304,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1775300,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1770092,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            },
            {
                "id": 1769581,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "If distinct integers constraint is not there then it can be classified as medium/hard, as there will be cases of equality ... .its easy rn using inbuilt sort method."
                    },
                    {
                        "username": "stick109",
                        "content": "Not sure why it is medium, it is literally one line, `return score.OrderByDescending(x => x[k]).ToArray();`"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "why this question is rated \"medium\" I\\'ve passed this question easily \\uD83D\\uDE11"
                    },
                    {
                        "username": "dey19922708kumar",
                        "content": "Solution in java\\n\\n\\npublic int[][] sortTheStudents(int[][] score, int k) {\\n        int[][] result = new int[score.length][score[0].length];\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n        Integer[] arrayforSorting = new Integer[score.length];\\n        Integer count = k;\\n\\n         for(int i = 0; i < score.length; i++){\\n               map.put(score[i][count], i);\\n               arrayforSorting[i]=score[i][count];\\n         }\\n\\n         Arrays.sort(arrayforSorting, Collections.reverseOrder());\\n\\n         for(int i = 0; i < score.length; i++){\\n                count = map.get(arrayforSorting[i]);\\n\\n                for(int j = 0; j < score[0].length; j++){\\n                    result[i][j] = score[count][j];\\n                }\\n         }\\n\\n        // m stud n exams\\n        // k \\n        //\\n\\n\\n        // K colum sort in array\\n        // map K colu value index \\n        //9-0,11-1,3-2\\n        //11,9,3\\n\\n\\n          return result;\\n\\n    }"
                    },
                    {
                        "username": "josmoor98",
                        "content": "I think this should be probably be an easy problem"
                    },
                    {
                        "username": "codebrownie",
                        "content": "Its simple swap the Kth column with the starting column and then use STL sort to swap the rows content.\\nThen again swap the first column with Kth column and return the score vector."
                    },
                    {
                        "username": "JaganNehra",
                        "content": "\\t\\none line code \\nArrays.sort(score,(a,b)->b[k]-a[k]);\\n"
                    },
                    {
                        "username": "JaganNehra",
                        "content": "Best problem to use Comparator \\n\\nJava Solution \\n\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n\\n        KthRowSort kthRowSort = new KthRowSort(k);\\n    \\tArrays.sort(score,kthRowSort);\\n\\t\\treturn score;\\n    }\\n}\\nclass KthRowSort implements Comparator<int[]>{\\n\\n\\tint k =0;\\n\\t\\n\\tpublic  KthRowSort(int k) {\\n\\t\\tthis.k = k;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compare(int[] o1, int[] o2) {\\n\\t\\treturn o2[k]- o1[k];\\n\\t}\\n\\t\\n}"
                    },
                    {
                        "username": "syupeshdagar",
                        "content": "I am getting the same answer as expected but still its showing wrong answer. Can anyone please explain what is going on.\\nclass Solution {\\n    public int[][] sortTheStudents(int[][] score, int k) {\\n        int rows=score.length;\\n        int columns=score[0].length;\\n        Integer arr[]=new Integer[rows];\\n        for(int i=0;i<rows;i++){\\n            arr[i]=score[i][k];\\n        }\\n        Arrays.sort(arr,Collections.reverseOrder());\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<rows;j++){\\n                if(arr[i]==score[j][k]){\\n                    arr[i]=j;\\n                }\\n            }\\n        }\\n        int ans[][]=new int[rows][columns];\\n        for(int i=0;i<rows;i++){\\n            for(int j=0;j<columns;j++){\\n                ans[i][j]=score[arr[i]][j];\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "I saw some solution in  which people  have used comparator function Here is the link for detailed explanation of  comparator function he  has explained wonderfully with examples Go through it.\\n\\nhttps://leetcode.com/discuss/general-discussion/1094290/Custom-comparator-function-or-Cpp"
                    }
                ]
            }
        ]
    }
]